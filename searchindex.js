Search.setIndex({"docnames": ["about", "bugs", "c-api/abstract", "c-api/allocation", "c-api/apiabiversion", "c-api/arg", "c-api/bool", "c-api/buffer", "c-api/bytearray", "c-api/bytes", "c-api/call", "c-api/capsule", "c-api/cell", "c-api/code", "c-api/codec", "c-api/complex", "c-api/concrete", "c-api/contextvars", "c-api/conversion", "c-api/coro", "c-api/datetime", "c-api/descriptor", "c-api/dict", "c-api/exceptions", "c-api/file", "c-api/float", "c-api/frame", "c-api/function", "c-api/gcsupport", "c-api/gen", "c-api/hash", "c-api/import", "c-api/index", "c-api/init", "c-api/init_config", "c-api/intro", "c-api/iter", "c-api/iterator", "c-api/list", "c-api/long", "c-api/mapping", "c-api/marshal", "c-api/memory", "c-api/memoryview", "c-api/method", "c-api/module", "c-api/none", "c-api/number", "c-api/objbuffer", "c-api/object", "c-api/objimpl", "c-api/perfmaps", "c-api/refcounting", "c-api/reflection", "c-api/sequence", "c-api/set", "c-api/slice", "c-api/stable", "c-api/structures", "c-api/sys", "c-api/tuple", "c-api/type", "c-api/typehints", "c-api/typeobj", "c-api/unicode", "c-api/utilities", "c-api/veryhigh", "c-api/weakref", "contents", "copyright", "distributing/index", "extending/building", "extending/embedding", "extending/extending", "extending/index", "extending/newtypes", "extending/newtypes_tutorial", "extending/windows", "faq/design", "faq/extending", "faq/general", "faq/gui", "faq/index", "faq/installed", "faq/library", "faq/programming", "faq/windows", "glossary", "howto/annotations", "howto/argparse", "howto/clinic", "howto/cporting", "howto/curses", "howto/descriptor", "howto/enum", "howto/functional", "howto/gdb_helpers", "howto/index", "howto/instrumentation", "howto/ipaddress", "howto/isolating-extensions", "howto/logging", "howto/logging-cookbook", "howto/mro", "howto/perf_profiling", "howto/pyporting", "howto/regex", "howto/sockets", "howto/sorting", "howto/unicode", "howto/urllib2", "installing/index", "library/2to3", "library/__future__", "library/__main__", "library/_thread", "library/abc", "library/aifc", "library/allos", "library/archiving", "library/argparse", "library/array", "library/ast", "library/asyncio", "library/asyncio-api-index", "library/asyncio-dev", "library/asyncio-eventloop", "library/asyncio-exceptions", "library/asyncio-extending", "library/asyncio-future", "library/asyncio-llapi-index", "library/asyncio-platforms", "library/asyncio-policy", "library/asyncio-protocol", "library/asyncio-queue", "library/asyncio-runner", "library/asyncio-stream", "library/asyncio-subprocess", "library/asyncio-sync", "library/asyncio-task", "library/atexit", "library/audioop", "library/audit_events", "library/base64", "library/bdb", "library/binary", "library/binascii", "library/bisect", "library/builtins", "library/bz2", "library/calendar", "library/cgi", "library/cgitb", "library/chunk", "library/cmath", "library/cmd", "library/cmdline", "library/code", "library/codecs", "library/codeop", "library/collections", "library/collections.abc", "library/colorsys", "library/compileall", "library/concurrency", "library/concurrent", "library/concurrent.futures", "library/configparser", "library/constants", "library/contextlib", "library/contextvars", "library/copy", "library/copyreg", "library/crypt", "library/crypto", "library/csv", "library/ctypes", "library/curses", "library/curses.ascii", "library/curses.panel", "library/custominterp", "library/dataclasses", "library/datatypes", "library/datetime", "library/dbm", "library/debug", "library/decimal", "library/development", "library/devmode", "library/dialog", "library/difflib", "library/dis", "library/distribution", "library/doctest", "library/email", "library/email.charset", "library/email.compat32-message", "library/email.contentmanager", "library/email.encoders", "library/email.errors", "library/email.examples", "library/email.generator", "library/email.header", "library/email.headerregistry", "library/email.iterators", "library/email.message", "library/email.mime", "library/email.parser", "library/email.policy", "library/email.utils", "library/ensurepip", "library/enum", "library/errno", "library/exceptions", "library/faulthandler", "library/fcntl", "library/filecmp", "library/fileformats", "library/fileinput", "library/filesys", "library/fnmatch", "library/fractions", "library/frameworks", "library/ftplib", "library/functional", "library/functions", "library/functools", "library/gc", "library/getopt", "library/getpass", "library/gettext", "library/glob", "library/graphlib", "library/grp", "library/gzip", "library/hashlib", "library/heapq", "library/hmac", "library/html", "library/html.entities", "library/html.parser", "library/http", "library/http.client", "library/http.cookiejar", "library/http.cookies", "library/http.server", "library/i18n", "library/idle", "library/imaplib", "library/imghdr", "library/importlib", "library/importlib.metadata", "library/importlib.resources", "library/importlib.resources.abc", "library/index", "library/inspect", "library/internet", "library/intro", "library/io", "library/ipaddress", "library/ipc", "library/itertools", "library/json", "library/keyword", "library/language", "library/linecache", "library/locale", "library/logging", "library/logging.config", "library/logging.handlers", "library/lzma", "library/mailbox", "library/mailcap", "library/markup", "library/marshal", "library/math", "library/mimetypes", "library/mm", "library/mmap", "library/modulefinder", "library/modules", "library/msilib", "library/msvcrt", "library/multiprocessing", "library/multiprocessing.shared_memory", "library/netdata", "library/netrc", "library/nis", "library/nntplib", "library/numbers", "library/numeric", "library/operator", "library/optparse", "library/os", "library/os.path", "library/ossaudiodev", "library/pathlib", "library/pdb", "library/persistence", "library/pickle", "library/pickletools", "library/pipes", "library/pkgutil", "library/platform", "library/plistlib", "library/poplib", "library/posix", "library/pprint", "library/profile", "library/pty", "library/pwd", "library/py_compile", "library/pyclbr", "library/pydoc", "library/pyexpat", "library/python", "library/queue", "library/quopri", "library/random", "library/re", "library/readline", "library/reprlib", "library/resource", "library/rlcompleter", "library/runpy", "library/sched", "library/secrets", "library/security_warnings", "library/select", "library/selectors", "library/shelve", "library/shlex", "library/shutil", "library/signal", "library/site", "library/smtplib", "library/sndhdr", "library/socket", "library/socketserver", "library/spwd", "library/sqlite3", "library/ssl", "library/stat", "library/statistics", "library/stdtypes", "library/string", "library/stringprep", "library/struct", "library/subprocess", "library/sunau", "library/superseded", "library/symtable", "library/sys", "library/sys.monitoring", "library/sys_path_init", "library/sysconfig", "library/syslog", "library/tabnanny", "library/tarfile", "library/telnetlib", "library/tempfile", "library/termios", "library/test", "library/text", "library/textwrap", "library/threading", "library/time", "library/timeit", "library/tk", "library/tkinter", "library/tkinter.colorchooser", "library/tkinter.dnd", "library/tkinter.font", "library/tkinter.messagebox", "library/tkinter.scrolledtext", "library/tkinter.tix", "library/tkinter.ttk", "library/token", "library/tokenize", "library/tomllib", "library/trace", "library/traceback", "library/tracemalloc", "library/tty", "library/turtle", "library/types", "library/typing", "library/unicodedata", "library/unittest", "library/unittest.mock", "library/unittest.mock-examples", "library/unix", "library/urllib", "library/urllib.error", "library/urllib.parse", "library/urllib.request", "library/urllib.robotparser", "library/uu", "library/uuid", "library/venv", "library/warnings", "library/wave", "library/weakref", "library/webbrowser", "library/windows", "library/winreg", "library/winsound", "library/wsgiref", "library/xdrlib", "library/xml", "library/xml.dom", "library/xml.dom.minidom", "library/xml.dom.pulldom", "library/xml.etree.elementtree", "library/xml.sax", "library/xml.sax.handler", "library/xml.sax.reader", "library/xml.sax.utils", "library/xmlrpc", "library/xmlrpc.client", "library/xmlrpc.server", "library/zipapp", "library/zipfile", "library/zipimport", "library/zlib", "library/zoneinfo", "license", "reference/compound_stmts", "reference/datamodel", "reference/executionmodel", "reference/expressions", "reference/grammar", "reference/import", "reference/index", "reference/introduction", "reference/lexical_analysis", "reference/simple_stmts", "reference/toplevel_components", "tutorial/appendix", "tutorial/appetite", "tutorial/classes", "tutorial/controlflow", "tutorial/datastructures", "tutorial/errors", "tutorial/floatingpoint", "tutorial/index", "tutorial/inputoutput", "tutorial/interactive", "tutorial/interpreter", "tutorial/introduction", "tutorial/modules", "tutorial/stdlib", "tutorial/stdlib2", "tutorial/venv", "tutorial/whatnow", "using/cmdline", "using/configure", "using/editors", "using/index", "using/mac", "using/unix", "using/windows", "whatsnew/2.0", "whatsnew/2.1", "whatsnew/2.2", "whatsnew/2.3", "whatsnew/2.4", "whatsnew/2.5", "whatsnew/2.6", "whatsnew/2.7", "whatsnew/3.0", "whatsnew/3.1", "whatsnew/3.10", "whatsnew/3.11", "whatsnew/3.12", "whatsnew/3.2", "whatsnew/3.3", "whatsnew/3.4", "whatsnew/3.5", "whatsnew/3.6", "whatsnew/3.7", "whatsnew/3.8", "whatsnew/3.9", "whatsnew/changelog", "whatsnew/index"], "filenames": ["about.rst", "bugs.rst", "c-api/abstract.rst", "c-api/allocation.rst", "c-api/apiabiversion.rst", "c-api/arg.rst", "c-api/bool.rst", "c-api/buffer.rst", "c-api/bytearray.rst", "c-api/bytes.rst", "c-api/call.rst", "c-api/capsule.rst", "c-api/cell.rst", "c-api/code.rst", "c-api/codec.rst", "c-api/complex.rst", "c-api/concrete.rst", "c-api/contextvars.rst", "c-api/conversion.rst", "c-api/coro.rst", "c-api/datetime.rst", "c-api/descriptor.rst", "c-api/dict.rst", "c-api/exceptions.rst", "c-api/file.rst", "c-api/float.rst", "c-api/frame.rst", "c-api/function.rst", "c-api/gcsupport.rst", "c-api/gen.rst", "c-api/hash.rst", "c-api/import.rst", "c-api/index.rst", "c-api/init.rst", "c-api/init_config.rst", "c-api/intro.rst", "c-api/iter.rst", "c-api/iterator.rst", "c-api/list.rst", "c-api/long.rst", "c-api/mapping.rst", "c-api/marshal.rst", "c-api/memory.rst", "c-api/memoryview.rst", "c-api/method.rst", "c-api/module.rst", "c-api/none.rst", "c-api/number.rst", "c-api/objbuffer.rst", "c-api/object.rst", "c-api/objimpl.rst", "c-api/perfmaps.rst", "c-api/refcounting.rst", "c-api/reflection.rst", "c-api/sequence.rst", "c-api/set.rst", "c-api/slice.rst", "c-api/stable.rst", "c-api/structures.rst", "c-api/sys.rst", "c-api/tuple.rst", "c-api/type.rst", "c-api/typehints.rst", "c-api/typeobj.rst", "c-api/unicode.rst", "c-api/utilities.rst", "c-api/veryhigh.rst", "c-api/weakref.rst", "contents.rst", "copyright.rst", "distributing/index.rst", "extending/building.rst", "extending/embedding.rst", "extending/extending.rst", "extending/index.rst", "extending/newtypes.rst", "extending/newtypes_tutorial.rst", "extending/windows.rst", "faq/design.rst", "faq/extending.rst", "faq/general.rst", "faq/gui.rst", "faq/index.rst", "faq/installed.rst", "faq/library.rst", "faq/programming.rst", "faq/windows.rst", "glossary.rst", "howto/annotations.rst", "howto/argparse.rst", "howto/clinic.rst", "howto/cporting.rst", "howto/curses.rst", "howto/descriptor.rst", "howto/enum.rst", "howto/functional.rst", "howto/gdb_helpers.rst", "howto/index.rst", "howto/instrumentation.rst", "howto/ipaddress.rst", "howto/isolating-extensions.rst", "howto/logging.rst", "howto/logging-cookbook.rst", "howto/mro.rst", "howto/perf_profiling.rst", "howto/pyporting.rst", "howto/regex.rst", "howto/sockets.rst", "howto/sorting.rst", "howto/unicode.rst", "howto/urllib2.rst", "installing/index.rst", "library/2to3.rst", "library/__future__.rst", "library/__main__.rst", "library/_thread.rst", "library/abc.rst", "library/aifc.rst", "library/allos.rst", "library/archiving.rst", "library/argparse.rst", "library/array.rst", "library/ast.rst", "library/asyncio.rst", "library/asyncio-api-index.rst", "library/asyncio-dev.rst", "library/asyncio-eventloop.rst", "library/asyncio-exceptions.rst", "library/asyncio-extending.rst", "library/asyncio-future.rst", "library/asyncio-llapi-index.rst", "library/asyncio-platforms.rst", "library/asyncio-policy.rst", "library/asyncio-protocol.rst", "library/asyncio-queue.rst", "library/asyncio-runner.rst", "library/asyncio-stream.rst", "library/asyncio-subprocess.rst", "library/asyncio-sync.rst", "library/asyncio-task.rst", "library/atexit.rst", "library/audioop.rst", "library/audit_events.rst", "library/base64.rst", "library/bdb.rst", "library/binary.rst", "library/binascii.rst", "library/bisect.rst", "library/builtins.rst", "library/bz2.rst", "library/calendar.rst", "library/cgi.rst", "library/cgitb.rst", "library/chunk.rst", "library/cmath.rst", "library/cmd.rst", "library/cmdline.rst", "library/code.rst", "library/codecs.rst", "library/codeop.rst", "library/collections.rst", "library/collections.abc.rst", "library/colorsys.rst", "library/compileall.rst", "library/concurrency.rst", "library/concurrent.rst", "library/concurrent.futures.rst", "library/configparser.rst", "library/constants.rst", "library/contextlib.rst", "library/contextvars.rst", "library/copy.rst", "library/copyreg.rst", "library/crypt.rst", "library/crypto.rst", "library/csv.rst", "library/ctypes.rst", "library/curses.rst", "library/curses.ascii.rst", "library/curses.panel.rst", "library/custominterp.rst", "library/dataclasses.rst", "library/datatypes.rst", "library/datetime.rst", "library/dbm.rst", "library/debug.rst", "library/decimal.rst", "library/development.rst", "library/devmode.rst", "library/dialog.rst", "library/difflib.rst", "library/dis.rst", "library/distribution.rst", "library/doctest.rst", "library/email.rst", "library/email.charset.rst", "library/email.compat32-message.rst", "library/email.contentmanager.rst", "library/email.encoders.rst", "library/email.errors.rst", "library/email.examples.rst", "library/email.generator.rst", "library/email.header.rst", "library/email.headerregistry.rst", "library/email.iterators.rst", "library/email.message.rst", "library/email.mime.rst", "library/email.parser.rst", "library/email.policy.rst", "library/email.utils.rst", "library/ensurepip.rst", "library/enum.rst", "library/errno.rst", "library/exceptions.rst", "library/faulthandler.rst", "library/fcntl.rst", "library/filecmp.rst", "library/fileformats.rst", "library/fileinput.rst", "library/filesys.rst", "library/fnmatch.rst", "library/fractions.rst", "library/frameworks.rst", "library/ftplib.rst", "library/functional.rst", "library/functions.rst", "library/functools.rst", "library/gc.rst", "library/getopt.rst", "library/getpass.rst", "library/gettext.rst", "library/glob.rst", "library/graphlib.rst", "library/grp.rst", "library/gzip.rst", "library/hashlib.rst", "library/heapq.rst", "library/hmac.rst", "library/html.rst", "library/html.entities.rst", "library/html.parser.rst", "library/http.rst", "library/http.client.rst", "library/http.cookiejar.rst", "library/http.cookies.rst", "library/http.server.rst", "library/i18n.rst", "library/idle.rst", "library/imaplib.rst", "library/imghdr.rst", "library/importlib.rst", "library/importlib.metadata.rst", "library/importlib.resources.rst", "library/importlib.resources.abc.rst", "library/index.rst", "library/inspect.rst", "library/internet.rst", "library/intro.rst", "library/io.rst", "library/ipaddress.rst", "library/ipc.rst", "library/itertools.rst", "library/json.rst", "library/keyword.rst", "library/language.rst", "library/linecache.rst", "library/locale.rst", "library/logging.rst", "library/logging.config.rst", "library/logging.handlers.rst", "library/lzma.rst", "library/mailbox.rst", "library/mailcap.rst", "library/markup.rst", "library/marshal.rst", "library/math.rst", "library/mimetypes.rst", "library/mm.rst", "library/mmap.rst", "library/modulefinder.rst", "library/modules.rst", "library/msilib.rst", "library/msvcrt.rst", "library/multiprocessing.rst", "library/multiprocessing.shared_memory.rst", "library/netdata.rst", "library/netrc.rst", "library/nis.rst", "library/nntplib.rst", "library/numbers.rst", "library/numeric.rst", "library/operator.rst", "library/optparse.rst", "library/os.rst", "library/os.path.rst", "library/ossaudiodev.rst", "library/pathlib.rst", "library/pdb.rst", "library/persistence.rst", "library/pickle.rst", "library/pickletools.rst", "library/pipes.rst", "library/pkgutil.rst", "library/platform.rst", "library/plistlib.rst", "library/poplib.rst", "library/posix.rst", "library/pprint.rst", "library/profile.rst", "library/pty.rst", "library/pwd.rst", "library/py_compile.rst", "library/pyclbr.rst", "library/pydoc.rst", "library/pyexpat.rst", "library/python.rst", "library/queue.rst", "library/quopri.rst", "library/random.rst", "library/re.rst", "library/readline.rst", "library/reprlib.rst", "library/resource.rst", "library/rlcompleter.rst", "library/runpy.rst", "library/sched.rst", "library/secrets.rst", "library/security_warnings.rst", "library/select.rst", "library/selectors.rst", "library/shelve.rst", "library/shlex.rst", "library/shutil.rst", "library/signal.rst", "library/site.rst", "library/smtplib.rst", "library/sndhdr.rst", "library/socket.rst", "library/socketserver.rst", "library/spwd.rst", "library/sqlite3.rst", "library/ssl.rst", "library/stat.rst", "library/statistics.rst", "library/stdtypes.rst", "library/string.rst", "library/stringprep.rst", "library/struct.rst", "library/subprocess.rst", "library/sunau.rst", "library/superseded.rst", "library/symtable.rst", "library/sys.rst", "library/sys.monitoring.rst", "library/sys_path_init.rst", "library/sysconfig.rst", "library/syslog.rst", "library/tabnanny.rst", "library/tarfile.rst", "library/telnetlib.rst", "library/tempfile.rst", "library/termios.rst", "library/test.rst", "library/text.rst", "library/textwrap.rst", "library/threading.rst", "library/time.rst", "library/timeit.rst", "library/tk.rst", "library/tkinter.rst", "library/tkinter.colorchooser.rst", "library/tkinter.dnd.rst", "library/tkinter.font.rst", "library/tkinter.messagebox.rst", "library/tkinter.scrolledtext.rst", "library/tkinter.tix.rst", "library/tkinter.ttk.rst", "library/token.rst", "library/tokenize.rst", "library/tomllib.rst", "library/trace.rst", "library/traceback.rst", "library/tracemalloc.rst", "library/tty.rst", "library/turtle.rst", "library/types.rst", "library/typing.rst", "library/unicodedata.rst", "library/unittest.rst", "library/unittest.mock.rst", "library/unittest.mock-examples.rst", "library/unix.rst", "library/urllib.rst", "library/urllib.error.rst", "library/urllib.parse.rst", "library/urllib.request.rst", "library/urllib.robotparser.rst", "library/uu.rst", "library/uuid.rst", "library/venv.rst", "library/warnings.rst", "library/wave.rst", "library/weakref.rst", "library/webbrowser.rst", "library/windows.rst", "library/winreg.rst", "library/winsound.rst", "library/wsgiref.rst", "library/xdrlib.rst", "library/xml.rst", "library/xml.dom.rst", "library/xml.dom.minidom.rst", "library/xml.dom.pulldom.rst", "library/xml.etree.elementtree.rst", "library/xml.sax.rst", "library/xml.sax.handler.rst", "library/xml.sax.reader.rst", "library/xml.sax.utils.rst", "library/xmlrpc.rst", "library/xmlrpc.client.rst", "library/xmlrpc.server.rst", "library/zipapp.rst", "library/zipfile.rst", "library/zipimport.rst", "library/zlib.rst", "library/zoneinfo.rst", "license.rst", "reference/compound_stmts.rst", "reference/datamodel.rst", "reference/executionmodel.rst", "reference/expressions.rst", "reference/grammar.rst", "reference/import.rst", "reference/index.rst", "reference/introduction.rst", "reference/lexical_analysis.rst", "reference/simple_stmts.rst", "reference/toplevel_components.rst", "tutorial/appendix.rst", "tutorial/appetite.rst", "tutorial/classes.rst", "tutorial/controlflow.rst", "tutorial/datastructures.rst", "tutorial/errors.rst", "tutorial/floatingpoint.rst", "tutorial/index.rst", "tutorial/inputoutput.rst", "tutorial/interactive.rst", "tutorial/interpreter.rst", "tutorial/introduction.rst", "tutorial/modules.rst", "tutorial/stdlib.rst", "tutorial/stdlib2.rst", "tutorial/venv.rst", "tutorial/whatnow.rst", "using/cmdline.rst", "using/configure.rst", "using/editors.rst", "using/index.rst", "using/mac.rst", "using/unix.rst", "using/windows.rst", "whatsnew/2.0.rst", "whatsnew/2.1.rst", "whatsnew/2.2.rst", "whatsnew/2.3.rst", "whatsnew/2.4.rst", "whatsnew/2.5.rst", "whatsnew/2.6.rst", "whatsnew/2.7.rst", "whatsnew/3.0.rst", "whatsnew/3.1.rst", "whatsnew/3.10.rst", "whatsnew/3.11.rst", "whatsnew/3.12.rst", "whatsnew/3.2.rst", "whatsnew/3.3.rst", "whatsnew/3.4.rst", "whatsnew/3.5.rst", "whatsnew/3.6.rst", "whatsnew/3.7.rst", "whatsnew/3.8.rst", "whatsnew/3.9.rst", "whatsnew/changelog.rst", "whatsnew/index.rst"], "titles": ["\u95dc\u65bc\u9019\u4e9b\u8aaa\u660e\u6587\u4ef6", "\u8655\u7406\u932f\u8aa4 (Bug)", "\u62bd\u8c61\u7269\u4ef6\u5c64 (Abstract Objects Layer)", "\u5728 heap \u4e0a\u5206\u914d\u7269\u4ef6", "API \u548c ABI \u7248\u672c\u7ba1\u7406", "\u5256\u6790\u5f15\u6578\u8207\u5efa\u7f6e\u6578\u503c", "Boolean\uff08\u5e03\u6797\uff09\u7269\u4ef6", "\u7de9\u885d\u5354\u5b9a (Buffer Protocol)", "\u4f4d\u5143\u7d44\u9663\u5217\u7269\u4ef6 (Byte Array Objects)", "\u4f4d\u5143\u7d44\u7269\u4ef6 (Bytes Objects)", "\u547c\u53eb\u5354\u5b9a (Call Protocol)", "Capsules", "Cell \u7269\u4ef6", "\u7a0b\u5f0f\u78bc\u7269\u4ef6", "\u7de8\u89e3\u78bc\u5668\u8a3b\u518a\u8868\u548c\u652f\u63f4\u51fd\u5f0f", "\u8907\u6578\u7269\u4ef6", "\u5177\u9ad4\u7269\u4ef6\u5c64", "Context Variables Objects", "\u5b57\u4e32\u8f49\u63db\u8207\u683c\u5f0f\u5316", "Coroutine\uff08\u5354\u7a0b\uff09\u7269\u4ef6", "DateTime \u7269\u4ef6", "Descriptor\uff08\u63cf\u8ff0\u5668\uff09\u7269\u4ef6", "\u5b57\u5178\u7269\u4ef6", "\u4f8b\u5916\u8655\u7406", "\u6a94\u6848\u7269\u4ef6 (File Objects)", "\u6d6e\u9ede\u6578\uff08Floating Point\uff09\u7269\u4ef6", "Frame \u7269\u4ef6", "\u51fd\u5f0f\u7269\u4ef6 (Function Objects)", "Supporting Cyclic Garbage Collection", "\u7522\u751f\u5668 (Generator) \u7269\u4ef6", "PyHash API", "\u5f15\u5165\u6a21\u7d44", "Python/C API \u53c3\u8003\u624b\u518a", "Initialization, Finalization, and Threads", "Python Initialization Configuration", "\u7c21\u4ecb", "\u758a\u4ee3\u5668\u5354\u8b70", "\u758a\u4ee3\u5668\uff08Iterator\uff09\u7269\u4ef6", "List\uff08\u4e32\u5217\uff09\u7269\u4ef6", "\u6574\u6578\u7269\u4ef6", "Mapping Protocol", "Data marshalling support", "\u8a18\u61b6\u9ad4\u7ba1\u7406", "MemoryView \u7269\u4ef6", "\u5be6\u4f8b\u65b9\u6cd5\u7269\u4ef6 (Instance Method Objects)", "\u6a21\u7d44\u7269\u4ef6\u6a21\u7d44", "<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> \u7269\u4ef6", "Number Protocol", "\u820a\u5f0f\u7de9\u885d\u5354\u5b9a (Buffer Protocol)", "Object Protocol", "Object Implementation Support", "Support for Perf Maps", "\u53c3\u7167\u8a08\u6578", "Reflection", "Sequence Protocol", "\u96c6\u5408\u7269\u4ef6", "\u5207\u7247\u7269\u4ef6", "C API \u7a69\u5b9a\u6027", "\u901a\u7528\u7269\u4ef6\u7d50\u69cb", "\u4f5c\u696d\u7cfb\u7d71\u5de5\u5177", "Tuple\uff08\u5143\u7d44\uff09\u7269\u4ef6", "Type Objects", "\u578b\u5225\u63d0\u793a\u7269\u4ef6", "\u578b\u5225\u7269\u4ef6", "Unicode \u7269\u4ef6\u8207\u7de8\u89e3\u78bc\u5668", "\u5de5\u5177", "The Very High Level Layer", "\u5f31\u53c3\u7167\u7269\u4ef6", "Python \u8aaa\u660e\u6587\u4ef6\u5167\u5bb9", "\u7248\u6b0a\u5ba3\u544a", "\u767c\u5e03 Python \u6a21\u7d44", "<span class=\"section-number\">4. </span>\u5efa\u7acb C \u8207 C++ \u64f4\u5145\u5957\u4ef6", "<span class=\"section-number\">1. </span>\u5728\u5176\u5b83 App \u5167\u5d4c\u5165 Python", "<span class=\"section-number\">1. </span>\u4ee5 C \u6216 C++ \u64f4\u5145 Python", "\u64f4\u5145\u548c\u5d4c\u5165 Python \u76f4\u8b6f\u5668", "<span class=\"section-number\">3. </span>Defining Extension Types: Assorted Topics", "<span class=\"section-number\">2. </span>Defining Extension Types: Tutorial", "<span class=\"section-number\">5. </span>Building C and C++ Extensions on Windows", "\u8a2d\u8a08\u548c\u6b77\u53f2\u5e38\u898b\u554f\u7b54\u96c6", "\u64f4\u5145/\u5d4c\u5165\u5e38\u898b\u554f\u984c\u96c6", "\u4e00\u822c\u7684 Python \u5e38\u898b\u554f\u7b54\u96c6", "\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762\u5e38\u898b\u554f\u7b54\u96c6", "Python \u5e38\u898b\u554f\u984c", "\u300c\u70ba\u4ec0\u9ebc Python \u88ab\u5b89\u88dd\u5728\u6211\u7684\u6a5f\u5668\u4e0a\uff1f\u300d\u5e38\u898b\u554f\u7b54\u96c6", "\u51fd\u5f0f\u5eab\u548c\u64f4\u5145\u529f\u80fd\u7684\u5e38\u898b\u554f\u984c", "\u7a0b\u5f0f\u958b\u767c\u5e38\u898b\u554f\u7b54\u96c6", "\u5728 Windows \u4f7f\u7528 Python \u7684\u5e38\u898b\u554f\u7b54\u96c6", "\u8853\u8a9e\u8868", "\u8a3b\u91cb (annotation) \u6700\u4f73\u5be6\u8e10", "Argparse \u6559\u5b78", "Argument Clinic \u6307\u5357", "\u9077\u79fb\u5ef6\u4f38\u6a21\u7d44\u5230 Python 3", "Curses Programming with Python", "\u63cf\u8ff0\u5668 (Descriptor) \u6307\u5357", "Enum HOWTO", "\u51fd\u5f0f\u7de8\u7a0b HOWTO", "Debugging C API extensions and CPython Internals with GDB", "Python \u5982\u4f55\u9054\u6210\u4efb\u52d9", "\u4f7f\u7528 DTrace \u548c SystemTap \u6aa2\u6e2c CPython", "ipaddress \u6a21\u7d44\u4ecb\u7d39", "Isolating Extension Modules", "\u5982\u4f55\u4f7f\u7528 Logging \u6a21\u7d44", "Logging Cookbook", "The Python 2.3 Method Resolution Order", "Python \u5c0d Linux <code class=\"docutils literal notranslate\"><span class=\"pre\">perf</span></code> \u5206\u6790\u5668\u7684\u652f\u63f4", "\u5982\u4f55\u5c07 Python 2 \u7684\u7a0b\u5f0f\u78bc\u79fb\u690d\u5230 Python 3", "\u5982\u4f55\u4f7f\u7528\u6b63\u898f\u8868\u9054\u5f0f", "Socket \u7a0b\u5f0f\u8a2d\u8a08\u6307\u5357", "\u6392\u5e8f\u6280\u6cd5", "Unicode HOWTO", "\u5982\u4f55\u4f7f\u7528 urllib \u5957\u4ef6\u53d6\u5f97\u7db2\u8def\u8cc7\u6e90", "\u5b89\u88dd Python \u6a21\u7d44", "2to3 --- \u81ea\u52d5\u5c07 Python 2\u7684\u7a0b\u5f0f\u78bc\u8f49\u6210 Python 3", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">__future__</span></code> --- Future \u9673\u8ff0\u5f0f\u5b9a\u7fa9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">__main__</span></code> --- \u9802\u5c64\u7a0b\u5f0f\u78bc\u74b0\u5883", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">_thread</span></code> --- Low-level threading API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">abc</span></code> --- \u62bd\u8c61\u57fa\u5e95\u985e\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">aifc</span></code> --- \u8b80\u5beb AIFF \u8207 AIFC \u6a94\u6848", "\u901a\u7528\u4f5c\u696d\u7cfb\u7d71\u670d\u52d9", "\u8cc7\u6599\u58d3\u7e2e\u8207\u4fdd\u5b58", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">argparse</span></code> --- Parser for command-line options, arguments and sub-commands", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">array</span></code> --- \u9ad8\u6548\u7387\u7684\u6578\u503c\u578b\u9663\u5217", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ast</span></code> --- \u62bd\u8c61\u8a9e\u6cd5\u6a39 (Abstract Syntax Trees)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">asyncio</span></code> --- \u975e\u540c\u6b65 I/O", "\u9ad8\u968e API \u7d22\u5f15", "\u4f7f\u7528 asyncio \u958b\u767c", "Event Loop", "\u4f8b\u5916", "Extending", "Futures", "\u4f4e\u968e API \u7d22\u5f15", "\u5e73\u81fa\u652f\u63f4", "Policies", "Transports and Protocols", "\u4f47\u5217 (Queues)", "Runners (\u57f7\u884c\u5668)", "\u4e32\u6d41", "\u5b50\u884c\u7a0b", "\u540c\u6b65\u5316\u539f\u59cb\u7269\u4ef6 (Synchronization Primitives)", "Coroutines and Tasks", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">atexit</span></code> --- Exit handlers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">audioop</span></code> --- \u64cd\u4f5c\u539f\u59cb\u8072\u97f3\u6a94\u6848", "\u7a3d\u6838\u4e8b\u4ef6\u8868", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">base64</span></code> \u2014\u2014 Base16\u3001Base32\u3001Base64\u3001Base85 \u8cc7\u6599\u7de8\u78bc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bdb</span></code> --- \u5075\u932f\u5668\u6846\u67b6", "\u4e8c\u9032\u4f4d\u8cc7\u6599\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">binascii</span></code> --- Convert between binary and ASCII", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bisect</span></code> --- \u9663\u5217\u4e8c\u5206\u6f14\u7b97\u6cd5 (Array bisection algorithm)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">builtins</span></code> --- \u5167\u5efa\u7269\u4ef6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">bz2</span></code> --- Support for <strong class=\"program\">bzip2</strong> compression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">calendar</span></code> --- \u65e5\u66c6\u76f8\u95dc\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cgi</span></code> --- \u901a\u7528\u9598\u9053\u5668\u4ecb\u9762\u652f\u63f4", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cgitb</span></code> --- CGI \u8173\u672c\u7684\u56de\u6eaf (traceback) \u7ba1\u7406\u7a0b\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">chunk</span></code> --- \u8b80\u53d6 IFF \u5206\u584a\u8cc7\u6599", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cmath</span></code> --- \u8907\u6578\u7684\u6578\u5b78\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cmd</span></code> --- Support for line-oriented command interpreters", "\u6a21\u7d44\u547d\u4ee4\u5217\u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">code</span></code> --- Interpreter base classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">codecs</span></code> --- Codec registry and base classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">codeop</span></code> --- Compile Python code", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">collections</span></code> --- \u5bb9\u5668\u8cc7\u6599\u578b\u614b", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">collections.abc</span></code> --- Abstract Base Classes for Containers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">colorsys</span></code> --- \u984f\u8272\u7cfb\u7d71\u9593\u7684\u8f49\u63db", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">compileall</span></code> --- Byte-compile Python libraries", "\u4e26\u884c\u57f7\u884c (Concurrent Execution)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">concurrent</span></code> \u5957\u4ef6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">concurrent.futures</span></code> -- \u555f\u52d5\u5e73\u884c\u4efb\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">configparser</span></code> --- \u8a2d\u5b9a\u6a94\u5256\u6790\u5668", "\u5167\u5efa\u5e38\u6578", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">contextlib</span></code> --- Utilities for <code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">with</span></code>-statement contexts", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">contextvars</span></code> --- Context Variables", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">copy</span></code> --- \u6dfa\u5c64 (shallow) \u548c\u6df1\u5c64 (deep) \u8907\u88fd\u64cd\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">copyreg</span></code> --- \u8a3b\u518a <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code> \u652f\u63f4\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">crypt</span></code> --- \u7528\u65bc\u6aa2\u67e5 Unix \u5bc6\u78bc\u7684\u51fd\u5f0f", "\u52a0\u5bc6\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">csv</span></code> --- CSV \u6a94\u6848\u8b80\u53d6\u53ca\u5beb\u5165", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ctypes</span></code> --- A foreign function library for Python", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses</span></code> --- Terminal handling for character-cell displays", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses.ascii</span></code> --- ASCII \u5b57\u5143\u7684\u5de5\u5177\u7a0b\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">curses.panel</span></code> --- A panel stack extension for curses", "Custom Python Interpreters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dataclasses</span></code> --- Data Classes", "\u8cc7\u6599\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">datetime</span></code> --- \u65e5\u671f\u8207\u6642\u9593\u7684\u57fa\u672c\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dbm</span></code> --- Unix &quot;databases&quot; \u7684\u4ecb\u9762", "\u9664\u932f\u8207\u6548\u80fd\u5206\u6790", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">decimal</span></code> --- Decimal fixed point and floating point arithmetic", "\u958b\u767c\u5de5\u5177", "Python Development Mode", "Tkinter Dialogs", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">difflib</span></code> --- Helpers for computing deltas", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">dis</span></code> --- Python bytecode\u7684\u53cd\u7d44\u8b6f\u5668", "\u8edf\u9ad4\u5c01\u88dd\u8207\u767c\u5e03", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">doctest</span></code> --- Test interactive Python examples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email</span></code> --- An email and MIME handling package", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.charset</span></code>: \u8868\u793a\u5b57\u5143\u96c6\u5408", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.message.Message</span></code>: Representing an email message using the <code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">compat32</span></code> API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.contentmanager</span></code>: Managing MIME Content", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.encoders</span></code>: Encoders", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.errors</span></code>: Exception and Defect classes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email</span></code>: Examples", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.generator</span></code>: Generating MIME documents", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.header</span></code>: Internationalized headers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.headerregistry</span></code>: Custom Header Objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.iterators</span></code>: Iterators", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.message</span></code>: Representing an email message", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.mime</span></code>: Creating email and MIME objects from scratch", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.parser</span></code>: Parsing email messages", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.policy</span></code>: Policy Objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">email.utils</span></code>: Miscellaneous utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ensurepip</span></code> --- <code class=\"docutils literal notranslate\"><span class=\"pre\">pip</span></code> \u5b89\u88dd\u5668\u7684\u521d\u59cb\u5efa\u7f6e (bootstrapping)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">enum</span></code> --- \u5c0d\u5217\u8209\u7684\u652f\u63f4", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">errno</span></code> --- Standard errno system symbols", "\u5167\u5efa\u7684\u4f8b\u5916", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">faulthandler</span></code> --- Dump the Python traceback", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fcntl</span></code> --- The <code class=\"docutils literal notranslate\"><span class=\"pre\">fcntl</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ioctl</span></code> system calls", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">filecmp</span></code> --- File and Directory Comparisons", "\u6a94\u6848\u683c\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fileinput</span></code> --- Iterate over lines from multiple input streams", "\u6a94\u6848\u8207\u76ee\u9304\u5b58\u53d6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fnmatch</span></code> --- Unix filename pattern matching", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fractions</span></code> --- Rational numbers", "\u7a0b\u5f0f\u6846\u67b6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ftplib</span></code> --- FTP \u5354\u5b9a\u7528\u6236\u7aef", "\u51fd\u5f0f\u7de8\u7a0b\u6a21\u7d44", "\u5167\u5efa\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">functools</span></code> --- Higher-order functions and operations on callable objects", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gc</span></code> --- \u5783\u573e\u56de\u6536\u5668\u4ecb\u9762 (Garbage Collector interface)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">getopt</span></code> --- C-style parser for command line options", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">getpass</span></code> --- \u53ef\u651c\u5f0f\u5bc6\u78bc\u8f38\u5165\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gettext</span></code> --- Multilingual internationalization services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">glob</span></code> --- Unix \u98a8\u683c\u7684\u8def\u5f91\u540d\u7a31\u6a21\u5f0f\u64f4\u5c55", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">graphlib</span></code> \u2014-- \u4f7f\u7528\u985e\u5716 (graph-like) \u7d50\u69cb\u9032\u884c\u64cd\u4f5c\u7684\u529f\u80fd", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">grp</span></code> --- The group database", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gzip</span></code> --- <strong class=\"program\">gzip</strong> \u6a94\u6848\u7684\u652f\u63f4", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hashlib</span></code> --- Secure hashes and message digests", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">heapq</span></code> --- \u5806\u7a4d\u4f47\u5217 (heap queue) \u6f14\u7b97\u6cd5", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hmac</span></code> --- \u57fa\u65bc\u91d1\u9470\u96dc\u6e4a\u7684\u8a0a\u606f\u9a57\u8b49", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html</span></code> --- \u8d85\u9023\u7d50\u6a19\u8a18\u8a9e\u8a00 (HTML) \u652f\u63f4", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html.entities</span></code> --- HTML \u4e00\u822c\u5be6\u9ad4\u7684\u5b9a\u7fa9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">html.parser</span></code> --- \u7c21\u55ae\u7684 HTML \u548c XHTML \u5256\u6790\u5668", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http</span></code> --- HTTP \u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.client</span></code> --- HTTP protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.cookiejar</span></code> --- Cookie handling for HTTP clients", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.cookies</span></code> --- HTTP state management", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.server</span></code> \u2014 HTTP \u4f3a\u670d\u5668", "\u570b\u969b\u5316", "IDLE", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">imaplib</span></code> --- IMAP4 protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">imghdr</span></code> --- \u63a8\u6e2c\u5716\u7247\u7a2e\u985e", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib</span></code> --- <code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">import</span></code> \u7684\u5be6\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.metadata</span></code> -- Accessing package metadata", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.resources</span></code> -- Package resource reading, opening and access", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.resources.abc</span></code> -- Abstract base classes for resources", "Python \u6a19\u6e96\u51fd\u5f0f\u5eab (Standard Library)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">inspect</span></code> --- \u6aa2\u8996\u6d3b\u52d5\u7269\u4ef6", "\u7db2\u8def\u5354\u5b9a (Internet protocols) \u53ca\u652f\u63f4", "\u7c21\u4ecb", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io</span></code> \u2014 \u8655\u7406\u8cc7\u6599\u4e32\u6d41\u7684\u6838\u5fc3\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ipaddress</span></code> --- IPv4/IPv6 manipulation library", "Networking and Interprocess Communication", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">itertools</span></code> --- \u5efa\u7acb\u7522\u751f\u9ad8\u6548\u7387\u8ff4\u5708\u4e4b\u758a\u4ee3\u5668\u7684\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">json</span></code> --- JSON \u7de8\u78bc\u5668\u8207\u89e3\u78bc\u5668", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">keyword</span></code> --- \u6aa2\u9a57 Python \u95dc\u9375\u5b57", "Python Language Services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">linecache</span></code> --- Random access to text lines", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">locale</span></code> \u2014 \u570b\u969b\u5316\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging</span></code> --- Python \u7684\u65e5\u8a8c\u8a18\u9304\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging.config</span></code> --- Logging configuration", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging.handlers</span></code> --- Logging handlers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">lzma</span></code> --- Compression using the LZMA algorithm", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mailbox</span></code> --- \u4ee5\u5404\u7a2e\u683c\u5f0f\u64cd\u4f5c\u90f5\u4ef6\u4fe1\u7bb1", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mailcap</span></code> --- Mailcap file handling", "Structured Markup Processing Tools", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">marshal</span></code> --- \u5185\u90e8 Python \u7269\u4ef6\u5e8f\u5217\u5316", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">math</span></code> --- \u6578\u5b78\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mimetypes</span></code> --- Map filenames to MIME types", "\u591a\u5a92\u9ad4\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mmap</span></code> --- Memory-mapped file support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">modulefinder</span></code> --- Find modules used by a script", "\u5f15\u5165\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">msilib</span></code> --- \u8b80\u5beb Microsoft Installer \u6a94\u6848", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">msvcrt</span></code> --- Useful routines from the MS VC++ runtime", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">multiprocessing</span></code> --- Process-based parallelism", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">multiprocessing.shared_memory</span></code> --- \u5c0d\u65bc\u5171\u4eab\u8a18\u61b6\u9ad4\u7684\u8de8\u884c\u7a0b\u76f4\u63a5\u5b58\u53d6", "\u7db2\u969b\u7db2\u8def\u8cc7\u6599\u8655\u7406", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">netrc</span></code> --- netrc \u6a94\u6848\u8655\u7406", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nis</span></code> --- Sun NIS (Yellow Pages) \u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">nntplib</span></code> --- NNTP \u5354\u5b9a\u5ba2\u6236\u7aef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">numbers</span></code> --- \u6578\u503c\u7684\u62bd\u8c61\u57fa\u5e95\u985e\u5225", "\u6578\u503c\u8207\u6578\u5b78\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">operator</span></code> --- \u6a19\u6e96\u904b\u7b97\u5b50\u66ff\u4ee3\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">optparse</span></code> --- Parser for command line options", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">os</span></code> --- \u5404\u7a2e\u4f5c\u696d\u7cfb\u7d71\u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">os.path</span></code> --- \u5e38\u898b\u7684\u8def\u5f91\u540d\u64cd\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ossaudiodev</span></code> --- \u5c0d OSS \u76f8\u5bb9\u8072\u97f3\u88dd\u7f6e\u7684\u5b58\u53d6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pathlib</span></code> --- \u7269\u4ef6\u5c0e\u5411\u6a94\u6848\u7cfb\u7d71\u8def\u5f91", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pdb</span></code> --- The Python Debugger", "Data Persistence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code> --- Python \u7269\u4ef6\u5e8f\u5217\u5316", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickletools</span></code> --- pickle \u958b\u767c\u8005\u7684\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pipes</span></code> --- shell pipelines \u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pkgutil</span></code> --- Package extension utility", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">platform</span></code> ---  \u7372\u53d6\u5e95\u5c64\u5e73\u81fa\u7684\u6a19\u8b58\u8cc7\u6599", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">plistlib</span></code> --- Generate and parse Apple <code class=\"docutils literal notranslate\"><span class=\"pre\">.plist</span></code> files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">poplib</span></code> --- POP3 protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">posix</span></code> --- \u6700\u5e38\u898b\u7684 POSIX \u7cfb\u7d71\u547c\u53eb", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pprint</span></code> --- Data pretty printer", "The Python Profilers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pty</span></code> --- Pseudo-terminal utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pwd</span></code> --- \u5bc6\u78bc\u8cc7\u6599\u5eab", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">py_compile</span></code> \u2014 \u7de8\u8b6f Python \u4f86\u6e90\u6a94\u6848", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pyclbr</span></code> --- Python module browser support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pydoc</span></code> --- Documentation generator and online help system", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.parsers.expat</span></code> --- Fast XML parsing using Expat", "Python Runtime Services", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">queue</span></code> --- \u540c\u6b65\u4f47\u5217 (queue) class\uff08\u985e\u5225\uff09", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">quopri</span></code> --- \u7de8\u78bc\u548c\u89e3\u78bc MIME \u53ef\u5217\u5370\u5b57\u5143\u8cc7\u6599", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">random</span></code> --- \u751f\u6210\u507d\u96a8\u6a5f\u6578", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">re</span></code> --- \u6b63\u898f\u8868\u793a\u5f0f (regular expression) \u64cd\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">readline</span></code> --- GNU readline interface", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">reprlib</span></code> --- Alternate <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">repr()</span></code> implementation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">resource</span></code> --- Resource usage information", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">rlcompleter</span></code> --- Completion function for GNU readline", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">runpy</span></code> --- Locating and executing Python modules", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sched</span></code> --- Event scheduler", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">secrets</span></code> --- \u7522\u751f\u7528\u65bc\u7ba1\u7406\u6a5f\u5bc6\u7684\u5b89\u5168\u4e82\u6578", "\u5b89\u5168\u6027\u6ce8\u610f\u4e8b\u9805", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">select</span></code> --- Waiting for I/O completion", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">selectors</span></code> --- High-level I/O multiplexing", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">shelve</span></code> --- Python object persistence", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">shlex</span></code> --- Simple lexical analysis", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">shutil</span></code> \u2014 \u9ad8\u968e\u6a94\u6848\u64cd\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">signal</span></code> --- Set handlers for asynchronous events", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">site</span></code> --- Site-specific configuration hook", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">smtplib</span></code> --- SMTP protocol client", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sndhdr</span></code> --- \u5224\u5b9a\u8072\u97f3\u6a94\u6848\u7684\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">socket</span></code> --- Low-level networking interface", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">socketserver</span></code> --- A framework for network servers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">spwd</span></code> --- shadow \u5bc6\u78bc\u8cc7\u6599\u5eab", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sqlite3</span></code> --- SQLite \u8cc7\u6599\u5eab\u7684 DB-API 2.0 \u4ecb\u9762", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">ssl</span></code> --- socket \u7269\u4ef6\u7684 TLS/SSL \u5305\u88dd\u5668", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">stat</span></code> --- Interpreting <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">stat()</span></code> results", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">statistics</span></code> --- \u6578\u5b78\u7d71\u8a08\u51fd\u5f0f", "\u5167\u5efa\u578b\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">string</span></code> --- \u5e38\u898b\u7684\u5b57\u4e32\u64cd\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">stringprep</span></code> --- Internet String Preparation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">struct</span></code> --- Interpret bytes as packed binary data", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">subprocess</span></code> --- \u5b50\u884c\u7a0b\u7ba1\u7406", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sunau</span></code> --- \u8b80\u5beb Sun AU \u6a94\u6848", "\u5df2\u88ab\u53d6\u4ee3\u7684\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">symtable</span></code> --- \u5b58\u53d6\u7de8\u8b6f\u5668\u7684\u7b26\u865f\u8868", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sys</span></code> --- \u7cfb\u7d71\u7279\u5b9a\u7684\u53c3\u6578\u8207\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sys.monitoring</span></code> --- Execution event monitoring", "The initialization of the <code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.path</span></code> module search path", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sysconfig</span></code> --- Provide access to Python's configuration information", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">syslog</span></code> --- Unix syslog library routines", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tabnanny</span></code> --- \u5075\u6e2c\u4e0d\u826f\u7e2e\u6392", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tarfile</span></code> --- Read and write tar archive files", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">telnetlib</span></code> --- Telnet \u5ba2\u6236\u7aef", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tempfile</span></code> --- \u751f\u6210\u81e8\u6642\u6a94\u6848\u548c\u76ee\u9304", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">termios</span></code> --- POSIX style tty control", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">test</span></code> --- Python \u7684\u56de\u6b78\u6e2c\u8a66 (regression tests) \u5957\u4ef6", "\u6587\u672c\u8655\u7406 (Text Processing) \u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">textwrap</span></code> --- Text wrapping and filling", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">threading</span></code> --- Thread-based parallelism", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">time</span></code> --- Time access and conversions", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">timeit</span></code> --- \u6e2c\u91cf\u5c0f\u91cf\u7a0b\u5f0f\u7247\u6bb5\u7684\u57f7\u884c\u6642\u9593", "\u4ee5 Tk \u6253\u9020\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762 (Graphical User Interfaces)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter</span></code> --- Python interface to Tcl/Tk", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.colorchooser</span></code> --- \u984f\u8272\u9078\u64c7\u5c0d\u8a71\u6846", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.dnd</span></code> --- Drag and drop support", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.font</span></code> --- Tkinter \u5b57\u578b\u5305\u88dd\u5668", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.messagebox</span></code> --- Tkinter \u8a0a\u606f\u63d0\u793a", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.scrolledtext</span></code> --- Scrolled Text Widget", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.tix</span></code> --- Tk \u64f4\u5145\u5c0f\u5de5\u5177", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tkinter.ttk</span></code> --- Tk themed widgets", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">token</span></code> --- Constants used with Python parse trees", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tokenize</span></code> --- Tokenizer for Python source", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tomllib</span></code> --- \u5256\u6790 TOML \u6a94\u6848", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">trace</span></code> --- Trace or track Python statement execution", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">traceback</span></code> --- Print or retrieve a stack traceback", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tracemalloc</span></code> --- Trace memory allocations", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">tty</span></code> --- \u7d42\u7aef\u6a5f\u63a7\u5236\u51fd\u5f0f", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">turtle</span></code> --- \u9f9c\u5716\u5b78 (Turtle graphics)", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">types</span></code> --- Dynamic type creation and names for built-in types", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">typing</span></code> --- \u652f\u63f4\u578b\u5225\u63d0\u793a", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unicodedata</span></code> --- Unicode Database", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest</span></code> --- \u55ae\u5143\u6e2c\u8a66\u6846\u67b6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest.mock</span></code> \u2014 mock \u7269\u4ef6\u51fd\u5f0f\u5eab", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest.mock</span></code> --- \u5165\u9580\u6307\u5357", "Unix \u7279\u6709\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib</span></code> --- URL \u8655\u7406\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.error</span></code> --- urllib.request \u5f15\u767c\u7684\u4f8b\u5916\u985e\u5225", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.parse</span></code> --- Parse URLs into components", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.request</span></code> --- \u7528\u4f86\u958b\u555f URLs \u7684\u53ef\u64f4\u5145\u51fd\u5f0f\u5eab", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib.robotparser</span></code> --- robots.txt \u7684\u5256\u6790\u5668", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xdrlib</span></code> --- uuencode \u6a94\u6848\u7684\u7de8\u78bc\u8207\u89e3\u78bc", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">uuid</span></code> --- <strong>RFC 4122</strong> \u5b9a\u7fa9\u7684 UUID \u7269\u4ef6", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">venv</span></code> --- Creation of virtual environments", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">warnings</span></code> --- Warning control", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wave</span></code> --- \u8b80\u5beb WAV \u6a94\u6848", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">weakref</span></code> --- Weak references", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">webbrowser</span></code> --- Convenient web-browser controller", "MS Windows \u7279\u6709\u670d\u52d9", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">winreg</span></code> --- Windows registry access", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">winsound</span></code> --- Sound-playing interface for Windows", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">wsgiref</span></code> --- WSGI \u5de5\u5177\u8207\u53c3\u8003\u5be6\u4f5c", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xdrlib</span></code> --- XDR \u8cc7\u6599\u7684\u7de8\u78bc\u8207\u89e3\u78bc", "XML \u8655\u7406\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom</span></code> --- The Document Object Model API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom.minidom</span></code> --- Minimal DOM implementation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.dom.pulldom</span></code> --- Support for building partial DOM trees", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.etree.ElementTree</span></code> --- The ElementTree XML API", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax</span></code> --- Support for SAX2 parsers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.handler</span></code> --- Base classes for SAX handlers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.xmlreader</span></code> --- Interface for XML parsers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xml.sax.saxutils</span></code> --- SAX Utilities", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc</span></code> --- XMLRPC \u4f3a\u670d\u5668\u8207\u7528\u6236\u6a21\u7d44", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc.client</span></code> --- XML-RPC client access", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">xmlrpc.server</span></code> --- Basic XML-RPC servers", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zipapp</span></code> \u2014 \u7ba1\u7406\u53ef\u57f7\u884c\u7684 Python zip \u5c01\u5b58\u6a94\u6848", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zipfile</span></code> --- Work with ZIP archives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zipimport</span></code> --- Import modules from Zip archives", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zlib</span></code> --- \u76f8\u5bb9\u65bc <strong class=\"program\">gzip</strong> \u7684\u58d3\u7e2e", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">zoneinfo</span></code> --- IANA \u6642\u5340\u652f\u63f4", "\u6cbf\u9769\u8207\u6388\u6b0a", "<span class=\"section-number\">8. </span>Compound statements", "<span class=\"section-number\">3. </span>\u8cc7\u6599\u6a21\u578b", "<span class=\"section-number\">4. </span>Execution model", "<span class=\"section-number\">6. </span>Expressions", "<span class=\"section-number\">10. </span>\u5b8c\u6574\u7684\u8a9e\u6cd5\u898f\u683c\u66f8", "<span class=\"section-number\">5. </span>The import system", "Python \u8a9e\u8a00\u53c3\u8003\u624b\u518a", "<span class=\"section-number\">1. </span>\u7c21\u4ecb", "<span class=\"section-number\">2. </span>Lexical analysis", "<span class=\"section-number\">7. </span>Simple statements", "<span class=\"section-number\">9. </span>\u6700\u9ad8\u5c64\u7d1a\u5143\u4ef6", "<span class=\"section-number\">16. </span>\u9644\u9304", "<span class=\"section-number\">1. </span>\u6dfa\u5617\u6ecb\u5473", "<span class=\"section-number\">9. </span>Class\uff08\u985e\u5225\uff09", "<span class=\"section-number\">4. </span>\u6df1\u5165\u4e86\u89e3\u6d41\u7a0b\u63a7\u5236", "<span class=\"section-number\">5. </span>\u8cc7\u6599\u7d50\u69cb", "<span class=\"section-number\">8. </span>\u932f\u8aa4\u548c\u4f8b\u5916", "<span class=\"section-number\">15. </span>\u6d6e\u9ede\u6578\u904b\u7b97\uff1a\u554f\u984c\u8207\u9650\u5236", "Python \u6559\u5b78", "<span class=\"section-number\">7. </span>\u8f38\u5165\u548c\u8f38\u51fa", "<span class=\"section-number\">14. </span>\u4e92\u52d5\u5f0f\u8f38\u5165\u7de8\u8f2f\u548c\u6b77\u53f2\u8a18\u9304\u66ff\u63db", "<span class=\"section-number\">2. </span>\u4f7f\u7528 Python \u76f4\u8b6f\u5668", "<span class=\"section-number\">3. </span>\u4e00\u500b\u975e\u6b63\u5f0f\u7684 Python \u7c21\u4ecb", "<span class=\"section-number\">6. </span>\u6a21\u7d44 (Module)", "<span class=\"section-number\">10. </span>Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd", "<span class=\"section-number\">11. </span>Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd\u2014\u2014\u7b2c\u4e8c\u90e8\u4efd", "<span class=\"section-number\">12. </span>\u865b\u64ec\u74b0\u5883\u8207\u5957\u4ef6", "<span class=\"section-number\">13. </span>\u73fe\u5728\u53ef\u4ee5\u4f86\u5b78\u7fd2\u4e9b\u4ec0\u9ebc\uff1f", "<span class=\"section-number\">1. </span>\u547d\u4ee4\u5217\u8207\u74b0\u5883", "<span class=\"section-number\">3. </span>\u914d\u7f6e Python", "<span class=\"section-number\">6. </span>\u7de8\u8f2f\u5668\u8207 IDE", "Python \u7684\u8a2d\u7f6e\u8207\u4f7f\u7528", "<span class=\"section-number\">5. </span>\u5728 Mac \u7cfb\u7d71\u4f7f\u7528 Python", "<span class=\"section-number\">2. </span>\u5728 Unix \u5e73\u81fa\u4e0a\u4f7f\u7528 Python", "<span class=\"section-number\">4. </span>\u5728 Windows \u4e0a\u4f7f\u7528 Python", "Python 2.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.5 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 2.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.10 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.11 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.12 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.8 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Python 3.9 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd", "Changelog\uff08\u66f4\u52d5\u65e5\u8a8c\uff09", "Python \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\uff1f"], "terms": {"sphinx": [0, 68, 80, 84, 102, 474, 483], "restructuredtext": [0, 68, 80, 103, 193, 483], "bug": [0, 59, 63, 68, 72, 73, 78, 79, 80, 84, 93, 95, 96, 102, 103, 105, 109, 125, 151, 177, 208, 225, 242, 243, 271, 293, 299, 308, 340, 341, 348, 362, 365, 368, 386, 444, 446, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483], "fred": [0, 102, 314, 369, 435, 462, 463, 464, 465, 467, 468, 479], "drake": [0, 462, 463, 464, 465, 467, 468], "jr": [0, 84, 463, 464, 465, 467, 468], "docutil": [0, 468, 483], "fredrik": [0, 85, 95, 426, 462, 463, 464, 466, 467, 469, 471, 475], "lundh": [0, 85, 95, 426, 462, 463, 464, 466, 467, 469, 475], "altern": [0, 18, 23, 31, 33, 45, 63, 68, 73, 78, 79, 84, 85, 87, 93, 95, 106, 109, 110, 112, 120, 126, 132, 137, 138, 139, 143, 158, 161, 167, 173, 176, 177, 178, 181, 182, 186, 193, 196, 199, 200, 205, 211, 214, 215, 218, 221, 225, 228, 242, 251, 254, 261, 267, 268, 269, 272, 275, 283, 292, 293, 295, 297, 299, 314, 324, 332, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 354, 358, 359, 365, 369, 375, 376, 381, 384, 386, 388, 390, 394, 399, 400, 402, 405, 407, 425, 426, 430, 431, 432, 433, 455, 458, 459, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 477, 478, 479, 480, 481, 482, 483], "refer": [0, 5, 7, 9, 11, 12, 13, 17, 19, 22, 23, 24, 26, 27, 28, 29, 31, 33, 34, 35, 36, 39, 42, 45, 49, 50, 54, 55, 58, 59, 60, 64, 66, 67, 68, 71, 72, 74, 76, 77, 78, 84, 87, 93, 99, 100, 101, 102, 106, 110, 115, 118, 120, 126, 129, 133, 136, 137, 139, 140, 141, 142, 144, 158, 164, 167, 170, 177, 182, 183, 185, 191, 205, 212, 213, 215, 222, 225, 226, 227, 228, 230, 233, 235, 236, 239, 240, 243, 245, 247, 250, 251, 253, 254, 255, 258, 259, 262, 267, 268, 269, 271, 273, 278, 288, 293, 294, 297, 298, 299, 302, 303, 307, 313, 314, 319, 321, 324, 329, 332, 333, 334, 337, 341, 344, 345, 347, 352, 356, 361, 362, 365, 366, 368, 375, 376, 377, 381, 385, 386, 388, 394, 395, 400, 405, 410, 411, 415, 417, 421, 422, 425, 427, 428, 429, 433, 434, 435, 436, 440, 441, 445, 449, 450, 455, 456, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "misc": [0, 35, 80, 96, 223, 344, 376, 456, 462, 465, 466, 467, 468, 469, 470, 473, 475, 477, 483, 484], "ack": [0, 178, 468], "12": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 482, 484], "tracker": [1, 68, 96, 283, 362, 467, 469, 483], "https": [1, 68, 71, 75, 78, 79, 80, 81, 84, 85, 95, 101, 102, 103, 109, 110, 126, 136, 160, 162, 169, 183, 226, 235, 239, 240, 242, 243, 248, 251, 261, 269, 307, 313, 314, 318, 319, 326, 328, 340, 341, 352, 379, 387, 388, 394, 395, 399, 403, 407, 411, 413, 419, 424, 426, 435, 444, 445, 451, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 474, 475, 476, 477, 478, 480, 481, 483], "github": [1, 75, 80, 111, 248, 307, 388, 426, 474, 479, 480, 483], "com": [1, 68, 69, 73, 75, 80, 84, 85, 93, 101, 102, 106, 110, 136, 162, 166, 176, 183, 184, 200, 243, 248, 261, 288, 297, 307, 318, 319, 326, 340, 341, 344, 388, 395, 396, 398, 405, 413, 419, 453, 454, 459, 461, 464, 466, 467, 468, 469, 474, 475, 476, 477, 478, 481, 483], "doc": [1, 23, 58, 60, 75, 76, 79, 80, 93, 106, 126, 176, 194, 205, 223, 225, 242, 247, 251, 255, 262, 293, 296, 313, 340, 341, 352, 362, 367, 385, 394, 403, 405, 412, 452, 454, 456, 460, 461, 462, 464, 465, 467, 468, 469, 474, 475, 479, 480, 481, 483], "zh": 1, "tw": [1, 158], "issu": [1, 7, 22, 32, 33, 34, 61, 66, 68, 76, 80, 93, 94, 96, 101, 102, 103, 109, 119, 120, 126, 135, 155, 158, 176, 177, 181, 185, 186, 188, 203, 213, 221, 225, 235, 242, 247, 248, 261, 262, 266, 267, 271, 272, 283, 292, 293, 296, 299, 311, 333, 335, 337, 341, 344, 348, 362, 384, 386, 388, 400, 402, 412, 413, 421, 426, 455, 458, 462, 463, 464, 466, 467, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "discours": [1, 483], "org": [1, 57, 68, 75, 78, 79, 84, 87, 95, 102, 103, 107, 109, 110, 111, 126, 160, 166, 167, 169, 184, 223, 226, 235, 239, 240, 242, 243, 247, 248, 283, 288, 303, 307, 313, 314, 319, 328, 335, 337, 340, 341, 352, 355, 387, 394, 395, 396, 398, 403, 411, 413, 415, 419, 426, 428, 435, 444, 445, 451, 453, 454, 455, 458, 459, 460, 462, 463, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 478, 480, 481, 482, 483], "list": [1, 2, 5, 7, 16, 23, 31, 33, 34, 35, 40, 42, 49, 52, 54, 55, 57, 58, 59, 60, 63, 64, 66, 68, 73, 75, 76, 77, 79, 80, 84, 86, 87, 89, 92, 93, 94, 100, 101, 102, 103, 105, 106, 108, 109, 110, 112, 115, 117, 120, 121, 122, 126, 128, 133, 136, 139, 140, 144, 151, 155, 158, 160, 161, 163, 167, 169, 170, 171, 173, 175, 176, 177, 180, 181, 182, 183, 184, 186, 187, 189, 190, 191, 193, 196, 197, 199, 200, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 216, 218, 220, 222, 223, 225, 226, 227, 228, 230, 231, 233, 235, 236, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 257, 258, 259, 260, 261, 262, 266, 267, 268, 269, 271, 272, 274, 276, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 302, 304, 305, 307, 308, 310, 311, 312, 314, 318, 319, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 345, 346, 348, 351, 352, 355, 358, 359, 361, 362, 363, 364, 365, 366, 369, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 394, 395, 396, 400, 402, 403, 405, 407, 408, 410, 411, 413, 414, 415, 416, 419, 420, 421, 422, 423, 426, 428, 429, 431, 432, 433, 435, 436, 440, 443, 445, 446, 448, 450, 451, 453, 454, 455, 456, 457, 461, 463, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "cpython": [1, 4, 10, 13, 33, 35, 54, 57, 59, 63, 68, 71, 73, 75, 76, 80, 85, 87, 89, 97, 100, 142, 158, 161, 186, 188, 191, 210, 213, 214, 225, 235, 237, 250, 255, 257, 275, 283, 293, 296, 303, 311, 314, 316, 320, 324, 332, 344, 348, 352, 353, 362, 365, 379, 385, 402, 407, 413, 425, 427, 428, 429, 430, 431, 434, 436, 450, 455, 456, 460, 461, 463, 464, 465, 467, 468, 469, 475, 476, 478, 483, 484], "sign": [1, 30, 49, 64, 68, 75, 85, 106, 121, 141, 154, 158, 167, 176, 177, 183, 186, 196, 201, 209, 221, 225, 228, 235, 266, 268, 269, 272, 275, 283, 292, 293, 295, 297, 299, 319, 336, 344, 345, 347, 365, 366, 394, 413, 428, 430, 435, 459, 461, 463, 464, 466, 467, 468, 469, 474, 475, 477, 479, 481, 483], "up": [1, 7, 9, 23, 33, 42, 45, 61, 63, 64, 68, 73, 75, 76, 77, 84, 92, 93, 94, 95, 100, 101, 102, 103, 106, 109, 120, 126, 132, 138, 139, 140, 149, 151, 158, 163, 166, 167, 177, 179, 183, 186, 190, 191, 193, 194, 197, 200, 208, 209, 213, 221, 225, 226, 230, 235, 240, 242, 243, 245, 247, 252, 255, 258, 261, 265, 266, 267, 268, 269, 270, 275, 276, 278, 280, 282, 283, 284, 292, 293, 297, 308, 309, 311, 315, 319, 320, 323, 328, 331, 333, 334, 337, 338, 340, 341, 344, 345, 347, 348, 352, 355, 356, 358, 359, 362, 364, 365, 369, 374, 375, 376, 381, 384, 385, 386, 387, 388, 389, 390, 394, 395, 399, 402, 410, 413, 416, 417, 421, 425, 427, 428, 429, 430, 432, 434, 435, 436, 441, 450, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "new": [1, 5, 7, 9, 13, 17, 22, 23, 26, 27, 28, 31, 33, 37, 39, 42, 43, 45, 49, 50, 54, 55, 56, 58, 59, 60, 61, 63, 64, 67, 68, 72, 73, 75, 76, 79, 84, 85, 87, 92, 93, 94, 100, 101, 102, 103, 105, 106, 109, 110, 112, 115, 120, 126, 128, 129, 132, 133, 138, 139, 140, 143, 144, 149, 151, 153, 155, 157, 158, 160, 161, 167, 169, 170, 176, 177, 178, 181, 183, 184, 186, 188, 191, 193, 194, 195, 196, 198, 200, 201, 205, 206, 207, 208, 209, 213, 214, 215, 216, 221, 225, 226, 234, 235, 236, 237, 242, 247, 248, 250, 255, 257, 258, 259, 261, 266, 267, 268, 269, 270, 271, 272, 276, 278, 280, 281, 283, 284, 288, 293, 295, 297, 299, 301, 304, 307, 308, 309, 312, 314, 315, 319, 320, 322, 325, 328, 329, 332, 333, 335, 337, 338, 340, 341, 344, 347, 348, 352, 355, 358, 361, 362, 365, 366, 369, 375, 376, 380, 382, 384, 385, 386, 388, 389, 394, 395, 399, 403, 405, 410, 411, 412, 413, 415, 416, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 436, 440, 441, 442, 449, 451, 452, 455, 456, 461, 472, 473, 483, 484], "titl": [1, 64, 84, 93, 95, 106, 109, 110, 120, 151, 160, 184, 189, 240, 247, 262, 267, 281, 283, 292, 337, 340, 344, 345, 369, 373, 384, 386, 395, 411, 412, 413, 420, 426, 462, 464, 466, 473, 475, 481, 483], "comment": [1, 9, 64, 68, 73, 95, 102, 106, 109, 112, 122, 167, 176, 193, 203, 240, 243, 244, 247, 255, 273, 293, 299, 313, 314, 319, 331, 348, 362, 377, 378, 394, 412, 413, 415, 422, 423, 428, 431, 436, 449, 462, 464, 465, 467, 469, 470, 472, 473, 474, 475, 481, 483], "mozilla": [1, 110, 243, 341, 395, 403, 466, 483], "patch": [1, 57, 68, 80, 84, 89, 92, 106, 120, 177, 187, 241, 242, 288, 344, 362, 386, 460, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 478, 479, 481, 482, 483], "pythonexcept": [2, 5, 7, 9, 11, 13, 14, 17, 22, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 39, 40, 41, 45, 47, 49, 51, 54, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 74, 75, 76, 78, 79, 84, 87, 92, 93, 94, 95, 96, 99, 100, 103, 106, 109, 112, 114, 115, 117, 118, 122, 125, 126, 127, 129, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 149, 150, 151, 152, 153, 157, 158, 159, 160, 161, 166, 167, 170, 171, 173, 175, 176, 177, 178, 181, 182, 183, 184, 186, 187, 188, 190, 191, 194, 195, 196, 200, 201, 205, 206, 207, 208, 210, 212, 214, 215, 218, 223, 225, 226, 228, 229, 232, 234, 235, 242, 243, 244, 245, 247, 248, 250, 254, 255, 256, 258, 261, 262, 265, 266, 267, 268, 269, 270, 271, 275, 278, 279, 281, 283, 285, 286, 287, 288, 293, 295, 296, 297, 299, 302, 304, 305, 308, 311, 314, 315, 316, 320, 322, 323, 325, 328, 329, 330, 331, 332, 334, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 349, 352, 353, 357, 358, 361, 362, 363, 364, 365, 366, 367, 369, 375, 378, 379, 381, 382, 385, 386, 388, 389, 390, 393, 394, 395, 397, 399, 400, 401, 402, 403, 405, 407, 408, 410, 411, 413, 414, 415, 416, 419, 420, 422, 423, 424, 426, 428, 429, 430, 431, 432, 434, 435, 436, 438, 439, 441, 445, 450, 452, 455, 456, 461, 462, 463, 464, 465, 466, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484], "pylist_new": [2, 35, 38, 57], "null": [2, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 72, 75, 76, 79, 93, 100, 102, 109, 122, 175, 176, 191, 225, 227, 243, 262, 272, 281, 284, 287, 293, 299, 318, 319, 337, 340, 341, 347, 348, 405, 408, 410, 411, 422, 431, 435, 436, 462, 466, 469, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483], "protocol": [2, 8, 9, 23, 28, 32, 55, 58, 61, 63, 66, 68, 74, 79, 84, 87, 93, 94, 95, 99, 102, 109, 110, 121, 123, 126, 130, 137, 141, 142, 146, 151, 158, 161, 169, 176, 183, 184, 187, 194, 203, 209, 212, 217, 225, 235, 241, 243, 245, 250, 251, 253, 254, 255, 258, 260, 267, 268, 269, 271, 283, 288, 293, 295, 299, 300, 328, 329, 330, 337, 338, 340, 341, 344, 346, 347, 358, 359, 362, 365, 369, 386, 395, 405, 407, 416, 419, 420, 423, 427, 428, 430, 435, 456, 462, 464, 465, 467, 468, 469, 471, 472, 473, 475, 477, 480, 482, 483, 484], "call": [2, 5, 7, 9, 11, 13, 17, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 37, 39, 40, 42, 45, 47, 49, 51, 54, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 74, 75, 76, 77, 79, 84, 87, 89, 92, 93, 94, 96, 98, 99, 100, 101, 102, 103, 106, 109, 110, 112, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 128, 129, 132, 133, 135, 136, 137, 138, 139, 140, 141, 144, 149, 151, 153, 155, 157, 158, 160, 161, 163, 167, 169, 170, 173, 177, 179, 181, 183, 184, 186, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 216, 218, 223, 225, 226, 227, 230, 232, 234, 235, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 275, 276, 278, 281, 282, 283, 284, 288, 291, 293, 295, 296, 297, 299, 302, 305, 307, 308, 309, 314, 319, 320, 321, 322, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 345, 347, 348, 352, 353, 354, 355, 356, 358, 359, 361, 362, 364, 365, 366, 369, 371, 375, 376, 378, 380, 381, 382, 384, 385, 386, 387, 388, 391, 394, 395, 397, 399, 400, 402, 403, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 425, 427, 428, 429, 431, 432, 435, 436, 440, 441, 442, 443, 446, 449, 451, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483], "tp_call": [2, 23, 63, 68, 75, 474, 483], "vectorcal": [2, 27, 58, 61, 63, 68, 472, 473, 474, 482, 483], "api": [2, 7, 11, 13, 15, 16, 17, 20, 22, 23, 24, 26, 27, 28, 35, 38, 39, 45, 46, 48, 51, 55, 58, 59, 61, 63, 64, 65, 68, 72, 74, 75, 76, 79, 84, 87, 88, 91, 92, 97, 100, 101, 102, 104, 107, 108, 109, 110, 112, 120, 125, 127, 128, 129, 132, 133, 136, 137, 139, 140, 142, 159, 161, 164, 169, 170, 175, 176, 177, 185, 187, 188, 191, 192, 194, 195, 197, 198, 201, 202, 203, 205, 206, 208, 209, 211, 217, 223, 228, 235, 236, 246, 250, 254, 255, 257, 258, 259, 262, 267, 268, 269, 271, 273, 280, 281, 282, 283, 285, 293, 294, 295, 298, 302, 304, 309, 318, 319, 320, 332, 337, 341, 342, 345, 352, 353, 355, 357, 360, 362, 365, 369, 379, 386, 388, 389, 390, 394, 395, 400, 405, 406, 407, 409, 411, 414, 415, 419, 420, 429, 430, 432, 433, 435, 436, 440, 441, 445, 451, 461, 462, 463, 464, 484], "number": [2, 5, 7, 9, 13, 22, 23, 25, 26, 28, 31, 32, 33, 39, 40, 41, 42, 50, 54, 55, 58, 59, 60, 64, 66, 68, 72, 73, 75, 76, 77, 79, 84, 87, 89, 92, 93, 94, 95, 96, 99, 100, 101, 102, 106, 108, 109, 112, 115, 116, 117, 118, 120, 122, 126, 132, 133, 137, 138, 139, 141, 144, 146, 149, 151, 152, 155, 158, 160, 163, 166, 167, 170, 173, 175, 176, 177, 183, 186, 188, 190, 191, 193, 195, 196, 199, 202, 203, 205, 208, 211, 212, 213, 214, 215, 216, 218, 225, 226, 230, 234, 235, 240, 242, 244, 245, 247, 248, 250, 251, 254, 255, 257, 258, 259, 261, 264, 266, 267, 269, 270, 271, 272, 274, 275, 276, 278, 281, 283, 285, 288, 290, 292, 295, 297, 299, 304, 305, 307, 308, 312, 313, 314, 315, 318, 319, 320, 321, 322, 324, 325, 326, 328, 331, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 352, 353, 358, 359, 362, 364, 365, 366, 367, 369, 376, 377, 378, 380, 381, 382, 384, 385, 386, 388, 394, 395, 400, 402, 403, 405, 406, 407, 408, 410, 413, 414, 416, 417, 419, 422, 425, 427, 430, 431, 432, 434, 435, 436, 441, 442, 443, 444, 445, 450, 451, 452, 455, 456, 457, 459, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "sequenc": [2, 5, 7, 16, 22, 32, 33, 35, 37, 39, 42, 49, 50, 56, 59, 64, 66, 68, 75, 78, 79, 84, 87, 92, 94, 95, 100, 102, 103, 106, 109, 112, 120, 122, 126, 139, 143, 145, 157, 158, 159, 161, 163, 164, 175, 176, 177, 189, 190, 191, 193, 196, 202, 205, 206, 209, 212, 213, 218, 225, 230, 236, 238, 243, 250, 254, 255, 258, 259, 261, 262, 266, 268, 270, 271, 275, 276, 281, 283, 284, 292, 293, 299, 301, 302, 307, 312, 314, 318, 319, 321, 325, 326, 332, 337, 340, 341, 343, 345, 358, 359, 362, 363, 366, 369, 376, 378, 381, 382, 384, 386, 387, 388, 390, 394, 395, 400, 402, 405, 410, 413, 414, 419, 425, 430, 434, 435, 436, 440, 441, 445, 449, 462, 463, 464, 465, 466, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 483], "map": [2, 16, 22, 32, 33, 34, 42, 49, 50, 59, 65, 66, 68, 75, 78, 79, 84, 85, 87, 93, 94, 95, 102, 103, 104, 109, 110, 112, 122, 143, 155, 158, 160, 161, 166, 169, 170, 175, 177, 181, 183, 184, 186, 190, 191, 193, 195, 196, 203, 205, 212, 213, 216, 217, 225, 226, 230, 236, 242, 245, 247, 254, 255, 259, 260, 261, 267, 268, 269, 270, 271, 272, 273, 279, 280, 281, 283, 285, 287, 288, 291, 292, 293, 295, 298, 299, 308, 312, 314, 318, 319, 321, 322, 329, 337, 340, 341, 343, 345, 346, 347, 348, 352, 362, 365, 366, 367, 376, 377, 384, 385, 386, 387, 394, 395, 402, 411, 413, 415, 416, 430, 431, 432, 436, 440, 441, 442, 444, 450, 452, 455, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483], "buffer": [2, 8, 9, 18, 24, 32, 33, 34, 41, 42, 43, 50, 64, 65, 66, 68, 75, 87, 92, 96, 101, 112, 118, 120, 121, 126, 127, 130, 136, 137, 142, 146, 149, 151, 157, 158, 161, 176, 177, 188, 212, 213, 214, 215, 225, 234, 235, 242, 245, 269, 270, 278, 282, 283, 284, 293, 295, 296, 298, 314, 315, 322, 328, 331, 332, 333, 337, 341, 344, 347, 348, 352, 358, 359, 360, 362, 363, 365, 386, 388, 395, 407, 408, 413, 414, 422, 424, 455, 456, 464, 465, 466, 467, 468, 469, 470, 475, 477, 478, 479, 480, 482, 483, 484], "structur": [2, 5, 13, 17, 22, 26, 31, 32, 33, 34, 42, 43, 45, 47, 50, 55, 58, 59, 61, 66, 68, 73, 75, 76, 78, 79, 85, 92, 93, 95, 96, 100, 101, 106, 118, 128, 135, 139, 144, 153, 158, 177, 194, 196, 201, 203, 204, 205, 206, 207, 212, 213, 215, 217, 222, 223, 226, 230, 233, 245, 247, 248, 251, 254, 255, 256, 258, 261, 262, 271, 276, 281, 283, 293, 299, 305, 307, 311, 319, 332, 333, 337, 339, 341, 344, 346, 347, 348, 354, 362, 366, 369, 375, 384, 385, 386, 388, 402, 410, 413, 414, 419, 422, 423, 427, 428, 432, 433, 462, 463, 464, 465, 466, 467, 468, 469, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483], "request": [2, 5, 23, 31, 33, 42, 43, 45, 49, 61, 63, 68, 76, 84, 85, 94, 95, 99, 100, 102, 109, 110, 120, 133, 139, 142, 151, 158, 160, 166, 169, 176, 177, 186, 197, 208, 212, 213, 215, 223, 225, 226, 230, 234, 241, 242, 243, 244, 245, 247, 248, 250, 254, 255, 256, 258, 271, 283, 288, 292, 293, 295, 299, 305, 307, 309, 314, 316, 322, 328, 331, 333, 334, 341, 344, 348, 352, 362, 366, 376, 384, 389, 392, 394, 396, 399, 405, 407, 410, 416, 417, 419, 420, 423, 428, 432, 436, 441, 451, 453, 461, 462, 463, 465, 466, 467, 468, 469, 472, 475, 476, 477, 478, 480, 481, 482, 483], "type": [2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 49, 50, 53, 54, 55, 56, 59, 60, 62, 67, 68, 73, 74, 77, 79, 80, 84, 85, 86, 87, 88, 89, 92, 93, 96, 99, 101, 102, 103, 110, 112, 115, 117, 118, 121, 123, 126, 139, 142, 144, 145, 150, 151, 152, 153, 155, 158, 160, 161, 167, 168, 169, 172, 173, 177, 178, 182, 184, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 216, 221, 223, 225, 226, 227, 230, 235, 236, 240, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 254, 256, 258, 261, 262, 264, 266, 267, 268, 269, 270, 272, 273, 275, 278, 279, 281, 283, 284, 285, 290, 293, 296, 297, 298, 304, 307, 308, 313, 314, 315, 316, 319, 320, 321, 324, 325, 328, 329, 330, 331, 332, 333, 336, 337, 338, 341, 342, 343, 345, 347, 348, 349, 351, 352, 358, 362, 363, 365, 366, 368, 373, 376, 377, 378, 381, 382, 384, 388, 389, 390, 394, 395, 399, 400, 401, 402, 403, 404, 406, 408, 411, 412, 413, 415, 416, 419, 420, 422, 425, 426, 429, 430, 431, 432, 433, 435, 439, 440, 441, 442, 443, 448, 449, 450, 451, 455, 456, 461, 462, 463, 469, 470, 471, 475, 483, 484], "independ": [2, 18, 22, 25, 33, 34, 45, 68, 73, 75, 84, 92, 94, 95, 100, 102, 160, 183, 186, 193, 201, 225, 226, 246, 261, 266, 267, 271, 343, 344, 352, 353, 354, 366, 369, 376, 378, 388, 399, 410, 413, 422, 430, 456, 462, 469, 476, 482, 483, 484], "field": [2, 5, 13, 28, 31, 33, 34, 42, 54, 55, 58, 60, 61, 63, 64, 66, 68, 73, 75, 76, 84, 87, 93, 94, 100, 101, 118, 151, 153, 158, 160, 177, 183, 186, 191, 196, 199, 202, 203, 205, 208, 209, 213, 233, 234, 236, 242, 247, 259, 261, 267, 268, 272, 281, 293, 314, 315, 316, 322, 325, 335, 337, 339, 340, 341, 342, 344, 345, 347, 348, 352, 356, 358, 361, 366, 369, 376, 378, 381, 394, 398, 400, 405, 411, 413, 422, 428, 435, 452, 455, 462, 463, 464, 465, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "readon": [2, 43, 58, 68, 248, 332, 340, 344, 376, 410, 411, 468, 474, 483], "format": [2, 5, 9, 10, 18, 23, 25, 31, 35, 41, 48, 49, 59, 63, 64, 68, 73, 75, 79, 84, 85, 87, 92, 93, 94, 103, 106, 109, 110, 112, 117, 118, 119, 120, 122, 133, 141, 142, 143, 144, 145, 146, 151, 152, 153, 158, 164, 167, 169, 173, 175, 176, 183, 184, 186, 190, 191, 192, 193, 194, 196, 200, 201, 202, 203, 205, 207, 208, 209, 211, 212, 213, 214, 217, 221, 225, 228, 230, 234, 235, 243, 245, 248, 249, 250, 255, 259, 262, 265, 266, 267, 269, 270, 271, 272, 276, 281, 284, 292, 293, 295, 296, 297, 298, 302, 304, 307, 308, 314, 319, 320, 321, 330, 331, 332, 336, 337, 338, 340, 341, 348, 349, 352, 359, 362, 363, 366, 368, 369, 375, 376, 378, 381, 382, 384, 385, 388, 394, 395, 397, 400, 405, 413, 417, 422, 423, 427, 428, 430, 431, 434, 435, 442, 444, 445, 449, 450, 451, 455, 461, 462, 463, 464, 465, 466, 467, 473, 474, 475, 476, 477, 480, 481, 483, 484], "shape": [2, 63, 68, 94, 222, 225, 284, 318, 344, 386, 468, 472, 473, 476, 483], "stride": [2, 63, 68, 255, 344, 428, 430, 465, 476, 483], "suboffset": [2, 63, 68, 344, 476], "contigu": [2, 5, 43, 68, 87, 190, 248, 261, 271, 299, 344, 358, 415, 468, 476, 483], "compound": [2, 68, 222, 247, 345, 364, 369, 375, 376, 431, 433, 435, 468, 476, 483], "complex": [2, 5, 13, 15, 68, 72, 73, 75, 84, 85, 87, 102, 106, 120, 126, 128, 132, 154, 161, 167, 170, 175, 184, 186, 187, 190, 194, 200, 203, 225, 226, 254, 261, 262, 268, 275, 289, 290, 292, 299, 307, 319, 333, 334, 345, 348, 352, 358, 384, 386, 419, 427, 430, 435, 436, 440, 449, 450, 455, 464, 466, 467, 468, 469, 471, 472, 473, 475, 477, 479, 480, 481, 482, 483], "array": [2, 5, 9, 10, 16, 31, 39, 45, 54, 58, 60, 61, 63, 64, 66, 68, 72, 73, 75, 76, 78, 84, 87, 93, 100, 102, 117, 118, 142, 158, 178, 182, 215, 236, 254, 279, 283, 284, 285, 287, 293, 299, 309, 337, 344, 347, 361, 379, 381, 385, 386, 402, 408, 419, 427, 428, 442, 452, 465, 466, 467, 468, 469, 470, 475, 478, 480, 482, 483], "numpi": [2, 68, 85, 121, 225, 284, 299, 343, 444, 450, 453, 461, 467, 468, 473, 475, 476, 478, 483], "style": [2, 5, 9, 23, 64, 68, 73, 76, 78, 85, 87, 94, 95, 101, 103, 106, 118, 120, 133, 143, 144, 146, 150, 160, 167, 190, 196, 205, 207, 220, 221, 224, 225, 226, 230, 240, 242, 245, 254, 261, 267, 268, 271, 275, 276, 292, 293, 296, 297, 299, 308, 313, 319, 330, 332, 333, 337, 340, 352, 355, 362, 365, 368, 369, 373, 375, 381, 388, 391, 407, 420, 430, 431, 434, 435, 445, 446, 449, 452, 456, 461, 462, 463, 464, 465, 466, 468, 469, 470, 473, 474, 475, 476, 477, 480, 481, 483, 484], "and": [2, 9, 10, 11, 13, 16, 17, 18, 22, 24, 26, 27, 28, 30, 31, 32, 34, 35, 37, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 59, 60, 61, 63, 65, 66, 67, 68, 74, 78, 80, 84, 87, 89, 91, 97, 98, 99, 101, 103, 105, 107, 112, 113, 114, 115, 117, 118, 119, 122, 123, 124, 129, 130, 134, 135, 137, 138, 140, 141, 143, 144, 145, 147, 149, 152, 153, 154, 155, 157, 159, 160, 163, 164, 166, 167, 170, 173, 174, 175, 177, 178, 179, 181, 182, 184, 185, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 231, 232, 233, 234, 236, 242, 244, 245, 246, 248, 249, 251, 253, 254, 256, 257, 258, 261, 264, 265, 267, 269, 271, 272, 273, 276, 278, 279, 280, 281, 282, 284, 285, 287, 288, 290, 291, 295, 296, 297, 298, 301, 302, 303, 305, 307, 309, 311, 312, 314, 315, 318, 320, 321, 322, 323, 325, 326, 329, 330, 331, 334, 335, 336, 338, 339, 342, 345, 346, 348, 352, 354, 355, 356, 359, 360, 361, 362, 363, 368, 374, 375, 376, 377, 378, 380, 381, 383, 387, 391, 394, 395, 397, 398, 399, 400, 402, 403, 405, 406, 407, 408, 412, 414, 415, 416, 417, 420, 421, 422, 423, 426, 427, 431, 433, 434, 436, 438, 440, 441, 442, 443, 446, 449, 451, 455, 457, 458, 459, 472, 473, 484], "pil": [2, 68, 85, 344], "relat": [2, 33, 42, 45, 63, 68, 79, 84, 85, 93, 95, 96, 101, 102, 103, 106, 108, 109, 112, 113, 126, 133, 139, 153, 158, 167, 169, 177, 181, 183, 190, 191, 193, 194, 196, 200, 205, 207, 208, 209, 211, 213, 215, 217, 225, 228, 235, 241, 245, 255, 257, 259, 261, 265, 266, 267, 269, 270, 271, 275, 278, 280, 281, 283, 290, 293, 296, 298, 299, 302, 308, 314, 315, 319, 320, 324, 325, 331, 332, 333, 337, 340, 341, 343, 344, 345, 348, 352, 354, 358, 362, 366, 369, 375, 376, 380, 384, 385, 388, 394, 399, 400, 402, 405, 407, 412, 413, 415, 421, 422, 425, 428, 430, 431, 433, 435, 436, 450, 455, 461, 462, 463, 464, 465, 466, 469, 470, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "function": [2, 5, 9, 10, 11, 13, 16, 17, 22, 23, 24, 26, 28, 30, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 66, 67, 68, 71, 72, 74, 75, 76, 77, 78, 79, 80, 84, 87, 89, 92, 96, 98, 99, 101, 102, 109, 110, 112, 113, 114, 115, 117, 118, 124, 126, 128, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 154, 155, 157, 158, 159, 161, 164, 166, 167, 170, 172, 173, 177, 178, 179, 182, 183, 184, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 220, 221, 222, 224, 225, 228, 230, 231, 234, 235, 236, 242, 243, 245, 247, 248, 249, 250, 252, 254, 255, 256, 257, 258, 264, 265, 266, 269, 270, 272, 276, 278, 280, 281, 283, 287, 290, 292, 293, 295, 297, 298, 302, 304, 308, 309, 311, 312, 313, 314, 315, 320, 321, 322, 324, 325, 328, 330, 331, 332, 333, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 351, 352, 355, 356, 358, 359, 361, 362, 363, 364, 365, 366, 367, 369, 371, 377, 378, 380, 381, 382, 386, 387, 389, 390, 394, 395, 397, 399, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 425, 429, 431, 432, 435, 436, 439, 440, 442, 443, 445, 450, 451, 455, 456, 461, 464, 465, 469, 471, 472, 473, 474, 475, 477, 481, 482, 483, 484], "pyobject": [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 79, 96, 98, 100, 176, 319, 362, 464, 467, 468, 472, 473, 480, 481, 483], "_pyobject_new": 3, "pytypeobject": [3, 6, 8, 9, 12, 13, 15, 17, 19, 20, 21, 22, 25, 26, 27, 28, 29, 30, 35, 37, 38, 39, 44, 45, 46, 49, 50, 55, 56, 57, 58, 60, 61, 62, 64, 68, 75, 76, 100, 463, 473, 474, 478, 481, 482, 483], "pyvarobject": [3, 28, 50, 57, 58, 68, 362, 473], "_pyobject_newvar": 3, "py_ssize_t": [3, 5, 7, 8, 9, 10, 13, 18, 22, 23, 28, 34, 35, 38, 39, 40, 41, 43, 45, 47, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 73, 75, 100, 176, 352, 428, 467, 468, 473, 481, 483], "size": [3, 5, 7, 9, 18, 28, 30, 31, 34, 39, 41, 42, 43, 49, 51, 54, 55, 58, 59, 60, 61, 63, 64, 68, 73, 75, 76, 92, 93, 94, 96, 98, 100, 101, 102, 109, 115, 117, 118, 120, 133, 137, 141, 142, 144, 145, 149, 151, 153, 158, 161, 163, 173, 174, 177, 184, 185, 186, 190, 191, 215, 216, 219, 223, 225, 226, 242, 245, 247, 248, 250, 251, 258, 261, 262, 266, 269, 270, 278, 283, 284, 295, 299, 305, 308, 311, 314, 320, 321, 322, 335, 337, 338, 340, 342, 343, 344, 348, 349, 352, 358, 360, 361, 362, 364, 365, 369, 372, 375, 376, 381, 384, 386, 388, 395, 408, 410, 421, 422, 428, 432, 446, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "pyobject_init": [3, 57, 481, 482, 483], "op": [3, 10, 15, 27, 28, 33, 37, 39, 49, 63, 64, 75, 85, 122, 138, 177, 191, 230, 269, 283, 293, 319, 337, 340, 352, 365, 377, 378, 407, 465, 468, 472, 473, 474, 480, 483], "abi": [3, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 21, 22, 23, 24, 25, 26, 28, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 45, 47, 48, 49, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 67, 68, 98, 100, 352, 456, 460, 469, 473, 474, 477, 478, 480, 482, 483, 484], "pyobject_initvar": [3, 57, 483], "pyobject_new": [3, 28, 42, 63, 68, 465, 481, 482, 483], "typeobj": [3, 28, 100, 388], "header": [3, 25, 28, 58, 63, 68, 73, 84, 101, 106, 117, 136, 142, 146, 151, 153, 155, 167, 169, 176, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 215, 230, 234, 242, 243, 244, 245, 247, 248, 250, 256, 267, 269, 271, 276, 282, 285, 288, 293, 297, 305, 311, 317, 335, 336, 337, 341, 349, 352, 355, 358, 362, 377, 381, 385, 393, 395, 397, 411, 419, 422, 427, 429, 452, 456, 461, 463, 465, 467, 468, 469, 471, 474, 475, 477, 478, 479, 480, 481, 482, 483], "tp_basics": [3, 28, 61, 63, 75, 76, 482, 483], "pyobject_newvar": [3, 28, 42, 63, 100, 465, 481, 482, 483], "tp_items": [3, 28, 61, 63, 75, 76], "tupl": [3, 5, 10, 14, 16, 23, 27, 35, 38, 40, 42, 49, 54, 55, 58, 59, 61, 62, 63, 66, 68, 72, 73, 75, 76, 79, 87, 94, 95, 98, 101, 102, 106, 108, 110, 112, 113, 115, 116, 117, 120, 121, 122, 126, 133, 134, 137, 141, 144, 147, 150, 152, 155, 158, 166, 170, 176, 177, 181, 182, 183, 184, 186, 187, 189, 190, 191, 193, 196, 203, 205, 208, 209, 213, 221, 223, 225, 226, 227, 232, 233, 236, 242, 243, 244, 245, 248, 250, 254, 255, 258, 259, 261, 262, 266, 267, 269, 271, 272, 274, 276, 279, 281, 283, 286, 288, 289, 291, 292, 293, 295, 299, 303, 304, 305, 307, 308, 310, 314, 316, 318, 319, 322, 325, 328, 329, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 345, 347, 348, 349, 351, 355, 359, 360, 361, 362, 365, 366, 369, 376, 378, 381, 382, 384, 385, 388, 389, 394, 395, 396, 398, 400, 401, 402, 405, 412, 413, 415, 416, 419, 420, 422, 427, 428, 429, 430, 431, 432, 436, 440, 441, 443, 445, 446, 450, 451, 456, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "void": [3, 5, 7, 9, 11, 12, 13, 17, 21, 22, 23, 24, 25, 27, 28, 30, 31, 33, 34, 35, 38, 39, 41, 42, 45, 48, 49, 51, 52, 53, 58, 59, 60, 61, 63, 64, 66, 67, 71, 72, 73, 75, 76, 77, 86, 98, 100, 176, 319, 347, 411, 431, 469, 472, 473, 474, 481, 482, 483], "pyobject_del": [3, 42, 63, 465], "tp_dealloc": [3, 28, 61, 63, 67, 68, 75, 76, 473, 481, 483], "handler": [3, 23, 24, 28, 33, 34, 59, 61, 63, 64, 66, 67, 68, 73, 75, 76, 81, 87, 109, 115, 118, 120, 122, 125, 130, 132, 135, 145, 151, 152, 167, 177, 185, 188, 189, 191, 196, 197, 201, 202, 213, 225, 229, 240, 245, 254, 256, 258, 260, 266, 273, 283, 292, 293, 297, 308, 314, 315, 328, 329, 332, 337, 340, 344, 352, 356, 358, 362, 366, 368, 388, 393, 395, 403, 411, 412, 414, 416, 417, 420, 427, 428, 429, 455, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483], "_py_nonestruct": [3, 86], "none": [3, 5, 16, 20, 23, 26, 31, 33, 34, 45, 55, 56, 58, 63, 64, 67, 68, 73, 80, 85, 87, 88, 89, 93, 95, 96, 101, 102, 103, 106, 107, 108, 110, 112, 113, 114, 116, 117, 120, 122, 126, 128, 129, 132, 133, 135, 136, 137, 138, 139, 141, 143, 144, 147, 149, 150, 151, 152, 155, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 181, 183, 184, 186, 189, 190, 191, 193, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 216, 218, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 281, 283, 284, 286, 287, 288, 291, 292, 293, 296, 297, 299, 300, 302, 304, 305, 307, 308, 311, 312, 314, 316, 318, 319, 320, 321, 323, 324, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 347, 348, 349, 352, 353, 355, 358, 359, 360, 362, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 427, 430, 431, 432, 435, 436, 437, 441, 442, 443, 446, 450, 453, 456, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "py_non": [3, 23, 27, 33, 46, 47, 56, 67, 73, 86, 431], "pymodule_cr": [3, 33, 35, 45, 72, 73, 76], "macro": [4, 5, 6, 17, 23, 28, 33, 34, 35, 42, 43, 44, 45, 50, 55, 56, 59, 60, 63, 64, 68, 73, 76, 176, 286, 352, 362, 456, 465, 466, 467, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "built": [4, 7, 16, 23, 31, 33, 34, 37, 42, 47, 49, 58, 59, 61, 63, 68, 73, 75, 76, 77, 79, 80, 84, 85, 87, 93, 101, 102, 109, 110, 111, 112, 115, 120, 128, 132, 151, 158, 159, 161, 163, 168, 178, 181, 182, 186, 190, 191, 195, 199, 202, 206, 213, 221, 225, 230, 235, 247, 250, 251, 252, 254, 255, 257, 258, 261, 266, 275, 276, 283, 292, 293, 297, 299, 308, 311, 313, 320, 321, 328, 329, 337, 340, 341, 345, 347, 348, 352, 355, 362, 369, 376, 384, 388, 389, 390, 400, 402, 405, 410, 411, 413, 415, 419, 423, 427, 429, 430, 432, 434, 435, 436, 442, 443, 455, 456, 461, 463, 464, 465, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484], "run": [4, 23, 28, 33, 34, 42, 45, 51, 59, 63, 64, 68, 72, 73, 76, 77, 79, 81, 84, 85, 86, 89, 92, 93, 95, 96, 100, 101, 106, 107, 109, 112, 115, 120, 122, 123, 124, 125, 129, 132, 133, 134, 135, 136, 137, 138, 140, 144, 151, 152, 157, 163, 166, 167, 169, 170, 173, 176, 177, 181, 186, 187, 193, 200, 203, 208, 213, 214, 226, 228, 230, 235, 236, 242, 243, 244, 245, 250, 251, 255, 261, 266, 267, 268, 269, 271, 279, 283, 288, 292, 293, 296, 297, 308, 313, 314, 320, 322, 323, 324, 325, 331, 332, 333, 334, 337, 338, 340, 341, 344, 347, 348, 352, 353, 354, 355, 356, 362, 364, 365, 366, 368, 369, 376, 380, 382, 384, 386, 389, 390, 399, 400, 402, 403, 405, 407, 413, 420, 421, 427, 428, 429, 430, 431, 432, 435, 440, 443, 451, 452, 453, 455, 456, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "time": [4, 5, 13, 20, 22, 23, 27, 28, 31, 33, 34, 41, 42, 45, 54, 63, 64, 68, 72, 73, 75, 76, 77, 79, 81, 85, 86, 87, 92, 93, 94, 95, 96, 106, 108, 110, 115, 117, 118, 120, 126, 132, 133, 134, 136, 138, 139, 140, 141, 142, 144, 146, 150, 151, 157, 160, 163, 166, 167, 169, 173, 176, 177, 182, 186, 190, 193, 202, 203, 208, 209, 212, 213, 214, 216, 218, 225, 226, 230, 234, 235, 243, 245, 247, 248, 250, 254, 255, 257, 259, 261, 266, 267, 268, 269, 271, 276, 281, 282, 283, 284, 288, 292, 293, 294, 295, 297, 299, 308, 309, 314, 318, 319, 320, 322, 325, 326, 328, 329, 330, 331, 332, 333, 337, 338, 340, 341, 342, 344, 348, 352, 353, 358, 359, 362, 364, 365, 367, 369, 372, 375, 376, 379, 380, 384, 386, 388, 389, 390, 395, 398, 400, 402, 405, 408, 410, 415, 416, 419, 420, 422, 423, 426, 427, 428, 429, 430, 432, 434, 435, 436, 440, 443, 449, 451, 452, 455, 456, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 474, 477, 483], "py_major_vers": [4, 113], "1a2": 4, "py_minor_vers": [4, 66, 113, 481], "py_micro_vers": [4, 113], "py_release_level": [4, 113], "0xa": 4, "alpha": [4, 68, 80, 87, 113, 284, 288, 307, 318, 352, 355, 449, 451, 462, 463, 468, 471, 484], "0xb": 4, "beta": [4, 68, 113, 318, 352, 451, 462, 468, 478, 484], "0xc": 4, "0xf": 4, "py_release_seri": [4, 113], "py_version_hex": [4, 57, 100, 472, 473, 481, 482, 483], "32": [4, 16, 25, 41, 42, 59, 68, 86, 94, 95, 98, 99, 106, 107, 109, 115, 121, 139, 141, 146, 153, 158, 166, 176, 186, 215, 226, 235, 250, 251, 259, 261, 262, 270, 283, 293, 303, 304, 306, 311, 318, 326, 333, 337, 343, 344, 347, 349, 352, 365, 366, 388, 398, 405, 406, 422, 423, 424, 428, 435, 446, 456, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483], "big": [4, 25, 35, 42, 64, 68, 73, 78, 84, 95, 102, 107, 109, 132, 133, 141, 153, 158, 167, 176, 177, 191, 230, 259, 269, 295, 344, 347, 349, 352, 362, 398, 405, 434, 452, 456, 464, 465, 466, 469, 471, 473, 475, 477, 483], "endian": [4, 25, 31, 42, 64, 84, 107, 109, 141, 153, 158, 176, 230, 259, 295, 347, 349, 352, 398, 405, 452, 477, 483], "order": [4, 7, 13, 28, 31, 33, 34, 43, 45, 58, 59, 63, 64, 68, 72, 73, 75, 76, 87, 92, 93, 94, 95, 97, 99, 100, 101, 102, 106, 108, 109, 110, 112, 116, 118, 120, 126, 133, 139, 140, 145, 147, 149, 151, 153, 155, 158, 160, 167, 169, 177, 178, 179, 183, 184, 186, 187, 190, 191, 193, 196, 200, 202, 203, 205, 208, 213, 214, 218, 224, 225, 228, 230, 233, 236, 245, 247, 248, 250, 254, 255, 259, 261, 262, 266, 267, 269, 271, 275, 281, 283, 288, 293, 295, 299, 302, 303, 304, 307, 308, 309, 313, 314, 315, 316, 318, 319, 325, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 344, 345, 348, 352, 353, 358, 362, 364, 365, 366, 369, 376, 381, 382, 384, 385, 386, 388, 394, 395, 400, 402, 410, 411, 413, 415, 421, 422, 427, 428, 429, 431, 432, 433, 435, 440, 442, 443, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484], "0x03": [4, 191], "16": [4, 5, 16, 34, 41, 47, 68, 78, 85, 89, 94, 95, 96, 102, 107, 109, 117, 121, 141, 146, 150, 158, 173, 176, 177, 183, 193, 211, 221, 225, 226, 235, 236, 240, 259, 261, 262, 267, 283, 292, 293, 295, 314, 318, 319, 322, 326, 332, 337, 341, 343, 344, 345, 348, 352, 366, 369, 378, 398, 424, 426, 435, 440, 442, 444, 446, 449, 451, 452, 453, 456, 462, 464, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "0x04": [4, 191, 428], "17": [4, 68, 94, 95, 102, 109, 139, 150, 183, 186, 190, 193, 208, 211, 223, 236, 257, 261, 292, 293, 319, 366, 378, 426, 444, 449, 463, 466, 468, 469, 471, 474, 475, 477, 478, 483, 484], "24": [4, 85, 94, 95, 96, 99, 106, 109, 139, 141, 150, 183, 186, 193, 209, 236, 259, 261, 295, 319, 332, 343, 344, 347, 349, 366, 424, 435, 469, 473, 476, 477, 481, 482, 483], "0x01": [4, 191, 337], "25": [4, 85, 94, 95, 126, 150, 183, 186, 190, 221, 236, 259, 261, 283, 318, 319, 322, 335, 337, 340, 343, 344, 361, 378, 382, 384, 424, 442, 446, 448, 449, 451, 462, 464, 465, 466, 468, 469, 473, 474, 476, 478, 479, 480, 481, 482, 483], "28": [4, 33, 98, 102, 150, 186, 226, 236, 259, 340, 366, 384, 466, 467, 468, 472, 475, 481, 482, 483], "29": [4, 98, 102, 106, 150, 183, 186, 190, 236, 259, 261, 267, 318, 366, 465, 468, 472, 476, 481, 482, 483], "0x2": 4, "hexvers": [4, 80, 352, 450, 476], "0x030401a2": 4, "10": [4, 10, 14, 18, 20, 22, 23, 26, 28, 33, 34, 36, 39, 45, 47, 49, 52, 55, 57, 58, 61, 63, 64, 68, 73, 78, 79, 84, 87, 92, 93, 94, 95, 98, 101, 102, 103, 106, 108, 109, 110, 112, 113, 115, 116, 120, 121, 122, 123, 126, 129, 131, 134, 135, 136, 137, 138, 139, 143, 147, 149, 150, 151, 154, 155, 158, 160, 163, 169, 176, 177, 181, 183, 185, 186, 188, 191, 193, 209, 213, 214, 215, 216, 218, 220, 221, 223, 225, 226, 231, 233, 235, 236, 237, 241, 242, 250, 251, 252, 255, 258, 259, 261, 266, 267, 268, 274, 275, 278, 282, 283, 284, 286, 288, 291, 292, 293, 294, 296, 303, 304, 307, 308, 311, 312, 318, 319, 322, 325, 326, 330, 332, 337, 340, 341, 342, 343, 344, 345, 347, 348, 352, 355, 360, 362, 364, 365, 366, 367, 369, 372, 378, 381, 384, 385, 386, 388, 390, 394, 395, 407, 413, 415, 420, 422, 423, 425, 427, 428, 429, 430, 431, 432, 435, 440, 441, 442, 443, 444, 446, 448, 449, 451, 452, 453, 455, 456, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 478, 482, 484], "0x030a00f0": 4, "if": [4, 5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 45, 47, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 79, 80, 84, 87, 88, 89, 92, 93, 94, 95, 96, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 115, 116, 117, 120, 122, 126, 129, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 151, 152, 153, 155, 157, 158, 159, 160, 161, 163, 166, 167, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 184, 186, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 218, 220, 221, 223, 225, 226, 228, 230, 231, 232, 233, 234, 235, 236, 240, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 255, 257, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 280, 281, 282, 283, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 299, 301, 302, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 354, 355, 356, 358, 359, 362, 364, 365, 366, 367, 369, 371, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 394, 395, 397, 399, 400, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 440, 442, 443, 445, 448, 450, 451, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "py_vers": [4, 33, 57, 100, 176, 473, 475, 483], "const": [4, 5, 7, 8, 9, 10, 11, 13, 14, 17, 18, 22, 23, 24, 25, 26, 30, 31, 33, 34, 39, 40, 41, 43, 45, 48, 49, 51, 52, 53, 54, 58, 59, 60, 61, 63, 64, 66, 68, 73, 75, 79, 98, 100, 118, 292, 411, 477, 480, 481, 483], "unsign": [4, 5, 7, 9, 18, 25, 30, 31, 33, 34, 35, 39, 42, 51, 58, 61, 63, 64, 75, 121, 141, 146, 176, 293, 295, 299, 337, 344, 347, 349, 408, 410, 411, 424, 452, 464, 465, 467, 472, 476, 480, 483], "long": [4, 5, 6, 9, 18, 22, 23, 31, 33, 34, 35, 39, 41, 45, 58, 59, 61, 63, 64, 66, 68, 73, 75, 84, 85, 95, 98, 100, 101, 102, 106, 107, 110, 112, 120, 121, 126, 139, 143, 146, 167, 169, 176, 177, 190, 193, 202, 208, 212, 215, 223, 225, 226, 228, 242, 245, 247, 248, 258, 259, 261, 267, 268, 283, 292, 293, 299, 303, 305, 306, 307, 308, 319, 321, 328, 330, 333, 335, 337, 338, 340, 341, 344, 347, 348, 352, 358, 362, 364, 365, 366, 369, 375, 376, 381, 395, 400, 405, 410, 411, 425, 427, 428, 430, 435, 455, 461, 462, 463, 465, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "11": [4, 7, 13, 23, 25, 26, 31, 33, 34, 35, 43, 52, 57, 58, 59, 60, 61, 68, 72, 85, 87, 89, 92, 93, 94, 95, 96, 100, 101, 102, 104, 106, 109, 112, 113, 117, 120, 122, 126, 127, 128, 135, 136, 138, 139, 141, 146, 150, 151, 152, 153, 158, 160, 166, 169, 173, 175, 176, 181, 183, 184, 186, 191, 193, 211, 212, 213, 215, 218, 221, 225, 226, 230, 231, 234, 235, 236, 241, 242, 245, 247, 249, 250, 252, 253, 255, 258, 259, 261, 262, 266, 267, 268, 269, 272, 275, 278, 281, 283, 287, 288, 291, 293, 295, 296, 297, 299, 301, 307, 318, 319, 321, 322, 330, 332, 333, 334, 336, 337, 339, 340, 341, 343, 344, 345, 347, 348, 349, 352, 354, 355, 358, 359, 360, 361, 362, 364, 366, 378, 379, 381, 383, 386, 388, 395, 397, 399, 400, 403, 407, 408, 412, 422, 423, 424, 425, 427, 428, 430, 431, 435, 436, 442, 446, 455, 456, 461, 464, 465, 466, 468, 470, 472, 474, 475, 477, 478, 479, 484], "includ": [4, 5, 7, 9, 13, 22, 23, 26, 27, 28, 31, 32, 33, 34, 49, 53, 55, 56, 58, 61, 63, 64, 66, 68, 72, 73, 75, 76, 77, 79, 81, 84, 85, 86, 89, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 109, 110, 112, 117, 120, 122, 133, 137, 139, 143, 146, 152, 153, 155, 157, 158, 159, 161, 163, 167, 173, 176, 177, 178, 181, 183, 186, 190, 191, 193, 196, 200, 202, 203, 205, 206, 207, 208, 212, 213, 225, 226, 228, 230, 234, 235, 242, 243, 244, 245, 247, 248, 250, 251, 252, 253, 255, 257, 258, 259, 261, 262, 264, 265, 266, 267, 268, 270, 271, 273, 275, 276, 278, 281, 283, 288, 289, 292, 293, 294, 297, 299, 305, 307, 308, 309, 311, 312, 314, 319, 322, 323, 330, 331, 332, 333, 334, 335, 337, 340, 341, 342, 344, 345, 347, 348, 352, 355, 356, 358, 359, 362, 364, 365, 366, 369, 375, 376, 378, 380, 381, 382, 384, 385, 386, 388, 390, 394, 395, 397, 399, 400, 402, 403, 405, 406, 410, 411, 413, 415, 416, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 449, 451, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "patchlevel": [4, 303, 483], "these": [5, 7, 9, 11, 13, 18, 23, 25, 28, 31, 33, 34, 41, 42, 45, 49, 51, 58, 59, 63, 64, 66, 72, 73, 75, 76, 77, 84, 85, 92, 93, 94, 95, 99, 100, 101, 102, 103, 106, 108, 109, 110, 115, 120, 126, 132, 133, 140, 141, 143, 144, 146, 149, 151, 152, 153, 155, 158, 159, 161, 163, 167, 169, 176, 177, 178, 181, 183, 184, 186, 189, 190, 191, 192, 193, 194, 196, 197, 198, 200, 201, 202, 205, 206, 207, 208, 209, 213, 214, 221, 225, 226, 230, 235, 242, 243, 245, 247, 250, 251, 252, 253, 255, 258, 259, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 282, 283, 288, 292, 293, 295, 297, 299, 302, 307, 308, 312, 314, 319, 320, 321, 322, 324, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 352, 353, 354, 355, 356, 358, 359, 361, 362, 365, 366, 369, 375, 378, 380, 381, 384, 385, 386, 387, 388, 390, 394, 395, 399, 400, 402, 403, 405, 408, 410, 411, 413, 414, 415, 416, 419, 420, 422, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "are": [5, 7, 9, 11, 13, 18, 22, 23, 25, 28, 31, 33, 34, 39, 40, 41, 42, 45, 47, 49, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 79, 87, 89, 92, 93, 95, 96, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 112, 115, 117, 120, 122, 126, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 149, 151, 152, 153, 155, 157, 158, 159, 161, 163, 166, 167, 169, 170, 173, 176, 177, 178, 179, 181, 183, 184, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 225, 226, 228, 230, 233, 234, 235, 236, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 281, 282, 283, 287, 288, 290, 293, 295, 296, 297, 299, 301, 302, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 316, 319, 320, 321, 322, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 354, 355, 356, 358, 359, 361, 362, 364, 365, 366, 369, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 394, 395, 397, 399, 400, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 442, 443, 446, 449, 451, 455, 456, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483], "use": [5, 7, 9, 10, 11, 13, 17, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 36, 39, 40, 41, 42, 43, 45, 46, 49, 50, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 68, 71, 72, 73, 74, 75, 76, 79, 87, 89, 91, 92, 93, 95, 100, 103, 105, 108, 109, 110, 112, 114, 115, 117, 119, 120, 122, 123, 124, 126, 128, 129, 132, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 152, 153, 155, 157, 158, 159, 161, 164, 166, 167, 168, 170, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 220, 221, 222, 223, 225, 226, 228, 230, 234, 236, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 273, 275, 276, 278, 280, 281, 284, 285, 287, 288, 289, 290, 292, 293, 295, 297, 298, 299, 301, 302, 303, 304, 305, 307, 309, 311, 312, 313, 315, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 341, 342, 343, 344, 345, 346, 347, 352, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 368, 369, 374, 376, 378, 380, 381, 382, 385, 386, 387, 390, 394, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 426, 427, 429, 430, 431, 432, 434, 435, 436, 440, 442, 443, 446, 449, 453, 455, 456, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 482, 483, 484], "when": [5, 7, 9, 10, 11, 13, 22, 23, 27, 28, 31, 33, 34, 36, 37, 39, 40, 42, 45, 47, 49, 50, 54, 58, 59, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 84, 92, 93, 95, 96, 100, 101, 102, 103, 106, 109, 110, 112, 114, 115, 117, 120, 122, 124, 126, 128, 129, 132, 133, 135, 137, 138, 139, 140, 141, 143, 144, 149, 151, 152, 153, 155, 157, 158, 167, 169, 170, 173, 176, 177, 178, 181, 183, 184, 186, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 209, 213, 214, 215, 218, 221, 223, 225, 226, 228, 230, 232, 234, 235, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 275, 276, 278, 281, 283, 287, 288, 292, 293, 295, 297, 299, 301, 302, 304, 305, 308, 309, 311, 313, 314, 318, 319, 320, 321, 322, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 352, 353, 354, 355, 356, 358, 359, 361, 362, 365, 366, 369, 371, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 394, 395, 397, 399, 400, 402, 403, 405, 410, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 432, 434, 435, 436, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "creat": [5, 7, 9, 11, 13, 16, 17, 22, 23, 24, 25, 27, 28, 31, 34, 39, 40, 42, 43, 45, 49, 51, 55, 58, 59, 60, 63, 66, 67, 68, 73, 75, 76, 77, 87, 88, 92, 93, 96, 100, 101, 103, 106, 107, 108, 109, 110, 115, 117, 120, 125, 128, 129, 132, 133, 134, 135, 136, 137, 138, 144, 149, 151, 153, 157, 158, 160, 161, 163, 167, 169, 170, 174, 176, 177, 181, 183, 184, 186, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201, 202, 203, 205, 207, 208, 213, 215, 218, 221, 225, 226, 230, 234, 236, 241, 242, 245, 247, 248, 250, 251, 252, 255, 258, 259, 261, 266, 267, 268, 269, 270, 271, 272, 278, 281, 282, 283, 284, 285, 288, 293, 297, 298, 299, 302, 305, 307, 308, 312, 314, 319, 322, 323, 328, 330, 332, 334, 335, 337, 338, 341, 342, 343, 344, 347, 348, 352, 354, 358, 360, 362, 364, 365, 369, 371, 375, 376, 378, 380, 381, 382, 384, 385, 386, 388, 389, 390, 395, 397, 399, 402, 403, 405, 410, 411, 413, 414, 415, 416, 417, 419, 420, 422, 423, 425, 426, 427, 429, 430, 432, 434, 435, 436, 440, 441, 442, 451, 452, 455, 456, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483], "your": [5, 22, 33, 59, 63, 68, 72, 73, 75, 76, 77, 79, 84, 85, 89, 92, 94, 95, 96, 100, 101, 103, 106, 109, 110, 112, 118, 120, 133, 141, 152, 159, 167, 177, 181, 183, 191, 193, 196, 198, 200, 201, 202, 205, 207, 213, 222, 226, 234, 235, 242, 243, 244, 245, 246, 247, 250, 255, 262, 266, 267, 268, 269, 271, 278, 283, 293, 296, 297, 299, 305, 308, 313, 319, 320, 328, 329, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 344, 347, 348, 354, 359, 361, 362, 364, 365, 366, 369, 371, 375, 382, 384, 386, 388, 390, 394, 395, 400, 402, 410, 411, 413, 415, 420, 421, 422, 425, 426, 434, 436, 441, 442, 449, 455, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484], "own": [5, 7, 9, 22, 23, 26, 28, 33, 45, 59, 61, 63, 64, 68, 72, 73, 76, 77, 84, 85, 92, 93, 94, 95, 100, 101, 102, 103, 109, 110, 112, 118, 120, 126, 133, 137, 139, 151, 167, 169, 181, 186, 193, 196, 200, 203, 205, 207, 225, 230, 243, 247, 250, 255, 267, 268, 269, 271, 283, 292, 293, 297, 299, 308, 319, 321, 326, 331, 332, 333, 337, 340, 341, 344, 345, 348, 352, 358, 362, 364, 365, 369, 384, 388, 394, 395, 399, 402, 403, 410, 413, 415, 420, 426, 428, 430, 432, 435, 436, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 478, 480, 482, 483], "extens": [5, 7, 11, 13, 23, 27, 34, 35, 42, 45, 50, 57, 61, 63, 66, 68, 72, 74, 79, 84, 85, 87, 91, 92, 94, 97, 105, 106, 118, 139, 143, 152, 167, 173, 176, 177, 181, 183, 184, 189, 190, 193, 194, 200, 203, 208, 218, 220, 235, 241, 242, 245, 246, 248, 250, 251, 254, 255, 262, 269, 271, 273, 276, 280, 288, 292, 293, 297, 299, 305, 308, 312, 314, 319, 330, 331, 332, 333, 335, 337, 340, 341, 344, 352, 354, 355, 358, 362, 365, 368, 369, 375, 382, 384, 385, 386, 388, 395, 402, 405, 410, 411, 414, 415, 419, 421, 422, 428, 430, 432, 440, 445, 451, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 477, 479, 480, 481, 482, 483], "method": [5, 7, 10, 16, 21, 22, 23, 24, 25, 28, 33, 34, 39, 40, 42, 45, 46, 49, 53, 54, 55, 56, 58, 61, 62, 63, 66, 68, 72, 74, 75, 80, 81, 86, 87, 92, 95, 97, 101, 102, 108, 109, 110, 112, 115, 116, 117, 118, 125, 128, 130, 131, 132, 133, 136, 137, 138, 139, 142, 144, 146, 147, 149, 151, 153, 155, 157, 158, 159, 161, 163, 164, 166, 167, 168, 170, 175, 176, 177, 179, 181, 182, 183, 184, 186, 187, 190, 191, 193, 195, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 215, 216, 218, 221, 222, 223, 225, 226, 227, 230, 234, 235, 237, 242, 243, 244, 245, 247, 248, 250, 251, 252, 253, 255, 258, 259, 261, 262, 265, 267, 268, 269, 270, 271, 273, 276, 278, 279, 281, 291, 293, 295, 296, 297, 298, 299, 301, 302, 305, 307, 308, 311, 312, 313, 314, 315, 316, 318, 319, 321, 323, 325, 328, 329, 330, 331, 335, 338, 341, 343, 345, 347, 348, 349, 352, 358, 359, 360, 362, 364, 365, 369, 374, 375, 376, 378, 381, 382, 385, 386, 387, 388, 389, 394, 395, 397, 399, 403, 405, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 427, 429, 432, 433, 435, 436, 441, 442, 443, 444, 445, 447, 449, 451, 452, 455, 463, 464, 465, 468, 469, 471, 472, 473, 474, 475, 476, 477, 481, 483, 484], "addit": [5, 7, 9, 23, 31, 33, 41, 42, 45, 58, 61, 63, 66, 68, 73, 75, 76, 84, 94, 95, 96, 99, 100, 101, 102, 106, 109, 112, 115, 117, 120, 126, 139, 141, 151, 157, 158, 167, 169, 173, 176, 177, 180, 181, 182, 183, 184, 186, 188, 189, 190, 191, 193, 194, 196, 197, 199, 202, 203, 205, 206, 208, 213, 215, 218, 221, 225, 226, 230, 234, 235, 242, 243, 245, 247, 250, 251, 255, 257, 258, 259, 261, 262, 266, 267, 268, 270, 271, 275, 276, 278, 283, 285, 292, 293, 299, 305, 307, 308, 313, 314, 319, 321, 330, 331, 332, 333, 334, 335, 337, 340, 341, 342, 343, 345, 347, 348, 352, 358, 359, 362, 364, 365, 366, 369, 375, 376, 378, 384, 386, 387, 388, 394, 395, 399, 400, 402, 405, 408, 410, 411, 413, 414, 415, 416, 417, 419, 422, 426, 427, 428, 429, 430, 432, 434, 435, 436, 444, 455, 456, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 479, 480, 481, 482, 483], "inform": [5, 7, 11, 16, 23, 25, 28, 33, 34, 42, 45, 51, 58, 60, 63, 64, 66, 68, 72, 73, 75, 77, 80, 85, 86, 89, 93, 95, 96, 99, 101, 106, 109, 110, 112, 115, 118, 120, 123, 126, 133, 140, 143, 144, 151, 152, 158, 163, 169, 176, 177, 181, 183, 186, 188, 190, 191, 193, 195, 196, 197, 201, 203, 205, 207, 209, 213, 215, 216, 223, 225, 226, 228, 233, 235, 240, 242, 243, 245, 247, 248, 250, 251, 252, 254, 255, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 276, 278, 283, 288, 292, 299, 302, 305, 307, 308, 311, 312, 313, 314, 315, 319, 320, 321, 328, 331, 332, 333, 335, 337, 338, 340, 341, 342, 343, 344, 347, 348, 352, 358, 361, 362, 365, 366, 369, 375, 376, 380, 381, 382, 384, 386, 388, 391, 394, 395, 399, 402, 405, 407, 410, 411, 412, 413, 414, 415, 416, 422, 423, 425, 426, 427, 428, 429, 431, 432, 434, 435, 436, 443, 448, 452, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "exampl": [5, 7, 22, 23, 33, 34, 35, 42, 45, 51, 58, 61, 63, 64, 66, 68, 72, 73, 74, 75, 77, 84, 85, 87, 92, 94, 95, 96, 99, 100, 101, 104, 106, 109, 110, 112, 117, 119, 120, 122, 126, 128, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 149, 151, 158, 159, 160, 163, 170, 173, 175, 176, 177, 181, 182, 183, 184, 186, 187, 191, 192, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 228, 230, 235, 242, 243, 244, 245, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 280, 282, 283, 284, 285, 288, 290, 293, 295, 296, 297, 299, 305, 307, 308, 311, 313, 314, 315, 318, 320, 321, 326, 329, 331, 333, 334, 335, 337, 338, 340, 341, 344, 345, 346, 347, 348, 352, 353, 355, 356, 359, 362, 363, 364, 365, 366, 369, 375, 376, 378, 380, 382, 384, 385, 386, 387, 388, 390, 394, 398, 400, 402, 403, 407, 408, 410, 411, 412, 413, 415, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 434, 435, 436, 440, 443, 444, 451, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "avail": [5, 7, 11, 13, 22, 23, 25, 26, 27, 33, 34, 39, 42, 45, 55, 58, 59, 61, 64, 66, 68, 71, 72, 73, 75, 77, 84, 85, 92, 94, 96, 100, 101, 102, 103, 106, 109, 110, 112, 115, 120, 126, 133, 136, 137, 139, 151, 155, 158, 163, 167, 169, 170, 173, 176, 177, 182, 184, 186, 191, 195, 207, 210, 212, 213, 214, 215, 218, 223, 225, 226, 229, 230, 233, 235, 242, 245, 247, 248, 250, 251, 252, 255, 257, 258, 259, 262, 266, 267, 268, 269, 271, 275, 276, 278, 282, 283, 284, 287, 288, 292, 293, 295, 297, 299, 304, 305, 308, 313, 314, 315, 318, 319, 321, 322, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 352, 354, 356, 358, 359, 361, 362, 365, 366, 369, 374, 375, 376, 378, 381, 382, 384, 385, 386, 388, 390, 395, 399, 402, 403, 405, 408, 410, 411, 413, 414, 415, 416, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 432, 434, 435, 436, 455, 456, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "in": [5, 6, 7, 9, 10, 11, 13, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 66, 68, 71, 74, 75, 76, 78, 80, 87, 89, 91, 92, 93, 94, 96, 98, 99, 103, 104, 105, 106, 107, 108, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 128, 129, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 157, 159, 160, 161, 163, 164, 166, 167, 168, 170, 173, 175, 177, 178, 179, 180, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 230, 232, 233, 234, 235, 236, 240, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 271, 272, 273, 275, 276, 278, 279, 280, 281, 282, 283, 284, 287, 288, 290, 293, 295, 296, 297, 298, 299, 302, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 343, 345, 346, 347, 348, 352, 353, 354, 355, 356, 358, 359, 361, 362, 364, 366, 367, 368, 369, 374, 375, 376, 377, 378, 380, 381, 382, 383, 387, 388, 389, 390, 394, 395, 397, 398, 399, 400, 402, 403, 405, 406, 407, 408, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 432, 434, 435, 436, 440, 441, 442, 443, 444, 446, 449, 450, 451, 452, 455, 456, 458, 464, 465, 467, 468, 469, 471, 475, 476, 483, 484], "thefirst": [5, 13, 22, 23, 25, 27, 31, 33, 34, 37, 39, 41, 42, 45, 47, 49, 51, 54, 58, 59, 60, 61, 63, 64, 67, 72, 73, 75, 76, 77, 78, 84, 85, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 109, 110, 117, 120, 126, 132, 135, 139, 140, 141, 144, 147, 151, 153, 155, 157, 158, 160, 167, 169, 176, 177, 178, 183, 184, 186, 188, 190, 191, 193, 195, 196, 197, 199, 200, 201, 202, 203, 205, 207, 208, 209, 211, 213, 214, 215, 218, 221, 225, 226, 228, 230, 235, 242, 243, 244, 247, 248, 255, 258, 259, 261, 265, 266, 267, 268, 269, 271, 272, 275, 276, 278, 281, 283, 284, 287, 288, 291, 292, 293, 295, 297, 299, 301, 302, 307, 308, 313, 314, 319, 320, 324, 325, 328, 330, 331, 332, 333, 335, 337, 338, 340, 341, 342, 344, 345, 347, 348, 352, 354, 355, 356, 358, 359, 361, 362, 364, 366, 369, 375, 376, 377, 378, 381, 382, 384, 385, 386, 387, 388, 389, 390, 394, 395, 400, 402, 405, 407, 408, 410, 413, 414, 419, 422, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 442, 446, 449, 452, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "three": [5, 7, 23, 31, 35, 42, 58, 63, 73, 75, 76, 77, 84, 85, 93, 94, 101, 102, 103, 106, 109, 117, 120, 133, 134, 139, 158, 160, 161, 175, 176, 177, 181, 183, 186, 189, 190, 191, 193, 194, 196, 200, 205, 207, 211, 213, 215, 216, 225, 226, 243, 245, 248, 250, 266, 268, 269, 271, 278, 283, 288, 292, 293, 295, 297, 299, 307, 308, 314, 318, 319, 328, 332, 333, 334, 337, 340, 341, 344, 347, 348, 352, 353, 358, 359, 366, 369, 376, 384, 385, 386, 388, 389, 390, 395, 399, 403, 410, 414, 415, 419, 425, 427, 428, 430, 431, 432, 434, 435, 436, 441, 451, 452, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 480, 481, 483], "of": [5, 6, 7, 9, 11, 13, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 30, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 87, 89, 91, 92, 96, 103, 105, 106, 108, 109, 110, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 124, 126, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 163, 164, 166, 170, 173, 175, 176, 177, 178, 179, 180, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 225, 226, 227, 228, 230, 232, 233, 234, 235, 236, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 278, 280, 281, 282, 284, 287, 288, 290, 292, 295, 296, 297, 298, 301, 302, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 349, 353, 355, 356, 358, 359, 361, 362, 364, 365, 366, 367, 369, 371, 374, 375, 376, 377, 378, 379, 380, 381, 383, 385, 387, 388, 394, 395, 397, 398, 402, 403, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 423, 425, 426, 427, 430, 431, 432, 433, 434, 436, 440, 441, 442, 443, 444, 446, 448, 449, 450, 451, 452, 455, 457, 458, 459, 463, 464, 465, 466, 467, 468, 471, 472, 473, 475, 476, 482, 483, 484], "describ": [5, 7, 13, 23, 31, 42, 45, 49, 50, 51, 58, 59, 60, 61, 63, 66, 68, 72, 73, 75, 77, 92, 93, 94, 95, 99, 100, 101, 102, 103, 109, 110, 112, 115, 117, 120, 126, 128, 137, 143, 144, 151, 152, 158, 163, 167, 169, 176, 177, 180, 181, 184, 186, 187, 188, 190, 191, 193, 194, 195, 196, 202, 203, 208, 213, 216, 217, 222, 223, 224, 225, 230, 235, 242, 244, 245, 246, 247, 248, 249, 251, 255, 259, 260, 266, 267, 268, 269, 271, 276, 280, 281, 288, 290, 292, 293, 295, 298, 299, 307, 308, 312, 314, 315, 319, 321, 322, 324, 328, 332, 335, 336, 337, 340, 341, 342, 344, 345, 347, 348, 352, 354, 358, 365, 369, 375, 376, 383, 384, 386, 388, 394, 395, 397, 405, 406, 408, 410, 414, 415, 416, 419, 422, 423, 426, 427, 428, 430, 432, 434, 435, 436, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "pyarg_parsetupl": [5, 7, 48, 57, 58, 72, 73, 75, 77, 100, 430, 462, 464, 465, 467, 468, 472, 474, 476, 481, 483], "pyarg_parsetupleandkeyword": [5, 57, 58, 73, 75, 76, 466, 479, 483], "pyarg_pars": [5, 57, 469, 475, 483], "all": [5, 7, 9, 17, 22, 23, 25, 28, 31, 33, 34, 35, 39, 42, 45, 47, 55, 58, 59, 60, 61, 63, 64, 67, 68, 72, 73, 75, 76, 77, 84, 92, 93, 94, 95, 96, 100, 101, 102, 103, 106, 108, 109, 110, 112, 117, 120, 124, 126, 128, 133, 134, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 151, 153, 155, 157, 158, 159, 160, 161, 163, 164, 167, 169, 170, 173, 176, 177, 178, 181, 183, 184, 185, 186, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 218, 220, 221, 222, 225, 226, 228, 230, 233, 234, 235, 236, 242, 243, 244, 245, 247, 248, 250, 251, 252, 253, 255, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 284, 287, 288, 293, 295, 296, 297, 299, 302, 305, 308, 309, 311, 312, 313, 314, 316, 322, 324, 325, 328, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 352, 353, 354, 355, 356, 358, 359, 361, 362, 363, 364, 365, 366, 369, 375, 376, 378, 380, 381, 384, 385, 386, 387, 388, 389, 390, 394, 395, 400, 402, 403, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 434, 435, 436, 440, 441, 442, 449, 450, 451, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 480, 481, 482, 483], "which": [5, 7, 9, 13, 18, 22, 23, 25, 27, 28, 31, 33, 34, 39, 40, 41, 42, 43, 45, 49, 51, 53, 54, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 79, 84, 85, 87, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 108, 109, 110, 115, 117, 120, 126, 132, 133, 135, 137, 138, 139, 140, 141, 143, 144, 146, 149, 151, 153, 155, 157, 158, 159, 161, 163, 167, 169, 170, 173, 176, 177, 178, 179, 181, 183, 184, 186, 187, 188, 190, 191, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 218, 220, 221, 223, 225, 226, 228, 230, 234, 235, 236, 243, 244, 245, 247, 248, 250, 251, 252, 253, 255, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 281, 282, 283, 288, 292, 293, 295, 297, 299, 301, 302, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 319, 320, 321, 322, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 344, 345, 346, 347, 348, 352, 353, 354, 356, 358, 359, 361, 362, 364, 365, 366, 369, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 394, 395, 399, 400, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 443, 451, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "to": [5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 45, 47, 49, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 74, 75, 77, 78, 80, 87, 89, 91, 92, 93, 95, 96, 99, 103, 105, 106, 107, 108, 110, 112, 114, 115, 117, 118, 120, 122, 124, 126, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 151, 152, 153, 155, 157, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 230, 232, 233, 234, 235, 236, 241, 242, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 267, 269, 270, 271, 272, 273, 275, 278, 279, 280, 281, 282, 283, 284, 285, 287, 288, 289, 292, 294, 295, 297, 298, 301, 302, 303, 304, 305, 307, 309, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 352, 353, 354, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 385, 387, 388, 389, 390, 394, 395, 397, 398, 399, 400, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 441, 442, 443, 446, 448, 449, 450, 451, 452, 455, 456, 457, 459, 461, 463, 464, 472, 473, 483, 484], "tell": [5, 18, 31, 33, 68, 73, 75, 92, 95, 102, 106, 112, 117, 120, 126, 151, 153, 159, 193, 208, 222, 235, 258, 267, 269, 278, 283, 292, 295, 299, 332, 333, 337, 338, 340, 341, 344, 349, 369, 380, 386, 395, 401, 422, 446, 462, 464, 465, 466, 468, 478, 479, 480, 483], "about": [5, 7, 13, 22, 23, 25, 27, 28, 42, 51, 63, 64, 66, 68, 71, 72, 73, 75, 76, 77, 80, 84, 89, 92, 93, 94, 95, 99, 100, 101, 102, 106, 109, 110, 120, 126, 128, 133, 141, 143, 144, 154, 155, 157, 158, 169, 176, 178, 181, 183, 186, 187, 190, 191, 194, 195, 197, 201, 203, 207, 209, 213, 216, 225, 235, 243, 245, 247, 250, 255, 261, 265, 267, 268, 269, 270, 271, 275, 278, 279, 283, 288, 292, 293, 297, 299, 307, 308, 312, 319, 320, 321, 322, 328, 330, 332, 333, 335, 337, 339, 340, 341, 342, 344, 347, 348, 352, 353, 358, 359, 362, 369, 376, 381, 384, 386, 388, 390, 394, 395, 400, 402, 405, 408, 410, 412, 414, 415, 416, 422, 423, 425, 427, 428, 429, 430, 432, 434, 436, 455, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "expect": [5, 9, 23, 28, 39, 45, 58, 63, 66, 68, 73, 75, 76, 77, 84, 85, 89, 92, 93, 94, 95, 99, 100, 101, 102, 103, 106, 109, 110, 120, 126, 127, 133, 134, 139, 151, 153, 158, 167, 169, 176, 177, 181, 186, 187, 188, 190, 191, 193, 197, 203, 213, 221, 225, 230, 235, 242, 243, 245, 250, 251, 253, 255, 261, 262, 266, 267, 269, 271, 278, 283, 292, 293, 299, 302, 309, 312, 328, 330, 331, 333, 337, 340, 341, 343, 344, 348, 352, 354, 358, 359, 362, 366, 376, 378, 384, 385, 386, 389, 390, 394, 395, 397, 408, 413, 415, 416, 419, 425, 428, 429, 430, 431, 432, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "same": [5, 6, 7, 9, 13, 18, 20, 22, 23, 25, 26, 27, 28, 33, 34, 39, 40, 41, 42, 45, 46, 49, 51, 54, 56, 58, 59, 60, 61, 63, 64, 66, 68, 72, 73, 75, 76, 79, 84, 92, 93, 94, 95, 96, 100, 101, 103, 106, 109, 110, 112, 115, 120, 122, 126, 132, 133, 135, 137, 138, 139, 140, 141, 144, 151, 157, 158, 163, 167, 169, 170, 173, 176, 177, 178, 181, 183, 184, 186, 190, 191, 193, 194, 195, 196, 201, 202, 203, 205, 207, 208, 209, 213, 215, 216, 218, 220, 221, 225, 226, 228, 230, 234, 235, 242, 243, 244, 245, 247, 248, 250, 252, 253, 255, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 275, 276, 278, 281, 282, 283, 284, 288, 292, 293, 295, 296, 297, 299, 305, 307, 308, 309, 312, 313, 314, 319, 320, 321, 322, 325, 328, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 344, 345, 347, 348, 352, 353, 354, 355, 358, 359, 361, 362, 364, 365, 366, 369, 371, 374, 375, 376, 378, 381, 384, 385, 386, 387, 388, 389, 390, 394, 395, 399, 400, 402, 403, 405, 410, 413, 415, 419, 420, 421, 422, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 441, 449, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 482, 483], "syntax": [5, 7, 68, 73, 79, 80, 85, 95, 99, 101, 102, 106, 109, 110, 112, 118, 126, 139, 151, 157, 159, 167, 168, 176, 181, 186, 203, 211, 213, 225, 230, 247, 254, 255, 262, 264, 266, 268, 273, 283, 292, 295, 297, 314, 319, 331, 340, 344, 345, 352, 362, 369, 376, 381, 382, 386, 388, 394, 395, 417, 419, 427, 428, 429, 430, 431, 432, 434, 435, 436, 445, 449, 455, 457, 462, 463, 464, 465, 466, 467, 469, 471, 472, 473, 475, 477, 480, 481, 482, 483, 484], "for": [5, 7, 9, 11, 13, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 37, 39, 40, 41, 42, 43, 45, 46, 47, 49, 53, 54, 55, 56, 58, 59, 60, 61, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 84, 86, 87, 89, 91, 93, 94, 95, 98, 99, 100, 103, 104, 106, 107, 108, 110, 112, 114, 115, 116, 117, 118, 119, 121, 122, 123, 124, 125, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 150, 151, 152, 153, 154, 157, 158, 159, 160, 163, 166, 167, 170, 173, 175, 178, 181, 182, 183, 184, 186, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 220, 221, 222, 223, 225, 226, 230, 232, 233, 234, 235, 236, 240, 242, 244, 245, 246, 247, 248, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 278, 279, 280, 281, 282, 283, 284, 287, 288, 290, 291, 293, 295, 296, 297, 298, 301, 302, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 318, 320, 321, 322, 324, 325, 326, 329, 330, 331, 332, 334, 335, 337, 339, 340, 342, 343, 344, 345, 346, 347, 348, 350, 352, 353, 354, 355, 356, 359, 361, 363, 364, 365, 366, 367, 369, 371, 375, 376, 377, 380, 381, 382, 387, 388, 389, 390, 394, 395, 397, 399, 402, 403, 404, 405, 407, 408, 410, 411, 417, 419, 420, 421, 422, 423, 425, 426, 429, 431, 433, 434, 435, 436, 440, 442, 443, 444, 445, 446, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 462, 463, 464, 470, 472, 473, 483, 484], "each": [5, 7, 13, 22, 23, 28, 31, 33, 34, 37, 40, 42, 45, 59, 61, 63, 73, 75, 76, 77, 79, 84, 92, 93, 94, 95, 100, 101, 102, 106, 109, 110, 112, 117, 120, 126, 132, 133, 138, 139, 141, 143, 149, 151, 152, 153, 155, 158, 159, 163, 166, 167, 169, 176, 177, 179, 181, 183, 184, 186, 190, 191, 193, 195, 196, 197, 202, 203, 204, 205, 208, 212, 214, 216, 218, 225, 226, 228, 230, 235, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 255, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 281, 283, 284, 288, 292, 293, 295, 297, 299, 302, 305, 307, 308, 309, 312, 313, 314, 318, 319, 320, 321, 322, 325, 329, 331, 332, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 346, 347, 352, 353, 354, 355, 356, 358, 359, 361, 362, 364, 365, 369, 375, 376, 378, 380, 381, 384, 385, 386, 387, 388, 394, 395, 399, 400, 402, 405, 408, 410, 411, 413, 415, 417, 419, 420, 422, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 442, 451, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 480, 481, 482, 483], "consist": [5, 7, 9, 23, 31, 33, 56, 63, 64, 66, 73, 85, 92, 94, 95, 102, 117, 141, 146, 151, 153, 158, 167, 177, 178, 183, 190, 191, 193, 196, 203, 205, 207, 208, 209, 228, 242, 243, 247, 248, 250, 252, 259, 262, 266, 268, 269, 270, 275, 283, 293, 299, 301, 308, 319, 325, 331, 335, 338, 340, 344, 346, 347, 348, 352, 353, 362, 364, 369, 375, 376, 381, 384, 386, 388, 395, 410, 425, 426, 427, 428, 430, 432, 435, 456, 461, 462, 463, 464, 465, 468, 469, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "zero": [5, 7, 18, 23, 25, 26, 28, 31, 33, 34, 35, 36, 39, 42, 45, 49, 58, 59, 61, 63, 64, 66, 68, 73, 75, 76, 84, 85, 87, 94, 99, 100, 101, 102, 106, 109, 120, 126, 133, 139, 141, 143, 146, 155, 158, 160, 176, 177, 181, 183, 186, 190, 191, 193, 196, 209, 213, 225, 226, 234, 235, 236, 242, 248, 250, 258, 259, 261, 269, 271, 275, 278, 283, 288, 292, 293, 297, 299, 305, 314, 319, 320, 328, 332, 333, 335, 337, 340, 341, 342, 344, 345, 347, 348, 352, 358, 361, 364, 365, 366, 376, 384, 388, 397, 405, 410, 413, 422, 428, 429, 430, 431, 434, 435, 436, 441, 443, 448, 455, 462, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "or": [5, 7, 9, 10, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 39, 40, 41, 42, 43, 45, 47, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 86, 87, 89, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 105, 106, 108, 109, 110, 112, 113, 115, 117, 118, 122, 123, 128, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 151, 153, 154, 155, 157, 158, 159, 160, 161, 163, 164, 167, 168, 169, 170, 173, 175, 177, 178, 179, 181, 182, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 220, 221, 223, 225, 226, 228, 230, 232, 233, 234, 235, 236, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 281, 282, 283, 284, 287, 288, 291, 292, 293, 295, 296, 297, 299, 301, 302, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 345, 346, 347, 352, 353, 354, 355, 356, 358, 359, 361, 362, 364, 365, 366, 367, 369, 371, 375, 376, 377, 378, 382, 384, 385, 386, 387, 388, 389, 390, 394, 395, 397, 399, 400, 402, 403, 405, 406, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 440, 442, 443, 445, 448, 449, 451, 455, 456, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "more": [5, 11, 13, 22, 23, 24, 25, 27, 33, 34, 42, 45, 49, 51, 56, 58, 60, 61, 63, 64, 66, 68, 71, 72, 73, 74, 76, 77, 79, 80, 84, 85, 86, 93, 94, 95, 100, 101, 103, 109, 110, 112, 115, 120, 123, 126, 133, 137, 139, 140, 141, 143, 144, 146, 149, 151, 153, 155, 157, 158, 160, 161, 163, 167, 169, 170, 176, 177, 181, 183, 184, 186, 187, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 213, 215, 218, 220, 222, 223, 225, 226, 228, 230, 232, 234, 235, 242, 243, 245, 247, 248, 250, 251, 252, 255, 257, 258, 259, 260, 261, 262, 267, 268, 269, 270, 271, 275, 276, 281, 283, 284, 288, 292, 293, 295, 297, 299, 301, 302, 305, 307, 308, 311, 312, 314, 318, 319, 321, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 352, 353, 354, 355, 358, 359, 361, 362, 364, 365, 366, 369, 374, 375, 376, 377, 381, 382, 386, 388, 394, 395, 399, 400, 402, 405, 406, 410, 411, 412, 413, 415, 422, 425, 426, 427, 428, 430, 431, 432, 434, 435, 436, 440, 441, 443, 448, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483], "unit": [5, 64, 73, 85, 87, 94, 95, 99, 101, 102, 109, 114, 178, 183, 187, 193, 225, 226, 275, 308, 325, 337, 341, 344, 345, 362, 366, 367, 369, 376, 384, 388, 426, 428, 429, 463, 468, 474, 476, 478, 481, 482, 483], "one": [5, 7, 9, 11, 13, 23, 24, 25, 28, 31, 33, 34, 42, 43, 45, 47, 49, 51, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 84, 87, 89, 91, 92, 93, 94, 95, 96, 99, 101, 102, 103, 106, 109, 110, 112, 115, 117, 119, 120, 122, 126, 132, 133, 135, 137, 138, 139, 141, 143, 144, 146, 151, 153, 155, 157, 158, 160, 161, 163, 166, 167, 169, 170, 173, 175, 176, 177, 181, 183, 186, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 213, 215, 216, 218, 221, 225, 226, 228, 230, 232, 234, 235, 242, 243, 245, 247, 248, 250, 251, 255, 258, 259, 261, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 282, 283, 284, 288, 292, 293, 295, 296, 297, 299, 301, 302, 304, 305, 307, 308, 311, 314, 318, 319, 320, 322, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 354, 355, 358, 359, 361, 362, 364, 365, 366, 369, 375, 376, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 394, 395, 399, 400, 402, 405, 407, 408, 410, 411, 412, 413, 415, 419, 422, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 441, 443, 451, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "object": [5, 6, 7, 11, 13, 14, 16, 20, 22, 25, 26, 28, 31, 32, 33, 34, 35, 37, 39, 40, 41, 43, 45, 46, 47, 53, 54, 55, 59, 66, 67, 68, 72, 73, 74, 76, 77, 78, 80, 87, 92, 95, 96, 103, 104, 106, 108, 109, 110, 115, 116, 117, 118, 119, 121, 125, 129, 133, 136, 137, 138, 141, 142, 143, 144, 146, 149, 151, 152, 153, 155, 158, 159, 160, 161, 163, 164, 167, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 184, 187, 188, 189, 191, 193, 194, 195, 196, 197, 198, 199, 201, 202, 204, 205, 207, 209, 212, 213, 214, 215, 216, 218, 220, 221, 222, 223, 224, 225, 227, 229, 230, 231, 233, 234, 237, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 258, 261, 264, 269, 270, 271, 273, 274, 276, 278, 282, 285, 288, 290, 291, 292, 294, 297, 298, 302, 304, 305, 307, 308, 310, 313, 314, 315, 322, 323, 324, 329, 331, 332, 333, 335, 336, 337, 339, 341, 345, 347, 349, 351, 352, 355, 358, 360, 361, 362, 363, 364, 366, 369, 371, 374, 378, 380, 381, 382, 385, 386, 387, 388, 390, 394, 397, 399, 400, 401, 404, 406, 407, 411, 412, 413, 414, 415, 417, 420, 421, 423, 424, 425, 426, 427, 429, 430, 432, 433, 436, 440, 441, 442, 446, 449, 450, 452, 455, 456, 459, 461, 462, 463, 464, 467, 470, 471, 472, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484], "it": [5, 6, 7, 9, 10, 11, 13, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 37, 39, 40, 41, 42, 43, 45, 47, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 79, 87, 89, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 105, 106, 108, 109, 112, 115, 117, 120, 122, 126, 129, 132, 133, 135, 137, 138, 139, 140, 141, 143, 144, 146, 149, 151, 152, 153, 155, 157, 158, 159, 160, 161, 163, 166, 167, 169, 170, 173, 176, 177, 178, 179, 181, 183, 184, 186, 187, 188, 190, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 214, 215, 216, 218, 220, 221, 225, 226, 228, 230, 233, 234, 235, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 281, 282, 283, 287, 288, 293, 295, 296, 297, 299, 302, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 369, 371, 375, 376, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 394, 395, 397, 399, 400, 402, 403, 405, 406, 407, 408, 410, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 441, 442, 443, 449, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "is": [5, 6, 7, 9, 10, 11, 13, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 45, 46, 47, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 87, 89, 93, 94, 95, 96, 99, 100, 102, 103, 106, 107, 108, 109, 110, 112, 114, 115, 116, 117, 120, 122, 124, 126, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 149, 151, 152, 153, 155, 157, 158, 159, 160, 161, 163, 166, 167, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 220, 221, 222, 223, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 280, 281, 282, 283, 284, 287, 288, 291, 292, 293, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 367, 369, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 394, 395, 397, 398, 399, 400, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 441, 442, 443, 446, 449, 451, 452, 455, 456, 461, 462, 463, 464, 465, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "usual": [5, 7, 23, 28, 33, 34, 39, 45, 47, 61, 63, 64, 73, 75, 84, 85, 92, 93, 94, 95, 99, 100, 101, 102, 103, 106, 109, 110, 112, 115, 120, 126, 133, 146, 149, 151, 153, 173, 176, 186, 190, 193, 194, 196, 198, 202, 205, 221, 225, 226, 230, 243, 245, 247, 248, 250, 251, 255, 258, 259, 261, 268, 269, 272, 275, 283, 288, 292, 293, 295, 297, 299, 304, 319, 321, 328, 332, 333, 334, 337, 338, 339, 340, 341, 344, 348, 352, 358, 362, 366, 369, 375, 376, 381, 384, 386, 388, 390, 395, 402, 413, 421, 422, 423, 427, 428, 430, 436, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 477, 478, 479, 481, 483], "singl": [5, 7, 9, 16, 22, 23, 25, 31, 33, 39, 48, 51, 58, 59, 61, 63, 64, 66, 67, 68, 71, 73, 76, 79, 85, 87, 92, 94, 95, 96, 99, 100, 103, 106, 108, 109, 110, 120, 122, 126, 144, 146, 151, 157, 158, 159, 163, 166, 167, 176, 177, 178, 181, 183, 186, 189, 190, 191, 193, 195, 196, 202, 203, 207, 208, 213, 218, 220, 223, 225, 226, 230, 234, 235, 242, 243, 247, 248, 250, 251, 253, 255, 258, 259, 261, 265, 267, 268, 269, 270, 271, 275, 278, 281, 283, 284, 288, 292, 293, 297, 299, 302, 303, 305, 307, 308, 314, 315, 318, 319, 331, 332, 333, 334, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 355, 358, 362, 364, 366, 369, 371, 376, 378, 380, 381, 386, 388, 394, 395, 400, 402, 408, 410, 413, 415, 417, 419, 421, 422, 427, 428, 430, 431, 432, 434, 435, 436, 441, 444, 449, 455, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482, 483], "charact": [5, 9, 16, 18, 33, 34, 39, 42, 49, 59, 68, 73, 84, 85, 87, 92, 102, 109, 118, 120, 121, 126, 131, 137, 143, 145, 146, 151, 155, 158, 167, 173, 175, 176, 178, 183, 184, 186, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 209, 213, 214, 220, 225, 228, 231, 239, 244, 245, 247, 248, 250, 251, 254, 258, 265, 266, 268, 271, 272, 282, 283, 285, 288, 293, 296, 299, 307, 314, 319, 320, 321, 323, 331, 332, 335, 337, 338, 340, 342, 344, 345, 346, 348, 352, 358, 359, 361, 362, 364, 366, 369, 375, 376, 387, 388, 394, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 426, 430, 431, 434, 435, 436, 449, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "parenthes": [5, 63, 68, 73, 79, 85, 95, 102, 106, 157, 191, 248, 250, 266, 308, 319, 344, 399, 427, 428, 429, 431, 434, 435, 436, 442, 449, 462, 466, 467, 468, 469, 472, 474, 478, 480, 481, 483], "with": [5, 7, 9, 10, 11, 13, 22, 23, 24, 25, 27, 28, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 45, 47, 49, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 68, 72, 73, 74, 75, 76, 77, 87, 89, 91, 93, 95, 97, 98, 101, 103, 106, 107, 108, 109, 110, 112, 113, 115, 117, 118, 119, 120, 122, 124, 125, 128, 132, 133, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 149, 151, 153, 155, 157, 159, 160, 161, 163, 164, 166, 167, 170, 173, 175, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 228, 230, 233, 234, 235, 241, 242, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 264, 266, 268, 269, 270, 271, 272, 273, 275, 276, 278, 281, 282, 283, 284, 288, 290, 291, 292, 293, 295, 296, 297, 298, 302, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 347, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 369, 371, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 394, 395, 399, 400, 401, 403, 405, 406, 407, 408, 410, 411, 412, 414, 415, 416, 417, 419, 420, 423, 425, 426, 430, 431, 432, 433, 434, 435, 436, 438, 440, 441, 442, 443, 444, 446, 449, 451, 452, 455, 456, 460, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 477, 479, 482, 483, 484], "few": [5, 33, 73, 85, 94, 95, 96, 100, 101, 102, 103, 106, 109, 120, 141, 155, 158, 167, 170, 173, 176, 177, 181, 183, 186, 190, 193, 198, 200, 223, 230, 247, 269, 281, 283, 292, 299, 319, 334, 335, 337, 341, 344, 347, 353, 362, 369, 381, 388, 394, 395, 428, 434, 435, 462, 463, 464, 465, 467, 468, 469, 470, 474, 475, 477, 478, 479, 481, 483], "that": [5, 7, 9, 13, 17, 22, 23, 25, 26, 27, 28, 31, 33, 34, 37, 39, 40, 41, 42, 43, 45, 46, 47, 49, 51, 54, 55, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 79, 84, 87, 92, 96, 99, 100, 101, 103, 105, 106, 108, 109, 110, 112, 114, 115, 117, 120, 122, 124, 125, 126, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 148, 151, 152, 153, 155, 157, 158, 159, 160, 161, 163, 167, 169, 170, 173, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 224, 225, 226, 228, 230, 232, 233, 234, 235, 236, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 265, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 281, 283, 284, 287, 288, 292, 293, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 354, 355, 356, 358, 359, 361, 362, 364, 365, 366, 369, 371, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 394, 395, 397, 399, 400, 402, 403, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 442, 443, 446, 452, 455, 456, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "not": [5, 7, 9, 11, 13, 17, 22, 23, 25, 26, 27, 28, 31, 33, 34, 35, 39, 42, 43, 45, 46, 47, 49, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 79, 80, 84, 87, 89, 92, 93, 94, 95, 96, 99, 101, 102, 103, 106, 107, 108, 109, 110, 112, 114, 115, 117, 120, 122, 124, 125, 126, 128, 129, 132, 133, 136, 137, 139, 140, 141, 143, 144, 146, 149, 151, 152, 153, 155, 157, 158, 159, 160, 161, 163, 167, 169, 170, 173, 176, 177, 178, 179, 181, 183, 184, 186, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 220, 221, 222, 223, 225, 226, 228, 229, 230, 233, 234, 235, 236, 242, 243, 244, 245, 247, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 281, 282, 283, 284, 287, 288, 291, 292, 293, 295, 296, 297, 299, 301, 302, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 318, 319, 320, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 352, 353, 354, 355, 356, 358, 359, 360, 362, 364, 365, 366, 369, 371, 375, 376, 378, 380, 381, 382, 385, 386, 387, 388, 389, 390, 394, 395, 399, 400, 401, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 441, 442, 443, 448, 449, 451, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "normal": [5, 20, 22, 23, 25, 31, 33, 34, 45, 49, 51, 56, 58, 63, 66, 72, 73, 75, 76, 85, 92, 93, 94, 101, 102, 106, 107, 108, 109, 110, 120, 139, 140, 143, 144, 146, 155, 158, 167, 169, 176, 177, 181, 183, 186, 188, 190, 193, 195, 196, 198, 200, 202, 205, 208, 209, 214, 218, 220, 221, 225, 226, 230, 234, 235, 242, 247, 248, 258, 266, 267, 268, 269, 275, 276, 282, 283, 288, 292, 293, 297, 299, 302, 308, 311, 314, 319, 320, 321, 324, 331, 333, 335, 337, 339, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 354, 362, 364, 365, 366, 369, 372, 374, 376, 381, 384, 385, 386, 387, 388, 394, 395, 400, 402, 410, 411, 414, 415, 416, 419, 421, 422, 425, 426, 427, 428, 429, 430, 432, 434, 435, 436, 441, 455, 461, 463, 468, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "correspond": [5, 9, 18, 22, 23, 31, 33, 45, 49, 56, 58, 61, 63, 64, 68, 71, 73, 75, 76, 79, 85, 92, 94, 95, 96, 99, 100, 101, 102, 106, 109, 110, 115, 117, 120, 122, 126, 128, 133, 137, 139, 146, 155, 158, 163, 167, 170, 176, 177, 178, 183, 184, 186, 189, 191, 193, 199, 208, 209, 212, 213, 218, 222, 225, 226, 230, 233, 235, 243, 245, 247, 248, 250, 251, 255, 259, 261, 262, 266, 267, 268, 269, 271, 283, 292, 293, 295, 307, 308, 314, 319, 329, 331, 332, 333, 334, 335, 337, 339, 340, 341, 344, 345, 347, 348, 352, 353, 355, 358, 364, 365, 366, 369, 375, 376, 381, 386, 387, 388, 394, 397, 399, 402, 403, 406, 410, 411, 415, 417, 419, 422, 423, 427, 428, 429, 430, 431, 432, 435, 436, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "address": [5, 9, 23, 42, 51, 58, 63, 64, 68, 73, 75, 85, 96, 101, 102, 107, 112, 121, 126, 128, 133, 142, 164, 170, 176, 191, 193, 200, 203, 208, 209, 212, 215, 223, 225, 242, 243, 245, 256, 262, 267, 269, 270, 271, 284, 319, 322, 335, 337, 338, 340, 341, 362, 382, 386, 394, 420, 428, 456, 462, 464, 465, 467, 468, 469, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483], "follow": [5, 7, 9, 23, 28, 33, 34, 39, 41, 42, 45, 55, 58, 61, 63, 64, 66, 72, 73, 75, 76, 77, 79, 84, 85, 89, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 106, 109, 110, 112, 115, 117, 120, 122, 126, 128, 132, 133, 135, 137, 139, 140, 141, 144, 146, 149, 151, 153, 155, 157, 158, 159, 161, 167, 169, 170, 176, 177, 178, 179, 181, 183, 184, 186, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 201, 202, 203, 204, 205, 207, 208, 209, 212, 213, 215, 216, 218, 220, 221, 225, 226, 228, 230, 233, 235, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 255, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 275, 278, 283, 287, 288, 290, 291, 292, 293, 295, 296, 297, 299, 301, 302, 304, 305, 307, 308, 309, 312, 314, 319, 320, 321, 322, 323, 325, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 352, 353, 354, 356, 358, 359, 361, 362, 364, 365, 366, 369, 371, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 394, 395, 397, 399, 400, 402, 403, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 442, 443, 449, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "descript": [5, 23, 24, 53, 58, 59, 63, 64, 68, 73, 89, 93, 98, 100, 101, 102, 117, 120, 128, 141, 160, 176, 177, 182, 190, 191, 193, 196, 200, 201, 202, 205, 212, 215, 230, 241, 245, 250, 251, 255, 259, 266, 267, 268, 270, 273, 278, 288, 292, 293, 297, 307, 313, 322, 332, 333, 337, 340, 341, 344, 356, 359, 361, 362, 366, 369, 375, 376, 386, 388, 399, 408, 414, 415, 419, 420, 427, 428, 429, 430, 434, 436, 451, 455, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 474, 475, 477, 478, 480, 482, 483], "quot": [5, 68, 79, 84, 85, 87, 96, 106, 109, 126, 137, 146, 158, 175, 176, 195, 196, 197, 198, 202, 203, 205, 208, 209, 235, 238, 247, 248, 256, 262, 297, 317, 319, 331, 340, 344, 345, 348, 360, 364, 384, 386, 395, 413, 417, 426, 427, 431, 434, 435, 446, 449, 451, 461, 462, 465, 467, 474, 475, 476, 480, 483], "form": [5, 7, 23, 31, 33, 34, 37, 54, 55, 63, 68, 72, 73, 79, 84, 85, 92, 95, 99, 101, 102, 106, 109, 110, 120, 126, 144, 151, 158, 161, 167, 169, 176, 177, 178, 181, 183, 186, 187, 190, 191, 193, 196, 197, 198, 200, 203, 205, 206, 208, 209, 213, 221, 225, 226, 228, 230, 242, 244, 245, 248, 251, 255, 257, 259, 261, 266, 267, 268, 269, 271, 273, 276, 283, 288, 293, 298, 302, 304, 305, 307, 319, 334, 337, 340, 341, 342, 344, 345, 346, 347, 352, 358, 362, 364, 365, 366, 368, 369, 376, 384, 387, 388, 390, 394, 395, 398, 400, 405, 408, 410, 413, 419, 421, 425, 426, 427, 428, 429, 431, 432, 434, 435, 436, 439, 455, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "entri": [5, 13, 22, 26, 27, 31, 33, 45, 49, 51, 58, 63, 68, 73, 75, 87, 89, 93, 94, 95, 98, 102, 109, 110, 120, 126, 139, 144, 158, 160, 167, 169, 176, 177, 181, 184, 186, 191, 193, 195, 216, 225, 226, 230, 233, 236, 243, 247, 248, 250, 255, 261, 265, 268, 269, 270, 271, 272, 280, 281, 283, 284, 292, 293, 299, 302, 307, 308, 314, 316, 319, 321, 324, 330, 331, 333, 335, 339, 340, 341, 344, 352, 354, 358, 362, 365, 369, 375, 376, 378, 381, 384, 385, 400, 402, 403, 405, 421, 422, 425, 429, 430, 452, 455, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 478, 479, 480, 481, 483], "round": [5, 63, 64, 68, 103, 149, 173, 183, 190, 193, 221, 225, 243, 261, 275, 289, 290, 293, 318, 343, 344, 345, 347, 352, 378, 384, 386, 388, 428, 430, 442, 444, 449, 450, 451, 452, 462, 464, 466, 467, 468, 469, 470, 471, 476, 477, 480, 481, 483], "match": [5, 11, 22, 23, 33, 42, 45, 61, 63, 64, 68, 73, 78, 85, 92, 94, 95, 96, 101, 102, 109, 110, 118, 126, 136, 139, 140, 141, 144, 151, 155, 163, 167, 177, 183, 186, 187, 190, 191, 193, 196, 197, 203, 204, 205, 208, 213, 216, 219, 225, 226, 228, 242, 243, 246, 247, 248, 251, 254, 255, 261, 264, 267, 268, 270, 272, 283, 287, 288, 293, 296, 297, 302, 308, 311, 314, 318, 320, 323, 331, 332, 333, 337, 340, 341, 344, 345, 347, 348, 352, 358, 359, 362, 363, 366, 369, 375, 376, 378, 381, 382, 383, 385, 386, 388, 394, 395, 400, 403, 410, 411, 413, 415, 420, 425, 429, 430, 431, 433, 435, 443, 445, 455, 456, 461, 462, 463, 464, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "squar": [5, 33, 63, 85, 87, 89, 94, 95, 109, 141, 177, 181, 186, 261, 275, 297, 308, 340, 343, 344, 384, 394, 413, 427, 428, 430, 434, 435, 436, 440, 442, 449, 464, 465, 468, 472, 481, 483], "bracket": [5, 33, 63, 95, 102, 106, 109, 144, 209, 220, 225, 271, 297, 319, 340, 344, 386, 387, 394, 410, 413, 427, 428, 430, 434, 435, 436, 467, 468, 469, 483], "variabl": [5, 9, 13, 16, 22, 23, 26, 28, 31, 32, 34, 42, 45, 53, 55, 58, 61, 63, 64, 66, 68, 72, 73, 75, 76, 79, 84, 85, 87, 92, 93, 94, 95, 100, 102, 106, 109, 110, 112, 114, 118, 126, 139, 141, 151, 152, 155, 163, 164, 167, 174, 177, 188, 191, 193, 209, 213, 214, 215, 223, 225, 228, 230, 245, 247, 248, 249, 250, 254, 255, 266, 267, 281, 283, 295, 297, 299, 301, 311, 313, 315, 319, 320, 324, 331, 332, 333, 337, 338, 340, 342, 343, 344, 347, 348, 351, 352, 354, 358, 362, 365, 366, 368, 376, 381, 382, 384, 385, 386, 388, 394, 395, 400, 403, 405, 407, 408, 410, 411, 412, 420, 425, 427, 428, 429, 430, 431, 432, 435, 436, 440, 441, 448, 449, 452, 455, 456, 458, 462, 463, 464, 465, 466, 467, 468, 470, 472, 474, 475, 476, 477, 478, 480, 481, 482, 483], "whose": [5, 23, 31, 33, 42, 45, 60, 61, 63, 73, 85, 93, 102, 120, 169, 176, 177, 181, 183, 186, 193, 198, 200, 203, 205, 208, 213, 215, 216, 221, 225, 226, 228, 233, 242, 243, 244, 252, 255, 266, 267, 268, 269, 271, 283, 292, 293, 297, 299, 307, 308, 312, 319, 322, 332, 333, 334, 337, 339, 340, 344, 345, 352, 358, 362, 365, 366, 369, 376, 380, 381, 388, 395, 400, 402, 405, 413, 415, 427, 428, 430, 432, 435, 462, 463, 464, 466, 467, 468, 469, 474, 476, 477, 478, 480, 481, 483], "should": [5, 7, 10, 11, 13, 22, 23, 25, 27, 28, 31, 33, 34, 35, 37, 42, 45, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 79, 84, 85, 92, 94, 95, 96, 101, 102, 103, 106, 109, 110, 112, 115, 117, 120, 126, 128, 132, 133, 135, 137, 139, 141, 143, 144, 146, 149, 151, 152, 153, 155, 157, 158, 159, 161, 163, 167, 169, 170, 173, 176, 177, 180, 181, 183, 184, 186, 188, 189, 190, 191, 193, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 215, 221, 225, 226, 228, 230, 234, 235, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 275, 276, 278, 281, 282, 283, 287, 288, 292, 293, 295, 297, 299, 302, 304, 305, 307, 308, 309, 311, 314, 319, 320, 321, 322, 324, 325, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 352, 353, 355, 358, 359, 362, 364, 365, 366, 369, 371, 374, 375, 376, 378, 380, 381, 382, 384, 385, 386, 388, 394, 395, 399, 400, 402, 405, 406, 408, 410, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 425, 427, 428, 429, 430, 432, 434, 435, 436, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484], "be": [5, 7, 9, 10, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 37, 39, 41, 42, 43, 45, 47, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 79, 84, 87, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 112, 115, 117, 120, 126, 128, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 149, 151, 152, 153, 155, 157, 158, 159, 161, 163, 167, 169, 170, 173, 176, 177, 179, 181, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 218, 220, 221, 223, 225, 226, 228, 230, 233, 234, 235, 236, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 255, 257, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 280, 281, 282, 283, 284, 287, 288, 291, 292, 293, 295, 297, 298, 301, 302, 304, 305, 307, 308, 309, 311, 312, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 369, 371, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 394, 395, 397, 399, 400, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 442, 443, 446, 448, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "pass": [5, 7, 9, 11, 13, 17, 22, 23, 27, 28, 33, 34, 42, 43, 45, 47, 49, 58, 59, 61, 63, 64, 66, 68, 72, 73, 75, 76, 77, 78, 79, 84, 87, 88, 92, 93, 94, 99, 100, 101, 103, 106, 108, 109, 110, 112, 116, 118, 120, 122, 126, 133, 135, 137, 138, 139, 140, 141, 144, 146, 149, 151, 155, 157, 158, 160, 163, 167, 169, 170, 173, 177, 178, 181, 183, 190, 191, 193, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 214, 215, 218, 225, 226, 230, 232, 234, 235, 242, 243, 244, 245, 247, 248, 250, 251, 252, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 278, 279, 281, 283, 288, 292, 293, 295, 297, 299, 305, 307, 308, 309, 311, 314, 319, 320, 321, 322, 323, 325, 330, 331, 332, 333, 335, 337, 338, 340, 341, 344, 345, 346, 347, 348, 351, 352, 353, 355, 358, 359, 362, 364, 365, 366, 367, 369, 375, 376, 378, 380, 381, 384, 385, 386, 388, 389, 390, 394, 395, 399, 400, 402, 403, 405, 407, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 425, 427, 428, 429, 430, 431, 432, 433, 435, 443, 445, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "allow": [5, 7, 9, 22, 23, 33, 34, 41, 42, 43, 45, 49, 58, 59, 61, 63, 64, 68, 71, 72, 73, 75, 76, 79, 84, 85, 89, 92, 93, 95, 100, 101, 102, 103, 106, 109, 110, 112, 115, 120, 126, 132, 133, 135, 137, 138, 139, 143, 151, 153, 157, 158, 160, 161, 163, 167, 169, 173, 176, 177, 180, 181, 183, 186, 189, 190, 191, 193, 194, 195, 196, 202, 203, 205, 208, 211, 213, 214, 215, 218, 221, 223, 225, 226, 228, 230, 234, 235, 242, 243, 244, 245, 247, 248, 250, 253, 255, 258, 261, 262, 265, 266, 267, 268, 269, 271, 275, 276, 278, 279, 283, 287, 288, 292, 293, 295, 297, 299, 302, 305, 307, 308, 311, 313, 314, 319, 320, 321, 322, 324, 325, 328, 329, 330, 331, 332, 333, 335, 337, 338, 340, 341, 344, 345, 346, 348, 352, 353, 354, 356, 358, 362, 364, 365, 366, 369, 374, 375, 376, 377, 380, 382, 384, 385, 386, 388, 390, 394, 395, 397, 399, 400, 402, 403, 405, 406, 410, 411, 413, 415, 416, 419, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 435, 436, 441, 443, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "access": [5, 7, 11, 16, 23, 31, 33, 45, 47, 49, 50, 54, 55, 59, 60, 61, 63, 68, 72, 73, 75, 76, 77, 79, 84, 85, 87, 93, 96, 99, 101, 102, 106, 109, 110, 118, 136, 138, 139, 142, 146, 149, 151, 158, 160, 161, 169, 170, 177, 181, 183, 184, 186, 191, 193, 194, 196, 200, 203, 205, 207, 212, 213, 217, 218, 219, 221, 225, 226, 230, 233, 235, 242, 243, 244, 245, 246, 247, 250, 253, 254, 255, 256, 257, 258, 259, 261, 267, 269, 271, 276, 278, 280, 281, 282, 283, 284, 292, 293, 295, 296, 297, 299, 302, 312, 314, 315, 319, 320, 322, 324, 328, 330, 332, 333, 335, 337, 338, 339, 340, 342, 344, 348, 352, 353, 354, 358, 359, 362, 365, 369, 375, 376, 381, 384, 385, 386, 387, 388, 390, 394, 395, 399, 402, 404, 406, 410, 411, 412, 413, 415, 420, 422, 425, 426, 427, 429, 430, 432, 436, 440, 449, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 475, 476, 477, 478, 479, 481, 482, 483], "an": [5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 37, 39, 40, 42, 43, 45, 47, 49, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 74, 75, 76, 77, 78, 80, 89, 91, 92, 94, 95, 96, 99, 100, 101, 103, 105, 106, 107, 110, 112, 113, 114, 115, 117, 120, 126, 128, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 149, 151, 152, 153, 155, 157, 158, 159, 160, 161, 164, 166, 167, 170, 173, 176, 177, 178, 179, 181, 182, 184, 186, 188, 189, 190, 191, 192, 193, 195, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 212, 213, 214, 215, 216, 218, 221, 223, 225, 226, 228, 230, 233, 234, 235, 236, 240, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 257, 258, 259, 261, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 280, 281, 283, 284, 285, 287, 288, 290, 292, 293, 294, 295, 296, 297, 299, 301, 302, 304, 305, 307, 308, 309, 311, 313, 314, 315, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 352, 353, 354, 355, 356, 358, 359, 361, 362, 364, 365, 366, 369, 371, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 394, 395, 397, 398, 400, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 441, 442, 443, 449, 451, 455, 456, 458, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "as": [5, 6, 7, 9, 11, 13, 17, 18, 20, 22, 23, 25, 26, 27, 28, 31, 33, 34, 35, 39, 40, 41, 42, 43, 45, 47, 49, 51, 54, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 78, 79, 84, 85, 87, 92, 93, 94, 95, 96, 100, 103, 106, 108, 109, 110, 112, 114, 115, 117, 120, 122, 126, 128, 129, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 149, 151, 152, 155, 157, 158, 159, 160, 161, 163, 166, 167, 173, 175, 176, 177, 178, 179, 181, 183, 184, 186, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 215, 216, 218, 220, 221, 222, 223, 225, 226, 228, 230, 232, 233, 234, 235, 236, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 281, 282, 283, 284, 288, 292, 293, 295, 296, 297, 299, 302, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 369, 371, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 394, 395, 397, 399, 400, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 429, 430, 431, 432, 434, 435, 436, 438, 441, 443, 446, 450, 451, 452, 455, 456, 459, 461, 462, 463, 464, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484], "chunk": [5, 13, 43, 68, 78, 85, 102, 107, 109, 133, 149, 166, 180, 223, 225, 235, 240, 242, 254, 258, 261, 262, 270, 283, 293, 303, 314, 332, 334, 337, 347, 350, 395, 407, 415, 416, 430, 462, 465, 467, 469, 473, 474, 479, 483], "memori": [5, 7, 23, 28, 31, 32, 33, 34, 41, 43, 45, 47, 49, 55, 58, 59, 61, 63, 64, 66, 68, 72, 73, 75, 76, 77, 85, 87, 93, 95, 96, 100, 101, 102, 106, 107, 108, 109, 115, 119, 132, 137, 151, 158, 176, 184, 185, 186, 188, 207, 212, 213, 214, 225, 234, 235, 247, 250, 254, 255, 258, 260, 261, 269, 271, 283, 284, 293, 299, 314, 322, 330, 332, 333, 337, 338, 340, 347, 348, 352, 358, 362, 365, 386, 389, 402, 405, 406, 411, 413, 421, 422, 428, 435, 442, 455, 456, 462, 463, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 479, 480, 481, 482, 483], "you": [5, 13, 22, 23, 25, 26, 31, 33, 34, 39, 41, 42, 43, 45, 56, 58, 59, 60, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 79, 87, 89, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 105, 106, 109, 110, 112, 114, 115, 117, 120, 126, 133, 140, 141, 143, 146, 149, 151, 152, 153, 155, 158, 159, 160, 161, 167, 169, 170, 173, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 190, 192, 193, 195, 196, 198, 200, 201, 202, 205, 206, 207, 208, 213, 214, 215, 218, 221, 225, 226, 230, 234, 235, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 255, 258, 259, 262, 265, 266, 267, 268, 269, 270, 271, 272, 278, 283, 288, 292, 293, 295, 297, 299, 305, 307, 308, 313, 314, 319, 320, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 352, 355, 358, 359, 362, 364, 365, 369, 371, 375, 376, 380, 381, 382, 384, 385, 386, 388, 389, 390, 394, 395, 399, 400, 402, 403, 405, 407, 408, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 425, 426, 427, 428, 430, 431, 432, 434, 436, 441, 442, 443, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484], "don": [5, 9, 23, 28, 33, 34, 49, 58, 59, 63, 73, 75, 76, 79, 85, 92, 93, 94, 95, 100, 101, 102, 103, 106, 109, 120, 126, 133, 137, 139, 144, 151, 152, 153, 159, 160, 163, 167, 169, 176, 179, 181, 183, 190, 191, 193, 200, 209, 216, 225, 226, 230, 242, 243, 250, 257, 258, 259, 262, 267, 268, 269, 283, 288, 292, 293, 295, 297, 299, 307, 308, 328, 330, 332, 335, 337, 340, 341, 344, 355, 365, 369, 376, 386, 388, 390, 395, 399, 402, 405, 413, 426, 427, 428, 430, 431, 432, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 476, 477, 478, 479, 481, 482, 483], "have": [5, 7, 11, 22, 23, 27, 28, 31, 33, 34, 42, 45, 47, 49, 58, 59, 60, 63, 64, 67, 72, 73, 75, 76, 77, 79, 84, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 109, 110, 112, 115, 117, 120, 126, 129, 132, 137, 138, 139, 140, 141, 143, 144, 149, 151, 153, 155, 157, 158, 159, 161, 163, 167, 169, 170, 176, 177, 178, 179, 181, 183, 184, 186, 189, 190, 191, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 206, 207, 208, 211, 213, 215, 218, 221, 225, 226, 230, 234, 235, 241, 242, 243, 244, 247, 248, 250, 251, 252, 255, 257, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 282, 283, 288, 292, 293, 295, 297, 299, 302, 305, 307, 308, 311, 312, 314, 319, 322, 323, 324, 325, 328, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 369, 371, 375, 376, 381, 382, 384, 385, 386, 388, 389, 390, 394, 395, 397, 399, 400, 402, 405, 407, 408, 410, 411, 412, 413, 414, 415, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 441, 442, 443, 449, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "provid": [5, 7, 11, 23, 25, 28, 31, 33, 34, 40, 42, 43, 45, 47, 49, 51, 54, 58, 61, 63, 64, 66, 68, 72, 74, 75, 79, 84, 85, 91, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 106, 108, 109, 110, 115, 117, 120, 124, 126, 133, 137, 139, 141, 143, 149, 151, 152, 153, 155, 157, 158, 159, 161, 163, 167, 169, 170, 173, 176, 177, 181, 183, 184, 186, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 215, 216, 218, 220, 221, 224, 225, 226, 228, 230, 233, 234, 235, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 280, 281, 282, 283, 288, 290, 292, 293, 295, 298, 302, 304, 305, 307, 308, 311, 312, 314, 315, 319, 320, 321, 322, 323, 324, 326, 328, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 352, 353, 356, 358, 359, 361, 362, 364, 365, 366, 369, 371, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 390, 394, 395, 399, 400, 402, 403, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 430, 432, 435, 436, 440, 455, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "raw": [5, 7, 16, 32, 63, 68, 101, 106, 118, 120, 151, 167, 176, 177, 191, 193, 196, 197, 205, 206, 207, 225, 230, 255, 270, 283, 288, 293, 299, 329, 331, 337, 338, 341, 344, 363, 366, 369, 381, 383, 395, 398, 402, 415, 427, 435, 449, 463, 465, 467, 468, 470, 473, 474, 476, 478, 483], "storag": [5, 32, 35, 42, 55, 68, 87, 100, 102, 109, 158, 167, 177, 191, 250, 258, 261, 284, 293, 330, 340, 344, 347, 413, 440, 464, 467, 468, 469, 474, 476, 477, 483], "return": [5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 37, 39, 40, 41, 42, 43, 45, 46, 47, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 78, 79, 84, 86, 87, 92, 94, 95, 96, 98, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 120, 122, 125, 126, 130, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 151, 152, 153, 155, 157, 158, 159, 160, 161, 163, 166, 167, 169, 170, 172, 173, 177, 178, 179, 181, 183, 184, 186, 189, 190, 191, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 218, 220, 221, 225, 226, 228, 230, 231, 233, 234, 235, 236, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 282, 283, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 299, 301, 302, 303, 304, 305, 307, 308, 309, 311, 312, 314, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 355, 356, 358, 359, 361, 362, 364, 365, 366, 367, 369, 371, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 394, 395, 400, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 433, 435, 440, 441, 443, 449, 450, 451, 452, 455, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "unicod": [5, 16, 27, 31, 32, 39, 45, 59, 63, 65, 68, 80, 85, 87, 92, 97, 102, 106, 112, 119, 121, 143, 145, 146, 167, 175, 176, 177, 182, 183, 186, 193, 194, 195, 196, 197, 200, 201, 202, 203, 208, 209, 213, 221, 225, 230, 238, 239, 240, 247, 254, 258, 262, 266, 282, 293, 294, 296, 299, 302, 319, 340, 344, 345, 346, 352, 363, 378, 386, 394, 400, 405, 407, 411, 412, 413, 422, 425, 428, 430, 435, 442, 455, 456, 463, 467, 468, 469, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483, 484], "byte": [5, 7, 12, 16, 22, 23, 24, 25, 26, 28, 31, 33, 34, 39, 40, 41, 42, 43, 49, 58, 59, 61, 63, 64, 66, 68, 78, 79, 84, 85, 87, 92, 93, 94, 100, 102, 106, 107, 110, 113, 117, 118, 121, 122, 126, 127, 133, 136, 137, 141, 142, 143, 145, 146, 149, 151, 153, 158, 161, 166, 167, 177, 178, 182, 184, 186, 188, 190, 191, 194, 195, 196, 197, 199, 200, 201, 202, 205, 206, 207, 208, 212, 213, 215, 223, 225, 230, 234, 235, 237, 242, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 261, 262, 264, 266, 268, 269, 270, 271, 274, 278, 282, 283, 284, 287, 288, 293, 295, 296, 298, 299, 304, 309, 311, 314, 317, 318, 319, 322, 324, 328, 332, 333, 335, 336, 337, 338, 340, 341, 342, 348, 349, 352, 358, 359, 362, 369, 377, 378, 382, 383, 386, 395, 398, 400, 401, 405, 406, 407, 408, 410, 411, 413, 414, 415, 416, 419, 421, 422, 424, 425, 427, 428, 430, 431, 432, 440, 446, 450, 451, 455, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484], "area": [5, 7, 42, 45, 63, 92, 94, 96, 101, 102, 109, 177, 196, 205, 225, 247, 278, 299, 322, 337, 341, 371, 376, 434, 446, 462, 467, 468, 477, 480], "unless": [5, 7, 9, 13, 22, 23, 26, 27, 31, 33, 42, 51, 54, 56, 58, 59, 63, 73, 76, 85, 94, 95, 100, 101, 103, 106, 112, 117, 120, 126, 139, 140, 141, 149, 161, 167, 169, 181, 183, 186, 191, 193, 196, 200, 205, 206, 209, 225, 226, 242, 243, 244, 247, 250, 255, 258, 259, 261, 267, 268, 270, 271, 275, 281, 283, 288, 292, 293, 297, 309, 314, 319, 323, 328, 329, 332, 334, 335, 337, 338, 340, 341, 344, 345, 348, 352, 353, 354, 358, 359, 364, 365, 386, 388, 394, 395, 399, 400, 402, 406, 412, 415, 426, 427, 428, 429, 430, 435, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 476, 477, 479, 480, 481, 482, 483], "otherwis": [5, 7, 11, 13, 22, 23, 27, 28, 31, 33, 34, 39, 40, 42, 43, 45, 47, 49, 54, 58, 59, 61, 63, 64, 66, 73, 76, 79, 94, 95, 101, 102, 103, 106, 110, 112, 117, 120, 126, 129, 133, 139, 141, 146, 149, 155, 157, 158, 163, 167, 169, 170, 176, 177, 179, 181, 183, 184, 186, 190, 191, 193, 195, 196, 197, 199, 200, 202, 205, 206, 208, 209, 214, 216, 218, 225, 226, 230, 234, 242, 243, 244, 245, 247, 250, 251, 252, 255, 257, 258, 259, 261, 262, 267, 268, 269, 271, 275, 276, 278, 283, 292, 293, 297, 299, 301, 302, 304, 305, 307, 311, 312, 314, 319, 321, 324, 328, 331, 332, 333, 334, 335, 337, 338, 340, 341, 344, 345, 348, 352, 353, 354, 355, 356, 358, 359, 362, 364, 365, 366, 369, 376, 378, 381, 382, 384, 387, 388, 390, 394, 395, 400, 402, 403, 406, 407, 411, 413, 415, 419, 420, 421, 422, 425, 426, 427, 428, 430, 431, 432, 435, 436, 442, 455, 456, 461, 463, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 483], "state": [5, 13, 17, 22, 23, 27, 31, 32, 45, 50, 51, 53, 59, 61, 63, 68, 73, 75, 76, 84, 85, 92, 95, 96, 101, 106, 110, 119, 126, 133, 138, 139, 140, 141, 144, 151, 154, 157, 158, 160, 164, 167, 169, 170, 171, 177, 185, 191, 212, 218, 222, 226, 235, 243, 248, 250, 254, 256, 258, 259, 268, 270, 271, 293, 295, 297, 298, 301, 303, 308, 314, 315, 318, 320, 323, 325, 328, 333, 337, 338, 340, 341, 344, 348, 352, 362, 365, 366, 368, 369, 375, 381, 385, 388, 394, 395, 400, 402, 405, 411, 412, 425, 426, 428, 430, 432, 441, 452, 462, 464, 465, 467, 474, 475, 476, 477, 480, 481, 482, 483], "nul": [5, 7, 63, 176, 177, 178, 237, 269, 284, 293, 296, 314, 347, 352, 419, 475, 476, 483], "termin": [5, 7, 9, 31, 33, 34, 37, 39, 45, 58, 60, 61, 63, 64, 66, 68, 73, 84, 85, 92, 95, 96, 100, 101, 102, 109, 115, 118, 120, 126, 130, 132, 133, 137, 139, 140, 155, 176, 178, 189, 190, 191, 193, 207, 208, 214, 219, 225, 229, 242, 245, 247, 254, 255, 258, 261, 265, 266, 269, 271, 283, 288, 292, 297, 302, 308, 319, 322, 333, 335, 338, 340, 341, 344, 345, 348, 352, 361, 365, 369, 377, 384, 391, 395, 400, 405, 411, 413, 415, 426, 427, 429, 430, 432, 435, 436, 455, 462, 466, 467, 468, 470, 475, 476, 478, 480, 481, 483], "there": [5, 7, 9, 13, 22, 23, 25, 26, 27, 31, 33, 34, 39, 41, 42, 45, 46, 49, 51, 55, 58, 59, 60, 63, 64, 66, 67, 72, 73, 75, 76, 77, 79, 92, 93, 94, 95, 100, 101, 102, 103, 105, 106, 109, 110, 114, 115, 120, 122, 126, 132, 133, 137, 139, 143, 144, 151, 153, 155, 157, 158, 159, 163, 166, 167, 169, 170, 176, 177, 179, 181, 183, 184, 186, 190, 191, 193, 196, 197, 199, 200, 201, 203, 205, 207, 208, 209, 213, 215, 216, 218, 225, 226, 228, 230, 235, 242, 243, 244, 245, 247, 248, 250, 251, 252, 255, 258, 259, 261, 265, 266, 267, 268, 269, 271, 275, 278, 281, 283, 287, 288, 292, 293, 295, 297, 299, 304, 305, 307, 308, 313, 314, 318, 319, 324, 325, 328, 330, 331, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 354, 355, 358, 359, 362, 364, 365, 366, 369, 375, 376, 378, 384, 386, 387, 388, 390, 394, 395, 399, 400, 402, 408, 410, 411, 413, 414, 415, 416, 421, 422, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 443, 455, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "way": [5, 7, 9, 13, 23, 25, 31, 33, 34, 42, 45, 58, 59, 61, 63, 64, 66, 72, 73, 75, 76, 79, 84, 92, 93, 94, 95, 99, 100, 101, 102, 103, 106, 109, 110, 120, 124, 126, 133, 139, 141, 144, 151, 157, 158, 159, 161, 163, 167, 169, 173, 176, 177, 181, 183, 186, 188, 190, 193, 194, 195, 196, 200, 201, 205, 207, 208, 209, 225, 228, 230, 235, 243, 247, 248, 250, 251, 255, 258, 259, 261, 266, 267, 268, 269, 270, 271, 275, 278, 280, 283, 292, 293, 295, 297, 299, 307, 308, 319, 324, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 344, 347, 348, 352, 353, 354, 358, 362, 365, 369, 375, 378, 381, 384, 386, 387, 388, 390, 395, 400, 402, 403, 410, 413, 415, 419, 420, 421, 425, 426, 427, 428, 429, 430, 432, 434, 435, 436, 440, 443, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "can": [5, 7, 11, 13, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 37, 39, 41, 42, 43, 45, 47, 49, 51, 54, 55, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 78, 87, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 112, 114, 115, 117, 120, 122, 126, 128, 132, 133, 135, 137, 138, 139, 140, 141, 143, 144, 146, 149, 151, 152, 153, 157, 158, 159, 161, 163, 166, 167, 169, 170, 173, 176, 177, 178, 179, 181, 183, 184, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 218, 220, 221, 225, 226, 228, 230, 232, 234, 235, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 255, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 280, 281, 282, 283, 288, 292, 293, 295, 297, 298, 301, 302, 304, 307, 308, 309, 311, 312, 313, 314, 319, 320, 321, 322, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 354, 355, 356, 358, 359, 361, 362, 364, 365, 366, 369, 375, 376, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 394, 395, 397, 399, 400, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 442, 443, 446, 449, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "convert": [5, 7, 18, 25, 33, 39, 47, 55, 56, 58, 59, 64, 66, 68, 72, 73, 75, 76, 84, 92, 93, 94, 95, 100, 101, 102, 106, 112, 117, 120, 126, 139, 141, 144, 148, 155, 158, 160, 164, 167, 176, 177, 178, 181, 183, 184, 186, 190, 191, 193, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 208, 209, 213, 215, 220, 225, 226, 230, 244, 248, 254, 259, 261, 266, 267, 268, 269, 270, 271, 275, 276, 283, 285, 292, 293, 298, 299, 301, 302, 307, 309, 319, 335, 337, 342, 344, 345, 347, 352, 358, 362, 366, 376, 378, 383, 388, 394, 398, 400, 405, 411, 413, 415, 419, 425, 427, 428, 430, 435, 436, 443, 446, 451, 455, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "such": [5, 7, 13, 23, 25, 27, 28, 31, 33, 34, 42, 45, 51, 58, 61, 63, 64, 72, 73, 75, 76, 77, 79, 84, 85, 87, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 109, 110, 112, 115, 120, 126, 132, 133, 137, 139, 141, 144, 146, 151, 155, 158, 159, 161, 167, 169, 176, 177, 181, 183, 184, 186, 190, 193, 194, 196, 197, 202, 203, 205, 207, 208, 209, 211, 212, 213, 215, 216, 225, 226, 230, 234, 235, 243, 245, 247, 248, 250, 251, 253, 255, 258, 259, 261, 262, 265, 266, 267, 268, 269, 271, 272, 275, 278, 281, 283, 287, 288, 292, 293, 295, 297, 299, 302, 304, 307, 308, 313, 314, 319, 324, 328, 329, 330, 331, 332, 333, 335, 337, 338, 340, 341, 344, 345, 346, 347, 348, 352, 355, 358, 359, 361, 362, 365, 366, 369, 375, 376, 377, 380, 381, 384, 385, 386, 387, 388, 394, 395, 397, 399, 400, 402, 406, 410, 411, 412, 413, 415, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 432, 435, 436, 443, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "fill": [5, 7, 22, 33, 34, 42, 45, 47, 55, 60, 63, 64, 68, 75, 76, 85, 92, 95, 100, 102, 110, 117, 120, 138, 151, 176, 177, 183, 186, 193, 196, 201, 205, 222, 225, 245, 247, 250, 254, 258, 261, 269, 293, 335, 337, 340, 341, 344, 345, 347, 348, 362, 363, 366, 369, 428, 430, 432, 452, 456, 462, 464, 465, 466, 467, 468, 474, 475, 476, 478, 479, 483], "py_buff": [5, 7, 43, 57, 63, 468, 473, 476, 483], "this": [5, 6, 7, 9, 10, 11, 13, 17, 20, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 37, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 84, 85, 87, 89, 92, 93, 94, 95, 96, 99, 101, 102, 103, 105, 106, 107, 108, 109, 110, 112, 114, 115, 117, 120, 122, 126, 128, 132, 133, 135, 137, 138, 139, 140, 141, 143, 144, 146, 149, 151, 152, 153, 155, 156, 157, 158, 159, 161, 163, 166, 167, 169, 170, 173, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 230, 231, 232, 233, 234, 235, 236, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 278, 279, 280, 281, 282, 283, 284, 287, 288, 290, 292, 293, 295, 296, 297, 298, 299, 302, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 354, 355, 356, 358, 359, 361, 362, 364, 365, 366, 369, 371, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 394, 395, 397, 399, 400, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 441, 446, 449, 450, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "lock": [5, 31, 32, 51, 63, 68, 73, 76, 84, 87, 96, 100, 102, 115, 124, 142, 164, 166, 167, 169, 176, 212, 215, 226, 241, 258, 267, 269, 270, 271, 282, 283, 293, 305, 316, 322, 324, 330, 333, 338, 340, 342, 352, 362, 369, 386, 402, 428, 452, 462, 464, 466, 467, 468, 469, 470, 473, 474, 475, 478, 480, 481, 482, 483, 484], "under": [5, 7, 13, 23, 33, 34, 42, 43, 45, 54, 58, 61, 66, 68, 74, 84, 85, 92, 93, 95, 101, 102, 103, 106, 120, 126, 132, 133, 135, 149, 151, 153, 155, 158, 161, 169, 176, 177, 183, 190, 193, 196, 199, 203, 208, 212, 213, 215, 216, 225, 226, 230, 234, 235, 242, 247, 255, 258, 261, 262, 267, 268, 269, 270, 271, 275, 278, 281, 283, 292, 293, 295, 297, 299, 305, 308, 314, 320, 322, 328, 329, 330, 331, 332, 333, 337, 338, 340, 341, 342, 344, 348, 352, 353, 355, 362, 365, 366, 369, 371, 375, 376, 380, 381, 384, 385, 386, 388, 394, 395, 397, 399, 400, 403, 405, 406, 410, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 435, 436, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 483], "so": [5, 7, 11, 13, 22, 23, 25, 27, 28, 31, 33, 34, 41, 42, 45, 49, 54, 57, 59, 63, 64, 66, 68, 71, 72, 73, 75, 76, 77, 79, 84, 85, 89, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 106, 109, 110, 112, 120, 126, 137, 139, 140, 141, 143, 151, 153, 157, 158, 159, 167, 169, 170, 173, 176, 177, 178, 179, 181, 183, 186, 190, 191, 193, 196, 199, 200, 201, 202, 203, 205, 207, 208, 209, 213, 214, 215, 216, 218, 221, 225, 226, 228, 230, 232, 234, 235, 242, 243, 244, 245, 247, 248, 250, 253, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 278, 283, 284, 292, 293, 297, 299, 302, 308, 312, 314, 319, 325, 328, 329, 331, 332, 333, 334, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 353, 354, 355, 358, 359, 362, 364, 365, 366, 369, 375, 376, 378, 384, 385, 386, 388, 389, 390, 395, 399, 402, 405, 406, 407, 410, 411, 413, 415, 416, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 436, 440, 443, 449, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484], "caller": [5, 9, 23, 31, 33, 34, 45, 58, 61, 64, 73, 85, 88, 93, 95, 139, 144, 157, 158, 169, 176, 181, 189, 191, 225, 235, 242, 251, 252, 255, 258, 267, 291, 293, 302, 308, 332, 333, 335, 337, 341, 343, 348, 352, 365, 376, 380, 381, 386, 388, 395, 397, 400, 403, 405, 419, 421, 428, 429, 430, 440, 443, 463, 464, 465, 466, 467, 468, 469, 473, 479, 482, 483], "subsequ": [5, 23, 33, 45, 60, 64, 85, 93, 106, 115, 120, 159, 177, 190, 191, 202, 206, 208, 226, 243, 250, 255, 258, 261, 268, 269, 271, 278, 283, 292, 293, 296, 319, 332, 337, 341, 344, 345, 352, 356, 358, 365, 369, 375, 384, 395, 426, 427, 430, 432, 434, 436, 465, 466, 467, 468, 469, 471, 478, 481, 483], "even": [5, 9, 23, 26, 31, 33, 34, 42, 45, 58, 59, 63, 64, 73, 76, 84, 85, 93, 94, 95, 96, 100, 102, 103, 106, 109, 112, 120, 126, 132, 139, 146, 151, 158, 161, 163, 167, 169, 176, 177, 181, 183, 186, 188, 193, 194, 196, 198, 199, 205, 206, 207, 208, 213, 214, 215, 218, 221, 225, 226, 235, 243, 247, 250, 251, 255, 258, 259, 261, 265, 266, 267, 268, 269, 270, 271, 275, 283, 292, 293, 297, 299, 307, 308, 314, 318, 319, 331, 332, 333, 334, 335, 337, 340, 341, 343, 344, 345, 347, 352, 353, 354, 358, 362, 364, 365, 366, 369, 376, 382, 384, 386, 387, 388, 389, 390, 395, 399, 400, 402, 403, 405, 411, 415, 417, 419, 422, 425, 426, 427, 428, 430, 431, 432, 434, 435, 436, 441, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 479, 480, 482, 483], "insid": [5, 7, 11, 33, 42, 63, 68, 76, 85, 92, 95, 100, 106, 113, 114, 135, 144, 169, 177, 186, 193, 196, 199, 205, 225, 226, 251, 252, 258, 262, 281, 283, 297, 299, 302, 319, 332, 333, 337, 345, 352, 358, 369, 375, 376, 384, 386, 388, 390, 413, 420, 422, 423, 427, 428, 429, 430, 435, 449, 461, 463, 464, 465, 466, 467, 468, 470, 473, 474, 475, 477, 479, 480, 481, 483], "py_begin_allow_thread": [5, 33, 57, 73], "block": [5, 7, 23, 33, 42, 45, 55, 63, 68, 73, 75, 77, 78, 92, 93, 106, 107, 110, 112, 115, 117, 125, 126, 133, 134, 135, 137, 138, 139, 144, 146, 149, 169, 176, 177, 178, 185, 186, 188, 190, 191, 193, 199, 207, 208, 212, 213, 215, 225, 226, 232, 234, 235, 242, 243, 247, 248, 255, 257, 258, 261, 269, 273, 282, 283, 284, 288, 293, 295, 296, 305, 313, 316, 322, 325, 328, 329, 330, 332, 333, 335, 337, 340, 342, 348, 351, 352, 353, 358, 359, 362, 365, 369, 386, 388, 395, 403, 405, 406, 411, 416, 428, 429, 430, 431, 432, 436, 455, 463, 464, 465, 467, 468, 469, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "without": [5, 7, 9, 13, 22, 23, 25, 33, 34, 42, 45, 49, 54, 55, 58, 59, 61, 63, 66, 68, 72, 73, 75, 76, 79, 85, 92, 93, 94, 95, 100, 101, 102, 103, 106, 115, 120, 122, 126, 133, 135, 137, 139, 140, 149, 151, 155, 158, 167, 169, 170, 173, 176, 177, 181, 183, 184, 186, 188, 190, 191, 192, 193, 194, 196, 197, 202, 205, 208, 209, 213, 214, 218, 225, 226, 228, 230, 234, 235, 243, 244, 248, 250, 252, 253, 255, 258, 259, 261, 265, 266, 267, 270, 271, 275, 278, 282, 283, 288, 292, 293, 295, 297, 299, 305, 308, 309, 314, 318, 319, 322, 323, 324, 325, 328, 330, 332, 334, 337, 340, 341, 344, 347, 348, 352, 353, 354, 358, 359, 362, 364, 365, 366, 368, 369, 382, 384, 385, 386, 388, 394, 395, 399, 400, 402, 403, 410, 411, 413, 416, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 440, 441, 449, 451, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "risk": [5, 42, 43, 73, 85, 95, 103, 126, 213, 268, 271, 283, 292, 299, 362, 384, 413, 421, 426, 468, 475, 480, 481, 483], "mutabl": [5, 27, 28, 33, 63, 68, 85, 87, 95, 100, 161, 171, 176, 203, 211, 215, 225, 226, 255, 283, 291, 293, 297, 299, 315, 330, 402, 413, 424, 427, 430, 436, 440, 442, 449, 462, 465, 467, 468, 469, 470, 473, 474, 479, 482, 483], "data": [5, 7, 9, 13, 28, 32, 33, 42, 49, 54, 55, 56, 58, 60, 63, 64, 65, 68, 72, 73, 74, 75, 77, 79, 84, 92, 93, 98, 100, 102, 104, 106, 108, 115, 117, 118, 119, 120, 121, 122, 126, 133, 134, 136, 137, 141, 142, 143, 144, 145, 146, 147, 149, 151, 153, 157, 158, 160, 164, 166, 167, 169, 177, 178, 179, 182, 183, 184, 186, 190, 191, 195, 196, 197, 198, 201, 203, 206, 207, 208, 212, 213, 215, 223, 225, 226, 230, 234, 235, 240, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 255, 258, 261, 262, 266, 267, 269, 271, 272, 273, 274, 276, 278, 281, 283, 284, 288, 290, 292, 293, 295, 296, 302, 304, 308, 309, 314, 315, 316, 318, 319, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 348, 349, 352, 355, 358, 359, 360, 361, 362, 366, 368, 375, 376, 379, 380, 381, 382, 384, 385, 386, 387, 388, 394, 395, 397, 401, 402, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 426, 428, 430, 432, 439, 440, 443, 445, 451, 456, 458, 462, 463, 464, 465, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484], "being": [5, 7, 13, 22, 23, 27, 28, 33, 45, 60, 61, 63, 64, 66, 73, 75, 76, 84, 85, 92, 93, 94, 95, 99, 100, 101, 102, 106, 109, 110, 120, 126, 133, 139, 149, 151, 158, 159, 161, 163, 167, 169, 170, 176, 177, 181, 183, 184, 191, 193, 195, 196, 202, 205, 208, 213, 216, 218, 225, 226, 230, 234, 247, 248, 250, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 276, 278, 283, 292, 293, 295, 297, 299, 302, 303, 307, 308, 309, 312, 314, 318, 319, 320, 324, 328, 329, 330, 332, 333, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 353, 355, 362, 364, 365, 366, 369, 376, 381, 386, 388, 389, 390, 394, 399, 400, 402, 407, 410, 413, 414, 415, 417, 421, 422, 426, 427, 428, 430, 432, 434, 435, 436, 440, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "resiz": [5, 9, 28, 42, 54, 56, 60, 64, 176, 177, 258, 278, 333, 344, 369, 375, 376, 384, 388, 478, 480, 483], "destroy": [5, 11, 13, 22, 27, 33, 60, 63, 67, 95, 100, 247, 258, 278, 283, 292, 345, 365, 369, 388, 400, 402, 405, 428, 432, 462, 464, 465, 467, 475, 479, 480, 482, 483], "result": [5, 7, 9, 13, 23, 26, 31, 33, 34, 39, 42, 45, 47, 49, 53, 54, 58, 60, 61, 63, 64, 66, 68, 72, 73, 75, 76, 78, 84, 87, 92, 93, 94, 95, 96, 99, 100, 101, 102, 104, 106, 109, 117, 120, 122, 123, 125, 126, 129, 133, 135, 137, 138, 139, 141, 142, 143, 144, 146, 151, 152, 158, 159, 160, 163, 166, 167, 169, 170, 173, 176, 177, 178, 181, 183, 184, 186, 190, 191, 193, 196, 197, 199, 201, 203, 205, 206, 207, 208, 209, 211, 212, 213, 215, 216, 219, 225, 226, 230, 234, 235, 242, 243, 244, 245, 247, 248, 250, 252, 253, 254, 255, 256, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 282, 283, 284, 288, 292, 293, 295, 297, 299, 305, 307, 308, 309, 311, 318, 319, 321, 322, 324, 328, 331, 332, 333, 335, 337, 340, 341, 343, 344, 345, 346, 347, 348, 352, 355, 358, 359, 362, 364, 365, 366, 369, 376, 378, 380, 381, 382, 384, 385, 386, 388, 389, 390, 395, 397, 400, 402, 403, 405, 410, 411, 413, 416, 417, 419, 420, 421, 422, 425, 426, 427, 428, 430, 431, 432, 435, 436, 441, 443, 446, 450, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "pybuffer_releas": [5, 7, 48, 57, 63, 468, 473, 483], "after": [5, 7, 13, 23, 26, 27, 28, 33, 34, 39, 42, 45, 58, 59, 61, 63, 64, 68, 71, 72, 73, 76, 85, 92, 94, 95, 100, 101, 102, 103, 106, 110, 112, 115, 117, 120, 126, 128, 133, 135, 139, 140, 143, 144, 146, 147, 149, 151, 152, 153, 155, 157, 167, 169, 170, 176, 177, 179, 181, 183, 185, 186, 190, 191, 193, 195, 196, 205, 206, 207, 209, 212, 213, 215, 216, 218, 225, 228, 232, 234, 235, 242, 245, 247, 248, 250, 255, 258, 261, 266, 267, 268, 269, 270, 271, 275, 278, 279, 282, 283, 284, 288, 292, 293, 295, 297, 305, 308, 309, 314, 319, 320, 324, 325, 328, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 352, 353, 358, 361, 362, 364, 365, 366, 369, 375, 376, 381, 382, 384, 386, 388, 390, 395, 399, 400, 402, 405, 407, 410, 413, 415, 416, 421, 422, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 441, 444, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "finish": [5, 34, 42, 61, 63, 72, 79, 84, 85, 102, 124, 125, 126, 128, 135, 137, 138, 139, 144, 149, 155, 169, 213, 242, 267, 270, 283, 314, 316, 333, 338, 340, 341, 344, 348, 358, 362, 371, 388, 403, 411, 412, 413, 416, 419, 422, 427, 428, 452, 455, 467, 468, 475, 476, 478, 479, 482, 483], "process": [5, 7, 23, 32, 34, 39, 45, 51, 58, 59, 63, 66, 68, 72, 73, 75, 77, 78, 79, 84, 92, 95, 96, 98, 99, 101, 106, 107, 109, 110, 112, 114, 115, 118, 120, 130, 133, 134, 137, 140, 145, 149, 150, 151, 155, 158, 164, 166, 169, 175, 176, 177, 183, 186, 193, 200, 201, 203, 212, 213, 214, 218, 225, 226, 228, 230, 232, 235, 240, 241, 245, 247, 248, 250, 254, 255, 257, 260, 261, 266, 267, 268, 269, 270, 271, 278, 280, 284, 292, 295, 296, 299, 308, 309, 314, 315, 316, 319, 322, 324, 328, 329, 331, 332, 333, 334, 335, 337, 338, 340, 342, 344, 346, 347, 348, 352, 354, 356, 358, 359, 362, 364, 365, 366, 367, 369, 371, 378, 380, 381, 384, 385, 386, 394, 395, 399, 400, 402, 403, 405, 407, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 425, 427, 428, 430, 432, 435, 436, 455, 456, 461, 463, 464, 465, 466, 467, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "ani": [5, 7, 9, 11, 13, 22, 23, 24, 27, 28, 31, 33, 34, 35, 37, 39, 42, 43, 45, 55, 56, 58, 59, 60, 61, 63, 64, 66, 68, 72, 73, 75, 76, 77, 79, 84, 85, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 109, 115, 116, 117, 120, 126, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 149, 151, 152, 155, 157, 158, 159, 163, 167, 170, 173, 176, 177, 178, 179, 181, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 214, 215, 218, 220, 221, 225, 226, 230, 234, 235, 236, 242, 243, 244, 245, 247, 248, 250, 251, 252, 253, 255, 257, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 275, 276, 278, 283, 288, 291, 292, 293, 295, 296, 297, 299, 302, 305, 308, 309, 313, 314, 315, 316, 319, 320, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 353, 354, 358, 359, 362, 364, 365, 366, 369, 375, 376, 378, 380, 381, 382, 384, 385, 388, 390, 394, 395, 399, 400, 402, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 421, 422, 423, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 441, 446, 450, 453, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "earli": [5, 34, 75, 169, 255, 269, 292, 333, 341, 344, 365, 369, 382, 411, 422, 430, 432, 462, 466, 468, 475, 483], "abort": [5, 35, 42, 59, 73, 102, 126, 130, 133, 136, 138, 212, 213, 223, 248, 293, 297, 333, 340, 341, 352, 358, 359, 365, 373, 388, 432, 465, 480, 483], "case": [5, 7, 13, 18, 22, 23, 24, 25, 27, 31, 33, 34, 35, 39, 41, 45, 49, 56, 58, 59, 61, 63, 64, 66, 68, 71, 72, 73, 75, 76, 84, 85, 92, 93, 94, 95, 96, 99, 101, 102, 103, 106, 107, 109, 110, 112, 117, 120, 122, 124, 126, 133, 135, 139, 141, 144, 146, 149, 151, 155, 158, 159, 163, 167, 169, 173, 176, 177, 178, 181, 183, 186, 187, 188, 190, 191, 193, 195, 196, 201, 202, 203, 205, 207, 208, 209, 213, 214, 215, 220, 225, 230, 234, 235, 243, 244, 245, 247, 248, 250, 251, 255, 259, 261, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 283, 288, 292, 293, 295, 297, 299, 302, 307, 308, 314, 319, 324, 325, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 344, 345, 346, 347, 348, 352, 354, 355, 358, 359, 362, 365, 366, 369, 375, 376, 378, 382, 384, 386, 387, 390, 394, 395, 399, 400, 405, 410, 411, 413, 415, 416, 420, 421, 425, 428, 429, 430, 431, 432, 435, 436, 440, 441, 443, 450, 455, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "es": [5, 85, 319, 344, 464, 468, 469, 470, 472, 474, 483], "et": [5, 79, 102, 181, 337, 341, 376, 413, 464, 467, 469, 472, 483], "alloc": [5, 7, 16, 23, 28, 31, 32, 34, 45, 49, 56, 58, 59, 63, 64, 66, 68, 72, 73, 74, 76, 85, 93, 100, 115, 133, 169, 176, 185, 188, 214, 254, 259, 283, 284, 293, 299, 314, 322, 337, 352, 365, 376, 405, 416, 455, 456, 462, 463, 464, 467, 469, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484], "pymem_fre": [5, 18, 34, 42, 57, 59, 64, 465, 467, 483], "other": [5, 7, 9, 11, 13, 22, 23, 25, 27, 28, 33, 34, 35, 39, 42, 43, 45, 54, 55, 58, 59, 60, 61, 62, 63, 64, 66, 68, 72, 73, 74, 75, 77, 78, 84, 92, 93, 95, 100, 103, 106, 108, 109, 110, 112, 115, 118, 126, 132, 133, 137, 141, 144, 146, 151, 152, 153, 158, 159, 161, 163, 167, 169, 170, 176, 177, 179, 181, 183, 184, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 201, 202, 203, 205, 206, 207, 209, 211, 213, 215, 216, 225, 226, 230, 234, 235, 242, 243, 244, 245, 247, 248, 250, 251, 252, 254, 255, 256, 257, 258, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 275, 278, 280, 283, 287, 288, 289, 293, 296, 297, 298, 302, 307, 308, 309, 313, 314, 315, 319, 321, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 352, 354, 355, 356, 358, 359, 362, 365, 366, 369, 376, 378, 380, 382, 384, 385, 387, 388, 389, 390, 394, 395, 399, 400, 402, 404, 405, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 443, 446, 455, 456, 461, 464, 466, 467, 468, 471, 472, 474, 475, 476, 481, 482, 483, 484], "take": [5, 9, 13, 22, 23, 27, 31, 33, 49, 51, 58, 60, 63, 64, 66, 73, 75, 76, 79, 84, 85, 92, 93, 94, 95, 101, 102, 103, 106, 109, 120, 126, 139, 141, 144, 151, 152, 158, 167, 169, 176, 177, 178, 181, 183, 186, 187, 190, 191, 193, 194, 198, 201, 202, 203, 206, 207, 208, 209, 215, 218, 225, 226, 230, 232, 235, 243, 244, 245, 247, 249, 250, 251, 258, 261, 262, 266, 267, 268, 270, 271, 275, 276, 283, 288, 292, 293, 299, 307, 308, 314, 319, 324, 325, 328, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 344, 345, 347, 348, 352, 355, 358, 361, 362, 364, 369, 375, 376, 382, 384, 385, 386, 388, 389, 390, 394, 395, 399, 400, 407, 408, 410, 411, 412, 413, 415, 417, 419, 421, 422, 427, 428, 430, 432, 436, 441, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 480, 481, 482, 483], "str": [5, 10, 18, 22, 24, 25, 26, 33, 34, 35, 39, 40, 49, 58, 59, 63, 64, 66, 68, 75, 76, 78, 84, 85, 87, 88, 89, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 106, 108, 109, 112, 114, 120, 122, 126, 136, 142, 146, 149, 155, 158, 160, 163, 167, 169, 175, 177, 181, 182, 183, 184, 186, 188, 190, 191, 195, 196, 197, 201, 202, 203, 205, 208, 209, 211, 213, 221, 223, 225, 226, 234, 235, 236, 237, 240, 242, 244, 247, 251, 252, 254, 255, 258, 259, 261, 262, 266, 267, 268, 270, 283, 284, 288, 291, 292, 293, 296, 299, 306, 318, 319, 331, 335, 338, 340, 341, 345, 347, 348, 352, 353, 358, 362, 363, 364, 367, 378, 379, 382, 385, 386, 388, 389, 394, 398, 400, 402, 405, 410, 413, 414, 419, 422, 425, 427, 428, 430, 435, 440, 441, 442, 443, 444, 446, 449, 450, 451, 452, 455, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "read": [5, 7, 22, 23, 24, 25, 31, 33, 34, 41, 42, 43, 58, 61, 63, 64, 66, 68, 72, 73, 75, 76, 78, 79, 85, 86, 87, 92, 93, 94, 95, 96, 101, 102, 103, 106, 107, 110, 112, 117, 119, 120, 136, 137, 140, 143, 146, 148, 149, 151, 153, 155, 157, 158, 159, 160, 161, 163, 166, 167, 170, 175, 176, 177, 181, 183, 184, 188, 189, 190, 191, 193, 194, 200, 203, 204, 207, 208, 212, 213, 215, 216, 218, 223, 225, 226, 230, 234, 235, 242, 243, 244, 245, 247, 248, 250, 251, 253, 254, 255, 258, 262, 265, 267, 268, 271, 276, 278, 280, 281, 282, 283, 288, 292, 293, 295, 296, 297, 299, 301, 302, 304, 305, 308, 309, 312, 313, 314, 319, 320, 325, 328, 329, 330, 331, 332, 333, 335, 337, 338, 340, 341, 342, 344, 347, 348, 352, 355, 359, 360, 365, 366, 369, 376, 378, 380, 381, 382, 384, 385, 389, 390, 394, 395, 396, 397, 399, 400, 402, 407, 410, 413, 414, 415, 416, 417, 419, 421, 422, 425, 426, 427, 428, 430, 432, 435, 438, 440, 446, 452, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "onli": [5, 7, 9, 10, 13, 22, 23, 26, 28, 31, 33, 34, 35, 39, 41, 42, 43, 45, 49, 51, 54, 58, 59, 60, 61, 63, 64, 66, 68, 71, 72, 73, 75, 76, 77, 79, 84, 85, 87, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 112, 115, 117, 120, 122, 126, 132, 135, 137, 138, 139, 140, 141, 143, 144, 146, 149, 151, 153, 155, 158, 160, 161, 163, 166, 167, 169, 170, 176, 177, 179, 183, 184, 186, 188, 189, 190, 191, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 218, 221, 225, 226, 228, 230, 232, 234, 235, 242, 243, 244, 245, 248, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 275, 276, 278, 281, 282, 283, 284, 287, 288, 292, 293, 295, 297, 299, 301, 302, 304, 305, 308, 311, 312, 313, 314, 315, 318, 319, 320, 322, 325, 328, 330, 331, 332, 333, 335, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 352, 353, 356, 358, 361, 362, 364, 365, 366, 368, 369, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 388, 389, 390, 394, 395, 397, 399, 400, 402, 403, 405, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 443, 445, 449, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 482, 483, 484], "like": [5, 7, 13, 23, 25, 28, 31, 33, 34, 42, 43, 45, 49, 51, 55, 56, 58, 60, 61, 63, 64, 66, 68, 73, 74, 75, 76, 77, 79, 84, 85, 87, 92, 93, 94, 95, 96, 99, 100, 101, 103, 106, 109, 110, 112, 117, 120, 121, 126, 129, 133, 136, 139, 141, 143, 144, 146, 149, 151, 152, 153, 155, 158, 159, 160, 161, 163, 167, 169, 175, 176, 177, 181, 182, 183, 184, 186, 190, 191, 193, 196, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 213, 214, 215, 218, 225, 226, 228, 229, 230, 231, 233, 234, 235, 237, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 283, 292, 293, 294, 295, 297, 299, 301, 304, 307, 308, 309, 310, 311, 313, 314, 319, 321, 324, 328, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 349, 352, 353, 355, 358, 359, 360, 361, 362, 365, 366, 369, 375, 376, 378, 381, 382, 383, 384, 385, 386, 388, 390, 394, 395, 397, 400, 401, 402, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 442, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "char": [5, 7, 8, 9, 10, 11, 13, 14, 17, 18, 22, 23, 24, 25, 26, 30, 31, 33, 34, 35, 39, 40, 41, 42, 43, 45, 48, 49, 51, 53, 54, 58, 59, 60, 61, 63, 64, 66, 72, 73, 75, 76, 79, 96, 98, 121, 146, 158, 176, 177, 202, 247, 262, 282, 344, 345, 347, 367, 369, 386, 413, 428, 440, 465, 467, 468, 469, 472, 477, 480, 481, 483], "pointer": [5, 7, 9, 11, 13, 17, 18, 23, 31, 33, 39, 42, 43, 45, 49, 54, 55, 58, 59, 60, 61, 63, 64, 68, 72, 75, 76, 78, 79, 85, 87, 96, 100, 104, 117, 118, 142, 177, 179, 242, 278, 283, 293, 299, 303, 308, 349, 352, 430, 440, 464, 466, 467, 468, 469, 474, 475, 477, 479, 480, 483], "its": [5, 7, 9, 11, 22, 23, 25, 28, 31, 33, 34, 39, 42, 43, 45, 47, 49, 55, 56, 58, 60, 61, 63, 64, 66, 72, 73, 75, 76, 79, 84, 85, 92, 93, 94, 95, 96, 100, 101, 102, 103, 105, 106, 109, 110, 112, 115, 120, 126, 133, 135, 136, 137, 139, 143, 144, 149, 151, 152, 155, 158, 163, 166, 167, 169, 170, 176, 177, 178, 181, 183, 184, 186, 188, 191, 193, 194, 195, 196, 197, 198, 199, 202, 203, 205, 206, 207, 208, 209, 213, 214, 218, 223, 225, 226, 228, 230, 235, 236, 242, 243, 245, 247, 248, 250, 251, 252, 253, 255, 258, 261, 262, 265, 267, 268, 269, 271, 275, 276, 278, 279, 283, 292, 293, 295, 297, 299, 301, 302, 304, 305, 307, 308, 309, 311, 313, 314, 315, 319, 320, 321, 322, 323, 324, 328, 329, 331, 332, 333, 334, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 355, 358, 360, 362, 364, 365, 366, 369, 375, 376, 378, 380, 381, 384, 385, 386, 387, 388, 389, 390, 394, 395, 399, 400, 402, 403, 405, 406, 410, 411, 412, 413, 415, 416, 417, 419, 420, 421, 422, 426, 427, 428, 429, 430, 432, 434, 435, 436, 440, 443, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "borrow": [5, 22, 27, 58, 63, 67, 73, 75, 87, 95, 212, 340, 464, 465, 466, 483], "manag": [5, 17, 28, 33, 42, 61, 63, 68, 74, 76, 87, 96, 101, 110, 120, 124, 126, 128, 137, 139, 144, 151, 158, 164, 176, 184, 186, 188, 191, 194, 203, 218, 225, 243, 245, 247, 250, 252, 254, 256, 267, 271, 278, 284, 285, 293, 295, 298, 299, 308, 315, 328, 329, 330, 337, 338, 341, 348, 352, 355, 358, 359, 360, 362, 365, 368, 374, 376, 384, 388, 390, 395, 402, 403, 419, 421, 422, 426, 427, 434, 459, 460, 461, 462, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "by": [5, 7, 13, 15, 22, 23, 25, 26, 27, 28, 30, 31, 33, 34, 35, 37, 39, 41, 42, 43, 45, 47, 49, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 79, 84, 87, 89, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 112, 114, 115, 117, 118, 120, 126, 128, 132, 133, 135, 137, 138, 139, 140, 141, 143, 144, 146, 149, 151, 152, 155, 157, 158, 159, 160, 161, 163, 167, 169, 170, 173, 177, 178, 179, 181, 183, 184, 186, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 218, 220, 221, 223, 225, 226, 228, 230, 234, 235, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 280, 281, 282, 283, 284, 288, 292, 293, 295, 297, 299, 301, 302, 303, 304, 305, 307, 308, 311, 312, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 364, 365, 366, 369, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 394, 397, 398, 399, 400, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 441, 443, 449, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483], "share": [5, 7, 33, 35, 41, 42, 45, 58, 63, 64, 68, 71, 73, 76, 77, 79, 84, 94, 98, 100, 102, 104, 107, 115, 118, 120, 133, 138, 164, 181, 183, 186, 212, 215, 226, 230, 235, 259, 261, 266, 267, 278, 284, 292, 293, 294, 296, 299, 311, 322, 326, 330, 337, 338, 340, 342, 344, 345, 352, 354, 358, 365, 366, 369, 375, 388, 426, 427, 428, 430, 432, 440, 455, 456, 461, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 477, 479, 480, 481, 483, 484], "lifetim": [5, 42, 68, 73, 85, 158, 169, 293, 405, 430, 463, 476, 479, 480, 483], "won": [5, 33, 34, 41, 63, 73, 75, 76, 85, 92, 94, 95, 99, 101, 102, 106, 109, 133, 139, 151, 167, 183, 184, 186, 193, 206, 225, 230, 243, 267, 269, 292, 293, 297, 299, 329, 337, 347, 352, 369, 389, 416, 455, 463, 464, 466, 467, 468, 469, 470, 471, 475, 478, 480, 483], "releas": [5, 7, 9, 28, 34, 35, 36, 42, 45, 57, 58, 61, 63, 64, 68, 72, 73, 75, 76, 77, 80, 84, 85, 87, 93, 96, 102, 103, 110, 115, 126, 132, 135, 138, 139, 147, 169, 176, 177, 191, 215, 234, 235, 236, 255, 267, 271, 283, 284, 293, 299, 303, 314, 333, 337, 340, 344, 352, 362, 365, 369, 371, 382, 384, 386, 400, 413, 422, 426, 428, 436, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 484], "yourself": [5, 33, 43, 72, 85, 92, 94, 106, 109, 155, 177, 179, 193, 201, 250, 262, 266, 268, 269, 292, 297, 328, 335, 341, 352, 388, 410, 461, 467, 470, 475], "ensur": [5, 33, 34, 42, 45, 49, 51, 58, 59, 63, 66, 68, 73, 76, 79, 84, 92, 99, 100, 101, 102, 103, 106, 120, 126, 132, 133, 137, 143, 158, 166, 169, 176, 181, 183, 186, 193, 196, 205, 226, 255, 262, 267, 269, 270, 278, 283, 292, 293, 299, 324, 337, 340, 341, 344, 348, 352, 361, 362, 364, 369, 382, 386, 388, 390, 400, 402, 405, 413, 419, 421, 422, 428, 430, 455, 456, 461, 462, 465, 467, 468, 469, 475, 476, 477, 478, 479, 480, 481, 482, 483], "may": [5, 7, 9, 10, 11, 13, 22, 23, 24, 27, 28, 31, 33, 34, 42, 43, 45, 49, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 72, 73, 75, 76, 77, 78, 79, 84, 85, 87, 92, 93, 94, 95, 96, 99, 100, 101, 102, 105, 106, 109, 110, 112, 115, 117, 120, 122, 126, 128, 132, 133, 138, 139, 140, 141, 143, 144, 146, 149, 150, 151, 155, 157, 158, 159, 161, 163, 167, 169, 173, 176, 177, 181, 183, 184, 186, 190, 191, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 213, 215, 216, 218, 221, 223, 225, 226, 228, 230, 231, 233, 234, 235, 242, 243, 245, 247, 248, 250, 251, 252, 253, 255, 257, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 275, 276, 278, 279, 281, 282, 283, 287, 288, 292, 293, 295, 297, 299, 301, 302, 305, 307, 311, 312, 313, 314, 319, 320, 321, 322, 324, 325, 326, 328, 329, 330, 331, 332, 333, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 354, 355, 356, 358, 359, 362, 364, 365, 366, 369, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 390, 394, 395, 397, 399, 400, 402, 403, 405, 406, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 442, 443, 446, 453, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "safe": [5, 22, 23, 33, 34, 42, 45, 49, 51, 56, 59, 63, 64, 68, 72, 73, 75, 76, 85, 96, 102, 125, 126, 129, 130, 132, 133, 134, 137, 138, 139, 143, 151, 160, 169, 176, 177, 181, 193, 214, 235, 247, 250, 258, 266, 267, 268, 270, 271, 283, 293, 299, 312, 324, 325, 328, 330, 331, 332, 334, 337, 340, 341, 348, 362, 365, 386, 390, 394, 398, 400, 402, 415, 461, 462, 463, 465, 468, 469, 474, 475, 476, 480, 481, 483], "pybufferproc": [5, 61, 63, 75], "bf_releasebuff": [5, 61, 63, 473], "must": [5, 7, 9, 11, 13, 17, 18, 22, 23, 27, 28, 31, 33, 34, 35, 39, 41, 42, 43, 45, 47, 49, 56, 58, 59, 60, 61, 63, 64, 66, 71, 73, 75, 76, 77, 79, 84, 85, 92, 93, 94, 95, 96, 99, 100, 106, 110, 112, 115, 117, 120, 122, 126, 132, 133, 139, 140, 143, 144, 146, 149, 151, 155, 158, 161, 167, 169, 173, 176, 177, 181, 183, 186, 188, 189, 190, 191, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 213, 214, 218, 223, 225, 226, 228, 230, 232, 234, 235, 242, 243, 245, 247, 248, 250, 255, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 281, 282, 283, 288, 291, 292, 293, 295, 297, 299, 301, 302, 304, 308, 314, 319, 320, 322, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 352, 353, 355, 356, 358, 359, 361, 362, 365, 366, 369, 371, 375, 376, 378, 380, 382, 384, 386, 388, 389, 394, 395, 397, 400, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 442, 443, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483], "disallow": [5, 33, 63, 94, 120, 122, 167, 181, 272, 293, 337, 340, 344, 423, 427, 461, 468, 474, 477, 480, 481, 483], "common": [5, 7, 23, 33, 34, 58, 63, 68, 73, 76, 84, 85, 92, 93, 94, 95, 96, 99, 100, 101, 102, 108, 109, 110, 115, 120, 128, 139, 158, 160, 167, 169, 176, 181, 183, 190, 193, 195, 200, 201, 203, 205, 207, 208, 215, 216, 235, 242, 243, 245, 247, 251, 259, 261, 262, 265, 267, 271, 272, 275, 276, 283, 292, 293, 295, 299, 307, 331, 332, 333, 335, 338, 340, 341, 346, 347, 348, 354, 358, 361, 362, 364, 365, 366, 369, 375, 384, 386, 388, 394, 395, 399, 400, 408, 417, 419, 421, 422, 425, 426, 427, 428, 430, 431, 432, 435, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 473, 475, 476, 477, 478, 480, 481, 482, 483, 484], "bytearray": [5, 7, 8, 33, 34, 64, 68, 78, 85, 87, 121, 133, 145, 146, 161, 176, 182, 191, 213, 215, 225, 235, 237, 254, 258, 261, 262, 274, 278, 284, 299, 304, 318, 337, 341, 347, 386, 394, 400, 419, 424, 427, 428, 430, 450, 455, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483], "but": [5, 7, 9, 13, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 39, 40, 42, 45, 47, 49, 54, 55, 58, 59, 60, 61, 63, 64, 66, 67, 72, 73, 75, 76, 77, 78, 79, 84, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 109, 110, 112, 115, 120, 126, 128, 132, 133, 137, 139, 141, 143, 144, 146, 151, 152, 155, 158, 159, 161, 167, 169, 176, 177, 181, 183, 184, 186, 188, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 213, 215, 216, 218, 220, 221, 225, 228, 230, 235, 242, 243, 244, 245, 247, 248, 250, 251, 252, 255, 257, 258, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 282, 283, 288, 289, 292, 293, 295, 297, 299, 301, 304, 308, 309, 311, 312, 313, 314, 319, 320, 321, 322, 323, 328, 329, 330, 331, 332, 333, 335, 337, 338, 340, 341, 342, 344, 345, 347, 348, 352, 353, 355, 358, 360, 362, 364, 365, 366, 369, 375, 376, 377, 378, 381, 384, 385, 386, 387, 388, 389, 390, 394, 395, 397, 400, 402, 403, 405, 408, 410, 411, 413, 414, 415, 416, 417, 419, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 441, 442, 443, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "also": [5, 7, 11, 13, 23, 26, 28, 30, 31, 33, 34, 40, 42, 45, 49, 54, 55, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 79, 80, 84, 85, 87, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 105, 106, 109, 110, 112, 115, 120, 126, 132, 133, 137, 139, 140, 141, 144, 146, 149, 151, 152, 153, 155, 157, 158, 160, 161, 163, 167, 169, 173, 176, 177, 181, 183, 184, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 213, 214, 215, 216, 218, 220, 221, 225, 226, 228, 230, 233, 234, 235, 241, 242, 243, 244, 245, 247, 248, 250, 251, 253, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 275, 276, 278, 279, 281, 283, 288, 292, 293, 295, 297, 299, 302, 303, 305, 308, 309, 311, 313, 314, 319, 321, 322, 324, 325, 328, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 352, 353, 355, 358, 361, 362, 364, 365, 366, 369, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 390, 394, 395, 397, 399, 400, 402, 403, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 432, 434, 435, 436, 449, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "some": [5, 7, 23, 28, 33, 34, 42, 58, 59, 60, 61, 63, 64, 68, 72, 73, 75, 76, 84, 85, 87, 92, 94, 95, 96, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 112, 114, 115, 120, 126, 132, 133, 137, 138, 139, 141, 149, 151, 155, 157, 158, 161, 163, 167, 169, 175, 176, 177, 180, 181, 183, 184, 186, 188, 190, 191, 193, 194, 195, 196, 198, 199, 203, 204, 205, 206, 207, 208, 209, 215, 216, 218, 221, 225, 226, 230, 234, 235, 240, 243, 244, 247, 248, 250, 251, 253, 255, 257, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 282, 283, 288, 292, 293, 295, 296, 297, 299, 302, 307, 308, 311, 314, 319, 322, 328, 329, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 344, 345, 347, 348, 352, 353, 354, 355, 356, 358, 359, 360, 362, 364, 365, 366, 369, 376, 377, 381, 382, 384, 385, 386, 388, 389, 390, 394, 395, 399, 400, 402, 403, 410, 411, 412, 413, 414, 415, 416, 419, 422, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 441, 443, 449, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "memoryview": [5, 7, 16, 68, 87, 112, 145, 225, 254, 284, 299, 332, 337, 352, 386, 427, 428, 450, 470, 474, 475, 477, 478, 481, 483, 484], "besid": [5, 76, 93, 94, 183, 225, 333, 376, 402, 435, 461, 483], "requir": [5, 7, 23, 28, 33, 35, 42, 45, 51, 58, 59, 63, 64, 68, 71, 72, 73, 75, 76, 79, 84, 85, 89, 92, 93, 94, 95, 100, 101, 102, 106, 108, 109, 110, 112, 115, 118, 126, 132, 138, 139, 149, 157, 158, 161, 167, 169, 170, 177, 181, 183, 184, 186, 189, 191, 193, 194, 195, 196, 200, 201, 202, 203, 207, 208, 212, 213, 221, 226, 228, 234, 235, 243, 245, 247, 248, 250, 252, 253, 255, 257, 258, 261, 262, 265, 266, 267, 268, 269, 270, 271, 275, 280, 281, 283, 288, 292, 293, 295, 299, 301, 305, 307, 308, 314, 319, 322, 328, 330, 332, 333, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 353, 356, 358, 361, 362, 365, 366, 369, 375, 376, 378, 381, 384, 385, 386, 387, 388, 389, 394, 395, 397, 399, 402, 405, 410, 413, 414, 415, 416, 417, 419, 421, 422, 425, 426, 427, 428, 430, 431, 432, 435, 436, 441, 453, 455, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "no": [5, 7, 11, 13, 17, 18, 22, 23, 24, 26, 27, 31, 33, 34, 35, 37, 39, 41, 42, 45, 46, 49, 51, 53, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 75, 76, 77, 79, 84, 85, 92, 93, 94, 95, 100, 102, 103, 104, 105, 106, 108, 109, 110, 112, 115, 117, 120, 122, 126, 132, 133, 137, 138, 139, 141, 144, 146, 151, 153, 155, 158, 161, 163, 167, 169, 170, 173, 176, 177, 181, 183, 184, 186, 190, 191, 193, 195, 196, 197, 199, 200, 201, 203, 205, 207, 208, 209, 212, 213, 214, 216, 218, 225, 226, 228, 230, 234, 242, 243, 244, 245, 247, 248, 250, 251, 253, 255, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 283, 284, 288, 292, 293, 295, 297, 299, 301, 302, 305, 307, 308, 309, 311, 313, 314, 318, 319, 320, 321, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 344, 345, 346, 347, 348, 352, 353, 354, 355, 356, 358, 359, 361, 362, 364, 365, 366, 369, 371, 373, 375, 376, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 394, 395, 399, 400, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 441, 443, 444, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483], "check": [5, 7, 9, 17, 23, 25, 31, 33, 34, 41, 42, 43, 45, 49, 51, 54, 55, 58, 59, 60, 61, 63, 64, 67, 68, 72, 73, 75, 76, 84, 92, 94, 95, 98, 100, 101, 102, 106, 109, 120, 126, 128, 139, 143, 144, 149, 151, 155, 160, 161, 163, 167, 169, 173, 176, 177, 178, 181, 183, 186, 187, 188, 191, 197, 200, 205, 208, 211, 213, 214, 215, 221, 226, 233, 242, 243, 245, 247, 248, 255, 259, 262, 265, 267, 268, 269, 270, 272, 275, 280, 283, 287, 288, 289, 293, 295, 302, 303, 305, 314, 320, 322, 328, 331, 332, 333, 334, 335, 337, 340, 341, 342, 343, 344, 345, 347, 348, 352, 357, 358, 362, 363, 365, 375, 376, 378, 382, 384, 385, 386, 388, 389, 390, 395, 399, 400, 402, 413, 416, 419, 422, 424, 427, 430, 431, 432, 436, 446, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484], "verifi": [5, 7, 75, 85, 93, 95, 103, 161, 187, 193, 211, 235, 243, 250, 268, 269, 271, 293, 335, 340, 341, 362, 388, 400, 461, 468, 469, 473, 474, 475, 476, 477, 481, 483], "whether": [5, 7, 9, 11, 13, 17, 23, 31, 45, 58, 59, 63, 64, 73, 79, 85, 92, 93, 95, 99, 100, 101, 106, 109, 115, 120, 133, 139, 143, 144, 149, 151, 152, 155, 157, 158, 159, 161, 167, 169, 176, 177, 181, 183, 186, 189, 191, 193, 196, 202, 207, 208, 220, 225, 230, 234, 235, 243, 244, 247, 250, 255, 258, 259, 261, 266, 268, 269, 271, 272, 275, 276, 283, 292, 293, 295, 297, 299, 302, 307, 308, 311, 314, 319, 324, 328, 332, 333, 334, 335, 337, 338, 340, 341, 344, 346, 347, 348, 352, 358, 362, 365, 366, 369, 376, 380, 384, 386, 387, 388, 394, 395, 400, 402, 405, 410, 415, 420, 421, 422, 426, 427, 428, 429, 430, 432, 436, 455, 456, 461, 464, 465, 466, 467, 468, 469, 474, 475, 476, 477, 478, 479, 480, 481, 483], "input": [5, 9, 30, 34, 63, 64, 66, 68, 73, 75, 79, 84, 85, 93, 95, 99, 101, 108, 109, 110, 112, 114, 118, 120, 133, 137, 141, 142, 143, 146, 149, 151, 155, 157, 158, 159, 160, 167, 169, 173, 176, 183, 186, 190, 191, 193, 194, 195, 196, 197, 200, 201, 203, 207, 208, 209, 213, 219, 221, 222, 225, 229, 234, 235, 244, 245, 247, 254, 258, 261, 262, 264, 267, 269, 270, 271, 275, 283, 292, 293, 295, 297, 301, 302, 307, 309, 311, 314, 317, 319, 320, 322, 328, 331, 335, 337, 340, 341, 343, 344, 348, 352, 354, 359, 361, 362, 364, 366, 368, 369, 375, 376, 377, 381, 383, 394, 395, 397, 407, 408, 411, 412, 413, 414, 415, 416, 417, 421, 427, 428, 429, 430, 431, 432, 434, 435, 441, 443, 450, 452, 455, 456, 462, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 483], "immut": [5, 9, 10, 28, 33, 35, 60, 63, 64, 68, 85, 87, 93, 100, 122, 161, 175, 176, 181, 183, 186, 208, 221, 225, 226, 255, 267, 291, 293, 296, 427, 430, 442, 449, 462, 465, 466, 467, 468, 469, 470, 474, 481, 482, 483], "would": [5, 7, 23, 31, 33, 34, 47, 49, 58, 59, 61, 64, 72, 73, 75, 76, 77, 79, 84, 85, 92, 93, 94, 95, 100, 101, 102, 103, 106, 109, 112, 120, 126, 138, 139, 151, 158, 161, 167, 169, 170, 176, 177, 181, 183, 184, 186, 188, 190, 193, 196, 199, 200, 202, 203, 205, 207, 208, 212, 213, 225, 226, 228, 230, 234, 235, 242, 243, 245, 247, 250, 253, 255, 258, 262, 267, 268, 269, 272, 275, 276, 283, 292, 293, 305, 307, 308, 313, 319, 320, 322, 330, 331, 332, 333, 337, 338, 340, 341, 342, 343, 344, 345, 346, 348, 352, 353, 355, 356, 358, 362, 365, 369, 376, 381, 382, 384, 386, 387, 388, 390, 394, 395, 400, 402, 403, 405, 408, 410, 412, 413, 421, 422, 423, 425, 426, 427, 428, 430, 432, 434, 435, 436, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 480, 481, 482, 483], "honor": [5, 115, 251, 297, 352, 358, 420, 468, 469, 479, 483], "writabl": [5, 7, 43, 84, 96, 120, 133, 149, 151, 248, 255, 258, 278, 283, 293, 295, 304, 332, 337, 338, 344, 347, 369, 402, 422, 428, 432, 436, 466, 468, 476, 478, 479, 480, 483], "anoth": [5, 7, 22, 23, 31, 33, 42, 58, 63, 64, 72, 73, 75, 76, 77, 84, 92, 93, 94, 95, 100, 101, 102, 106, 108, 109, 110, 112, 115, 120, 125, 126, 132, 133, 139, 144, 151, 155, 158, 163, 167, 169, 173, 176, 177, 181, 183, 186, 193, 194, 196, 203, 213, 215, 221, 225, 226, 230, 235, 243, 245, 247, 250, 255, 261, 262, 267, 268, 270, 271, 278, 283, 287, 288, 292, 293, 297, 299, 301, 308, 309, 311, 314, 319, 328, 332, 333, 338, 340, 341, 344, 347, 348, 352, 353, 354, 355, 365, 369, 375, 376, 378, 380, 384, 386, 388, 389, 394, 395, 399, 402, 405, 408, 410, 411, 413, 414, 422, 425, 427, 428, 429, 430, 432, 436, 443, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 475, 476, 478, 479, 481, 482, 483], "thread": [5, 17, 23, 31, 32, 34, 35, 42, 51, 53, 59, 63, 68, 73, 76, 79, 85, 87, 96, 100, 101, 103, 107, 118, 124, 125, 129, 130, 132, 133, 134, 135, 137, 138, 140, 149, 160, 164, 166, 169, 170, 176, 187, 190, 214, 226, 232, 245, 247, 248, 254, 257, 266, 268, 269, 270, 271, 283, 290, 293, 316, 321, 322, 324, 325, 332, 338, 340, 341, 344, 348, 352, 366, 368, 386, 395, 399, 400, 402, 428, 445, 455, 456, 462, 464, 465, 466, 467, 468, 469, 470, 479, 482, 483, 484], "mutat": [5, 22, 63, 85, 100, 167, 181, 196, 226, 250, 258, 283, 330, 344, 386, 400, 464, 466, 477, 483], "variant": [5, 22, 31, 41, 47, 63, 73, 84, 93, 95, 102, 106, 109, 120, 126, 158, 160, 167, 177, 183, 184, 186, 191, 203, 225, 226, 245, 248, 282, 283, 293, 303, 332, 337, 340, 341, 358, 388, 390, 395, 398, 416, 428, 432, 467, 468, 469, 470, 474, 477, 480, 481, 482, 483], "etc": [5, 34, 64, 79, 84, 85, 94, 95, 101, 102, 109, 110, 120, 133, 141, 146, 151, 155, 206, 225, 243, 244, 247, 252, 255, 259, 266, 267, 269, 272, 276, 281, 283, 292, 293, 296, 303, 307, 308, 310, 311, 319, 329, 334, 337, 340, 341, 358, 365, 366, 369, 375, 384, 386, 388, 394, 410, 422, 428, 431, 436, 451, 456, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 481, 482, 483], "py_ssize_t_clean": [5, 35, 59, 72, 73, 76, 467, 472, 481, 483], "defin": [5, 7, 11, 23, 25, 28, 33, 34, 35, 42, 43, 45, 50, 59, 61, 63, 64, 68, 71, 72, 73, 74, 77, 79, 84, 87, 92, 93, 94, 95, 101, 102, 106, 109, 110, 114, 115, 118, 120, 125, 126, 132, 133, 140, 141, 143, 144, 146, 151, 153, 155, 158, 161, 167, 169, 173, 176, 177, 179, 181, 183, 186, 189, 191, 193, 194, 196, 199, 203, 205, 208, 212, 213, 215, 216, 225, 226, 230, 233, 235, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 255, 258, 259, 262, 265, 266, 267, 269, 271, 275, 276, 283, 287, 288, 290, 293, 295, 297, 299, 301, 302, 304, 305, 307, 309, 312, 314, 319, 320, 322, 323, 324, 325, 328, 329, 331, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 355, 356, 358, 361, 362, 365, 366, 369, 375, 376, 377, 380, 381, 384, 385, 386, 387, 388, 389, 390, 394, 395, 397, 400, 402, 403, 405, 408, 410, 411, 413, 414, 415, 419, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 434, 435, 436, 440, 441, 443, 449, 450, 455, 456, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484], "befor": [5, 7, 13, 17, 22, 23, 27, 28, 31, 32, 34, 42, 45, 51, 55, 56, 58, 59, 60, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 79, 85, 87, 92, 93, 94, 95, 100, 101, 102, 103, 106, 109, 110, 115, 117, 120, 126, 128, 132, 133, 135, 136, 137, 139, 140, 141, 143, 149, 151, 153, 155, 157, 158, 159, 167, 169, 170, 176, 177, 183, 184, 186, 190, 191, 193, 195, 196, 201, 203, 205, 213, 218, 223, 225, 226, 234, 242, 243, 245, 247, 248, 250, 255, 258, 259, 261, 266, 267, 268, 269, 270, 271, 276, 278, 283, 288, 292, 293, 295, 297, 299, 305, 307, 308, 309, 313, 314, 319, 320, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 352, 353, 355, 356, 358, 359, 362, 364, 365, 366, 375, 376, 382, 384, 385, 386, 388, 394, 395, 399, 400, 402, 405, 410, 411, 412, 413, 414, 415, 416, 420, 422, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 443, 446, 449, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "on": [5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 27, 28, 31, 32, 33, 34, 39, 40, 41, 43, 45, 47, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 73, 74, 75, 76, 79, 80, 85, 86, 89, 91, 92, 93, 94, 96, 100, 101, 102, 103, 106, 107, 108, 109, 110, 112, 115, 120, 122, 126, 132, 133, 136, 137, 138, 139, 140, 141, 144, 146, 153, 155, 157, 158, 161, 163, 164, 166, 167, 169, 170, 173, 176, 177, 178, 179, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 203, 205, 206, 207, 208, 209, 212, 213, 215, 220, 221, 224, 225, 228, 232, 233, 234, 235, 242, 243, 244, 245, 246, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 281, 282, 283, 284, 287, 288, 289, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 307, 308, 309, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 334, 335, 338, 339, 340, 342, 345, 346, 347, 352, 354, 355, 356, 358, 359, 361, 362, 364, 365, 366, 368, 369, 371, 375, 376, 378, 381, 382, 384, 385, 386, 387, 388, 390, 394, 395, 397, 398, 399, 400, 402, 403, 405, 406, 407, 410, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 441, 442, 446, 448, 449, 451, 455, 456, 459, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "older": [5, 33, 61, 63, 68, 73, 75, 78, 92, 96, 102, 119, 120, 164, 177, 186, 190, 202, 230, 235, 247, 251, 252, 268, 288, 293, 295, 297, 299, 314, 328, 340, 352, 354, 362, 369, 377, 386, 395, 415, 422, 430, 432, 462, 465, 468, 469, 475, 476, 477, 478, 479, 480, 481, 482, 483], "length": [5, 7, 9, 22, 23, 24, 34, 35, 49, 54, 55, 56, 58, 59, 60, 63, 64, 68, 73, 75, 79, 85, 92, 93, 94, 95, 96, 98, 100, 102, 109, 110, 117, 120, 121, 141, 142, 143, 146, 158, 174, 176, 177, 184, 186, 190, 191, 195, 196, 201, 202, 205, 207, 208, 215, 225, 242, 245, 248, 254, 259, 261, 262, 268, 269, 270, 271, 275, 278, 283, 292, 293, 308, 314, 319, 320, 328, 332, 335, 337, 340, 341, 345, 347, 352, 358, 361, 364, 365, 366, 376, 385, 386, 388, 393, 395, 400, 405, 408, 410, 415, 419, 422, 423, 424, 427, 428, 430, 435, 436, 455, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483], "int": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 79, 84, 87, 88, 89, 93, 94, 96, 98, 99, 100, 101, 102, 106, 112, 113, 114, 120, 121, 122, 126, 127, 139, 140, 155, 160, 166, 167, 170, 176, 181, 183, 184, 186, 190, 193, 211, 213, 221, 223, 225, 226, 236, 240, 248, 254, 255, 258, 259, 261, 262, 267, 275, 281, 284, 289, 291, 292, 293, 295, 299, 304, 306, 316, 318, 319, 326, 328, 337, 340, 343, 345, 347, 351, 352, 353, 358, 366, 367, 378, 379, 382, 384, 385, 386, 388, 389, 398, 402, 405, 407, 410, 411, 412, 413, 419, 427, 428, 429, 430, 440, 441, 443, 446, 449, 450, 451, 455, 456, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483], "exist": [5, 9, 22, 23, 25, 31, 33, 34, 39, 42, 55, 58, 59, 63, 64, 66, 67, 68, 72, 73, 76, 79, 84, 85, 93, 94, 95, 99, 101, 102, 106, 109, 110, 112, 115, 117, 120, 126, 128, 136, 139, 144, 149, 151, 155, 158, 160, 161, 163, 167, 169, 176, 181, 183, 184, 189, 191, 193, 194, 196, 200, 205, 206, 208, 211, 212, 213, 215, 216, 218, 225, 226, 230, 234, 235, 236, 243, 244, 247, 248, 250, 251, 252, 253, 255, 257, 258, 259, 261, 267, 268, 269, 270, 271, 272, 276, 278, 281, 283, 284, 287, 288, 292, 293, 294, 295, 296, 297, 299, 302, 308, 313, 319, 320, 324, 330, 332, 333, 334, 337, 340, 341, 342, 343, 344, 345, 347, 348, 352, 354, 355, 358, 360, 362, 366, 369, 372, 375, 376, 384, 386, 387, 388, 394, 395, 397, 399, 400, 402, 403, 405, 407, 410, 413, 419, 421, 422, 423, 425, 427, 428, 429, 430, 432, 435, 436, 453, 455, 456, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "store": [5, 7, 11, 13, 25, 27, 28, 33, 34, 41, 42, 49, 56, 58, 61, 63, 64, 68, 73, 75, 76, 79, 84, 85, 93, 95, 100, 101, 102, 106, 109, 110, 117, 120, 122, 133, 134, 141, 158, 160, 167, 170, 173, 176, 177, 181, 183, 184, 186, 191, 193, 196, 197, 200, 201, 203, 205, 208, 243, 245, 247, 248, 250, 253, 255, 258, 261, 267, 270, 271, 272, 276, 278, 283, 284, 288, 293, 298, 299, 314, 328, 329, 330, 335, 337, 338, 340, 341, 342, 344, 347, 352, 355, 358, 362, 365, 375, 376, 380, 381, 382, 384, 385, 386, 388, 390, 395, 402, 405, 410, 413, 419, 421, 422, 425, 427, 428, 430, 431, 432, 435, 436, 443, 448, 455, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 479, 480, 481, 482, 483], "contain": [5, 7, 9, 13, 18, 22, 23, 25, 28, 31, 33, 34, 40, 41, 42, 49, 51, 54, 55, 58, 59, 60, 61, 63, 64, 68, 72, 73, 75, 76, 77, 78, 79, 84, 85, 92, 93, 94, 95, 96, 99, 100, 101, 102, 105, 106, 109, 110, 112, 117, 118, 126, 133, 139, 141, 143, 144, 146, 149, 151, 152, 157, 158, 159, 163, 167, 169, 170, 176, 177, 178, 181, 182, 183, 184, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 225, 226, 230, 231, 234, 235, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 266, 267, 268, 269, 270, 271, 272, 274, 276, 278, 279, 281, 283, 287, 288, 290, 291, 292, 293, 295, 297, 299, 302, 304, 305, 307, 308, 311, 312, 313, 314, 319, 322, 324, 328, 330, 332, 333, 334, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 354, 355, 358, 361, 362, 364, 365, 366, 369, 375, 376, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 394, 395, 397, 399, 400, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 432, 434, 435, 436, 440, 441, 442, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "embed": [5, 7, 9, 33, 35, 45, 57, 61, 64, 68, 73, 74, 79, 92, 93, 100, 106, 109, 128, 135, 163, 177, 199, 202, 259, 266, 280, 281, 293, 308, 344, 348, 366, 369, 375, 400, 415, 420, 421, 435, 451, 461, 463, 464, 467, 468, 469, 475, 477, 480, 481, 482, 483, 484], "code": [5, 7, 9, 11, 12, 13, 22, 23, 26, 27, 31, 34, 35, 39, 41, 42, 45, 48, 51, 55, 56, 59, 60, 63, 64, 66, 68, 72, 73, 75, 76, 77, 78, 79, 80, 84, 87, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 105, 106, 107, 112, 118, 121, 128, 130, 132, 133, 135, 137, 139, 141, 142, 143, 144, 146, 151, 152, 156, 158, 163, 167, 168, 169, 170, 175, 176, 177, 180, 181, 183, 184, 186, 187, 188, 190, 191, 193, 196, 202, 203, 205, 206, 208, 212, 213, 214, 215, 221, 225, 226, 228, 230, 235, 236, 241, 242, 243, 245, 248, 251, 254, 257, 259, 261, 262, 266, 267, 268, 269, 270, 271, 274, 278, 279, 280, 283, 287, 288, 292, 293, 295, 296, 297, 299, 302, 303, 308, 309, 311, 312, 313, 314, 315, 319, 320, 324, 325, 330, 331, 332, 333, 334, 335, 337, 340, 341, 346, 347, 348, 351, 352, 354, 356, 362, 364, 365, 366, 368, 369, 375, 376, 377, 378, 380, 381, 382, 385, 386, 390, 393, 394, 395, 397, 399, 402, 408, 410, 411, 413, 414, 415, 419, 420, 421, 422, 423, 426, 427, 429, 430, 431, 432, 434, 435, 436, 442, 443, 445, 448, 454, 455, 456, 458, 459, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 474, 477, 479, 480, 481, 483, 484], "point": [5, 7, 16, 17, 22, 23, 31, 33, 34, 39, 41, 42, 43, 45, 47, 55, 58, 60, 63, 64, 66, 68, 73, 77, 79, 84, 85, 87, 92, 93, 95, 100, 101, 102, 103, 106, 109, 115, 116, 126, 133, 137, 138, 139, 141, 144, 153, 158, 160, 162, 163, 167, 169, 170, 176, 177, 181, 183, 189, 190, 193, 196, 200, 202, 203, 205, 206, 209, 213, 221, 225, 232, 235, 247, 250, 254, 261, 262, 266, 267, 268, 269, 271, 274, 275, 278, 280, 281, 283, 290, 292, 293, 294, 296, 297, 299, 302, 308, 319, 322, 328, 331, 332, 333, 337, 340, 341, 343, 344, 345, 346, 347, 352, 354, 355, 358, 362, 365, 366, 369, 372, 376, 378, 381, 384, 386, 388, 395, 399, 403, 408, 411, 412, 413, 414, 421, 423, 425, 427, 428, 429, 430, 432, 436, 441, 442, 443, 444, 449, 456, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "doe": [5, 9, 13, 22, 23, 25, 26, 27, 28, 31, 33, 34, 42, 45, 49, 54, 55, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 77, 84, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 110, 115, 120, 126, 133, 139, 140, 143, 146, 149, 151, 153, 157, 158, 161, 163, 167, 169, 176, 177, 179, 181, 183, 184, 186, 188, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 205, 207, 208, 213, 220, 221, 225, 226, 228, 230, 234, 235, 242, 243, 244, 245, 247, 250, 251, 252, 253, 255, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 276, 278, 283, 288, 292, 293, 295, 297, 299, 301, 302, 308, 309, 311, 314, 319, 322, 328, 330, 331, 332, 333, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 352, 353, 354, 356, 358, 362, 364, 365, 366, 368, 376, 378, 380, 381, 382, 384, 385, 386, 388, 389, 394, 395, 399, 400, 402, 403, 405, 406, 410, 411, 412, 413, 414, 415, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 440, 442, 443, 449, 452, 455, 456, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "valueerror": [5, 9, 18, 23, 39, 41, 58, 64, 85, 93, 94, 99, 101, 102, 110, 114, 115, 120, 121, 122, 126, 134, 138, 143, 144, 147, 150, 151, 157, 158, 159, 160, 163, 166, 167, 173, 175, 176, 181, 183, 186, 193, 196, 197, 199, 203, 205, 208, 209, 210, 211, 213, 223, 225, 227, 232, 243, 248, 250, 255, 258, 259, 261, 262, 267, 268, 274, 275, 278, 283, 284, 288, 292, 293, 294, 296, 302, 305, 314, 316, 318, 322, 325, 329, 330, 332, 333, 335, 337, 340, 341, 343, 344, 345, 348, 351, 352, 353, 365, 366, 379, 387, 388, 389, 394, 395, 399, 408, 410, 422, 425, 427, 430, 441, 442, 443, 446, 450, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "rais": [5, 7, 9, 13, 22, 24, 25, 26, 28, 32, 33, 34, 37, 39, 45, 47, 49, 54, 55, 58, 59, 60, 61, 63, 64, 66, 67, 68, 73, 75, 76, 78, 92, 93, 94, 95, 99, 102, 103, 107, 109, 110, 112, 114, 115, 120, 122, 125, 126, 132, 133, 135, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 151, 153, 157, 158, 159, 160, 163, 167, 169, 170, 173, 175, 176, 177, 181, 183, 184, 186, 191, 193, 194, 196, 197, 198, 199, 200, 202, 203, 205, 206, 208, 209, 213, 215, 218, 221, 225, 226, 228, 230, 233, 234, 235, 236, 242, 243, 244, 245, 247, 248, 250, 252, 253, 255, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 278, 281, 282, 283, 287, 288, 291, 293, 295, 296, 297, 299, 302, 304, 305, 307, 311, 314, 319, 322, 323, 325, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 344, 345, 347, 348, 352, 353, 355, 356, 358, 359, 362, 365, 366, 369, 378, 381, 382, 384, 385, 386, 387, 388, 389, 390, 394, 395, 397, 399, 400, 402, 403, 405, 406, 407, 408, 410, 413, 414, 415, 416, 419, 422, 423, 425, 427, 428, 429, 430, 431, 432, 433, 435, 440, 441, 442, 443, 455, 456, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "utf": [5, 16, 22, 23, 26, 30, 31, 33, 34, 40, 45, 49, 59, 68, 87, 101, 102, 109, 118, 120, 122, 145, 151, 167, 175, 188, 190, 196, 197, 205, 206, 208, 209, 218, 223, 225, 235, 248, 250, 251, 252, 258, 262, 265, 266, 284, 286, 288, 297, 298, 299, 305, 307, 314, 330, 337, 338, 341, 344, 352, 358, 378, 394, 395, 398, 399, 407, 411, 413, 419, 421, 422, 428, 432, 435, 441, 446, 448, 455, 456, 458, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483], "encod": [5, 14, 16, 22, 23, 24, 26, 30, 31, 33, 34, 40, 45, 49, 58, 59, 66, 68, 71, 77, 84, 87, 92, 98, 101, 102, 106, 110, 120, 121, 126, 133, 136, 141, 143, 145, 146, 149, 150, 151, 153, 156, 167, 170, 175, 176, 177, 178, 184, 186, 188, 190, 191, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 213, 214, 218, 223, 225, 230, 234, 235, 242, 244, 248, 250, 251, 252, 253, 255, 256, 258, 265, 266, 267, 268, 269, 270, 276, 285, 293, 295, 296, 297, 298, 299, 304, 307, 309, 314, 317, 330, 335, 337, 341, 344, 347, 348, 349, 352, 356, 358, 359, 360, 362, 369, 377, 378, 386, 395, 397, 407, 408, 411, 413, 415, 416, 417, 419, 420, 421, 422, 428, 432, 445, 446, 455, 461, 462, 463, 464, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484], "convers": [5, 9, 18, 33, 34, 63, 64, 68, 72, 92, 93, 118, 120, 122, 133, 143, 146, 158, 167, 183, 186, 195, 225, 254, 256, 258, 262, 266, 271, 276, 290, 292, 293, 299, 337, 341, 345, 347, 348, 352, 358, 378, 385, 394, 397, 426, 427, 431, 433, 435, 450, 455, 461, 467, 468, 469, 470, 471, 472, 475, 477, 478, 480, 481, 482, 483, 484], "fail": [5, 7, 9, 11, 23, 24, 31, 33, 35, 41, 42, 45, 47, 56, 64, 68, 72, 73, 76, 79, 84, 85, 94, 102, 103, 106, 110, 120, 138, 139, 151, 153, 169, 176, 183, 188, 190, 193, 209, 213, 215, 244, 245, 247, 249, 250, 255, 257, 261, 262, 266, 268, 270, 271, 272, 278, 283, 292, 293, 295, 297, 302, 307, 319, 322, 328, 330, 332, 333, 334, 335, 336, 337, 340, 341, 344, 345, 348, 352, 358, 362, 365, 369, 382, 386, 388, 395, 405, 408, 413, 416, 419, 422, 425, 427, 428, 429, 431, 432, 436, 443, 455, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 481, 483], "unicodeerror": [5, 23, 87, 158, 183, 202, 213, 293, 344, 450, 465, 470], "accept": [5, 23, 28, 31, 33, 58, 61, 64, 66, 67, 68, 73, 75, 76, 79, 85, 89, 92, 95, 99, 102, 106, 107, 109, 110, 117, 120, 126, 133, 137, 139, 141, 143, 146, 149, 151, 155, 158, 163, 167, 169, 173, 176, 177, 178, 181, 183, 184, 186, 190, 191, 193, 201, 205, 206, 208, 209, 213, 215, 221, 225, 226, 228, 234, 235, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 253, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 278, 282, 283, 292, 293, 295, 299, 314, 319, 324, 328, 329, 330, 332, 333, 335, 338, 340, 341, 344, 348, 352, 358, 362, 364, 366, 375, 376, 378, 380, 382, 385, 386, 388, 394, 395, 397, 403, 405, 407, 411, 413, 416, 419, 421, 422, 426, 427, 428, 430, 432, 435, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "want": [5, 7, 23, 25, 33, 34, 56, 63, 72, 73, 75, 76, 77, 79, 84, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 109, 110, 115, 120, 126, 132, 136, 141, 143, 144, 151, 152, 155, 157, 159, 167, 169, 176, 177, 180, 183, 190, 193, 196, 200, 201, 202, 205, 208, 215, 218, 225, 226, 228, 230, 235, 242, 243, 245, 247, 248, 250, 251, 255, 261, 266, 267, 268, 269, 272, 276, 278, 283, 292, 293, 297, 299, 302, 307, 308, 313, 314, 319, 328, 329, 332, 333, 335, 337, 338, 340, 341, 344, 345, 348, 352, 355, 358, 364, 365, 369, 381, 384, 386, 388, 390, 394, 395, 400, 402, 413, 421, 422, 425, 426, 428, 429, 432, 441, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 479, 481, 482, 483], "filesystem": [5, 23, 33, 34, 59, 64, 66, 68, 87, 109, 120, 126, 143, 167, 213, 215, 216, 250, 266, 271, 283, 293, 296, 297, 302, 324, 332, 341, 352, 355, 358, 362, 388, 389, 399, 400, 421, 422, 455, 461, 463, 469, 474, 477, 480, 483], "path": [5, 23, 24, 31, 32, 33, 35, 39, 59, 64, 68, 72, 73, 76, 84, 85, 87, 93, 95, 96, 98, 100, 101, 102, 109, 111, 114, 119, 120, 126, 136, 139, 142, 144, 148, 149, 151, 163, 167, 169, 176, 184, 190, 193, 200, 210, 213, 215, 219, 220, 223, 225, 230, 231, 234, 242, 243, 244, 245, 247, 249, 251, 252, 253, 254, 255, 258, 261, 265, 266, 267, 268, 269, 270, 271, 276, 279, 280, 281, 283, 286, 288, 292, 293, 296, 297, 302, 308, 311, 312, 313, 315, 320, 324, 327, 330, 331, 332, 334, 335, 337, 340, 341, 342, 348, 352, 356, 358, 360, 362, 366, 369, 384, 386, 388, 389, 394, 395, 399, 400, 403, 405, 407, 413, 416, 419, 420, 421, 423, 425, 428, 433, 436, 438, 440, 450, 452, 453, 455, 456, 458, 460, 462, 464, 465, 466, 467, 468, 469, 471, 473, 475, 476, 477, 478, 480, 482, 483], "them": [5, 7, 22, 23, 33, 34, 45, 59, 63, 64, 66, 68, 71, 73, 76, 77, 84, 85, 91, 92, 94, 95, 96, 99, 100, 101, 106, 109, 110, 112, 120, 126, 128, 134, 139, 151, 155, 158, 159, 161, 163, 167, 169, 170, 176, 177, 181, 183, 184, 186, 188, 191, 193, 195, 196, 201, 206, 208, 214, 216, 225, 226, 230, 235, 243, 244, 247, 248, 250, 251, 255, 258, 266, 267, 268, 269, 271, 283, 288, 292, 293, 295, 299, 307, 308, 319, 322, 324, 328, 330, 335, 337, 340, 341, 342, 344, 347, 348, 352, 353, 355, 358, 359, 362, 364, 365, 369, 375, 376, 382, 384, 386, 388, 390, 400, 405, 410, 411, 412, 413, 422, 427, 428, 430, 431, 432, 434, 436, 449, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "prefer": [5, 22, 23, 28, 31, 34, 43, 49, 61, 63, 68, 85, 94, 95, 102, 110, 120, 126, 139, 161, 167, 177, 183, 186, 202, 205, 213, 225, 250, 255, 258, 261, 266, 267, 271, 283, 292, 293, 299, 313, 332, 340, 341, 343, 344, 348, 352, 355, 362, 364, 365, 366, 368, 376, 384, 385, 386, 403, 405, 416, 421, 426, 432, 456, 461, 467, 469, 474, 475, 476, 478, 479, 480, 481, 483], "pyunicode_fsconvert": [5, 57, 64, 479, 483], "previous": [5, 7, 9, 11, 13, 17, 22, 23, 26, 27, 28, 33, 40, 42, 47, 58, 59, 61, 63, 64, 72, 73, 75, 76, 79, 84, 85, 92, 95, 101, 102, 103, 106, 109, 120, 126, 132, 133, 139, 140, 144, 149, 151, 158, 167, 169, 170, 173, 176, 177, 181, 183, 186, 190, 191, 193, 207, 208, 213, 214, 216, 221, 226, 230, 242, 245, 247, 250, 253, 255, 258, 261, 265, 267, 269, 270, 271, 276, 278, 282, 283, 284, 292, 293, 297, 299, 311, 314, 319, 329, 330, 331, 333, 335, 337, 340, 341, 344, 347, 352, 355, 356, 358, 362, 364, 365, 366, 375, 376, 380, 382, 384, 385, 386, 388, 390, 394, 395, 400, 405, 410, 413, 420, 422, 423, 426, 427, 428, 429, 432, 436, 446, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "typeerror": [5, 9, 22, 23, 39, 41, 47, 48, 49, 54, 55, 58, 59, 61, 63, 64, 67, 73, 75, 76, 85, 89, 93, 94, 95, 99, 103, 109, 110, 120, 121, 122, 129, 143, 167, 168, 169, 172, 176, 181, 183, 184, 186, 193, 196, 197, 198, 199, 205, 206, 211, 213, 225, 233, 250, 255, 258, 259, 262, 268, 274, 275, 278, 291, 292, 293, 296, 304, 318, 344, 352, 366, 386, 388, 389, 394, 398, 402, 411, 413, 419, 422, 427, 428, 430, 436, 441, 442, 443, 449, 450, 451, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483], "was": [5, 7, 9, 11, 13, 17, 22, 23, 26, 27, 31, 33, 42, 45, 49, 54, 56, 58, 59, 60, 61, 63, 64, 66, 73, 75, 76, 77, 85, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 105, 106, 109, 110, 112, 115, 117, 120, 125, 126, 132, 133, 137, 139, 140, 141, 143, 144, 149, 151, 152, 155, 157, 158, 161, 163, 167, 169, 170, 177, 181, 183, 186, 188, 190, 191, 193, 196, 199, 201, 202, 205, 206, 207, 213, 214, 218, 225, 226, 228, 230, 234, 235, 242, 243, 244, 245, 247, 248, 250, 251, 252, 253, 255, 258, 259, 266, 267, 268, 269, 270, 271, 272, 275, 278, 282, 283, 284, 288, 292, 293, 295, 297, 299, 302, 307, 308, 311, 313, 314, 319, 320, 321, 322, 328, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 352, 353, 354, 355, 356, 358, 359, 362, 364, 365, 366, 369, 376, 377, 378, 380, 382, 384, 385, 386, 388, 389, 390, 394, 395, 397, 399, 400, 402, 403, 405, 408, 410, 413, 414, 415, 419, 420, 422, 423, 425, 426, 427, 428, 430, 432, 434, 435, 436, 441, 443, 452, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "were": [5, 7, 9, 17, 23, 26, 33, 58, 61, 63, 66, 73, 75, 76, 93, 95, 101, 102, 106, 112, 120, 126, 133, 139, 140, 144, 151, 158, 160, 167, 169, 177, 181, 183, 186, 188, 190, 191, 193, 196, 199, 200, 201, 203, 205, 207, 208, 213, 216, 225, 228, 235, 244, 247, 250, 251, 255, 262, 267, 268, 275, 276, 278, 283, 293, 295, 299, 308, 314, 319, 330, 333, 335, 337, 338, 340, 344, 345, 347, 348, 352, 353, 356, 358, 359, 362, 369, 376, 380, 381, 382, 384, 386, 388, 394, 395, 400, 412, 413, 423, 427, 428, 429, 430, 432, 434, 435, 436, 441, 443, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "encount": [5, 9, 55, 63, 106, 109, 120, 151, 153, 186, 193, 199, 205, 208, 212, 213, 228, 240, 244, 255, 267, 268, 272, 292, 297, 299, 311, 314, 319, 331, 332, 338, 340, 344, 348, 359, 376, 384, 386, 388, 400, 413, 415, 432, 462, 465, 466, 467, 468, 474, 475, 476, 481, 483], "well": [5, 23, 49, 63, 64, 73, 75, 76, 77, 79, 84, 85, 93, 94, 95, 100, 101, 102, 106, 107, 109, 110, 120, 132, 133, 137, 141, 143, 144, 146, 151, 152, 157, 158, 167, 169, 176, 177, 183, 184, 186, 191, 193, 194, 197, 200, 203, 204, 208, 215, 218, 225, 226, 228, 230, 234, 235, 243, 247, 251, 257, 258, 259, 261, 267, 268, 269, 270, 271, 276, 279, 284, 288, 292, 293, 299, 307, 319, 321, 324, 329, 332, 335, 340, 341, 342, 343, 344, 348, 352, 354, 358, 361, 362, 364, 369, 375, 378, 381, 382, 383, 384, 385, 386, 388, 394, 402, 410, 413, 414, 415, 416, 419, 425, 427, 428, 430, 432, 436, 455, 456, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "into": [5, 9, 13, 22, 23, 25, 26, 31, 33, 34, 41, 49, 55, 58, 59, 61, 63, 64, 68, 72, 73, 76, 79, 84, 85, 92, 93, 94, 99, 101, 106, 109, 112, 120, 126, 133, 134, 137, 138, 139, 140, 141, 144, 146, 149, 151, 153, 157, 158, 160, 163, 167, 169, 176, 177, 181, 183, 186, 187, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 205, 206, 208, 209, 213, 214, 215, 222, 223, 225, 226, 230, 242, 244, 245, 247, 248, 250, 251, 252, 254, 255, 256, 258, 259, 261, 262, 266, 267, 268, 269, 271, 272, 276, 278, 281, 282, 283, 284, 292, 293, 295, 297, 298, 299, 305, 307, 308, 309, 311, 312, 314, 319, 320, 331, 332, 333, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 353, 355, 358, 362, 364, 365, 366, 369, 375, 376, 377, 378, 380, 381, 382, 385, 386, 387, 388, 395, 397, 399, 400, 402, 405, 408, 410, 411, 412, 413, 415, 417, 419, 421, 422, 427, 428, 430, 432, 435, 436, 452, 455, 456, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "two": [5, 7, 9, 14, 20, 23, 25, 28, 31, 33, 34, 37, 41, 42, 45, 47, 58, 63, 64, 67, 68, 72, 73, 75, 76, 77, 84, 85, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 109, 110, 117, 120, 126, 132, 133, 139, 141, 143, 144, 146, 151, 155, 157, 158, 159, 160, 163, 167, 173, 175, 176, 177, 178, 181, 183, 186, 189, 190, 191, 193, 194, 195, 196, 200, 202, 207, 208, 209, 211, 213, 216, 218, 221, 225, 226, 228, 230, 235, 243, 245, 247, 248, 249, 250, 255, 258, 259, 260, 261, 266, 267, 268, 271, 275, 276, 278, 283, 284, 288, 292, 293, 295, 297, 299, 301, 305, 308, 312, 314, 318, 319, 322, 324, 325, 330, 332, 333, 334, 336, 337, 338, 340, 341, 342, 344, 345, 346, 347, 352, 355, 358, 361, 362, 364, 365, 366, 375, 376, 378, 382, 384, 386, 387, 388, 389, 390, 394, 399, 400, 402, 405, 407, 408, 410, 413, 416, 421, 422, 425, 427, 428, 430, 431, 432, 434, 435, 436, 440, 441, 442, 449, 451, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "second": [5, 20, 22, 23, 33, 58, 64, 67, 73, 75, 76, 77, 84, 85, 92, 93, 94, 95, 101, 102, 103, 106, 109, 110, 112, 115, 117, 126, 129, 134, 135, 136, 138, 139, 141, 151, 158, 167, 169, 176, 177, 183, 186, 190, 191, 193, 195, 200, 203, 208, 209, 211, 213, 214, 215, 218, 221, 225, 228, 230, 235, 242, 243, 247, 248, 250, 255, 258, 267, 268, 269, 271, 272, 275, 276, 282, 283, 284, 292, 293, 295, 297, 299, 301, 302, 305, 307, 308, 318, 319, 322, 325, 328, 329, 331, 332, 333, 335, 337, 338, 340, 341, 344, 347, 348, 352, 355, 358, 359, 361, 362, 365, 366, 376, 378, 384, 386, 388, 389, 394, 395, 396, 407, 413, 419, 422, 428, 430, 431, 432, 435, 436, 442, 446, 449, 456, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 478, 479, 480, 481, 483], "set": [5, 7, 9, 10, 11, 13, 17, 18, 22, 23, 24, 25, 27, 28, 31, 33, 34, 39, 41, 42, 45, 49, 55, 56, 58, 59, 60, 61, 63, 64, 66, 68, 72, 73, 75, 76, 77, 78, 79, 81, 84, 85, 87, 92, 93, 94, 95, 99, 100, 101, 102, 103, 106, 109, 110, 112, 115, 117, 120, 122, 129, 133, 135, 136, 137, 138, 139, 144, 149, 151, 152, 153, 155, 157, 158, 160, 161, 163, 166, 167, 169, 170, 173, 176, 177, 178, 179, 181, 182, 183, 186, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 201, 202, 203, 205, 206, 207, 208, 209, 213, 214, 215, 222, 223, 225, 226, 228, 230, 234, 235, 242, 243, 244, 245, 248, 251, 252, 254, 255, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 281, 282, 283, 288, 292, 293, 295, 297, 299, 301, 305, 307, 308, 311, 313, 314, 315, 318, 319, 320, 321, 322, 323, 324, 328, 330, 331, 332, 334, 335, 337, 338, 340, 341, 342, 345, 346, 348, 349, 352, 354, 355, 356, 358, 359, 361, 362, 364, 365, 366, 368, 374, 375, 376, 377, 380, 382, 383, 385, 386, 387, 388, 389, 390, 394, 395, 397, 399, 400, 401, 402, 403, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 427, 429, 431, 432, 435, 436, 440, 445, 448, 450, 452, 455, 456, 458, 462, 463, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "buf": [5, 7, 42, 126, 215, 235, 284, 341, 344, 358, 467], "member": [5, 26, 30, 31, 33, 34, 35, 45, 50, 56, 59, 61, 63, 68, 73, 75, 76, 87, 112, 149, 163, 167, 176, 177, 181, 184, 191, 211, 213, 233, 234, 244, 245, 248, 261, 268, 270, 293, 299, 311, 313, 315, 332, 337, 339, 340, 341, 342, 343, 344, 347, 352, 358, 362, 366, 378, 385, 386, 388, 389, 422, 427, 428, 430, 465, 466, 467, 468, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483], "doesn": [5, 7, 22, 23, 33, 34, 43, 56, 63, 72, 73, 76, 77, 79, 85, 92, 94, 95, 96, 99, 100, 101, 102, 106, 109, 110, 112, 120, 132, 133, 135, 144, 151, 158, 169, 173, 176, 183, 184, 186, 193, 196, 198, 200, 205, 213, 214, 225, 226, 243, 250, 251, 255, 258, 259, 266, 267, 268, 269, 292, 293, 297, 299, 302, 305, 314, 319, 322, 323, 328, 330, 332, 333, 334, 335, 337, 339, 340, 341, 344, 345, 348, 352, 358, 362, 365, 369, 384, 385, 387, 388, 390, 400, 405, 419, 423, 428, 430, 432, 441, 449, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "recommend": [5, 33, 42, 45, 63, 64, 68, 72, 73, 75, 76, 85, 91, 94, 95, 101, 108, 109, 120, 126, 132, 133, 139, 143, 158, 167, 173, 176, 181, 183, 186, 193, 196, 225, 230, 235, 242, 245, 247, 248, 250, 255, 262, 267, 275, 288, 293, 295, 299, 308, 314, 319, 324, 331, 332, 337, 338, 340, 341, 348, 352, 358, 366, 369, 384, 386, 388, 394, 410, 411, 415, 416, 422, 425, 428, 432, 435, 456, 461, 462, 464, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "binari": [5, 7, 34, 41, 42, 47, 57, 63, 66, 68, 75, 78, 84, 85, 87, 94, 102, 109, 115, 118, 122, 126, 141, 143, 145, 149, 168, 176, 186, 191, 194, 196, 197, 198, 200, 201, 203, 205, 207, 208, 215, 221, 223, 225, 230, 234, 235, 236, 245, 250, 252, 253, 254, 255, 256, 259, 261, 262, 266, 268, 269, 270, 271, 274, 275, 281, 282, 283, 285, 288, 292, 293, 296, 299, 302, 304, 337, 345, 348, 352, 355, 358, 369, 395, 397, 399, 402, 405, 413, 416, 420, 421, 422, 425, 426, 428, 433, 436, 439, 445, 446, 456, 459, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "pybytesobject": [5, 9, 13, 64, 468, 473, 474, 483], "attempt": [5, 11, 23, 25, 31, 33, 47, 59, 61, 63, 67, 85, 92, 94, 96, 99, 102, 106, 109, 110, 120, 122, 126, 133, 140, 149, 155, 167, 169, 173, 177, 184, 186, 190, 191, 193, 194, 196, 199, 203, 205, 206, 207, 209, 212, 213, 225, 226, 242, 243, 247, 248, 250, 255, 258, 265, 266, 268, 269, 270, 271, 278, 282, 283, 293, 295, 299, 302, 305, 307, 311, 313, 314, 319, 320, 322, 325, 328, 332, 333, 334, 335, 337, 338, 340, 341, 344, 347, 352, 358, 359, 362, 364, 365, 366, 386, 388, 394, 395, 410, 413, 415, 416, 417, 422, 423, 427, 428, 430, 432, 436, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 476, 478, 479, 480, 481, 482, 483], "declar": [5, 33, 35, 58, 63, 68, 73, 75, 76, 78, 84, 85, 95, 102, 109, 128, 139, 167, 169, 170, 176, 225, 226, 240, 250, 255, 268, 292, 299, 314, 331, 338, 340, 344, 386, 388, 402, 403, 410, 411, 413, 415, 416, 425, 427, 428, 429, 430, 431, 436, 465, 467, 468, 469, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "pybytearrayobject": [5, 8], "implement": [5, 9, 13, 23, 28, 31, 32, 33, 39, 42, 45, 49, 54, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 73, 75, 76, 85, 87, 88, 91, 92, 93, 94, 95, 96, 100, 101, 106, 108, 109, 110, 120, 128, 132, 133, 137, 139, 143, 144, 151, 155, 157, 158, 161, 167, 170, 173, 176, 181, 182, 183, 184, 186, 191, 193, 196, 203, 205, 207, 208, 212, 213, 214, 218, 220, 221, 223, 225, 226, 230, 234, 235, 236, 237, 242, 243, 244, 245, 247, 248, 251, 252, 253, 254, 255, 258, 259, 261, 266, 267, 268, 269, 271, 273, 275, 280, 281, 282, 283, 285, 288, 292, 293, 299, 302, 305, 307, 308, 309, 312, 314, 315, 319, 320, 324, 325, 328, 329, 330, 331, 332, 333, 335, 337, 338, 340, 341, 342, 344, 345, 347, 348, 352, 353, 355, 356, 358, 359, 362, 365, 366, 369, 374, 376, 378, 379, 381, 384, 385, 386, 388, 390, 394, 395, 399, 400, 402, 403, 405, 410, 413, 414, 415, 416, 417, 419, 422, 423, 425, 427, 429, 430, 432, 433, 435, 436, 441, 442, 450, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 477, 478, 481, 482, 483, 484], "write": [5, 7, 23, 25, 28, 33, 34, 41, 42, 43, 51, 58, 59, 63, 64, 68, 72, 74, 75, 76, 78, 79, 84, 86, 87, 92, 93, 94, 95, 99, 100, 101, 102, 103, 106, 107, 112, 117, 119, 120, 126, 130, 135, 136, 137, 139, 140, 142, 143, 149, 151, 155, 157, 158, 161, 163, 167, 169, 170, 175, 176, 177, 180, 184, 187, 189, 190, 193, 196, 200, 201, 205, 208, 213, 215, 218, 222, 223, 225, 226, 228, 230, 234, 236, 243, 245, 246, 247, 248, 250, 254, 255, 258, 259, 262, 267, 268, 269, 271, 278, 281, 283, 288, 292, 293, 295, 296, 298, 299, 301, 304, 305, 307, 308, 309, 311, 320, 328, 329, 330, 331, 332, 333, 337, 338, 341, 342, 344, 347, 348, 352, 355, 356, 359, 360, 362, 363, 365, 369, 371, 376, 378, 380, 382, 384, 386, 388, 389, 397, 399, 400, 405, 407, 410, 411, 413, 415, 417, 419, 421, 422, 426, 427, 428, 431, 432, 436, 441, 446, 450, 451, 452, 455, 461, 462, 463, 464, 465, 466, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "interfac": [5, 7, 28, 31, 32, 33, 43, 51, 57, 59, 63, 64, 66, 68, 72, 73, 75, 80, 84, 85, 92, 93, 95, 101, 102, 106, 109, 110, 118, 119, 120, 126, 132, 133, 143, 149, 153, 155, 158, 161, 167, 169, 170, 173, 176, 177, 180, 184, 185, 187, 189, 193, 194, 196, 197, 203, 204, 205, 206, 207, 212, 214, 215, 218, 222, 228, 230, 233, 234, 235, 242, 243, 245, 247, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 262, 264, 266, 267, 270, 271, 273, 276, 281, 283, 292, 295, 297, 299, 302, 304, 305, 308, 312, 314, 315, 325, 328, 330, 333, 335, 338, 339, 340, 341, 344, 348, 352, 356, 361, 362, 363, 365, 366, 375, 378, 381, 384, 394, 397, 398, 400, 402, 403, 404, 410, 411, 413, 414, 415, 417, 426, 428, 432, 455, 461, 462, 464, 465, 466, 467, 468, 469, 471, 474, 476, 477, 478, 479, 480, 482, 483, 484], "done": [5, 7, 31, 33, 34, 36, 47, 49, 51, 54, 55, 58, 63, 64, 66, 72, 73, 75, 76, 84, 85, 92, 95, 96, 98, 99, 101, 102, 106, 109, 110, 120, 125, 126, 129, 133, 136, 139, 141, 151, 155, 158, 159, 166, 167, 173, 176, 177, 183, 184, 186, 191, 193, 196, 200, 204, 205, 208, 209, 216, 225, 232, 234, 235, 245, 247, 250, 255, 258, 266, 267, 268, 269, 278, 283, 288, 292, 293, 295, 299, 302, 308, 309, 314, 316, 319, 334, 338, 340, 341, 344, 345, 348, 352, 358, 359, 361, 362, 366, 375, 376, 384, 385, 386, 390, 395, 399, 400, 402, 408, 411, 412, 413, 414, 421, 428, 430, 432, 435, 436, 452, 461, 462, 463, 464, 465, 467, 468, 474, 475, 476, 477, 478, 479, 481, 483], "work": [5, 23, 25, 33, 34, 36, 37, 41, 42, 45, 55, 59, 63, 64, 68, 72, 73, 76, 77, 78, 79, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 108, 109, 110, 115, 119, 120, 132, 133, 134, 135, 137, 138, 139, 140, 151, 155, 158, 161, 163, 167, 169, 170, 176, 177, 181, 183, 184, 187, 190, 191, 192, 197, 205, 207, 208, 215, 225, 226, 228, 230, 232, 241, 243, 245, 247, 248, 250, 251, 254, 255, 257, 258, 260, 261, 264, 266, 267, 268, 269, 273, 283, 284, 290, 291, 292, 293, 297, 298, 299, 302, 304, 305, 308, 309, 316, 319, 324, 328, 330, 332, 337, 338, 341, 343, 344, 345, 347, 348, 352, 358, 361, 362, 364, 365, 369, 375, 376, 381, 384, 388, 390, 394, 395, 400, 402, 403, 405, 410, 411, 413, 414, 419, 421, 426, 427, 428, 430, 432, 434, 436, 451, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "name": [5, 10, 11, 13, 14, 17, 19, 20, 23, 24, 26, 28, 29, 30, 31, 33, 34, 35, 42, 45, 49, 51, 53, 54, 56, 58, 59, 60, 61, 63, 64, 66, 68, 71, 72, 73, 75, 76, 77, 79, 84, 87, 92, 95, 96, 98, 101, 102, 103, 108, 109, 110, 112, 114, 117, 118, 119, 122, 126, 128, 133, 134, 136, 139, 140, 142, 144, 145, 147, 149, 151, 152, 153, 155, 157, 160, 161, 163, 166, 167, 169, 170, 175, 176, 177, 178, 181, 182, 183, 184, 186, 188, 190, 191, 193, 194, 195, 196, 197, 200, 202, 203, 205, 208, 209, 211, 212, 213, 214, 215, 216, 218, 220, 223, 225, 226, 228, 230, 231, 233, 234, 235, 237, 238, 239, 240, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 265, 266, 267, 268, 269, 270, 271, 272, 276, 278, 279, 281, 282, 283, 284, 285, 287, 288, 291, 292, 294, 295, 296, 297, 299, 302, 303, 305, 307, 308, 310, 311, 312, 313, 314, 319, 320, 321, 322, 323, 324, 325, 328, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 351, 353, 354, 355, 359, 360, 361, 362, 365, 366, 369, 372, 374, 375, 376, 377, 378, 380, 381, 382, 384, 386, 387, 388, 389, 390, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 425, 426, 427, 431, 432, 433, 434, 435, 436, 440, 441, 442, 443, 446, 449, 450, 452, 453, 455, 456, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484], "known": [5, 9, 23, 33, 60, 61, 63, 64, 68, 75, 85, 94, 95, 106, 107, 110, 120, 151, 158, 167, 169, 176, 183, 186, 196, 197, 209, 235, 242, 247, 250, 251, 253, 266, 267, 268, 275, 276, 293, 299, 319, 320, 328, 337, 340, 341, 342, 344, 348, 352, 354, 355, 366, 369, 375, 376, 378, 384, 387, 399, 400, 410, 415, 416, 422, 425, 426, 430, 434, 435, 436, 456, 458, 465, 467, 469, 470, 471, 475, 477, 479, 480, 481, 483], "will": [5, 7, 9, 11, 13, 17, 18, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 37, 39, 41, 42, 43, 45, 47, 49, 51, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 72, 73, 75, 76, 77, 79, 84, 85, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 105, 106, 109, 110, 112, 115, 117, 120, 122, 126, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 146, 149, 151, 152, 153, 155, 157, 158, 159, 161, 163, 166, 167, 169, 170, 173, 176, 177, 179, 181, 183, 184, 186, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 214, 215, 216, 218, 220, 222, 223, 225, 226, 228, 230, 234, 235, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 255, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 281, 282, 283, 288, 292, 293, 295, 297, 299, 302, 304, 305, 307, 308, 309, 311, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 345, 347, 348, 352, 353, 354, 355, 356, 358, 359, 360, 362, 364, 365, 366, 369, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 387, 388, 389, 390, 394, 395, 397, 399, 400, 402, 403, 405, 406, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 443, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "content": [5, 7, 9, 25, 33, 42, 45, 54, 58, 61, 64, 66, 68, 72, 84, 85, 92, 95, 101, 102, 106, 109, 110, 143, 149, 151, 153, 157, 158, 160, 163, 166, 175, 176, 177, 179, 184, 187, 191, 193, 194, 195, 196, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 215, 216, 223, 225, 226, 230, 234, 235, 240, 241, 242, 245, 247, 250, 251, 252, 253, 255, 258, 262, 268, 271, 273, 276, 278, 279, 281, 285, 293, 296, 299, 302, 307, 311, 315, 319, 320, 332, 334, 337, 340, 341, 344, 347, 352, 354, 358, 360, 362, 364, 369, 378, 385, 393, 394, 395, 399, 402, 407, 410, 411, 413, 415, 416, 417, 419, 420, 421, 422, 425, 426, 429, 430, 432, 435, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483], "text": [5, 54, 59, 64, 68, 72, 75, 84, 85, 87, 95, 101, 102, 106, 109, 110, 118, 120, 122, 126, 145, 146, 149, 150, 151, 152, 155, 157, 159, 167, 168, 173, 176, 178, 187, 188, 190, 191, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 212, 213, 218, 219, 223, 225, 226, 234, 240, 242, 245, 248, 250, 252, 253, 254, 255, 258, 262, 266, 267, 268, 269, 270, 271, 273, 281, 282, 288, 292, 293, 296, 298, 299, 305, 307, 313, 314, 320, 323, 331, 333, 341, 345, 346, 348, 352, 358, 360, 367, 368, 369, 372, 375, 376, 377, 381, 384, 386, 387, 388, 394, 395, 399, 400, 403, 407, 411, 412, 413, 415, 416, 422, 426, 428, 429, 430, 432, 434, 435, 446, 449, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483], "specifi": [5, 7, 9, 11, 13, 17, 22, 23, 25, 33, 34, 39, 40, 42, 45, 49, 56, 61, 63, 64, 66, 68, 73, 75, 76, 77, 79, 85, 89, 92, 93, 94, 95, 101, 102, 103, 106, 109, 110, 112, 115, 117, 118, 119, 120, 126, 132, 133, 135, 138, 139, 141, 143, 144, 146, 149, 151, 155, 157, 158, 161, 163, 167, 169, 173, 177, 181, 183, 184, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 218, 225, 226, 228, 230, 234, 235, 242, 243, 244, 245, 247, 248, 250, 252, 253, 255, 258, 259, 261, 262, 266, 267, 268, 269, 271, 272, 275, 276, 278, 279, 281, 282, 283, 284, 288, 292, 293, 295, 297, 299, 302, 304, 305, 307, 308, 311, 313, 314, 319, 320, 322, 324, 328, 329, 330, 331, 332, 333, 335, 337, 340, 341, 344, 345, 347, 348, 352, 353, 354, 355, 358, 359, 361, 362, 365, 366, 369, 375, 376, 378, 380, 381, 384, 385, 388, 394, 395, 397, 399, 400, 402, 405, 406, 410, 411, 413, 415, 416, 422, 423, 425, 427, 428, 429, 430, 431, 432, 435, 436, 440, 446, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "need": [5, 7, 11, 13, 23, 26, 28, 31, 33, 34, 42, 45, 49, 51, 58, 59, 61, 63, 64, 66, 68, 72, 73, 75, 76, 77, 78, 79, 84, 85, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 109, 110, 112, 117, 120, 122, 126, 132, 137, 138, 139, 140, 141, 144, 149, 151, 153, 155, 157, 158, 161, 167, 169, 173, 176, 177, 179, 181, 183, 186, 190, 191, 193, 194, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 208, 209, 212, 213, 225, 226, 230, 234, 235, 243, 245, 247, 248, 250, 251, 252, 255, 258, 259, 261, 265, 266, 267, 268, 269, 270, 271, 278, 281, 283, 288, 292, 293, 295, 299, 302, 305, 307, 308, 311, 314, 319, 320, 321, 322, 325, 326, 330, 331, 332, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 353, 358, 361, 362, 364, 365, 366, 369, 375, 377, 378, 384, 385, 386, 388, 390, 394, 395, 399, 400, 402, 403, 405, 407, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 425, 428, 430, 431, 432, 434, 435, 436, 455, 456, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "copi": [5, 7, 9, 17, 25, 33, 34, 42, 43, 55, 58, 63, 64, 68, 73, 77, 80, 84, 85, 95, 100, 102, 112, 120, 126, 133, 139, 151, 158, 160, 166, 167, 170, 172, 176, 177, 181, 182, 183, 186, 191, 193, 200, 201, 203, 208, 213, 215, 219, 225, 226, 230, 235, 237, 244, 247, 248, 254, 255, 258, 261, 267, 268, 269, 271, 276, 278, 283, 284, 292, 293, 297, 299, 301, 302, 309, 319, 330, 340, 344, 345, 347, 348, 352, 355, 358, 362, 372, 382, 384, 385, 388, 389, 390, 395, 399, 400, 415, 416, 421, 424, 426, 428, 440, 441, 442, 461, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483], "adjust": [5, 45, 54, 56, 64, 120, 160, 177, 183, 186, 201, 208, 293, 307, 324, 334, 340, 341, 344, 366, 369, 375, 376, 413, 462, 469, 477, 479, 480, 481, 483], "newli": [5, 42, 59, 68, 73, 85, 101, 139, 157, 161, 181, 191, 198, 232, 243, 258, 283, 293, 302, 332, 334, 337, 375, 376, 384, 410, 427, 428, 466, 468, 474, 476, 479, 480, 483], "respons": [5, 23, 33, 34, 45, 61, 63, 64, 68, 73, 76, 79, 93, 94, 95, 101, 102, 109, 110, 126, 133, 135, 137, 155, 169, 177, 179, 183, 191, 196, 242, 243, 245, 248, 250, 254, 256, 266, 267, 288, 305, 314, 325, 335, 337, 338, 340, 341, 343, 347, 348, 358, 386, 388, 390, 393, 412, 419, 420, 421, 425, 426, 428, 430, 432, 441, 451, 461, 462, 465, 468, 469, 473, 475, 476, 477, 478, 480, 481, 483], "free": [5, 7, 11, 13, 33, 34, 42, 59, 63, 64, 73, 75, 76, 78, 84, 85, 95, 128, 134, 140, 158, 176, 190, 191, 225, 229, 230, 248, 255, 283, 284, 292, 293, 299, 303, 316, 332, 344, 351, 352, 362, 382, 385, 388, 402, 410, 419, 420, 425, 426, 427, 428, 429, 430, 432, 436, 461, 463, 464, 465, 467, 468, 470, 475, 476, 477, 482, 483], "through": [5, 7, 9, 11, 22, 23, 28, 33, 42, 45, 51, 55, 59, 60, 63, 64, 67, 68, 73, 76, 77, 85, 91, 93, 95, 99, 100, 101, 102, 106, 109, 110, 120, 126, 144, 151, 158, 167, 176, 177, 178, 181, 183, 186, 190, 191, 193, 194, 196, 197, 198, 202, 204, 205, 206, 208, 216, 221, 225, 226, 230, 242, 244, 245, 247, 250, 251, 257, 267, 268, 269, 271, 275, 278, 281, 283, 292, 293, 297, 301, 302, 312, 314, 319, 335, 337, 340, 341, 342, 344, 345, 348, 352, 362, 364, 365, 369, 375, 376, 385, 386, 388, 390, 394, 395, 402, 406, 410, 411, 413, 415, 417, 419, 422, 426, 427, 428, 429, 430, 432, 434, 435, 436, 440, 441, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "recod": 5, "instead": [5, 7, 13, 17, 18, 22, 23, 28, 31, 33, 34, 40, 42, 45, 49, 58, 59, 61, 63, 64, 66, 68, 72, 73, 75, 76, 77, 84, 92, 93, 94, 95, 99, 100, 101, 102, 103, 105, 106, 109, 110, 120, 123, 126, 128, 133, 139, 143, 146, 149, 151, 152, 157, 158, 159, 161, 167, 169, 170, 176, 177, 181, 183, 184, 186, 190, 191, 193, 196, 197, 198, 200, 201, 202, 203, 205, 207, 208, 209, 213, 225, 226, 228, 230, 234, 242, 243, 244, 245, 247, 248, 250, 253, 255, 258, 261, 262, 266, 267, 269, 270, 271, 275, 283, 288, 292, 293, 297, 299, 302, 307, 308, 311, 312, 313, 314, 319, 320, 321, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 341, 344, 345, 347, 348, 352, 354, 355, 358, 359, 362, 365, 369, 375, 376, 378, 381, 382, 384, 385, 386, 387, 388, 389, 394, 395, 397, 399, 400, 402, 403, 405, 410, 411, 412, 413, 415, 423, 425, 427, 428, 429, 430, 431, 432, 435, 436, 449, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "assum": [5, 7, 33, 34, 41, 45, 54, 56, 60, 63, 72, 73, 76, 84, 85, 89, 95, 96, 99, 100, 101, 102, 106, 109, 120, 126, 151, 153, 158, 161, 167, 169, 176, 183, 196, 199, 201, 202, 203, 209, 225, 230, 235, 242, 243, 247, 248, 249, 252, 266, 267, 268, 283, 288, 292, 293, 297, 302, 311, 313, 334, 337, 340, 341, 343, 344, 345, 347, 348, 358, 364, 366, 376, 386, 388, 395, 399, 408, 416, 421, 426, 428, 430, 432, 436, 461, 462, 463, 464, 467, 468, 470, 474, 476, 477, 478, 479, 480, 483], "paramet": [5, 7, 9, 11, 17, 22, 23, 28, 32, 34, 37, 45, 49, 56, 58, 61, 63, 64, 66, 67, 68, 74, 75, 79, 84, 87, 93, 94, 95, 101, 106, 109, 112, 115, 117, 118, 120, 126, 137, 139, 141, 144, 149, 151, 158, 163, 167, 169, 170, 175, 177, 183, 184, 186, 190, 191, 193, 196, 197, 198, 199, 201, 203, 205, 206, 208, 209, 213, 214, 215, 216, 218, 220, 225, 226, 228, 230, 234, 235, 242, 243, 245, 247, 248, 250, 251, 252, 253, 255, 258, 259, 261, 262, 264, 266, 267, 268, 269, 271, 272, 275, 276, 278, 281, 282, 283, 288, 292, 295, 297, 305, 307, 311, 312, 314, 315, 319, 320, 322, 325, 328, 330, 331, 332, 333, 335, 337, 338, 340, 341, 344, 345, 346, 348, 351, 352, 356, 358, 359, 362, 365, 366, 368, 375, 380, 381, 382, 384, 388, 394, 395, 400, 402, 403, 405, 406, 410, 411, 412, 413, 414, 415, 417, 419, 420, 422, 425, 428, 429, 430, 431, 432, 433, 436, 445, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 482, 483], "buffer_length": 5, "unlik": [5, 33, 41, 42, 45, 49, 55, 60, 64, 73, 76, 84, 85, 93, 94, 95, 100, 101, 102, 109, 126, 137, 139, 149, 163, 169, 177, 183, 184, 186, 205, 225, 228, 243, 248, 261, 270, 271, 275, 283, 293, 295, 297, 299, 305, 319, 324, 337, 341, 344, 348, 353, 358, 362, 366, 369, 382, 384, 385, 386, 388, 402, 405, 413, 425, 428, 430, 432, 434, 435, 436, 461, 463, 464, 465, 467, 468, 469, 474, 475, 476, 477, 478, 479, 480, 482, 483], "third": [5, 7, 23, 28, 31, 33, 58, 63, 73, 75, 76, 84, 85, 93, 95, 101, 102, 106, 109, 112, 117, 126, 128, 132, 133, 138, 158, 167, 169, 176, 177, 181, 183, 184, 186, 225, 228, 250, 251, 261, 267, 268, 293, 299, 302, 307, 319, 330, 332, 337, 340, 341, 343, 344, 352, 355, 369, 380, 386, 388, 389, 395, 399, 400, 402, 419, 426, 428, 432, 449, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 481, 482, 483], "integ": [5, 7, 9, 22, 23, 30, 33, 34, 35, 39, 41, 42, 45, 47, 49, 56, 61, 63, 64, 66, 68, 72, 73, 75, 76, 84, 85, 92, 94, 95, 96, 99, 102, 106, 109, 110, 115, 117, 120, 126, 133, 138, 141, 149, 151, 158, 167, 173, 176, 177, 178, 183, 186, 193, 203, 212, 213, 215, 218, 221, 225, 233, 234, 243, 245, 248, 250, 254, 256, 258, 266, 267, 268, 269, 270, 275, 278, 281, 283, 288, 289, 292, 293, 299, 304, 305, 307, 308, 314, 318, 319, 320, 321, 322, 328, 329, 332, 337, 338, 339, 340, 341, 345, 347, 348, 349, 352, 353, 361, 362, 365, 366, 369, 376, 379, 384, 387, 394, 400, 405, 408, 410, 411, 413, 419, 422, 427, 428, 430, 436, 441, 443, 451, 455, 456, 462, 463, 465, 467, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "referenc": [5, 7, 13, 60, 63, 67, 73, 75, 85, 101, 106, 120, 139, 167, 179, 191, 225, 226, 247, 255, 283, 293, 299, 319, 344, 351, 402, 410, 428, 461, 463, 464, 465, 468, 469, 470, 476, 477, 483], "output": [5, 9, 33, 34, 42, 59, 63, 64, 66, 68, 73, 75, 76, 79, 84, 89, 92, 95, 96, 101, 106, 109, 112, 114, 117, 120, 126, 133, 137, 139, 141, 143, 144, 146, 148, 149, 151, 152, 155, 157, 158, 163, 167, 169, 176, 177, 183, 187, 190, 191, 193, 195, 200, 201, 202, 204, 208, 209, 212, 218, 219, 223, 225, 228, 234, 235, 242, 244, 245, 246, 248, 255, 258, 261, 262, 267, 269, 270, 275, 279, 283, 288, 292, 293, 295, 299, 300, 301, 302, 305, 307, 308, 309, 311, 313, 314, 317, 319, 321, 322, 325, 328, 331, 333, 334, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 355, 357, 358, 359, 361, 362, 364, 366, 368, 378, 380, 381, 382, 384, 386, 388, 395, 397, 399, 400, 402, 411, 413, 417, 421, 422, 428, 435, 436, 445, 450, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "mode": [5, 24, 33, 34, 35, 41, 42, 59, 64, 66, 68, 73, 84, 92, 101, 102, 106, 109, 112, 117, 118, 120, 122, 125, 135, 142, 144, 149, 151, 158, 163, 167, 174, 176, 177, 178, 184, 187, 189, 190, 193, 200, 207, 213, 214, 218, 223, 225, 228, 234, 245, 247, 250, 251, 252, 253, 254, 258, 266, 267, 269, 270, 271, 275, 282, 288, 290, 292, 295, 296, 297, 299, 301, 305, 309, 311, 318, 319, 320, 322, 323, 331, 332, 334, 335, 337, 340, 341, 342, 343, 344, 347, 348, 349, 351, 352, 354, 358, 360, 362, 376, 378, 382, 383, 384, 386, 388, 397, 401, 403, 413, 415, 421, 422, 424, 425, 428, 436, 446, 448, 455, 456, 461, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483], "oper": [5, 7, 22, 23, 28, 33, 37, 41, 42, 47, 49, 54, 59, 63, 64, 66, 68, 72, 73, 75, 76, 77, 84, 87, 92, 93, 94, 101, 102, 103, 106, 109, 110, 112, 113, 118, 119, 122, 126, 133, 139, 141, 142, 144, 147, 151, 161, 166, 167, 169, 173, 176, 177, 183, 184, 186, 188, 191, 194, 195, 196, 200, 201, 202, 205, 207, 208, 212, 213, 215, 216, 219, 220, 221, 224, 225, 227, 230, 242, 245, 247, 250, 251, 254, 255, 256, 257, 258, 261, 266, 267, 269, 270, 271, 275, 276, 283, 289, 295, 296, 299, 308, 309, 313, 314, 319, 320, 322, 328, 330, 331, 333, 335, 337, 340, 342, 345, 347, 348, 352, 353, 355, 358, 359, 361, 362, 365, 369, 376, 378, 384, 385, 386, 390, 394, 395, 399, 400, 402, 403, 404, 405, 410, 411, 413, 416, 419, 422, 425, 427, 428, 429, 431, 432, 433, 434, 436, 442, 443, 446, 449, 455, 456, 459, 461, 462, 463, 465, 466, 467, 468, 469, 474, 475, 476, 479, 480, 481, 483, 484], "usag": [5, 33, 34, 63, 64, 67, 68, 72, 73, 76, 85, 89, 95, 101, 102, 106, 109, 112, 114, 118, 135, 140, 143, 149, 153, 169, 178, 183, 185, 187, 188, 191, 194, 213, 218, 225, 226, 228, 230, 234, 243, 245, 248, 250, 251, 254, 256, 259, 264, 267, 269, 272, 280, 283, 292, 293, 297, 299, 305, 307, 332, 344, 352, 358, 362, 375, 382, 386, 388, 391, 395, 399, 400, 403, 410, 411, 421, 425, 426, 427, 428, 449, 455, 456, 461, 464, 465, 466, 467, 468, 469, 474, 475, 476, 478, 479, 483], "non": [5, 7, 9, 11, 13, 18, 22, 23, 25, 26, 28, 31, 34, 35, 36, 39, 42, 45, 49, 58, 59, 60, 61, 63, 64, 68, 71, 73, 75, 76, 84, 92, 93, 94, 95, 100, 101, 102, 103, 107, 109, 110, 115, 120, 125, 126, 132, 133, 139, 143, 144, 149, 151, 155, 158, 167, 169, 175, 176, 177, 178, 181, 183, 184, 186, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 212, 213, 215, 223, 225, 226, 228, 230, 233, 234, 235, 236, 237, 242, 243, 245, 247, 248, 250, 252, 253, 257, 258, 259, 261, 265, 266, 268, 269, 273, 275, 276, 278, 283, 285, 288, 292, 293, 295, 296, 297, 298, 299, 302, 305, 308, 311, 314, 316, 319, 320, 322, 328, 331, 332, 333, 334, 335, 337, 338, 342, 344, 345, 346, 347, 348, 352, 355, 358, 359, 362, 364, 365, 366, 377, 385, 386, 388, 390, 394, 395, 400, 403, 415, 419, 422, 425, 426, 427, 428, 429, 430, 432, 433, 435, 436, 440, 441, 443, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483], "alreadi": [5, 7, 9, 13, 22, 23, 24, 27, 28, 31, 33, 34, 42, 49, 51, 54, 60, 61, 63, 64, 66, 68, 73, 75, 76, 77, 84, 85, 92, 93, 94, 95, 99, 100, 102, 103, 106, 109, 112, 120, 126, 129, 133, 139, 151, 163, 167, 169, 176, 181, 183, 184, 189, 190, 196, 199, 200, 205, 208, 212, 213, 218, 227, 242, 243, 247, 248, 250, 255, 258, 261, 267, 268, 270, 271, 276, 281, 282, 283, 292, 293, 299, 302, 305, 307, 308, 320, 321, 328, 329, 332, 333, 337, 340, 341, 344, 348, 352, 353, 356, 358, 359, 362, 365, 369, 376, 384, 388, 394, 397, 399, 400, 403, 405, 410, 411, 413, 417, 421, 427, 428, 430, 432, 436, 461, 462, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "locat": [5, 7, 33, 34, 58, 64, 68, 72, 77, 84, 85, 92, 93, 94, 98, 101, 102, 106, 110, 112, 141, 147, 158, 163, 167, 176, 177, 183, 191, 193, 225, 243, 247, 250, 251, 252, 253, 254, 266, 268, 269, 273, 276, 280, 283, 293, 297, 299, 302, 311, 312, 313, 314, 319, 320, 332, 340, 341, 353, 354, 355, 362, 366, 375, 384, 386, 388, 394, 395, 399, 400, 410, 413, 414, 415, 422, 425, 426, 427, 428, 431, 432, 436, 453, 455, 461, 462, 464, 465, 466, 467, 468, 469, 472, 474, 475, 477, 479, 481, 483], "interpret": [5, 7, 13, 23, 24, 26, 27, 28, 31, 32, 34, 39, 42, 45, 47, 49, 51, 53, 58, 59, 63, 64, 66, 68, 72, 73, 75, 76, 79, 84, 85, 87, 93, 95, 96, 101, 102, 106, 109, 112, 115, 120, 122, 126, 140, 145, 151, 152, 163, 166, 167, 175, 176, 177, 182, 183, 184, 186, 190, 191, 192, 193, 197, 203, 207, 209, 210, 213, 219, 222, 225, 227, 235, 245, 247, 248, 250, 251, 254, 259, 261, 262, 266, 267, 268, 278, 281, 283, 292, 293, 297, 299, 307, 308, 309, 311, 313, 314, 315, 319, 320, 324, 328, 330, 331, 333, 334, 335, 337, 340, 341, 344, 348, 352, 355, 356, 361, 362, 365, 366, 369, 375, 376, 381, 386, 388, 395, 399, 400, 402, 403, 406, 410, 413, 426, 427, 428, 429, 430, 432, 434, 435, 436, 442, 449, 455, 456, 461, 462, 463, 464, 465, 466, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483], "initi": [5, 13, 16, 18, 22, 23, 24, 27, 28, 31, 32, 35, 42, 49, 51, 58, 59, 60, 61, 63, 66, 68, 69, 71, 72, 74, 76, 79, 85, 86, 92, 93, 95, 100, 101, 102, 109, 114, 115, 120, 121, 126, 135, 139, 140, 141, 142, 146, 155, 158, 166, 167, 175, 176, 177, 181, 186, 189, 190, 191, 193, 195, 202, 203, 206, 213, 226, 230, 234, 235, 243, 247, 248, 250, 254, 258, 261, 262, 266, 267, 268, 269, 270, 271, 276, 278, 280, 281, 283, 288, 292, 293, 299, 301, 305, 308, 314, 320, 321, 331, 334, 335, 337, 338, 340, 341, 344, 348, 352, 356, 359, 365, 366, 369, 376, 384, 385, 388, 389, 395, 400, 413, 419, 425, 426, 427, 428, 431, 432, 435, 436, 450, 455, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 482, 483], "then": [5, 7, 13, 23, 25, 27, 28, 31, 33, 34, 42, 43, 47, 49, 59, 61, 63, 64, 66, 72, 73, 75, 76, 79, 84, 85, 91, 92, 93, 94, 95, 96, 100, 101, 102, 103, 106, 109, 110, 115, 120, 126, 132, 133, 139, 144, 151, 157, 158, 161, 163, 169, 176, 177, 181, 183, 184, 186, 189, 190, 191, 193, 194, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 215, 225, 226, 228, 230, 235, 243, 245, 247, 248, 250, 251, 253, 255, 257, 258, 259, 261, 262, 265, 266, 267, 268, 269, 271, 272, 275, 276, 278, 281, 283, 288, 292, 293, 297, 298, 299, 302, 307, 308, 309, 313, 314, 319, 322, 324, 325, 328, 331, 332, 333, 334, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 353, 354, 358, 362, 364, 365, 366, 369, 371, 375, 376, 378, 380, 381, 382, 384, 385, 386, 387, 388, 390, 394, 395, 400, 402, 403, 405, 407, 408, 410, 413, 414, 415, 420, 421, 422, 426, 427, 428, 430, 431, 432, 435, 436, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "larg": [5, 7, 55, 58, 59, 63, 68, 72, 84, 92, 93, 95, 99, 102, 106, 109, 110, 137, 158, 176, 177, 183, 184, 186, 188, 190, 193, 212, 213, 222, 247, 248, 258, 259, 262, 275, 283, 288, 292, 293, 295, 299, 314, 333, 344, 345, 346, 347, 348, 352, 358, 382, 384, 388, 391, 402, 410, 411, 413, 422, 425, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 475, 476, 477, 478, 481, 483], "enough": [5, 42, 45, 59, 63, 64, 84, 85, 92, 93, 99, 101, 102, 103, 158, 176, 183, 190, 199, 201, 247, 250, 261, 265, 270, 292, 293, 299, 308, 337, 339, 344, 345, 348, 362, 364, 369, 385, 402, 462, 463, 464, 465, 470, 476, 483], "both": [5, 7, 22, 23, 24, 33, 45, 49, 55, 58, 63, 64, 72, 73, 75, 76, 77, 84, 85, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 109, 120, 126, 133, 137, 139, 141, 143, 151, 158, 159, 161, 167, 169, 176, 177, 181, 183, 186, 190, 191, 193, 194, 195, 196, 200, 201, 202, 203, 205, 206, 207, 213, 215, 216, 220, 225, 226, 230, 233, 235, 243, 244, 245, 247, 250, 255, 257, 258, 259, 267, 268, 270, 275, 278, 281, 282, 283, 284, 287, 292, 293, 295, 297, 299, 302, 304, 305, 307, 308, 309, 314, 319, 320, 322, 324, 329, 330, 332, 333, 334, 335, 337, 340, 341, 344, 345, 347, 348, 352, 353, 355, 361, 362, 364, 366, 369, 376, 378, 380, 382, 384, 386, 388, 394, 395, 400, 402, 405, 411, 413, 417, 419, 421, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 442, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "trail": [5, 33, 34, 39, 64, 78, 92, 95, 106, 143, 146, 157, 158, 159, 167, 177, 186, 190, 196, 205, 208, 221, 225, 228, 247, 271, 284, 314, 337, 341, 344, 345, 348, 356, 366, 369, 381, 395, 410, 427, 428, 430, 431, 435, 436, 442, 451, 455, 462, 466, 468, 469, 470, 471, 475, 477, 478, 479, 480, 481, 483], "remov": [5, 10, 22, 24, 26, 28, 31, 34, 35, 45, 49, 55, 63, 64, 66, 68, 73, 75, 76, 80, 84, 93, 94, 95, 101, 102, 103, 106, 110, 112, 120, 121, 126, 132, 135, 137, 139, 140, 142, 143, 144, 149, 151, 155, 157, 158, 160, 161, 163, 167, 169, 177, 179, 183, 186, 188, 191, 193, 194, 196, 200, 203, 205, 207, 208, 212, 213, 218, 226, 234, 235, 236, 242, 243, 247, 248, 250, 251, 252, 255, 259, 262, 266, 267, 269, 271, 275, 281, 283, 292, 293, 296, 297, 299, 304, 305, 308, 313, 314, 319, 320, 325, 328, 329, 331, 332, 333, 334, 335, 340, 341, 344, 345, 352, 358, 359, 360, 362, 364, 376, 377, 382, 384, 385, 386, 388, 394, 395, 400, 402, 403, 405, 410, 412, 413, 421, 422, 423, 425, 426, 428, 430, 432, 436, 440, 442, 449, 451, 452, 455, 456, 458, 462, 463, 464, 465, 466, 470, 472, 473, 474, 475, 476, 477, 483, 484], "becaus": [5, 23, 28, 33, 34, 42, 45, 47, 54, 58, 60, 63, 71, 72, 73, 75, 76, 84, 85, 92, 93, 94, 95, 99, 100, 101, 102, 103, 106, 109, 110, 112, 120, 122, 126, 129, 133, 135, 136, 137, 139, 149, 151, 157, 158, 161, 163, 166, 167, 169, 176, 181, 183, 184, 186, 188, 190, 193, 196, 201, 203, 205, 208, 212, 213, 214, 215, 225, 226, 230, 235, 243, 244, 245, 247, 250, 251, 253, 255, 258, 261, 267, 268, 269, 270, 271, 281, 283, 287, 292, 293, 295, 297, 299, 301, 302, 319, 328, 330, 331, 332, 334, 335, 337, 338, 340, 341, 344, 345, 348, 352, 358, 359, 362, 365, 366, 369, 375, 384, 386, 388, 390, 395, 400, 402, 406, 407, 410, 413, 415, 419, 425, 427, 428, 429, 430, 431, 432, 435, 436, 440, 449, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "they": [5, 7, 23, 28, 33, 34, 42, 45, 54, 55, 58, 59, 61, 63, 64, 66, 73, 75, 76, 84, 85, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 108, 109, 110, 112, 115, 120, 126, 133, 138, 139, 140, 141, 144, 151, 153, 155, 158, 161, 163, 167, 169, 170, 176, 177, 178, 179, 181, 183, 184, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 205, 207, 208, 209, 211, 213, 215, 216, 218, 225, 226, 228, 230, 233, 235, 243, 244, 247, 248, 250, 252, 255, 258, 259, 261, 262, 267, 268, 269, 270, 271, 275, 276, 281, 282, 283, 288, 292, 293, 295, 299, 302, 304, 307, 308, 309, 312, 314, 319, 322, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 352, 355, 358, 359, 362, 364, 365, 366, 369, 375, 376, 377, 380, 381, 384, 386, 387, 388, 389, 390, 394, 395, 400, 402, 405, 408, 410, 411, 413, 414, 415, 416, 417, 419, 422, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 442, 449, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "legaci": [5, 23, 33, 58, 68, 75, 143, 163, 164, 194, 196, 198, 202, 205, 206, 209, 217, 235, 250, 255, 256, 270, 288, 292, 293, 332, 340, 341, 347, 352, 362, 388, 422, 432, 435, 455, 461, 469, 474, 475, 476, 477, 479, 481, 482, 483], "py_unicod": [5, 64, 121, 472, 473, 474, 476, 482, 483], "represent": [5, 7, 9, 23, 25, 26, 39, 41, 49, 58, 59, 63, 64, 68, 75, 76, 85, 96, 101, 109, 120, 121, 146, 158, 160, 167, 176, 177, 178, 182, 183, 186, 191, 196, 197, 201, 204, 205, 207, 212, 225, 242, 244, 245, 248, 250, 253, 259, 262, 266, 267, 271, 272, 275, 281, 283, 290, 293, 299, 307, 314, 321, 330, 337, 340, 344, 345, 346, 347, 352, 362, 366, 377, 381, 384, 386, 388, 408, 410, 413, 426, 428, 432, 445, 462, 466, 467, 468, 469, 471, 474, 475, 477, 478, 479, 481, 482, 483, 484], "nonneg": [5, 149, 186, 270, 275, 337, 344, 384, 430, 436], "tini": [5, 84, 85, 181, 462, 468, 469, 483], "overflow": [5, 18, 23, 39, 42, 141, 176, 183, 186, 188, 212, 214, 275, 283, 352, 428, 456, 466, 468, 469, 474, 479, 480, 483], "short": [5, 7, 41, 42, 58, 63, 73, 75, 84, 94, 95, 96, 100, 102, 103, 106, 107, 120, 121, 143, 159, 176, 177, 193, 228, 245, 259, 267, 271, 283, 292, 293, 314, 331, 344, 347, 348, 352, 362, 366, 369, 384, 386, 388, 411, 413, 421, 434, 442, 455, 461, 462, 464, 465, 467, 469, 475, 476, 477, 479, 480, 482, 483], "repres": [5, 6, 7, 9, 11, 13, 17, 20, 22, 25, 33, 39, 42, 45, 47, 55, 58, 60, 63, 64, 66, 68, 73, 77, 84, 85, 92, 94, 95, 96, 99, 102, 103, 106, 109, 110, 120, 126, 133, 139, 144, 146, 151, 153, 158, 167, 176, 177, 183, 186, 191, 194, 197, 199, 201, 203, 206, 208, 209, 213, 215, 221, 225, 242, 243, 244, 248, 250, 251, 252, 253, 255, 258, 259, 262, 266, 267, 268, 270, 271, 272, 275, 276, 281, 282, 283, 285, 288, 292, 293, 299, 304, 305, 307, 308, 314, 319, 321, 322, 325, 328, 332, 333, 335, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 352, 353, 358, 359, 362, 365, 366, 369, 375, 376, 377, 381, 384, 386, 388, 397, 400, 402, 405, 410, 411, 412, 413, 415, 416, 419, 420, 421, 422, 425, 426, 427, 428, 430, 432, 435, 462, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "float": [5, 16, 18, 41, 42, 47, 58, 63, 68, 76, 78, 84, 85, 87, 93, 94, 96, 112, 115, 120, 121, 126, 139, 141, 154, 160, 162, 167, 175, 176, 181, 183, 190, 193, 209, 213, 221, 223, 225, 226, 227, 233, 248, 250, 254, 261, 262, 266, 271, 274, 275, 283, 284, 289, 290, 292, 293, 299, 304, 308, 318, 319, 322, 328, 333, 337, 340, 341, 343, 345, 347, 352, 358, 365, 366, 376, 378, 379, 384, 385, 386, 387, 388, 408, 419, 427, 430, 436, 440, 442, 444, 449, 450, 451, 452, 456, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484], "doubl": [5, 15, 18, 25, 35, 39, 58, 63, 64, 75, 76, 78, 85, 96, 102, 106, 121, 158, 160, 176, 177, 182, 189, 193, 209, 235, 247, 248, 262, 269, 275, 283, 293, 297, 319, 331, 344, 345, 347, 348, 359, 362, 389, 408, 417, 419, 427, 428, 430, 431, 435, 442, 444, 449, 461, 465, 466, 467, 468, 473, 474, 475, 476, 479, 480, 481, 483], "py_complex": [5, 15, 73], "program": [5, 31, 33, 34, 42, 45, 66, 68, 72, 73, 77, 84, 86, 89, 93, 94, 95, 97, 101, 102, 106, 110, 112, 118, 120, 125, 126, 133, 135, 137, 140, 146, 151, 155, 157, 158, 159, 160, 164, 167, 168, 169, 176, 183, 186, 193, 200, 201, 203, 208, 213, 214, 216, 222, 224, 225, 226, 227, 228, 234, 246, 247, 248, 250, 254, 255, 267, 269, 271, 272, 276, 282, 292, 293, 296, 297, 299, 307, 308, 309, 311, 313, 314, 319, 322, 328, 330, 333, 337, 338, 340, 341, 344, 347, 348, 352, 353, 354, 362, 365, 368, 375, 376, 380, 381, 384, 386, 388, 394, 395, 400, 402, 403, 405, 410, 411, 419, 421, 422, 426, 427, 428, 430, 433, 434, 435, 436, 440, 452, 455, 456, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 480, 481, 483], "thus": [5, 7, 10, 33, 42, 54, 73, 84, 85, 94, 100, 101, 102, 117, 120, 140, 167, 169, 176, 177, 193, 201, 204, 205, 208, 225, 228, 235, 243, 250, 251, 259, 262, 266, 267, 268, 269, 275, 283, 292, 293, 299, 313, 319, 331, 332, 334, 337, 340, 341, 344, 348, 352, 358, 362, 366, 384, 386, 388, 394, 395, 405, 421, 425, 427, 430, 432, 435, 436, 455, 461, 462, 470, 475, 476, 477, 478, 479, 481, 483], "receiv": [5, 23, 33, 45, 49, 67, 68, 72, 73, 76, 84, 95, 101, 110, 115, 120, 126, 132, 133, 136, 138, 151, 155, 158, 167, 176, 190, 213, 225, 235, 242, 243, 244, 245, 247, 248, 259, 267, 268, 269, 283, 288, 295, 299, 305, 309, 314, 322, 329, 332, 333, 335, 337, 338, 341, 348, 353, 359, 365, 376, 381, 388, 395, 400, 402, 410, 411, 413, 414, 415, 420, 426, 427, 429, 430, 462, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483], "actual": [5, 7, 13, 23, 33, 39, 49, 55, 58, 61, 63, 64, 66, 73, 75, 76, 77, 84, 85, 92, 93, 94, 96, 99, 101, 102, 106, 109, 117, 126, 139, 149, 151, 158, 160, 167, 169, 173, 176, 177, 178, 181, 191, 193, 197, 198, 200, 203, 206, 207, 209, 213, 225, 230, 234, 245, 248, 250, 251, 252, 253, 255, 261, 265, 267, 268, 269, 270, 271, 278, 281, 283, 292, 293, 295, 297, 305, 308, 320, 324, 325, 330, 333, 334, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 358, 365, 369, 372, 381, 384, 386, 388, 389, 390, 395, 399, 402, 405, 410, 414, 422, 426, 427, 428, 429, 432, 434, 435, 436, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 475, 476, 477, 478, 480, 481, 482, 483], "strong": [5, 7, 9, 13, 23, 26, 33, 49, 58, 59, 63, 64, 73, 75, 87, 94, 101, 103, 139, 170, 183, 225, 240, 341, 352, 402, 415, 422, 428, 432, 456, 463, 464, 467, 468, 473, 479, 483], "count": [5, 7, 9, 33, 34, 35, 45, 54, 58, 63, 64, 68, 74, 75, 76, 78, 80, 84, 85, 87, 89, 93, 94, 95, 96, 100, 102, 106, 120, 121, 126, 139, 144, 146, 148, 151, 160, 161, 176, 177, 188, 190, 191, 193, 196, 208, 211, 218, 226, 236, 247, 248, 250, 255, 261, 267, 271, 278, 281, 283, 284, 288, 292, 293, 297, 299, 305, 308, 318, 319, 328, 331, 337, 340, 341, 344, 345, 347, 352, 362, 364, 365, 366, 369, 380, 382, 388, 395, 400, 413, 428, 430, 435, 436, 442, 446, 452, 455, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 481, 483], "increas": [5, 68, 76, 89, 94, 99, 101, 109, 120, 122, 158, 190, 191, 221, 247, 255, 259, 267, 270, 290, 293, 328, 340, 344, 352, 376, 382, 384, 388, 400, 412, 414, 428, 435, 456, 462, 464, 465, 468, 469, 476, 479, 480, 481, 482, 483], "typeobject": [5, 93, 464, 483], "similar": [5, 7, 9, 13, 22, 23, 26, 28, 31, 33, 45, 49, 58, 59, 60, 63, 64, 66, 67, 72, 73, 75, 79, 84, 85, 93, 94, 95, 96, 100, 101, 102, 106, 109, 110, 112, 120, 126, 133, 137, 139, 143, 146, 151, 157, 158, 163, 167, 169, 170, 176, 177, 180, 181, 183, 184, 186, 188, 190, 191, 193, 195, 196, 205, 207, 213, 220, 225, 226, 228, 230, 233, 235, 242, 243, 245, 247, 250, 251, 252, 255, 258, 259, 261, 266, 268, 270, 271, 276, 282, 283, 292, 293, 297, 299, 301, 302, 305, 308, 313, 319, 321, 331, 332, 335, 337, 338, 339, 340, 341, 344, 347, 348, 352, 355, 358, 364, 365, 366, 369, 375, 381, 382, 384, 386, 388, 390, 394, 402, 408, 410, 411, 413, 414, 417, 419, 422, 425, 427, 428, 430, 432, 435, 436, 455, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "anyth": [5, 28, 41, 63, 72, 73, 76, 85, 92, 95, 101, 102, 106, 109, 120, 137, 151, 176, 177, 178, 181, 183, 186, 193, 196, 203, 247, 248, 257, 258, 267, 269, 283, 292, 297, 301, 319, 323, 330, 334, 335, 341, 345, 348, 352, 353, 362, 365, 369, 376, 384, 386, 394, 405, 413, 421, 427, 428, 430, 432, 441, 461, 463, 464, 467, 468, 476, 477, 481, 483], "arbitrari": [5, 13, 23, 33, 39, 42, 45, 55, 59, 61, 63, 68, 72, 74, 76, 84, 85, 94, 95, 102, 106, 109, 110, 115, 120, 133, 143, 151, 158, 159, 169, 175, 176, 179, 183, 186, 191, 203, 208, 225, 230, 233, 234, 245, 248, 250, 251, 255, 259, 262, 267, 268, 271, 275, 283, 287, 290, 293, 295, 297, 299, 307, 313, 319, 322, 328, 330, 333, 334, 337, 338, 339, 340, 344, 345, 352, 354, 358, 362, 365, 366, 369, 384, 386, 388, 390, 397, 410, 413, 419, 420, 421, 428, 445, 455, 456, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 483], "turn": [5, 23, 33, 34, 58, 63, 68, 73, 85, 89, 92, 93, 95, 101, 106, 109, 110, 112, 120, 128, 155, 158, 167, 176, 177, 190, 193, 194, 208, 209, 225, 243, 245, 247, 255, 266, 267, 268, 283, 292, 298, 301, 311, 315, 316, 320, 328, 333, 335, 337, 344, 361, 362, 365, 369, 384, 388, 395, 400, 420, 427, 432, 434, 435, 455, 456, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 475, 476, 477, 479, 483], "status": [5, 33, 34, 49, 59, 63, 73, 84, 92, 94, 101, 102, 105, 110, 115, 120, 144, 177, 196, 205, 207, 213, 214, 241, 242, 245, 247, 248, 271, 283, 288, 292, 293, 305, 307, 309, 311, 334, 338, 340, 348, 352, 376, 395, 407, 438, 441, 448, 462, 466, 467, 469, 470, 472, 474, 475, 477, 478, 479, 480, 482, 483], "where": [5, 23, 24, 33, 34, 35, 40, 42, 45, 47, 49, 54, 56, 58, 59, 61, 63, 64, 66, 73, 75, 76, 77, 78, 79, 84, 85, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 109, 110, 112, 120, 122, 126, 133, 139, 141, 144, 151, 152, 153, 158, 163, 167, 169, 176, 177, 181, 183, 186, 188, 190, 191, 193, 196, 199, 201, 202, 203, 205, 208, 213, 215, 221, 225, 226, 230, 235, 242, 243, 245, 247, 248, 250, 251, 253, 255, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 275, 276, 278, 281, 282, 283, 288, 292, 293, 295, 297, 299, 302, 307, 308, 312, 313, 314, 319, 324, 328, 331, 332, 333, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 353, 355, 358, 359, 361, 362, 365, 366, 369, 371, 376, 378, 380, 381, 382, 384, 385, 386, 388, 389, 390, 394, 395, 399, 400, 402, 410, 411, 412, 413, 415, 416, 419, 421, 422, 423, 425, 426, 427, 428, 429, 430, 432, 434, 435, 436, 440, 443, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "success": [5, 7, 9, 11, 13, 17, 22, 23, 27, 31, 33, 34, 35, 39, 40, 42, 45, 47, 49, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 73, 75, 76, 77, 79, 80, 85, 92, 95, 101, 106, 110, 115, 122, 126, 132, 133, 139, 159, 163, 167, 169, 176, 177, 191, 193, 209, 215, 223, 242, 245, 248, 250, 261, 266, 269, 278, 283, 288, 292, 293, 295, 299, 305, 314, 319, 323, 332, 335, 337, 340, 341, 344, 347, 348, 352, 365, 375, 376, 388, 395, 410, 423, 427, 428, 432, 436, 453, 456, 462, 465, 466, 469, 475, 477, 478, 479, 481, 483], "has": [5, 7, 9, 11, 13, 17, 22, 23, 24, 25, 26, 27, 28, 31, 33, 34, 35, 40, 42, 43, 45, 46, 47, 49, 56, 58, 59, 61, 63, 64, 71, 72, 73, 75, 76, 77, 78, 79, 84, 85, 92, 93, 94, 95, 99, 100, 101, 102, 103, 106, 109, 110, 112, 115, 117, 120, 126, 128, 129, 132, 133, 134, 137, 139, 140, 141, 144, 149, 151, 153, 155, 157, 158, 159, 160, 161, 167, 169, 170, 176, 177, 178, 181, 183, 184, 186, 188, 190, 191, 193, 194, 196, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 212, 213, 214, 216, 218, 221, 225, 226, 228, 230, 232, 235, 236, 242, 243, 244, 245, 247, 248, 250, 251, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 275, 276, 281, 283, 288, 292, 293, 295, 296, 297, 299, 302, 304, 305, 307, 308, 311, 312, 313, 314, 318, 319, 320, 322, 324, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 352, 353, 354, 355, 356, 358, 359, 361, 362, 364, 365, 366, 369, 374, 375, 376, 378, 381, 382, 384, 385, 386, 387, 388, 389, 390, 394, 395, 399, 400, 402, 403, 405, 408, 410, 412, 413, 415, 416, 419, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 443, 444, 446, 449, 451, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "leav": [5, 23, 31, 60, 64, 66, 75, 76, 92, 95, 100, 102, 103, 109, 120, 126, 138, 140, 167, 169, 177, 184, 186, 188, 191, 193, 196, 205, 213, 226, 235, 243, 247, 250, 258, 269, 271, 275, 283, 292, 293, 340, 341, 358, 362, 365, 369, 384, 388, 405, 427, 432, 434, 436, 442, 456, 462, 464, 465, 466, 467, 468, 469, 476, 479, 483], "unmodifi": [5, 7, 115, 208, 209, 307, 344, 365, 394, 417, 483], "py_cleanup_support": 5, "get": [5, 7, 17, 23, 26, 30, 31, 33, 34, 39, 42, 45, 49, 54, 58, 61, 63, 64, 66, 68, 72, 73, 75, 76, 77, 78, 79, 80, 87, 88, 92, 93, 94, 95, 98, 100, 101, 102, 106, 109, 110, 117, 120, 126, 128, 129, 133, 134, 136, 137, 139, 141, 144, 151, 158, 160, 161, 167, 169, 170, 176, 177, 181, 183, 184, 185, 186, 188, 189, 190, 193, 196, 200, 205, 206, 208, 209, 213, 216, 222, 225, 228, 230, 232, 233, 235, 241, 242, 243, 245, 247, 248, 250, 251, 255, 258, 261, 265, 266, 267, 268, 269, 271, 279, 281, 283, 288, 289, 292, 293, 295, 297, 299, 302, 305, 308, 309, 313, 316, 318, 320, 322, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 343, 344, 345, 348, 349, 352, 355, 358, 359, 362, 365, 366, 369, 375, 376, 381, 385, 386, 388, 390, 394, 395, 398, 399, 400, 401, 402, 403, 407, 410, 411, 413, 414, 415, 416, 419, 420, 425, 427, 428, 430, 432, 438, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "eventu": [5, 33, 73, 76, 79, 84, 106, 133, 139, 193, 232, 242, 247, 250, 267, 283, 293, 309, 395, 411, 419, 432, 435, 463, 464, 466, 467, 468, 469, 470, 474, 477, 479, 483], "give": [5, 7, 23, 42, 63, 64, 72, 73, 75, 77, 79, 84, 85, 92, 93, 94, 95, 96, 100, 103, 106, 109, 117, 120, 141, 151, 153, 155, 158, 176, 177, 181, 183, 186, 190, 191, 193, 208, 213, 216, 225, 228, 230, 250, 258, 261, 268, 269, 275, 276, 278, 279, 283, 287, 292, 293, 297, 299, 307, 314, 319, 332, 333, 338, 341, 344, 345, 348, 352, 365, 366, 369, 376, 384, 386, 388, 394, 399, 403, 405, 410, 411, 415, 422, 426, 427, 428, 434, 435, 444, 455, 461, 462, 464, 465, 467, 468, 469, 470, 471, 474, 475, 476, 481, 482, 483], "chanc": [5, 59, 75, 101, 102, 139, 140, 250, 365, 467, 474, 481, 483], "had": [5, 22, 33, 42, 61, 72, 76, 85, 95, 102, 112, 120, 140, 155, 158, 169, 170, 177, 183, 186, 191, 199, 243, 255, 283, 293, 297, 314, 328, 337, 341, 369, 380, 382, 388, 394, 410, 428, 432, 436, 441, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "origin": [5, 7, 9, 23, 33, 34, 42, 43, 60, 62, 63, 67, 73, 85, 92, 94, 96, 101, 103, 105, 106, 109, 112, 120, 126, 141, 144, 149, 152, 158, 167, 169, 173, 176, 177, 181, 186, 188, 190, 191, 193, 196, 197, 198, 199, 200, 201, 202, 203, 205, 208, 213, 221, 225, 226, 230, 234, 243, 247, 250, 255, 261, 262, 266, 267, 269, 271, 275, 278, 283, 284, 292, 293, 297, 299, 308, 312, 319, 324, 328, 331, 332, 337, 340, 341, 344, 348, 352, 358, 362, 365, 366, 369, 381, 382, 384, 385, 386, 388, 389, 390, 394, 395, 399, 400, 402, 407, 408, 413, 415, 416, 417, 421, 422, 423, 425, 426, 427, 428, 430, 432, 434, 436, 440, 441, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 481, 483], "bool": [5, 6, 31, 58, 68, 92, 94, 120, 126, 139, 167, 168, 176, 181, 211, 225, 226, 254, 261, 262, 267, 284, 289, 291, 340, 347, 379, 382, 386, 388, 410, 419, 427, 428, 430, 440, 450, 465, 468, 472, 474, 480, 481, 483], "test": [5, 23, 46, 58, 61, 68, 73, 78, 84, 85, 92, 93, 94, 96, 98, 99, 100, 101, 102, 106, 108, 109, 110, 114, 120, 122, 125, 155, 161, 170, 176, 177, 178, 181, 186, 187, 189, 191, 200, 220, 225, 226, 228, 236, 240, 245, 247, 248, 249, 250, 251, 254, 255, 259, 261, 262, 266, 269, 272, 275, 283, 293, 296, 305, 309, 315, 319, 335, 336, 340, 342, 344, 352, 358, 364, 365, 367, 375, 376, 382, 386, 389, 390, 395, 402, 413, 419, 422, 425, 426, 427, 428, 434, 440, 442, 443, 446, 451, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482], "truth": [5, 95, 176, 291, 344, 347, 413, 428, 430, 465, 474, 483], "boolean": [5, 16, 68, 85, 101, 108, 120, 138, 167, 168, 176, 177, 183, 191, 193, 225, 235, 243, 245, 248, 254, 262, 268, 274, 283, 291, 293, 295, 304, 319, 320, 337, 338, 340, 341, 365, 369, 376, 379, 384, 386, 389, 395, 399, 402, 410, 411, 419, 427, 428, 433, 463, 466, 467, 468, 469, 470, 474, 475, 477, 478, 479, 481, 482, 483, 484], "redic": 5, "equival": [5, 7, 9, 13, 22, 23, 24, 33, 40, 42, 45, 47, 49, 54, 55, 58, 60, 61, 63, 64, 68, 73, 76, 78, 94, 95, 100, 106, 112, 115, 117, 120, 133, 137, 139, 149, 158, 163, 167, 169, 176, 177, 178, 181, 183, 186, 190, 191, 196, 204, 205, 207, 225, 226, 228, 234, 235, 243, 244, 245, 247, 250, 251, 253, 255, 259, 261, 266, 267, 268, 269, 270, 271, 275, 283, 292, 293, 294, 296, 299, 301, 302, 308, 319, 321, 324, 329, 337, 338, 344, 345, 348, 352, 355, 358, 362, 365, 366, 369, 381, 384, 385, 386, 387, 388, 394, 403, 405, 410, 422, 427, 428, 430, 435, 436, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 482, 483], "true": [5, 6, 7, 9, 11, 13, 15, 17, 20, 22, 23, 25, 27, 33, 34, 35, 37, 38, 39, 43, 44, 45, 49, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 73, 76, 78, 84, 85, 87, 88, 89, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 107, 108, 109, 112, 114, 115, 116, 120, 122, 125, 126, 129, 130, 132, 133, 134, 135, 136, 138, 139, 143, 144, 146, 149, 150, 151, 153, 154, 155, 157, 158, 160, 161, 163, 166, 167, 168, 169, 170, 173, 175, 176, 177, 179, 181, 183, 186, 188, 189, 190, 191, 193, 196, 198, 200, 201, 203, 204, 205, 207, 208, 209, 211, 213, 214, 215, 216, 218, 220, 221, 225, 226, 227, 228, 230, 231, 232, 235, 236, 238, 240, 241, 242, 243, 248, 250, 251, 252, 253, 255, 258, 259, 261, 262, 263, 266, 267, 268, 269, 270, 271, 275, 276, 278, 282, 283, 284, 288, 291, 292, 293, 294, 295, 296, 297, 299, 301, 303, 304, 307, 308, 311, 312, 314, 316, 317, 319, 320, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 345, 346, 347, 348, 351, 352, 355, 358, 360, 362, 364, 365, 366, 369, 373, 376, 377, 380, 381, 382, 384, 385, 386, 388, 389, 390, 394, 395, 396, 397, 399, 400, 402, 403, 405, 407, 410, 411, 412, 413, 415, 417, 419, 420, 421, 422, 423, 425, 427, 428, 430, 431, 435, 436, 440, 441, 442, 443, 444, 446, 448, 449, 450, 452, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "fals": [5, 6, 7, 22, 33, 34, 35, 47, 49, 58, 63, 64, 66, 73, 84, 85, 89, 92, 94, 95, 96, 99, 100, 101, 102, 107, 108, 109, 110, 114, 115, 116, 120, 122, 126, 129, 132, 133, 134, 135, 136, 138, 139, 143, 144, 146, 149, 150, 151, 153, 154, 155, 157, 158, 160, 161, 163, 166, 167, 168, 169, 170, 175, 176, 177, 179, 181, 183, 186, 188, 190, 191, 193, 196, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 216, 218, 220, 225, 226, 227, 228, 230, 231, 232, 235, 236, 241, 242, 243, 245, 248, 250, 252, 253, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 275, 276, 283, 284, 288, 291, 292, 293, 294, 295, 296, 297, 299, 303, 304, 307, 311, 312, 314, 316, 317, 319, 320, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 355, 358, 360, 362, 364, 365, 366, 369, 372, 373, 376, 380, 381, 382, 384, 385, 386, 388, 389, 390, 394, 395, 396, 397, 399, 400, 402, 403, 407, 413, 415, 417, 419, 420, 421, 422, 425, 427, 428, 430, 431, 435, 436, 440, 441, 442, 443, 444, 449, 450, 452, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "express": [5, 22, 40, 47, 49, 54, 60, 66, 68, 73, 85, 87, 93, 102, 120, 122, 139, 144, 159, 161, 163, 167, 183, 186, 190, 191, 193, 213, 220, 225, 230, 247, 254, 255, 259, 261, 266, 268, 283, 293, 297, 308, 323, 333, 337, 340, 341, 344, 345, 347, 352, 353, 359, 362, 363, 366, 369, 378, 380, 385, 386, 387, 388, 400, 402, 413, 419, 426, 427, 428, 429, 431, 432, 433, 435, 439, 442, 446, 447, 449, 451, 455, 462, 463, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484], "valid": [5, 7, 11, 23, 28, 34, 42, 61, 63, 64, 66, 68, 72, 73, 85, 92, 99, 100, 106, 109, 112, 120, 139, 143, 146, 151, 157, 158, 159, 163, 167, 169, 173, 176, 177, 181, 183, 184, 186, 187, 189, 191, 194, 195, 197, 203, 207, 209, 225, 242, 244, 245, 247, 250, 255, 256, 258, 259, 262, 265, 267, 268, 270, 278, 281, 283, 287, 288, 293, 301, 302, 304, 308, 311, 314, 319, 322, 323, 324, 331, 333, 335, 337, 340, 341, 344, 345, 347, 348, 352, 358, 362, 365, 366, 376, 378, 384, 386, 387, 388, 394, 395, 405, 411, 413, 415, 416, 420, 422, 423, 425, 427, 428, 431, 432, 435, 436, 443, 451, 455, 456, 462, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "see": [5, 7, 11, 23, 26, 30, 31, 33, 34, 40, 42, 45, 47, 58, 59, 61, 62, 63, 64, 66, 71, 72, 73, 75, 76, 77, 79, 80, 84, 85, 87, 92, 93, 94, 95, 96, 100, 101, 102, 103, 105, 106, 108, 109, 110, 112, 120, 126, 132, 133, 137, 139, 141, 143, 144, 151, 155, 158, 161, 163, 167, 168, 169, 173, 176, 177, 181, 183, 184, 186, 188, 190, 191, 193, 195, 196, 197, 200, 201, 202, 203, 205, 206, 207, 208, 213, 214, 215, 216, 218, 220, 221, 223, 225, 226, 230, 233, 234, 235, 242, 243, 245, 247, 248, 250, 251, 255, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 272, 275, 278, 279, 281, 283, 288, 292, 293, 295, 297, 299, 301, 302, 304, 305, 308, 311, 313, 314, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 345, 347, 348, 352, 353, 354, 355, 356, 358, 359, 361, 362, 364, 365, 366, 369, 371, 375, 376, 380, 381, 382, 384, 385, 386, 388, 390, 394, 395, 399, 400, 402, 405, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 441, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "how": [5, 7, 11, 33, 42, 58, 61, 63, 64, 68, 71, 72, 73, 75, 76, 77, 92, 93, 95, 96, 99, 100, 101, 103, 106, 109, 110, 112, 117, 120, 126, 132, 133, 137, 139, 140, 141, 144, 149, 151, 155, 158, 163, 167, 176, 181, 183, 184, 186, 187, 189, 190, 194, 195, 200, 201, 202, 207, 218, 222, 225, 226, 230, 235, 242, 243, 244, 247, 250, 251, 253, 255, 258, 259, 261, 262, 266, 267, 268, 269, 272, 278, 283, 288, 293, 298, 299, 308, 311, 319, 320, 321, 322, 331, 332, 333, 337, 338, 341, 344, 346, 348, 352, 358, 364, 365, 366, 368, 376, 380, 382, 386, 388, 390, 394, 395, 399, 402, 408, 410, 419, 421, 425, 427, 428, 429, 430, 432, 435, 436, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "item": [5, 7, 14, 22, 23, 31, 33, 34, 35, 36, 37, 38, 40, 49, 54, 60, 63, 64, 68, 73, 76, 79, 84, 87, 94, 95, 102, 106, 112, 120, 122, 134, 141, 147, 151, 157, 158, 160, 161, 167, 170, 171, 176, 181, 184, 189, 190, 191, 193, 196, 197, 200, 205, 209, 213, 225, 226, 233, 235, 236, 244, 247, 248, 250, 252, 253, 261, 262, 268, 269, 271, 275, 276, 279, 283, 288, 291, 293, 299, 302, 307, 308, 313, 316, 319, 320, 324, 332, 334, 337, 339, 340, 341, 344, 345, 347, 348, 352, 354, 359, 361, 362, 365, 368, 369, 375, 378, 381, 384, 385, 386, 394, 402, 405, 407, 408, 410, 412, 413, 416, 419, 422, 423, 427, 428, 430, 431, 432, 434, 435, 436, 440, 441, 442, 446, 449, 450, 452, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 480, 481, 483], "individu": [5, 13, 42, 45, 58, 61, 63, 92, 94, 99, 100, 101, 102, 106, 112, 117, 120, 158, 177, 184, 186, 190, 191, 193, 196, 198, 203, 206, 230, 248, 249, 261, 267, 271, 281, 282, 283, 293, 313, 319, 332, 336, 344, 345, 353, 356, 358, 359, 364, 366, 369, 376, 384, 386, 388, 394, 400, 408, 413, 419, 420, 422, 426, 428, 432, 434, 436, 440, 455, 463, 466, 467, 469, 471, 476, 477, 482, 483], "nest": [5, 13, 68, 73, 85, 87, 94, 95, 101, 106, 113, 139, 160, 169, 176, 181, 186, 190, 191, 193, 199, 213, 226, 255, 261, 262, 267, 271, 283, 297, 302, 307, 312, 314, 319, 344, 352, 365, 369, 376, 381, 386, 388, 413, 415, 427, 428, 429, 430, 435, 436, 441, 442, 455, 462, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 483, 484], "possibl": [5, 7, 13, 22, 23, 27, 31, 33, 34, 39, 42, 47, 49, 58, 61, 63, 64, 66, 68, 71, 72, 73, 76, 78, 79, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 109, 112, 115, 117, 120, 126, 132, 139, 140, 141, 149, 151, 158, 159, 163, 167, 169, 170, 173, 176, 177, 180, 181, 183, 184, 186, 190, 191, 193, 194, 196, 197, 200, 201, 202, 203, 205, 206, 208, 213, 218, 222, 225, 226, 232, 235, 242, 245, 247, 250, 255, 258, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 282, 283, 288, 292, 293, 295, 297, 299, 302, 304, 308, 309, 311, 312, 314, 319, 320, 323, 328, 331, 332, 333, 337, 340, 341, 344, 345, 346, 347, 348, 352, 355, 356, 358, 359, 362, 364, 365, 366, 369, 375, 376, 382, 385, 386, 388, 394, 395, 400, 402, 403, 405, 406, 413, 415, 416, 419, 421, 422, 423, 426, 427, 428, 430, 431, 434, 435, 436, 440, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "exceed": [5, 59, 126, 139, 167, 186, 212, 213, 225, 269, 284, 293, 299, 307, 322, 344, 364, 365, 381, 410, 422, 465, 466, 468, 469, 479, 480, 483], "platform": [5, 9, 25, 33, 34, 35, 42, 51, 59, 61, 64, 68, 72, 73, 75, 76, 84, 85, 102, 115, 118, 126, 133, 156, 158, 163, 173, 176, 183, 186, 189, 193, 208, 212, 213, 219, 225, 235, 247, 250, 251, 254, 257, 258, 266, 269, 271, 275, 282, 283, 292, 293, 294, 307, 308, 309, 322, 323, 326, 328, 329, 333, 337, 338, 340, 341, 342, 347, 348, 352, 354, 355, 358, 362, 365, 366, 368, 369, 378, 388, 399, 403, 406, 407, 425, 430, 435, 450, 455, 456, 459, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484], "long_max": [5, 18, 39, 483], "howev": [5, 23, 24, 33, 34, 42, 45, 49, 63, 71, 72, 73, 76, 84, 85, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 108, 109, 110, 112, 120, 126, 128, 133, 135, 139, 151, 158, 161, 167, 169, 170, 176, 177, 181, 186, 190, 193, 194, 196, 199, 201, 203, 205, 206, 208, 209, 213, 225, 226, 230, 235, 243, 245, 247, 248, 250, 252, 255, 258, 259, 261, 267, 268, 269, 271, 272, 281, 283, 288, 292, 293, 299, 311, 319, 328, 331, 332, 333, 334, 337, 340, 341, 344, 345, 348, 352, 353, 354, 355, 358, 362, 364, 365, 366, 369, 376, 378, 381, 385, 386, 387, 388, 390, 397, 402, 403, 405, 410, 411, 415, 416, 419, 422, 426, 428, 429, 430, 432, 455, 461, 462, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 483], "proper": [5, 23, 33, 34, 40, 45, 49, 59, 63, 72, 73, 75, 76, 85, 96, 100, 102, 106, 126, 137, 169, 170, 177, 190, 191, 202, 203, 207, 209, 213, 230, 235, 245, 247, 250, 266, 283, 293, 308, 314, 332, 335, 337, 341, 344, 347, 348, 352, 358, 362, 365, 369, 376, 386, 388, 394, 395, 410, 413, 415, 427, 428, 430, 461, 462, 463, 464, 465, 469, 470, 474, 476, 477, 478, 479, 480, 481, 483], "rang": [5, 7, 18, 23, 25, 39, 59, 64, 68, 72, 73, 76, 84, 85, 87, 92, 93, 94, 95, 96, 99, 102, 104, 106, 109, 110, 112, 120, 126, 134, 138, 139, 141, 144, 149, 158, 166, 167, 169, 176, 177, 178, 183, 186, 190, 191, 193, 212, 213, 225, 226, 235, 236, 241, 244, 248, 254, 255, 259, 261, 262, 278, 283, 284, 288, 293, 295, 297, 299, 303, 304, 305, 308, 315, 316, 318, 319, 322, 326, 333, 335, 337, 340, 341, 343, 345, 347, 352, 353, 365, 366, 367, 369, 375, 378, 381, 382, 384, 386, 388, 394, 406, 410, 419, 425, 427, 428, 429, 430, 432, 434, 435, 436, 440, 442, 443, 445, 446, 449, 450, 451, 452, 455, 459, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "most": [5, 7, 9, 23, 25, 31, 33, 34, 39, 42, 45, 58, 59, 61, 63, 64, 66, 72, 73, 75, 76, 77, 79, 84, 89, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 109, 110, 112, 114, 115, 120, 125, 126, 133, 136, 139, 141, 143, 144, 146, 149, 151, 153, 158, 160, 167, 169, 176, 177, 183, 184, 186, 188, 190, 191, 193, 194, 196, 197, 198, 200, 201, 202, 203, 205, 207, 211, 213, 214, 215, 221, 225, 226, 230, 233, 234, 243, 247, 248, 250, 251, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 272, 275, 278, 283, 284, 292, 293, 295, 296, 297, 299, 302, 305, 307, 308, 314, 319, 321, 328, 329, 330, 332, 333, 335, 337, 338, 340, 341, 342, 344, 345, 347, 348, 352, 355, 356, 358, 362, 364, 365, 366, 369, 374, 375, 381, 382, 384, 386, 387, 388, 389, 390, 394, 395, 400, 402, 403, 406, 408, 410, 411, 413, 414, 415, 416, 421, 422, 425, 427, 428, 429, 430, 432, 434, 436, 440, 441, 442, 443, 446, 449, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "signific": [5, 41, 85, 95, 99, 102, 106, 109, 126, 132, 133, 158, 169, 178, 186, 193, 197, 225, 258, 259, 261, 269, 275, 293, 299, 308, 341, 344, 345, 352, 365, 388, 411, 428, 432, 434, 435, 444, 455, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "bit": [5, 7, 25, 30, 41, 42, 58, 61, 63, 64, 66, 68, 73, 75, 76, 85, 86, 92, 93, 94, 95, 99, 102, 106, 109, 117, 118, 133, 141, 146, 152, 153, 154, 158, 167, 169, 177, 178, 186, 191, 193, 195, 200, 201, 202, 205, 208, 215, 216, 225, 227, 230, 235, 243, 244, 259, 266, 270, 275, 287, 289, 292, 293, 295, 299, 303, 306, 315, 319, 322, 328, 332, 336, 337, 341, 342, 344, 347, 348, 349, 352, 356, 358, 360, 366, 369, 376, 390, 397, 398, 404, 410, 421, 422, 424, 427, 428, 430, 435, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "silent": [5, 22, 40, 49, 56, 59, 66, 101, 102, 109, 115, 133, 140, 169, 186, 218, 248, 267, 269, 271, 278, 283, 284, 293, 295, 297, 307, 308, 330, 332, 334, 340, 348, 365, 394, 425, 436, 455, 461, 462, 466, 467, 469, 470, 474, 475, 477, 478, 480, 481, 482, 483], "truncat": [5, 59, 64, 84, 96, 141, 142, 149, 177, 183, 186, 225, 234, 248, 258, 261, 270, 293, 320, 337, 340, 344, 347, 360, 362, 364, 381, 382, 397, 422, 428, 430, 446, 462, 464, 468, 469, 470, 475, 476, 477, 478, 480, 483], "too": [5, 35, 63, 66, 75, 84, 92, 94, 95, 101, 102, 103, 106, 109, 110, 133, 137, 139, 151, 158, 167, 169, 176, 184, 186, 188, 191, 193, 194, 204, 212, 213, 230, 243, 257, 258, 259, 283, 292, 305, 307, 314, 332, 333, 337, 338, 340, 341, 344, 345, 347, 348, 352, 359, 362, 365, 369, 384, 386, 388, 390, 413, 422, 423, 428, 432, 434, 451, 455, 462, 463, 464, 465, 466, 468, 469, 470, 474, 476, 478, 480, 481, 483], "small": [5, 33, 39, 42, 55, 58, 63, 68, 73, 84, 85, 92, 94, 99, 102, 106, 108, 109, 158, 169, 176, 186, 190, 193, 243, 247, 258, 261, 271, 275, 283, 288, 293, 308, 319, 330, 333, 337, 344, 362, 365, 375, 382, 388, 407, 413, 428, 436, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 479, 481, 482, 483], "semant": [5, 7, 11, 13, 27, 57, 63, 64, 94, 101, 102, 133, 139, 161, 186, 193, 196, 202, 205, 207, 208, 225, 248, 250, 252, 255, 267, 268, 269, 271, 283, 292, 293, 295, 299, 311, 316, 319, 330, 331, 332, 337, 342, 352, 365, 366, 386, 394, 405, 423, 425, 427, 428, 429, 430, 432, 436, 455, 456, 462, 464, 465, 467, 468, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483], "inherit": [5, 28, 34, 61, 63, 68, 75, 76, 85, 87, 93, 94, 100, 103, 116, 118, 120, 126, 128, 139, 155, 158, 161, 169, 176, 177, 183, 199, 213, 221, 222, 225, 234, 235, 247, 250, 255, 258, 259, 269, 271, 283, 292, 299, 315, 328, 337, 338, 341, 342, 348, 362, 365, 369, 376, 378, 386, 410, 414, 415, 416, 427, 428, 430, 445, 461, 462, 465, 467, 468, 470, 474, 476, 478, 480, 481, 482, 483], "from": [5, 7, 9, 10, 11, 13, 22, 23, 24, 25, 26, 27, 28, 31, 34, 39, 41, 42, 43, 45, 46, 47, 49, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 71, 72, 74, 75, 76, 77, 87, 88, 89, 91, 92, 94, 95, 99, 101, 103, 106, 107, 108, 109, 110, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 126, 128, 132, 133, 135, 136, 137, 138, 140, 141, 143, 144, 146, 147, 149, 151, 152, 153, 155, 157, 158, 160, 161, 163, 164, 167, 170, 173, 177, 178, 179, 181, 183, 184, 186, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 215, 216, 219, 220, 221, 222, 223, 225, 226, 230, 232, 234, 235, 236, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 280, 281, 283, 284, 285, 288, 292, 293, 295, 296, 297, 298, 299, 301, 302, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 352, 353, 355, 358, 359, 360, 361, 362, 364, 365, 366, 367, 369, 374, 375, 376, 377, 378, 380, 381, 382, 385, 386, 387, 388, 389, 390, 394, 395, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 441, 442, 443, 444, 449, 450, 451, 452, 453, 455, 456, 458, 459, 462, 463, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "downcast": [5, 456], "mileag": [5, 335], "vari": [5, 7, 58, 75, 84, 85, 95, 106, 109, 141, 151, 158, 183, 191, 193, 225, 247, 251, 255, 266, 271, 279, 305, 335, 338, 340, 341, 342, 344, 352, 362, 365, 366, 369, 385, 400, 427, 428, 434, 462, 463, 464, 466, 468, 469, 475, 476, 477], "mean": [5, 7, 13, 22, 23, 27, 31, 33, 34, 42, 45, 59, 61, 63, 64, 66, 67, 73, 75, 76, 84, 93, 95, 96, 99, 100, 101, 102, 105, 106, 109, 110, 112, 115, 117, 120, 122, 126, 133, 139, 141, 144, 151, 155, 158, 163, 167, 169, 170, 176, 177, 178, 181, 183, 184, 186, 190, 191, 193, 196, 202, 203, 205, 206, 207, 208, 209, 214, 215, 216, 218, 220, 225, 226, 228, 233, 234, 235, 242, 243, 244, 247, 250, 251, 252, 253, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 276, 278, 281, 283, 288, 292, 293, 297, 299, 301, 303, 307, 308, 311, 314, 318, 319, 321, 322, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 352, 353, 361, 362, 365, 366, 369, 376, 381, 384, 385, 386, 388, 390, 394, 395, 397, 400, 402, 405, 410, 413, 419, 420, 421, 423, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 449, 451, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "occur": [5, 7, 13, 17, 18, 22, 23, 31, 39, 40, 42, 45, 49, 59, 63, 64, 66, 73, 75, 79, 85, 93, 95, 99, 101, 102, 109, 120, 122, 126, 137, 139, 144, 151, 152, 157, 158, 167, 169, 170, 177, 181, 183, 186, 190, 191, 193, 203, 212, 213, 218, 228, 230, 247, 250, 255, 261, 267, 269, 270, 271, 275, 288, 292, 293, 297, 299, 302, 311, 314, 319, 328, 332, 333, 335, 337, 344, 345, 348, 352, 353, 358, 362, 364, 365, 366, 369, 371, 376, 381, 384, 385, 386, 388, 395, 400, 402, 403, 407, 410, 412, 413, 415, 419, 422, 427, 428, 429, 430, 432, 435, 436, 443, 452, 465, 467, 468, 469, 470, 472, 475, 476, 477, 480, 481, 482, 483], "indic": [5, 7, 31, 32, 33, 41, 42, 49, 54, 56, 58, 59, 61, 63, 64, 68, 73, 75, 76, 84, 85, 99, 101, 102, 103, 106, 109, 110, 117, 120, 122, 126, 137, 139, 151, 155, 157, 158, 167, 169, 173, 176, 177, 183, 186, 189, 191, 196, 202, 203, 205, 208, 209, 213, 223, 225, 226, 228, 234, 235, 241, 242, 243, 245, 247, 248, 250, 251, 255, 258, 261, 266, 267, 268, 270, 271, 276, 278, 283, 288, 292, 293, 295, 297, 303, 305, 307, 308, 311, 314, 318, 319, 328, 329, 332, 333, 335, 337, 338, 340, 341, 342, 344, 345, 347, 348, 352, 353, 358, 361, 362, 365, 366, 369, 376, 377, 381, 386, 388, 394, 395, 399, 400, 405, 406, 408, 410, 413, 419, 422, 426, 427, 428, 430, 431, 432, 435, 436, 443, 449, 455, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 477, 478, 479, 480, 481, 482, 483], "remain": [5, 13, 33, 42, 63, 73, 76, 85, 94, 95, 102, 106, 120, 126, 139, 153, 161, 169, 176, 177, 183, 186, 190, 191, 193, 194, 198, 202, 203, 205, 208, 209, 213, 218, 225, 226, 247, 248, 250, 268, 271, 275, 283, 292, 293, 295, 297, 299, 312, 322, 324, 333, 337, 340, 344, 345, 348, 352, 362, 364, 365, 376, 384, 385, 386, 388, 389, 394, 400, 402, 426, 427, 428, 432, 435, 436, 442, 455, 456, 464, 465, 466, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "option": [5, 23, 33, 34, 42, 47, 49, 58, 59, 61, 63, 64, 66, 68, 72, 73, 75, 78, 88, 89, 92, 93, 94, 95, 96, 100, 101, 102, 106, 109, 110, 112, 115, 118, 119, 122, 126, 128, 135, 137, 139, 140, 141, 143, 146, 151, 152, 153, 155, 157, 158, 160, 161, 163, 167, 169, 170, 173, 176, 177, 181, 183, 185, 186, 187, 188, 189, 190, 191, 195, 196, 197, 200, 201, 202, 204, 205, 206, 207, 209, 213, 214, 216, 218, 221, 223, 225, 226, 230, 234, 235, 241, 242, 245, 248, 250, 251, 252, 254, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 276, 278, 281, 283, 288, 293, 295, 297, 299, 305, 307, 308, 309, 311, 312, 313, 314, 319, 322, 323, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 340, 341, 344, 345, 346, 347, 348, 350, 352, 354, 355, 356, 359, 362, 364, 365, 366, 368, 370, 372, 373, 375, 378, 381, 382, 384, 385, 386, 388, 394, 395, 399, 400, 403, 407, 411, 413, 414, 415, 417, 419, 420, 421, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 449, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483], "their": [5, 7, 28, 33, 34, 42, 45, 55, 61, 63, 64, 68, 72, 73, 75, 76, 77, 84, 85, 92, 93, 95, 96, 99, 100, 101, 102, 103, 106, 109, 110, 112, 115, 120, 126, 132, 137, 139, 151, 158, 163, 167, 169, 170, 176, 177, 181, 183, 184, 186, 191, 193, 194, 195, 196, 203, 205, 207, 208, 213, 214, 215, 216, 218, 225, 226, 230, 235, 243, 244, 250, 251, 255, 258, 259, 261, 262, 266, 267, 268, 269, 275, 279, 282, 283, 288, 292, 293, 297, 299, 307, 308, 312, 313, 314, 324, 325, 326, 329, 332, 333, 335, 337, 340, 341, 342, 344, 345, 347, 348, 352, 355, 358, 361, 362, 363, 365, 366, 369, 375, 376, 381, 382, 383, 384, 386, 387, 388, 389, 394, 395, 399, 400, 402, 410, 411, 412, 413, 415, 417, 419, 421, 422, 425, 426, 427, 428, 429, 430, 432, 435, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "default": [5, 7, 17, 18, 23, 24, 27, 32, 33, 34, 35, 45, 49, 58, 61, 63, 64, 66, 68, 71, 76, 77, 78, 84, 89, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 115, 117, 118, 119, 122, 125, 126, 132, 133, 135, 136, 137, 138, 139, 141, 143, 144, 146, 149, 151, 152, 153, 155, 157, 158, 159, 160, 161, 163, 167, 169, 170, 173, 176, 177, 178, 183, 184, 186, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 215, 216, 218, 223, 225, 226, 228, 230, 234, 235, 242, 243, 244, 245, 247, 248, 250, 251, 252, 255, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 283, 286, 287, 288, 291, 293, 295, 296, 297, 298, 299, 304, 305, 307, 308, 309, 311, 313, 314, 315, 319, 320, 321, 325, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 344, 345, 347, 348, 352, 353, 355, 356, 359, 362, 364, 365, 366, 367, 369, 373, 376, 378, 380, 381, 382, 384, 385, 386, 387, 388, 390, 394, 395, 397, 398, 399, 402, 403, 405, 406, 407, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 423, 425, 427, 428, 429, 430, 431, 432, 435, 436, 448, 451, 453, 455, 456, 458, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483], "touch": [5, 68, 85, 177, 247, 296, 297, 429, 468, 481, 483], "keyword": [5, 58, 63, 64, 66, 68, 74, 75, 76, 84, 87, 95, 100, 101, 102, 115, 120, 122, 126, 135, 139, 140, 149, 151, 158, 160, 167, 170, 176, 177, 183, 186, 189, 190, 191, 193, 196, 205, 206, 207, 208, 213, 218, 225, 226, 230, 235, 243, 245, 247, 251, 254, 255, 261, 262, 264, 266, 267, 268, 271, 278, 283, 288, 292, 293, 297, 299, 304, 307, 313, 315, 319, 321, 323, 325, 331, 332, 335, 337, 344, 345, 348, 352, 356, 358, 362, 364, 365, 369, 376, 384, 385, 386, 388, 389, 390, 395, 399, 400, 403, 411, 413, 420, 422, 427, 428, 429, 430, 431, 433, 436, 442, 443, 445, 462, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 480, 481, 482, 483], "current": [5, 7, 11, 13, 17, 23, 26, 27, 28, 31, 33, 34, 39, 41, 42, 43, 45, 49, 53, 59, 61, 63, 64, 66, 68, 73, 75, 76, 79, 84, 89, 92, 95, 96, 99, 100, 101, 102, 106, 109, 110, 115, 117, 120, 122, 128, 129, 132, 133, 135, 136, 137, 138, 139, 144, 151, 152, 153, 155, 158, 160, 163, 167, 169, 170, 173, 176, 177, 179, 183, 185, 186, 189, 191, 193, 196, 197, 200, 202, 203, 205, 208, 209, 212, 213, 214, 215, 218, 220, 222, 225, 230, 234, 235, 242, 244, 245, 247, 248, 250, 258, 259, 261, 266, 267, 269, 271, 275, 276, 278, 281, 282, 283, 288, 292, 293, 295, 297, 299, 307, 308, 309, 311, 313, 314, 315, 319, 320, 322, 323, 324, 325, 329, 331, 332, 333, 337, 340, 341, 344, 345, 348, 352, 353, 354, 355, 356, 358, 362, 364, 365, 366, 369, 375, 376, 380, 381, 384, 386, 388, 394, 395, 398, 399, 400, 402, 405, 406, 408, 410, 411, 412, 413, 415, 416, 419, 422, 427, 428, 429, 430, 431, 432, 435, 436, 451, 455, 456, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "alway": [5, 7, 9, 11, 13, 17, 23, 25, 31, 33, 34, 37, 39, 40, 42, 43, 45, 47, 49, 54, 55, 56, 58, 59, 60, 61, 63, 64, 67, 73, 75, 76, 79, 85, 92, 93, 94, 95, 96, 100, 101, 102, 106, 110, 112, 115, 120, 126, 133, 139, 141, 143, 144, 146, 149, 151, 157, 158, 163, 167, 176, 177, 179, 181, 183, 184, 186, 190, 191, 193, 195, 196, 203, 205, 206, 207, 208, 214, 216, 221, 226, 230, 234, 235, 236, 242, 244, 245, 247, 248, 250, 251, 255, 257, 258, 259, 262, 266, 267, 269, 270, 271, 272, 275, 283, 292, 293, 295, 299, 307, 309, 319, 324, 330, 331, 333, 334, 337, 338, 340, 341, 344, 345, 347, 348, 352, 354, 358, 362, 364, 365, 366, 369, 376, 377, 384, 386, 388, 394, 395, 400, 402, 405, 410, 413, 415, 417, 422, 425, 427, 428, 429, 430, 432, 435, 436, 449, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "end": [5, 7, 9, 13, 18, 23, 24, 28, 31, 33, 34, 37, 39, 42, 56, 58, 60, 63, 64, 66, 68, 72, 73, 75, 78, 79, 80, 84, 89, 94, 95, 96, 100, 101, 102, 105, 106, 109, 116, 117, 120, 126, 133, 138, 139, 143, 146, 149, 151, 153, 155, 158, 159, 160, 163, 167, 169, 175, 176, 177, 178, 182, 183, 186, 190, 191, 193, 194, 196, 205, 207, 208, 209, 213, 215, 225, 226, 234, 235, 240, 242, 243, 245, 247, 248, 250, 255, 258, 262, 267, 268, 269, 270, 271, 278, 279, 282, 283, 284, 288, 292, 293, 295, 297, 301, 302, 305, 308, 309, 311, 314, 319, 320, 328, 330, 331, 332, 335, 337, 340, 341, 344, 345, 347, 348, 352, 353, 355, 358, 359, 362, 364, 366, 371, 376, 377, 378, 380, 381, 384, 388, 395, 400, 408, 410, 411, 413, 415, 416, 417, 421, 422, 425, 426, 427, 428, 430, 431, 432, 434, 435, 436, 440, 441, 442, 443, 446, 448, 449, 450, 455, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "here": [5, 7, 23, 28, 33, 34, 42, 45, 51, 63, 72, 73, 75, 76, 84, 85, 89, 92, 93, 94, 95, 101, 102, 103, 106, 110, 112, 120, 129, 137, 141, 144, 151, 153, 155, 158, 167, 169, 170, 175, 176, 177, 181, 183, 186, 190, 191, 193, 196, 198, 199, 200, 202, 205, 206, 207, 208, 209, 216, 221, 222, 225, 226, 230, 234, 235, 242, 245, 247, 248, 251, 255, 267, 268, 269, 270, 275, 283, 288, 292, 293, 297, 299, 305, 307, 314, 315, 319, 322, 329, 331, 333, 334, 335, 337, 338, 340, 341, 342, 344, 345, 352, 358, 361, 362, 365, 366, 369, 384, 385, 386, 388, 390, 395, 400, 403, 408, 410, 411, 413, 423, 427, 428, 429, 430, 431, 432, 434, 435, 436, 449, 455, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 475, 476, 478, 479, 480, 481, 482, 483], "colon": [5, 106, 183, 193, 196, 199, 205, 208, 228, 230, 242, 255, 259, 267, 271, 297, 302, 319, 335, 345, 377, 378, 395, 400, 410, 427, 430, 431, 435, 443, 455, 456, 461, 468, 469, 479, 483], "error": [5, 7, 9, 13, 14, 17, 18, 22, 24, 25, 27, 28, 31, 32, 33, 34, 35, 36, 39, 40, 41, 42, 45, 49, 51, 54, 55, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68, 72, 74, 75, 76, 79, 84, 87, 89, 94, 95, 96, 99, 100, 101, 102, 103, 106, 109, 115, 119, 120, 132, 133, 137, 140, 141, 142, 143, 144, 145, 146, 149, 151, 155, 157, 159, 163, 167, 169, 171, 175, 176, 177, 181, 183, 184, 187, 190, 193, 194, 196, 197, 201, 202, 203, 205, 207, 208, 209, 212, 213, 214, 216, 218, 225, 226, 228, 229, 234, 244, 245, 247, 248, 250, 252, 254, 256, 257, 258, 259, 262, 265, 266, 267, 268, 269, 270, 271, 273, 275, 278, 283, 285, 287, 288, 290, 293, 295, 296, 299, 302, 305, 308, 311, 319, 322, 328, 331, 332, 333, 334, 335, 337, 338, 340, 341, 344, 347, 348, 349, 352, 356, 359, 360, 362, 365, 369, 373, 376, 381, 384, 386, 388, 390, 392, 394, 395, 397, 399, 400, 401, 402, 403, 405, 406, 407, 408, 410, 412, 413, 414, 415, 416, 419, 420, 421, 422, 424, 427, 428, 429, 430, 431, 435, 436, 442, 445, 452, 455, 456, 461, 462, 463, 464, 466, 467, 468, 469, 470, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "messag": [5, 23, 33, 34, 54, 59, 66, 68, 72, 73, 75, 76, 79, 84, 85, 89, 92, 95, 99, 106, 109, 110, 120, 126, 133, 136, 142, 143, 144, 146, 151, 155, 157, 158, 163, 174, 176, 177, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 208, 209, 212, 213, 228, 242, 243, 245, 246, 247, 248, 250, 254, 255, 259, 262, 267, 268, 269, 272, 279, 283, 285, 288, 292, 293, 297, 305, 311, 314, 319, 322, 331, 333, 335, 337, 338, 341, 342, 352, 356, 357, 358, 359, 362, 373, 375, 378, 381, 386, 388, 390, 395, 399, 400, 413, 414, 415, 419, 421, 427, 429, 431, 436, 449, 452, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 475, 476, 477, 478, 479, 480, 482, 483], "associ": [5, 23, 33, 58, 61, 63, 66, 73, 75, 76, 84, 87, 92, 94, 99, 100, 101, 102, 106, 110, 115, 120, 126, 135, 139, 144, 151, 158, 175, 177, 179, 186, 191, 193, 194, 196, 201, 203, 213, 230, 242, 245, 247, 248, 250, 252, 255, 267, 276, 283, 292, 293, 295, 297, 299, 314, 328, 329, 337, 344, 346, 348, 353, 358, 362, 365, 369, 375, 376, 386, 388, 402, 403, 405, 406, 410, 413, 415, 416, 419, 420, 422, 423, 426, 427, 428, 429, 431, 432, 436, 442, 454, 461, 469, 475, 476, 477, 480, 481, 482, 483], "semicolon": [5, 33, 76, 106, 297, 340, 427, 436, 455, 461], "mutual": [5, 63, 68, 118, 262, 268, 271, 292, 319, 369, 380, 386, 403, 429, 483], "exclud": [5, 34, 59, 64, 100, 102, 106, 163, 181, 183, 191, 193, 235, 247, 261, 271, 275, 279, 281, 293, 308, 314, 344, 352, 358, 365, 366, 376, 382, 413, 421, 422, 426, 427, 428, 430, 442, 449, 455, 468, 469, 475, 476, 477, 478, 480, 481, 482, 483], "note": [5, 7, 23, 25, 28, 31, 33, 34, 40, 42, 45, 46, 51, 54, 59, 61, 63, 64, 66, 68, 72, 73, 75, 76, 79, 84, 85, 92, 93, 94, 95, 96, 98, 100, 101, 102, 103, 106, 108, 109, 110, 112, 115, 120, 126, 132, 137, 139, 140, 141, 143, 151, 157, 158, 161, 163, 167, 169, 176, 177, 178, 181, 183, 184, 190, 191, 193, 194, 196, 198, 199, 200, 201, 204, 205, 208, 209, 211, 213, 214, 215, 216, 220, 221, 225, 226, 228, 230, 233, 234, 235, 242, 243, 244, 245, 247, 248, 250, 251, 253, 255, 256, 257, 258, 259, 261, 262, 267, 268, 269, 270, 271, 275, 278, 283, 284, 285, 287, 288, 290, 292, 293, 295, 297, 299, 301, 302, 305, 307, 308, 309, 314, 319, 321, 322, 324, 328, 331, 332, 334, 335, 340, 344, 345, 347, 348, 352, 353, 354, 358, 359, 361, 362, 364, 365, 366, 368, 369, 378, 381, 384, 385, 386, 388, 390, 394, 395, 400, 402, 403, 405, 407, 410, 413, 414, 415, 416, 419, 420, 421, 422, 423, 425, 427, 428, 430, 431, 432, 434, 435, 436, 442, 443, 446, 449, 455, 461, 462, 464, 465, 466, 467, 468, 469, 470, 474, 476, 477, 478, 479, 480, 481, 482, 483], "do": [5, 7, 22, 23, 28, 33, 34, 36, 42, 43, 56, 59, 60, 61, 63, 64, 68, 72, 73, 75, 76, 77, 78, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 107, 108, 109, 110, 112, 115, 120, 126, 132, 137, 138, 139, 140, 141, 151, 158, 159, 161, 163, 167, 169, 176, 177, 178, 179, 181, 186, 189, 190, 191, 193, 194, 195, 196, 197, 201, 202, 205, 207, 208, 213, 214, 225, 226, 228, 230, 243, 244, 247, 248, 250, 251, 252, 253, 255, 257, 258, 259, 266, 267, 268, 269, 271, 275, 283, 292, 293, 295, 297, 299, 305, 308, 314, 319, 320, 322, 330, 331, 332, 333, 335, 337, 338, 340, 341, 342, 344, 345, 347, 348, 352, 353, 355, 356, 358, 359, 362, 364, 365, 366, 368, 374, 375, 376, 378, 380, 382, 384, 386, 388, 390, 394, 395, 399, 400, 402, 403, 406, 410, 411, 413, 414, 415, 417, 419, 421, 422, 425, 426, 427, 428, 429, 430, 432, 435, 436, 441, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "decrement": [5, 7, 9, 63, 73, 76, 85, 100, 139, 191, 283, 293, 297, 333, 365, 376, 428, 483], "determin": [5, 7, 11, 22, 23, 33, 34, 39, 40, 45, 49, 54, 60, 63, 68, 73, 75, 76, 85, 92, 94, 99, 101, 102, 103, 106, 109, 120, 126, 133, 144, 151, 157, 158, 159, 161, 176, 177, 179, 181, 182, 184, 186, 189, 190, 191, 193, 197, 203, 208, 213, 215, 225, 230, 242, 247, 248, 249, 250, 255, 259, 265, 266, 267, 268, 269, 270, 271, 272, 275, 279, 283, 292, 293, 295, 297, 299, 307, 308, 311, 314, 318, 319, 320, 321, 328, 330, 331, 332, 333, 334, 337, 340, 344, 346, 347, 348, 352, 354, 355, 356, 358, 361, 366, 369, 376, 378, 384, 386, 388, 395, 400, 405, 410, 415, 421, 425, 426, 427, 429, 430, 432, 434, 435, 436, 455, 461, 464, 465, 467, 468, 469, 471, 474, 475, 476, 477, 478, 480, 483], "abov": [5, 7, 23, 33, 34, 42, 58, 63, 64, 72, 73, 75, 76, 85, 87, 92, 94, 95, 99, 100, 101, 102, 103, 106, 108, 109, 110, 112, 115, 117, 120, 126, 137, 139, 149, 151, 158, 163, 167, 169, 176, 177, 178, 179, 181, 183, 184, 186, 188, 189, 190, 191, 193, 197, 200, 203, 205, 208, 213, 215, 225, 230, 234, 235, 242, 243, 247, 251, 258, 266, 267, 268, 269, 270, 275, 278, 283, 288, 292, 293, 297, 299, 308, 313, 319, 324, 332, 333, 334, 335, 337, 340, 341, 342, 344, 345, 347, 348, 352, 354, 362, 366, 369, 375, 376, 380, 384, 386, 388, 394, 395, 397, 402, 405, 408, 410, 413, 420, 421, 426, 427, 428, 431, 432, 434, 435, 436, 443, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 480, 481, 482, 483], "what": [5, 9, 23, 25, 26, 31, 33, 34, 39, 40, 42, 49, 51, 54, 58, 63, 64, 68, 72, 75, 76, 93, 94, 95, 96, 102, 103, 106, 109, 110, 112, 120, 126, 133, 139, 151, 158, 163, 167, 170, 176, 177, 183, 185, 186, 187, 199, 200, 201, 203, 207, 208, 213, 215, 225, 230, 235, 243, 244, 247, 248, 249, 250, 251, 261, 266, 267, 268, 269, 270, 272, 279, 293, 295, 298, 307, 311, 314, 319, 320, 328, 332, 336, 337, 338, 340, 341, 344, 345, 346, 347, 348, 352, 358, 361, 362, 368, 375, 376, 380, 383, 384, 386, 388, 394, 400, 410, 411, 413, 421, 427, 429, 430, 432, 434, 435, 436, 442, 461, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "succeed": [5, 7, 9, 11, 13, 17, 25, 37, 39, 40, 43, 45, 47, 49, 54, 55, 56, 60, 61, 63, 64, 67, 85, 106, 176, 193, 209, 232, 249, 288, 293, 332, 336, 337, 341, 362, 388, 390, 394, 395, 405, 410, 427, 429, 431, 455, 464, 465, 466, 483], "arg": [5, 10, 20, 23, 28, 33, 34, 35, 36, 58, 59, 61, 62, 63, 64, 66, 72, 73, 75, 76, 78, 84, 85, 87, 89, 93, 94, 100, 101, 102, 112, 115, 116, 120, 122, 125, 126, 132, 137, 139, 140, 142, 144, 155, 160, 166, 169, 170, 175, 176, 177, 183, 190, 191, 197, 200, 203, 205, 211, 212, 213, 215, 225, 226, 228, 232, 247, 248, 250, 253, 255, 261, 267, 268, 269, 271, 283, 284, 291, 292, 293, 297, 299, 300, 307, 308, 316, 318, 335, 344, 345, 348, 352, 355, 359, 362, 365, 376, 380, 384, 386, 388, 389, 390, 395, 399, 402, 427, 428, 431, 436, 441, 443, 448, 451, 455, 456, 462, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 478, 479, 481, 482, 483], "exhaust": [5, 63, 95, 158, 160, 191, 225, 242, 261, 293, 342, 344, 362, 369, 386, 389, 422, 427, 428, 430, 464, 466, 467, 468, 470, 478, 479, 483], "appropri": [5, 9, 23, 31, 41, 42, 49, 54, 61, 63, 64, 68, 71, 73, 75, 76, 92, 94, 95, 96, 101, 102, 106, 110, 112, 120, 126, 137, 139, 151, 157, 158, 177, 183, 184, 186, 193, 195, 196, 198, 201, 202, 205, 206, 207, 208, 225, 226, 230, 235, 242, 243, 245, 248, 250, 258, 259, 266, 267, 268, 269, 271, 275, 283, 292, 293, 299, 307, 308, 314, 319, 324, 328, 333, 335, 337, 338, 341, 344, 345, 347, 348, 352, 355, 358, 365, 366, 375, 381, 384, 385, 386, 394, 395, 399, 402, 403, 408, 410, 411, 413, 415, 421, 422, 426, 429, 430, 432, 436, 455, 461, 462, 463, 464, 465, 466, 468, 471, 474, 475, 476, 477, 478, 479, 480, 481, 483], "due": [5, 23, 33, 45, 63, 66, 75, 76, 84, 93, 101, 110, 126, 137, 139, 169, 176, 177, 183, 184, 190, 208, 221, 242, 247, 250, 258, 267, 268, 269, 271, 275, 283, 299, 314, 325, 341, 344, 348, 362, 365, 371, 386, 388, 402, 422, 427, 428, 430, 431, 432, 435, 456, 461, 462, 463, 466, 468, 469, 470, 472, 474, 475, 476, 478, 479, 480, 481, 482, 483], "failur": [5, 7, 9, 11, 13, 22, 23, 24, 25, 28, 31, 33, 34, 35, 39, 40, 42, 45, 47, 49, 51, 54, 55, 58, 59, 60, 64, 66, 68, 73, 96, 106, 133, 176, 177, 183, 187, 191, 193, 213, 243, 269, 278, 282, 283, 293, 302, 322, 332, 334, 337, 341, 344, 362, 366, 368, 390, 423, 425, 426, 427, 430, 431, 436, 443, 463, 466, 468, 469, 471, 475, 477, 478, 479, 480, 481, 483], "at": [5, 7, 9, 13, 22, 23, 25, 27, 28, 31, 33, 34, 41, 42, 43, 45, 49, 58, 59, 60, 61, 63, 64, 66, 71, 72, 73, 75, 76, 77, 79, 85, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 105, 106, 108, 109, 110, 115, 117, 120, 125, 126, 129, 133, 135, 136, 138, 139, 140, 141, 143, 144, 146, 149, 151, 153, 155, 158, 160, 163, 167, 169, 170, 173, 176, 177, 180, 181, 183, 186, 188, 190, 191, 192, 193, 194, 196, 200, 201, 202, 203, 207, 208, 213, 214, 215, 218, 221, 223, 225, 226, 230, 232, 234, 235, 242, 243, 245, 247, 248, 250, 251, 255, 258, 261, 262, 266, 267, 268, 269, 270, 271, 275, 278, 281, 282, 283, 284, 288, 292, 293, 295, 297, 299, 301, 302, 305, 308, 309, 311, 313, 314, 318, 319, 320, 322, 324, 328, 330, 331, 332, 333, 334, 335, 337, 340, 341, 342, 343, 344, 345, 347, 348, 352, 353, 354, 355, 358, 359, 361, 362, 364, 365, 366, 369, 375, 376, 377, 378, 380, 381, 382, 384, 386, 388, 389, 390, 394, 395, 400, 402, 405, 406, 408, 410, 411, 412, 413, 415, 416, 420, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 441, 442, 443, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "left": [5, 15, 33, 34, 47, 63, 64, 72, 73, 75, 92, 95, 102, 103, 106, 109, 122, 126, 141, 146, 149, 155, 157, 160, 167, 176, 177, 181, 183, 186, 190, 191, 193, 196, 212, 216, 225, 226, 228, 235, 247, 250, 267, 268, 269, 271, 281, 283, 292, 293, 295, 297, 302, 314, 319, 324, 331, 337, 340, 341, 344, 345, 348, 364, 365, 369, 375, 376, 384, 386, 387, 388, 390, 395, 400, 411, 427, 428, 430, 432, 435, 436, 440, 456, 461, 462, 463, 464, 465, 466, 468, 469, 470, 471, 474, 475, 478, 480, 481, 483], "untouch": [5, 64, 181, 456, 483], "posit": [5, 7, 13, 23, 25, 47, 58, 60, 61, 63, 64, 68, 73, 76, 84, 85, 87, 89, 92, 94, 95, 100, 102, 106, 108, 109, 115, 117, 120, 126, 133, 136, 138, 139, 140, 144, 149, 153, 155, 158, 160, 163, 175, 176, 177, 181, 183, 186, 190, 191, 193, 213, 215, 221, 222, 225, 226, 234, 235, 247, 252, 255, 258, 261, 266, 267, 270, 275, 278, 282, 283, 293, 299, 311, 314, 320, 321, 325, 328, 332, 337, 340, 341, 344, 345, 347, 348, 349, 352, 358, 362, 363, 365, 366, 369, 376, 378, 381, 382, 385, 386, 388, 389, 394, 399, 408, 410, 413, 415, 421, 422, 427, 430, 431, 442, 445, 449, 462, 465, 466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483], "local": [5, 13, 16, 18, 31, 32, 34, 35, 49, 53, 59, 66, 68, 73, 79, 84, 85, 87, 92, 95, 100, 101, 102, 103, 106, 108, 109, 120, 126, 140, 144, 150, 151, 152, 157, 160, 164, 167, 170, 175, 176, 177, 183, 186, 190, 191, 192, 193, 200, 209, 213, 225, 226, 242, 245, 246, 247, 248, 250, 254, 255, 258, 259, 261, 267, 269, 272, 278, 283, 288, 293, 294, 297, 299, 308, 313, 314, 315, 319, 320, 332, 334, 335, 337, 341, 344, 345, 348, 351, 352, 355, 362, 366, 379, 380, 381, 383, 386, 388, 390, 395, 398, 405, 413, 414, 415, 416, 419, 422, 425, 427, 428, 429, 430, 432, 436, 438, 440, 441, 448, 450, 451, 452, 453, 455, 456, 458, 459, 460, 462, 463, 464, 465, 467, 468, 469, 470, 471, 475, 476, 477, 481, 483, 484], "pyarg_vapars": [5, 57, 483], "va_list": [5, 9, 18, 23, 64, 466, 478, 483], "varg": [5, 9, 23, 64], "ident": [5, 9, 25, 46, 49, 64, 68, 73, 84, 85, 93, 94, 95, 99, 101, 102, 122, 126, 140, 142, 159, 181, 183, 186, 190, 193, 196, 201, 205, 207, 215, 216, 225, 230, 245, 255, 261, 267, 269, 271, 281, 283, 293, 305, 308, 319, 328, 332, 333, 337, 340, 341, 344, 347, 352, 356, 365, 366, 375, 378, 385, 389, 390, 402, 410, 413, 425, 428, 431, 441, 464, 465, 467, 468, 472, 475, 479, 480, 481, 483], "rather": [5, 7, 22, 23, 33, 40, 41, 45, 49, 55, 58, 61, 64, 72, 73, 75, 76, 84, 94, 96, 100, 101, 102, 103, 120, 126, 137, 140, 149, 151, 155, 158, 163, 169, 176, 177, 181, 183, 186, 191, 208, 209, 213, 225, 226, 235, 243, 247, 248, 255, 258, 261, 267, 268, 269, 270, 271, 275, 283, 292, 293, 295, 302, 312, 313, 314, 319, 324, 331, 332, 334, 335, 337, 340, 341, 344, 345, 348, 352, 355, 358, 362, 366, 369, 375, 376, 378, 384, 386, 388, 394, 395, 399, 400, 402, 410, 413, 419, 422, 423, 425, 427, 428, 430, 432, 434, 435, 436, 455, 456, 461, 463, 464, 465, 466, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "than": [5, 10, 22, 23, 24, 25, 33, 34, 39, 40, 41, 42, 45, 49, 55, 56, 58, 61, 63, 64, 68, 72, 73, 75, 76, 84, 85, 87, 92, 93, 94, 95, 96, 100, 101, 103, 106, 108, 109, 110, 114, 115, 117, 120, 126, 133, 137, 139, 140, 144, 146, 147, 149, 151, 158, 160, 161, 163, 167, 169, 170, 176, 177, 181, 183, 184, 186, 188, 190, 191, 193, 195, 196, 197, 198, 199, 201, 203, 205, 207, 208, 209, 213, 215, 218, 225, 226, 230, 234, 235, 236, 242, 243, 244, 247, 248, 250, 251, 255, 258, 259, 261, 262, 267, 268, 269, 270, 271, 272, 275, 276, 278, 283, 284, 288, 292, 293, 295, 297, 299, 302, 307, 308, 312, 313, 314, 319, 320, 322, 324, 325, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 342, 344, 345, 347, 348, 352, 354, 355, 358, 359, 362, 364, 365, 366, 369, 374, 375, 376, 378, 381, 382, 384, 386, 388, 390, 394, 395, 399, 400, 402, 405, 410, 411, 413, 415, 419, 422, 425, 427, 428, 430, 432, 434, 435, 436, 440, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "kw": [5, 63, 176, 189, 197, 203, 205, 208, 262, 362, 372, 374, 375, 376, 389, 390, 400, 441, 462, 465, 468, 475], "empti": [5, 13, 17, 22, 24, 31, 33, 34, 45, 49, 55, 59, 73, 76, 84, 85, 95, 106, 120, 126, 133, 134, 136, 138, 139, 143, 144, 149, 151, 153, 155, 157, 158, 160, 167, 170, 181, 183, 184, 188, 190, 191, 193, 196, 197, 203, 205, 207, 208, 209, 212, 213, 218, 223, 225, 226, 228, 230, 233, 234, 236, 242, 245, 250, 255, 258, 259, 261, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 283, 288, 292, 293, 296, 297, 299, 309, 314, 316, 319, 325, 328, 329, 330, 331, 332, 333, 334, 337, 340, 341, 344, 347, 348, 352, 358, 359, 362, 364, 365, 369, 375, 376, 380, 382, 384, 385, 386, 387, 388, 394, 395, 400, 405, 408, 410, 411, 413, 419, 420, 422, 423, 427, 428, 430, 431, 432, 435, 436, 440, 442, 449, 455, 456, 461, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "denot": [5, 46, 61, 85, 103, 106, 167, 191, 244, 245, 255, 259, 293, 322, 344, 369, 395, 427, 428, 430, 431, 432, 435, 462, 468, 480, 483], "added": [5, 22, 23, 31, 34, 42, 45, 58, 59, 61, 63, 64, 68, 73, 75, 85, 92, 93, 94, 95, 100, 101, 102, 103, 106, 112, 115, 117, 120, 126, 128, 139, 141, 143, 149, 151, 155, 158, 160, 161, 163, 167, 169, 176, 177, 179, 181, 183, 184, 186, 190, 191, 193, 196, 197, 199, 201, 202, 203, 204, 205, 206, 207, 208, 213, 214, 218, 225, 226, 234, 235, 242, 243, 245, 247, 248, 250, 251, 252, 255, 258, 259, 262, 266, 267, 268, 269, 271, 275, 276, 281, 283, 288, 292, 293, 297, 299, 302, 304, 305, 307, 308, 311, 319, 321, 324, 328, 330, 332, 334, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 353, 354, 356, 358, 359, 362, 364, 365, 366, 369, 377, 380, 382, 384, 385, 386, 387, 388, 394, 395, 399, 400, 402, 403, 410, 411, 413, 419, 420, 421, 422, 427, 428, 430, 432, 435, 436, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "support": [5, 7, 13, 16, 22, 23, 25, 32, 34, 40, 42, 43, 47, 49, 54, 58, 60, 61, 63, 65, 67, 68, 73, 74, 79, 84, 85, 89, 91, 92, 93, 96, 99, 100, 101, 103, 105, 106, 110, 112, 115, 117, 119, 120, 122, 126, 132, 133, 137, 139, 141, 143, 146, 151, 153, 158, 161, 163, 164, 173, 176, 177, 180, 183, 184, 186, 187, 189, 190, 191, 193, 194, 195, 196, 201, 202, 203, 204, 207, 208, 211, 212, 213, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 234, 235, 242, 243, 244, 245, 246, 248, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 264, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 281, 283, 284, 288, 290, 292, 293, 295, 296, 297, 298, 299, 302, 304, 305, 307, 308, 314, 315, 319, 320, 321, 322, 328, 329, 330, 332, 333, 334, 335, 337, 338, 340, 342, 344, 345, 347, 348, 352, 353, 355, 359, 361, 365, 366, 368, 369, 376, 377, 382, 385, 386, 387, 388, 394, 395, 397, 399, 400, 402, 403, 405, 406, 408, 410, 411, 415, 416, 419, 420, 421, 422, 423, 425, 426, 427, 428, 430, 431, 432, 434, 435, 436, 442, 449, 451, 455, 456, 457, 459, 461, 462, 463, 464, 466, 467, 469, 470, 471, 474, 475, 476, 483, 484], "pyarg_vaparsetupleandkeyword": [5, 57, 466, 483], "pyarg_validatekeywordargu": [5, 57, 483], "key": [5, 22, 33, 35, 40, 49, 54, 55, 63, 68, 78, 84, 85, 87, 92, 93, 94, 95, 96, 100, 101, 102, 112, 122, 126, 142, 147, 151, 155, 157, 160, 161, 164, 167, 170, 174, 175, 177, 181, 183, 184, 186, 189, 191, 193, 196, 197, 201, 203, 205, 206, 212, 213, 223, 225, 226, 230, 236, 237, 244, 245, 248, 250, 251, 255, 259, 261, 262, 266, 267, 268, 270, 271, 272, 279, 282, 287, 288, 291, 293, 295, 297, 299, 304, 305, 307, 308, 312, 319, 320, 329, 330, 333, 334, 340, 344, 345, 346, 352, 355, 358, 362, 368, 369, 376, 384, 385, 386, 389, 390, 394, 395, 402, 405, 407, 413, 416, 417, 419, 421, 425, 427, 428, 430, 431, 432, 436, 440, 441, 442, 446, 452, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484], "dictionari": [5, 21, 22, 23, 31, 33, 42, 45, 49, 53, 58, 59, 61, 63, 64, 66, 68, 73, 75, 76, 84, 85, 87, 93, 94, 95, 96, 101, 106, 110, 112, 115, 118, 120, 122, 144, 151, 157, 158, 160, 167, 173, 175, 176, 181, 183, 186, 191, 193, 195, 196, 200, 201, 202, 203, 205, 206, 207, 212, 216, 225, 226, 230, 236, 242, 244, 245, 250, 251, 255, 259, 261, 262, 266, 267, 269, 270, 271, 272, 274, 276, 279, 283, 287, 288, 291, 292, 293, 297, 299, 304, 305, 307, 308, 312, 314, 319, 324, 325, 326, 330, 335, 340, 341, 344, 345, 346, 348, 352, 355, 358, 362, 365, 369, 375, 376, 377, 380, 381, 384, 386, 388, 389, 390, 393, 394, 395, 400, 402, 407, 413, 416, 417, 427, 428, 429, 431, 436, 440, 441, 445, 446, 452, 455, 462, 463, 464, 465, 466, 467, 468, 470, 472, 474, 477, 478, 479, 480, 481, 483, 484], "sinc": [5, 7, 13, 22, 23, 28, 33, 34, 40, 45, 46, 49, 54, 58, 59, 61, 63, 64, 68, 72, 73, 75, 76, 78, 79, 84, 85, 87, 92, 93, 94, 99, 100, 101, 102, 103, 105, 106, 109, 110, 112, 126, 133, 144, 146, 149, 151, 157, 161, 167, 169, 173, 176, 177, 181, 183, 186, 190, 193, 194, 196, 198, 199, 201, 203, 205, 207, 208, 209, 218, 222, 225, 226, 230, 234, 235, 243, 244, 245, 247, 248, 250, 251, 258, 262, 266, 267, 268, 269, 271, 272, 278, 283, 288, 292, 293, 295, 297, 307, 308, 314, 319, 328, 330, 332, 335, 337, 338, 339, 340, 341, 344, 345, 347, 352, 355, 358, 362, 364, 365, 366, 369, 376, 378, 380, 381, 382, 386, 388, 395, 400, 402, 405, 410, 411, 412, 414, 415, 419, 421, 422, 427, 428, 430, 432, 434, 435, 443, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "latter": [5, 7, 23, 42, 73, 85, 87, 106, 110, 120, 126, 133, 144, 167, 183, 184, 196, 201, 205, 209, 215, 247, 250, 255, 259, 267, 268, 276, 292, 293, 299, 308, 332, 337, 340, 344, 347, 369, 375, 376, 384, 386, 388, 400, 427, 428, 429, 430, 431, 432, 436, 461, 465, 470, 475, 476, 477, 480, 482, 483], "deconstruct": 5, "old": [5, 9, 13, 23, 42, 45, 58, 59, 60, 64, 68, 73, 85, 101, 103, 105, 106, 112, 120, 151, 160, 169, 176, 177, 187, 196, 205, 225, 226, 243, 248, 250, 262, 268, 269, 271, 276, 283, 292, 293, 297, 299, 304, 308, 330, 333, 340, 343, 344, 352, 358, 361, 362, 369, 381, 382, 384, 386, 410, 415, 427, 428, 430, 435, 436, 462, 463, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "meth_oldarg": [5, 464, 470], "been": [5, 7, 13, 22, 23, 24, 27, 28, 31, 33, 34, 42, 43, 45, 47, 49, 58, 59, 60, 63, 64, 67, 73, 75, 79, 84, 85, 92, 93, 94, 95, 99, 101, 102, 103, 106, 109, 110, 112, 115, 117, 120, 126, 133, 134, 139, 140, 141, 144, 149, 151, 153, 155, 158, 160, 161, 167, 169, 176, 177, 179, 181, 183, 184, 186, 190, 191, 193, 196, 199, 201, 202, 204, 207, 212, 213, 218, 225, 226, 230, 232, 235, 242, 243, 244, 247, 248, 250, 251, 255, 258, 259, 261, 266, 267, 268, 269, 270, 271, 276, 281, 282, 283, 288, 292, 293, 295, 297, 299, 302, 305, 307, 308, 309, 314, 319, 320, 322, 328, 329, 331, 333, 334, 335, 337, 338, 340, 341, 343, 344, 347, 348, 352, 354, 356, 358, 360, 361, 362, 364, 365, 366, 369, 375, 381, 382, 384, 385, 386, 387, 388, 389, 390, 394, 395, 399, 400, 402, 403, 405, 408, 411, 412, 413, 416, 419, 420, 421, 422, 426, 427, 428, 429, 430, 432, 435, 436, 442, 446, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "standard": [5, 7, 31, 32, 33, 34, 42, 59, 61, 63, 64, 66, 68, 73, 74, 75, 76, 77, 79, 80, 84, 85, 94, 95, 96, 101, 102, 106, 108, 109, 110, 112, 114, 115, 118, 120, 126, 133, 137, 141, 143, 144, 145, 151, 153, 157, 163, 167, 176, 177, 178, 182, 183, 186, 191, 193, 194, 195, 196, 197, 199, 201, 202, 203, 205, 207, 208, 209, 213, 214, 218, 220, 223, 225, 230, 235, 243, 245, 247, 248, 250, 255, 257, 258, 261, 266, 267, 268, 269, 271, 272, 273, 275, 276, 278, 279, 281, 283, 285, 288, 293, 295, 297, 299, 301, 302, 305, 308, 309, 311, 312, 314, 319, 321, 324, 326, 328, 331, 332, 333, 334, 335, 337, 338, 343, 345, 348, 352, 354, 355, 357, 358, 359, 362, 365, 366, 368, 369, 375, 376, 381, 384, 386, 387, 388, 390, 394, 395, 397, 398, 400, 402, 407, 408, 410, 413, 419, 421, 422, 425, 426, 427, 428, 429, 430, 433, 434, 435, 436, 441, 444, 445, 452, 454, 455, 456, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484], "modifi": [5, 9, 22, 23, 27, 33, 34, 61, 63, 64, 66, 68, 73, 76, 77, 79, 94, 95, 100, 101, 102, 103, 109, 110, 112, 120, 137, 139, 141, 158, 167, 173, 176, 177, 185, 186, 191, 193, 196, 197, 198, 201, 203, 205, 208, 215, 216, 225, 245, 247, 255, 266, 267, 268, 269, 271, 281, 283, 284, 292, 293, 297, 299, 302, 307, 308, 314, 319, 321, 324, 328, 329, 330, 331, 332, 335, 337, 338, 340, 344, 345, 348, 352, 353, 355, 358, 362, 365, 369, 375, 376, 378, 381, 382, 384, 385, 388, 394, 395, 396, 397, 400, 405, 407, 410, 413, 416, 417, 420, 421, 423, 425, 426, 427, 428, 429, 432, 434, 435, 436, 455, 458, 462, 463, 465, 467, 468, 469, 470, 471, 474, 475, 476, 477, 479, 480, 481, 483], "longer": [5, 7, 22, 23, 31, 34, 39, 45, 58, 59, 61, 63, 64, 67, 68, 71, 73, 85, 92, 94, 95, 100, 101, 105, 110, 117, 120, 126, 141, 158, 167, 176, 177, 188, 190, 191, 199, 201, 208, 225, 226, 235, 242, 245, 248, 250, 251, 255, 259, 261, 265, 268, 269, 271, 283, 284, 292, 293, 307, 309, 311, 314, 319, 325, 328, 332, 337, 340, 341, 344, 347, 348, 352, 353, 358, 362, 364, 365, 366, 376, 381, 382, 383, 384, 386, 388, 399, 400, 402, 410, 411, 412, 413, 414, 422, 428, 430, 432, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 478, 479, 480, 481, 482, 483], "purpos": [5, 7, 17, 31, 33, 42, 63, 68, 72, 73, 75, 85, 93, 94, 101, 102, 106, 110, 114, 126, 128, 143, 158, 167, 169, 170, 173, 176, 177, 181, 183, 186, 190, 193, 196, 202, 205, 206, 213, 226, 230, 235, 245, 250, 253, 255, 261, 268, 283, 292, 293, 295, 299, 307, 308, 323, 325, 334, 337, 340, 341, 347, 352, 358, 365, 369, 376, 384, 385, 386, 388, 394, 400, 407, 410, 413, 414, 421, 425, 426, 427, 429, 430, 431, 432, 435, 440, 455, 456, 461, 462, 468, 469, 470, 471, 475, 477, 478, 479, 480, 481, 483], "conveni": [5, 7, 23, 28, 31, 33, 42, 45, 63, 68, 73, 75, 84, 85, 101, 102, 109, 110, 120, 124, 126, 139, 146, 151, 157, 158, 167, 181, 183, 186, 189, 191, 195, 196, 198, 201, 202, 203, 205, 206, 207, 208, 209, 225, 226, 230, 234, 235, 243, 247, 251, 254, 255, 256, 267, 268, 270, 271, 275, 276, 283, 292, 295, 297, 299, 308, 326, 331, 335, 337, 344, 348, 355, 358, 361, 362, 364, 366, 369, 375, 384, 386, 388, 399, 410, 413, 414, 416, 421, 427, 428, 432, 435, 436, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 477, 478, 479, 481, 483], "decompos": [5, 95, 387, 394, 483], "continu": [5, 23, 28, 35, 36, 59, 61, 68, 73, 78, 79, 85, 87, 93, 95, 100, 101, 109, 110, 115, 118, 122, 126, 139, 155, 158, 169, 177, 181, 193, 196, 199, 200, 202, 207, 211, 241, 242, 245, 248, 250, 251, 261, 267, 271, 282, 292, 293, 297, 314, 319, 332, 333, 337, 338, 341, 343, 344, 354, 358, 366, 377, 384, 388, 395, 400, 415, 427, 428, 429, 430, 431, 432, 433, 434, 435, 443, 445, 452, 455, 461, 462, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 478, 480, 481, 483], "pyarg_unpacktupl": [5, 57, 58, 464, 483], "min": [5, 87, 95, 102, 106, 107, 108, 160, 166, 183, 186, 225, 226, 236, 261, 275, 316, 343, 344, 352, 367, 430, 440, 450, 467, 469, 477, 483], "max": [5, 87, 95, 108, 120, 141, 154, 160, 183, 186, 225, 226, 236, 243, 244, 261, 275, 318, 340, 341, 343, 344, 352, 400, 427, 430, 440, 450, 467, 469, 474, 475, 477, 481, 483], "simpler": [5, 63, 68, 92, 102, 106, 120, 151, 225, 235, 283, 319, 344, 369, 402, 411, 413, 415, 432, 461, 462, 463, 464, 465, 467, 469, 476, 477, 480, 483, 484], "retriev": [5, 11, 23, 33, 39, 45, 49, 54, 56, 61, 63, 68, 72, 73, 75, 84, 85, 92, 93, 95, 106, 110, 139, 151, 166, 167, 171, 176, 177, 181, 184, 189, 196, 203, 207, 208, 225, 226, 234, 241, 242, 243, 247, 248, 254, 258, 265, 266, 268, 271, 283, 293, 299, 302, 304, 305, 315, 319, 322, 328, 330, 332, 340, 344, 345, 352, 365, 382, 386, 395, 402, 405, 413, 427, 428, 430, 436, 455, 463, 464, 465, 466, 467, 468, 469, 474, 476, 477, 478, 479, 480, 481, 482, 483], "meth_vararg": [5, 58, 72, 73, 464, 483], "tabl": [5, 7, 31, 33, 42, 45, 58, 59, 64, 68, 74, 75, 77, 78, 93, 95, 101, 106, 109, 110, 147, 158, 176, 177, 183, 186, 190, 203, 212, 235, 247, 250, 261, 262, 266, 267, 276, 283, 298, 319, 328, 338, 340, 341, 344, 346, 347, 351, 352, 358, 366, 369, 379, 386, 388, 403, 405, 410, 422, 426, 430, 441, 446, 452, 455, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 482, 483], "least": [5, 28, 34, 41, 49, 61, 63, 66, 72, 73, 76, 84, 85, 93, 99, 102, 103, 106, 109, 115, 120, 136, 149, 153, 158, 160, 176, 177, 183, 186, 190, 193, 194, 200, 203, 208, 215, 221, 226, 232, 234, 242, 248, 258, 261, 269, 270, 275, 292, 293, 308, 309, 318, 328, 332, 333, 335, 337, 341, 343, 344, 345, 347, 348, 352, 355, 359, 361, 362, 365, 366, 378, 380, 382, 386, 388, 389, 406, 422, 426, 427, 428, 430, 431, 434, 436, 440, 461, 465, 468, 469, 470, 474, 476, 479, 480, 482, 483], "equal": [5, 7, 25, 33, 34, 37, 42, 54, 59, 63, 64, 66, 68, 75, 85, 89, 94, 95, 102, 112, 120, 122, 132, 133, 140, 141, 147, 149, 160, 170, 176, 177, 181, 183, 186, 190, 193, 195, 196, 202, 208, 216, 221, 225, 226, 228, 236, 243, 259, 261, 266, 272, 275, 278, 293, 295, 297, 308, 319, 331, 334, 337, 340, 341, 344, 346, 347, 352, 362, 364, 365, 376, 377, 378, 382, 384, 386, 387, 388, 390, 400, 402, 408, 410, 412, 413, 423, 427, 428, 430, 431, 432, 435, 436, 441, 450, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 479, 481, 482, 483], "given": [5, 7, 9, 13, 18, 22, 23, 27, 31, 33, 42, 43, 45, 49, 56, 58, 61, 63, 64, 66, 72, 73, 84, 89, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 110, 112, 115, 117, 120, 126, 133, 135, 139, 144, 149, 153, 155, 157, 158, 163, 167, 169, 170, 173, 176, 177, 178, 179, 181, 183, 184, 186, 190, 191, 193, 195, 196, 200, 202, 203, 205, 206, 208, 209, 211, 213, 216, 218, 221, 223, 225, 226, 228, 230, 233, 234, 235, 242, 243, 244, 245, 247, 248, 250, 252, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 283, 288, 292, 293, 295, 297, 299, 301, 302, 308, 312, 313, 314, 319, 322, 324, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 344, 345, 346, 347, 348, 352, 353, 356, 358, 359, 362, 364, 365, 366, 369, 375, 376, 380, 381, 384, 385, 386, 387, 388, 389, 394, 395, 399, 400, 402, 403, 408, 410, 411, 412, 413, 414, 417, 420, 421, 422, 423, 427, 428, 429, 430, 432, 434, 435, 436, 441, 455, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "wrong": [5, 33, 42, 73, 84, 85, 95, 100, 103, 106, 110, 120, 144, 176, 183, 193, 212, 213, 248, 275, 292, 293, 295, 335, 340, 347, 352, 358, 366, 388, 389, 395, 428, 441, 449, 463, 465, 466, 467, 468, 472, 474, 475, 477, 483], "element": [5, 7, 13, 33, 35, 42, 49, 54, 55, 59, 61, 63, 64, 68, 85, 102, 103, 106, 108, 109, 117, 120, 133, 139, 141, 151, 155, 160, 161, 176, 178, 181, 186, 190, 191, 193, 195, 196, 203, 205, 207, 209, 220, 225, 226, 228, 236, 242, 245, 255, 261, 267, 272, 273, 275, 283, 292, 293, 304, 314, 318, 319, 322, 332, 335, 337, 343, 344, 345, 347, 348, 352, 366, 369, 375, 376, 378, 381, 384, 385, 386, 388, 394, 402, 408, 411, 412, 415, 416, 417, 419, 420, 425, 427, 428, 429, 430, 431, 440, 442, 449, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 481, 482, 483], "taken": [5, 33, 34, 42, 45, 55, 63, 66, 73, 75, 95, 102, 103, 120, 141, 144, 163, 167, 183, 186, 191, 193, 196, 202, 205, 206, 216, 225, 230, 248, 261, 266, 268, 269, 276, 278, 283, 293, 308, 311, 314, 322, 331, 340, 341, 344, 347, 353, 358, 362, 364, 365, 381, 382, 397, 400, 427, 428, 432, 436, 440, 462, 464, 465, 467, 474, 475, 476, 477, 481, 483], "sourc": [5, 13, 22, 23, 31, 33, 34, 66, 68, 72, 73, 75, 76, 79, 84, 85, 92, 93, 94, 95, 102, 112, 122, 142, 152, 157, 158, 159, 163, 167, 176, 177, 181, 182, 187, 190, 191, 193, 203, 207, 208, 209, 213, 214, 223, 225, 230, 235, 242, 248, 251, 252, 254, 257, 261, 264, 265, 267, 268, 269, 270, 280, 281, 283, 292, 293, 295, 297, 299, 308, 311, 312, 313, 315, 321, 324, 330, 331, 332, 335, 337, 340, 344, 345, 346, 347, 352, 355, 358, 359, 362, 364, 366, 368, 369, 371, 377, 380, 381, 382, 388, 395, 399, 400, 405, 410, 413, 414, 415, 416, 417, 421, 422, 423, 426, 427, 428, 432, 434, 435, 436, 443, 453, 455, 456, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "_weakref": [5, 482, 483], "helper": [5, 33, 51, 68, 86, 93, 128, 164, 169, 176, 187, 196, 205, 218, 235, 250, 254, 257, 258, 267, 299, 319, 332, 363, 381, 384, 388, 390, 395, 413, 467, 468, 476, 478, 479, 483], "modul": [5, 7, 11, 16, 17, 23, 24, 31, 33, 34, 35, 41, 42, 58, 59, 61, 63, 65, 66, 68, 71, 72, 74, 75, 76, 77, 79, 81, 87, 88, 89, 91, 94, 96, 97, 98, 101, 104, 105, 109, 110, 112, 114, 115, 117, 118, 120, 122, 125, 126, 131, 138, 139, 140, 141, 142, 143, 144, 146, 149, 152, 153, 155, 157, 158, 159, 160, 161, 162, 163, 164, 167, 169, 170, 173, 174, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 233, 234, 235, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 260, 261, 262, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 287, 288, 290, 291, 292, 293, 295, 296, 297, 298, 301, 302, 304, 305, 307, 309, 311, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 344, 345, 346, 347, 349, 350, 351, 352, 353, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 371, 374, 375, 376, 377, 378, 380, 381, 382, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 396, 397, 399, 400, 402, 403, 404, 405, 406, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 425, 426, 427, 429, 430, 434, 435, 436, 439, 440, 441, 442, 443, 445, 446, 448, 449, 451, 452, 455, 456, 458, 470, 472, 473, 474, 476, 477, 481, 482, 483, 484], "weak": [5, 63, 67, 68, 73, 74, 85, 139, 182, 213, 226, 235, 254, 341, 344, 388, 428, 445, 464, 467, 469, 474, 477, 483, 484], "static": [5, 10, 28, 33, 35, 42, 45, 50, 52, 58, 60, 62, 64, 68, 72, 73, 75, 76, 77, 79, 80, 87, 102, 106, 113, 183, 189, 191, 215, 225, 226, 250, 299, 315, 319, 344, 365, 369, 386, 427, 432, 436, 440, 456, 463, 464, 465, 466, 469, 471, 472, 475, 478, 479, 480, 481, 482, 483], "weakref_ref": 5, "self": [5, 10, 22, 28, 44, 52, 58, 61, 63, 68, 72, 73, 75, 76, 79, 84, 87, 93, 94, 95, 96, 98, 100, 102, 104, 107, 108, 116, 120, 122, 126, 132, 133, 142, 144, 148, 155, 160, 161, 169, 172, 176, 181, 183, 186, 191, 203, 205, 211, 213, 216, 221, 223, 225, 226, 227, 230, 232, 240, 242, 243, 248, 250, 253, 255, 259, 261, 262, 274, 283, 288, 289, 292, 293, 296, 297, 299, 305, 318, 320, 321, 333, 335, 337, 338, 340, 344, 345, 358, 359, 362, 369, 375, 381, 382, 384, 385, 386, 388, 389, 390, 395, 399, 402, 410, 413, 417, 419, 420, 421, 427, 428, 432, 440, 441, 446, 451, 452, 455, 462, 463, 464, 465, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 482, 483], "callback": [5, 11, 13, 14, 22, 27, 28, 33, 61, 63, 67, 68, 73, 81, 87, 93, 100, 118, 120, 123, 125, 129, 130, 132, 133, 136, 139, 169, 223, 227, 255, 281, 283, 299, 308, 309, 314, 315, 316, 320, 329, 332, 340, 341, 342, 352, 359, 367, 369, 371, 376, 385, 386, 402, 412, 413, 415, 421, 428, 452, 467, 468, 472, 473, 474, 475, 476, 477, 479, 480, 481, 483, 484], "ref": [5, 34, 35, 63, 67, 78, 177, 402, 455, 456, 463, 469, 472, 477, 481, 483], "pyweakref_newref": [5, 57, 67, 483], "entir": [5, 42, 63, 73, 75, 84, 85, 92, 93, 99, 100, 106, 109, 112, 126, 151, 169, 177, 184, 196, 200, 205, 207, 216, 230, 235, 242, 247, 258, 259, 261, 266, 267, 269, 270, 271, 278, 288, 292, 293, 295, 319, 322, 331, 332, 340, 341, 344, 345, 352, 355, 358, 364, 365, 369, 376, 384, 387, 388, 400, 405, 408, 410, 413, 416, 426, 427, 429, 432, 435, 436, 446, 455, 461, 463, 465, 466, 467, 468, 469, 471, 474, 476, 477, 480, 483], "py_buildvalu": [5, 10, 35, 57, 59, 60, 68, 73, 86, 467, 472, 481, 483], "base": [5, 18, 23, 25, 31, 33, 34, 39, 43, 45, 47, 49, 50, 61, 63, 64, 68, 73, 75, 76, 78, 84, 87, 88, 89, 92, 93, 94, 95, 98, 99, 100, 101, 103, 106, 110, 120, 122, 123, 126, 132, 136, 139, 143, 144, 145, 146, 154, 163, 164, 167, 169, 173, 176, 180, 181, 182, 183, 186, 187, 189, 193, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 221, 225, 226, 234, 235, 242, 243, 245, 246, 247, 248, 251, 254, 255, 258, 261, 262, 265, 266, 267, 268, 269, 270, 271, 273, 275, 276, 280, 281, 282, 288, 292, 293, 296, 298, 299, 302, 305, 308, 312, 314, 319, 320, 321, 324, 329, 330, 332, 334, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 354, 355, 358, 362, 366, 369, 375, 376, 382, 385, 386, 387, 388, 390, 394, 395, 398, 399, 400, 402, 403, 407, 408, 410, 411, 413, 414, 416, 417, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 433, 435, 440, 443, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 473, 474, 476, 477, 478, 479, 481, 482, 483, 484], "those": [5, 7, 23, 33, 39, 59, 63, 64, 66, 67, 72, 73, 76, 77, 84, 85, 92, 93, 94, 95, 96, 99, 100, 101, 102, 106, 109, 110, 120, 126, 133, 139, 151, 158, 161, 167, 169, 176, 177, 178, 183, 186, 190, 191, 193, 194, 196, 202, 203, 204, 205, 208, 213, 216, 220, 225, 226, 228, 234, 242, 244, 247, 250, 251, 252, 253, 255, 258, 259, 261, 262, 266, 267, 268, 269, 271, 276, 283, 292, 293, 295, 297, 299, 302, 308, 311, 314, 319, 322, 324, 325, 329, 330, 331, 332, 333, 335, 337, 341, 344, 352, 353, 355, 358, 361, 365, 366, 369, 375, 376, 381, 382, 384, 385, 386, 388, 390, 394, 395, 399, 400, 402, 405, 410, 412, 413, 415, 416, 422, 425, 426, 427, 428, 429, 430, 432, 435, 436, 455, 461, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "famili": [5, 16, 33, 42, 54, 68, 95, 109, 126, 136, 142, 164, 200, 212, 235, 271, 283, 293, 298, 337, 338, 356, 362, 369, 372, 410, 455, 461, 465, 466, 467, 469, 476, 479, 480, 481, 483], "exact": [5, 7, 9, 11, 13, 24, 28, 39, 47, 64, 66, 73, 75, 76, 84, 85, 92, 93, 94, 95, 99, 100, 102, 103, 106, 109, 112, 120, 126, 133, 147, 149, 152, 169, 176, 177, 183, 186, 191, 193, 196, 198, 201, 203, 205, 207, 213, 221, 225, 228, 243, 245, 250, 255, 267, 268, 269, 270, 271, 275, 283, 290, 292, 293, 295, 299, 314, 319, 322, 328, 335, 337, 338, 343, 344, 345, 346, 347, 348, 352, 355, 361, 364, 365, 369, 378, 381, 386, 388, 389, 390, 402, 411, 413, 421, 422, 427, 430, 432, 435, 436, 444, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 476, 477, 483], "whatev": [5, 31, 73, 78, 84, 85, 101, 102, 106, 120, 151, 176, 195, 200, 208, 225, 250, 267, 268, 292, 293, 297, 311, 319, 344, 352, 359, 362, 365, 390, 395, 430, 432, 462, 463, 464, 465, 466, 469, 483], "forc": [5, 33, 34, 63, 68, 73, 84, 85, 95, 99, 103, 126, 133, 152, 159, 163, 177, 181, 183, 184, 186, 193, 235, 248, 258, 267, 282, 283, 288, 293, 308, 309, 311, 333, 345, 347, 348, 352, 362, 366, 402, 428, 432, 455, 469, 474, 476, 477, 478, 479, 481, 482, 483], "suppli": [5, 28, 33, 63, 75, 85, 92, 93, 94, 95, 96, 106, 109, 110, 120, 122, 139, 146, 151, 152, 161, 176, 177, 178, 181, 183, 186, 191, 193, 215, 226, 235, 243, 247, 248, 250, 251, 253, 255, 259, 261, 267, 269, 283, 288, 292, 293, 295, 297, 302, 308, 314, 324, 328, 337, 340, 341, 344, 348, 355, 362, 365, 376, 381, 384, 386, 388, 394, 395, 399, 400, 402, 415, 419, 421, 422, 425, 427, 428, 430, 432, 436, 455, 456, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 479, 483], "never": [5, 13, 22, 23, 27, 28, 33, 34, 42, 59, 60, 61, 63, 68, 73, 76, 85, 92, 95, 101, 102, 106, 110, 120, 128, 132, 133, 139, 141, 144, 151, 158, 163, 166, 167, 169, 170, 176, 177, 181, 183, 186, 190, 196, 199, 205, 226, 230, 242, 243, 245, 247, 250, 255, 259, 262, 265, 266, 267, 269, 278, 283, 292, 293, 297, 299, 314, 319, 322, 324, 328, 332, 334, 338, 340, 341, 344, 347, 348, 358, 359, 362, 365, 369, 385, 386, 394, 400, 402, 403, 410, 413, 415, 422, 425, 427, 428, 430, 432, 435, 436, 455, 462, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483], "word": [5, 11, 33, 63, 73, 85, 92, 94, 102, 103, 106, 108, 109, 120, 158, 160, 167, 173, 176, 183, 186, 190, 193, 201, 203, 208, 247, 275, 292, 297, 319, 320, 326, 331, 340, 344, 349, 353, 364, 365, 369, 386, 412, 413, 417, 430, 432, 434, 435, 436, 440, 441, 442, 449, 462, 464, 466, 467, 468, 470, 474, 478, 479, 480, 481, 483], "invok": [5, 13, 23, 27, 31, 58, 59, 63, 64, 68, 75, 84, 85, 93, 95, 99, 102, 103, 106, 109, 120, 126, 144, 151, 155, 167, 169, 176, 181, 183, 191, 193, 225, 226, 243, 245, 247, 255, 266, 267, 268, 283, 292, 293, 297, 299, 302, 308, 311, 313, 320, 324, 332, 335, 338, 340, 341, 344, 348, 352, 359, 362, 365, 369, 371, 376, 377, 380, 386, 388, 394, 402, 413, 414, 415, 416, 419, 420, 422, 423, 425, 427, 429, 432, 435, 437, 451, 455, 461, 463, 464, 465, 466, 467, 468, 469, 470, 476, 477, 478, 480, 482, 483], "malloc": [5, 7, 34, 42, 73, 78, 213, 282, 293, 424, 455, 462, 463, 465, 467, 477, 478, 479, 483], "onc": [5, 7, 13, 22, 23, 24, 28, 33, 34, 56, 59, 61, 63, 72, 73, 75, 76, 84, 85, 92, 94, 95, 96, 100, 101, 102, 106, 109, 117, 120, 126, 132, 133, 139, 140, 149, 151, 155, 158, 159, 160, 163, 167, 169, 186, 188, 190, 193, 196, 205, 218, 226, 230, 234, 235, 244, 245, 247, 250, 251, 255, 258, 261, 267, 268, 269, 270, 271, 283, 284, 288, 292, 293, 295, 299, 308, 314, 319, 320, 328, 329, 332, 333, 334, 337, 338, 340, 341, 344, 347, 353, 354, 358, 362, 365, 369, 382, 384, 386, 388, 389, 390, 395, 399, 400, 402, 403, 410, 411, 413, 415, 416, 427, 428, 430, 431, 432, 436, 440, 455, 456, 461, 462, 463, 465, 466, 467, 468, 469, 470, 474, 475, 476, 478, 480, 481, 482, 483], "space": [5, 18, 33, 42, 49, 59, 61, 63, 64, 72, 73, 85, 92, 93, 95, 100, 101, 106, 109, 115, 120, 143, 146, 150, 155, 158, 161, 162, 167, 177, 178, 184, 186, 190, 191, 193, 198, 199, 201, 202, 212, 213, 221, 225, 226, 242, 247, 248, 255, 259, 261, 266, 267, 268, 283, 284, 292, 293, 297, 303, 314, 319, 321, 322, 331, 332, 333, 334, 335, 337, 344, 345, 346, 348, 362, 364, 365, 366, 369, 375, 376, 378, 382, 384, 394, 395, 397, 399, 410, 413, 426, 428, 432, 434, 435, 461, 462, 466, 467, 468, 469, 470, 471, 472, 474, 476, 477, 479, 480, 482, 483], "tab": [5, 66, 68, 77, 122, 146, 155, 175, 177, 178, 190, 193, 198, 202, 213, 225, 242, 247, 255, 262, 297, 317, 319, 320, 323, 331, 334, 344, 345, 348, 364, 368, 375, 394, 403, 419, 435, 441, 445, 449, 455, 462, 467, 469, 472, 474, 476, 477, 479, 480, 481, 482, 483], "comma": [5, 34, 68, 78, 94, 112, 151, 175, 186, 193, 242, 248, 266, 267, 268, 271, 292, 319, 344, 345, 362, 377, 380, 395, 400, 427, 428, 430, 431, 436, 442, 455, 466, 467, 468, 469, 470, 472, 474, 477, 480, 481, 483, 484], "ignor": [5, 18, 22, 23, 24, 33, 34, 35, 39, 40, 47, 49, 59, 61, 63, 64, 66, 73, 76, 77, 101, 106, 109, 110, 115, 122, 133, 136, 137, 139, 143, 144, 149, 151, 155, 158, 159, 163, 167, 169, 175, 176, 177, 181, 183, 186, 188, 190, 191, 193, 196, 199, 200, 208, 209, 213, 215, 216, 218, 223, 225, 226, 230, 242, 243, 247, 248, 249, 250, 251, 255, 258, 261, 262, 266, 267, 268, 269, 270, 271, 272, 276, 283, 288, 293, 297, 299, 302, 304, 308, 314, 319, 320, 328, 331, 332, 333, 334, 335, 337, 338, 340, 341, 344, 347, 348, 352, 354, 356, 358, 362, 364, 365, 366, 373, 376, 378, 380, 381, 382, 386, 388, 389, 394, 395, 398, 400, 405, 410, 413, 415, 416, 421, 422, 425, 427, 428, 431, 432, 435, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "within": [5, 7, 22, 33, 42, 49, 54, 68, 73, 76, 78, 85, 92, 94, 95, 96, 99, 100, 102, 106, 120, 135, 139, 140, 144, 157, 158, 163, 167, 169, 176, 177, 183, 186, 190, 191, 193, 203, 216, 218, 225, 230, 245, 247, 248, 250, 251, 252, 253, 255, 261, 267, 270, 271, 275, 283, 284, 285, 297, 302, 307, 308, 312, 313, 319, 321, 324, 331, 332, 337, 338, 340, 344, 345, 347, 348, 352, 353, 354, 362, 364, 365, 369, 371, 376, 384, 386, 388, 394, 395, 399, 400, 410, 411, 413, 420, 422, 423, 426, 427, 428, 429, 430, 432, 435, 436, 449, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 474, 475, 476, 477, 479, 480, 481, 482, 483], "make": [5, 10, 11, 23, 33, 39, 45, 51, 59, 63, 64, 68, 72, 73, 75, 76, 84, 92, 93, 94, 95, 96, 99, 101, 102, 103, 106, 108, 109, 110, 112, 113, 120, 126, 133, 139, 140, 141, 149, 151, 155, 157, 158, 160, 161, 163, 167, 169, 170, 176, 177, 179, 181, 183, 186, 188, 190, 191, 193, 196, 197, 200, 205, 206, 209, 212, 213, 215, 218, 221, 222, 225, 226, 230, 234, 235, 242, 245, 247, 250, 252, 255, 258, 259, 261, 266, 267, 268, 269, 270, 271, 275, 279, 281, 283, 288, 292, 293, 295, 296, 297, 299, 302, 308, 312, 314, 322, 328, 329, 330, 331, 333, 334, 337, 338, 340, 341, 343, 344, 347, 352, 353, 355, 358, 362, 363, 364, 365, 369, 376, 378, 380, 381, 385, 386, 388, 394, 395, 398, 400, 402, 403, 407, 411, 412, 413, 416, 421, 422, 426, 427, 428, 430, 432, 434, 435, 436, 440, 456, 460, 461, 463, 464, 465, 466, 467, 468, 470, 471, 475, 476, 477, 480, 481, 482, 483, 484], "tad": 5, "readabl": [5, 85, 92, 101, 102, 103, 106, 117, 120, 133, 149, 151, 155, 160, 167, 176, 190, 191, 198, 205, 230, 243, 245, 258, 267, 268, 283, 288, 293, 299, 303, 304, 307, 310, 319, 333, 338, 342, 344, 347, 348, 349, 369, 377, 414, 426, 435, 455, 463, 464, 466, 468, 469, 470, 471, 475, 477, 478, 479, 480, 481, 483], "wchar_t": [5, 16, 33, 34, 59, 66, 68, 72, 73, 121, 176, 473, 474, 480, 482, 483], "ucs": [5, 352, 464, 476], "increment": [5, 33, 34, 42, 63, 68, 73, 76, 85, 94, 95, 102, 118, 119, 145, 186, 191, 207, 270, 283, 292, 293, 344, 365, 366, 369, 376, 386, 411, 413, 462, 464, 465, 466, 467, 469, 473, 475, 476, 483], "caus": [5, 9, 23, 33, 42, 47, 51, 59, 61, 63, 64, 66, 73, 75, 76, 77, 85, 95, 101, 102, 106, 110, 112, 115, 120, 122, 126, 133, 135, 138, 139, 151, 152, 155, 158, 159, 163, 167, 169, 176, 177, 186, 188, 190, 191, 193, 205, 208, 212, 213, 225, 228, 242, 245, 247, 248, 250, 255, 258, 262, 266, 267, 269, 271, 275, 276, 282, 283, 293, 297, 299, 302, 308, 313, 314, 319, 328, 330, 333, 334, 337, 340, 341, 344, 345, 352, 353, 356, 358, 362, 364, 365, 366, 376, 386, 388, 389, 390, 395, 400, 402, 405, 410, 411, 415, 419, 422, 426, 427, 428, 429, 430, 431, 432, 435, 436, 443, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 483], "produc": [5, 7, 22, 23, 25, 34, 39, 59, 63, 76, 77, 84, 85, 92, 95, 101, 102, 106, 109, 120, 139, 149, 151, 158, 161, 163, 167, 176, 177, 183, 186, 187, 190, 193, 194, 196, 197, 201, 202, 203, 205, 208, 213, 214, 225, 228, 230, 234, 235, 248, 258, 261, 262, 267, 270, 276, 283, 288, 293, 299, 302, 305, 308, 313, 318, 319, 321, 341, 344, 347, 348, 352, 358, 365, 377, 378, 380, 384, 394, 397, 406, 411, 412, 414, 415, 416, 421, 422, 428, 430, 432, 435, 449, 455, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 480, 481, 482, 483], "found": [5, 17, 22, 31, 33, 42, 45, 49, 55, 58, 59, 61, 63, 64, 71, 72, 73, 77, 79, 87, 93, 94, 95, 96, 98, 100, 101, 102, 106, 109, 110, 114, 120, 149, 151, 158, 163, 167, 170, 176, 177, 191, 193, 196, 197, 199, 203, 205, 207, 208, 211, 213, 215, 216, 225, 226, 228, 230, 233, 236, 241, 242, 243, 244, 245, 247, 248, 250, 251, 253, 255, 261, 265, 266, 267, 268, 270, 271, 272, 276, 278, 279, 282, 283, 292, 293, 295, 297, 302, 314, 319, 322, 332, 333, 335, 337, 339, 340, 341, 344, 348, 352, 354, 355, 358, 359, 362, 369, 371, 376, 378, 385, 386, 387, 388, 389, 395, 400, 406, 407, 410, 412, 413, 414, 415, 419, 420, 423, 425, 427, 428, 429, 430, 432, 434, 435, 436, 441, 451, 452, 453, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "therefor": [5, 23, 33, 42, 49, 63, 73, 75, 76, 84, 85, 92, 95, 101, 102, 103, 106, 109, 120, 139, 146, 151, 158, 173, 176, 181, 183, 208, 214, 215, 225, 243, 250, 253, 258, 262, 266, 267, 269, 281, 283, 293, 299, 313, 319, 330, 332, 333, 337, 341, 344, 352, 358, 365, 375, 386, 400, 413, 414, 421, 422, 427, 428, 430, 434, 435, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 476, 479, 480, 483], "yet": [5, 13, 23, 28, 31, 33, 34, 45, 63, 64, 73, 79, 84, 85, 92, 94, 100, 101, 106, 133, 137, 139, 151, 169, 176, 177, 186, 196, 197, 205, 213, 232, 250, 268, 283, 293, 295, 297, 308, 334, 335, 341, 344, 348, 365, 381, 386, 410, 413, 429, 431, 436, 462, 464, 465, 467, 469, 474, 477, 479, 480, 482, 483], "systemerror": [5, 23, 27, 45, 49, 55, 60, 64, 213, 443, 450, 474, 479, 483], "constructor": [5, 23, 28, 53, 55, 63, 64, 68, 73, 79, 87, 93, 94, 95, 99, 101, 102, 112, 120, 122, 126, 135, 149, 157, 158, 160, 161, 164, 167, 172, 175, 176, 181, 183, 186, 190, 193, 198, 201, 202, 203, 206, 207, 208, 213, 218, 221, 225, 226, 234, 235, 237, 242, 243, 246, 248, 258, 259, 261, 262, 267, 268, 270, 271, 278, 283, 292, 299, 305, 307, 308, 316, 321, 325, 328, 330, 331, 335, 337, 338, 341, 344, 345, 351, 358, 359, 362, 364, 365, 369, 384, 385, 386, 388, 390, 395, 402, 403, 407, 413, 420, 422, 423, 425, 428, 430, 441, 443, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "compat": [5, 23, 24, 33, 34, 42, 59, 61, 63, 64, 66, 68, 75, 76, 79, 80, 84, 87, 92, 96, 100, 101, 102, 106, 109, 110, 120, 126, 128, 139, 144, 158, 161, 167, 176, 184, 186, 193, 194, 196, 201, 203, 205, 207, 208, 213, 214, 222, 228, 230, 243, 245, 247, 248, 250, 251, 252, 253, 255, 259, 266, 267, 268, 271, 283, 288, 293, 295, 299, 301, 302, 308, 312, 314, 319, 322, 325, 332, 337, 340, 341, 344, 348, 352, 358, 362, 365, 366, 376, 381, 384, 386, 387, 388, 394, 395, 397, 411, 419, 421, 422, 425, 427, 428, 430, 432, 435, 436, 456, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "dict": [5, 10, 22, 23, 26, 31, 33, 35, 54, 59, 61, 63, 68, 73, 78, 79, 84, 85, 87, 88, 93, 95, 96, 100, 112, 120, 122, 126, 160, 167, 171, 175, 181, 182, 184, 187, 190, 191, 193, 205, 211, 225, 226, 244, 250, 254, 255, 262, 267, 268, 269, 283, 288, 291, 299, 304, 307, 326, 330, 340, 341, 345, 355, 358, 362, 365, 369, 376, 379, 385, 386, 388, 402, 413, 419, 427, 428, 430, 431, 435, 441, 442, 446, 450, 452, 455, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483], "pair": [5, 7, 22, 28, 33, 40, 64, 68, 73, 75, 85, 92, 94, 95, 99, 106, 109, 120, 126, 133, 136, 141, 144, 151, 160, 167, 177, 181, 184, 186, 190, 191, 193, 196, 197, 202, 209, 213, 221, 228, 230, 244, 255, 259, 261, 262, 268, 271, 275, 283, 288, 292, 293, 297, 299, 309, 322, 332, 337, 338, 340, 341, 344, 348, 355, 358, 359, 361, 363, 365, 369, 375, 376, 384, 385, 386, 389, 394, 395, 402, 410, 413, 416, 417, 427, 428, 430, 435, 436, 441, 442, 463, 464, 465, 466, 468, 469, 470, 471, 474, 475, 476, 477, 479, 483], "consecut": [5, 22, 61, 64, 95, 143, 158, 261, 275, 343, 344, 345, 347, 384, 428, 435, 455, 466, 477, 483], "add": [5, 7, 28, 31, 33, 34, 45, 55, 58, 59, 63, 73, 76, 77, 79, 84, 85, 87, 92, 93, 94, 95, 96, 100, 101, 102, 103, 106, 109, 110, 112, 117, 120, 122, 139, 141, 143, 151, 152, 155, 157, 158, 160, 161, 163, 167, 169, 177, 181, 183, 186, 188, 189, 191, 193, 194, 195, 196, 197, 200, 203, 205, 206, 208, 223, 225, 226, 230, 232, 234, 236, 243, 244, 245, 247, 250, 255, 258, 261, 262, 267, 268, 271, 276, 281, 283, 289, 291, 292, 293, 299, 301, 302, 307, 308, 319, 321, 328, 332, 334, 335, 337, 338, 340, 341, 344, 345, 347, 352, 353, 354, 355, 358, 362, 364, 366, 369, 375, 376, 384, 385, 386, 388, 389, 390, 394, 395, 400, 402, 410, 411, 413, 414, 419, 420, 421, 422, 423, 426, 427, 428, 430, 431, 432, 434, 435, 436, 440, 443, 446, 449, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "serv": [5, 73, 76, 101, 102, 126, 133, 136, 186, 193, 202, 203, 226, 245, 250, 253, 261, 268, 283, 293, 299, 313, 333, 340, 341, 369, 384, 386, 407, 413, 420, 432, 435, 466, 470, 475, 476, 478, 480, 483], "respect": [5, 7, 22, 23, 31, 33, 34, 39, 47, 49, 64, 72, 73, 75, 76, 84, 85, 93, 94, 101, 102, 103, 106, 108, 112, 120, 132, 135, 139, 141, 149, 151, 158, 163, 167, 176, 177, 183, 186, 191, 193, 194, 196, 208, 215, 225, 230, 243, 245, 250, 253, 258, 262, 267, 268, 269, 270, 275, 278, 283, 293, 299, 308, 309, 322, 332, 333, 334, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 353, 354, 358, 365, 366, 375, 376, 384, 386, 388, 397, 411, 426, 428, 430, 432, 436, 455, 456, 462, 464, 466, 468, 470, 474, 475, 476, 477, 479, 480, 481, 482, 483], "py_vabuildvalu": [5, 57], "py_fals": [6, 63, 64, 75, 431, 483], "py_tru": [6, 63, 64, 75, 431, 483], "pybool_typ": [6, 57, 483], "instanc": [6, 9, 13, 16, 20, 23, 25, 28, 31, 33, 39, 42, 43, 45, 47, 49, 53, 55, 58, 60, 61, 63, 64, 68, 71, 73, 75, 76, 78, 89, 92, 95, 96, 100, 101, 102, 103, 106, 108, 110, 117, 120, 126, 128, 132, 133, 135, 136, 137, 139, 140, 144, 149, 151, 153, 155, 157, 158, 159, 161, 167, 169, 172, 176, 177, 183, 186, 190, 191, 193, 194, 195, 196, 199, 201, 202, 203, 205, 206, 207, 208, 209, 212, 213, 216, 218, 221, 225, 226, 230, 234, 235, 242, 243, 244, 245, 247, 248, 250, 251, 252, 253, 255, 258, 261, 262, 267, 268, 269, 270, 271, 281, 283, 284, 285, 288, 292, 293, 296, 297, 298, 305, 307, 308, 312, 314, 315, 318, 319, 321, 323, 325, 329, 330, 331, 332, 335, 337, 338, 340, 341, 347, 348, 352, 355, 358, 359, 362, 364, 365, 369, 380, 381, 382, 384, 385, 386, 388, 389, 390, 394, 395, 400, 402, 403, 406, 408, 410, 411, 412, 413, 414, 415, 416, 419, 420, 422, 423, 425, 427, 429, 430, 435, 436, 440, 443, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "layer": [6, 9, 20, 25, 26, 32, 39, 56, 60, 61, 68, 75, 84, 102, 305, 335, 337, 341, 347, 419, 455, 462, 465, 468, 481, 482, 483], "pybool_check": 6, "immort": [6, 33, 34, 46, 52, 56, 87, 352, 465, 474, 481, 483], "py_return_fals": [6, 466], "py_return_tru": [6, 466], "pybool_fromlong": [6, 57], "certain": [7, 23, 33, 41, 42, 49, 58, 59, 63, 66, 73, 77, 85, 92, 94, 95, 101, 102, 106, 120, 133, 144, 158, 173, 176, 183, 190, 193, 195, 196, 199, 203, 205, 206, 208, 209, 234, 247, 255, 266, 267, 268, 269, 270, 271, 272, 283, 292, 293, 295, 297, 307, 308, 337, 341, 346, 348, 354, 358, 365, 366, 369, 386, 387, 388, 394, 410, 419, 428, 430, 432, 435, 461, 462, 463, 464, 465, 466, 468, 469, 471, 474, 476, 477, 480, 481, 483], "wrap": [7, 21, 33, 42, 43, 58, 63, 68, 79, 88, 93, 98, 102, 109, 112, 120, 126, 129, 137, 139, 141, 149, 155, 158, 169, 176, 177, 181, 187, 190, 191, 193, 201, 202, 207, 208, 213, 220, 225, 226, 230, 234, 242, 247, 251, 254, 255, 258, 261, 267, 268, 270, 281, 283, 292, 293, 304, 333, 340, 341, 344, 347, 352, 356, 358, 362, 363, 368, 376, 385, 386, 388, 394, 395, 405, 407, 413, 417, 427, 428, 452, 461, 464, 465, 466, 467, 468, 469, 470, 474, 475, 477, 478, 479, 481, 483], "parti": [7, 31, 33, 84, 85, 102, 112, 126, 128, 132, 133, 138, 158, 169, 176, 181, 183, 184, 225, 235, 250, 251, 283, 293, 299, 302, 330, 334, 340, 341, 352, 355, 365, 369, 380, 386, 399, 400, 402, 425, 426, 428, 461, 462, 463, 465, 466, 468, 469, 471, 474, 475, 476, 477, 479, 481, 482, 483], "librari": [7, 23, 33, 34, 42, 45, 51, 59, 63, 66, 68, 71, 72, 73, 74, 77, 79, 80, 84, 85, 91, 92, 95, 98, 100, 106, 107, 108, 109, 110, 118, 120, 123, 126, 133, 139, 142, 167, 169, 177, 178, 183, 184, 186, 187, 192, 193, 194, 203, 208, 212, 228, 230, 235, 243, 247, 251, 256, 257, 264, 266, 267, 269, 275, 282, 283, 287, 292, 293, 296, 299, 302, 308, 313, 314, 320, 328, 330, 331, 333, 334, 337, 340, 341, 344, 352, 354, 355, 358, 362, 365, 366, 369, 375, 378, 384, 386, 388, 390, 391, 394, 399, 400, 410, 422, 425, 427, 428, 430, 432, 433, 434, 435, 436, 445, 454, 455, 456, 459, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484], "special": [7, 18, 23, 31, 33, 34, 35, 42, 49, 58, 60, 61, 63, 64, 68, 73, 75, 84, 85, 87, 92, 94, 95, 100, 101, 102, 103, 106, 109, 120, 126, 137, 138, 139, 143, 144, 151, 152, 155, 167, 168, 169, 176, 177, 180, 181, 183, 187, 191, 193, 196, 203, 205, 208, 220, 222, 228, 230, 245, 247, 250, 254, 255, 259, 261, 262, 266, 267, 268, 271, 272, 281, 282, 283, 290, 292, 293, 296, 299, 302, 319, 321, 324, 329, 331, 332, 333, 337, 341, 342, 347, 348, 352, 353, 358, 361, 365, 369, 375, 388, 394, 395, 402, 410, 413, 415, 419, 425, 426, 427, 429, 430, 431, 433, 435, 436, 449, 456, 461, 462, 463, 464, 466, 467, 468, 469, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "imag": [7, 15, 42, 68, 85, 87, 151, 154, 177, 198, 200, 206, 225, 226, 243, 249, 262, 289, 322, 336, 344, 345, 352, 368, 376, 384, 395, 402, 406, 419, 428, 431, 475, 480, 483], "numer": [7, 41, 47, 63, 64, 68, 84, 85, 95, 101, 102, 106, 109, 110, 144, 147, 154, 158, 177, 186, 191, 209, 212, 213, 221, 225, 233, 234, 238, 240, 242, 245, 254, 261, 262, 266, 267, 275, 283, 289, 290, 293, 302, 308, 314, 319, 325, 331, 335, 337, 340, 341, 343, 345, 352, 369, 376, 377, 384, 387, 388, 395, 413, 419, 422, 430, 449, 461, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 481, 483], "analysi": [7, 33, 68, 106, 152, 154, 190, 222, 254, 264, 279, 308, 386, 430, 433, 434, 436, 467, 476, 478, 483], "while": [7, 13, 22, 23, 28, 33, 36, 40, 45, 49, 63, 64, 68, 72, 73, 75, 76, 84, 85, 87, 92, 93, 94, 95, 99, 100, 101, 102, 103, 106, 107, 109, 112, 115, 116, 120, 122, 126, 133, 134, 136, 138, 139, 140, 147, 149, 151, 158, 160, 167, 169, 170, 176, 177, 179, 183, 184, 186, 190, 191, 192, 193, 196, 199, 208, 209, 211, 213, 225, 226, 227, 230, 232, 234, 235, 236, 242, 243, 247, 250, 251, 258, 259, 261, 265, 266, 267, 268, 269, 270, 271, 283, 292, 293, 297, 299, 302, 308, 311, 314, 316, 318, 319, 326, 328, 329, 331, 333, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 358, 362, 364, 365, 366, 369, 371, 380, 381, 384, 386, 388, 394, 395, 399, 400, 410, 413, 422, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 440, 441, 442, 443, 449, 450, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "characterist": [7, 85, 299, 346, 352, 467, 468], "back": [7, 10, 22, 25, 28, 39, 41, 42, 58, 59, 63, 64, 73, 76, 84, 85, 95, 96, 102, 106, 108, 109, 112, 120, 128, 133, 146, 151, 155, 158, 161, 167, 169, 177, 181, 183, 186, 190, 191, 193, 194, 196, 205, 208, 215, 225, 230, 232, 235, 243, 245, 250, 258, 268, 269, 278, 282, 283, 284, 292, 293, 295, 297, 299, 312, 314, 319, 330, 337, 338, 340, 341, 342, 344, 345, 352, 358, 362, 366, 369, 377, 378, 384, 389, 390, 394, 395, 413, 417, 419, 420, 422, 425, 427, 428, 432, 436, 449, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 479, 481, 482, 483], "desir": [7, 9, 23, 33, 42, 61, 73, 85, 92, 93, 94, 95, 101, 102, 103, 106, 109, 120, 137, 139, 151, 158, 161, 167, 169, 176, 177, 189, 190, 191, 208, 212, 226, 235, 245, 247, 250, 259, 266, 267, 271, 272, 276, 278, 292, 297, 302, 307, 311, 319, 320, 338, 340, 341, 344, 345, 347, 354, 362, 364, 365, 369, 375, 376, 384, 386, 394, 402, 405, 412, 413, 416, 428, 430, 432, 455, 462, 464, 465, 466, 467, 468, 469, 477, 478, 479, 481, 483], "situat": [7, 42, 61, 63, 73, 75, 85, 94, 95, 100, 101, 102, 103, 110, 120, 126, 151, 158, 169, 181, 191, 207, 213, 230, 235, 250, 253, 258, 267, 271, 283, 292, 335, 348, 362, 365, 390, 397, 400, 410, 428, 464, 469, 470, 474, 477, 478, 479, 483], "direct": [7, 13, 28, 31, 33, 34, 42, 45, 46, 49, 54, 58, 59, 61, 63, 64, 67, 68, 72, 73, 75, 76, 85, 93, 94, 99, 100, 101, 102, 103, 110, 112, 115, 120, 123, 128, 132, 133, 139, 146, 149, 151, 158, 159, 160, 161, 163, 167, 169, 176, 181, 183, 186, 187, 190, 191, 194, 196, 201, 205, 206, 209, 212, 213, 218, 221, 225, 226, 232, 235, 242, 243, 245, 247, 251, 252, 253, 258, 259, 262, 266, 267, 268, 270, 271, 278, 280, 283, 292, 293, 295, 299, 302, 307, 308, 314, 319, 320, 324, 330, 335, 337, 338, 340, 341, 344, 348, 352, 358, 362, 364, 365, 366, 369, 374, 375, 376, 378, 380, 381, 384, 385, 388, 390, 395, 400, 402, 410, 413, 414, 417, 421, 425, 426, 427, 428, 429, 430, 431, 432, 434, 436, 443, 455, 461, 462, 464, 465, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "intermedi": [7, 84, 87, 95, 186, 191, 206, 226, 250, 261, 275, 292, 293, 332, 341, 432, 467, 471, 475, 480, 483], "facil": [7, 33, 92, 101, 142, 144, 155, 157, 177, 247, 264, 267, 269, 271, 293, 299, 337, 356, 358, 369, 384, 428, 461, 465, 483], "level": [7, 13, 16, 22, 23, 31, 32, 33, 34, 42, 43, 59, 63, 68, 73, 74, 75, 79, 84, 85, 93, 94, 95, 96, 98, 100, 103, 109, 110, 118, 120, 122, 125, 126, 129, 133, 135, 136, 137, 139, 140, 146, 149, 152, 158, 160, 163, 164, 167, 169, 170, 177, 180, 181, 183, 190, 191, 193, 194, 202, 204, 207, 212, 213, 223, 225, 226, 230, 234, 242, 243, 245, 247, 248, 250, 251, 254, 255, 256, 258, 260, 261, 268, 269, 270, 271, 279, 281, 282, 283, 285, 288, 293, 295, 296, 297, 299, 302, 304, 305, 307, 308, 309, 311, 312, 313, 314, 319, 321, 322, 324, 330, 331, 332, 333, 334, 335, 340, 341, 347, 352, 354, 355, 356, 358, 359, 360, 362, 364, 365, 369, 375, 376, 381, 385, 388, 395, 399, 400, 402, 403, 410, 411, 413, 415, 419, 422, 424, 425, 427, 428, 429, 430, 431, 432, 435, 436, 440, 450, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484], "side": [7, 14, 22, 33, 52, 60, 68, 73, 75, 84, 85, 95, 102, 106, 109, 110, 126, 133, 151, 160, 169, 177, 181, 187, 190, 191, 196, 226, 242, 243, 250, 266, 267, 269, 283, 288, 293, 299, 302, 311, 318, 323, 324, 330, 337, 338, 344, 348, 352, 362, 369, 376, 386, 388, 389, 413, 425, 427, 430, 432, 436, 442, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "export": [7, 23, 42, 43, 45, 48, 63, 68, 71, 72, 73, 77, 85, 110, 118, 299, 337, 340, 344, 352, 355, 378, 436, 456, 465, 469, 475, 476, 478, 479, 480, 481, 482, 483], "expos": [7, 33, 38, 43, 44, 45, 46, 55, 58, 61, 62, 63, 64, 72, 73, 76, 101, 110, 126, 139, 176, 177, 181, 186, 215, 250, 252, 255, 259, 266, 267, 281, 283, 293, 299, 307, 330, 331, 335, 344, 345, 346, 348, 352, 380, 384, 385, 387, 402, 405, 420, 422, 425, 428, 432, 465, 468, 469, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "section": [7, 17, 34, 42, 51, 55, 58, 63, 64, 71, 72, 73, 75, 76, 77, 85, 92, 93, 95, 99, 100, 101, 102, 103, 106, 109, 110, 114, 120, 122, 126, 132, 133, 137, 139, 143, 151, 155, 158, 160, 167, 169, 176, 181, 184, 186, 193, 194, 198, 202, 203, 212, 221, 230, 235, 241, 242, 243, 247, 248, 258, 261, 262, 267, 268, 271, 292, 293, 299, 305, 307, 308, 314, 319, 321, 328, 332, 337, 340, 341, 344, 347, 348, 352, 358, 365, 369, 384, 388, 394, 395, 410, 411, 413, 415, 416, 419, 422, 426, 427, 428, 429, 430, 432, 435, 436, 451, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "consum": [7, 59, 63, 64, 68, 84, 85, 95, 96, 106, 120, 125, 127, 134, 136, 151, 158, 169, 191, 194, 207, 242, 261, 262, 283, 288, 292, 293, 296, 298, 308, 316, 319, 322, 330, 347, 352, 362, 365, 382, 386, 394, 413, 428, 431, 455, 462, 466, 467, 468, 469, 475, 476, 477, 479, 481, 483], "sever": [7, 28, 33, 42, 66, 72, 73, 75, 77, 84, 85, 93, 94, 95, 96, 100, 101, 102, 106, 108, 109, 110, 112, 120, 126, 135, 137, 157, 158, 161, 167, 176, 177, 183, 184, 186, 188, 191, 193, 199, 212, 225, 241, 247, 250, 255, 259, 267, 268, 269, 271, 273, 281, 283, 287, 292, 293, 295, 299, 307, 308, 311, 319, 321, 329, 333, 335, 337, 338, 340, 341, 342, 344, 347, 348, 358, 365, 369, 375, 376, 378, 380, 381, 384, 386, 387, 388, 390, 395, 400, 402, 403, 405, 406, 415, 419, 425, 427, 428, 432, 434, 436, 449, 462, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 479, 480, 481, 482, 483], "obtain": [7, 31, 64, 92, 99, 101, 103, 106, 126, 137, 149, 151, 152, 153, 177, 183, 186, 190, 196, 197, 203, 205, 208, 215, 225, 235, 248, 258, 259, 261, 266, 267, 268, 269, 270, 278, 283, 292, 293, 308, 311, 313, 319, 337, 341, 344, 348, 366, 389, 395, 399, 402, 413, 414, 415, 426, 427, 430, 436, 461, 462, 464, 465, 467, 468, 475, 476, 477, 478, 479, 480, 483], "simpl": [7, 33, 43, 63, 64, 67, 68, 73, 75, 84, 85, 92, 94, 95, 99, 100, 101, 102, 103, 109, 110, 113, 115, 120, 122, 138, 140, 141, 151, 155, 158, 161, 167, 169, 170, 173, 174, 176, 181, 183, 184, 187, 189, 190, 194, 196, 200, 205, 207, 208, 209, 222, 226, 230, 234, 242, 244, 248, 254, 255, 262, 267, 268, 269, 271, 278, 283, 289, 292, 293, 295, 297, 299, 304, 307, 308, 319, 324, 329, 333, 335, 337, 340, 343, 344, 345, 347, 358, 359, 362, 365, 369, 378, 380, 381, 384, 385, 386, 388, 394, 395, 399, 400, 402, 406, 407, 408, 410, 411, 413, 414, 419, 420, 422, 427, 430, 431, 433, 440, 446, 455, 461, 462, 463, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 481, 482, 483, 484], "orient": [7, 42, 68, 76, 85, 87, 93, 95, 109, 133, 201, 222, 254, 283, 308, 337, 344, 365, 366, 369, 376, 440, 463, 468, 475, 477], "multi": [7, 16, 32, 33, 68, 71, 73, 84, 85, 86, 87, 94, 95, 100, 102, 106, 108, 109, 113, 118, 149, 186, 190, 191, 193, 226, 234, 247, 250, 261, 267, 268, 270, 283, 303, 316, 319, 322, 325, 331, 332, 340, 344, 365, 420, 422, 427, 435, 445, 455, 461, 462, 467, 469, 472, 474, 476, 477, 481, 483, 484], "valu": [7, 9, 11, 12, 13, 15, 17, 18, 20, 22, 23, 25, 26, 27, 28, 30, 31, 33, 34, 35, 37, 39, 40, 41, 42, 45, 46, 47, 49, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 74, 75, 76, 78, 79, 87, 89, 92, 93, 96, 99, 101, 102, 106, 108, 109, 110, 112, 115, 117, 118, 122, 126, 129, 133, 137, 138, 139, 140, 141, 142, 144, 146, 147, 149, 151, 152, 153, 155, 157, 158, 159, 160, 161, 163, 169, 170, 173, 175, 177, 178, 183, 184, 188, 189, 190, 191, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 206, 208, 209, 211, 212, 213, 215, 216, 217, 218, 221, 225, 226, 228, 230, 234, 235, 236, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 255, 257, 258, 259, 261, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 281, 282, 283, 284, 285, 287, 288, 290, 291, 293, 295, 297, 298, 299, 302, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 324, 325, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 344, 345, 346, 347, 348, 352, 353, 354, 355, 356, 358, 359, 362, 364, 365, 366, 369, 375, 376, 377, 378, 381, 382, 384, 385, 386, 387, 388, 389, 390, 394, 395, 397, 399, 400, 402, 403, 404, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 429, 431, 432, 433, 435, 436, 440, 441, 442, 446, 449, 451, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "file": [7, 16, 23, 25, 31, 32, 33, 34, 41, 45, 49, 51, 59, 63, 66, 68, 72, 73, 75, 76, 77, 78, 79, 81, 84, 86, 87, 89, 93, 94, 95, 96, 98, 100, 103, 106, 110, 112, 114, 115, 117, 118, 119, 121, 122, 125, 130, 131, 132, 133, 137, 139, 140, 141, 143, 144, 146, 148, 150, 151, 152, 153, 155, 157, 158, 160, 163, 169, 174, 175, 176, 177, 178, 183, 184, 185, 186, 187, 190, 191, 196, 200, 201, 204, 206, 207, 208, 212, 213, 215, 217, 218, 219, 220, 223, 225, 228, 229, 230, 231, 234, 242, 243, 245, 248, 249, 252, 253, 254, 255, 257, 258, 259, 260, 262, 265, 266, 267, 269, 271, 274, 276, 279, 280, 281, 283, 286, 288, 292, 295, 296, 297, 298, 299, 300, 301, 302, 303, 307, 308, 309, 311, 312, 313, 314, 319, 321, 322, 324, 326, 328, 329, 330, 331, 333, 334, 336, 337, 338, 340, 341, 342, 344, 347, 348, 349, 350, 352, 355, 359, 360, 361, 362, 363, 365, 366, 367, 368, 376, 377, 378, 380, 381, 382, 384, 386, 387, 388, 390, 391, 394, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 411, 412, 413, 414, 416, 417, 419, 421, 423, 425, 426, 427, 429, 430, 431, 432, 435, 436, 440, 441, 442, 443, 445, 446, 448, 449, 450, 452, 455, 458, 459, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 482, 483, 484], "seri": [7, 33, 61, 95, 106, 112, 120, 155, 176, 186, 191, 225, 235, 292, 314, 337, 344, 355, 365, 375, 386, 394, 430, 441, 449, 450, 464, 466, 467, 468, 469, 477, 480], "written": [7, 9, 23, 34, 42, 45, 49, 59, 64, 72, 73, 76, 84, 85, 87, 91, 92, 93, 95, 96, 100, 102, 106, 109, 112, 117, 126, 133, 137, 139, 146, 151, 152, 157, 158, 161, 163, 167, 169, 176, 177, 184, 191, 193, 196, 202, 205, 213, 214, 225, 230, 234, 235, 245, 247, 255, 258, 269, 271, 278, 281, 283, 288, 292, 293, 295, 299, 301, 304, 307, 308, 311, 313, 320, 324, 328, 330, 332, 333, 337, 338, 340, 341, 344, 352, 355, 358, 361, 362, 380, 382, 384, 385, 386, 388, 400, 402, 405, 408, 410, 413, 419, 420, 421, 422, 423, 426, 428, 431, 434, 435, 436, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 483], "intern": [7, 9, 10, 11, 13, 16, 22, 23, 30, 31, 33, 34, 41, 42, 45, 55, 59, 61, 63, 64, 68, 73, 75, 76, 84, 92, 93, 95, 97, 101, 102, 106, 109, 110, 112, 118, 120, 126, 128, 135, 136, 139, 140, 149, 155, 157, 158, 161, 167, 176, 181, 183, 184, 186, 191, 193, 199, 204, 207, 208, 213, 235, 243, 245, 247, 250, 255, 258, 261, 265, 266, 267, 269, 270, 274, 275, 276, 278, 283, 293, 297, 299, 302, 307, 308, 314, 322, 328, 331, 332, 333, 337, 340, 341, 346, 347, 348, 352, 358, 359, 362, 365, 366, 369, 375, 376, 381, 384, 386, 388, 395, 400, 402, 410, 411, 413, 415, 419, 422, 423, 429, 430, 450, 456, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "readinto": [7, 149, 242, 258, 299, 468, 476, 478, 483], "argument": [7, 9, 11, 13, 22, 23, 24, 25, 28, 31, 33, 34, 35, 37, 39, 42, 47, 49, 56, 58, 59, 60, 61, 63, 64, 65, 66, 68, 72, 73, 75, 76, 78, 79, 84, 87, 89, 92, 93, 94, 95, 96, 98, 100, 101, 102, 103, 106, 108, 109, 110, 112, 114, 115, 117, 118, 122, 126, 128, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 146, 149, 151, 152, 153, 155, 157, 158, 159, 160, 161, 163, 164, 167, 169, 170, 173, 177, 178, 181, 183, 186, 187, 188, 189, 190, 191, 193, 195, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 208, 209, 212, 213, 214, 215, 218, 221, 223, 225, 226, 228, 230, 233, 234, 235, 242, 243, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 275, 276, 278, 279, 281, 282, 283, 287, 288, 295, 297, 299, 301, 302, 303, 304, 307, 308, 311, 313, 314, 315, 319, 320, 321, 322, 324, 325, 326, 328, 331, 332, 333, 334, 335, 336, 337, 340, 341, 342, 344, 345, 347, 352, 355, 356, 358, 359, 361, 362, 364, 365, 366, 369, 371, 376, 378, 380, 381, 384, 385, 386, 388, 389, 394, 395, 397, 399, 400, 402, 403, 405, 406, 407, 408, 410, 411, 413, 414, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 429, 430, 431, 432, 436, 440, 442, 443, 445, 446, 450, 455, 456, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 480, 481, 482, 483], "select": [7, 33, 59, 64, 66, 68, 84, 93, 94, 96, 101, 106, 107, 109, 120, 126, 138, 141, 160, 169, 176, 177, 213, 225, 230, 246, 247, 248, 251, 254, 260, 261, 266, 268, 270, 281, 283, 288, 293, 299, 308, 311, 313, 318, 329, 333, 335, 337, 338, 340, 344, 345, 347, 348, 364, 365, 366, 368, 369, 371, 375, 376, 384, 386, 390, 403, 413, 417, 427, 428, 429, 430, 432, 456, 461, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 478, 479, 480, 481, 482, 483], "reject": [7, 99, 103, 106, 167, 243, 248, 275, 318, 358, 435, 436, 462, 469, 477, 479, 483], "acquir": [7, 33, 73, 96, 115, 138, 169, 208, 215, 267, 271, 283, 293, 333, 341, 358, 365, 374, 428, 467, 468, 469, 470, 473, 475, 476, 478, 480, 483], "over": [7, 13, 22, 23, 33, 42, 49, 61, 64, 68, 73, 74, 75, 84, 91, 92, 93, 94, 95, 101, 102, 106, 108, 109, 120, 126, 133, 141, 144, 151, 152, 160, 161, 167, 170, 176, 177, 183, 184, 186, 190, 191, 193, 196, 201, 202, 204, 205, 219, 225, 226, 230, 243, 247, 248, 250, 252, 253, 254, 258, 259, 261, 266, 267, 268, 269, 271, 276, 278, 283, 288, 293, 299, 305, 308, 314, 319, 322, 328, 329, 332, 335, 337, 340, 341, 344, 348, 352, 358, 362, 369, 375, 376, 377, 378, 380, 384, 385, 386, 388, 397, 400, 410, 412, 413, 419, 422, 427, 428, 430, 432, 435, 440, 441, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 483], "target": [7, 33, 35, 64, 68, 84, 93, 98, 101, 102, 120, 122, 126, 133, 136, 169, 183, 186, 191, 241, 242, 247, 250, 251, 255, 268, 269, 283, 284, 292, 293, 296, 314, 316, 319, 332, 333, 337, 338, 340, 358, 362, 365, 369, 371, 386, 388, 389, 399, 410, 413, 415, 419, 421, 422, 423, 425, 427, 428, 429, 430, 431, 432, 436, 442, 455, 456, 461, 465, 467, 468, 470, 472, 474, 475, 476, 477, 480, 481, 483], "pyobject_getbuff": [7, 48, 57, 63, 468, 473, 483], "right": [7, 15, 42, 47, 64, 68, 72, 73, 85, 92, 95, 102, 103, 106, 109, 112, 122, 141, 144, 146, 151, 155, 158, 160, 169, 176, 177, 183, 186, 190, 191, 193, 196, 213, 216, 225, 226, 235, 247, 248, 255, 275, 288, 289, 292, 293, 295, 299, 302, 308, 314, 319, 330, 337, 341, 344, 345, 364, 369, 374, 375, 376, 384, 388, 389, 400, 403, 404, 411, 425, 426, 427, 428, 430, 431, 435, 436, 440, 452, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 477, 479, 480, 481, 483], "sibl": [7, 85, 112, 120, 225, 376, 410], "isn": [7, 22, 23, 25, 31, 33, 61, 63, 73, 76, 79, 84, 85, 92, 93, 94, 99, 100, 102, 106, 109, 115, 120, 133, 139, 157, 158, 169, 183, 191, 193, 196, 202, 204, 205, 234, 243, 248, 255, 269, 293, 302, 314, 319, 337, 338, 341, 342, 343, 352, 355, 369, 378, 388, 390, 394, 403, 405, 406, 419, 428, 436, 449, 462, 463, 464, 465, 466, 467, 468, 469, 475, 483], "anymor": [7, 11, 31, 33, 63, 64, 85, 133, 283, 293, 297, 337, 352, 469, 470, 474, 475, 476, 481, 483], "could": [7, 22, 23, 27, 31, 33, 39, 42, 47, 56, 61, 63, 73, 76, 77, 85, 92, 93, 94, 95, 100, 101, 102, 103, 109, 110, 112, 120, 126, 128, 129, 132, 133, 135, 138, 141, 151, 155, 167, 176, 177, 183, 193, 200, 201, 206, 208, 216, 225, 226, 228, 230, 245, 247, 255, 259, 261, 262, 267, 268, 269, 271, 283, 292, 293, 295, 296, 297, 299, 303, 308, 311, 314, 319, 321, 329, 331, 333, 337, 340, 348, 352, 358, 362, 365, 369, 382, 386, 388, 390, 394, 395, 397, 402, 410, 422, 425, 428, 430, 432, 434, 435, 436, 443, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "lead": [7, 18, 28, 39, 63, 64, 73, 75, 78, 85, 94, 99, 100, 101, 102, 106, 139, 140, 150, 151, 155, 163, 167, 183, 186, 188, 190, 193, 196, 199, 205, 208, 221, 225, 228, 243, 245, 247, 250, 255, 258, 259, 261, 267, 269, 271, 275, 276, 283, 293, 297, 299, 308, 314, 318, 337, 344, 347, 352, 354, 356, 358, 359, 362, 364, 366, 381, 388, 394, 395, 400, 410, 413, 422, 427, 428, 429, 430, 432, 435, 436, 455, 461, 462, 465, 466, 467, 468, 470, 474, 476, 477, 479, 480, 481, 482, 483], "various": [7, 33, 42, 58, 63, 73, 75, 79, 85, 91, 92, 93, 94, 95, 103, 106, 109, 112, 117, 120, 133, 146, 151, 158, 169, 176, 178, 181, 186, 190, 193, 194, 197, 203, 208, 216, 217, 230, 242, 243, 250, 258, 259, 261, 264, 268, 273, 278, 281, 290, 292, 293, 298, 308, 314, 331, 335, 337, 338, 339, 340, 341, 344, 345, 347, 352, 354, 358, 362, 366, 369, 384, 385, 387, 388, 390, 395, 397, 413, 428, 430, 432, 435, 436, 455, 462, 463, 464, 465, 466, 467, 468, 469, 470, 475, 476, 477, 478, 479, 480, 481, 483], "resourc": [7, 23, 33, 63, 68, 84, 85, 91, 100, 110, 119, 120, 132, 133, 135, 138, 142, 169, 188, 193, 212, 213, 226, 242, 248, 250, 251, 254, 257, 267, 280, 283, 293, 299, 302, 329, 332, 337, 341, 344, 352, 362, 365, 369, 376, 382, 388, 391, 394, 395, 398, 400, 405, 413, 416, 419, 428, 432, 455, 465, 467, 468, 469, 473, 475, 476, 479, 482, 483], "leak": [7, 33, 38, 45, 59, 60, 73, 100, 102, 225, 227, 283, 293, 348, 352, 382, 430, 462, 463, 469, 470, 475, 477, 478, 482, 483], "simpli": [7, 63, 72, 73, 75, 76, 79, 84, 85, 95, 99, 102, 103, 106, 109, 120, 139, 152, 155, 158, 167, 176, 177, 183, 186, 193, 225, 230, 250, 255, 262, 267, 268, 269, 272, 283, 292, 293, 297, 299, 304, 314, 319, 324, 325, 333, 335, 340, 342, 345, 348, 352, 353, 365, 385, 386, 388, 395, 400, 402, 403, 410, 411, 419, 421, 432, 461, 462, 463, 464, 465, 466, 467, 468, 469, 474, 475, 478, 483], "programm": [7, 63, 73, 77, 80, 85, 92, 93, 101, 103, 177, 181, 183, 186, 193, 194, 266, 271, 283, 292, 293, 295, 337, 340, 344, 347, 352, 369, 375, 384, 390, 400, 402, 405, 427, 436, 463, 464, 466, 467, 468, 475, 483], "slice": [7, 40, 42, 54, 56, 60, 68, 85, 87, 95, 121, 122, 141, 168, 171, 176, 191, 206, 213, 225, 228, 261, 278, 283, 291, 293, 296, 299, 319, 340, 344, 366, 415, 431, 436, 442, 446, 449, 450, 462, 464, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 480, 482, 483, 484], "mechan": [7, 11, 28, 33, 45, 61, 63, 73, 75, 79, 84, 85, 92, 93, 94, 101, 102, 106, 108, 126, 139, 143, 169, 176, 181, 193, 197, 203, 226, 243, 244, 245, 246, 248, 251, 259, 260, 266, 267, 268, 269, 271, 272, 292, 297, 299, 302, 314, 319, 322, 324, 333, 335, 337, 338, 341, 344, 352, 358, 365, 369, 375, 376, 385, 388, 395, 400, 423, 426, 428, 432, 435, 436, 462, 463, 464, 465, 466, 467, 469, 471, 474, 475, 476, 477, 478, 481, 482, 483], "abil": [7, 72, 73, 85, 92, 95, 101, 102, 106, 117, 213, 250, 253, 268, 283, 292, 324, 332, 344, 410, 421, 423, 426, 427, 463, 464, 465, 467, 468, 469, 475, 476, 477, 478, 479, 483], "quit": [7, 72, 73, 76, 84, 92, 95, 96, 101, 102, 103, 106, 120, 144, 168, 169, 176, 177, 189, 200, 223, 247, 258, 269, 283, 288, 292, 297, 305, 309, 335, 340, 341, 369, 430, 432, 434, 441, 448, 450, 451, 462, 463, 464, 465, 467, 476, 477, 483], "easili": [7, 23, 42, 72, 73, 76, 78, 84, 85, 94, 99, 101, 102, 103, 106, 139, 151, 158, 167, 169, 176, 200, 225, 230, 255, 297, 319, 331, 344, 362, 388, 402, 428, 435, 451, 461, 462, 465, 467, 471, 475, 476, 478, 479, 482, 483], "constant": [7, 25, 33, 45, 58, 63, 64, 68, 76, 78, 84, 85, 92, 94, 102, 115, 118, 120, 122, 126, 139, 158, 161, 164, 173, 176, 178, 183, 186, 191, 193, 211, 215, 225, 226, 235, 242, 244, 254, 255, 261, 264, 266, 267, 270, 273, 275, 281, 282, 283, 292, 293, 295, 298, 299, 304, 308, 319, 322, 326, 328, 329, 333, 337, 341, 342, 344, 352, 353, 356, 358, 359, 361, 362, 365, 369, 375, 378, 382, 386, 387, 400, 404, 406, 410, 412, 413, 415, 419, 422, 428, 430, 435, 441, 455, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "manipul": [7, 13, 33, 34, 42, 45, 55, 68, 73, 76, 95, 99, 102, 144, 169, 176, 177, 183, 186, 194, 205, 207, 254, 256, 269, 271, 283, 293, 308, 324, 331, 332, 334, 337, 342, 344, 352, 369, 375, 376, 394, 410, 413, 420, 425, 432, 455, 462, 465, 468, 476, 477, 479, 481, 482, 483], "system": [7, 16, 23, 33, 34, 42, 59, 63, 68, 73, 74, 76, 77, 79, 84, 85, 86, 92, 94, 95, 96, 101, 102, 106, 109, 110, 115, 118, 119, 121, 126, 133, 137, 142, 144, 155, 163, 164, 167, 169, 173, 176, 177, 183, 186, 187, 207, 208, 209, 213, 214, 220, 223, 225, 228, 230, 231, 245, 247, 250, 251, 252, 253, 254, 257, 258, 266, 267, 268, 269, 270, 271, 272, 276, 278, 282, 283, 287, 295, 296, 297, 299, 301, 302, 303, 306, 308, 309, 311, 314, 322, 324, 326, 328, 331, 332, 333, 334, 337, 338, 340, 341, 342, 344, 347, 352, 355, 356, 358, 361, 362, 365, 366, 369, 375, 382, 384, 385, 388, 390, 391, 395, 399, 403, 405, 406, 410, 413, 414, 415, 416, 419, 420, 421, 425, 426, 428, 433, 435, 436, 451, 455, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 480, 481, 482, 483, 484], "around": [7, 23, 25, 31, 33, 43, 59, 72, 73, 76, 79, 95, 98, 100, 102, 114, 120, 139, 141, 148, 152, 155, 167, 169, 177, 183, 186, 191, 193, 206, 215, 218, 221, 226, 247, 250, 255, 261, 265, 269, 275, 281, 283, 287, 292, 293, 297, 302, 319, 337, 341, 343, 352, 358, 362, 369, 376, 381, 384, 386, 388, 402, 427, 428, 431, 442, 443, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 480, 481, 483], "nativ": [7, 25, 33, 41, 64, 68, 109, 115, 145, 158, 169, 170, 176, 183, 184, 208, 213, 235, 258, 293, 330, 337, 340, 344, 352, 365, 368, 384, 422, 432, 461, 464, 469, 470, 475, 476, 477, 479, 480, 481, 482, 483], "contrari": [7, 61, 190], "veri": [7, 32, 33, 59, 63, 68, 73, 74, 75, 84, 85, 92, 93, 94, 95, 100, 101, 102, 103, 106, 109, 110, 128, 149, 151, 158, 167, 169, 177, 183, 186, 190, 193, 196, 202, 203, 206, 207, 230, 242, 245, 250, 255, 266, 267, 270, 271, 283, 284, 288, 292, 293, 299, 308, 319, 328, 330, 335, 337, 338, 341, 346, 348, 352, 353, 358, 359, 369, 375, 384, 386, 388, 394, 426, 428, 430, 432, 436, 441, 461, 462, 463, 464, 465, 466, 467, 469, 470, 474, 475, 476, 477, 478, 479, 481, 483], "generic": [7, 16, 35, 49, 61, 62, 63, 68, 76, 85, 87, 99, 101, 112, 133, 144, 151, 158, 161, 167, 184, 187, 191, 193, 194, 200, 203, 226, 235, 250, 254, 255, 258, 268, 269, 281, 309, 319, 325, 330, 337, 362, 365, 378, 385, 394, 413, 429, 430, 431, 436, 458, 468, 472, 474, 475, 476, 477, 478, 479, 481, 483], "wrapper": [7, 21, 23, 25, 31, 33, 42, 44, 58, 59, 86, 87, 92, 93, 102, 108, 114, 126, 137, 146, 148, 160, 169, 176, 177, 191, 193, 215, 226, 250, 255, 267, 275, 281, 283, 287, 293, 299, 302, 328, 337, 345, 362, 364, 369, 381, 400, 407, 410, 413, 419, 425, 427, 428, 440, 462, 463, 464, 466, 467, 468, 469, 474, 475, 477, 478, 481, 483], "instruct": [7, 13, 26, 68, 77, 84, 95, 96, 151, 186, 193, 240, 255, 264, 292, 293, 308, 314, 333, 340, 353, 388, 410, 413, 415, 428, 430, 455, 462, 467, 469, 473, 474, 475, 477, 481, 482, 483], "start": [7, 9, 11, 22, 23, 25, 33, 34, 42, 56, 63, 64, 66, 68, 72, 75, 76, 79, 80, 84, 85, 93, 94, 95, 96, 98, 101, 102, 103, 105, 106, 109, 110, 114, 115, 117, 120, 121, 126, 132, 133, 137, 139, 140, 141, 142, 144, 146, 151, 153, 157, 158, 160, 161, 164, 166, 169, 176, 177, 178, 181, 183, 184, 189, 190, 191, 193, 194, 199, 201, 203, 205, 208, 211, 213, 215, 217, 220, 222, 225, 227, 230, 233, 240, 242, 243, 245, 247, 248, 251, 255, 258, 259, 261, 262, 266, 267, 268, 269, 271, 272, 275, 278, 281, 284, 288, 290, 292, 293, 294, 297, 299, 302, 305, 308, 309, 312, 313, 314, 316, 318, 319, 320, 332, 334, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 353, 354, 356, 358, 362, 365, 366, 369, 371, 376, 378, 380, 381, 382, 386, 388, 389, 390, 394, 395, 399, 400, 402, 403, 407, 410, 411, 413, 415, 417, 421, 422, 427, 428, 430, 431, 432, 435, 436, 441, 442, 451, 452, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "logic": [7, 68, 84, 85, 95, 100, 102, 114, 139, 161, 169, 177, 181, 191, 193, 207, 221, 232, 256, 267, 269, 270, 271, 281, 290, 293, 296, 302, 319, 344, 345, 356, 362, 369, 373, 377, 386, 388, 427, 436, 462, 465, 466, 468, 469, 474, 476, 480, 481, 483], "physic": [7, 68, 92, 177, 193, 247, 252, 278, 281, 337, 344, 377, 378, 384, 405, 432, 467, 480], "negat": [7, 15, 22, 23, 31, 39, 42, 45, 47, 49, 54, 58, 60, 61, 63, 64, 66, 93, 94, 95, 100, 106, 115, 120, 133, 137, 146, 149, 153, 158, 160, 175, 176, 177, 178, 183, 186, 221, 225, 226, 258, 259, 261, 266, 270, 275, 278, 283, 293, 299, 308, 319, 320, 328, 331, 332, 333, 337, 340, 341, 344, 345, 348, 352, 365, 366, 369, 384, 410, 427, 428, 430, 431, 436, 441, 442, 462, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "begin": [7, 23, 58, 68, 73, 75, 76, 78, 79, 84, 85, 95, 102, 106, 117, 120, 139, 151, 155, 167, 177, 178, 183, 186, 190, 193, 196, 201, 209, 215, 247, 250, 255, 258, 261, 262, 270, 271, 278, 283, 288, 293, 297, 301, 302, 314, 319, 320, 324, 334, 335, 340, 341, 344, 345, 347, 358, 359, 364, 369, 376, 378, 384, 388, 413, 415, 416, 425, 427, 428, 429, 430, 432, 434, 435, 436, 449, 455, 456, 461, 464, 467, 468, 469, 474, 479, 480, 483], "obj": [7, 9, 10, 23, 24, 26, 28, 33, 36, 39, 43, 45, 48, 49, 52, 63, 64, 75, 77, 78, 84, 85, 87, 93, 94, 95, 102, 112, 129, 139, 142, 158, 161, 176, 179, 181, 191, 193, 197, 208, 211, 213, 225, 227, 255, 259, 262, 278, 283, 291, 299, 321, 344, 345, 362, 382, 386, 388, 389, 402, 428, 431, 440, 441, 462, 463, 464, 465, 466, 467, 468, 472, 473, 478, 480, 481, 483], "automat": [7, 23, 28, 33, 45, 55, 59, 61, 63, 68, 71, 73, 76, 84, 85, 92, 95, 96, 99, 106, 109, 112, 120, 126, 132, 133, 139, 140, 151, 155, 158, 161, 167, 169, 176, 177, 181, 184, 186, 187, 190, 191, 193, 196, 201, 205, 206, 208, 209, 213, 223, 225, 226, 234, 242, 243, 248, 250, 255, 266, 267, 268, 270, 271, 272, 278, 281, 283, 288, 292, 293, 297, 299, 308, 313, 320, 323, 328, 330, 332, 334, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 356, 358, 362, 365, 366, 368, 369, 376, 384, 386, 388, 394, 395, 402, 405, 411, 415, 419, 422, 423, 426, 428, 429, 430, 432, 436, 446, 451, 452, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "temporari": [7, 22, 40, 49, 55, 63, 68, 96, 102, 110, 112, 144, 176, 193, 247, 252, 258, 261, 266, 271, 272, 283, 293, 297, 324, 340, 344, 352, 358, 360, 362, 382, 388, 395, 402, 458, 464, 466, 468, 475, 476, 477, 482, 483], "pymemoryview_frombuff": [7, 43, 57, 473, 483], "pybuffer_fillinfo": [7, 57, 63, 473, 483], "general": [7, 13, 23, 33, 37, 40, 42, 51, 54, 63, 68, 72, 73, 76, 78, 84, 85, 91, 93, 94, 96, 100, 102, 103, 106, 109, 120, 126, 133, 139, 146, 151, 152, 158, 167, 169, 176, 177, 181, 183, 184, 186, 191, 203, 208, 224, 225, 226, 235, 242, 243, 244, 247, 250, 261, 266, 267, 268, 269, 270, 271, 273, 283, 288, 293, 299, 305, 307, 314, 319, 320, 325, 330, 335, 337, 341, 342, 344, 345, 347, 348, 352, 358, 364, 366, 369, 375, 381, 384, 386, 387, 390, 394, 395, 405, 408, 411, 412, 413, 414, 415, 417, 425, 426, 427, 428, 430, 431, 434, 435, 436, 455, 461, 462, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 479, 480, 481, 482, 483], "scheme": [7, 31, 63, 68, 75, 78, 95, 102, 110, 136, 141, 158, 176, 247, 269, 271, 315, 334, 340, 352, 358, 375, 394, 395, 399, 407, 428, 455, 462, 463, 465, 468, 469, 474, 475, 476, 477, 478, 483], "len": [7, 8, 9, 22, 38, 40, 41, 49, 54, 55, 60, 68, 76, 85, 87, 93, 94, 96, 102, 106, 107, 109, 114, 141, 142, 147, 149, 151, 160, 161, 166, 170, 176, 188, 190, 191, 193, 211, 215, 225, 226, 230, 235, 236, 242, 247, 261, 269, 278, 283, 284, 288, 291, 292, 293, 296, 305, 318, 320, 335, 337, 340, 341, 343, 344, 347, 362, 382, 385, 389, 400, 407, 408, 410, 413, 427, 428, 435, 440, 441, 442, 443, 449, 450, 451, 462, 465, 466, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 481, 483], "product": [7, 68, 80, 84, 95, 101, 125, 143, 186, 193, 236, 245, 247, 261, 269, 275, 318, 344, 352, 384, 388, 389, 421, 426, 430, 435, 440, 450, 459, 462, 463, 467, 468, 469, 471, 476, 479, 481, 483], "items": [7, 61, 121, 283, 337, 344, 483], "guarante": [7, 9, 11, 24, 33, 42, 54, 58, 59, 61, 63, 64, 67, 72, 73, 76, 85, 92, 95, 115, 122, 126, 139, 176, 183, 186, 191, 193, 196, 205, 225, 226, 232, 235, 243, 250, 255, 258, 262, 275, 276, 278, 283, 288, 292, 293, 299, 308, 324, 328, 331, 338, 344, 347, 348, 352, 362, 364, 365, 378, 386, 400, 402, 405, 408, 413, 415, 425, 427, 428, 432, 461, 466, 467, 469, 471, 475, 476, 479, 480, 481, 482, 483], "pybuf_simpl": 7, "pybuf_writ": [7, 43, 468], "control": [7, 32, 33, 34, 42, 50, 58, 68, 73, 74, 75, 77, 79, 83, 84, 85, 92, 93, 94, 100, 101, 102, 106, 115, 120, 126, 130, 132, 133, 137, 139, 143, 144, 149, 151, 152, 155, 158, 163, 176, 177, 178, 183, 184, 186, 190, 191, 193, 194, 196, 197, 201, 202, 205, 207, 208, 213, 215, 218, 222, 223, 225, 229, 234, 245, 247, 248, 250, 254, 255, 256, 258, 259, 262, 267, 268, 269, 271, 276, 281, 282, 283, 288, 292, 293, 295, 297, 298, 299, 305, 307, 308, 309, 311, 314, 315, 321, 322, 328, 329, 331, 333, 337, 338, 341, 344, 346, 347, 348, 352, 353, 358, 364, 365, 369, 374, 375, 376, 380, 381, 385, 388, 391, 394, 395, 399, 402, 405, 406, 407, 413, 415, 417, 419, 420, 422, 426, 427, 428, 429, 430, 432, 434, 436, 438, 443, 448, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "flag": [7, 9, 10, 13, 18, 24, 28, 33, 34, 43, 49, 50, 61, 63, 64, 66, 68, 72, 73, 75, 76, 99, 100, 101, 102, 109, 112, 114, 118, 126, 136, 138, 142, 143, 144, 155, 158, 176, 177, 181, 183, 184, 186, 187, 188, 191, 196, 207, 208, 209, 211, 215, 225, 227, 243, 248, 257, 258, 266, 267, 268, 271, 276, 278, 281, 282, 283, 288, 293, 296, 301, 305, 307, 313, 314, 315, 328, 330, 332, 333, 334, 337, 338, 340, 341, 342, 344, 345, 348, 352, 361, 362, 363, 365, 366, 376, 383, 385, 386, 388, 394, 395, 400, 406, 408, 419, 420, 422, 425, 427, 428, 432, 450, 455, 458, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "struct": [7, 15, 16, 21, 26, 31, 33, 35, 39, 45, 57, 58, 61, 63, 66, 68, 73, 75, 76, 78, 84, 86, 100, 102, 121, 141, 145, 176, 215, 225, 254, 268, 269, 284, 337, 344, 366, 419, 440, 452, 464, 467, 468, 469, 472, 473, 474, 475, 480, 481, 482, 483], "calcsiz": [7, 225, 337, 344, 347, 483], "import": [7, 11, 23, 31, 33, 34, 42, 45, 59, 63, 66, 68, 71, 72, 73, 75, 76, 77, 79, 84, 86, 87, 88, 89, 92, 93, 94, 95, 99, 100, 101, 102, 104, 106, 108, 109, 110, 112, 113, 115, 116, 118, 120, 121, 123, 125, 126, 131, 133, 134, 136, 137, 139, 140, 142, 143, 146, 147, 148, 149, 150, 151, 152, 155, 160, 162, 163, 166, 167, 168, 169, 170, 172, 173, 175, 176, 181, 183, 184, 186, 187, 188, 190, 191, 193, 195, 196, 200, 202, 205, 207, 208, 209, 213, 214, 215, 216, 218, 220, 221, 223, 225, 226, 228, 230, 231, 234, 235, 236, 240, 241, 242, 243, 244, 245, 247, 248, 249, 252, 254, 255, 257, 258, 261, 262, 264, 265, 266, 270, 271, 272, 275, 276, 278, 279, 280, 283, 284, 288, 292, 293, 296, 297, 299, 301, 302, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 347, 348, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 365, 366, 367, 368, 375, 376, 378, 379, 380, 381, 382, 384, 385, 386, 387, 388, 389, 394, 395, 396, 398, 399, 400, 402, 406, 407, 408, 410, 411, 412, 413, 415, 419, 420, 421, 425, 426, 427, 428, 429, 430, 431, 433, 435, 438, 440, 441, 442, 443, 444, 445, 446, 448, 451, 452, 453, 455, 456, 461, 462, 464, 469, 470, 471, 472, 474, 475, 478, 479, 480, 481, 482, 483, 484], "pybuf_format": 7, "still": [7, 9, 13, 22, 23, 27, 28, 31, 33, 34, 58, 63, 72, 73, 75, 76, 77, 84, 85, 92, 94, 95, 99, 100, 101, 102, 103, 106, 110, 120, 133, 139, 143, 151, 158, 163, 167, 169, 170, 176, 177, 181, 186, 193, 194, 202, 206, 208, 213, 226, 230, 243, 247, 250, 252, 255, 267, 268, 269, 271, 275, 278, 283, 292, 293, 295, 299, 308, 314, 319, 322, 323, 324, 328, 330, 333, 334, 337, 338, 340, 341, 344, 348, 352, 362, 364, 365, 369, 376, 382, 385, 386, 388, 390, 395, 402, 410, 413, 416, 426, 427, 428, 430, 432, 435, 436, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "present": [7, 22, 31, 34, 39, 45, 49, 63, 68, 73, 74, 77, 79, 85, 92, 93, 94, 95, 101, 102, 103, 106, 109, 110, 115, 120, 143, 146, 151, 152, 153, 155, 158, 161, 167, 176, 177, 181, 184, 186, 190, 191, 193, 196, 197, 205, 215, 221, 225, 226, 235, 243, 245, 247, 250, 251, 255, 259, 262, 267, 268, 269, 271, 276, 278, 288, 292, 293, 297, 299, 307, 308, 313, 314, 319, 322, 331, 335, 337, 341, 343, 344, 345, 352, 358, 359, 362, 364, 365, 366, 367, 369, 371, 375, 376, 378, 381, 384, 386, 388, 394, 395, 402, 410, 413, 415, 419, 421, 423, 427, 428, 430, 432, 435, 436, 462, 463, 464, 465, 466, 467, 468, 469, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "hold": [7, 9, 23, 27, 33, 45, 51, 55, 58, 63, 66, 73, 85, 93, 100, 101, 102, 120, 124, 139, 167, 169, 170, 176, 183, 186, 191, 203, 215, 242, 245, 255, 257, 268, 269, 271, 283, 292, 293, 302, 308, 319, 322, 325, 330, 337, 341, 344, 348, 352, 362, 365, 369, 381, 388, 402, 405, 411, 413, 415, 426, 428, 432, 436, 462, 463, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "navig": [7, 68, 92, 177, 313, 368, 375, 483], "disregard": [7, 33, 344], "string": [7, 8, 9, 11, 16, 18, 22, 23, 24, 25, 26, 28, 30, 31, 33, 34, 35, 39, 40, 41, 42, 45, 47, 49, 53, 58, 59, 63, 65, 66, 68, 72, 73, 75, 76, 79, 87, 89, 92, 93, 95, 96, 99, 101, 102, 108, 110, 112, 113, 117, 120, 122, 126, 133, 137, 139, 141, 143, 144, 145, 146, 149, 151, 152, 153, 155, 157, 158, 159, 164, 167, 169, 173, 175, 176, 177, 178, 181, 182, 183, 184, 186, 188, 190, 191, 193, 195, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 220, 221, 223, 225, 226, 228, 230, 233, 234, 235, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 262, 266, 267, 268, 269, 271, 272, 274, 276, 278, 281, 282, 283, 287, 288, 289, 291, 293, 295, 296, 297, 298, 299, 302, 304, 305, 307, 308, 309, 311, 312, 313, 314, 320, 321, 326, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 351, 352, 355, 356, 358, 359, 361, 362, 363, 364, 365, 366, 367, 369, 375, 376, 377, 378, 379, 380, 381, 382, 384, 386, 387, 388, 389, 394, 395, 397, 398, 399, 400, 402, 403, 405, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 422, 423, 424, 427, 428, 429, 430, 431, 432, 434, 436, 442, 444, 445, 447, 449, 450, 452, 455, 456, 461, 463, 464, 467, 469, 471, 472, 475, 477, 478, 483, 484], "ndim": [7, 344], "dimens": [7, 176, 177, 275, 332, 344, 468, 476, 481, 483], "dimension": [7, 87, 203, 275, 299, 318, 344, 375, 384, 476, 478, 483], "scalar": [7, 141, 196, 199, 226, 384, 386, 483], "maximum": [7, 25, 59, 64, 85, 93, 95, 101, 102, 106, 115, 126, 139, 141, 151, 158, 163, 167, 176, 177, 186, 190, 195, 202, 203, 208, 213, 235, 247, 261, 262, 269, 270, 275, 278, 281, 283, 288, 293, 299, 305, 307, 319, 320, 321, 322, 329, 337, 339, 340, 341, 343, 348, 352, 358, 364, 365, 376, 378, 382, 384, 388, 394, 395, 413, 435, 455, 462, 464, 465, 467, 468, 469, 475, 476, 478, 479, 480, 483], "pybuf_max_ndim": 7, "restrict": [7, 33, 42, 58, 68, 73, 75, 76, 93, 100, 102, 106, 115, 120, 158, 176, 177, 183, 186, 190, 205, 223, 225, 230, 235, 247, 256, 257, 262, 283, 293, 298, 308, 312, 319, 337, 340, 341, 344, 345, 346, 348, 353, 354, 356, 365, 366, 386, 410, 413, 419, 420, 426, 427, 428, 430, 431, 435, 436, 455, 461, 463, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "attent": [7, 100, 106, 177, 384, 465, 475, 477], "further": [7, 33, 41, 63, 68, 73, 75, 76, 79, 85, 95, 99, 101, 102, 109, 110, 119, 139, 144, 149, 151, 153, 158, 169, 173, 176, 181, 191, 193, 213, 218, 228, 247, 261, 266, 267, 269, 270, 275, 282, 283, 292, 293, 295, 297, 299, 319, 332, 333, 337, 338, 340, 341, 344, 352, 354, 366, 369, 381, 386, 410, 413, 415, 421, 425, 427, 428, 430, 432, 435, 455, 461, 462, 463, 464, 465, 466, 468, 469, 474, 476, 480, 481, 483], "skip": [7, 33, 34, 35, 58, 68, 84, 95, 96, 103, 106, 109, 139, 144, 153, 158, 163, 167, 169, 183, 187, 191, 193, 204, 205, 218, 250, 255, 261, 262, 267, 271, 272, 297, 304, 319, 331, 334, 342, 344, 347, 352, 358, 362, 376, 386, 399, 413, 415, 426, 427, 436, 452, 455, 461, 462, 464, 465, 466, 467, 468, 469, 471, 474, 475, 477, 482, 483], "regular": [7, 11, 33, 34, 42, 63, 68, 76, 84, 85, 87, 93, 95, 96, 102, 108, 120, 126, 133, 160, 161, 163, 167, 169, 176, 181, 186, 193, 200, 220, 225, 226, 234, 243, 247, 254, 255, 261, 266, 268, 293, 299, 308, 311, 328, 333, 335, 337, 341, 342, 343, 344, 345, 352, 358, 359, 362, 363, 384, 386, 388, 395, 400, 402, 428, 429, 430, 435, 436, 451, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "abl": [7, 33, 63, 73, 75, 76, 77, 84, 92, 94, 96, 101, 102, 106, 109, 141, 151, 158, 159, 169, 176, 177, 181, 183, 194, 235, 255, 267, 268, 269, 283, 292, 293, 295, 297, 299, 309, 314, 319, 332, 337, 340, 341, 348, 358, 362, 365, 384, 394, 400, 406, 413, 421, 427, 428, 434, 455, 456, 461, 462, 463, 464, 467, 469, 474, 475, 476, 477, 480, 481, 483], "handl": [7, 25, 31, 32, 33, 34, 35, 40, 42, 49, 51, 56, 61, 63, 64, 66, 68, 73, 75, 76, 79, 85, 91, 92, 94, 95, 99, 100, 101, 106, 109, 112, 113, 115, 118, 120, 122, 132, 139, 140, 142, 144, 146, 149, 151, 152, 157, 158, 167, 169, 170, 176, 181, 183, 186, 187, 189, 190, 191, 193, 196, 200, 201, 202, 203, 207, 208, 212, 213, 215, 225, 226, 230, 234, 242, 244, 245, 247, 248, 250, 253, 254, 255, 256, 258, 259, 262, 267, 268, 269, 270, 271, 275, 278, 282, 283, 285, 293, 295, 297, 298, 308, 309, 311, 319, 321, 328, 330, 331, 332, 333, 335, 337, 338, 341, 342, 344, 345, 348, 350, 352, 353, 358, 362, 365, 366, 371, 375, 378, 386, 389, 390, 395, 400, 402, 403, 404, 407, 413, 415, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 432, 435, 436, 443, 452, 455, 461, 462, 463, 464, 466, 467, 470, 471, 472, 474, 475, 476, 479, 480, 481, 482, 483, 484], "along": [7, 58, 95, 100, 101, 102, 120, 126, 140, 141, 149, 163, 169, 176, 186, 193, 203, 205, 218, 230, 234, 235, 244, 250, 251, 267, 269, 278, 293, 299, 308, 329, 335, 337, 341, 344, 345, 348, 369, 376, 380, 384, 386, 388, 414, 421, 426, 427, 436, 462, 463, 464, 465, 466, 468, 469, 474, 475, 477, 478, 483], "nth": [7, 261, 376], "dictat": [7, 87, 167, 222, 225, 299, 337, 461, 462, 468], "mani": [7, 13, 33, 34, 63, 64, 72, 73, 75, 76, 79, 84, 92, 94, 95, 99, 100, 101, 102, 103, 106, 109, 110, 117, 120, 128, 133, 137, 139, 143, 158, 163, 167, 169, 176, 177, 178, 181, 183, 186, 190, 191, 193, 194, 203, 208, 212, 225, 230, 235, 242, 243, 244, 247, 250, 259, 261, 265, 267, 275, 278, 283, 288, 292, 293, 295, 298, 299, 305, 307, 308, 314, 319, 325, 328, 330, 332, 333, 335, 337, 338, 340, 341, 344, 347, 348, 352, 355, 358, 359, 362, 364, 365, 366, 369, 375, 380, 381, 384, 385, 386, 390, 395, 402, 403, 405, 406, 410, 415, 427, 428, 432, 434, 436, 455, 457, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "de": [7, 12, 23, 28, 41, 68, 74, 80, 103, 119, 177, 230, 243, 252, 261, 288, 299, 344, 358, 386, 394, 419, 472, 473, 474, 477, 479, 480, 482, 483], "might": [7, 23, 33, 58, 63, 64, 73, 75, 76, 85, 92, 94, 95, 96, 100, 101, 102, 103, 105, 106, 109, 110, 132, 137, 139, 141, 144, 146, 158, 176, 179, 181, 183, 191, 193, 196, 205, 207, 209, 221, 234, 235, 243, 247, 253, 259, 266, 267, 268, 269, 271, 272, 278, 283, 284, 288, 292, 293, 295, 299, 302, 305, 307, 308, 319, 335, 337, 340, 341, 344, 352, 353, 355, 362, 365, 369, 384, 386, 390, 394, 395, 400, 402, 408, 413, 422, 428, 432, 434, 455, 461, 462, 464, 465, 466, 467, 468, 469, 474, 475, 476, 477, 479, 480, 483], "re": [7, 33, 42, 45, 63, 68, 72, 73, 75, 76, 77, 84, 85, 91, 92, 93, 94, 95, 96, 99, 100, 101, 102, 109, 139, 140, 144, 145, 155, 160, 163, 167, 169, 176, 177, 183, 186, 187, 190, 191, 193, 196, 201, 205, 207, 211, 220, 243, 247, 248, 250, 254, 258, 259, 266, 267, 268, 269, 271, 278, 279, 283, 288, 292, 293, 295, 297, 308, 314, 315, 338, 341, 344, 345, 348, 352, 353, 363, 364, 365, 369, 377, 378, 384, 386, 390, 394, 395, 400, 407, 413, 415, 419, 427, 428, 429, 432, 434, 435, 436, 441, 451, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 481, 483], "cast": [7, 33, 42, 45, 58, 61, 64, 73, 76, 96, 176, 186, 344, 381, 386, 476, 480, 481, 483], "freed": [7, 13, 22, 27, 33, 42, 45, 73, 75, 100, 102, 232, 283, 293, 329, 428, 463, 465, 467, 479, 483], "alter": [7, 22, 42, 85, 126, 153, 186, 208, 243, 247, 248, 262, 268, 272, 299, 324, 344, 345, 384, 426, 428, 432, 462, 466, 475, 477, 479, 480, 481, 482, 483], "limit": [7, 13, 23, 34, 35, 57, 59, 61, 63, 64, 68, 75, 85, 92, 94, 95, 98, 102, 106, 112, 119, 120, 126, 132, 133, 136, 137, 139, 142, 149, 158, 163, 169, 173, 184, 186, 191, 201, 207, 208, 214, 215, 225, 226, 235, 247, 248, 254, 257, 261, 268, 270, 276, 282, 283, 285, 292, 293, 295, 299, 307, 308, 312, 314, 319, 321, 324, 330, 333, 334, 337, 340, 341, 343, 348, 352, 358, 362, 365, 375, 381, 382, 384, 391, 405, 407, 410, 413, 421, 426, 428, 429, 430, 432, 434, 435, 455, 456, 458, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "64": [7, 42, 64, 68, 85, 93, 94, 99, 107, 136, 143, 146, 176, 177, 183, 186, 225, 235, 259, 261, 270, 283, 284, 293, 303, 304, 306, 332, 337, 341, 344, 347, 352, 384, 404, 419, 428, 442, 446, 449, 456, 461, 462, 464, 466, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "send": [7, 68, 79, 84, 92, 95, 101, 106, 107, 110, 126, 128, 133, 136, 137, 141, 142, 151, 152, 158, 161, 169, 177, 191, 194, 200, 201, 212, 223, 230, 242, 244, 245, 247, 248, 257, 267, 268, 269, 278, 283, 288, 293, 299, 305, 316, 329, 333, 335, 337, 338, 341, 348, 356, 361, 362, 369, 384, 386, 395, 419, 428, 430, 452, 462, 465, 466, 467, 469, 473, 474, 475, 476, 478, 479, 480, 482, 483], "via": [7, 33, 42, 45, 61, 63, 64, 68, 73, 76, 84, 85, 95, 100, 101, 110, 112, 115, 120, 139, 140, 144, 151, 167, 170, 183, 190, 193, 196, 200, 201, 202, 205, 206, 207, 208, 213, 216, 218, 221, 225, 228, 233, 235, 242, 247, 251, 255, 261, 265, 266, 267, 268, 269, 278, 283, 284, 292, 293, 297, 298, 299, 302, 305, 308, 314, 319, 320, 321, 323, 335, 337, 338, 341, 344, 348, 352, 355, 362, 384, 386, 388, 395, 400, 405, 410, 413, 419, 425, 427, 428, 430, 455, 458, 462, 467, 468, 469, 471, 474, 476, 477, 478, 479, 480, 481, 482, 483], "drastic": [7, 112], "unambigu": [7, 120, 183, 268, 308, 335, 428, 468, 475], "influenc": [7, 299, 337, 455, 468, 483], "correct": [7, 25, 33, 45, 63, 64, 66, 71, 73, 76, 77, 85, 93, 94, 95, 96, 99, 100, 102, 103, 109, 110, 112, 117, 120, 133, 151, 158, 169, 176, 183, 186, 188, 191, 193, 196, 197, 199, 203, 208, 209, 216, 225, 243, 247, 248, 259, 266, 275, 278, 283, 289, 292, 293, 295, 299, 314, 324, 331, 332, 337, 340, 341, 343, 344, 345, 347, 348, 352, 358, 362, 366, 369, 384, 386, 388, 405, 415, 421, 425, 426, 428, 430, 432, 435, 444, 461, 462, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "els": [7, 22, 28, 35, 36, 41, 42, 53, 63, 64, 68, 72, 73, 75, 76, 78, 79, 84, 85, 88, 89, 95, 100, 102, 103, 106, 107, 110, 114, 122, 126, 136, 139, 151, 160, 166, 169, 173, 176, 183, 186, 190, 191, 193, 196, 200, 207, 226, 228, 230, 240, 242, 247, 248, 250, 261, 262, 267, 269, 271, 276, 283, 289, 291, 292, 293, 299, 309, 318, 319, 329, 332, 337, 340, 341, 342, 343, 344, 348, 352, 358, 362, 365, 378, 384, 385, 386, 389, 399, 400, 402, 407, 410, 422, 428, 430, 431, 432, 434, 435, 436, 443, 445, 455, 461, 462, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 482, 483], "report": [7, 22, 33, 45, 61, 72, 73, 85, 99, 101, 104, 105, 106, 109, 120, 133, 151, 152, 166, 176, 177, 190, 191, 193, 196, 203, 205, 213, 216, 225, 233, 255, 259, 261, 279, 283, 292, 293, 308, 314, 319, 328, 329, 333, 339, 341, 342, 344, 352, 362, 369, 380, 386, 388, 395, 400, 413, 415, 431, 455, 461, 462, 464, 465, 466, 467, 468, 469, 475, 476, 477, 479, 481, 483], "either": [7, 11, 22, 23, 33, 42, 43, 45, 49, 55, 58, 59, 61, 63, 64, 67, 71, 72, 73, 76, 84, 85, 92, 93, 94, 95, 101, 102, 106, 109, 110, 117, 120, 126, 133, 137, 139, 141, 143, 144, 149, 151, 158, 169, 173, 176, 177, 178, 181, 183, 186, 190, 191, 193, 194, 195, 196, 197, 198, 199, 202, 205, 206, 207, 208, 209, 213, 215, 221, 225, 235, 242, 243, 245, 247, 248, 250, 252, 255, 257, 258, 259, 261, 262, 267, 268, 269, 270, 271, 272, 278, 281, 283, 284, 288, 292, 293, 295, 297, 299, 301, 302, 308, 309, 311, 314, 319, 322, 324, 325, 328, 329, 331, 332, 334, 337, 340, 341, 344, 345, 347, 348, 352, 353, 355, 358, 359, 362, 365, 366, 369, 375, 376, 378, 381, 384, 386, 388, 394, 395, 399, 400, 402, 403, 405, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 425, 426, 427, 428, 429, 430, 432, 435, 436, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 483], "choic": [7, 68, 73, 84, 85, 89, 102, 110, 118, 151, 193, 225, 230, 247, 255, 267, 268, 271, 283, 292, 308, 314, 318, 324, 326, 329, 330, 341, 344, 347, 375, 431, 434, 441, 451, 464, 467, 474, 475, 478, 479, 480, 483], "next": [7, 23, 26, 33, 37, 42, 63, 64, 68, 72, 73, 75, 76, 85, 87, 92, 93, 94, 95, 99, 102, 103, 106, 109, 112, 114, 117, 126, 139, 141, 144, 149, 151, 153, 155, 157, 159, 160, 167, 175, 176, 177, 186, 190, 191, 193, 194, 195, 196, 197, 205, 213, 218, 221, 225, 226, 230, 236, 242, 243, 247, 250, 253, 255, 261, 267, 269, 270, 271, 278, 282, 283, 288, 292, 293, 297, 307, 308, 314, 319, 320, 323, 325, 330, 331, 333, 337, 338, 340, 341, 344, 348, 353, 354, 358, 369, 375, 376, 384, 389, 395, 400, 413, 425, 427, 428, 429, 430, 432, 434, 436, 440, 442, 449, 450, 452, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 475, 476, 478, 480, 481, 482, 484], "stand": [7, 81, 85, 109, 169, 186, 275, 292, 302, 319, 420, 421, 427, 435, 462, 467, 468, 469, 475, 477, 480, 481, 483], "alon": [7, 64, 75, 81, 85, 102, 106, 250, 297, 319, 324, 331, 420, 426, 427, 434, 464, 467, 468, 477, 483], "impli": [7, 31, 42, 58, 63, 102, 109, 112, 163, 181, 258, 292, 314, 320, 340, 341, 344, 415, 422, 426, 428, 430, 436, 455, 456, 461, 468, 477, 480, 481, 483], "decreas": [7, 138, 183, 191, 259, 366, 428, 462, 466, 469, 476, 479, 481, 483], "below": [7, 23, 33, 45, 55, 59, 60, 61, 63, 64, 66, 73, 76, 93, 94, 95, 96, 101, 102, 110, 115, 117, 120, 133, 144, 149, 158, 167, 177, 179, 181, 183, 186, 188, 189, 191, 193, 195, 203, 208, 213, 221, 230, 233, 235, 242, 243, 245, 247, 248, 249, 250, 252, 258, 266, 267, 268, 269, 276, 282, 283, 288, 292, 293, 295, 297, 299, 307, 314, 319, 320, 321, 322, 324, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 341, 342, 344, 345, 346, 347, 348, 352, 354, 356, 358, 359, 362, 364, 365, 366, 369, 371, 376, 380, 384, 386, 388, 395, 403, 406, 413, 414, 419, 420, 422, 426, 427, 428, 429, 430, 431, 432, 435, 441, 461, 462, 463, 465, 467, 468, 469, 470, 474, 477, 478, 483], "pybuf_indirect": 7, "yes": [7, 73, 79, 85, 98, 167, 186, 193, 266, 267, 314, 319, 341, 369, 373, 405, 407, 411, 413, 441, 446, 449, 456, 461, 464, 475], "pybuf_strid": 7, "pybuf_nd": 7, "fortran": [7, 78, 87, 299, 340, 344, 444, 463, 466, 468], "explicit": [7, 23, 28, 31, 33, 34, 45, 49, 51, 63, 66, 68, 73, 76, 85, 92, 94, 95, 100, 101, 102, 106, 112, 114, 120, 126, 132, 133, 139, 140, 151, 157, 167, 169, 170, 176, 179, 181, 183, 186, 188, 190, 196, 198, 202, 205, 206, 208, 214, 218, 223, 225, 226, 230, 233, 243, 245, 250, 255, 258, 259, 262, 266, 267, 268, 269, 270, 271, 281, 283, 292, 293, 295, 297, 299, 307, 311, 314, 324, 328, 330, 331, 332, 333, 334, 335, 337, 338, 340, 341, 344, 347, 348, 352, 356, 358, 362, 365, 381, 384, 385, 386, 388, 389, 395, 399, 400, 402, 405, 410, 411, 412, 413, 414, 421, 423, 426, 427, 428, 429, 430, 432, 436, 440, 455, 456, 461, 462, 463, 464, 465, 467, 469, 470, 472, 474, 475, 478, 479, 480, 481, 482, 483, 484], "contig": [7, 255], "pybuf_c_contigu": [7, 468], "pybuf_f_contigu": [7, 468], "pybuf_any_contigu": 7, "fulli": [7, 13, 27, 33, 34, 45, 61, 63, 71, 87, 102, 109, 112, 120, 134, 186, 193, 197, 203, 207, 208, 250, 255, 261, 268, 269, 283, 299, 333, 335, 337, 344, 348, 352, 358, 388, 398, 400, 410, 413, 417, 423, 428, 432, 455, 461, 464, 469, 470, 474, 475, 476, 477, 478, 479, 481, 482, 483], "combin": [7, 23, 33, 49, 56, 58, 63, 64, 68, 72, 76, 85, 92, 95, 100, 102, 106, 109, 110, 117, 120, 126, 139, 158, 160, 163, 169, 176, 177, 181, 183, 186, 189, 193, 203, 205, 208, 211, 243, 244, 245, 247, 250, 258, 261, 266, 267, 283, 292, 293, 295, 308, 318, 319, 322, 328, 329, 331, 334, 335, 337, 338, 340, 343, 344, 346, 347, 348, 356, 358, 369, 376, 386, 387, 388, 394, 405, 406, 423, 426, 427, 428, 430, 432, 435, 436, 456, 462, 466, 467, 468, 469, 477, 478, 479, 480, 481, 483], "frequent": [7, 68, 73, 75, 84, 85, 106, 109, 110, 164, 183, 190, 247, 266, 269, 283, 288, 292, 305, 388, 465, 466, 468, 469, 474, 481, 483], "undefin": [7, 25, 28, 33, 39, 42, 63, 64, 85, 126, 140, 158, 166, 196, 205, 207, 213, 225, 227, 258, 275, 292, 328, 344, 352, 366, 378, 382, 400, 413, 416, 428, 430, 435, 449, 456, 478, 480, 483], "pybuffer_iscontigu": [7, 57, 473, 483], "pybuf_ful": 7, "pybuf_full_ro": 7, "pybuf_record": 7, "pybuf_records_ro": 7, "pybuf_strided_ro": 7, "pybuf_contig": 7, "pybuf_contig_ro": 7, "ptr": [7, 18, 34, 42, 259, 466, 478], "typeof": 7, "def": [7, 17, 22, 35, 45, 61, 66, 68, 71, 72, 73, 76, 79, 84, 85, 87, 88, 92, 93, 94, 95, 100, 102, 103, 104, 106, 107, 108, 109, 112, 114, 116, 120, 122, 123, 125, 126, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 147, 148, 149, 155, 160, 161, 166, 169, 170, 172, 173, 176, 181, 183, 186, 188, 190, 191, 193, 200, 203, 211, 213, 216, 225, 226, 227, 228, 230, 232, 235, 236, 240, 243, 245, 247, 250, 251, 255, 258, 259, 261, 262, 267, 268, 275, 283, 289, 291, 292, 296, 297, 299, 303, 309, 312, 314, 316, 318, 319, 320, 321, 325, 329, 331, 332, 333, 335, 337, 338, 340, 341, 342, 343, 344, 345, 351, 352, 358, 361, 362, 364, 365, 367, 369, 378, 381, 382, 384, 385, 386, 388, 389, 390, 399, 400, 402, 407, 411, 413, 419, 420, 422, 427, 428, 429, 430, 431, 435, 436, 440, 441, 443, 450, 451, 452, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "verify_structur": 7, "memlen": 7, "offset": [7, 10, 20, 22, 23, 26, 28, 58, 61, 63, 75, 76, 84, 93, 98, 122, 126, 141, 142, 153, 176, 183, 186, 191, 203, 209, 213, 215, 223, 235, 240, 255, 258, 271, 278, 283, 293, 306, 314, 337, 340, 347, 353, 358, 362, 366, 379, 381, 415, 422, 425, 428, 446, 455, 462, 467, 468, 472, 475, 476, 480, 483], "bound": [7, 10, 13, 42, 44, 54, 56, 60, 63, 64, 85, 93, 94, 101, 102, 106, 122, 126, 130, 138, 139, 158, 169, 186, 190, 191, 213, 225, 226, 247, 248, 250, 255, 268, 269, 283, 318, 319, 322, 331, 337, 340, 344, 351, 362, 365, 369, 375, 376, 385, 386, 395, 402, 420, 426, 427, 428, 429, 430, 431, 432, 436, 462, 464, 465, 467, 468, 469, 474, 476, 477, 480, 482, 483], "mem": [7, 42, 43], "imin": 7, "sum": [7, 87, 93, 95, 103, 120, 122, 126, 141, 160, 183, 186, 193, 208, 225, 226, 255, 261, 270, 275, 284, 293, 296, 308, 318, 322, 326, 337, 343, 344, 366, 376, 382, 386, 430, 431, 440, 441, 444, 449, 450, 451, 452, 465, 466, 468, 471, 473, 474, 481, 482, 483], "imax": 7, "view": [7, 22, 43, 48, 63, 68, 84, 87, 92, 93, 94, 120, 133, 139, 160, 161, 183, 186, 191, 196, 200, 205, 208, 225, 247, 258, 272, 299, 308, 313, 340, 342, 347, 351, 352, 369, 375, 376, 384, 385, 405, 410, 426, 462, 467, 468, 472, 475, 476, 478, 483, 484], "anywher": [7, 85, 151, 186, 190, 247, 251, 261, 268, 292, 319, 352, 378, 386, 394, 415, 425, 429, 430, 432, 470, 482, 483], "index": [7, 13, 34, 35, 38, 47, 54, 59, 60, 63, 64, 68, 79, 80, 84, 87, 94, 95, 99, 102, 106, 111, 115, 116, 121, 122, 141, 142, 144, 147, 151, 155, 160, 161, 176, 191, 192, 196, 205, 209, 211, 213, 225, 230, 233, 236, 242, 245, 254, 255, 261, 262, 268, 278, 281, 283, 284, 291, 293, 296, 299, 313, 314, 319, 320, 322, 337, 339, 340, 342, 344, 345, 352, 359, 361, 365, 366, 368, 376, 381, 382, 394, 405, 407, 410, 413, 422, 427, 428, 430, 436, 440, 442, 449, 453, 454, 459, 462, 464, 466, 468, 469, 470, 472, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484], "get_item_point": 7, "pyobject_checkbuff": [7, 57, 473, 482, 483], "cannot": [7, 9, 24, 26, 28, 33, 34, 39, 49, 54, 58, 61, 63, 64, 66, 67, 72, 73, 76, 85, 92, 94, 95, 96, 99, 100, 101, 102, 103, 110, 112, 115, 126, 132, 135, 144, 151, 158, 160, 161, 163, 167, 169, 176, 177, 181, 183, 186, 191, 193, 197, 201, 202, 203, 208, 212, 213, 214, 215, 218, 225, 226, 230, 233, 245, 247, 250, 252, 253, 255, 258, 266, 267, 268, 269, 270, 271, 276, 278, 282, 283, 293, 295, 296, 297, 299, 302, 304, 307, 308, 314, 319, 322, 328, 329, 330, 331, 332, 333, 337, 338, 339, 340, 341, 344, 348, 352, 353, 354, 358, 362, 365, 366, 369, 386, 394, 395, 399, 402, 405, 406, 410, 413, 415, 416, 419, 421, 422, 425, 426, 427, 428, 429, 430, 431, 432, 435, 436, 443, 455, 456, 461, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 477, 479, 480, 481, 482, 483], "buffererror": [7, 23, 63, 213, 299, 450, 483], "chain": [7, 23, 63, 68, 85, 93, 95, 100, 102, 110, 119, 157, 160, 167, 176, 213, 214, 225, 236, 255, 261, 267, 293, 352, 381, 389, 390, 395, 428, 430, 436, 445, 468, 470, 476, 477, 478, 482, 483], "redirect": [7, 63, 68, 86, 101, 102, 110, 133, 137, 169, 242, 243, 245, 250, 267, 333, 348, 352, 395, 399, 455, 458, 462, 477, 478, 479, 480, 483], "pybuffer_sizefromformat": [7, 57, 473, 483], "pybuffer_getpoint": [7, 57, 473, 483], "pybuffer_fromcontigu": [7, 57, 473, 483], "fort": 7, "pybuffer_tocontigu": [7, 57, 473, 483], "src": [7, 52, 89, 104, 142, 176, 193, 200, 231, 240, 278, 281, 293, 332, 340, 465, 467, 483], "pyobject_copydata": [7, 57, 473], "dest": [7, 68, 89, 102, 118, 200, 228, 269, 278, 292, 309, 399, 465, 467, 468, 469, 483], "between": [7, 18, 20, 33, 34, 39, 42, 45, 54, 56, 60, 61, 63, 68, 72, 73, 74, 75, 76, 79, 84, 89, 91, 92, 93, 94, 95, 99, 100, 101, 102, 103, 106, 120, 122, 126, 133, 140, 141, 149, 158, 161, 164, 167, 173, 177, 183, 186, 191, 193, 195, 196, 197, 201, 205, 209, 213, 216, 218, 225, 230, 235, 247, 250, 251, 254, 255, 258, 259, 261, 262, 266, 267, 268, 269, 270, 275, 276, 278, 285, 293, 295, 296, 297, 299, 308, 318, 319, 320, 334, 337, 338, 339, 340, 341, 343, 344, 347, 348, 352, 359, 362, 364, 365, 366, 369, 371, 375, 376, 377, 378, 382, 384, 385, 388, 389, 390, 394, 395, 400, 405, 410, 411, 413, 417, 419, 425, 426, 427, 428, 430, 431, 432, 434, 436, 455, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "pybuffer_fillcontiguousstrid": [7, 57, 473], "per": [7, 13, 22, 23, 31, 35, 45, 49, 63, 64, 68, 73, 84, 85, 102, 117, 120, 126, 132, 133, 141, 143, 144, 146, 158, 177, 181, 183, 186, 191, 196, 197, 203, 205, 208, 209, 226, 242, 250, 251, 267, 271, 281, 283, 288, 293, 295, 305, 307, 308, 315, 319, 329, 334, 337, 338, 340, 341, 344, 352, 362, 365, 366, 367, 369, 376, 380, 382, 388, 419, 422, 427, 428, 432, 436, 455, 461, 465, 466, 467, 469, 470, 471, 472, 476, 477, 478, 480, 481, 483, 484], "accord": [7, 18, 33, 39, 64, 66, 76, 92, 93, 94, 95, 99, 102, 103, 109, 126, 151, 158, 169, 181, 183, 186, 196, 201, 203, 205, 208, 209, 216, 218, 225, 226, 233, 235, 243, 247, 248, 250, 253, 261, 266, 267, 268, 275, 281, 283, 292, 293, 308, 341, 342, 344, 346, 347, 366, 375, 376, 378, 384, 388, 394, 395, 410, 422, 426, 428, 430, 432, 435, 455, 461, 464, 465, 466, 467, 468, 474, 475, 476, 477, 478, 479, 480, 483], "design": [7, 34, 63, 76, 84, 85, 93, 94, 95, 100, 101, 102, 103, 109, 110, 137, 139, 146, 152, 158, 167, 169, 177, 183, 186, 192, 193, 194, 201, 213, 225, 226, 228, 230, 235, 247, 250, 271, 283, 292, 293, 299, 308, 323, 331, 337, 341, 347, 355, 358, 362, 365, 369, 375, 378, 384, 386, 394, 417, 425, 426, 432, 440, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 480, 482, 483], "part": [7, 9, 13, 18, 23, 25, 33, 34, 39, 58, 60, 61, 63, 64, 66, 72, 73, 75, 85, 92, 94, 95, 96, 99, 100, 102, 103, 106, 109, 110, 112, 128, 143, 151, 157, 158, 159, 161, 167, 169, 176, 177, 183, 184, 186, 191, 193, 194, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 208, 209, 213, 225, 230, 235, 245, 247, 248, 250, 251, 258, 259, 266, 267, 268, 269, 270, 275, 276, 281, 282, 283, 293, 296, 299, 302, 307, 308, 314, 319, 323, 331, 334, 337, 338, 340, 341, 344, 345, 346, 352, 355, 362, 365, 366, 369, 375, 381, 384, 385, 386, 388, 394, 399, 402, 403, 410, 411, 413, 419, 426, 427, 428, 429, 430, 432, 435, 436, 449, 455, 456, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "getbufferproc": [7, 57, 63, 476, 483], "pybytearray_typ": [8, 57], "pybytearray_check": 8, "pybytearray_checkexact": 8, "pybytearray_fromobject": [8, 57, 468], "pybytearray_fromstringands": [8, 57, 468], "pybytearray_concat": [8, 57], "pybytearray_s": [8, 57], "pybytearray_asstr": [8, 57], "pybytearray_res": [8, 57], "pybytearray_as_str": 8, "pybytearray_get_s": 8, "subtyp": [9, 11, 20, 25, 39, 45, 49, 55, 60, 61, 63, 64, 196, 197, 200, 201, 203, 204, 205, 206, 243, 247, 276, 292, 333, 344, 386, 416, 427, 428, 430, 464, 483], "pybytes_typ": [9, 57, 483], "pybytes_check": [9, 79, 468], "pybytes_checkexact": 9, "pybytes_fromstr": [9, 42, 57], "pybytes_fromstringands": [9, 57, 468], "uniniti": [9, 33, 35, 42, 73, 85, 299, 456, 483], "pybytes_fromformat": [9, 57, 483], "printf": [9, 64, 68, 72, 73, 98, 176, 245, 267, 430, 446, 449, 460, 467, 473, 483], "calcul": [9, 31, 33, 34, 59, 63, 64, 73, 85, 89, 93, 95, 120, 150, 177, 181, 183, 186, 191, 206, 226, 235, 261, 269, 275, 283, 295, 322, 333, 337, 344, 345, 347, 354, 356, 366, 378, 381, 384, 385, 395, 428, 430, 432, 435, 464, 467, 468, 471, 473, 474, 477, 481, 483], "liter": [9, 39, 64, 68, 78, 94, 106, 112, 113, 120, 157, 158, 159, 183, 186, 191, 193, 220, 221, 225, 230, 231, 248, 257, 262, 264, 267, 268, 270, 302, 307, 319, 331, 340, 344, 345, 348, 366, 369, 376, 378, 386, 388, 394, 400, 403, 413, 415, 428, 429, 431, 432, 433, 434, 441, 445, 449, 462, 464, 465, 467, 469, 470, 472, 474, 475, 477, 480, 481, 482, 483, 484], "ld": [9, 72, 77, 176, 344, 456], "lu": [9, 344, 387, 435, 462, 477, 479, 480, 483], "zd": [9, 483], "zu": [9, 483], "size_t": [9, 10, 18, 28, 34, 35, 39, 42, 59, 64, 176, 347, 476, 483], "hex": [9, 64, 85, 94, 106, 109, 143, 146, 158, 176, 211, 225, 235, 341, 344, 345, 352, 369, 398, 428, 435, 444, 450, 452, 462, 463, 465, 467, 468, 470, 471, 472, 477, 478, 483], "0x": [9, 18, 47, 64, 85, 87, 94, 106, 138, 176, 193, 225, 244, 283, 292, 344, 345, 384, 389, 390, 435, 466, 475, 483], "regardless": [9, 24, 33, 34, 41, 59, 64, 94, 120, 139, 169, 177, 183, 186, 208, 220, 247, 250, 258, 261, 262, 302, 314, 333, 334, 335, 337, 340, 341, 344, 345, 347, 348, 352, 353, 355, 376, 384, 388, 389, 400, 402, 403, 412, 425, 430, 432, 435, 455, 461, 474, 475, 476, 477, 478, 480, 483], "yield": [9, 36, 64, 68, 75, 85, 87, 95, 116, 122, 133, 138, 139, 149, 151, 160, 167, 169, 183, 190, 191, 197, 207, 225, 226, 232, 235, 242, 250, 253, 255, 258, 261, 262, 271, 283, 293, 296, 299, 302, 319, 331, 344, 347, 353, 358, 362, 378, 381, 386, 389, 390, 394, 407, 410, 413, 419, 427, 428, 429, 431, 433, 435, 440, 464, 465, 467, 468, 469, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "unrecogn": [9, 64, 89, 120, 228, 414, 422, 435, 474, 478, 479, 483], "rest": [9, 64, 77, 85, 95, 100, 101, 102, 103, 106, 112, 120, 122, 128, 151, 161, 177, 186, 193, 213, 223, 226, 247, 267, 276, 292, 293, 302, 319, 323, 344, 362, 376, 378, 419, 427, 428, 431, 435, 436, 441, 462, 464, 465, 467, 468, 469, 470, 472, 474, 476, 477, 480, 482, 483], "extra": [9, 16, 28, 63, 64, 68, 76, 85, 87, 92, 94, 96, 102, 110, 112, 120, 122, 126, 132, 161, 170, 186, 191, 193, 196, 202, 203, 205, 208, 242, 247, 251, 267, 268, 271, 283, 292, 293, 332, 340, 341, 344, 347, 358, 359, 362, 376, 386, 413, 422, 428, 431, 452, 455, 456, 462, 465, 468, 469, 474, 475, 476, 479, 480, 481, 483], "discard": [9, 35, 49, 55, 60, 64, 66, 73, 94, 95, 126, 139, 143, 151, 157, 158, 161, 183, 186, 243, 258, 267, 268, 271, 283, 292, 337, 340, 344, 361, 376, 400, 402, 411, 413, 416, 427, 428, 449, 455, 464, 467, 468, 469, 474, 477, 479, 481, 483], "effect": [9, 11, 14, 22, 23, 27, 33, 34, 45, 52, 58, 59, 63, 64, 68, 73, 75, 84, 85, 92, 93, 95, 99, 101, 102, 103, 106, 110, 115, 120, 126, 132, 140, 144, 159, 167, 169, 176, 177, 181, 183, 186, 187, 191, 193, 203, 208, 215, 218, 225, 226, 227, 243, 247, 250, 258, 261, 266, 267, 268, 269, 272, 283, 292, 293, 295, 297, 302, 308, 311, 314, 319, 322, 323, 324, 325, 328, 330, 331, 332, 334, 340, 341, 342, 343, 344, 345, 348, 352, 358, 362, 364, 365, 366, 376, 382, 384, 385, 386, 388, 389, 400, 405, 412, 420, 421, 422, 425, 427, 428, 430, 432, 435, 436, 442, 450, 455, 456, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "precis": [9, 13, 18, 25, 45, 64, 68, 72, 101, 183, 213, 225, 230, 259, 262, 268, 269, 275, 283, 290, 293, 308, 313, 328, 329, 337, 340, 344, 345, 347, 352, 366, 376, 386, 395, 408, 427, 428, 430, 434, 435, 444, 452, 462, 466, 467, 468, 469, 475, 476, 477, 479, 480, 481, 482, 483], "pybytes_fromformatv": [9, 57], "pybytes_fromobject": [9, 57], "pybytes_s": [9, 57, 79], "pybytes_get_s": 9, "pybytes_asstr": [9, 57, 472], "last": [9, 22, 23, 25, 26, 33, 34, 45, 59, 63, 67, 73, 76, 78, 84, 85, 89, 92, 93, 94, 95, 99, 100, 101, 102, 103, 106, 109, 114, 120, 125, 139, 140, 144, 146, 151, 155, 158, 160, 161, 167, 169, 176, 177, 183, 184, 186, 188, 190, 191, 193, 196, 200, 203, 205, 209, 211, 213, 214, 215, 218, 221, 225, 234, 235, 245, 247, 248, 255, 259, 261, 262, 266, 267, 269, 270, 271, 275, 283, 284, 288, 291, 292, 293, 296, 297, 299, 301, 308, 314, 319, 320, 323, 328, 330, 331, 332, 337, 339, 340, 342, 344, 345, 347, 348, 352, 358, 365, 366, 369, 376, 378, 381, 382, 384, 386, 387, 388, 389, 390, 394, 395, 402, 405, 406, 410, 413, 415, 422, 427, 428, 429, 430, 432, 435, 436, 440, 441, 442, 443, 446, 449, 452, 455, 456, 461, 462, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "just": [9, 13, 28, 33, 39, 51, 63, 64, 66, 72, 73, 75, 76, 77, 79, 84, 85, 92, 93, 94, 95, 99, 100, 101, 102, 106, 109, 110, 120, 128, 129, 138, 139, 149, 151, 155, 157, 158, 159, 161, 167, 169, 176, 177, 179, 181, 183, 186, 190, 193, 194, 200, 201, 218, 225, 226, 230, 234, 235, 243, 247, 250, 252, 253, 261, 266, 267, 268, 269, 271, 281, 283, 292, 293, 297, 299, 308, 313, 314, 319, 320, 328, 330, 331, 333, 337, 338, 340, 341, 344, 345, 348, 352, 355, 358, 362, 364, 365, 369, 375, 376, 381, 384, 386, 388, 395, 399, 402, 410, 413, 414, 415, 420, 421, 422, 423, 427, 428, 430, 432, 434, 436, 441, 452, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483], "dealloc": [9, 13, 22, 28, 33, 35, 42, 45, 52, 63, 64, 73, 75, 76, 87, 100, 362, 402, 436, 456, 463, 464, 469, 473, 475, 481, 483], "pybytes_as_str": [9, 431], "pybytes_asstringands": [9, 57, 79], "pybytes_concat": [9, 57, 483], "newpart": 9, "append": [9, 34, 38, 59, 64, 76, 78, 79, 80, 84, 85, 101, 102, 103, 107, 112, 120, 121, 134, 149, 151, 157, 158, 160, 161, 163, 176, 181, 184, 186, 189, 191, 196, 200, 202, 203, 205, 208, 225, 226, 234, 247, 248, 249, 250, 255, 258, 261, 267, 269, 270, 271, 281, 283, 284, 288, 292, 293, 297, 299, 301, 302, 309, 316, 318, 319, 320, 321, 330, 334, 337, 341, 342, 344, 352, 358, 362, 378, 388, 395, 400, 408, 411, 413, 422, 427, 428, 435, 440, 441, 442, 443, 449, 450, 452, 455, 456, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 483], "stolen": [9, 72, 483], "pybytes_concatanddel": [9, 57], "version": [9, 10, 13, 33, 34, 35, 41, 42, 45, 58, 59, 61, 63, 64, 66, 68, 73, 75, 76, 77, 79, 80, 85, 91, 92, 93, 94, 95, 96, 98, 101, 102, 103, 105, 106, 109, 110, 111, 112, 117, 119, 120, 122, 126, 128, 133, 139, 142, 143, 151, 158, 163, 167, 173, 176, 177, 183, 184, 186, 190, 191, 193, 194, 196, 197, 199, 200, 201, 203, 205, 206, 207, 208, 209, 210, 213, 221, 225, 230, 233, 235, 242, 243, 244, 245, 247, 248, 250, 252, 253, 255, 257, 259, 262, 265, 266, 267, 268, 269, 270, 271, 274, 275, 278, 280, 281, 282, 283, 288, 293, 295, 299, 303, 304, 307, 308, 312, 313, 314, 315, 318, 319, 320, 330, 331, 332, 334, 337, 338, 339, 340, 341, 344, 345, 347, 348, 352, 354, 355, 356, 359, 361, 362, 364, 365, 369, 375, 376, 377, 379, 380, 381, 385, 386, 387, 388, 390, 394, 395, 398, 399, 402, 403, 405, 410, 411, 413, 417, 421, 422, 425, 426, 428, 429, 430, 431, 432, 435, 436, 450, 453, 455, 456, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484], "_pybytes_res": [9, 483], "newsiz": [9, 28, 60, 278], "though": [9, 11, 31, 33, 58, 63, 64, 73, 75, 76, 84, 85, 92, 94, 95, 102, 106, 109, 110, 115, 120, 126, 132, 133, 155, 158, 161, 173, 177, 186, 193, 196, 199, 200, 205, 206, 208, 213, 225, 230, 235, 243, 247, 250, 251, 252, 255, 262, 267, 269, 271, 275, 283, 288, 292, 293, 305, 311, 314, 319, 328, 331, 341, 344, 347, 362, 365, 366, 369, 382, 384, 386, 388, 390, 395, 410, 411, 415, 425, 426, 428, 429, 430, 432, 434, 435, 436, 455, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 474, 475, 476, 483], "build": [9, 33, 34, 42, 58, 64, 65, 68, 74, 75, 76, 79, 84, 85, 93, 98, 102, 110, 141, 155, 157, 158, 176, 186, 187, 188, 190, 191, 203, 206, 208, 211, 225, 235, 245, 254, 257, 258, 261, 273, 275, 282, 292, 296, 307, 311, 314, 328, 334, 337, 338, 341, 344, 352, 355, 362, 369, 382, 384, 388, 394, 395, 399, 400, 410, 425, 428, 451, 455, 458, 461, 462, 464, 473, 484], "brand": [9, 55, 60, 73, 305, 483], "refcount": [9, 33, 63, 100, 352, 362, 467, 483], "lvalu": [9, 292, 344], "differ": [9, 10, 13, 20, 23, 27, 33, 34, 42, 45, 58, 59, 63, 64, 66, 68, 72, 73, 74, 75, 76, 79, 84, 91, 92, 93, 95, 96, 99, 100, 101, 102, 103, 106, 109, 110, 112, 120, 126, 132, 133, 137, 138, 139, 141, 151, 155, 157, 158, 159, 161, 163, 167, 169, 170, 173, 174, 176, 177, 183, 185, 186, 191, 193, 195, 196, 202, 203, 205, 208, 213, 214, 216, 222, 225, 226, 230, 242, 243, 245, 247, 250, 255, 257, 258, 259, 261, 262, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 281, 283, 292, 293, 295, 297, 299, 302, 308, 313, 314, 318, 319, 320, 321, 322, 328, 330, 331, 333, 335, 337, 338, 340, 341, 344, 345, 347, 348, 352, 353, 355, 358, 362, 363, 364, 365, 366, 369, 375, 376, 381, 385, 386, 388, 394, 395, 405, 410, 411, 420, 422, 425, 426, 427, 428, 429, 430, 432, 434, 435, 436, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "realloc": [9, 42, 54, 73, 177, 466, 479, 483], "memoryerror": [9, 23, 55, 60, 64, 122, 186, 213, 395, 450, 477, 483], "slot": [10, 16, 32, 45, 47, 49, 50, 58, 61, 68, 75, 76, 93, 102, 134, 181, 191, 212, 226, 250, 255, 281, 283, 299, 316, 344, 385, 386, 428, 430, 462, 463, 464, 466, 467, 468, 470, 472, 473, 474, 476, 477, 478, 481, 482, 483], "callabl": [10, 33, 37, 58, 59, 63, 67, 68, 72, 73, 85, 87, 88, 92, 94, 95, 102, 108, 112, 120, 122, 126, 132, 136, 138, 139, 161, 166, 167, 170, 176, 177, 181, 187, 190, 191, 206, 207, 208, 223, 224, 225, 235, 248, 250, 251, 254, 258, 267, 268, 269, 271, 283, 291, 292, 293, 298, 299, 313, 314, 315, 325, 332, 333, 335, 344, 348, 352, 353, 358, 365, 371, 376, 378, 388, 389, 390, 395, 399, 400, 402, 407, 413, 421, 427, 430, 432, 450, 455, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 480, 481, 482, 483], "kwarg": [10, 58, 63, 68, 85, 87, 93, 101, 102, 112, 115, 120, 122, 126, 139, 140, 142, 158, 160, 166, 167, 170, 177, 186, 225, 250, 253, 255, 262, 267, 268, 283, 291, 292, 293, 299, 307, 308, 325, 344, 345, 358, 362, 364, 365, 385, 386, 388, 389, 390, 399, 402, 428, 431, 441, 468, 473, 476, 478, 479, 481, 483], "tp_new": [10, 61, 63, 75, 76, 100, 474, 483], "tp_init": [10, 61, 63, 75, 76, 474, 483], "pyobject_cal": [10, 57, 63, 73, 482, 483], "pep": [10, 13, 23, 26, 30, 31, 33, 34, 35, 45, 49, 57, 59, 62, 63, 64, 66, 68, 71, 73, 75, 78, 80, 85, 86, 87, 88, 95, 105, 108, 109, 112, 113, 116, 117, 122, 126, 129, 141, 142, 151, 152, 153, 154, 158, 160, 161, 163, 166, 169, 170, 173, 175, 181, 191, 200, 210, 213, 221, 225, 226, 227, 247, 249, 250, 251, 255, 258, 265, 266, 267, 272, 275, 281, 287, 288, 289, 293, 295, 296, 299, 301, 302, 311, 322, 324, 326, 328, 329, 332, 333, 334, 336, 337, 339, 340, 341, 344, 345, 348, 349, 352, 353, 358, 359, 362, 366, 378, 385, 386, 397, 399, 402, 407, 408, 423, 425, 427, 428, 429, 430, 431, 432, 435, 436, 441, 450, 455, 456, 457, 461, 462, 482, 483, 484], "590": [10, 68, 472, 473, 482, 483], "pyvectorcall_cal": [10, 57, 63, 474, 483], "py_tpflags_have_vectorcal": [10, 63, 474, 483], "now": [10, 23, 28, 33, 34, 39, 42, 49, 58, 59, 61, 63, 64, 66, 72, 73, 75, 76, 84, 85, 92, 93, 94, 101, 102, 103, 106, 107, 108, 109, 110, 115, 117, 120, 126, 132, 133, 137, 139, 140, 141, 143, 146, 149, 151, 153, 158, 160, 161, 163, 167, 169, 170, 176, 177, 181, 183, 184, 186, 188, 191, 193, 200, 202, 205, 212, 213, 214, 215, 216, 218, 221, 225, 226, 230, 234, 235, 242, 243, 244, 245, 248, 250, 251, 252, 255, 258, 259, 262, 266, 267, 268, 269, 270, 271, 275, 278, 282, 283, 284, 288, 292, 293, 295, 297, 299, 304, 305, 308, 309, 311, 313, 314, 319, 328, 329, 330, 331, 332, 333, 335, 337, 338, 340, 341, 343, 344, 347, 348, 352, 359, 360, 365, 366, 377, 381, 382, 384, 385, 386, 388, 394, 395, 399, 400, 405, 411, 413, 419, 420, 422, 423, 427, 428, 430, 432, 435, 436, 441, 442, 449, 450, 451, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "class": [10, 22, 23, 28, 33, 40, 44, 45, 49, 53, 54, 58, 61, 62, 63, 64, 67, 68, 73, 75, 76, 80, 84, 86, 87, 88, 92, 95, 99, 101, 103, 106, 107, 108, 109, 110, 112, 113, 116, 118, 121, 122, 126, 127, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 159, 160, 164, 166, 167, 169, 170, 172, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 208, 211, 218, 219, 221, 222, 223, 224, 225, 226, 227, 232, 234, 236, 240, 241, 242, 243, 244, 245, 246, 247, 248, 251, 252, 254, 255, 256, 258, 259, 261, 262, 264, 266, 267, 268, 269, 270, 271, 273, 276, 278, 279, 280, 284, 285, 286, 288, 289, 292, 293, 295, 296, 297, 298, 301, 302, 304, 305, 307, 311, 313, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 330, 331, 333, 335, 337, 338, 340, 341, 343, 345, 348, 351, 352, 358, 359, 360, 362, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 380, 381, 382, 386, 387, 389, 390, 394, 396, 398, 399, 400, 401, 402, 403, 405, 407, 408, 410, 411, 412, 413, 414, 416, 417, 419, 420, 421, 422, 423, 429, 430, 431, 432, 433, 434, 436, 439, 441, 443, 445, 446, 450, 451, 452, 455, 461, 462, 463, 465, 466, 469, 470, 471, 472, 474, 475, 477, 478, 480, 481, 482, 483, 484], "__call__": [10, 63, 85, 87, 93, 120, 159, 160, 161, 203, 211, 225, 283, 291, 358, 386, 389, 390, 402, 428, 430, 474, 479, 483], "reassign": [10, 42, 63, 76, 307, 348, 386, 389, 402, 474, 481, 483], "behav": [10, 23, 33, 34, 45, 63, 64, 76, 85, 94, 100, 102, 106, 109, 163, 167, 169, 170, 176, 183, 184, 186, 188, 225, 226, 244, 257, 258, 271, 278, 288, 293, 320, 321, 333, 335, 337, 338, 341, 344, 348, 352, 356, 364, 369, 386, 388, 411, 413, 427, 428, 429, 430, 435, 436, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 476, 477, 480, 481, 483], "earlier": [10, 33, 63, 64, 72, 84, 85, 92, 95, 96, 101, 102, 106, 115, 126, 177, 183, 193, 230, 245, 247, 267, 269, 292, 293, 299, 319, 331, 340, 341, 348, 358, 369, 380, 383, 386, 388, 394, 400, 402, 411, 415, 428, 430, 432, 435, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 474, 476, 477, 478, 479, 480, 481, 482, 483], "tp_vectorcall_offset": [10, 58, 61, 63, 75, 483], "vectorcallfunc": [10, 27, 57, 63, 75, 474], "typedef": [10, 11, 13, 15, 22, 27, 28, 32, 33, 50, 58, 59, 61, 64, 68, 75, 76, 483], "nargsf": 10, "kwname": [10, 58, 100], "py_vectorcall_arguments_offset": [10, 57, 474, 483], "pyvectorcall_narg": [10, 57, 474, 483], "pyobject_vectorcallmethod": [10, 57, 474, 483], "pyobject_vectorcal": [10, 57, 104, 474, 483], "_pyobject_vectorcal": 10, "_py_tpflags_have_vectorcal": 10, "_pyobject_vectorcallmethod": [10, 483], "_pyvectorcall_funct": 10, "_pyobject_callonearg": [10, 483], "_pyobject_callmethodnoarg": [10, 483], "_pyobject_callmethodonearg": [10, 483], "pyobject_vectorcalldict": 10, "_pyobject_fastcalldict": 10, "py_enterrecursivecal": [10, 23, 57, 482, 483], "py_leaverecursivecal": [10, 23, 57, 482, 483], "pyvectorcall_funct": [10, 483], "fall": [10, 18, 22, 25, 39, 42, 63, 64, 84, 95, 101, 108, 161, 177, 181, 183, 186, 196, 205, 213, 225, 235, 268, 293, 295, 325, 341, 344, 345, 358, 394, 395, 425, 428, 432, 435, 448, 462, 464, 465, 467, 468, 469, 470, 474, 475, 477, 479, 480, 482, 483], "pyobject_callnoarg": [10, 57, 75, 482, 483], "pyobject_callonearg": [10, 482, 483], "pyobject_callobject": [10, 57, 72, 73, 79], "pyobject_callfunct": [10, 57, 467, 481], "pyobject_callmethod": [10, 39, 55, 57, 79, 472, 474], "pyobject_callfunctionobjarg": [10, 57, 483], "pyobject_callmethodobjarg": [10, 57, 483], "pyobject_callmethodnoarg": [10, 483], "pyobject_callmethodonearg": [10, 483], "arg1": [10, 75, 85, 95, 98, 116, 191, 225, 292, 293, 428, 464, 465, 467], "arg2": [10, 75, 85, 95, 98, 116, 191, 225, 292, 389, 428, 464, 465, 467], "kwdict": [10, 73], "py_tpflags_method_descriptor": [10, 63, 483], "unbound": [10, 63, 68, 102, 115, 186, 187, 191, 225, 226, 255, 268, 362, 365, 384, 385, 428, 429, 432, 436, 464, 466, 470, 472, 478, 480, 483], "pycallable_check": [10, 57, 72, 73], "pycapsul": [11, 73, 469, 471, 472, 475, 483], "opaqu": [11, 13, 26, 33, 35, 39, 61, 63, 96, 116, 171, 258, 314, 329, 342, 408, 413, 463, 474, 475, 477, 480, 481, 482, 483], "who": [11, 68, 73, 96, 99, 101, 102, 103, 109, 126, 163, 228, 230, 248, 267, 293, 322, 341, 345, 358, 384, 411, 421, 423, 425, 446, 461, 462, 464, 465, 466, 467, 469, 476, 479, 481, 482, 483], "often": [11, 13, 33, 58, 64, 73, 75, 76, 84, 85, 92, 93, 95, 99, 102, 106, 109, 110, 120, 146, 151, 155, 176, 183, 184, 186, 190, 193, 194, 198, 213, 225, 230, 233, 255, 261, 267, 281, 292, 299, 308, 309, 311, 331, 337, 340, 341, 344, 346, 348, 354, 362, 365, 366, 369, 386, 395, 414, 428, 430, 434, 435, 436, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 475, 478, 481, 483], "dynam": [11, 22, 25, 31, 42, 45, 63, 66, 68, 72, 73, 77, 79, 80, 84, 85, 101, 102, 118, 141, 182, 190, 203, 225, 226, 247, 250, 254, 255, 293, 321, 335, 337, 340, 344, 352, 369, 376, 384, 423, 428, 430, 432, 436, 440, 456, 462, 464, 465, 467, 468, 475, 476, 477, 480, 481, 483], "load": [11, 31, 33, 34, 41, 45, 58, 59, 68, 72, 73, 77, 79, 84, 85, 86, 93, 94, 96, 100, 101, 102, 110, 118, 122, 142, 151, 155, 166, 167, 184, 187, 191, 193, 243, 244, 247, 250, 251, 253, 261, 262, 267, 268, 274, 276, 279, 284, 293, 297, 299, 302, 304, 307, 308, 311, 314, 320, 330, 334, 340, 341, 344, 352, 354, 362, 366, 368, 369, 379, 382, 384, 385, 405, 410, 413, 414, 419, 420, 421, 423, 425, 427, 428, 431, 433, 436, 446, 455, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "pycapsule_destructor": [11, 57], "destructor": [11, 33, 57, 63, 75, 76, 78, 84, 87, 115, 188, 293, 316, 348, 352, 428, 436, 455, 471, 475, 479, 481, 483], "pycapsule_new": [11, 57, 73], "pycapsule_checkexact": 11, "encapsul": [11, 84, 85, 88, 93, 100, 112, 114, 155, 202, 208, 248, 286, 305, 335, 352, 410, 414, 416, 419, 427, 432, 436, 466, 467, 468, 469, 477], "outliv": [11, 58, 427, 483], "permit": [11, 27, 59, 73, 99, 186, 212, 221, 225, 245, 255, 257, 259, 262, 265, 271, 283, 293, 299, 308, 319, 344, 348, 354, 410, 419, 426, 430, 431, 435, 436, 455, 467, 468, 474, 476, 477, 478, 481, 483], "attribut": [11, 22, 23, 26, 27, 31, 33, 45, 49, 50, 56, 60, 61, 63, 68, 74, 79, 87, 88, 95, 101, 103, 106, 108, 110, 112, 115, 118, 120, 122, 126, 133, 137, 142, 144, 149, 151, 155, 158, 159, 160, 167, 174, 175, 176, 177, 181, 183, 186, 188, 190, 191, 193, 195, 196, 197, 200, 203, 205, 207, 208, 213, 215, 216, 225, 226, 228, 233, 234, 242, 243, 244, 245, 247, 248, 250, 251, 254, 258, 259, 262, 268, 269, 270, 271, 273, 281, 283, 288, 291, 295, 298, 299, 302, 304, 305, 312, 313, 314, 315, 319, 321, 325, 328, 331, 332, 333, 334, 335, 337, 338, 339, 341, 342, 345, 347, 348, 353, 358, 361, 362, 364, 365, 366, 367, 369, 371, 374, 381, 382, 383, 384, 385, 386, 388, 389, 390, 394, 395, 399, 400, 402, 405, 408, 410, 411, 413, 414, 415, 417, 419, 420, 422, 423, 425, 426, 427, 429, 435, 436, 440, 442, 456, 461, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484], "modulenam": [11, 71, 73, 79, 85, 98, 450, 483], "attributenam": [11, 73], "enabl": [11, 28, 34, 49, 63, 68, 75, 76, 92, 94, 96, 98, 106, 110, 112, 120, 133, 139, 142, 144, 151, 152, 155, 167, 169, 176, 177, 186, 188, 193, 197, 213, 214, 225, 226, 227, 230, 242, 245, 247, 248, 250, 255, 258, 266, 268, 269, 283, 288, 293, 297, 299, 305, 308, 311, 314, 319, 320, 333, 334, 337, 340, 341, 344, 348, 352, 353, 354, 362, 367, 369, 371, 376, 380, 386, 388, 400, 412, 413, 414, 415, 420, 422, 427, 428, 429, 436, 455, 456, 461, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 475, 476, 478, 479, 480, 481, 482, 483], "pycapsule_import": [11, 57, 73, 483], "pycapsule_getpoint": [11, 57, 469], "compar": [11, 23, 33, 34, 49, 63, 64, 68, 72, 75, 84, 92, 94, 99, 101, 102, 106, 122, 126, 176, 181, 182, 183, 186, 190, 191, 193, 195, 196, 197, 202, 214, 216, 225, 226, 236, 259, 262, 266, 267, 269, 271, 283, 292, 297, 308, 311, 314, 316, 326, 328, 340, 341, 342, 344, 346, 352, 362, 369, 382, 386, 387, 388, 390, 405, 413, 425, 427, 428, 430, 432, 435, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "strcmp": [11, 18, 75, 483], "pycapsule_getdestructor": [11, 57], "legal": [11, 77, 92, 109, 225, 241, 247, 258, 297, 366, 369, 376, 420, 426, 430, 435, 463, 464, 465, 467, 468, 469, 483], "somewhat": [11, 23, 100, 102, 176, 183, 204, 226, 247, 266, 292, 293, 337, 369, 425, 462, 467, 470, 480, 481, 483], "ambigu": [11, 89, 95, 103, 106, 120, 183, 259, 292, 297, 319, 344, 425, 427, 430, 434, 435, 462, 468, 474, 477, 479, 480, 481, 482, 483], "pycapsule_isvalid": [11, 57, 469], "pyerr_occur": [11, 22, 23, 25, 35, 36, 39, 41, 49, 57, 64, 72, 73, 431, 483], "disambigu": [11, 39, 68, 183, 430, 435, 483], "pycapsule_getcontext": [11, 57], "context": [11, 16, 23, 33, 42, 45, 49, 54, 64, 66, 68, 73, 78, 79, 85, 87, 95, 96, 100, 109, 120, 122, 123, 124, 126, 128, 129, 132, 139, 151, 152, 160, 164, 166, 167, 183, 184, 187, 188, 190, 191, 213, 218, 223, 225, 230, 235, 242, 250, 251, 252, 254, 255, 262, 267, 268, 269, 270, 271, 278, 288, 290, 293, 295, 297, 298, 299, 305, 307, 308, 314, 315, 316, 319, 321, 322, 328, 329, 330, 335, 337, 338, 345, 348, 352, 358, 359, 360, 362, 365, 368, 375, 377, 386, 388, 390, 395, 399, 402, 405, 410, 412, 413, 414, 415, 419, 422, 427, 429, 430, 435, 436, 456, 462, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484], "pycapsule_getnam": [11, 57], "no_block": [11, 483], "full": [11, 28, 33, 34, 63, 64, 68, 73, 76, 84, 93, 101, 102, 106, 108, 110, 134, 139, 157, 158, 161, 163, 167, 168, 173, 176, 180, 183, 186, 190, 191, 193, 197, 200, 201, 212, 213, 215, 222, 243, 247, 251, 255, 259, 261, 267, 269, 275, 278, 280, 281, 283, 292, 293, 295, 297, 302, 314, 316, 319, 331, 332, 333, 335, 337, 338, 341, 344, 347, 348, 352, 358, 362, 366, 369, 384, 385, 388, 394, 395, 402, 403, 411, 413, 419, 422, 427, 428, 429, 431, 432, 436, 446, 455, 456, 458, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "accessor": [11, 68, 85, 225, 273, 411, 467, 481, 483], "pycapsule_get": 11, "nonzero": [11, 23, 33, 59, 73, 106, 112, 115, 186, 191, 225, 269, 275, 278, 283, 311, 319, 344, 352, 361, 365, 366, 428, 435, 438, 455, 468, 481], "pycapsule_setcontext": [11, 57], "pycapsule_setdestructor": [11, 57], "pycapsule_setnam": [11, 57], "made": [11, 31, 33, 43, 58, 59, 63, 66, 72, 85, 94, 101, 102, 103, 105, 106, 108, 112, 120, 133, 139, 158, 160, 167, 169, 176, 177, 183, 186, 191, 193, 196, 199, 200, 205, 208, 213, 230, 242, 247, 250, 255, 258, 267, 268, 269, 278, 281, 283, 293, 297, 299, 307, 308, 314, 320, 321, 322, 324, 328, 331, 332, 333, 334, 335, 337, 344, 348, 353, 358, 362, 365, 369, 382, 389, 390, 394, 400, 402, 410, 413, 419, 420, 421, 425, 426, 427, 428, 436, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "pycapsule_setpoint": [11, 57], "stack": [12, 23, 33, 35, 59, 68, 73, 75, 78, 94, 96, 101, 104, 115, 118, 122, 126, 135, 139, 140, 144, 157, 160, 169, 171, 177, 184, 185, 191, 193, 213, 214, 225, 226, 247, 254, 257, 267, 269, 297, 315, 316, 319, 322, 331, 333, 337, 342, 344, 352, 353, 365, 375, 388, 400, 427, 428, 429, 430, 435, 436, 443, 445, 455, 462, 463, 466, 467, 468, 469, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483], "frame": [12, 13, 16, 19, 23, 29, 33, 35, 49, 53, 66, 68, 78, 84, 94, 96, 98, 104, 117, 139, 141, 142, 143, 144, 171, 177, 185, 191, 213, 214, 247, 255, 267, 297, 333, 336, 337, 341, 344, 349, 352, 353, 369, 374, 375, 376, 381, 385, 400, 427, 429, 455, 463, 465, 466, 467, 469, 472, 474, 476, 477, 478, 480, 482, 483], "pycellobject": 12, "pycell_typ": 12, "pycell_check": 12, "ob": [12, 19, 20, 29, 56, 67, 402, 473], "pycell_new": 12, "pycell_get": 12, "pycell_set": [12, 472, 483], "low": [13, 16, 33, 38, 60, 63, 64, 68, 75, 84, 96, 101, 106, 109, 126, 129, 130, 133, 135, 136, 137, 139, 146, 164, 167, 169, 177, 178, 191, 213, 225, 254, 260, 267, 281, 293, 308, 318, 319, 328, 329, 330, 333, 335, 340, 341, 343, 344, 352, 356, 369, 386, 400, 402, 413, 415, 428, 456, 464, 465, 467, 468, 469, 476, 478, 479, 481, 483], "detail": [13, 17, 26, 34, 39, 42, 45, 54, 55, 59, 61, 63, 64, 66, 68, 71, 72, 73, 76, 77, 79, 84, 85, 87, 88, 92, 93, 94, 95, 96, 100, 101, 102, 106, 108, 109, 110, 112, 118, 120, 126, 133, 137, 139, 141, 144, 151, 152, 158, 169, 173, 176, 177, 181, 182, 183, 186, 190, 191, 193, 194, 196, 201, 205, 207, 211, 213, 215, 223, 225, 226, 230, 234, 235, 245, 246, 247, 250, 251, 255, 259, 262, 265, 267, 269, 270, 271, 272, 281, 283, 292, 293, 299, 314, 319, 322, 324, 331, 332, 335, 337, 338, 340, 342, 344, 347, 348, 352, 354, 355, 356, 358, 359, 362, 364, 365, 369, 373, 381, 385, 386, 388, 394, 395, 400, 402, 405, 410, 413, 415, 419, 421, 422, 427, 428, 429, 430, 431, 432, 434, 435, 436, 440, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "execut": [13, 22, 23, 26, 27, 33, 34, 45, 49, 51, 53, 59, 66, 68, 72, 73, 75, 76, 77, 78, 79, 84, 85, 93, 95, 96, 102, 106, 109, 114, 115, 120, 128, 133, 135, 137, 139, 140, 142, 144, 151, 155, 157, 158, 160, 163, 166, 169, 170, 176, 185, 187, 191, 201, 213, 225, 226, 234, 245, 248, 250, 254, 255, 258, 266, 267, 268, 269, 272, 280, 281, 283, 292, 293, 297, 299, 301, 303, 308, 309, 313, 315, 320, 322, 325, 328, 330, 331, 332, 334, 337, 340, 342, 344, 346, 347, 348, 352, 354, 358, 362, 365, 366, 368, 369, 371, 375, 378, 386, 388, 390, 395, 399, 400, 403, 405, 420, 421, 426, 427, 430, 431, 432, 433, 436, 443, 450, 451, 455, 456, 458, 459, 460, 462, 463, 464, 465, 466, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "hasn": [13, 79, 84, 85, 133, 135, 139, 190, 232, 297, 314, 334, 341, 356, 462, 463, 467, 468, 470, 478, 480, 483], "pycodeobject": [13, 26, 473, 483], "subject": [13, 39, 45, 55, 61, 63, 75, 84, 95, 101, 102, 110, 122, 167, 183, 191, 193, 196, 200, 202, 203, 205, 243, 247, 255, 262, 267, 268, 269, 271, 288, 293, 307, 308, 330, 337, 341, 362, 366, 386, 426, 427, 428, 431, 435, 441, 467, 472, 474, 477, 483], "chang": [13, 17, 22, 23, 27, 33, 34, 39, 45, 54, 55, 58, 59, 60, 61, 63, 66, 68, 72, 73, 75, 76, 77, 79, 92, 93, 94, 95, 96, 102, 103, 105, 106, 109, 110, 112, 113, 115, 120, 139, 149, 151, 155, 163, 167, 169, 170, 176, 177, 179, 181, 183, 184, 186, 190, 191, 193, 194, 196, 197, 201, 205, 206, 207, 208, 212, 216, 218, 222, 223, 225, 226, 234, 235, 243, 246, 247, 248, 250, 251, 255, 258, 261, 265, 266, 267, 268, 269, 270, 271, 275, 278, 281, 283, 284, 293, 297, 299, 305, 308, 311, 313, 314, 319, 320, 321, 328, 329, 331, 332, 333, 337, 338, 339, 340, 341, 342, 344, 346, 348, 352, 353, 358, 361, 362, 364, 365, 366, 369, 375, 376, 377, 378, 382, 385, 386, 388, 394, 395, 400, 405, 410, 411, 412, 413, 416, 421, 422, 425, 426, 427, 428, 429, 432, 434, 435, 436, 441, 451, 455, 456, 461, 476, 483, 484], "pycode_typ": 13, "pycode_check": 13, "co": [13, 31, 58, 66, 68, 76, 120, 166, 177, 256, 337, 353, 362, 384, 466, 475, 480, 483], "pycode_getnumfre": 13, "pycode_getfirstfre": 13, "pyunstable_code_new": [13, 474], "argcount": [13, 66, 142, 385, 481], "kwonlyargcount": [13, 142, 385, 483], "nlocal": [13, 142, 385], "stacksiz": [13, 142, 385, 483], "varnam": [13, 483], "freevar": [13, 483], "cellvar": [13, 225, 483], "filenam": [13, 23, 33, 34, 45, 59, 66, 68, 71, 77, 84, 85, 95, 98, 101, 102, 106, 112, 120, 122, 142, 144, 149, 151, 155, 157, 158, 159, 160, 163, 167, 169, 175, 176, 184, 189, 190, 193, 196, 197, 200, 201, 205, 213, 214, 218, 219, 223, 225, 230, 234, 243, 247, 250, 254, 255, 265, 267, 268, 269, 270, 272, 279, 281, 283, 285, 286, 292, 293, 295, 296, 297, 299, 302, 308, 309, 311, 319, 320, 330, 331, 332, 336, 340, 348, 351, 352, 358, 362, 369, 375, 378, 381, 382, 384, 385, 388, 390, 393, 395, 400, 403, 405, 406, 407, 411, 412, 413, 414, 421, 422, 436, 438, 446, 451, 452, 455, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483], "qualnam": [13, 19, 27, 29, 94, 101, 197, 211, 268, 483], "firstlineno": 13, "linet": 13, "exceptiont": 13, "dummi": [13, 68, 73, 102, 114, 164, 176, 190, 230, 258, 293, 358, 362, 365, 384, 479, 483], "pycode_newempti": [13, 469], "definit": [13, 30, 31, 33, 39, 45, 50, 58, 59, 64, 68, 73, 75, 76, 85, 87, 92, 94, 99, 100, 102, 103, 106, 109, 112, 120, 143, 144, 158, 161, 169, 176, 177, 181, 183, 225, 226, 230, 232, 247, 250, 251, 255, 256, 267, 269, 281, 283, 289, 292, 299, 308, 312, 313, 324, 335, 340, 344, 345, 352, 359, 364, 366, 377, 384, 385, 386, 387, 388, 395, 402, 408, 410, 411, 414, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 445, 463, 464, 465, 466, 467, 468, 469, 470, 475, 476, 477, 478, 480, 481, 482, 483], "bytecod": [13, 31, 33, 66, 68, 84, 85, 87, 95, 96, 98, 104, 106, 163, 225, 250, 254, 255, 264, 311, 324, 333, 351, 352, 362, 382, 428, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 478, 483, 484], "bind": [13, 44, 58, 61, 68, 85, 93, 102, 107, 126, 129, 142, 169, 171, 177, 193, 223, 225, 230, 241, 245, 255, 266, 268, 294, 298, 314, 320, 329, 335, 337, 338, 341, 352, 362, 368, 371, 375, 376, 384, 426, 427, 428, 430, 432, 433, 434, 436, 441, 459, 462, 463, 464, 466, 467, 468, 472, 476, 477, 478, 480, 483], "inter": [13, 190, 257, 260, 333, 386, 483], "depend": [13, 27, 33, 34, 45, 53, 63, 64, 68, 72, 73, 75, 77, 79, 84, 85, 92, 93, 94, 95, 96, 100, 102, 106, 109, 111, 115, 126, 133, 139, 144, 151, 155, 158, 167, 169, 173, 176, 177, 181, 183, 186, 190, 191, 193, 195, 205, 208, 210, 213, 215, 219, 221, 225, 230, 234, 242, 243, 244, 247, 250, 255, 257, 258, 259, 261, 266, 267, 268, 269, 270, 271, 275, 279, 281, 283, 288, 293, 299, 308, 309, 314, 315, 319, 322, 328, 329, 330, 333, 335, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 352, 354, 355, 358, 359, 361, 362, 364, 366, 369, 376, 384, 386, 388, 390, 395, 399, 402, 403, 405, 406, 413, 415, 419, 421, 425, 427, 428, 429, 430, 432, 435, 436, 452, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 480, 481, 482, 483], "subtl": [13, 23, 63, 73, 103, 193, 215, 292, 295, 308, 428, 429, 477, 483], "incorrect": [13, 102, 106, 112, 143, 157, 184, 193, 213, 225, 244, 247, 255, 267, 271, 292, 293, 348, 366, 386, 388, 390, 397, 411, 422, 428, 431, 463, 464, 465, 467, 470, 474, 475, 476, 477, 481, 482, 483], "vm": [13, 63, 84, 322, 353, 476, 483], "crash": [13, 33, 43, 57, 63, 73, 75, 96, 100, 140, 151, 176, 184, 188, 214, 247, 250, 271, 283, 292, 297, 299, 330, 352, 362, 456, 462, 467, 468, 474, 476, 477, 479, 483], "extrem": [13, 95, 100, 102, 109, 207, 262, 268, 293, 299, 318, 410, 422, 430, 483], "care": [13, 23, 33, 63, 66, 68, 73, 75, 76, 84, 85, 93, 94, 100, 101, 102, 106, 109, 110, 120, 144, 169, 176, 181, 183, 186, 191, 193, 196, 208, 230, 250, 267, 268, 269, 271, 283, 292, 299, 308, 314, 319, 330, 333, 347, 348, 352, 358, 388, 390, 400, 408, 411, 413, 421, 428, 430, 448, 455, 461, 462, 466, 467, 468, 469, 470, 474, 475, 477, 482, 483], "renam": [13, 42, 58, 63, 76, 84, 102, 112, 142, 160, 213, 223, 247, 248, 252, 269, 271, 293, 296, 311, 328, 332, 342, 381, 388, 421, 452, 462, 464, 465, 466, 468, 469, 470, 471, 474, 475, 476, 478, 479, 483], "pycode_new": [13, 469, 473, 474, 481, 483], "deprec": [13, 23, 31, 33, 42, 49, 54, 56, 58, 59, 61, 63, 64, 68, 93, 112, 120, 126, 139, 149, 151, 158, 161, 173, 176, 186, 187, 198, 199, 205, 207, 213, 218, 225, 234, 242, 243, 248, 250, 252, 255, 259, 267, 272, 292, 293, 298, 299, 304, 305, 314, 322, 324, 328, 332, 335, 337, 341, 344, 346, 352, 358, 362, 365, 366, 369, 371, 384, 388, 395, 397, 400, 403, 413, 423, 428, 430, 432, 461, 463, 464, 467, 470, 472, 474, 476, 481, 482, 483, 484], "until": [13, 31, 33, 34, 59, 63, 66, 72, 73, 76, 79, 84, 85, 92, 95, 101, 102, 103, 106, 115, 120, 126, 129, 133, 134, 137, 138, 139, 143, 151, 153, 160, 177, 183, 186, 191, 207, 214, 218, 225, 226, 230, 235, 242, 243, 247, 250, 258, 261, 265, 267, 269, 270, 283, 292, 293, 295, 297, 299, 305, 308, 314, 316, 320, 323, 325, 328, 329, 331, 333, 337, 338, 339, 340, 341, 344, 347, 348, 359, 361, 362, 365, 369, 381, 384, 386, 395, 400, 402, 403, 405, 407, 408, 412, 415, 416, 427, 428, 436, 452, 455, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 482, 483], "signatur": [13, 17, 45, 58, 63, 68, 71, 85, 93, 94, 100, 101, 102, 122, 126, 139, 145, 159, 160, 161, 169, 181, 183, 213, 216, 225, 226, 235, 247, 267, 268, 292, 299, 313, 315, 332, 340, 341, 348, 352, 381, 384, 385, 386, 389, 390, 394, 413, 415, 419, 424, 428, 430, 440, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483], "again": [13, 22, 27, 28, 33, 45, 63, 73, 75, 76, 84, 85, 92, 94, 95, 96, 102, 106, 109, 110, 133, 146, 151, 167, 170, 176, 177, 183, 188, 200, 212, 214, 221, 226, 232, 243, 247, 261, 267, 269, 275, 278, 282, 283, 292, 293, 295, 297, 299, 308, 313, 328, 331, 333, 335, 340, 341, 344, 348, 352, 360, 362, 365, 369, 375, 376, 384, 387, 395, 400, 413, 414, 427, 428, 430, 432, 435, 436, 441, 443, 461, 462, 464, 465, 468, 470, 475, 476, 480, 481, 483], "pyunstable_code_newwithposonlyarg": [13, 474], "posonlyargcount": [13, 142, 385, 481, 483], "caveat": [13, 61, 68, 115, 192, 246, 250, 255, 308, 311, 428, 436], "appli": [13, 34, 63, 64, 73, 75, 94, 95, 96, 101, 102, 103, 112, 120, 122, 139, 141, 158, 169, 176, 177, 178, 181, 183, 186, 190, 191, 193, 198, 205, 208, 209, 213, 220, 223, 225, 226, 230, 235, 243, 244, 245, 247, 255, 259, 261, 267, 268, 270, 271, 272, 276, 283, 292, 293, 297, 299, 308, 314, 319, 321, 322, 324, 328, 332, 337, 341, 344, 345, 348, 352, 354, 358, 362, 365, 366, 369, 376, 378, 382, 386, 387, 388, 390, 394, 400, 411, 413, 419, 422, 426, 427, 428, 429, 430, 432, 436, 442, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 479, 480, 481, 482, 483], "pycode_newwithposonlyarg": [13, 473, 474, 481, 483], "funcnam": [13, 72, 98, 144, 267, 427, 440], "line": [13, 23, 24, 26, 33, 34, 64, 66, 68, 72, 73, 76, 84, 85, 89, 92, 94, 95, 96, 98, 100, 101, 102, 103, 106, 109, 110, 112, 113, 118, 119, 122, 125, 136, 137, 142, 143, 144, 146, 149, 150, 151, 152, 157, 158, 159, 160, 167, 169, 170, 175, 176, 177, 178, 183, 185, 186, 187, 188, 193, 195, 196, 199, 200, 201, 202, 204, 205, 207, 208, 213, 214, 219, 222, 223, 225, 230, 234, 240, 242, 245, 247, 248, 250, 251, 254, 255, 258, 259, 261, 262, 264, 267, 268, 269, 270, 271, 272, 278, 281, 282, 283, 288, 296, 297, 299, 301, 302, 305, 307, 308, 312, 313, 314, 319, 321, 324, 331, 332, 334, 335, 340, 341, 344, 345, 347, 348, 350, 352, 353, 354, 359, 362, 363, 364, 367, 369, 375, 377, 381, 382, 384, 386, 387, 396, 399, 400, 403, 407, 411, 413, 416, 420, 421, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 440, 441, 442, 443, 446, 448, 449, 451, 452, 453, 455, 456, 458, 462, 463, 464, 465, 467, 468, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484], "pycode_addr2lin": [13, 465, 472, 473, 479], "byte_offset": 13, "pyframe_getlinenumb": [13, 26, 57, 469, 472, 473, 479, 482], "effici": [13, 22, 25, 33, 49, 60, 63, 64, 68, 92, 95, 99, 107, 109, 126, 133, 151, 158, 183, 186, 191, 216, 219, 220, 226, 235, 251, 261, 283, 284, 293, 299, 307, 319, 328, 329, 341, 344, 347, 364, 365, 405, 413, 428, 464, 466, 468, 470, 474, 475, 476, 477, 478, 481, 482, 483], "iter": [13, 16, 22, 28, 29, 33, 36, 49, 54, 55, 63, 64, 67, 68, 75, 78, 87, 93, 99, 106, 108, 112, 116, 121, 122, 126, 133, 136, 139, 144, 149, 150, 151, 158, 160, 161, 166, 167, 169, 170, 175, 176, 181, 187, 191, 194, 195, 196, 197, 205, 213, 219, 220, 225, 226, 230, 231, 234, 235, 236, 242, 243, 250, 251, 252, 253, 254, 255, 256, 258, 261, 262, 266, 267, 270, 271, 275, 283, 285, 288, 293, 297, 299, 300, 304, 308, 318, 319, 328, 337, 340, 343, 347, 352, 362, 378, 385, 386, 389, 390, 394, 395, 402, 407, 410, 413, 414, 415, 419, 425, 427, 431, 432, 436, 441, 442, 443, 445, 450, 462, 463, 464, 465, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484], "626": [13, 68, 191, 428, 474, 483], "pycode_addr2loc": [13, 473, 483], "start_lin": [13, 428], "start_column": [13, 428], "end_lin": [13, 428], "end_column": [13, 428], "column": [13, 34, 63, 68, 85, 98, 109, 151, 155, 177, 190, 191, 193, 213, 225, 247, 255, 261, 262, 281, 293, 308, 314, 319, 332, 340, 344, 347, 364, 368, 369, 378, 413, 416, 428, 455, 462, 469, 473, 478, 483], "particular": [13, 33, 45, 59, 63, 64, 66, 68, 72, 73, 75, 78, 85, 93, 95, 99, 100, 101, 103, 106, 109, 110, 115, 120, 139, 151, 158, 161, 167, 169, 176, 177, 183, 193, 203, 208, 213, 243, 247, 248, 251, 255, 259, 262, 267, 268, 269, 271, 275, 276, 283, 288, 292, 293, 297, 299, 302, 308, 319, 322, 328, 332, 333, 334, 335, 337, 338, 341, 342, 344, 345, 347, 348, 352, 353, 355, 362, 364, 365, 369, 375, 376, 381, 386, 388, 390, 394, 395, 400, 402, 410, 411, 413, 420, 426, 427, 428, 430, 431, 432, 434, 436, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 483], "pycode_getcod": [13, 473, 483], "getattr": [13, 78, 85, 87, 88, 93, 101, 102, 116, 126, 160, 176, 181, 191, 225, 255, 261, 283, 291, 292, 299, 345, 358, 385, 386, 427, 440, 450, 462, 475, 477, 480, 483], "co_cod": [13, 255, 428, 473, 483], "demand": [13, 42, 64, 93, 167, 283, 292, 427, 461, 474, 478, 482, 483], "necessarili": [13, 23, 61, 63, 72, 76, 85, 100, 115, 177, 186, 193, 196, 205, 251, 271, 275, 283, 293, 299, 319, 337, 340, 344, 352, 353, 366, 385, 410, 415, 425, 426, 436, 461, 465, 467, 468, 469, 483], "primari": [13, 68, 76, 85, 93, 94, 108, 157, 169, 193, 194, 196, 205, 206, 218, 261, 267, 276, 281, 293, 299, 308, 334, 337, 340, 341, 352, 378, 402, 419, 425, 431, 432, 433, 436, 452, 462, 463, 465, 466, 468, 469, 470, 475, 476, 477, 483], "debugg": [13, 32, 42, 68, 73, 96, 144, 185, 193, 213, 214, 225, 247, 254, 321, 352, 353, 381, 388, 428, 440, 456, 461, 464, 465, 467, 468, 469, 474, 475, 479, 480, 481, 483], "profil": [13, 32, 34, 51, 68, 85, 96, 104, 156, 158, 185, 254, 333, 341, 346, 352, 354, 365, 369, 405, 438, 451, 455, 456, 459, 463, 464, 466, 467, 468, 470, 472, 473, 474, 479, 481, 483], "pycode_getvarnam": [13, 473, 483], "co_varnam": [13, 191, 255, 428, 473, 483], "pytupleobject": [13, 54, 59, 60, 62], "pycode_getcellvar": [13, 473, 483], "co_cellvar": [13, 255, 428, 473, 483], "pycode_getfreevar": [13, 473, 483], "co_freevar": [13, 255, 428, 473, 483], "pycode_addwatch": [13, 474, 483], "pycode_watchcallback": 13, "regist": [13, 22, 27, 33, 34, 59, 61, 63, 68, 73, 76, 84, 85, 87, 109, 110, 116, 120, 126, 128, 132, 133, 136, 140, 158, 161, 167, 169, 193, 197, 203, 208, 214, 225, 226, 250, 258, 267, 276, 283, 289, 293, 298, 299, 302, 314, 315, 320, 328, 329, 332, 333, 337, 341, 344, 352, 362, 369, 376, 384, 386, 388, 395, 400, 402, 403, 406, 410, 413, 415, 420, 421, 427, 428, 430, 432, 461, 462, 463, 465, 466, 468, 469, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483], "watcher": [13, 22, 27, 61, 63, 68, 75, 137, 474, 482, 483], "id": [13, 22, 27, 33, 45, 61, 68, 78, 87, 95, 96, 98, 101, 102, 115, 117, 118, 122, 130, 133, 142, 153, 160, 177, 181, 193, 196, 197, 200, 203, 205, 209, 225, 230, 233, 240, 259, 261, 267, 268, 269, 270, 271, 272, 281, 283, 288, 293, 299, 303, 305, 307, 310, 314, 319, 322, 328, 329, 334, 337, 340, 341, 342, 348, 349, 353, 356, 358, 365, 369, 376, 386, 388, 389, 390, 398, 401, 402, 413, 416, 428, 430, 431, 449, 450, 463, 464, 466, 467, 468, 473, 474, 480, 481, 482, 483], "pycode_clearwatch": [13, 474, 483], "ids": [13, 22, 27, 61, 85, 230, 259, 268, 270, 283, 288, 293, 299, 303, 353, 365, 376, 402, 466, 476, 483], "watcher_id": [13, 22, 27, 61], "clear": [13, 22, 27, 32, 33, 35, 45, 47, 58, 61, 63, 67, 68, 73, 75, 76, 80, 85, 92, 95, 98, 100, 102, 103, 106, 109, 110, 120, 126, 138, 155, 158, 160, 161, 167, 169, 177, 186, 191, 193, 205, 216, 223, 226, 243, 247, 250, 255, 265, 267, 269, 271, 276, 292, 293, 297, 302, 319, 320, 332, 333, 337, 340, 344, 352, 353, 358, 362, 365, 376, 381, 382, 383, 384, 386, 388, 389, 390, 399, 400, 413, 423, 427, 428, 430, 442, 449, 456, 461, 462, 464, 465, 467, 468, 469, 474, 475, 476, 477, 479, 480, 482, 483], "identifi": [13, 22, 23, 27, 33, 42, 61, 64, 68, 73, 75, 76, 77, 85, 87, 99, 101, 109, 110, 115, 120, 122, 153, 160, 176, 191, 193, 194, 196, 205, 212, 225, 230, 247, 248, 255, 259, 268, 269, 271, 281, 283, 288, 293, 297, 302, 308, 314, 315, 319, 320, 323, 328, 335, 337, 341, 344, 345, 346, 351, 352, 355, 362, 365, 368, 369, 386, 387, 388, 394, 395, 398, 405, 410, 413, 415, 416, 420, 426, 427, 428, 429, 432, 433, 436, 440, 443, 448, 461, 465, 466, 467, 468, 469, 470, 474, 475, 477, 478, 479, 480, 481, 482, 483], "pycodeev": 13, "enumer": [13, 22, 23, 27, 68, 78, 93, 95, 108, 109, 182, 225, 226, 261, 283, 311, 344, 365, 382, 405, 422, 441, 442, 450, 452, 461, 473, 474, 477, 479, 483, 484], "event": [13, 22, 24, 27, 31, 33, 42, 58, 59, 66, 68, 73, 81, 92, 98, 101, 115, 121, 123, 124, 125, 129, 130, 132, 133, 135, 136, 137, 139, 142, 144, 164, 176, 177, 185, 189, 191, 222, 227, 254, 257, 260, 267, 269, 274, 281, 283, 293, 308, 314, 315, 328, 329, 335, 341, 342, 344, 352, 358, 362, 368, 371, 385, 388, 395, 402, 410, 411, 412, 413, 414, 415, 416, 417, 426, 428, 430, 446, 452, 455, 461, 462, 467, 468, 469, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "py_code_event_cr": 13, "py_code_event_destroy": 13, "destruct": [13, 33, 73, 75, 155, 177, 255, 344, 428, 463, 474, 475, 483], "place": [13, 22, 23, 27, 33, 34, 38, 42, 45, 47, 52, 54, 58, 60, 61, 63, 64, 68, 73, 75, 76, 77, 79, 84, 87, 93, 94, 95, 100, 101, 102, 108, 110, 112, 120, 139, 151, 152, 158, 160, 167, 168, 169, 176, 177, 181, 183, 186, 189, 190, 191, 193, 196, 205, 208, 218, 224, 225, 226, 230, 232, 243, 247, 250, 258, 262, 267, 268, 269, 271, 275, 278, 283, 293, 296, 297, 299, 302, 308, 311, 314, 318, 319, 321, 324, 338, 340, 341, 344, 345, 348, 364, 369, 375, 376, 380, 384, 385, 386, 388, 389, 390, 395, 397, 399, 413, 421, 422, 426, 427, 428, 430, 432, 436, 452, 455, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 473, 475, 476, 478, 479, 480, 481, 483], "prior": [13, 22, 27, 33, 45, 59, 85, 93, 101, 102, 126, 143, 186, 225, 226, 245, 251, 255, 267, 314, 329, 332, 337, 340, 341, 343, 344, 348, 352, 356, 358, 362, 365, 386, 388, 402, 413, 422, 426, 427, 428, 430, 432, 435, 436, 474, 477, 478, 479, 480, 481, 483], "inspect": [13, 22, 27, 33, 34, 66, 68, 73, 76, 87, 88, 102, 120, 122, 129, 139, 156, 161, 181, 193, 225, 235, 250, 251, 254, 259, 267, 271, 297, 302, 307, 313, 315, 332, 333, 334, 341, 344, 352, 358, 362, 371, 382, 386, 388, 389, 395, 422, 427, 428, 455, 462, 463, 464, 468, 469, 483], "resurrect": [13, 22, 27, 352, 362, 365, 428, 475, 482, 483], "prevent": [13, 22, 23, 27, 33, 42, 58, 61, 73, 75, 76, 84, 85, 92, 93, 100, 101, 102, 109, 110, 126, 139, 158, 167, 169, 170, 176, 181, 186, 188, 190, 193, 206, 225, 226, 247, 250, 259, 262, 268, 269, 271, 272, 276, 283, 288, 292, 293, 305, 311, 335, 337, 341, 348, 352, 353, 358, 362, 369, 381, 384, 386, 388, 390, 400, 402, 422, 428, 430, 432, 455, 461, 464, 465, 467, 468, 469, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "later": [13, 22, 23, 24, 27, 33, 34, 42, 45, 61, 72, 73, 75, 76, 84, 92, 95, 96, 101, 102, 103, 106, 110, 120, 125, 126, 138, 139, 140, 141, 149, 151, 152, 155, 158, 167, 169, 176, 177, 183, 191, 196, 202, 205, 230, 235, 243, 247, 250, 255, 261, 265, 266, 267, 268, 270, 279, 283, 292, 293, 299, 319, 325, 328, 331, 333, 337, 340, 341, 352, 358, 362, 381, 386, 388, 395, 400, 402, 421, 427, 428, 430, 432, 436, 455, 456, 461, 462, 463, 464, 465, 468, 469, 470, 473, 474, 475, 477, 478, 480, 482, 483], "activ": [13, 22, 23, 27, 33, 49, 59, 63, 66, 72, 85, 92, 96, 106, 126, 132, 138, 139, 144, 151, 152, 160, 169, 177, 186, 213, 218, 223, 225, 243, 247, 251, 272, 283, 288, 292, 295, 297, 305, 308, 314, 328, 334, 338, 340, 341, 344, 348, 352, 353, 365, 366, 369, 376, 384, 385, 390, 399, 411, 412, 415, 436, 441, 453, 455, 461, 462, 464, 465, 467, 468, 469, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483], "user": [13, 23, 28, 33, 34, 39, 42, 58, 61, 63, 64, 66, 68, 70, 72, 73, 74, 76, 79, 84, 85, 86, 93, 94, 99, 100, 101, 102, 106, 109, 110, 111, 118, 120, 126, 133, 135, 139, 142, 144, 151, 155, 157, 158, 159, 160, 161, 163, 167, 169, 173, 177, 179, 181, 183, 185, 186, 189, 193, 200, 210, 212, 213, 216, 223, 226, 228, 229, 230, 233, 235, 242, 243, 245, 248, 250, 251, 254, 255, 257, 258, 266, 267, 269, 271, 272, 281, 283, 288, 292, 293, 294, 295, 296, 297, 299, 305, 311, 312, 315, 319, 320, 322, 328, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 344, 347, 348, 352, 353, 356, 358, 359, 362, 365, 366, 369, 375, 376, 380, 381, 384, 385, 386, 388, 390, 394, 395, 396, 399, 400, 403, 405, 411, 412, 413, 414, 415, 419, 421, 422, 425, 426, 427, 428, 429, 430, 432, 436, 438, 441, 453, 455, 456, 459, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "reli": [13, 51, 73, 76, 85, 93, 94, 100, 102, 133, 140, 151, 161, 181, 183, 225, 250, 255, 267, 276, 283, 292, 293, 299, 302, 330, 332, 344, 352, 362, 364, 365, 366, 386, 388, 427, 428, 429, 432, 461, 462, 465, 466, 467, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 483], "runtim": [13, 24, 27, 33, 35, 42, 51, 52, 59, 66, 68, 73, 75, 76, 77, 85, 87, 88, 96, 100, 101, 109, 113, 140, 142, 163, 167, 176, 182, 188, 191, 213, 225, 250, 254, 257, 268, 269, 292, 293, 311, 314, 340, 344, 348, 352, 354, 369, 382, 386, 400, 404, 409, 411, 421, 424, 427, 428, 429, 432, 436, 440, 455, 456, 461, 463, 465, 469, 470, 472, 474, 476, 477, 478, 479, 482, 483], "creation": [13, 16, 27, 33, 58, 59, 63, 68, 73, 76, 85, 93, 94, 95, 101, 102, 103, 118, 120, 133, 135, 137, 139, 149, 181, 182, 186, 192, 197, 211, 225, 226, 230, 248, 250, 254, 255, 256, 258, 267, 270, 271, 281, 283, 288, 292, 305, 311, 321, 322, 331, 332, 335, 342, 344, 348, 358, 362, 369, 375, 402, 410, 413, 421, 426, 427, 429, 432, 459, 465, 474, 476, 477, 478, 480, 482, 483], "observ": [13, 27, 85, 94, 102, 183, 208, 318, 343, 348, 382, 384, 394, 436, 464, 476, 483], "print": [13, 22, 27, 32, 33, 34, 42, 49, 59, 63, 68, 72, 73, 75, 76, 78, 79, 84, 85, 86, 87, 88, 89, 94, 95, 99, 100, 101, 102, 103, 106, 109, 110, 112, 113, 114, 115, 118, 122, 123, 125, 126, 129, 133, 134, 135, 136, 137, 138, 139, 140, 144, 146, 151, 155, 157, 159, 160, 163, 166, 167, 169, 170, 172, 175, 176, 177, 181, 183, 184, 186, 188, 190, 191, 193, 196, 200, 201, 204, 205, 211, 213, 214, 216, 220, 225, 226, 228, 230, 232, 235, 240, 242, 244, 245, 247, 248, 250, 251, 254, 255, 258, 261, 262, 267, 269, 271, 278, 279, 282, 283, 288, 293, 296, 297, 299, 301, 304, 305, 307, 308, 309, 313, 314, 315, 316, 318, 319, 320, 321, 322, 325, 329, 331, 333, 334, 335, 337, 338, 340, 341, 342, 344, 345, 348, 352, 355, 357, 358, 359, 360, 362, 364, 365, 367, 369, 375, 376, 378, 380, 382, 384, 386, 388, 389, 395, 397, 399, 400, 402, 405, 407, 408, 411, 412, 413, 416, 417, 419, 420, 421, 422, 425, 427, 428, 429, 430, 435, 436, 440, 441, 442, 443, 446, 448, 449, 450, 451, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "unrais": [13, 22, 23, 27, 142, 340, 352, 362, 473, 481, 483], "pyerr_writeunrais": [13, 22, 23, 27, 57, 75, 483], "pend": [13, 22, 23, 27, 33, 39, 75, 112, 126, 133, 139, 166, 258, 271, 281, 305, 328, 333, 340, 341, 430, 475, 477, 479, 482, 483], "save": [13, 22, 23, 27, 33, 42, 63, 68, 72, 73, 75, 85, 93, 94, 95, 100, 101, 102, 106, 120, 139, 140, 149, 151, 152, 155, 167, 169, 177, 183, 200, 209, 226, 243, 247, 261, 266, 269, 270, 271, 292, 293, 299, 308, 313, 319, 320, 334, 340, 352, 362, 365, 366, 368, 369, 381, 384, 400, 405, 419, 425, 427, 428, 464, 466, 467, 468, 469, 470, 471, 474, 475, 477, 480, 482, 483], "restor": [13, 17, 22, 23, 27, 33, 63, 75, 92, 102, 132, 158, 169, 170, 171, 177, 186, 190, 191, 243, 247, 255, 258, 266, 292, 299, 301, 319, 320, 324, 340, 348, 352, 358, 361, 362, 365, 376, 383, 384, 388, 390, 400, 405, 428, 462, 464, 465, 467, 468, 474, 477, 480, 482, 483], "evalu": [13, 22, 33, 52, 56, 66, 68, 73, 85, 94, 95, 96, 113, 122, 144, 167, 225, 230, 261, 267, 268, 275, 283, 293, 297, 323, 324, 344, 352, 365, 369, 386, 394, 402, 427, 428, 433, 435, 436, 446, 449, 456, 462, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 477, 481, 482, 483], "extern": [13, 35, 51, 68, 73, 79, 84, 85, 93, 100, 102, 118, 121, 151, 158, 167, 176, 184, 197, 216, 247, 250, 255, 257, 267, 272, 293, 298, 311, 314, 338, 344, 347, 348, 358, 362, 365, 369, 384, 388, 408, 409, 410, 412, 413, 414, 415, 416, 422, 428, 430, 461, 468, 470, 471, 475, 478, 479, 480, 481, 482, 483], "compil": [13, 31, 33, 34, 42, 45, 58, 59, 63, 66, 68, 74, 76, 77, 79, 84, 85, 86, 95, 96, 102, 109, 112, 113, 122, 142, 157, 167, 176, 180, 182, 184, 191, 193, 213, 220, 225, 230, 235, 242, 247, 248, 250, 252, 254, 255, 264, 268, 270, 274, 308, 311, 314, 319, 320, 324, 331, 340, 341, 344, 345, 347, 351, 352, 355, 359, 362, 381, 385, 386, 387, 388, 400, 410, 422, 426, 428, 429, 432, 434, 435, 436, 440, 450, 455, 458, 461, 462, 463, 464, 465, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483], "attach": [13, 33, 45, 72, 100, 101, 102, 120, 126, 132, 183, 193, 194, 196, 197, 199, 203, 205, 206, 207, 212, 247, 267, 268, 284, 328, 329, 340, 352, 369, 375, 381, 388, 390, 407, 425, 426, 427, 428, 436, 463, 465, 469, 470, 476, 479, 481, 483], "unstabl": [13, 28, 75, 112, 186, 474, 481, 483], "tier": [13, 473, 474, 483], "warn": [13, 27, 32, 33, 34, 58, 59, 68, 76, 85, 96, 101, 102, 103, 112, 118, 125, 126, 135, 139, 181, 182, 187, 188, 213, 250, 254, 268, 269, 272, 283, 293, 308, 311, 315, 319, 333, 339, 340, 348, 352, 358, 369, 373, 384, 386, 388, 397, 407, 414, 415, 416, 428, 429, 432, 435, 450, 451, 452, 455, 456, 462, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 477, 478, 481, 482, 483, 484], "pyunstable_eval_requestcodeextraindex": [13, 474], "freefunc": [13, 45, 63, 75], "adding": [13, 22, 33, 47, 61, 68, 73, 74, 77, 84, 85, 92, 93, 95, 100, 106, 110, 141, 151, 181, 186, 195, 196, 197, 205, 206, 207, 243, 247, 262, 267, 271, 293, 319, 340, 344, 365, 376, 386, 388, 395, 402, 413, 422, 423, 428, 430, 432, 435, 436, 455, 461, 462, 464, 465, 466, 467, 468, 470, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484], "pycode_getextra": 13, "pycode_setextra": 13, "py_decref": [13, 22, 23, 28, 35, 36, 45, 52, 57, 63, 72, 73, 75, 76, 79, 87, 100, 472, 474, 481, 483], "_pyeval_requestcodeextraindex": [13, 474], "privat": [13, 32, 33, 42, 43, 57, 68, 85, 93, 94, 95, 176, 181, 190, 223, 225, 247, 248, 250, 259, 278, 283, 299, 305, 335, 341, 346, 348, 362, 386, 430, 435, 436, 440, 461, 463, 464, 465, 468, 474, 475, 476, 477, 478, 479, 481, 483], "pyunstable_code_getextra": [13, 474], "_pycode_getextra": [13, 474, 483], "pyunstable_code_setextra": [13, 474], "_pycode_setextra": [13, 474, 483], "pycodec_regist": [14, 57], "search_funct": [14, 158], "pycodec_unregist": [14, 57, 472, 483], "registri": [14, 23, 34, 64, 68, 145, 167, 175, 195, 197, 203, 226, 250, 254, 259, 269, 276, 299, 303, 341, 352, 354, 386, 395, 400, 404, 406, 413, 458, 462, 468, 469, 479, 482, 483], "pycodec_knownencod": [14, 57], "pycodec_encod": [14, 57, 474], "lookuperror": [14, 23, 64, 158, 170, 213, 344, 450, 477], "pycodec_decod": [14, 57, 474], "keyerror": [14, 22, 23, 35, 55, 78, 85, 160, 167, 170, 184, 196, 197, 205, 211, 213, 233, 236, 243, 250, 261, 271, 296, 310, 328, 329, 330, 339, 344, 345, 355, 358, 385, 386, 387, 389, 390, 422, 425, 428, 432, 450, 452, 465, 466, 469, 476, 479, 481, 483], "pycodec_incrementalencod": [14, 57], "incrementalencod": [14, 68, 145, 467], "pycodec_incrementaldecod": [14, 57], "incrementaldecod": [14, 68, 145, 258, 467], "pycodec_streamread": [14, 57], "stream": [14, 33, 34, 41, 68, 84, 87, 95, 101, 107, 109, 118, 126, 136, 137, 139, 145, 146, 149, 157, 169, 177, 194, 200, 201, 206, 207, 212, 213, 219, 225, 229, 234, 242, 245, 247, 249, 252, 254, 261, 262, 267, 268, 269, 270, 276, 281, 293, 298, 307, 308, 314, 328, 329, 331, 332, 333, 334, 336, 337, 338, 348, 349, 352, 358, 362, 378, 386, 388, 395, 399, 408, 412, 413, 416, 417, 419, 422, 428, 430, 434, 435, 455, 462, 466, 467, 468, 469, 470, 475, 476, 477, 478, 479, 480, 481, 483], "streamread": [14, 68, 124, 126, 137, 145, 466, 467, 478, 479, 483], "pycodec_streamwrit": [14, 57], "streamwrit": [14, 68, 124, 126, 137, 145, 467, 473, 480, 483], "pycodec_registererror": [14, 57], "unicodeencodeerror": [14, 23, 45, 71, 109, 158, 213, 352, 394, 450, 473, 475, 481, 483], "unicodedecodeerror": [14, 23, 109, 158, 213, 293, 394, 450, 467, 470, 475, 477, 481, 483], "unicodetranslateerror": [14, 23, 158, 213, 450, 483], "pycodec_lookuperror": [14, 57], "strict": [14, 34, 63, 64, 73, 94, 95, 99, 102, 109, 120, 133, 143, 158, 167, 175, 176, 181, 183, 186, 202, 207, 208, 211, 218, 225, 240, 242, 243, 244, 248, 252, 255, 258, 259, 261, 262, 275, 276, 293, 294, 295, 296, 299, 341, 344, 352, 362, 366, 394, 395, 410, 426, 427, 428, 429, 430, 432, 435, 456, 462, 463, 465, 467, 468, 469, 472, 474, 475, 476, 477, 478, 480, 483], "pycodec_stricterror": [14, 57], "exc": [14, 23, 33, 47, 112, 122, 133, 139, 166, 169, 213, 381, 388, 390, 428, 436, 443, 468, 470, 472, 474, 476, 483], "pycodec_ignoreerror": [14, 57], "pycodec_replaceerror": [14, 57], "fffd": [14, 109, 158, 462, 483], "pycodec_xmlcharrefreplaceerror": [14, 57], "xml": [14, 68, 80, 95, 106, 109, 158, 225, 254, 256, 258, 273, 304, 327, 395, 418, 451, 452, 461, 463, 464, 465, 466, 467, 468, 469, 473, 475, 483, 484], "pycodec_backslashreplaceerror": [14, 57], "pycodec_namereplaceerror": [14, 57, 478], "derefer": [15, 57, 283, 358, 483], "real": [15, 47, 59, 68, 72, 76, 85, 87, 93, 102, 103, 110, 144, 153, 154, 157, 169, 176, 191, 193, 200, 205, 213, 225, 226, 248, 250, 262, 288, 289, 293, 308, 319, 322, 324, 331, 333, 334, 340, 341, 343, 344, 345, 352, 353, 354, 366, 369, 388, 389, 390, 413, 427, 431, 435, 440, 461, 467, 468, 469, 474, 475, 476, 479, 483], "_py_c_sum": 15, "_py_c_diff": 15, "_py_c_neg": 15, "num": [15, 102, 122, 158, 177, 186, 226, 230, 240, 248, 283, 292, 300, 341, 345, 386, 441, 442, 468, 469, 474, 481, 483], "_py_c_prod": 15, "_py_c_quot": 15, "dividend": [15, 186], "divisor": [15, 186, 275, 449], "errno": [15, 18, 23, 35, 51, 68, 73, 84, 118, 133, 142, 176, 188, 213, 215, 250, 254, 293, 314, 328, 333, 337, 341, 352, 362, 443, 468, 473, 476, 478, 480, 483], "edom": [15, 212], "_py_c_pow": 15, "exp": [15, 154, 186, 225, 275, 318, 345, 468, 469, 476, 483], "pycomplexobject": 15, "pycomplex_typ": [15, 57], "pycomplex_check": 15, "pycomplex_checkexact": 15, "pycomplex_fromccomplex": 15, "pycomplex_fromdoubl": [15, 57], "pycomplex_realasdoubl": [15, 57], "pycomplex_imagasdoubl": [15, 57], "pycomplex_asccomplex": [15, 468], "__complex__": [15, 154, 225, 262, 386, 389, 428, 468, 473, 477, 480, 481, 483], "__float__": [15, 25, 63, 154, 225, 386, 389, 428, 472, 480, 481, 483], "__index__": [15, 25, 39, 63, 68, 225, 291, 344, 347, 386, 389, 428, 468, 469, 470, 472, 473, 477, 480, 481, 483, 484], "pydict_check": [16, 22], "tree": [16, 33, 34, 63, 68, 78, 84, 85, 95, 112, 151, 163, 174, 190, 194, 196, 204, 205, 207, 216, 236, 247, 254, 264, 273, 293, 311, 312, 332, 342, 344, 352, 357, 369, 375, 376, 384, 399, 410, 411, 428, 431, 452, 455, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 476, 478, 479, 481, 482, 483], "singleton": [16, 20, 33, 45, 46, 49, 56, 58, 63, 73, 85, 87, 94, 102, 122, 183, 274, 299, 344, 389, 419, 427, 428, 430, 441, 442, 456, 463, 473, 479, 480, 483], "heap": [16, 32, 35, 42, 50, 58, 68, 73, 75, 76, 182, 214, 254, 282, 322, 384, 452, 465, 466, 468, 469, 472, 473, 474, 481, 482, 483], "pack": [16, 68, 102, 141, 145, 176, 215, 225, 234, 247, 254, 259, 268, 269, 271, 293, 303, 337, 344, 369, 374, 376, 408, 421, 428, 442, 452, 467, 469, 473, 475, 483], "unpack": [16, 68, 73, 84, 95, 102, 112, 122, 160, 191, 200, 215, 225, 283, 304, 332, 337, 344, 345, 347, 385, 386, 427, 430, 431, 436, 442, 443, 445, 452, 462, 466, 467, 468, 470, 472, 473, 474, 475, 477, 481, 483], "properti": [16, 58, 63, 68, 87, 94, 95, 99, 101, 103, 106, 116, 122, 158, 160, 170, 176, 177, 181, 186, 193, 195, 196, 203, 205, 208, 211, 221, 225, 226, 230, 235, 236, 241, 251, 255, 257, 259, 262, 266, 271, 281, 283, 304, 331, 335, 341, 344, 346, 347, 352, 365, 378, 382, 384, 385, 386, 387, 388, 389, 395, 402, 405, 410, 411, 414, 415, 416, 426, 427, 428, 435, 436, 440, 450, 461, 462, 464, 465, 466, 467, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483], "codec": [16, 34, 68, 87, 109, 145, 195, 201, 202, 213, 225, 254, 258, 293, 335, 344, 363, 422, 448, 451, 461, 462, 464, 466, 467, 470, 473, 478, 479, 481, 482, 483, 484], "escap": [16, 42, 49, 59, 68, 73, 78, 85, 92, 102, 106, 109, 120, 126, 137, 158, 167, 175, 177, 178, 190, 208, 225, 231, 238, 247, 250, 258, 262, 288, 319, 321, 331, 344, 345, 348, 366, 384, 386, 394, 417, 419, 428, 435, 449, 462, 463, 466, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "latin": [16, 68, 106, 109, 120, 136, 158, 195, 223, 239, 319, 331, 340, 358, 387, 430, 464, 465, 468, 471, 475, 478, 479, 480, 482, 483], "ascii": [16, 23, 31, 34, 42, 49, 58, 68, 71, 92, 101, 102, 106, 107, 109, 110, 118, 120, 122, 133, 137, 143, 145, 151, 158, 176, 177, 183, 191, 195, 196, 197, 200, 201, 202, 203, 205, 206, 207, 208, 209, 214, 225, 230, 237, 248, 254, 256, 258, 262, 266, 272, 282, 285, 286, 288, 293, 299, 314, 317, 319, 331, 335, 338, 340, 341, 344, 345, 346, 349, 358, 359, 362, 395, 397, 413, 419, 422, 426, 434, 435, 441, 446, 448, 450, 455, 462, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483], "mbcs": [16, 33, 34, 68, 145, 352, 455, 461, 464, 465, 475, 476, 479, 483], "window": [16, 23, 33, 34, 35, 42, 57, 59, 63, 66, 68, 71, 73, 74, 78, 80, 81, 82, 83, 84, 85, 87, 101, 102, 107, 109, 110, 111, 115, 118, 120, 126, 132, 133, 137, 145, 151, 155, 164, 166, 167, 176, 179, 213, 214, 222, 225, 229, 231, 243, 250, 254, 258, 261, 266, 269, 272, 275, 276, 278, 281, 282, 283, 292, 293, 294, 296, 306, 316, 328, 329, 331, 332, 333, 334, 335, 337, 340, 341, 342, 352, 354, 355, 358, 360, 361, 362, 365, 366, 368, 371, 373, 375, 376, 378, 388, 395, 397, 399, 403, 407, 421, 422, 425, 426, 428, 435, 438, 439, 441, 446, 448, 450, 453, 455, 456, 458, 462, 463, 464, 466, 467, 470, 471, 472, 474, 475, 477, 478, 481, 482, 484], "cell": [16, 27, 66, 68, 85, 92, 93, 118, 176, 191, 226, 254, 255, 376, 385, 428, 468, 473, 483], "phase": [16, 32, 33, 68, 71, 73, 100, 138, 154, 227, 250, 341, 376, 431, 432, 436, 468, 472, 475, 476, 483], "lookup": [16, 17, 22, 31, 61, 63, 68, 77, 85, 87, 94, 147, 158, 160, 181, 191, 195, 203, 213, 225, 226, 230, 245, 255, 259, 269, 287, 293, 344, 345, 351, 352, 369, 376, 381, 387, 425, 427, 432, 462, 464, 466, 467, 468, 474, 475, 476, 477, 479, 481, 482, 483], "descriptor": [16, 23, 24, 31, 33, 49, 61, 63, 68, 75, 78, 81, 84, 87, 94, 97, 98, 116, 118, 125, 130, 131, 132, 133, 149, 176, 177, 185, 187, 212, 215, 218, 225, 226, 235, 248, 255, 257, 258, 268, 278, 282, 283, 295, 309, 312, 315, 322, 328, 329, 332, 333, 337, 338, 341, 344, 348, 358, 359, 361, 362, 369, 385, 389, 427, 430, 436, 466, 467, 468, 469, 472, 473, 474, 475, 476, 478, 480, 482, 483], "ellipsi": [16, 63, 68, 87, 122, 168, 193, 274, 299, 307, 377, 378, 385, 386, 431, 435, 450, 466, 470, 474, 481, 483], "capsul": [16, 68, 73, 95, 470, 483], "generat": [16, 26, 31, 33, 49, 51, 58, 64, 66, 68, 71, 72, 73, 75, 77, 79, 85, 87, 98, 101, 102, 103, 109, 112, 113, 120, 122, 126, 130, 134, 135, 137, 139, 141, 142, 143, 144, 151, 155, 158, 161, 163, 166, 169, 173, 177, 181, 183, 187, 190, 191, 193, 194, 196, 203, 205, 208, 209, 213, 217, 223, 225, 226, 227, 230, 235, 242, 244, 245, 248, 254, 261, 267, 269, 271, 281, 283, 285, 293, 299, 307, 311, 314, 315, 318, 321, 323, 326, 331, 335, 340, 341, 343, 346, 348, 352, 353, 358, 362, 366, 369, 376, 377, 378, 380, 381, 384, 385, 386, 388, 390, 394, 395, 398, 402, 410, 413, 417, 419, 420, 421, 426, 427, 429, 431, 432, 434, 435, 436, 445, 455, 456, 461, 462, 463, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484], "coroutin": [16, 26, 68, 87, 95, 123, 124, 125, 126, 128, 129, 130, 133, 134, 135, 136, 137, 138, 161, 169, 182, 186, 188, 191, 213, 315, 344, 352, 353, 386, 388, 389, 430, 456, 467, 473, 474, 479, 480, 481, 482, 483], "datetim": [16, 68, 85, 94, 102, 126, 133, 137, 139, 150, 182, 190, 203, 209, 211, 248, 254, 269, 288, 299, 304, 340, 341, 345, 366, 379, 385, 390, 419, 420, 425, 435, 451, 465, 466, 467, 468, 469, 472, 474, 478, 483], "pycontext": 17, "pycontextvar": [17, 483], "pycontexttoken": 17, "pycontext_new": 17, "bpo": [17, 35, 183, 188, 226, 267, 269, 283, 293, 302, 332, 386, 467, 468, 469, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483], "34762": [17, 480, 483], "public": [17, 26, 28, 33, 34, 55, 63, 68, 84, 93, 103, 107, 110, 126, 155, 175, 176, 190, 204, 222, 223, 235, 240, 243, 250, 251, 255, 259, 264, 282, 283, 292, 314, 331, 337, 341, 352, 358, 362, 364, 386, 387, 388, 395, 408, 410, 413, 416, 426, 435, 436, 440, 462, 463, 465, 466, 468, 469, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "contextvar": [17, 68, 87, 126, 129, 135, 139, 164, 186, 254, 456, 483], "token": [17, 66, 68, 84, 116, 122, 156, 170, 174, 250, 254, 264, 265, 281, 282, 286, 304, 314, 318, 331, 348, 357, 363, 395, 409, 427, 431, 433, 434, 443, 447, 469, 470, 475, 479, 480, 483], "pycontext_typ": 17, "pycontextvar_typ": 17, "pycontexttoken_typ": 17, "pycontext_checkexact": 17, "pycontextvar_checkexact": 17, "pycontexttoken_checkexact": 17, "pycontext_copi": 17, "ctx": [17, 23, 42, 102, 122, 170, 186, 283, 341, 468], "shallow": [17, 33, 68, 160, 170, 181, 182, 193, 216, 244, 254, 255, 299, 344, 358, 385, 442, 483], "pycontext_copycurr": 17, "pycontext_ent": 17, "pycontext_exit": 17, "deactiv": [17, 352, 369, 399, 428, 453, 461, 474, 483], "pycontextvar_new": 17, "introspect": [17, 68, 75, 85, 87, 93, 96, 170, 187, 191, 226, 250, 299, 315, 340, 369, 385, 389, 419, 420, 428, 432, 470, 472, 473, 474, 475, 476, 477, 478, 483], "debug": [17, 32, 33, 34, 49, 63, 66, 68, 75, 76, 92, 97, 101, 102, 125, 135, 144, 152, 170, 176, 186, 187, 188, 191, 196, 204, 205, 211, 213, 242, 248, 267, 268, 269, 279, 288, 292, 293, 297, 301, 303, 305, 319, 331, 335, 340, 341, 344, 352, 358, 359, 362, 368, 369, 375, 382, 386, 388, 400, 413, 419, 422, 428, 429, 435, 436, 446, 452, 455, 457, 458, 461, 462, 463, 464, 465, 467, 468, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483], "pycontextvar_get": 17, "var": [17, 78, 85, 87, 88, 93, 94, 102, 120, 122, 160, 167, 170, 225, 269, 344, 355, 360, 386, 389, 431, 441, 446, 450, 466, 467, 468, 469, 470, 472, 475, 483], "default_valu": 17, "dure": [17, 22, 23, 28, 33, 34, 45, 51, 58, 63, 64, 68, 77, 85, 87, 93, 94, 102, 133, 139, 140, 151, 158, 167, 176, 177, 181, 183, 186, 191, 193, 198, 201, 202, 203, 208, 211, 213, 218, 226, 235, 250, 251, 262, 267, 268, 269, 270, 271, 281, 288, 293, 299, 308, 313, 314, 319, 320, 323, 332, 333, 334, 335, 340, 341, 343, 344, 352, 353, 361, 362, 366, 376, 380, 382, 384, 385, 386, 388, 400, 402, 413, 414, 415, 416, 422, 425, 427, 428, 430, 432, 435, 436, 443, 455, 461, 462, 465, 466, 467, 468, 469, 471, 474, 476, 477, 478, 479, 480, 481, 482, 483], "pycontextvar_set": 17, "pycontextvar_reset": 17, "reset": [17, 33, 59, 85, 94, 95, 110, 138, 144, 155, 157, 158, 160, 170, 177, 186, 190, 198, 206, 212, 213, 214, 218, 240, 245, 247, 250, 267, 283, 293, 295, 301, 326, 328, 333, 337, 341, 344, 356, 358, 362, 365, 366, 375, 380, 384, 388, 400, 408, 412, 413, 416, 425, 427, 435, 464, 468, 475, 476, 477, 478, 483], "pyos_snprintf": [18, 57, 464], "unix": [18, 23, 33, 34, 35, 59, 66, 68, 73, 74, 80, 81, 83, 87, 92, 95, 96, 101, 107, 109, 115, 118, 120, 124, 130, 131, 132, 133, 136, 137, 146, 150, 160, 167, 174, 175, 177, 190, 196, 199, 201, 208, 215, 219, 225, 228, 229, 230, 233, 243, 247, 254, 257, 258, 261, 266, 269, 271, 272, 278, 283, 286, 287, 288, 292, 293, 294, 295, 296, 298, 301, 305, 306, 309, 310, 313, 322, 323, 328, 329, 330, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 348, 350, 352, 354, 355, 358, 360, 361, 362, 365, 366, 369, 375, 383, 388, 403, 407, 421, 422, 435, 438, 439, 446, 448, 453, 454, 455, 456, 458, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 483], "snprintf": [18, 464, 472, 483], "pyos_vsnprintf": [18, 57, 464], "va": [18, 426], "vsnprintf": [18, 464, 472, 483], "corner": [18, 63, 92, 177, 384, 464, 467, 468, 473, 483], "int_max": [18, 483], "c99": [18, 35, 63, 76, 154, 176, 275, 344, 347, 352, 444, 456, 468, 472, 475, 479, 483], "rv": [18, 35, 215], "pyos_strtoul": [18, 57], "36": [18, 39, 101, 104, 109, 225, 261, 271, 283, 318, 322, 343, 345, 366, 442, 446, 449, 451, 452, 453, 472, 475, 477, 481, 482, 483], "inclus": [18, 34, 39, 42, 120, 160, 183, 212, 259, 265, 267, 270, 293, 308, 318, 319, 331, 343, 353, 382, 413, 426, 428, 430, 434, 436, 455, 469, 475, 480, 483], "white": [18, 92, 94, 106, 177, 178, 199, 211, 247, 348, 376, 384, 395, 426, 434, 452, 477, 482, 483], "look": [18, 28, 33, 42, 45, 49, 51, 63, 64, 72, 73, 75, 76, 77, 79, 84, 85, 87, 92, 93, 94, 95, 96, 101, 102, 103, 105, 106, 109, 110, 112, 120, 126, 139, 141, 143, 151, 158, 167, 169, 176, 177, 180, 181, 183, 186, 189, 190, 191, 193, 196, 197, 199, 203, 205, 213, 225, 226, 230, 234, 243, 245, 247, 250, 251, 259, 265, 267, 268, 269, 271, 292, 293, 295, 302, 308, 313, 319, 324, 332, 338, 340, 344, 345, 348, 352, 354, 355, 362, 369, 376, 378, 381, 382, 385, 386, 387, 388, 389, 390, 395, 402, 410, 413, 423, 425, 427, 428, 429, 430, 432, 435, 436, 443, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 479, 481, 483], "0b": [18, 47, 225, 292, 344, 345, 468, 475], "0o": [18, 47, 85, 225, 344, 345, 468, 475], "absent": [18, 120, 177, 268, 297, 337, 395, 475, 483], "scan": [18, 85, 93, 95, 101, 106, 158, 177, 193, 228, 230, 245, 293, 296, 319, 328, 369, 386, 428, 429, 455, 464, 465, 467, 469, 475, 478, 483], "out": [18, 23, 31, 34, 35, 39, 42, 56, 59, 60, 64, 68, 72, 73, 76, 85, 92, 94, 95, 96, 99, 101, 102, 103, 106, 109, 110, 120, 133, 134, 139, 140, 141, 144, 149, 158, 161, 163, 167, 176, 177, 178, 183, 184, 186, 190, 191, 193, 195, 196, 203, 205, 212, 213, 215, 226, 230, 235, 243, 247, 250, 251, 253, 258, 259, 261, 266, 267, 275, 283, 292, 293, 295, 297, 298, 300, 304, 308, 311, 313, 314, 319, 322, 328, 331, 333, 337, 338, 340, 341, 343, 344, 345, 347, 348, 352, 358, 362, 365, 369, 381, 384, 385, 386, 388, 389, 390, 394, 399, 400, 407, 410, 413, 417, 419, 423, 425, 426, 427, 428, 429, 436, 441, 442, 449, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 483], "erang": [18, 212], "ulong_max": [18, 39], "perform": [18, 23, 28, 33, 39, 42, 59, 60, 63, 64, 68, 72, 75, 92, 95, 101, 102, 109, 112, 118, 120, 126, 133, 139, 158, 161, 163, 167, 169, 177, 181, 183, 186, 188, 191, 193, 199, 206, 209, 211, 215, 220, 225, 226, 227, 242, 243, 245, 247, 248, 249, 250, 252, 259, 261, 262, 266, 267, 268, 269, 272, 283, 288, 293, 298, 305, 308, 314, 319, 321, 331, 332, 333, 334, 336, 337, 338, 340, 341, 344, 348, 352, 353, 355, 365, 366, 371, 378, 384, 386, 388, 394, 395, 399, 405, 415, 419, 420, 426, 428, 430, 432, 435, 436, 455, 458, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "strtoul": 18, "pyos_strtol": [18, 57], "strtol": 18, "pyos_string_to_doubl": [18, 57, 469, 471], "endptr": 18, "overflow_except": 18, "1e500": 18, "py_huge_v": 18, "pyos_double_to_str": [18, 57], "val": [18, 22, 23, 73, 95, 116, 167, 190, 191, 196, 205, 223, 244, 266, 297, 340, 344, 386, 390, 395, 428, 467, 474, 483], "format_cod": 18, "ptype": [18, 23, 303, 483], "repr": [18, 23, 24, 49, 63, 64, 68, 75, 94, 96, 102, 108, 109, 112, 139, 176, 181, 182, 183, 191, 193, 211, 225, 242, 247, 254, 283, 314, 329, 337, 344, 345, 352, 362, 364, 378, 381, 385, 386, 389, 390, 425, 427, 428, 435, 436, 444, 446, 450, 452, 462, 463, 465, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 483], "py_dtsf_sign": 18, "py_dtsf_add_dot_0": 18, "py_dtsf_alt": 18, "py_dtst_finit": 18, "py_dtst_infinit": 18, "py_dtst_nan": 18, "pyos_stricmp": [18, 468], "s1": [18, 109, 161, 190, 266, 337, 465], "s2": [18, 109, 161, 190, 266, 337, 465], "pyos_strnicmp": [18, 468], "strncmp": 18, "async": [19, 23, 26, 32, 50, 68, 87, 102, 123, 124, 125, 126, 129, 133, 134, 135, 136, 137, 138, 139, 169, 170, 191, 225, 226, 255, 264, 312, 341, 377, 385, 386, 388, 389, 390, 428, 430, 431, 435, 472, 473, 474, 479, 480, 481, 482, 483], "pycoroobject": 19, "pycoro_typ": 19, "pycoro_checkexact": 19, "pycoro_new": 19, "pyframeobject": [19, 26, 29, 33, 53, 57, 66, 96, 473, 477, 483], "__name__": [19, 29, 45, 61, 63, 68, 84, 85, 87, 93, 94, 96, 101, 102, 103, 104, 126, 144, 155, 157, 166, 183, 188, 190, 193, 197, 200, 211, 225, 226, 228, 250, 255, 267, 283, 289, 292, 296, 297, 299, 302, 313, 315, 321, 323, 324, 333, 338, 342, 344, 362, 365, 367, 385, 386, 388, 399, 400, 402, 407, 420, 428, 432, 450, 464, 465, 468, 470, 472, 474, 476, 477, 478, 479, 481, 482, 483], "__qualname__": [19, 27, 29, 61, 87, 93, 94, 197, 211, 225, 226, 255, 344, 428, 429, 472, 476, 478, 483], "pydatetime_import": 20, "pydatetimeapi": 20, "pydatetime_d": 20, "date": [20, 33, 68, 72, 85, 94, 102, 133, 137, 139, 150, 163, 182, 193, 199, 203, 208, 209, 211, 243, 245, 266, 267, 269, 271, 288, 291, 293, 299, 311, 339, 340, 341, 344, 358, 366, 369, 379, 386, 390, 419, 420, 422, 423, 426, 432, 435, 451, 452, 461, 462, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "pydatetime_datetim": 20, "pydatetime_tim": 20, "pydatetime_delta": 20, "pydatetime_datetyp": 20, "pydatetime_datetimetyp": 20, "pydatetime_timetyp": 20, "pydatetime_deltatyp": 20, "timedelta": [20, 68, 94, 182, 288, 385, 425, 465, 469, 475, 476, 480, 481, 482, 483], "pydatetime_tzinfotyp": 20, "zone": [20, 183, 209, 259, 337, 366, 425, 426, 456, 465, 467, 469, 482, 483], "info": [20, 23, 63, 68, 73, 84, 93, 96, 101, 102, 120, 125, 137, 152, 158, 169, 183, 191, 225, 227, 230, 242, 243, 251, 255, 267, 268, 269, 271, 283, 288, 302, 303, 307, 332, 349, 358, 369, 373, 384, 386, 388, 395, 421, 422, 430, 452, 459, 463, 465, 467, 468, 469, 474, 475, 477, 481, 483], "tzinfo": [20, 68, 182, 209, 379, 425, 465, 472, 473, 475, 476, 479, 480, 482, 483], "utc": [20, 68, 183, 190, 203, 209, 269, 340, 341, 366, 425, 451, 468, 473, 474, 475, 478, 479, 480, 483], "pydatetime_timezone_utc": [20, 480], "timezon": [20, 68, 102, 118, 182, 190, 203, 209, 340, 362, 379, 425, 451, 473, 474, 475, 476, 478, 479, 480, 483], "pydate_check": 20, "pydate_checkexact": 20, "pydatetime_check": 20, "pydatetime_checkexact": 20, "pytime_check": 20, "pytime_checkexact": 20, "pydelta_check": 20, "pydelta_checkexact": 20, "pytzinfo_check": 20, "pytzinfo_checkexact": 20, "pydate_fromd": 20, "year": [20, 85, 93, 106, 150, 183, 193, 262, 340, 343, 366, 386, 413, 422, 435, 446, 461, 463, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 481, 482, 483], "month": [20, 85, 150, 183, 266, 366, 422, 435, 462, 463, 465, 469, 474, 483], "day": [20, 73, 84, 85, 94, 106, 126, 150, 167, 183, 226, 244, 262, 266, 269, 275, 288, 293, 339, 341, 343, 366, 385, 422, 425, 432, 435, 451, 462, 465, 467, 468, 469, 474, 477, 479, 481, 482, 483], "pydatetime_fromdateandtim": 20, "hour": [20, 85, 106, 126, 133, 139, 183, 209, 269, 271, 366, 422, 425, 435, 465, 479], "minut": [20, 109, 135, 183, 269, 293, 366, 422, 435, 456, 465, 480, 483], "usecond": 20, "pydatetime_fromdateandtimeandfold": [20, 483], "fold": [20, 183, 201, 202, 203, 208, 250, 344, 346, 425, 426, 466, 467, 479, 480, 483], "pytime_fromtim": 20, "pytime_fromtimeandfold": 20, "pydelta_fromdsu": 20, "pytimezone_fromoffset": [20, 480], "pytimezone_fromoffsetandnam": [20, 480], "tzname": [20, 183, 366, 425, 479, 482, 483], "pydatetime_get_year": 20, "pydatetime_get_month": 20, "pydatetime_get_day": 20, "31": [20, 93, 106, 150, 173, 176, 178, 183, 211, 234, 259, 262, 318, 319, 343, 344, 352, 366, 419, 422, 424, 425, 435, 451, 465, 467, 468, 475, 480, 481, 482, 483], "pydatetime_date_get_hour": 20, "23": [20, 94, 96, 98, 102, 109, 150, 183, 186, 209, 225, 226, 236, 259, 261, 267, 283, 319, 332, 337, 344, 348, 359, 366, 367, 464, 465, 473, 475, 477, 478, 479, 481, 482, 483], "pydatetime_date_get_minut": 20, "59": [20, 89, 102, 183, 261, 319, 366, 382, 453, 475, 483], "pydatetime_date_get_second": 20, "pydatetime_date_get_microsecond": 20, "999999": [20, 183, 186, 366, 476], "pydatetime_date_get_fold": 20, "pydatetime_date_get_tzinfo": [20, 472, 483], "pydatetime_time_get_hour": 20, "pydatetime_time_get_minut": 20, "pydatetime_time_get_second": 20, "pydatetime_time_get_microsecond": 20, "pydatetime_time_get_fold": 20, "pydatetime_time_get_tzinfo": [20, 472, 483], "delta": [20, 68, 109, 141, 183, 191, 254, 270, 363, 388, 464, 466, 469, 479, 481, 483], "pydatetime_delta_get_day": 20, "999999999": [20, 183], "pydatetime_delta_get_second": 20, "86399": [20, 183], "pydatetime_delta_get_microsecond": 20, "db": [20, 68, 93, 175, 184, 225, 254, 261, 281, 298, 330, 451, 456, 467, 468, 470, 473, 483], "pydatetime_fromtimestamp": 20, "fromtimestamp": [20, 102, 183, 190, 340, 474, 480, 483], "pydate_fromtimestamp": [20, 483], "pyproperty_typ": [21, 57, 93], "pydescr_newgetset": [21, 57], "pygetsetdef": [21, 57, 58, 63, 75, 76, 100, 255, 385, 480, 483], "getset": [21, 63, 255], "pydescr_newmemb": [21, 57], "pymemberdef": [21, 57, 58, 61, 63, 75, 76, 93, 255, 385, 469, 474, 480, 483], "meth": [21, 44, 63, 78, 85, 87, 112, 386, 463, 466, 473, 476], "pydescr_newmethod": [21, 57, 483], "pymethoddef": [21, 35, 45, 57, 58, 62, 63, 72, 73, 75, 76, 100, 465, 483], "pydescr_newwrapp": 21, "wrapperbas": [21, 480, 483], "pydescr_newclassmethod": [21, 57], "pydescr_isdata": [21, 483], "descr": [21, 93, 176], "pywrapper_new": [21, 57], "pydictobject": [22, 55, 96, 474, 483], "pydict_typ": [22, 57], "pydict_checkexact": 22, "pydict_new": [22, 57], "pydictproxy_new": [22, 57], "mappingproxytyp": [22, 181, 225, 344, 385, 427, 472, 474, 476, 483], "enforc": [22, 94, 186, 196, 205, 225, 243, 293, 322, 342, 344, 384, 386, 410, 411, 413, 427, 430, 436, 455, 463, 464, 467, 470, 475, 476, 483], "behavior": [22, 23, 27, 28, 33, 34, 42, 58, 61, 63, 68, 73, 79, 85, 92, 93, 94, 100, 101, 102, 119, 120, 126, 132, 139, 149, 157, 167, 173, 176, 177, 181, 183, 186, 190, 193, 194, 196, 201, 203, 205, 206, 208, 213, 215, 218, 225, 234, 242, 245, 247, 250, 255, 257, 261, 262, 266, 267, 269, 270, 271, 275, 276, 283, 288, 292, 293, 299, 302, 309, 314, 328, 331, 332, 333, 334, 335, 337, 338, 341, 343, 344, 345, 347, 348, 352, 358, 362, 365, 366, 369, 374, 376, 378, 381, 383, 386, 388, 394, 395, 400, 410, 425, 427, 428, 429, 430, 432, 435, 436, 455, 456, 461, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 482, 483, 484], "modif": [22, 27, 34, 61, 64, 66, 73, 94, 102, 103, 112, 169, 190, 216, 234, 245, 248, 250, 266, 269, 271, 278, 283, 292, 293, 324, 332, 334, 338, 342, 352, 358, 362, 376, 410, 413, 422, 426, 428, 461, 467, 469, 475, 476, 477, 478, 479, 481, 483], "pydict_clear": [22, 57], "pydict_contain": [22, 57, 466], "pydict_copi": [22, 57], "pydict_setitem": [22, 57, 63, 73, 483], "insert": [22, 31, 33, 34, 38, 60, 68, 72, 73, 80, 95, 109, 112, 120, 121, 126, 143, 146, 147, 151, 160, 161, 167, 177, 181, 190, 193, 208, 225, 226, 247, 250, 258, 267, 270, 281, 284, 292, 297, 299, 307, 320, 340, 344, 345, 347, 352, 376, 385, 400, 402, 410, 413, 423, 428, 430, 432, 436, 440, 442, 455, 460, 462, 465, 467, 468, 469, 471, 474, 476, 477, 478, 479, 480, 481, 483], "hashabl": [22, 49, 63, 85, 87, 116, 161, 183, 190, 221, 225, 226, 232, 255, 259, 296, 318, 344, 386, 402, 428, 430, 465, 466, 468, 469, 473, 474, 476, 478, 482, 483], "steal": [22, 23, 33, 35, 45, 49, 54, 60, 483], "pydict_setitemstr": [22, 57, 483], "pydict_delitem": [22, 57], "pydict_delitemstr": [22, 57], "pydict_getitem": [22, 57, 73, 472, 483], "__hash__": [22, 63, 78, 80, 85, 87, 161, 181, 211, 225, 289, 344, 389, 428, 455, 467, 468, 470, 476, 480, 483], "__eq__": [22, 63, 78, 80, 85, 87, 147, 161, 168, 181, 195, 202, 211, 226, 244, 255, 291, 344, 385, 389, 390, 419, 428, 463, 468, 469, 470, 473, 475, 480, 483], "pydict_getitemwitherror": [22, 57, 483], "gil": [22, 23, 42, 45, 51, 59, 63, 68, 76, 84, 87, 100, 139, 166, 176, 188, 235, 250, 468, 469, 472, 475, 477, 479, 482, 483], "held": [22, 31, 33, 42, 59, 84, 100, 167, 247, 258, 268, 269, 278, 283, 344, 352, 365, 388, 402, 426, 428, 462, 467, 468, 469, 479, 483], "histor": [22, 41, 63, 73, 75, 95, 100, 103, 167, 177, 183, 213, 248, 271, 295, 366, 383, 414, 422, 436, 461, 469, 474, 477, 479, 483], "reason": [22, 23, 33, 42, 46, 47, 49, 51, 63, 73, 76, 84, 85, 92, 94, 95, 101, 102, 103, 106, 109, 110, 115, 139, 141, 151, 155, 177, 181, 183, 186, 191, 193, 194, 196, 213, 216, 230, 241, 242, 245, 247, 248, 250, 267, 268, 269, 270, 271, 292, 293, 299, 305, 308, 314, 332, 334, 337, 341, 344, 352, 358, 359, 362, 364, 365, 366, 369, 384, 386, 388, 390, 393, 395, 425, 426, 427, 428, 432, 464, 465, 467, 470, 475, 476, 477, 478, 483], "suppress": [22, 33, 34, 68, 92, 101, 120, 139, 152, 157, 163, 169, 193, 288, 292, 296, 311, 315, 334, 335, 344, 348, 352, 362, 427, 428, 436, 455, 461, 463, 465, 467, 468, 469, 470, 471, 477, 478, 480, 481, 483, 484], "wasn": [22, 31, 45, 76, 102, 120, 269, 292, 356, 388, 423, 462, 464, 465, 467, 468, 479, 483], "pydict_getitemstr": [22, 57, 73, 96], "pyunicode_fromstr": [22, 35, 57, 64, 72, 76], "pydict_setdefault": [22, 483], "defaultobj": 22, "setdefault": [22, 78, 160, 161, 184, 244, 344, 407, 428, 462, 465, 475, 476, 483], "hash": [22, 30, 33, 34, 49, 63, 64, 68, 75, 78, 84, 85, 87, 96, 146, 161, 163, 167, 174, 181, 184, 223, 225, 237, 250, 251, 254, 270, 289, 298, 311, 337, 352, 385, 398, 402, 426, 428, 430, 432, 435, 449, 450, 455, 456, 464, 465, 467, 468, 469, 472, 473, 475, 476, 479, 482, 483], "pydict_item": [22, 57], "pylistobject": [22, 38, 54, 76], "pydict_key": [22, 57], "pydict_valu": [22, 57], "pydict_s": [22, 57], "pydict_next": [22, 57], "ppos": 22, "pkey": 22, "pvalu": [22, 23, 72], "spars": [22, 293, 358, 483], "pos": [22, 60, 117, 141, 153, 186, 255, 262, 278, 291, 293, 300, 319, 320, 349, 376, 384, 401, 465, 469, 478], "someth": [22, 33, 36, 73, 75, 84, 85, 92, 93, 95, 99, 100, 101, 102, 106, 107, 120, 122, 132, 139, 144, 151, 169, 176, 201, 213, 225, 228, 247, 250, 251, 253, 255, 261, 262, 267, 268, 283, 292, 293, 299, 308, 314, 322, 338, 340, 341, 355, 358, 362, 365, 369, 386, 388, 389, 390, 395, 402, 410, 413, 419, 425, 428, 431, 432, 436, 441, 449, 462, 463, 464, 465, 466, 467, 468, 469, 472, 474, 475, 482, 483], "interest": [22, 63, 68, 72, 73, 75, 77, 84, 85, 93, 94, 95, 101, 102, 106, 109, 120, 151, 153, 167, 183, 190, 193, 194, 200, 207, 215, 216, 236, 247, 261, 267, 271, 273, 276, 292, 297, 308, 314, 319, 328, 353, 365, 386, 388, 390, 400, 415, 428, 434, 436, 462, 463, 464, 465, 467, 469, 483], "pylong_aslong": [22, 35, 39, 57, 72, 481], "pylong_fromlong": [22, 35, 39, 45, 57, 72, 73, 75, 76, 483], "pydict_merg": [22, 57], "overrid": [22, 33, 34, 49, 61, 63, 64, 66, 68, 85, 93, 101, 102, 103, 110, 116, 120, 126, 132, 135, 136, 144, 155, 157, 161, 167, 171, 175, 176, 181, 183, 189, 193, 196, 202, 203, 205, 208, 209, 213, 218, 225, 226, 230, 243, 244, 245, 248, 250, 255, 258, 267, 269, 272, 283, 287, 292, 293, 299, 311, 314, 315, 319, 331, 334, 337, 338, 344, 345, 348, 352, 354, 362, 365, 376, 384, 386, 388, 390, 395, 402, 413, 417, 422, 428, 429, 430, 432, 440, 455, 456, 461, 462, 465, 468, 469, 470, 471, 476, 477, 479, 480, 481, 483], "pymapping_key": [22, 40, 57, 480, 483], "pyobject_getitem": [22, 35, 40, 49, 57, 63], "replac": [22, 24, 31, 33, 34, 42, 56, 59, 60, 61, 63, 64, 68, 71, 73, 84, 85, 89, 92, 93, 94, 95, 100, 102, 103, 109, 112, 120, 126, 132, 139, 151, 157, 158, 164, 173, 176, 177, 179, 181, 183, 190, 191, 193, 196, 197, 202, 205, 206, 209, 211, 213, 214, 218, 225, 229, 235, 250, 251, 252, 255, 258, 266, 267, 268, 271, 272, 276, 279, 283, 292, 293, 296, 297, 307, 308, 315, 318, 319, 320, 321, 331, 332, 333, 340, 341, 344, 345, 352, 358, 362, 364, 365, 366, 368, 369, 371, 375, 376, 378, 382, 384, 385, 386, 387, 388, 394, 395, 399, 400, 402, 410, 413, 415, 417, 421, 422, 425, 428, 430, 433, 435, 436, 449, 451, 455, 456, 461, 462, 465, 466, 467, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "pydict_upd": [22, 57], "updat": [22, 33, 34, 42, 45, 59, 63, 68, 75, 76, 84, 85, 92, 93, 95, 102, 109, 117, 120, 126, 133, 135, 140, 160, 161, 163, 169, 177, 179, 183, 189, 191, 193, 196, 205, 207, 213, 225, 226, 235, 236, 237, 244, 247, 248, 250, 253, 255, 258, 265, 271, 278, 281, 283, 288, 292, 293, 299, 302, 315, 324, 330, 337, 340, 344, 348, 355, 358, 366, 369, 376, 380, 384, 385, 389, 394, 395, 407, 413, 421, 428, 432, 436, 440, 455, 461, 462, 463, 464, 465, 466, 467, 468, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483], "pydict_mergefromseq2": [22, 57], "seq2": [22, 95, 291, 462], "merg": [22, 68, 85, 87, 92, 93, 95, 101, 102, 103, 177, 183, 193, 213, 236, 267, 269, 282, 292, 293, 344, 380, 386, 426, 452, 456, 461, 462, 465, 468, 469, 474, 478, 483], "duplic": [22, 68, 95, 103, 112, 163, 167, 169, 186, 190, 191, 196, 205, 208, 211, 215, 231, 255, 259, 267, 271, 293, 302, 337, 344, 362, 384, 386, 388, 422, 427, 428, 430, 431, 441, 442, 464, 466, 467, 468, 474, 475, 478, 480, 482, 483], "win": [22, 33, 68, 92, 102, 103, 177, 179, 292, 318, 355, 388, 461, 471, 475, 483], "pydict_addwatch": [22, 474], "pydict_watchcallback": 22, "futur": [22, 33, 61, 63, 68, 77, 84, 87, 100, 101, 106, 112, 114, 120, 122, 123, 125, 127, 130, 132, 133, 138, 139, 155, 159, 164, 165, 167, 183, 193, 197, 203, 205, 207, 208, 213, 225, 234, 245, 247, 250, 252, 254, 255, 257, 267, 268, 283, 292, 293, 308, 315, 319, 325, 328, 333, 337, 340, 341, 352, 353, 362, 365, 366, 385, 386, 388, 395, 400, 413, 428, 430, 435, 461, 462, 463, 464, 465, 466, 467, 468, 473, 474, 476, 477, 481, 483, 484], "pydict_watch": [22, 474], "pydict_clearwatch": 22, "mark": [22, 23, 28, 34, 58, 61, 64, 75, 84, 93, 96, 98, 102, 106, 109, 112, 117, 120, 130, 133, 139, 144, 158, 166, 167, 177, 181, 190, 191, 193, 205, 230, 236, 240, 247, 255, 262, 269, 271, 297, 300, 305, 314, 328, 337, 340, 344, 348, 359, 362, 369, 380, 386, 388, 402, 410, 415, 426, 428, 430, 431, 435, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "watch": [22, 59, 61, 68, 100, 101, 133, 137, 186, 261, 269, 328, 369, 451], "grant": [22, 61, 93, 106, 426, 462, 463, 467], "pydict_unwatch": 22, "pydict_watchev": 22, "pydict_event_ad": 22, "pydict_event_modifi": 22, "pydict_event_delet": 22, "pydict_event_clon": 22, "pydict_event_clear": 22, "pydict_event_dealloc": 22, "new_valu": [22, 27, 362], "delet": [22, 49, 54, 58, 59, 63, 64, 68, 73, 75, 76, 84, 93, 98, 102, 106, 110, 116, 122, 144, 160, 167, 177, 178, 179, 181, 184, 190, 191, 196, 200, 205, 206, 213, 218, 223, 225, 226, 241, 247, 248, 250, 269, 271, 283, 293, 296, 297, 305, 330, 332, 334, 340, 342, 344, 352, 360, 362, 365, 369, 376, 384, 389, 395, 399, 400, 402, 405, 427, 428, 432, 435, 436, 438, 461, 464, 465, 467, 468, 469, 470, 471, 475, 477, 480, 481, 482, 483, 484], "maintain": [22, 33, 73, 84, 92, 94, 100, 102, 103, 108, 120, 147, 158, 167, 169, 176, 181, 186, 196, 207, 208, 213, 225, 248, 250, 251, 255, 266, 292, 307, 308, 325, 338, 347, 352, 355, 366, 375, 388, 400, 402, 403, 412, 425, 430, 432, 434, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 476, 477, 478, 480, 481, 482, 483], "doing": [22, 27, 33, 36, 63, 84, 85, 92, 95, 96, 99, 101, 102, 106, 109, 133, 151, 158, 159, 169, 176, 186, 194, 216, 225, 235, 243, 250, 258, 265, 267, 269, 278, 279, 283, 292, 293, 295, 299, 305, 319, 328, 333, 338, 341, 342, 345, 348, 362, 365, 369, 384, 386, 388, 395, 413, 421, 428, 429, 464, 467, 468, 469, 470, 474, 475, 477, 478, 479, 480, 483], "unpredict": [22, 27, 271, 293, 413, 416, 428, 455, 464], "infinit": [22, 27, 45, 61, 68, 85, 95, 106, 138, 158, 186, 236, 248, 261, 283, 285, 293, 299, 319, 320, 344, 352, 388, 428, 462, 466, 468, 476, 483], "recurs": [22, 27, 32, 33, 61, 68, 73, 85, 95, 112, 142, 151, 163, 167, 170, 181, 190, 191, 193, 196, 200, 205, 213, 216, 226, 231, 250, 252, 262, 283, 293, 297, 299, 302, 307, 308, 313, 321, 330, 332, 342, 352, 358, 365, 384, 386, 388, 395, 412, 413, 422, 428, 429, 432, 436, 440, 462, 463, 464, 465, 466, 468, 474, 475, 477, 478, 479, 480, 481, 483], "trigger": [22, 33, 34, 42, 63, 68, 76, 93, 95, 139, 169, 177, 186, 189, 196, 205, 213, 226, 250, 255, 283, 292, 293, 333, 334, 340, 344, 352, 353, 369, 371, 388, 394, 400, 413, 419, 428, 455, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 479, 480, 483], "notifi": [22, 59, 101, 134, 138, 139, 247, 248, 283, 353, 365, 371, 402, 483], "chapter": [23, 42, 50, 66, 72, 73, 75, 76, 77, 84, 91, 95, 180, 187, 217, 222, 224, 246, 247, 260, 280, 290, 298, 315, 352, 430, 434, 435, 483], "let": [23, 42, 66, 72, 73, 76, 79, 84, 85, 92, 93, 94, 95, 96, 101, 102, 103, 106, 109, 110, 120, 126, 139, 155, 161, 167, 169, 176, 190, 200, 226, 230, 245, 251, 262, 266, 267, 268, 269, 292, 297, 307, 319, 330, 331, 340, 341, 369, 376, 384, 413, 430, 432, 461, 462, 464, 465, 466, 467, 468, 469, 471, 473, 474, 475, 477, 480, 483], "understand": [23, 42, 68, 73, 75, 76, 84, 93, 101, 102, 103, 106, 109, 120, 183, 193, 207, 230, 242, 243, 262, 288, 307, 308, 314, 319, 340, 345, 348, 368, 376, 386, 416, 422, 427, 434, 462, 463, 464, 465, 467, 468, 469, 470, 474, 479, 483], "basic": [23, 33, 63, 64, 68, 73, 74, 75, 77, 84, 85, 92, 93, 95, 96, 99, 101, 102, 103, 112, 120, 135, 144, 155, 158, 160, 167, 169, 177, 183, 184, 187, 189, 190, 230, 234, 245, 247, 250, 252, 254, 255, 256, 258, 262, 267, 269, 283, 292, 304, 307, 308, 322, 337, 338, 340, 341, 344, 348, 358, 362, 365, 368, 369, 374, 376, 381, 384, 386, 388, 390, 395, 406, 412, 413, 414, 415, 419, 430, 436, 456, 462, 464, 465, 467, 468, 469, 471, 475, 476, 477, 478, 481, 483], "posix": [23, 34, 68, 102, 107, 111, 115, 133, 137, 150, 166, 176, 183, 209, 213, 254, 257, 266, 283, 284, 286, 292, 293, 294, 296, 301, 309, 316, 322, 328, 331, 332, 337, 338, 348, 352, 355, 358, 360, 365, 366, 391, 399, 421, 425, 426, 455, 456, 462, 465, 466, 467, 468, 469, 473, 474, 475, 476, 477, 478, 480, 481, 483], "global": [23, 27, 31, 32, 34, 45, 51, 53, 63, 66, 68, 73, 76, 79, 85, 87, 94, 95, 96, 98, 110, 115, 120, 122, 132, 135, 140, 144, 151, 160, 166, 169, 176, 177, 182, 191, 193, 195, 218, 223, 225, 227, 230, 242, 247, 248, 250, 255, 265, 269, 276, 283, 292, 293, 297, 298, 305, 308, 315, 320, 324, 334, 335, 337, 344, 345, 351, 352, 354, 355, 358, 359, 362, 365, 367, 369, 380, 384, 386, 388, 395, 400, 402, 413, 420, 427, 428, 429, 431, 432, 433, 435, 440, 441, 450, 455, 461, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "suppos": [23, 60, 63, 64, 73, 77, 85, 99, 102, 181, 186, 193, 196, 199, 248, 309, 319, 334, 337, 340, 341, 345, 358, 376, 390, 402, 467, 468, 469, 475, 480, 481, 483], "pyarg_": 23, "concret": [23, 33, 68, 75, 76, 94, 106, 122, 176, 183, 187, 197, 208, 219, 230, 250, 253, 258, 268, 292, 296, 329, 338, 344, 347, 352, 365, 388, 394, 410, 417, 425, 432, 464, 465, 468, 476, 477, 480, 482, 483], "traceback": [23, 34, 42, 66, 68, 73, 76, 79, 85, 89, 92, 93, 94, 95, 99, 100, 101, 102, 103, 109, 114, 120, 125, 139, 140, 142, 151, 157, 160, 163, 167, 169, 176, 177, 185, 186, 188, 191, 193, 211, 213, 225, 247, 254, 255, 259, 265, 267, 268, 269, 283, 284, 296, 297, 299, 311, 315, 319, 338, 340, 344, 345, 347, 348, 350, 352, 365, 367, 384, 385, 387, 388, 389, 390, 407, 427, 429, 430, 436, 440, 441, 442, 443, 446, 449, 452, 455, 456, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 480, 481, 482, 483], "although": [23, 25, 27, 42, 63, 72, 85, 94, 101, 102, 103, 139, 158, 176, 181, 183, 190, 193, 196, 197, 200, 205, 206, 248, 255, 258, 261, 267, 271, 281, 283, 292, 293, 295, 299, 307, 319, 345, 352, 355, 358, 366, 375, 412, 414, 415, 416, 425, 427, 428, 430, 432, 434, 436, 455, 461, 462, 474, 477, 478, 479, 483], "forbidden": [23, 42, 94, 110, 139, 241, 299, 344, 365, 468, 478, 483], "clean": [23, 33, 68, 73, 75, 100, 102, 106, 120, 122, 132, 139, 140, 158, 166, 191, 193, 201, 205, 208, 212, 213, 247, 252, 255, 271, 282, 283, 284, 287, 315, 338, 340, 343, 358, 362, 395, 399, 402, 416, 428, 430, 456, 462, 463, 464, 466, 467, 468, 469, 470, 474, 475, 476, 481, 482, 483], "prepar": [23, 59, 66, 68, 102, 109, 110, 157, 183, 191, 225, 230, 232, 235, 244, 254, 269, 293, 299, 337, 348, 352, 362, 363, 384, 385, 388, 395, 413, 414, 417, 422, 426, 468, 470, 477, 478, 480, 482, 483], "propag": [23, 33, 36, 95, 101, 102, 125, 139, 157, 170, 213, 250, 267, 268, 283, 296, 297, 302, 325, 332, 333, 340, 344, 348, 352, 366, 381, 388, 395, 402, 427, 428, 430, 432, 443, 465, 467, 479, 483], "intend": [23, 31, 33, 34, 42, 45, 61, 64, 72, 73, 75, 84, 95, 101, 102, 103, 106, 110, 115, 126, 139, 151, 158, 169, 184, 191, 193, 201, 208, 213, 226, 244, 245, 247, 251, 255, 259, 267, 269, 270, 271, 275, 288, 293, 299, 302, 307, 334, 337, 341, 344, 345, 347, 348, 352, 353, 358, 365, 376, 380, 384, 386, 388, 394, 395, 400, 411, 422, 425, 427, 428, 430, 434, 435, 436, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 474, 477, 478, 479, 480, 481, 483], "mysteri": [23, 73, 151, 334, 477], "sys": [23, 24, 28, 31, 33, 34, 35, 45, 59, 63, 64, 66, 68, 73, 79, 80, 85, 87, 88, 98, 100, 101, 102, 104, 109, 112, 113, 114, 115, 118, 122, 133, 136, 137, 139, 140, 142, 144, 151, 152, 155, 157, 163, 169, 175, 176, 177, 186, 188, 190, 191, 193, 200, 210, 213, 214, 215, 216, 218, 223, 225, 227, 228, 229, 230, 234, 245, 247, 250, 251, 254, 255, 258, 261, 262, 265, 267, 268, 269, 275, 279, 280, 283, 292, 293, 295, 297, 299, 300, 302, 303, 307, 308, 309, 311, 312, 313, 315, 321, 324, 327, 328, 331, 332, 333, 334, 337, 338, 340, 342, 344, 347, 348, 355, 356, 358, 359, 361, 362, 365, 367, 369, 380, 381, 382, 385, 386, 388, 389, 390, 395, 399, 400, 402, 407, 413, 417, 420, 421, 422, 423, 427, 428, 430, 432, 436, 437, 438, 443, 446, 448, 450, 451, 452, 453, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 475, 483, 484], "exc_info": [23, 33, 35, 73, 101, 102, 112, 144, 152, 191, 193, 267, 269, 332, 352, 358, 388, 405, 407, 427, 428, 450, 465, 467, 468, 470, 473, 478, 483], "former": [23, 31, 63, 75, 85, 120, 144, 159, 161, 176, 177, 183, 186, 225, 244, 250, 255, 267, 275, 283, 288, 308, 322, 332, 340, 366, 369, 375, 384, 386, 428, 430, 432, 471, 474, 475, 476, 479, 480, 481, 482, 483], "caught": [23, 100, 115, 120, 139, 152, 157, 213, 283, 293, 302, 305, 323, 332, 333, 337, 340, 352, 362, 366, 369, 388, 414, 423, 427, 428, 436, 443, 463, 468, 470, 477, 481, 483], "stop": [23, 28, 34, 56, 68, 85, 94, 95, 101, 102, 103, 121, 130, 133, 137, 139, 144, 155, 159, 160, 161, 190, 191, 193, 197, 207, 213, 225, 227, 228, 235, 247, 255, 261, 267, 268, 269, 271, 283, 292, 293, 295, 297, 300, 302, 308, 314, 318, 333, 338, 344, 348, 362, 365, 376, 382, 384, 385, 386, 388, 389, 390, 406, 407, 427, 428, 430, 441, 462, 463, 464, 465, 467, 468, 469, 470, 472, 474, 475, 478, 479, 480, 483], "pyerr_clear": [23, 35, 57, 73, 477], "pyerr_printex": [23, 57, 483], "set_sys_last_var": 23, "stderr": [23, 33, 34, 42, 59, 64, 68, 72, 73, 85, 101, 102, 114, 126, 130, 133, 137, 151, 157, 169, 190, 193, 214, 227, 229, 245, 247, 258, 267, 268, 269, 283, 292, 293, 311, 321, 333, 340, 344, 348, 352, 358, 362, 365, 367, 381, 386, 388, 399, 400, 407, 428, 450, 451, 452, 455, 461, 462, 466, 468, 469, 470, 475, 477, 478, 479, 480, 482, 483], "systemexit": [23, 66, 101, 115, 139, 140, 157, 168, 213, 247, 352, 365, 406, 429, 443, 450, 467, 468, 470, 479, 483], "exit": [23, 33, 34, 59, 66, 68, 72, 73, 84, 86, 89, 92, 95, 102, 114, 115, 118, 126, 132, 133, 135, 137, 138, 139, 151, 155, 157, 166, 168, 169, 175, 177, 186, 188, 189, 191, 193, 200, 213, 214, 218, 228, 247, 248, 252, 254, 261, 267, 269, 283, 292, 293, 297, 308, 309, 311, 315, 319, 328, 333, 334, 335, 337, 338, 340, 344, 348, 352, 353, 359, 362, 365, 378, 380, 384, 385, 388, 389, 390, 399, 400, 402, 403, 406, 407, 411, 420, 421, 422, 427, 428, 430, 438, 443, 448, 450, 451, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 478, 479, 480, 481, 482, 483], "fatal": [23, 33, 42, 59, 72, 73, 140, 214, 341, 358, 388, 443, 469, 470, 476, 479, 483], "last_exc": [23, 352, 381, 474, 483], "backward": [23, 24, 33, 59, 61, 64, 66, 80, 87, 101, 102, 120, 128, 144, 167, 177, 183, 191, 193, 194, 196, 205, 207, 208, 213, 228, 245, 248, 250, 255, 267, 268, 271, 293, 295, 299, 302, 308, 314, 319, 322, 332, 337, 341, 344, 348, 362, 366, 381, 384, 386, 394, 395, 397, 419, 428, 430, 432, 435, 436, 440, 461, 462, 464, 465, 467, 468, 470, 475, 476, 477, 478, 479, 480, 481, 482, 483], "last_typ": [23, 352, 450, 470, 474, 483], "last_valu": [23, 94, 211, 352, 381, 450, 474, 483], "last_traceback": [23, 297, 352, 428, 450, 474, 483], "pyerr_print": [23, 57, 68, 72, 73, 483], "unraisablehook": [23, 28, 115, 142, 352, 362, 450, 481, 483], "util": [23, 31, 33, 59, 68, 93, 94, 95, 102, 118, 133, 151, 155, 158, 159, 163, 177, 182, 186, 187, 190, 191, 193, 194, 196, 200, 203, 205, 207, 208, 230, 241, 248, 251, 254, 256, 270, 273, 280, 285, 292, 311, 315, 322, 332, 342, 344, 346, 348, 365, 369, 384, 388, 391, 399, 411, 461, 462, 464, 466, 467, 469, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483], "imposs": [23, 40, 54, 63, 85, 101, 103, 158, 268, 283, 293, 312, 362, 365, 386, 388, 410, 422, 436, 462, 463, 464, 465, 466, 468, 469, 474, 478, 483], "__del__": [23, 33, 52, 63, 68, 73, 84, 182, 227, 258, 283, 316, 340, 360, 362, 389, 428, 477, 483], "pyerr_displayexcept": [23, 57, 474, 483], "display": [23, 33, 34, 42, 68, 87, 89, 94, 96, 98, 102, 109, 118, 120, 139, 151, 152, 155, 157, 160, 179, 185, 186, 188, 191, 193, 200, 203, 214, 247, 254, 255, 259, 266, 267, 271, 281, 288, 293, 297, 307, 311, 313, 319, 320, 321, 342, 344, 345, 346, 348, 352, 358, 364, 369, 375, 376, 378, 380, 381, 384, 388, 395, 399, 400, 403, 421, 426, 428, 435, 436, 443, 449, 455, 456, 461, 462, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "help": [23, 33, 45, 49, 58, 61, 66, 68, 75, 80, 84, 85, 86, 87, 89, 93, 94, 96, 101, 102, 103, 106, 108, 109, 110, 118, 122, 123, 150, 151, 152, 155, 158, 169, 176, 177, 187, 190, 191, 192, 193, 200, 222, 225, 226, 228, 230, 234, 235, 241, 244, 246, 250, 253, 254, 255, 261, 262, 281, 288, 293, 297, 308, 335, 337, 340, 344, 352, 362, 366, 367, 368, 369, 375, 378, 380, 386, 394, 395, 398, 399, 405, 413, 421, 428, 432, 435, 448, 450, 451, 455, 456, 459, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "statement": [23, 47, 49, 54, 61, 63, 66, 68, 72, 73, 78, 79, 85, 87, 95, 100, 102, 112, 113, 114, 115, 117, 120, 122, 126, 139, 144, 149, 151, 159, 164, 166, 176, 184, 185, 186, 188, 191, 193, 201, 213, 218, 225, 234, 242, 247, 248, 250, 252, 254, 255, 270, 271, 278, 281, 283, 288, 291, 292, 293, 295, 297, 312, 315, 319, 328, 335, 337, 338, 340, 341, 344, 348, 352, 354, 358, 359, 361, 362, 367, 378, 384, 386, 390, 405, 410, 411, 412, 422, 426, 429, 430, 431, 432, 433, 435, 437, 439, 440, 446, 455, 462, 463, 464, 465, 466, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484], "pyerr_setstr": [23, 35, 57, 73, 75, 76, 100, 469, 474, 483], "pyexc_runtimeerror": [23, 57, 75], "py_incref": [23, 35, 52, 57, 67, 73, 75, 76, 86, 87, 472, 473, 474, 481, 483], "decod": [23, 33, 34, 59, 64, 66, 68, 72, 73, 87, 102, 109, 121, 126, 133, 136, 137, 141, 143, 145, 146, 176, 188, 196, 197, 199, 200, 201, 202, 203, 204, 206, 208, 209, 213, 225, 235, 244, 250, 258, 270, 285, 288, 293, 299, 304, 317, 337, 340, 341, 344, 347, 348, 352, 358, 359, 362, 377, 378, 394, 395, 397, 399, 419, 422, 428, 432, 435, 451, 455, 462, 464, 466, 467, 468, 469, 470, 471, 475, 476, 477, 478, 479, 482, 483], "pyerr_setobject": [23, 57, 73, 474, 483], "pyerr_format": [23, 57, 75, 469, 478, 483], "pyunicode_fromformat": [23, 57, 64, 75, 76, 472, 474, 476, 477, 478, 483], "pyerr_formatv": [23, 57, 478, 483], "pyerr_setnon": [23, 57], "shorthand": [23, 85, 99, 120, 143, 191, 193, 259, 302, 337, 364, 369, 381, 386, 400, 427, 443, 465, 466, 477], "pyerr_badargu": [23, 57], "pyexc_typeerror": [23, 57, 73, 75, 76], "illeg": [23, 47, 95, 109, 158, 196, 205, 212, 213, 293, 314, 333, 341, 344, 366, 376, 410, 422, 427, 428, 431, 435, 436, 463, 464, 466, 467, 469, 475, 480, 481], "pyerr_nomemori": [23, 42, 57, 73], "pyexc_memoryerror": [23, 57], "pyerr_setfromerrno": [23, 57, 73], "construct": [23, 54, 58, 59, 61, 62, 66, 72, 73, 75, 85, 93, 94, 95, 99, 100, 101, 102, 103, 120, 126, 133, 137, 139, 149, 158, 161, 169, 176, 183, 186, 189, 191, 193, 194, 197, 201, 203, 208, 209, 213, 216, 220, 221, 234, 235, 243, 245, 250, 259, 261, 267, 268, 270, 281, 283, 292, 293, 299, 307, 308, 314, 319, 320, 331, 334, 335, 337, 340, 341, 344, 347, 365, 369, 381, 384, 386, 388, 390, 394, 399, 402, 411, 412, 413, 414, 419, 420, 422, 425, 427, 428, 429, 430, 435, 436, 451, 455, 461, 462, 463, 464, 466, 467, 469, 474, 475, 476, 478, 479, 480, 481, 482, 483], "gotten": [23, 151, 186, 283, 462, 483], "strerror": [23, 212, 213, 266, 293, 468, 483], "eintr": [23, 68, 212, 213, 283, 469, 483], "interrupt": [23, 33, 68, 96, 102, 115, 119, 126, 139, 151, 177, 178, 186, 191, 212, 213, 247, 271, 283, 293, 328, 329, 333, 337, 338, 340, 348, 359, 365, 366, 388, 395, 406, 420, 426, 428, 441, 468, 469, 475, 478, 481, 482, 483], "pyerr_checksign": [23, 57, 474, 483], "pyerr_setfromerrnowithfilenameobject": [23, 57], "filenameobject": 23, "oserror": [23, 109, 126, 130, 133, 153, 176, 183, 188, 213, 215, 218, 223, 225, 230, 234, 243, 245, 250, 255, 258, 278, 282, 283, 288, 293, 294, 295, 296, 303, 306, 322, 328, 332, 333, 335, 337, 341, 348, 358, 359, 362, 366, 393, 395, 405, 423, 427, 443, 450, 469, 472, 476, 477, 481, 483], "filenameobject2": 23, "pyerr_setfromerrnowithfilenam": [23, 57, 483], "pyerr_setfromwindowserr": [23, 57], "ierr": 23, "windowserror": [23, 176, 213, 405, 476], "getlasterror": [23, 176, 483], "win32": [23, 64, 84, 86, 137, 176, 269, 283, 293, 337, 348, 352, 355, 405, 406, 461, 462, 468, 470, 475, 478, 483], "formatmessag": [23, 176, 213], "pyexc_windowserror": [23, 57], "pyerr_setexcfromwindowserr": [23, 57], "pyerr_setfromwindowserrwithfilenam": [23, 57, 483], "os": [23, 33, 34, 59, 64, 68, 73, 78, 85, 87, 92, 93, 95, 98, 101, 102, 109, 112, 115, 118, 120, 124, 125, 126, 132, 133, 137, 138, 139, 140, 142, 151, 160, 163, 164, 166, 167, 169, 170, 183, 187, 188, 189, 190, 193, 200, 208, 210, 212, 214, 215, 216, 219, 220, 225, 229, 230, 231, 234, 235, 243, 245, 247, 252, 254, 258, 266, 269, 272, 278, 282, 283, 286, 292, 299, 301, 302, 303, 306, 308, 309, 318, 320, 328, 329, 332, 333, 334, 335, 337, 340, 341, 342, 344, 352, 354, 355, 358, 360, 365, 366, 369, 380, 382, 388, 389, 395, 399, 400, 403, 407, 421, 422, 425, 428, 438, 443, 451, 452, 455, 456, 461, 462, 464, 465, 466, 467, 470, 483, 484], "fsdecod": [23, 87, 293, 352, 475, 479, 483], "pyerr_setexcfromwindowserrwithfilenameobject": [23, 57], "filename2": [23, 213], "pyerr_setexcfromwindowserrwithfilenam": [23, 57, 483], "pyerr_setimporterror": [23, 57, 477, 479], "msg": [23, 84, 102, 107, 122, 129, 139, 151, 169, 176, 190, 196, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 213, 228, 235, 237, 242, 250, 262, 266, 267, 269, 271, 283, 286, 319, 335, 337, 344, 359, 362, 381, 388, 393, 395, 408, 414, 450, 465, 466, 467, 475, 476, 477, 478, 479, 483], "importerror": [23, 102, 213, 250, 268, 279, 283, 299, 302, 334, 341, 352, 362, 388, 410, 423, 432, 436, 450, 456, 463, 465, 468, 474, 476, 477, 479, 480, 482, 483], "pyerr_setimporterrorsubclass": [23, 57, 479], "much": [23, 55, 61, 63, 67, 73, 75, 76, 78, 84, 85, 92, 95, 102, 106, 109, 110, 120, 126, 137, 151, 154, 158, 167, 176, 186, 193, 194, 203, 207, 225, 255, 261, 269, 270, 271, 275, 283, 292, 293, 295, 299, 308, 319, 330, 337, 348, 355, 369, 376, 382, 384, 388, 390, 410, 411, 419, 427, 432, 462, 463, 464, 465, 466, 467, 468, 469, 470, 475, 476, 477, 478, 479, 481, 482, 483], "subclass": [23, 28, 43, 47, 49, 54, 58, 59, 61, 63, 68, 74, 75, 87, 99, 100, 101, 103, 106, 110, 116, 120, 126, 132, 133, 138, 139, 144, 155, 157, 158, 161, 167, 175, 176, 181, 182, 183, 186, 189, 193, 199, 203, 205, 206, 208, 213, 216, 218, 223, 225, 226, 242, 245, 248, 250, 251, 253, 255, 256, 258, 259, 262, 267, 268, 269, 271, 283, 292, 293, 299, 305, 307, 318, 319, 330, 331, 332, 334, 335, 337, 338, 340, 341, 344, 345, 348, 352, 358, 362, 365, 369, 375, 376, 384, 385, 386, 388, 390, 394, 395, 397, 399, 400, 402, 410, 412, 413, 414, 415, 417, 419, 423, 425, 427, 429, 430, 436, 440, 443, 452, 455, 462, 464, 465, 466, 467, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "pyerr_syntaxlocationobject": [23, 483], "lineno": [23, 98, 122, 144, 167, 188, 191, 193, 213, 218, 255, 262, 265, 267, 286, 297, 299, 308, 312, 314, 319, 331, 362, 381, 382, 388, 400, 428, 431, 455, 472, 478, 479, 481, 483], "col_offset": [23, 122, 191, 481, 483], "syntaxerror": [23, 66, 68, 79, 106, 122, 157, 159, 168, 193, 213, 225, 247, 319, 362, 378, 381, 386, 427, 429, 431, 435, 436, 442, 443, 446, 449, 450, 462, 463, 464, 473, 474, 475, 477, 478, 479, 480, 483], "subsystem": [23, 95, 102, 250, 348, 369, 461, 465, 467, 469, 481, 483], "think": [23, 60, 64, 75, 85, 95, 100, 102, 106, 109, 193, 201, 225, 252, 261, 267, 292, 299, 386, 428, 430, 432, 464, 467, 468], "pyerr_syntaxlocationex": [23, 57, 483], "pyerr_syntaxloc": [23, 57], "omit": [23, 60, 68, 75, 102, 104, 106, 117, 120, 126, 153, 167, 176, 177, 183, 190, 193, 200, 201, 202, 204, 213, 225, 230, 234, 245, 247, 248, 252, 258, 259, 265, 266, 271, 276, 278, 283, 288, 292, 293, 297, 299, 305, 314, 319, 320, 328, 331, 332, 334, 335, 337, 340, 344, 345, 358, 365, 376, 381, 384, 386, 388, 400, 411, 413, 414, 421, 426, 427, 428, 430, 431, 435, 436, 455, 461, 465, 466, 467, 469, 470, 476, 477, 479, 480, 483], "pyerr_badinternalcal": [23, 57], "pyexc_systemerror": [23, 57], "mirror": [23, 110, 223, 267, 268, 269, 369, 377, 387, 415, 455, 466, 483], "problem": [23, 25, 33, 59, 63, 68, 73, 76, 84, 85, 92, 93, 95, 96, 100, 101, 102, 103, 109, 126, 141, 152, 158, 159, 167, 169, 183, 186, 190, 193, 196, 199, 203, 205, 207, 230, 245, 247, 250, 261, 262, 266, 267, 268, 283, 292, 293, 299, 308, 314, 333, 337, 340, 344, 347, 358, 362, 364, 386, 390, 395, 402, 410, 413, 427, 435, 443, 444, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 480, 481, 483], "machineri": [23, 45, 63, 68, 73, 87, 93, 102, 158, 209, 225, 251, 255, 268, 280, 302, 341, 352, 385, 402, 406, 423, 428, 432, 455, 461, 463, 464, 466, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483], "nor": [23, 33, 34, 63, 75, 76, 84, 89, 94, 99, 103, 110, 133, 143, 144, 158, 188, 191, 242, 243, 270, 275, 283, 292, 293, 296, 297, 299, 302, 319, 330, 338, 340, 341, 344, 352, 353, 376, 380, 386, 388, 403, 425, 426, 428, 430, 455, 456, 474, 475, 477, 479, 480, 483], "intent": [23, 31, 72, 73, 102, 181, 183, 196, 205, 247, 288, 293, 352, 386, 388, 389, 407, 419, 426, 427, 428, 465, 466, 468, 470, 476, 477, 483], "pyerr_warnex": [23, 57, 400, 467], "stack_level": 23, "forth": [23, 85, 92, 106, 160, 293, 319, 328, 344, 428, 462, 464, 465, 467], "pyexc_warn": [23, 57], "pyexc_except": [23, 57], "pyexc_runtimewarn": [23, 57], "document": [23, 24, 28, 42, 45, 51, 55, 58, 59, 61, 63, 64, 68, 71, 72, 73, 75, 76, 77, 79, 80, 85, 92, 93, 95, 96, 99, 100, 101, 102, 103, 106, 109, 110, 112, 115, 120, 126, 128, 133, 137, 139, 144, 151, 155, 167, 169, 176, 177, 181, 183, 187, 190, 193, 194, 195, 196, 198, 202, 203, 205, 207, 208, 213, 220, 221, 225, 226, 230, 235, 241, 243, 247, 248, 250, 251, 254, 255, 256, 259, 262, 266, 267, 268, 269, 271, 272, 273, 281, 282, 283, 285, 290, 292, 293, 295, 297, 304, 307, 314, 322, 330, 331, 335, 337, 338, 340, 341, 342, 344, 348, 352, 354, 358, 361, 362, 364, 365, 366, 369, 375, 376, 384, 385, 386, 394, 395, 399, 400, 402, 403, 405, 411, 412, 414, 415, 416, 417, 419, 422, 423, 425, 426, 427, 428, 430, 432, 434, 435, 436, 445, 446, 456, 461, 462, 463, 464, 465, 466, 467, 470, 471, 472, 474, 475, 478, 479, 480, 482, 484], "command": [23, 33, 34, 66, 68, 72, 73, 77, 79, 85, 101, 102, 104, 109, 112, 118, 119, 126, 137, 142, 151, 157, 164, 177, 185, 187, 188, 193, 206, 214, 222, 223, 225, 230, 234, 245, 247, 248, 251, 254, 255, 262, 264, 267, 268, 272, 283, 288, 295, 301, 305, 308, 309, 313, 324, 331, 332, 334, 335, 340, 341, 344, 350, 352, 354, 359, 362, 363, 369, 373, 375, 376, 382, 384, 400, 403, 407, 413, 420, 421, 428, 429, 436, 448, 451, 455, 456, 458, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 476, 478, 480, 481, 482, 483, 484], "pyerr_warnexplicitobject": 23, "straightforward": [23, 73, 84, 85, 100, 102, 103, 109, 158, 167, 176, 259, 268, 292, 328, 337, 384, 464, 465, 468, 475, 476, 483], "warn_explicit": [23, 400, 479, 483], "pyerr_warnexplicit": [23, 57, 483], "pyerr_warnformat": [23, 57], "pyerr_resourcewarn": [23, 57, 479, 483], "resourcewarn": [23, 68, 125, 187, 213, 227, 293, 348, 362, 388, 400, 450, 475, 479, 483], "warningmessag": [23, 479, 483], "pyerr_set": 23, "pyerr_restor": [23, 57, 63, 75, 474, 483], "specif": [23, 34, 42, 45, 49, 51, 58, 60, 61, 63, 66, 67, 68, 73, 76, 77, 85, 93, 96, 98, 99, 100, 101, 102, 103, 106, 109, 110, 111, 112, 115, 120, 126, 132, 133, 145, 151, 153, 155, 161, 167, 169, 176, 177, 181, 183, 184, 186, 187, 193, 194, 195, 196, 202, 203, 205, 206, 208, 212, 213, 215, 221, 222, 225, 226, 228, 230, 235, 240, 242, 243, 244, 245, 247, 250, 251, 252, 253, 254, 255, 258, 259, 261, 262, 266, 267, 268, 269, 271, 275, 281, 283, 288, 293, 295, 296, 297, 299, 308, 314, 315, 321, 322, 328, 329, 331, 332, 335, 337, 338, 340, 341, 342, 344, 347, 352, 353, 354, 355, 358, 359, 362, 363, 364, 365, 366, 368, 369, 374, 377, 385, 387, 388, 394, 395, 399, 400, 402, 404, 407, 410, 411, 413, 417, 419, 422, 423, 425, 426, 427, 428, 432, 434, 435, 436, 446, 455, 461, 462, 463, 464, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483], "pyerr_exceptionmatch": [23, 35, 57], "shown": [23, 42, 73, 77, 92, 94, 96, 100, 101, 102, 103, 108, 110, 120, 169, 181, 186, 188, 190, 191, 193, 203, 214, 247, 267, 268, 292, 297, 308, 313, 319, 325, 348, 366, 375, 376, 381, 384, 388, 394, 400, 402, 428, 461, 468, 478, 479, 480, 481, 482, 483], "comparison": [23, 49, 63, 64, 68, 74, 95, 109, 112, 140, 160, 161, 173, 176, 181, 183, 186, 190, 191, 193, 219, 220, 225, 226, 236, 254, 255, 256, 266, 275, 283, 291, 298, 344, 346, 352, 362, 386, 388, 390, 405, 413, 419, 428, 431, 433, 435, 442, 449, 455, 462, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "pyerr_givenexceptionmatch": [23, 57], "violat": [23, 42, 61, 63, 94, 103, 176, 183, 188, 203, 208, 215, 248, 299, 305, 341, 344, 428, 479, 483], "subtupl": 23, "search": [23, 31, 33, 34, 35, 59, 64, 68, 75, 84, 85, 87, 93, 100, 101, 109, 141, 147, 151, 158, 160, 163, 176, 193, 196, 216, 225, 230, 248, 250, 254, 265, 266, 267, 268, 270, 278, 279, 280, 288, 293, 297, 299, 302, 308, 311, 312, 313, 331, 332, 334, 340, 344, 348, 352, 355, 363, 368, 369, 371, 375, 384, 388, 395, 396, 403, 410, 412, 413, 415, 420, 422, 423, 425, 427, 428, 429, 430, 433, 440, 450, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 478, 479, 480, 481, 482, 483], "pyerr_getraisedexcept": [23, 57, 474, 483], "catch": [23, 42, 68, 85, 92, 95, 102, 109, 110, 120, 139, 167, 193, 213, 244, 255, 267, 292, 293, 315, 322, 331, 333, 340, 348, 362, 388, 395, 408, 428, 430, 462, 465, 467, 468, 469, 470, 474, 475, 476, 477, 479, 482, 483], "temporarili": [23, 68, 73, 102, 110, 169, 186, 193, 230, 250, 266, 267, 314, 315, 332, 344, 348, 362, 376, 382, 388, 390, 413, 427, 461, 468, 474, 479, 480, 483], "pyerr_setraisedexcept": [23, 57, 474, 483], "pyerr_gethandledexcept": [23, 57, 473, 483], "pyerr_fetch": [23, 57, 63, 75, 474, 477, 483], "ptraceback": 23, "invalid": [23, 28, 34, 59, 61, 63, 64, 68, 73, 79, 85, 87, 89, 93, 94, 99, 100, 101, 106, 109, 110, 115, 118, 126, 146, 157, 159, 160, 163, 176, 183, 186, 196, 199, 201, 203, 205, 208, 209, 211, 212, 213, 216, 226, 230, 234, 242, 244, 247, 250, 255, 258, 266, 268, 271, 275, 283, 292, 293, 295, 299, 309, 311, 319, 322, 328, 329, 333, 337, 340, 341, 344, 345, 348, 358, 362, 365, 366, 376, 378, 386, 388, 394, 400, 402, 405, 410, 419, 425, 427, 428, 431, 436, 441, 443, 449, 455, 462, 468, 469, 470, 471, 472, 474, 476, 477, 478, 479, 480, 481, 482, 483], "rule": [23, 28, 33, 61, 63, 68, 85, 93, 94, 95, 100, 102, 103, 106, 109, 120, 151, 161, 176, 178, 181, 183, 186, 190, 194, 196, 202, 203, 205, 207, 208, 209, 221, 222, 225, 243, 244, 247, 259, 266, 275, 292, 319, 344, 345, 347, 348, 365, 366, 375, 386, 390, 394, 400, 411, 415, 427, 428, 429, 430, 431, 432, 434, 435, 436, 462, 463, 465, 467, 468, 469, 470, 474, 475, 476, 483], "away": [23, 27, 33, 76, 85, 95, 101, 102, 120, 177, 183, 186, 193, 247, 250, 255, 275, 283, 292, 293, 308, 319, 452, 464, 465, 470, 477, 478, 483], "pyerr_normalizeexcept": [23, 57, 474, 483], "tb": [23, 102, 191, 213, 247, 381, 382, 385, 390, 428, 467, 468, 474, 477, 483], "avoid": [23, 33, 34, 42, 61, 63, 68, 72, 73, 75, 76, 85, 92, 94, 95, 101, 103, 106, 108, 109, 120, 126, 132, 133, 137, 138, 139, 149, 158, 160, 167, 169, 176, 177, 183, 186, 215, 225, 242, 245, 248, 255, 259, 265, 266, 268, 269, 271, 275, 278, 283, 289, 292, 293, 299, 314, 319, 321, 332, 333, 337, 340, 342, 344, 348, 352, 358, 362, 364, 365, 366, 369, 375, 385, 388, 390, 395, 402, 406, 410, 411, 413, 417, 427, 428, 430, 431, 432, 435, 436, 456, 461, 462, 464, 465, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "circumst": [23, 42, 92, 94, 102, 103, 151, 167, 243, 267, 270, 292, 293, 322, 332, 395, 403, 428, 436, 466, 477, 481, 483], "unnorm": [23, 483], "instanti": [23, 63, 76, 94, 100, 101, 102, 110, 126, 132, 133, 139, 151, 153, 155, 160, 176, 177, 181, 183, 190, 194, 196, 198, 203, 230, 242, 245, 248, 250, 267, 268, 269, 271, 283, 292, 296, 297, 299, 328, 329, 331, 335, 337, 338, 344, 362, 369, 376, 385, 386, 388, 389, 390, 403, 408, 410, 411, 414, 416, 428, 436, 440, 443, 467, 468, 474, 475, 478, 480, 481, 482, 483], "noth": [23, 33, 34, 42, 58, 64, 72, 73, 75, 101, 102, 103, 106, 110, 115, 132, 139, 140, 154, 158, 169, 177, 181, 183, 190, 191, 193, 198, 226, 247, 248, 266, 267, 268, 269, 271, 282, 283, 292, 299, 305, 319, 332, 333, 338, 340, 344, 346, 348, 359, 365, 369, 382, 386, 388, 399, 417, 426, 428, 430, 435, 436, 441, 455, 464, 465, 468, 469, 474, 477, 478, 481, 482, 483], "happen": [23, 25, 33, 59, 68, 73, 76, 84, 85, 92, 93, 95, 102, 103, 110, 115, 126, 139, 157, 169, 176, 177, 181, 183, 190, 207, 225, 226, 247, 250, 255, 258, 266, 267, 268, 269, 292, 293, 295, 299, 314, 328, 334, 337, 341, 344, 345, 352, 353, 359, 361, 362, 365, 369, 381, 388, 395, 427, 428, 429, 430, 432, 435, 436, 443, 462, 464, 466, 467, 468, 469, 470, 474, 477, 478, 481, 482, 483], "delay": [23, 68, 84, 92, 102, 129, 139, 177, 245, 247, 255, 269, 283, 288, 314, 325, 333, 337, 341, 362, 383, 384, 390, 395, 396, 413, 428, 450, 468, 475, 479, 480, 481, 483], "improv": [23, 68, 73, 85, 93, 100, 102, 106, 120, 133, 139, 158, 167, 222, 234, 248, 250, 275, 299, 314, 341, 348, 376, 410, 426, 428, 430, 456, 470, 476, 478, 480, 481, 482, 483, 484], "implicit": [23, 34, 59, 63, 68, 73, 85, 100, 102, 112, 114, 120, 126, 133, 139, 143, 167, 169, 181, 184, 188, 190, 223, 225, 248, 250, 255, 258, 268, 281, 295, 297, 314, 319, 324, 333, 335, 337, 340, 344, 345, 347, 348, 386, 400, 402, 412, 427, 428, 430, 432, 436, 440, 443, 455, 469, 470, 475, 477, 478, 479, 480, 481, 483, 484], "__traceback__": [23, 213, 352, 381, 385, 428, 430, 436, 470, 473, 483], "snippet": [23, 94, 102, 139, 170, 244, 268, 331, 341, 365, 461, 464, 465, 467, 478, 483], "pyexception_settraceback": [23, 57, 483], "fresh": [23, 63, 85, 95, 158, 169, 255, 283, 307, 324, 362, 385, 432, 461, 464, 465, 483], "pyerr_sethandledexcept": [23, 57, 473, 483], "pyerr_getexcinfo": [23, 57, 473, 483], "kept": [23, 24, 33, 45, 59, 64, 85, 100, 102, 167, 176, 184, 186, 195, 199, 208, 213, 214, 225, 243, 244, 247, 258, 261, 269, 271, 311, 312, 319, 334, 338, 341, 402, 436, 462, 464, 469, 470, 474, 475, 476, 477, 482, 483], "pyerr_setexcinfo": [23, 57, 473, 483], "deriv": [23, 33, 49, 61, 68, 76, 88, 103, 120, 144, 157, 158, 174, 176, 177, 178, 181, 183, 197, 199, 201, 202, 203, 213, 226, 230, 244, 248, 250, 251, 255, 261, 262, 267, 268, 272, 288, 292, 293, 308, 312, 313, 314, 328, 338, 352, 355, 369, 384, 386, 388, 395, 400, 408, 411, 416, 419, 420, 426, 428, 431, 432, 435, 440, 443, 462, 465, 466, 467, 468, 469, 470, 476, 477, 479, 480, 483], "interact": [23, 33, 34, 42, 59, 63, 66, 68, 72, 79, 84, 85, 87, 93, 102, 106, 115, 120, 122, 126, 144, 155, 166, 177, 180, 186, 187, 191, 194, 207, 213, 214, 218, 225, 243, 247, 254, 255, 257, 283, 284, 292, 293, 295, 297, 307, 308, 313, 315, 320, 323, 334, 341, 348, 352, 354, 358, 359, 369, 375, 376, 381, 384, 388, 395, 400, 413, 420, 422, 428, 431, 432, 434, 435, 436, 448, 455, 461, 464, 465, 466, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "main": [23, 33, 34, 42, 45, 59, 63, 66, 68, 72, 73, 75, 76, 84, 85, 92, 93, 96, 100, 101, 102, 114, 115, 120, 123, 125, 126, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 151, 155, 157, 166, 167, 169, 170, 177, 185, 188, 190, 193, 194, 196, 199, 200, 201, 204, 205, 206, 208, 226, 228, 230, 240, 247, 250, 251, 252, 255, 267, 268, 271, 283, 288, 292, 293, 299, 309, 322, 324, 333, 334, 338, 340, 344, 347, 352, 354, 355, 356, 358, 362, 365, 369, 375, 376, 382, 384, 386, 388, 389, 390, 395, 399, 402, 411, 413, 415, 419, 420, 421, 428, 429, 432, 450, 451, 452, 455, 458, 461, 464, 465, 467, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "sent": [23, 68, 92, 95, 101, 103, 107, 109, 110, 126, 133, 137, 169, 177, 200, 235, 242, 244, 245, 247, 248, 259, 267, 268, 269, 283, 288, 293, 297, 305, 322, 333, 335, 337, 338, 340, 341, 348, 366, 386, 395, 419, 420, 426, 461, 462, 465, 466, 467, 468, 469, 475, 476, 477, 478, 479, 480, 481, 482, 483], "immedi": [23, 24, 28, 31, 33, 45, 63, 66, 73, 79, 84, 85, 92, 93, 95, 103, 106, 115, 126, 133, 135, 139, 141, 153, 155, 169, 176, 177, 184, 186, 191, 193, 205, 213, 214, 216, 218, 226, 232, 242, 247, 255, 258, 266, 267, 271, 282, 283, 293, 295, 297, 312, 314, 319, 331, 333, 337, 340, 341, 344, 345, 348, 352, 353, 359, 361, 365, 366, 369, 376, 384, 388, 395, 400, 406, 410, 413, 415, 416, 419, 420, 427, 428, 429, 430, 432, 455, 464, 465, 466, 468, 469, 474, 476, 477, 479, 480, 481, 482, 483], "invoc": [23, 28, 56, 68, 73, 164, 169, 176, 274, 283, 308, 365, 381, 388, 415, 427, 428, 440, 455, 466, 475, 477, 481, 483], "press": [23, 92, 102, 126, 154, 177, 247, 282, 297, 323, 369, 375, 376, 384, 388, 422, 469, 475, 483], "ctrl": [23, 86, 92, 102, 126, 135, 168, 178, 283, 297, 333, 338, 340, 441, 455, 462, 467, 475, 481, 483], "sigint": [23, 68, 115, 135, 283, 297, 316, 333, 348, 388, 472, 475, 481, 483], "keyboardinterrupt": [23, 96, 101, 102, 115, 135, 139, 157, 213, 283, 316, 333, 388, 407, 420, 438, 443, 450, 467, 468, 469, 470, 479, 480, 481, 483], "pyerr_setinterrupt": [23, 57], "simul": [23, 68, 92, 93, 102, 115, 126, 133, 136, 177, 234, 299, 318, 333, 343, 347, 363, 384, 402, 463, 464, 477], "arriv": [23, 115, 193, 243, 245, 283, 318, 333, 338, 341, 366, 442, 462], "pyerr_setinterruptex": [23, 57, 472], "signum": [23, 84, 115, 126, 214, 293, 333, 483], "sig_dfl": [23, 115, 333, 348, 483], "sig_ign": [23, 115, 333, 348, 483], "outsid": [23, 59, 85, 93, 95, 101, 102, 106, 107, 126, 132, 139, 158, 163, 170, 176, 177, 183, 186, 196, 199, 205, 208, 213, 245, 247, 252, 262, 299, 313, 314, 319, 325, 332, 337, 341, 344, 345, 347, 358, 362, 365, 366, 367, 376, 384, 386, 400, 413, 415, 422, 427, 428, 435, 440, 465, 466, 469, 472, 473, 474, 475, 479, 480, 481, 482, 483], "pysignal_setwakeupfd": [23, 468], "fd": [23, 24, 84, 126, 130, 133, 142, 177, 215, 258, 282, 293, 309, 328, 329, 332, 333, 337, 361, 383, 384, 468, 483], "whenev": [23, 61, 63, 66, 73, 85, 93, 94, 95, 101, 102, 120, 133, 177, 186, 190, 207, 225, 247, 252, 255, 267, 269, 271, 283, 292, 299, 314, 328, 333, 340, 341, 344, 352, 362, 376, 384, 388, 413, 425, 428, 432, 464, 465, 467, 468, 469, 474, 475, 476, 477, 478, 479, 480, 483], "disabl": [23, 28, 33, 34, 42, 63, 68, 73, 94, 96, 101, 102, 106, 112, 120, 126, 144, 151, 164, 167, 177, 186, 190, 193, 201, 214, 218, 225, 226, 227, 242, 250, 255, 262, 267, 268, 269, 283, 288, 292, 293, 297, 299, 308, 314, 315, 319, 320, 328, 331, 333, 334, 335, 337, 339, 340, 341, 344, 352, 362, 376, 384, 386, 388, 395, 400, 402, 405, 413, 425, 428, 432, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "featur": [23, 33, 34, 49, 51, 54, 61, 63, 66, 68, 75, 79, 84, 85, 87, 92, 93, 94, 95, 96, 101, 102, 106, 109, 113, 120, 143, 151, 152, 158, 167, 176, 177, 179, 180, 181, 183, 187, 193, 194, 208, 213, 225, 226, 243, 247, 250, 257, 262, 267, 270, 283, 292, 293, 297, 299, 302, 319, 324, 332, 335, 340, 341, 344, 348, 352, 358, 362, 365, 369, 380, 384, 388, 395, 400, 402, 410, 411, 414, 415, 416, 422, 428, 430, 432, 434, 435, 436, 455, 456, 461, 462, 463, 464, 465, 466, 468, 470, 471, 473, 475, 476, 483, 484], "set_wakeup_fd": [23, 333, 468, 478, 480, 483], "socket": [23, 68, 80, 87, 95, 97, 99, 101, 106, 109, 124, 127, 130, 131, 142, 158, 170, 171, 187, 207, 212, 213, 223, 235, 242, 245, 247, 248, 254, 256, 257, 258, 259, 260, 267, 268, 269, 283, 284, 288, 293, 296, 305, 307, 322, 328, 329, 333, 335, 338, 342, 358, 359, 369, 402, 407, 413, 428, 439, 452, 456, 462, 463, 464, 465, 466, 467, 468, 469, 474, 483], "pyerr_newexcept": [23, 57, 73, 467, 469, 475], "classnam": [23, 85, 122, 161, 369, 375, 389, 390, 427, 440], "__module__": [23, 27, 58, 63, 88, 93, 94, 160, 181, 197, 211, 225, 226, 255, 279, 362, 386, 428, 465, 472, 478, 479, 483], "dot": [23, 31, 45, 63, 64, 76, 78, 87, 93, 98, 101, 102, 106, 122, 193, 225, 243, 247, 250, 259, 261, 266, 267, 268, 271, 276, 288, 302, 313, 319, 323, 332, 337, 344, 352, 358, 360, 369, 377, 384, 388, 389, 420, 422, 423, 427, 428, 432, 434, 436, 440, 447, 455, 461, 468, 471, 472, 478, 483], "pyerr_newexceptionwithdoc": [23, 57, 469, 475], "docstr": [23, 27, 34, 45, 58, 60, 63, 66, 68, 75, 84, 87, 102, 122, 155, 160, 187, 222, 225, 226, 247, 255, 297, 313, 362, 378, 385, 386, 388, 427, 428, 435, 436, 440, 441, 451, 455, 462, 463, 464, 465, 466, 467, 468, 469, 473, 475, 477, 478, 479, 480, 481, 482, 483], "pyexception_gettraceback": [23, 57], "ex": [23, 34, 42, 102, 320, 337, 344, 419, 431, 455, 467, 474, 478, 479, 482, 483], "pyexception_getcontext": [23, 57], "__context__": [23, 213, 381, 436, 470, 476, 483], "pyexception_setcontext": [23, 57], "sure": [23, 45, 63, 64, 72, 75, 76, 84, 85, 92, 95, 101, 102, 106, 120, 151, 155, 158, 167, 176, 186, 213, 225, 235, 250, 266, 283, 292, 293, 314, 329, 340, 341, 343, 362, 365, 369, 397, 400, 413, 421, 428, 461, 464, 465, 467, 468, 470, 475, 476, 483], "pyexception_getcaus": [23, 57], "__cause__": [23, 191, 213, 381, 436, 470, 483], "pyexception_setcaus": [23, 57], "__suppress_context__": [23, 213, 381, 436], "pyexception_getarg": [23, 57, 474, 483], "pyexception_setarg": [23, 57, 474, 483], "pyunstable_exc_prepreraisestar": [23, 483], "orig": [23, 203, 396], "unhandl": [23, 66, 115, 151, 157, 169, 193, 228, 247, 352, 365, 381, 395, 428, 443, 470, 474, 483], "claus": [23, 68, 95, 102, 115, 139, 169, 213, 255, 283, 297, 314, 340, 344, 352, 362, 428, 429, 430, 435, 436, 443, 462, 467, 468, 475, 477, 480, 481, 482, 483], "rerais": [23, 169, 191, 283, 344, 353, 427, 428, 483], "exceptiongroup": [23, 126, 139, 191, 213, 337, 381, 427, 443, 473, 474, 483], "pyunicodedecodeerror_cr": [23, 57], "pyunicodedecodeerror_getencod": [23, 57], "pyunicodeencodeerror_getencod": [23, 57], "pyunicodedecodeerror_getobject": [23, 57], "pyunicodeencodeerror_getobject": [23, 57], "pyunicodetranslateerror_getobject": [23, 57], "pyunicodedecodeerror_getstart": [23, 57], "pyunicodeencodeerror_getstart": [23, 57], "pyunicodetranslateerror_getstart": [23, 57], "pyunicodedecodeerror_setstart": [23, 57], "pyunicodeencodeerror_setstart": [23, 57], "pyunicodetranslateerror_setstart": [23, 57], "pyunicodedecodeerror_getend": [23, 57], "pyunicodeencodeerror_getend": [23, 57], "pyunicodetranslateerror_getend": [23, 57], "pyunicodedecodeerror_setend": [23, 57], "pyunicodeencodeerror_setend": [23, 57], "pyunicodetranslateerror_setend": [23, 57], "pyunicodedecodeerror_getreason": [23, 57], "pyunicodeencodeerror_getreason": [23, 57], "pyunicodetranslateerror_getreason": [23, 57], "pyunicodedecodeerror_setreason": [23, 57], "pyunicodeencodeerror_setreason": [23, 57], "pyunicodetranslateerror_setreason": [23, 57], "core": [23, 28, 33, 34, 59, 68, 73, 96, 101, 106, 118, 126, 163, 167, 205, 235, 250, 251, 261, 266, 269, 292, 293, 308, 313, 322, 333, 344, 362, 365, 369, 385, 399, 410, 413, 425, 428, 436, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 481, 482, 484], "track": [23, 28, 42, 63, 68, 85, 94, 96, 100, 101, 106, 126, 151, 158, 167, 169, 181, 185, 186, 187, 193, 254, 269, 275, 283, 292, 293, 299, 319, 328, 352, 365, 366, 369, 371, 388, 395, 410, 426, 462, 463, 466, 469, 471, 474, 475, 477, 478, 479, 480, 481, 482, 483], "depth": [23, 91, 101, 103, 142, 163, 167, 177, 179, 184, 191, 196, 205, 213, 235, 270, 299, 307, 321, 340, 344, 352, 358, 362, 375, 381, 385, 388, 412, 413, 462, 463, 464, 478, 479, 480, 483], "use_stackcheck": [23, 59, 483], "pyos_checkstack": [23, 57, 59, 483], "reach": [23, 24, 66, 73, 75, 84, 85, 95, 102, 105, 106, 110, 126, 137, 144, 149, 153, 159, 225, 242, 261, 267, 270, 293, 297, 313, 314, 328, 331, 337, 338, 340, 344, 348, 381, 395, 413, 415, 427, 428, 430, 432, 436, 440, 461, 462, 463, 464, 465, 467, 468, 469, 475, 477, 478, 480, 481, 483], "recursionerror": [23, 122, 213, 262, 299, 307, 352, 443, 478, 479, 483], "concaten": [23, 53, 54, 68, 76, 106, 120, 121, 149, 151, 157, 158, 191, 225, 234, 235, 267, 270, 271, 293, 297, 314, 319, 331, 335, 337, 341, 344, 358, 381, 386, 424, 428, 430, 443, 446, 449, 461, 465, 466, 472, 483], "tp_repr": [23, 63, 75], "protect": [23, 33, 73, 75, 76, 102, 139, 167, 176, 177, 181, 223, 230, 235, 248, 258, 270, 278, 283, 307, 314, 324, 331, 338, 342, 358, 400, 421, 428, 455, 464, 467, 474, 478, 483], "cycl": [23, 28, 61, 63, 68, 73, 76, 78, 80, 85, 87, 95, 100, 102, 139, 227, 232, 247, 255, 261, 352, 362, 365, 376, 402, 427, 428, 436, 463, 465, 467, 468, 469, 475, 477, 481, 482, 483, 484], "facilit": [23, 247, 268, 319, 320, 335, 400, 477, 480, 483], "reprlib": [23, 68, 182, 254, 452, 470, 483], "recursive_repr": [23, 321, 475, 483], "py_reprent": [23, 57], "detect": [23, 28, 34, 42, 59, 63, 73, 75, 76, 85, 93, 95, 106, 110, 112, 133, 140, 158, 161, 177, 181, 183, 186, 188, 191, 194, 203, 206, 213, 247, 250, 255, 271, 283, 292, 293, 295, 299, 307, 314, 320, 321, 331, 333, 335, 337, 340, 344, 348, 352, 358, 362, 364, 365, 378, 382, 388, 395, 403, 427, 428, 429, 430, 435, 443, 455, 456, 461, 462, 463, 464, 465, 468, 469, 474, 475, 477, 478, 479, 480, 481, 483], "typic": [23, 33, 34, 45, 49, 58, 61, 63, 73, 77, 85, 93, 94, 100, 101, 102, 103, 110, 120, 126, 139, 149, 151, 158, 167, 173, 186, 190, 193, 196, 203, 205, 218, 225, 226, 228, 230, 245, 250, 251, 252, 253, 255, 266, 267, 268, 269, 271, 275, 276, 281, 283, 292, 293, 297, 299, 307, 308, 320, 324, 332, 334, 338, 341, 344, 347, 348, 352, 355, 358, 359, 365, 366, 369, 371, 376, 384, 385, 386, 388, 395, 400, 405, 410, 411, 413, 414, 415, 416, 421, 423, 428, 430, 432, 455, 461, 465, 466, 469, 470, 474, 475, 477, 478, 480, 481, 483], "py_reprleav": [23, 57], "pyexc_": 23, "complet": [23, 33, 34, 42, 59, 64, 66, 68, 73, 75, 76, 77, 87, 92, 94, 95, 100, 102, 103, 106, 117, 120, 126, 133, 136, 137, 139, 140, 151, 155, 157, 158, 159, 163, 166, 167, 169, 177, 181, 183, 186, 190, 193, 194, 196, 202, 203, 205, 206, 207, 208, 223, 226, 230, 233, 235, 245, 254, 255, 259, 260, 261, 262, 267, 268, 269, 271, 272, 276, 281, 283, 284, 292, 293, 295, 297, 299, 308, 316, 319, 322, 331, 332, 334, 337, 338, 340, 341, 342, 344, 348, 352, 353, 354, 358, 361, 362, 363, 365, 368, 369, 375, 376, 378, 380, 381, 384, 386, 388, 390, 394, 395, 408, 410, 411, 413, 416, 427, 428, 429, 430, 432, 434, 445, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "pyexc_baseexcept": [23, 57], "baseexcept": [23, 127, 139, 166, 213, 267, 352, 353, 381, 432, 436, 443, 450, 467, 468, 470, 473, 480, 481, 483], "pyexc_arithmeticerror": [23, 57], "arithmeticerror": [23, 186, 213, 450], "pyexc_assertionerror": [23, 57], "assertionerror": [23, 191, 213, 283, 362, 388, 389, 390, 407, 436, 450, 473, 482, 483], "pyexc_attributeerror": [23, 57, 75, 76], "attributeerror": [23, 49, 58, 68, 88, 93, 102, 151, 169, 176, 181, 213, 225, 226, 250, 255, 268, 283, 293, 299, 302, 319, 333, 344, 362, 367, 385, 388, 389, 390, 410, 411, 427, 428, 430, 436, 450, 456, 462, 464, 469, 473, 475, 476, 477, 478, 480, 483], "pyexc_blockingioerror": [23, 57], "blockingioerror": [23, 212, 213, 258, 293, 341, 427, 450, 476, 483], "pyexc_brokenpipeerror": [23, 57], "brokenpipeerror": [23, 137, 212, 213, 333, 450, 476, 483], "pyexc_buffererror": [23, 57], "pyexc_childprocesserror": [23, 57], "childprocesserror": [23, 212, 213, 293, 450, 476, 483], "pyexc_connectionabortederror": [23, 57], "connectionabortederror": [23, 212, 213, 450, 476], "pyexc_connectionerror": [23, 57], "connectionerror": [23, 213, 242, 443, 450, 476, 478], "pyexc_connectionrefusederror": [23, 57], "connectionrefusederror": [23, 212, 213, 450, 476], "pyexc_connectionreseterror": [23, 57], "connectionreseterror": [23, 137, 212, 213, 242, 450, 476, 483], "pyexc_eoferror": [23, 57], "eoferror": [23, 24, 41, 121, 127, 149, 153, 157, 213, 223, 225, 234, 270, 274, 283, 299, 335, 359, 450, 470], "pyexc_fileexistserror": [23, 57], "fileexistserror": [23, 200, 212, 213, 225, 258, 293, 296, 311, 332, 358, 422, 450, 476, 477, 483], "pyexc_filenotfounderror": [23, 57], "filenotfounderror": [23, 120, 140, 169, 212, 213, 250, 253, 268, 286, 293, 296, 320, 443, 450, 476, 478, 483], "pyexc_floatingpointerror": [23, 57], "floatingpointerror": [23, 213, 450], "pyexc_generatorexit": [23, 57], "generatorexit": [23, 95, 213, 428, 430, 450, 467, 468, 483], "pyexc_importerror": [23, 57, 100], "pyexc_indentationerror": [23, 57], "indentationerror": [23, 68, 86, 213, 450, 462, 483], "pyexc_indexerror": [23, 57], "indexerror": [23, 37, 38, 47, 60, 158, 160, 176, 196, 213, 236, 283, 299, 318, 319, 344, 345, 381, 389, 428, 430, 436, 442, 449, 450, 462, 475, 483], "pyexc_interruptederror": [23, 57], "interruptederror": [23, 212, 213, 225, 293, 328, 333, 337, 450, 476, 478, 483], "pyexc_isadirectoryerror": [23, 57], "isadirectoryerror": [23, 212, 213, 293, 450, 476, 483], "pyexc_keyerror": [23, 35, 57], "pyexc_keyboardinterrupt": [23, 57], "pyexc_lookuperror": [23, 57], "pyexc_modulenotfounderror": [23, 57], "modulenotfounderror": [23, 213, 250, 432, 479, 480, 483], "pyexc_nameerror": [23, 57], "nameerror": [23, 26, 68, 176, 213, 250, 429, 430, 436, 443, 449, 450, 462, 463, 464, 467, 474, 483], "pyexc_notadirectoryerror": [23, 57], "notadirectoryerror": [23, 212, 213, 293, 450, 476, 483], "pyexc_notimplementederror": [23, 57], "notimplementederror": [23, 133, 168, 183, 200, 213, 226, 243, 250, 267, 283, 293, 296, 318, 341, 386, 405, 422, 450, 477, 479, 483], "pyexc_oserror": [23, 57, 73], "pyexc_overflowerror": [23, 57], "overflowerror": [23, 25, 39, 47, 115, 157, 159, 183, 186, 193, 213, 225, 275, 304, 337, 340, 344, 365, 366, 428, 450, 464, 465, 468, 469, 471, 472, 476, 477, 483], "pyexc_permissionerror": [23, 57], "permissionerror": [23, 212, 213, 250, 293, 322, 339, 360, 362, 450, 476, 479, 483], "pyexc_processlookuperror": [23, 57], "processlookuperror": [23, 212, 213, 322, 450, 476], "pyexc_recursionerror": [23, 57, 478], "pyexc_referenceerror": [23, 57], "referenceerror": [23, 213, 402, 450, 463, 464], "runtimeerror": [23, 95, 107, 115, 121, 126, 127, 132, 137, 138, 139, 140, 166, 169, 170, 213, 218, 225, 258, 261, 268, 283, 293, 296, 319, 335, 344, 348, 352, 356, 362, 365, 386, 406, 422, 428, 430, 436, 443, 450, 465, 466, 467, 469, 474, 476, 478, 479, 480, 481, 483], "pyexc_stopasynciter": [23, 57], "stopasynciter": [23, 87, 191, 213, 225, 389, 427, 428, 430, 436, 483], "pyexc_stopiter": [23, 57], "stopiter": [23, 63, 68, 75, 87, 95, 113, 160, 191, 213, 225, 261, 274, 283, 344, 353, 389, 428, 430, 436, 440, 450, 464, 465, 467, 468, 472, 479, 480, 483], "pyexc_syntaxerror": [23, 57, 431], "pyexc_systemexit": [23, 57], "pyexc_taberror": [23, 57], "taberror": [23, 86, 213, 435, 450, 462, 474], "pyexc_timeouterror": [23, 57], "timeouterror": [23, 127, 139, 166, 212, 213, 283, 335, 337, 450, 472, 476, 483], "pyexc_unboundlocalerror": [23, 57], "unboundlocalerror": [23, 191, 213, 429, 450, 462, 483], "pyexc_unicodedecodeerror": [23, 57], "pyexc_unicodeencodeerror": [23, 57], "pyexc_unicodeerror": [23, 57], "pyexc_unicodetranslateerror": [23, 57], "pyexc_valueerror": [23, 57, 73, 469], "pyexc_zerodivisionerror": [23, 57, 73], "zerodivisionerror": [23, 92, 102, 183, 186, 213, 221, 283, 297, 333, 429, 430, 436, 443, 450, 451, 465, 471, 473, 475, 478, 482, 483], "3151": [23, 68, 213, 322, 328, 337, 465, 484], "alias": [23, 68, 94, 120, 158, 187, 195, 211, 213, 230, 266, 297, 303, 337, 340, 344, 376, 384, 387, 429, 435, 436, 440, 456, 461, 463, 465, 468, 472, 474, 475, 476, 477, 479, 482, 483], "pyexc_environmenterror": [23, 57], "pyexc_ioerror": [23, 57], "separ": [23, 33, 34, 55, 59, 63, 64, 68, 77, 79, 84, 85, 92, 94, 96, 100, 101, 102, 103, 106, 109, 112, 120, 127, 132, 136, 139, 146, 151, 155, 158, 167, 169, 175, 176, 177, 178, 183, 186, 190, 193, 196, 201, 202, 205, 208, 213, 220, 225, 226, 230, 245, 247, 248, 250, 252, 253, 258, 259, 262, 266, 267, 268, 269, 270, 271, 276, 283, 288, 292, 293, 297, 302, 303, 307, 313, 314, 319, 324, 331, 334, 335, 337, 338, 340, 341, 343, 344, 345, 347, 348, 358, 361, 362, 364, 365, 368, 369, 380, 386, 388, 390, 394, 395, 400, 402, 403, 422, 425, 426, 427, 428, 430, 431, 432, 434, 435, 436, 441, 452, 455, 456, 461, 462, 464, 466, 467, 468, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "preprocessor": [23, 42, 57, 68, 331, 458, 462, 469, 483], "ms_window": [23, 34], "pyexc_byteswarn": [23, 57], "byteswarn": [23, 34, 213, 400, 450, 480, 483], "pyexc_deprecationwarn": [23, 57], "deprecationwarn": [23, 68, 106, 112, 132, 166, 168, 188, 213, 252, 283, 293, 340, 347, 358, 362, 388, 400, 413, 428, 432, 435, 450, 455, 463, 465, 469, 472, 473, 474, 475, 477, 478, 479, 481, 483, 484], "pyexc_futurewarn": [23, 57], "futurewarn": [23, 213, 319, 400, 450, 465, 466, 469, 474, 480, 483], "pyexc_importwarn": [23, 57], "importwarn": [23, 188, 213, 388, 400, 432, 450, 467, 472, 474, 479, 483], "pyexc_pendingdeprecationwarn": [23, 57], "pendingdeprecationwarn": [23, 112, 188, 213, 388, 400, 450, 465, 468, 469, 478, 479, 480, 481, 482, 483], "pyexc_resourcewarn": [23, 57], "runtimewarn": [23, 45, 125, 126, 213, 337, 352, 388, 400, 450, 475, 481, 483], "pyexc_syntaxwarn": [23, 57], "syntaxwarn": [23, 213, 319, 362, 400, 435, 450, 465, 473, 474, 479, 481, 483], "pyexc_unicodewarn": [23, 57], "unicodewarn": [23, 213, 400, 450, 467, 475], "pyexc_userwarn": [23, 57], "userwarn": [23, 213, 229, 362, 400, 450, 483], "minim": [24, 45, 68, 73, 76, 84, 92, 102, 141, 151, 186, 190, 193, 214, 235, 248, 250, 254, 259, 273, 292, 299, 305, 319, 324, 333, 337, 339, 340, 362, 364, 379, 395, 456, 461, 462, 467, 479, 483], "emul": [24, 33, 68, 76, 79, 85, 93, 157, 159, 177, 181, 189, 193, 215, 258, 266, 271, 283, 292, 293, 302, 309, 320, 332, 333, 348, 352, 359, 464, 465, 468, 475, 476, 479, 481, 483], "io": [24, 33, 34, 68, 71, 79, 85, 87, 118, 123, 124, 125, 126, 136, 139, 149, 158, 164, 169, 187, 188, 190, 196, 213, 215, 218, 219, 225, 234, 235, 242, 245, 250, 251, 253, 254, 262, 270, 271, 288, 293, 296, 299, 308, 309, 338, 341, 344, 348, 352, 358, 360, 362, 378, 379, 389, 399, 407, 411, 421, 422, 425, 426, 428, 455, 467, 468, 469, 470, 471, 472, 473, 477, 479, 482, 483, 484], "pyfile_fromfd": [24, 57], "newlin": [24, 68, 79, 87, 102, 106, 120, 122, 143, 146, 149, 157, 159, 175, 177, 190, 193, 196, 207, 218, 225, 234, 247, 250, 258, 265, 267, 269, 270, 271, 278, 288, 296, 299, 307, 314, 319, 331, 337, 338, 344, 348, 356, 360, 364, 366, 377, 378, 381, 382, 394, 400, 411, 419, 421, 422, 427, 431, 435, 437, 449, 451, 452, 455, 463, 466, 467, 468, 469, 470, 472, 473, 477, 479, 480, 481, 482, 483, 484], "closefd": [24, 188, 225, 258, 283, 470, 483], "open": [24, 33, 34, 41, 51, 66, 68, 73, 78, 84, 87, 92, 95, 101, 106, 109, 112, 117, 120, 133, 136, 140, 142, 148, 149, 151, 155, 158, 160, 167, 169, 175, 177, 183, 184, 188, 189, 190, 200, 207, 208, 212, 213, 214, 215, 218, 219, 223, 225, 230, 234, 235, 240, 242, 243, 245, 247, 248, 249, 250, 253, 254, 255, 258, 265, 266, 267, 268, 269, 270, 271, 276, 278, 280, 281, 283, 288, 293, 294, 295, 296, 299, 301, 302, 305, 309, 313, 314, 320, 322, 326, 328, 330, 331, 333, 335, 336, 337, 340, 341, 342, 344, 348, 349, 352, 356, 358, 359, 360, 362, 365, 369, 375, 376, 378, 379, 381, 384, 386, 389, 390, 395, 397, 401, 403, 405, 407, 411, 413, 414, 416, 419, 421, 422, 425, 426, 427, 428, 435, 438, 440, 443, 446, 450, 451, 452, 455, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "comprehens": [24, 68, 84, 85, 87, 100, 112, 149, 191, 235, 255, 264, 299, 344, 369, 429, 430, 431, 435, 440, 445, 457, 466, 467, 469, 470, 472, 473, 476, 477, 478, 480, 481, 482, 483, 484], "pleas": [24, 33, 71, 100, 101, 102, 105, 106, 110, 120, 128, 137, 151, 167, 176, 223, 230, 242, 248, 250, 267, 268, 269, 288, 293, 305, 314, 319, 322, 332, 335, 337, 340, 341, 348, 352, 358, 361, 384, 400, 407, 413, 428, 430, 434, 441, 443, 457, 461, 462, 463, 465, 467, 470, 474, 476, 477, 478, 479, 480, 481, 482, 483], "pyobject_asfiledescriptor": [24, 57], "fileno": [24, 59, 84, 102, 142, 149, 188, 215, 218, 235, 242, 258, 278, 283, 293, 295, 328, 329, 333, 337, 338, 341, 359, 360, 361, 369, 464, 467, 477, 483], "pyfile_getlin": [24, 57], "readlin": [24, 34, 66, 68, 79, 84, 95, 100, 109, 126, 136, 137, 140, 143, 151, 155, 158, 170, 188, 190, 204, 207, 213, 218, 223, 225, 248, 254, 258, 268, 278, 293, 296, 297, 299, 315, 331, 338, 363, 369, 378, 382, 389, 395, 399, 421, 422, 428, 438, 440, 443, 446, 447, 448, 455, 456, 462, 463, 464, 465, 467, 468, 469, 475, 477, 480, 483], "greater": [24, 33, 34, 39, 45, 56, 63, 64, 76, 92, 101, 102, 109, 115, 133, 139, 144, 146, 147, 177, 183, 186, 190, 196, 208, 209, 226, 230, 242, 248, 259, 267, 269, 275, 293, 297, 322, 334, 335, 344, 352, 358, 362, 365, 376, 377, 382, 384, 388, 410, 428, 435, 436, 462, 464, 465, 466, 467, 478, 479, 480, 482, 483], "partial": [24, 34, 68, 88, 95, 109, 110, 118, 126, 127, 129, 136, 177, 181, 197, 206, 207, 224, 225, 248, 254, 255, 269, 270, 273, 275, 284, 322, 324, 337, 338, 344, 348, 358, 413, 427, 462, 465, 466, 468, 469, 470, 471, 476, 477, 478, 479, 480, 481, 483, 484], "less": [24, 25, 33, 34, 39, 56, 59, 64, 68, 73, 76, 78, 85, 100, 102, 103, 106, 108, 109, 112, 133, 139, 147, 149, 151, 153, 158, 177, 183, 186, 187, 193, 196, 215, 226, 228, 234, 235, 236, 244, 247, 251, 258, 259, 261, 267, 270, 278, 283, 293, 297, 299, 307, 308, 319, 332, 333, 337, 340, 341, 344, 345, 348, 352, 358, 362, 365, 366, 369, 375, 376, 377, 381, 386, 388, 395, 400, 410, 427, 428, 430, 436, 463, 464, 465, 466, 467, 468, 471, 474, 475, 477, 478, 479, 481, 482, 483], "pyfile_setopencodehook": [24, 258, 483], "py_opencodehookfunct": 24, "open_cod": [24, 258, 483], "userdata": [24, 59], "pyunicodeobject": [24, 63, 64, 96, 472, 473], "hook": [24, 31, 32, 34, 59, 66, 68, 87, 93, 98, 100, 115, 142, 155, 176, 188, 208, 216, 218, 225, 242, 254, 280, 302, 307, 308, 315, 331, 340, 344, 352, 363, 365, 382, 385, 399, 400, 423, 428, 430, 436, 438, 455, 456, 462, 464, 467, 469, 472, 473, 474, 476, 478, 479, 480, 482, 483, 484], "py_initi": [24, 31, 33, 34, 35, 57, 59, 72, 73, 86, 461, 472, 475, 480, 482, 483], "audit": [24, 58, 59, 68, 98, 115, 121, 142, 176, 185, 227, 274, 293, 335, 344, 352, 353, 385, 395, 450, 455, 465, 472, 483], "setopencodehook": [24, 142], "pyfile_writeobject": [24, 49, 57], "py_print_raw": [24, 49], "pyfile_writestr": [24, 57], "pyfloatobject": [25, 76], "pyfloat_typ": [25, 57], "pyfloat_check": 25, "pyfloat_checkexact": 25, "pyfloat_fromstr": [25, 57], "pyfloat_fromdoubl": [25, 57], "pyfloat_asdoubl": [25, 57, 481], "pyfloat": 25, "upon": [25, 33, 41, 64, 66, 72, 73, 85, 93, 101, 140, 144, 151, 155, 158, 159, 169, 173, 177, 186, 188, 189, 193, 242, 244, 247, 248, 250, 271, 293, 297, 299, 328, 329, 331, 333, 334, 340, 341, 347, 352, 362, 380, 400, 410, 426, 428, 430, 432, 463, 468, 476, 477, 479, 481, 483], "pyfloat_as_doubl": 25, "pyfloat_getinfo": [25, 57, 468], "structseq": [25, 469, 483], "minimum": [25, 34, 42, 64, 76, 93, 102, 111, 115, 126, 133, 141, 176, 177, 186, 197, 257, 261, 275, 293, 328, 334, 341, 344, 352, 362, 365, 376, 383, 384, 386, 388, 456, 464, 465, 468, 475, 476, 477, 479, 480, 483], "thin": [25, 59, 68, 226, 247, 275, 287, 333, 369, 456, 473, 483], "pyfloat_getmax": [25, 57, 468], "finit": [25, 84, 92, 95, 106, 186, 221, 261, 275, 344, 352, 428, 483], "dbl_max": [25, 352], "pyfloat_getmin": [25, 57, 468], "dbl_min": [25, 352], "routin": [25, 33, 41, 63, 68, 72, 73, 75, 86, 93, 96, 109, 140, 141, 173, 177, 184, 195, 215, 250, 254, 258, 266, 281, 293, 308, 341, 366, 391, 404, 465, 466, 480, 483], "suffix": [25, 64, 68, 71, 102, 112, 176, 200, 245, 248, 250, 259, 267, 268, 269, 276, 293, 296, 319, 330, 335, 344, 360, 395, 422, 430, 431, 456, 461, 462, 464, 473, 475, 476, 481, 483], "appear": [25, 33, 34, 45, 58, 59, 66, 68, 75, 76, 84, 92, 94, 95, 99, 101, 102, 106, 112, 120, 122, 133, 151, 158, 163, 167, 176, 177, 181, 186, 190, 191, 193, 196, 199, 202, 203, 205, 222, 225, 230, 235, 247, 248, 250, 255, 259, 266, 268, 269, 271, 272, 281, 283, 293, 297, 308, 314, 319, 331, 333, 335, 337, 340, 344, 345, 358, 364, 369, 376, 385, 386, 395, 400, 402, 408, 410, 413, 416, 420, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 455, 461, 463, 465, 467, 468, 469, 471, 474, 475, 477, 478, 479, 480, 481, 483], "ieee": [25, 154, 186, 262, 275, 294, 337, 347, 362, 430, 444, 456, 466, 468, 471, 473, 475, 479, 480, 483], "754": [25, 154, 186, 262, 275, 347, 362, 430, 444, 456, 466, 468, 471, 473, 475, 479, 480, 483], "binary16": [25, 347], "half": [25, 92, 102, 133, 177, 183, 221, 226, 275, 295, 328, 344, 347, 435, 469, 474, 479, 483], "binary32": [25, 347], "binary64": [25, 347, 444], "inf": [25, 121, 154, 186, 225, 262, 275, 344, 345, 352, 468, 469, 473, 475, 478, 479, 483], "nan": [25, 68, 85, 121, 154, 186, 225, 275, 285, 343, 344, 345, 352, 430, 442, 456, 466, 468, 469, 472, 473, 475, 476, 478, 479, 483], "thing": [25, 33, 63, 68, 72, 73, 75, 76, 77, 84, 85, 92, 94, 95, 99, 101, 102, 103, 109, 110, 120, 133, 157, 159, 167, 169, 176, 181, 193, 200, 206, 215, 225, 244, 250, 267, 268, 275, 283, 292, 299, 319, 334, 341, 346, 352, 358, 365, 369, 374, 376, 384, 386, 387, 388, 389, 390, 395, 399, 400, 403, 430, 431, 434, 461, 462, 463, 464, 465, 466, 467, 470, 474, 476, 477, 481, 483], "larger": [25, 42, 49, 56, 76, 85, 92, 93, 101, 117, 133, 151, 176, 177, 183, 184, 186, 215, 225, 258, 259, 275, 278, 284, 293, 319, 322, 340, 341, 344, 345, 362, 365, 422, 428, 430, 435, 461, 462, 464, 465, 467, 469, 470, 474, 475, 478, 479, 480, 481, 482, 483], "smaller": [25, 42, 64, 92, 93, 106, 133, 176, 183, 186, 190, 191, 226, 259, 270, 275, 293, 299, 308, 345, 347, 355, 369, 376, 382, 384, 394, 411, 428, 430, 435, 455, 463, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 479, 481, 483], "accident": [25, 33, 102, 186, 190, 193, 213, 436, 463, 465, 468, 478, 483], "ala": 25, "le": [25, 95, 109, 158, 200, 291, 463, 471, 476], "littl": [25, 31, 64, 95, 101, 102, 103, 106, 107, 109, 141, 146, 153, 158, 176, 177, 178, 186, 190, 191, 193, 230, 243, 268, 283, 292, 295, 319, 333, 337, 344, 347, 352, 382, 384, 398, 405, 426, 441, 443, 452, 462, 463, 464, 468, 475, 476, 477, 483], "expon": [25, 89, 186, 225, 275, 318, 344, 345, 347, 352, 378, 435, 466, 468, 476, 481, 483], "py_big_endian": 25, "processor": [25, 35, 73, 93, 109, 283, 288, 292, 295, 303, 314, 322, 337, 395, 415, 428, 462, 466, 467, 481, 482, 483], "ok": [25, 73, 110, 177, 189, 193, 223, 241, 242, 243, 245, 248, 292, 335, 341, 373, 375, 386, 388, 407, 441, 466, 473, 474, 475, 483], "infin": [25, 106, 186, 225, 262, 275, 344, 345, 352, 466, 468, 475, 483], "pyfloat_pack2": [25, 473, 483], "pyfloat_pack4": [25, 473, 483], "pyfloat_pack8": [25, 473, 483], "refus": [25, 103, 212, 213, 272, 288, 330, 335, 337, 341, 358, 422, 472, 483], "pyfloat_unpack2": [25, 473, 483], "pyfloat_unpack4": [25, 473, 483], "pyfloat_unpack8": [25, 473, 483], "pyeval_getfram": [26, 33, 53, 57, 483], "pythreadstate_getfram": [26, 33, 53, 57, 473, 482, 483], "reflect": [26, 32, 65, 68, 85, 102, 117, 120, 177, 183, 193, 215, 225, 226, 247, 250, 255, 284, 292, 293, 308, 320, 337, 340, 341, 344, 347, 352, 369, 384, 385, 386, 405, 411, 421, 427, 428, 429, 455, 468, 474, 475, 476, 478, 481, 482, 483], "pyframe_typ": [26, 473, 483], "frametyp": [26, 385, 483], "frameobject": [26, 472, 473, 483], "pyframe_check": [26, 473, 483], "pyframe_getback": [26, 473, 482, 483], "outer": [26, 85, 139, 169, 186, 191, 207, 226, 237, 255, 352, 427, 428, 429, 430, 435, 436, 470, 473, 474, 475, 476, 482, 483], "pyframe_getbuiltin": [26, 473, 483], "f_builtin": [26, 255, 428, 473, 483], "pyframe_getcod": [26, 57, 473, 482, 483], "pyframe_getgener": [26, 473, 483], "pyframe_getglob": [26, 473, 483], "f_global": [26, 255, 428, 473, 483], "pyframe_getlasti": [26, 473, 483], "f_lasti": [26, 191, 255, 428, 465, 472, 473, 483], "pyframe_getvar": [26, 474, 483], "pyframe_getvarstr": [26, 474, 483], "pyframe_getloc": [26, 473, 483], "f_local": [26, 255, 385, 428, 473, 483], "523": [26, 33, 68, 465, 473, 474, 482, 483], "_pyinterpreterfram": [26, 33, 473, 483], "pyunstable_interpreterframe_getcod": [26, 483], "pyunstable_interpreterframe_getlasti": [26, 483], "pyunstable_interpreterframe_getlin": [26, 483], "pyfunctionobject": [27, 474, 483], "pyfunction_typ": [27, 483], "functiontyp": [27, 122, 385, 472, 483], "pyfunction_check": 27, "pyfunction_new": 27, "annot": [27, 68, 85, 87, 97, 113, 122, 181, 191, 226, 248, 254, 255, 266, 300, 351, 362, 380, 386, 402, 426, 427, 428, 430, 431, 445, 470, 472, 473, 474, 475, 476, 478, 481, 482, 483], "closur": [27, 58, 66, 76, 126, 169, 170, 191, 225, 250, 255, 292, 344, 428, 473, 476, 479, 483], "co_qualnam": [27, 255, 428, 483], "pyfunction_newwithqualnam": 27, "pyfunction_getcod": 27, "pyfunction_getglob": 27, "pyfunction_getmodul": 27, "pyfunction_getdefault": 27, "pyfunction_setdefault": 27, "pyfunction_setvectorcal": [27, 474, 483], "func": [27, 33, 34, 35, 44, 53, 59, 63, 66, 78, 85, 87, 88, 93, 95, 100, 120, 122, 126, 139, 140, 144, 160, 176, 177, 212, 226, 255, 261, 266, 267, 283, 292, 308, 314, 332, 340, 344, 352, 353, 362, 365, 367, 369, 380, 386, 388, 402, 420, 427, 429, 443, 466, 468, 470, 475, 476, 479, 481, 483], "preserv": [27, 33, 42, 68, 73, 84, 85, 95, 102, 103, 112, 120, 167, 183, 186, 190, 193, 196, 201, 203, 205, 208, 213, 255, 261, 262, 268, 269, 292, 293, 297, 299, 331, 332, 340, 344, 358, 362, 368, 385, 386, 388, 402, 411, 413, 427, 428, 430, 435, 440, 461, 462, 463, 464, 465, 467, 468, 469, 475, 476, 477, 478, 480, 481, 482, 483], "unalt": [27, 483], "pyfunction_getclosur": 27, "pyfunction_setclosur": 27, "pyfunction_getannot": [27, 483], "pyfunction_setannot": 27, "pyfunction_addwatch": 27, "pyfunction_watchcallback": 27, "pyfunction_clearwatch": 27, "pyfunction_watchev": 27, "pyfunction_event_cr": 27, "pyfunction_event_destroy": 27, "pyfunction_event_modify_cod": 27, "pyfunction_event_modify_default": 27, "pyfunction_event_modify_kwdefault": 27, "optim": [27, 34, 42, 58, 63, 66, 68, 76, 85, 96, 106, 128, 133, 139, 141, 158, 163, 177, 191, 211, 225, 235, 243, 250, 255, 265, 293, 299, 300, 308, 311, 337, 340, 352, 362, 365, 366, 422, 427, 428, 436, 456, 461, 462, 464, 465, 466, 467, 468, 469, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "emit": [27, 33, 34, 45, 58, 76, 96, 101, 102, 115, 126, 132, 135, 139, 177, 183, 188, 191, 213, 245, 261, 267, 269, 293, 299, 340, 348, 352, 362, 376, 381, 386, 388, 400, 411, 413, 417, 428, 430, 436, 455, 465, 468, 471, 474, 475, 477, 479, 480, 481, 482, 483], "decis": [27, 102, 157, 255, 352, 376, 427, 436, 462, 466, 467, 469, 475, 476, 483], "involv": [28, 42, 45, 63, 73, 76, 100, 103, 167, 169, 177, 186, 193, 213, 226, 243, 283, 292, 299, 308, 332, 340, 341, 344, 347, 362, 381, 395, 412, 428, 430, 431, 432, 436, 462, 469, 477, 478, 480, 481, 483], "circular": [28, 33, 35, 73, 76, 85, 262, 384, 390, 428, 463, 478, 480, 483], "atom": [28, 68, 84, 227, 283, 293, 316, 319, 337, 344, 365, 366, 431, 433, 469, 470, 473, 476, 483], "tp_flag": [28, 61, 63, 75, 76, 100, 191, 468, 482, 483], "py_tpflags_have_gc": [28, 61, 63, 76, 100, 464, 473, 483], "tp_travers": [28, 61, 63, 68, 75, 76, 227, 473, 482, 483], "tp_clear": [28, 45, 63, 75, 76, 100, 483], "conform": [28, 63, 68, 94, 101, 126, 146, 151, 167, 183, 186, 201, 203, 208, 209, 211, 242, 245, 247, 250, 252, 266, 267, 273, 299, 314, 352, 394, 411, 413, 419, 425, 428, 456, 466, 470, 471, 476, 477, 479, 480, 481, 482, 483], "pyobject_gc_new": [28, 63, 100, 464, 481], "pyobject_gc_newvar": [28, 63, 100, 464, 481], "pyobject_gc_track": [28, 57, 464, 483], "pyobject_gc_untrack": [28, 57, 63, 75, 76, 100, 464, 473, 483], "pyobject_gc_del": [28, 57, 63, 100, 464, 481, 483], "pytype_readi": [28, 45, 57, 61, 63, 75, 76, 100, 473, 483], "indirect": [28, 49, 58, 61, 64, 73, 85, 93, 176, 213, 250, 255, 293, 307, 314, 352, 402, 426, 428, 429, 430, 432, 470, 477, 480, 481, 483], "pytype_fromspecwithbas": [28, 57, 61, 63, 472, 474, 483], "pytype_fromspec": [28, 45, 57, 58, 61, 63, 76, 100, 474, 481, 482, 483], "popul": [28, 35, 45, 68, 101, 102, 120, 122, 183, 191, 207, 250, 267, 284, 299, 318, 324, 344, 385, 400, 411, 413, 428, 432, 461, 465, 472, 473, 479, 483], "child": [28, 33, 59, 85, 101, 102, 120, 132, 133, 137, 160, 212, 213, 248, 250, 253, 278, 283, 293, 296, 309, 314, 322, 328, 333, 337, 338, 348, 369, 376, 386, 389, 390, 410, 411, 413, 422, 428, 462, 466, 467, 468, 469, 474, 475, 476, 477, 479, 480, 481, 482, 483], "analog": [28, 64, 75, 85, 96, 102, 186, 255, 267, 268, 275, 283, 299, 364, 384, 428, 430, 432, 464, 466, 467, 469, 475, 477, 481, 483], "pyunstable_object_gc_newwithextradata": [28, 483], "extra_s": [28, 452], "final": [28, 32, 34, 45, 49, 59, 61, 63, 68, 73, 74, 76, 84, 85, 94, 95, 96, 101, 102, 103, 106, 113, 115, 122, 126, 133, 135, 138, 139, 141, 144, 158, 176, 181, 182, 186, 188, 190, 191, 193, 197, 203, 213, 235, 245, 250, 255, 261, 265, 271, 283, 292, 293, 296, 297, 299, 308, 311, 314, 315, 319, 332, 334, 338, 340, 341, 352, 353, 354, 358, 361, 362, 364, 365, 369, 376, 378, 381, 382, 384, 385, 386, 388, 399, 400, 406, 414, 422, 428, 429, 430, 431, 432, 435, 436, 443, 446, 456, 462, 463, 464, 465, 466, 468, 469, 470, 472, 473, 475, 476, 478, 479, 480, 481, 482, 484], "reserv": [28, 49, 61, 68, 94, 255, 259, 299, 314, 319, 322, 333, 339, 344, 365, 405, 410, 419, 422, 426, 428, 436, 443, 455, 463, 468, 470, 475, 480, 481, 483], "decid": [28, 34, 76, 85, 95, 101, 132, 139, 144, 157, 169, 183, 193, 243, 269, 337, 338, 352, 365, 386, 428, 432, 436, 467, 469, 474, 483], "pyobject_gc_res": [28, 483], "unexpect": [28, 101, 102, 170, 193, 205, 208, 230, 250, 267, 288, 319, 322, 333, 335, 337, 341, 343, 362, 388, 395, 400, 422, 427, 428, 430, 435, 440, 443, 461, 464, 469, 472, 474, 476, 478, 480, 481, 482, 483], "becom": [28, 33, 34, 63, 64, 66, 73, 84, 85, 92, 93, 94, 95, 100, 102, 106, 107, 109, 112, 126, 132, 133, 139, 141, 158, 177, 193, 196, 202, 205, 225, 247, 255, 258, 261, 283, 292, 293, 297, 299, 308, 311, 318, 328, 329, 331, 332, 333, 341, 344, 345, 348, 352, 358, 365, 369, 376, 384, 386, 395, 402, 422, 427, 428, 429, 430, 436, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "near": [28, 101, 167, 184, 186, 190, 247, 267, 269, 275, 283, 293, 297, 428, 436, 464, 465, 467, 468, 469, 470, 474, 475, 478, 483], "pyobject_is_gc": [28, 63, 75, 482, 483], "pyobject_gc_istrack": [28, 57, 482, 483], "gc": [28, 45, 61, 63, 68, 73, 76, 78, 85, 87, 98, 100, 142, 254, 255, 315, 352, 362, 367, 382, 402, 411, 428, 452, 456, 462, 465, 467, 469, 474, 475, 483], "is_track": [28, 227, 469], "pyobject_gc_isfin": [28, 57, 482, 483], "is_fin": [28, 33, 227, 352, 450, 478, 481, 482, 483], "_pyobject_gc_track": [28, 481, 483], "_pyobject_gc_untrack": [28, 481, 483], "visitproc": [28, 57, 63, 76, 100, 482], "visitor": 28, "travers": [28, 31, 45, 63, 76, 95, 100, 112, 122, 163, 184, 196, 205, 213, 250, 252, 253, 267, 293, 302, 344, 376, 388, 412, 413, 422, 432, 436, 462, 464, 465, 467, 468, 469, 473, 474, 478, 481, 482, 483], "traverseproc": [28, 45, 57, 63, 75, 76], "visit": [28, 63, 76, 95, 100, 122, 183, 261, 293, 313, 332, 342, 415, 461, 462, 464, 465, 468, 476, 482, 483], "simplifi": [28, 33, 42, 66, 93, 95, 106, 110, 124, 128, 135, 158, 169, 183, 197, 201, 216, 226, 250, 255, 283, 319, 337, 338, 375, 376, 378, 402, 410, 427, 435, 461, 464, 465, 466, 467, 468, 469, 470, 475, 476, 477, 478, 479, 480, 481, 482, 483], "py_visit": [28, 63, 76, 100, 482], "my_travers": [28, 100], "noddi": 28, "foo": [28, 78, 79, 85, 86, 87, 88, 89, 94, 101, 102, 104, 106, 110, 116, 120, 122, 151, 155, 167, 176, 193, 196, 200, 228, 243, 247, 250, 255, 262, 266, 267, 268, 272, 283, 288, 291, 292, 293, 294, 296, 297, 299, 302, 304, 308, 311, 319, 334, 340, 344, 358, 362, 385, 386, 388, 389, 390, 405, 407, 411, 412, 413, 422, 423, 427, 430, 432, 435, 436, 441, 462, 464, 465, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483], "bar": [28, 51, 85, 87, 94, 101, 102, 104, 106, 120, 122, 155, 167, 176, 177, 200, 228, 243, 247, 250, 262, 267, 268, 283, 288, 291, 292, 293, 294, 296, 297, 302, 304, 308, 311, 313, 334, 340, 344, 358, 362, 369, 374, 376, 385, 386, 388, 389, 390, 407, 422, 423, 425, 427, 432, 434, 435, 436, 441, 462, 468, 483], "inquiri": [28, 45, 57, 63, 75, 76, 388], "drop": [28, 63, 68, 76, 84, 93, 94, 101, 109, 133, 160, 193, 212, 225, 250, 254, 261, 269, 283, 305, 321, 325, 341, 344, 348, 352, 364, 368, 369, 376, 388, 394, 462, 463, 464, 466, 467, 468, 470, 475, 477, 478, 483], "pygc_collect": [28, 57, 482, 483], "uncondit": [28, 115, 247, 283, 288, 293, 297, 334, 353, 388, 390, 428, 435, 455, 469, 470, 475, 476, 477, 478, 480, 482, 483], "unreach": [28, 212, 227, 386, 428, 480, 482, 483], "pygc_en": [28, 57, 472, 483], "pygc_dis": [28, 57, 472, 483], "pygc_isen": [28, 57, 472, 483], "isen": [28, 227], "pyunstable_gc_visitobject": 28, "gcvisitobjects_t": 28, "live": [28, 63, 67, 73, 84, 102, 151, 183, 207, 223, 247, 248, 250, 251, 253, 255, 283, 293, 299, 305, 340, 341, 358, 394, 400, 402, 410, 425, 428, 446, 461, 462, 463, 464, 470, 475, 483], "capabl": [28, 64, 76, 92, 93, 95, 102, 106, 126, 169, 177, 186, 193, 212, 234, 245, 248, 250, 251, 253, 255, 257, 258, 259, 272, 282, 283, 288, 292, 305, 307, 320, 375, 413, 415, 422, 430, 455, 464, 465, 466, 467, 475, 476, 477, 478, 483], "behaviour": [28, 31, 33, 49, 63, 68, 84, 85, 95, 101, 102, 106, 126, 169, 189, 213, 215, 217, 243, 255, 258, 267, 268, 269, 283, 292, 293, 299, 311, 319, 320, 328, 331, 333, 337, 338, 340, 344, 348, 352, 364, 384, 390, 394, 395, 400, 413, 416, 419, 428, 430, 432, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 476, 477, 479, 480, 483], "multipl": [28, 31, 33, 34, 45, 47, 49, 63, 64, 68, 71, 73, 75, 76, 84, 87, 92, 94, 95, 96, 101, 103, 105, 106, 109, 110, 115, 116, 120, 121, 122, 124, 126, 135, 137, 143, 149, 151, 158, 160, 163, 167, 169, 177, 181, 183, 186, 187, 189, 193, 199, 205, 209, 213, 219, 221, 225, 226, 228, 230, 231, 234, 235, 245, 247, 250, 251, 253, 254, 255, 258, 261, 267, 268, 270, 271, 275, 276, 278, 282, 283, 284, 292, 293, 297, 299, 302, 307, 314, 319, 320, 329, 330, 331, 335, 337, 338, 340, 341, 342, 343, 344, 347, 352, 353, 356, 358, 362, 365, 369, 375, 376, 377, 380, 384, 386, 388, 400, 402, 413, 415, 419, 427, 428, 429, 430, 431, 432, 435, 436, 440, 441, 444, 455, 456, 461, 462, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482, 483], "pygen_new": 29, "pygen_newwithqualnam": 29, "pygenobject": 29, "pygen_typ": 29, "pygen_check": 29, "pygen_checkexact": 29, "tp_hash": [30, 49, 63, 75, 468], "py_hash_t": [30, 49, 63, 75, 475], "py_uhash_t": 30, "pyhash_funcdef": 30, "pyhash_getfuncdef": 30, "hash_bit": [30, 352], "seed_bit": [30, 352], "seed": [30, 33, 34, 87, 293, 318, 341, 343, 352, 426, 455, 469, 475, 482, 483], "456": [30, 68, 73, 102, 186], "secur": [30, 68, 85, 102, 118, 126, 164, 174, 176, 223, 242, 243, 244, 248, 254, 256, 269, 270, 272, 283, 285, 288, 293, 299, 305, 314, 326, 331, 334, 335, 337, 344, 352, 358, 395, 405, 411, 412, 413, 414, 419, 420, 458, 462, 463, 464, 465, 467, 468, 475, 476, 479, 484], "interchang": [30, 68, 102, 117, 143, 153, 183, 184, 186, 213, 235, 267, 336, 344, 347, 369, 386, 428, 435, 462, 468, 475, 476], "algorithm": [30, 33, 42, 68, 84, 85, 87, 103, 106, 109, 119, 126, 133, 141, 146, 149, 151, 158, 173, 182, 183, 186, 190, 193, 202, 208, 222, 225, 230, 235, 248, 254, 258, 259, 261, 266, 269, 275, 280, 281, 308, 337, 341, 344, 352, 364, 395, 422, 423, 430, 440, 456, 462, 464, 465, 467, 469, 471, 472, 475, 476, 479, 480, 481, 482, 483], "pyimport_importmodul": [31, 57, 73, 79, 463, 468, 470, 472, 474, 483], "pyimport_import": [31, 57, 72, 468], "pyimport_importmodulenoblock": [31, 57, 468, 470, 474, 476, 483], "alia": [31, 40, 68, 85, 87, 94, 102, 122, 133, 137, 153, 158, 161, 176, 178, 183, 191, 195, 197, 205, 213, 218, 228, 230, 243, 250, 254, 255, 283, 287, 292, 293, 297, 319, 322, 328, 329, 333, 337, 340, 348, 351, 353, 359, 365, 384, 385, 386, 403, 405, 406, 419, 422, 423, 427, 429, 436, 456, 470, 472, 474, 477, 479, 480, 482, 483], "switch": [31, 33, 35, 61, 64, 68, 75, 84, 100, 109, 110, 111, 112, 128, 133, 137, 158, 193, 225, 230, 243, 245, 247, 292, 305, 319, 322, 324, 340, 344, 345, 352, 358, 384, 412, 432, 441, 450, 455, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483], "pyimport_importmoduleex": [31, 476], "fromlist": [31, 121, 191, 225, 250, 483], "best": [31, 55, 64, 68, 84, 92, 95, 100, 101, 102, 122, 141, 174, 183, 186, 188, 190, 193, 194, 195, 205, 223, 225, 226, 230, 234, 235, 242, 247, 248, 255, 270, 283, 288, 292, 293, 305, 307, 308, 331, 335, 337, 340, 344, 352, 358, 367, 369, 375, 384, 386, 403, 425, 428, 432, 456, 461, 462, 466, 467, 470, 474, 475, 477, 478, 479, 482, 483], "__import__": [31, 191, 225, 250, 268, 299, 428, 432, 450, 468, 471, 476, 479, 482, 483], "top": [31, 33, 42, 68, 73, 84, 85, 92, 94, 95, 96, 101, 102, 106, 110, 115, 120, 135, 139, 142, 151, 152, 158, 167, 170, 176, 177, 179, 185, 189, 190, 191, 193, 207, 213, 225, 226, 230, 243, 247, 248, 250, 251, 255, 257, 266, 276, 285, 293, 296, 299, 302, 304, 305, 308, 312, 313, 314, 324, 341, 342, 351, 352, 358, 362, 365, 369, 371, 375, 376, 384, 385, 388, 389, 399, 413, 419, 420, 422, 427, 429, 432, 435, 436, 440, 450, 451, 455, 462, 463, 464, 465, 467, 468, 469, 470, 472, 474, 475, 476, 477, 479, 480, 481, 482, 483], "packag": [31, 33, 34, 63, 64, 68, 70, 74, 77, 79, 80, 84, 85, 87, 93, 96, 101, 102, 111, 112, 114, 143, 151, 160, 173, 176, 183, 192, 193, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 210, 212, 225, 230, 242, 247, 250, 253, 254, 255, 261, 267, 268, 269, 276, 279, 280, 281, 283, 285, 307, 312, 313, 324, 330, 334, 335, 340, 341, 352, 354, 355, 362, 369, 375, 380, 384, 385, 386, 388, 389, 390, 392, 399, 400, 411, 414, 421, 422, 423, 425, 433, 436, 438, 445, 453, 454, 455, 456, 458, 459, 460, 462, 464, 466, 469, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484], "submodul": [31, 63, 68, 87, 158, 184, 193, 225, 250, 302, 324, 380, 422, 436, 450, 455, 467, 470, 471, 477, 480, 483], "incomplet": [31, 61, 64, 68, 79, 118, 146, 157, 158, 180, 183, 247, 261, 268, 314, 328, 358, 422, 465, 466, 469, 470, 474, 476, 477, 483], "pyimport_importmodulelevelobject": [31, 57], "pyimport_importmodulelevel": [31, 57, 476], "higher": [31, 33, 56, 68, 95, 98, 101, 102, 103, 115, 126, 140, 146, 169, 177, 186, 191, 202, 204, 224, 225, 230, 242, 254, 258, 261, 267, 268, 269, 270, 279, 281, 282, 283, 288, 293, 299, 305, 309, 325, 332, 337, 340, 341, 344, 352, 358, 359, 365, 382, 386, 389, 395, 400, 413, 463, 464, 467, 468, 475, 476, 477, 480, 483], "absolut": [31, 33, 34, 47, 61, 63, 68, 72, 76, 84, 101, 113, 126, 139, 141, 144, 151, 153, 155, 186, 191, 193, 213, 225, 230, 242, 250, 251, 257, 258, 268, 269, 270, 275, 278, 292, 293, 296, 324, 331, 332, 335, 340, 344, 345, 352, 354, 358, 366, 369, 382, 384, 386, 394, 399, 405, 415, 422, 425, 430, 432, 436, 446, 450, 455, 456, 461, 462, 466, 468, 469, 470, 474, 475, 476, 477, 478, 480, 482, 483, 484], "__builtins__": [31, 96, 148, 225, 255, 429, 450, 470, 472, 483], "instal": [31, 33, 34, 35, 42, 68, 72, 76, 79, 84, 85, 92, 96, 98, 102, 110, 111, 112, 132, 135, 144, 163, 184, 188, 192, 212, 214, 230, 235, 247, 250, 251, 254, 261, 267, 269, 276, 311, 315, 320, 333, 334, 340, 341, 344, 348, 350, 352, 354, 361, 369, 375, 382, 384, 388, 395, 399, 400, 405, 421, 426, 432, 453, 455, 456, 458, 460, 463, 464, 465, 467, 468, 469, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484], "environ": [31, 33, 34, 42, 63, 66, 68, 84, 85, 87, 93, 101, 102, 109, 110, 111, 118, 126, 151, 158, 160, 163, 176, 177, 182, 186, 188, 192, 210, 214, 225, 228, 230, 235, 245, 247, 251, 254, 266, 268, 280, 292, 295, 297, 299, 306, 308, 309, 311, 313, 315, 325, 332, 337, 338, 344, 348, 352, 355, 358, 362, 366, 369, 380, 382, 388, 389, 395, 400, 403, 405, 407, 410, 420, 428, 429, 432, 438, 448, 453, 455, 456, 457, 458, 459, 462, 463, 464, 465, 466, 468, 470, 471, 472, 474, 475, 476, 477, 480, 481, 482, 483], "pyimport_reloadmodul": [31, 57, 483], "reload": [31, 85, 94, 112, 243, 247, 250, 352, 362, 382, 432, 450, 465, 470, 474, 477, 480, 483], "pyimport_addmoduleobject": [31, 57], "pyimport_addmodul": [31, 57, 73], "pyimport_execcodemodul": [31, 57], "danger": [31, 59, 61, 85, 283, 292, 293, 296, 341, 358, 434, 463, 466, 467, 472, 473, 474, 481, 482, 483], "know": [31, 33, 59, 63, 73, 76, 77, 85, 93, 95, 99, 101, 102, 103, 106, 109, 110, 117, 120, 132, 139, 151, 161, 176, 178, 181, 190, 193, 195, 200, 201, 208, 243, 245, 250, 259, 266, 268, 269, 271, 272, 283, 292, 293, 330, 332, 337, 341, 344, 352, 369, 376, 382, 384, 395, 400, 405, 416, 419, 422, 425, 432, 434, 436, 443, 461, 462, 463, 464, 467, 468, 469, 474, 476, 477, 479, 483], "unknown": [31, 33, 64, 68, 94, 106, 122, 139, 141, 190, 193, 196, 199, 201, 202, 208, 211, 225, 235, 245, 276, 288, 292, 293, 304, 307, 319, 342, 352, 358, 365, 366, 382, 395, 398, 416, 441, 456, 464, 465, 469, 473, 475, 479, 480, 483], "probabl": [31, 33, 56, 73, 75, 79, 85, 92, 99, 102, 106, 143, 158, 159, 176, 183, 193, 200, 213, 230, 283, 293, 297, 308, 318, 335, 337, 338, 340, 341, 343, 352, 355, 384, 395, 405, 406, 415, 434, 456, 462, 463, 464, 465, 467, 468, 470, 475, 476, 483], "damag": [31, 299, 358, 386, 426], "author": [31, 73, 77, 95, 100, 101, 106, 110, 111, 126, 158, 160, 193, 213, 235, 242, 251, 252, 269, 293, 307, 340, 341, 388, 395, 419, 426, 453, 462, 463, 464, 465, 466, 467, 468, 469, 471, 473, 475, 477, 478, 483], "__spec__": [31, 68, 250, 252, 324, 385, 450, 472, 474, 477, 479, 480, 483], "__loader__": [31, 45, 225, 250, 265, 324, 385, 432, 450, 472, 476, 477, 480, 483], "spec": [31, 45, 61, 68, 87, 108, 211, 236, 239, 244, 250, 255, 262, 324, 345, 352, 376, 389, 390, 394, 419, 423, 431, 465, 474, 477, 478, 479, 480, 481, 482, 483], "loader": [31, 68, 87, 169, 176, 193, 250, 251, 252, 253, 265, 302, 362, 382, 385, 388, 413, 421, 423, 465, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483], "sourcefileload": [31, 250, 474, 476, 479, 483], "__file__": [31, 45, 89, 96, 102, 114, 188, 193, 225, 235, 250, 255, 265, 302, 323, 324, 362, 382, 388, 400, 423, 428, 432, 456, 465, 477, 479, 480, 482, 483], "co_filenam": [31, 255, 381, 428, 469, 483], "applic": [31, 33, 34, 57, 63, 64, 68, 72, 73, 75, 77, 85, 95, 100, 101, 106, 108, 109, 110, 120, 126, 133, 137, 139, 140, 143, 145, 151, 157, 167, 169, 177, 183, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 200, 201, 202, 203, 205, 206, 208, 213, 214, 225, 226, 235, 242, 246, 261, 262, 266, 267, 268, 269, 271, 272, 275, 276, 281, 282, 283, 292, 293, 299, 305, 308, 314, 319, 325, 331, 332, 333, 337, 340, 341, 344, 346, 348, 354, 358, 362, 364, 365, 366, 368, 369, 371, 375, 376, 382, 384, 387, 388, 394, 395, 399, 400, 402, 405, 407, 410, 411, 413, 414, 415, 416, 417, 422, 423, 425, 426, 427, 430, 434, 436, 455, 458, 459, 462, 463, 464, 465, 466, 468, 469, 470, 471, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484], "__cached__": [31, 96, 225, 250, 324, 432, 472, 474, 475, 477, 483], "pyimport_execcodemoduleex": [31, 57], "pyimport_execcodemodulewithpathnam": [31, 57], "modulespec": [31, 45, 68, 87, 250, 302, 324, 352, 385, 432], "pathnam": [31, 84, 142, 151, 176, 220, 223, 231, 267, 269, 279, 281, 293, 294, 331, 342, 352, 358, 369, 375, 397, 422, 423, 428, 432, 455, 475, 478, 483], "pyimport_execcodemoduleobject": [31, 57, 483], "cpathnam": 31, "figur": [31, 73, 76, 92, 94, 95, 106, 109, 120, 186, 193, 292, 308, 337, 358, 462, 463, 464, 465, 466, 467, 468, 469, 476, 483], "imp": [31, 68, 470, 472, 473, 475, 476, 477, 479, 483], "source_from_cach": [31, 250, 474, 475, 477, 479], "pyimport_getmagicnumb": [31, 57, 476], "magic": [31, 68, 85, 87, 115, 167, 176, 187, 193, 200, 230, 250, 308, 341, 349, 365, 366, 386, 422, 425, 426, 462, 463, 465, 477, 478, 479, 480, 483], "pyc": [31, 33, 34, 68, 86, 87, 163, 250, 274, 281, 299, 311, 332, 344, 352, 362, 382, 422, 423, 428, 432, 450, 455, 456, 461, 463, 465, 466, 468, 469, 473, 474, 477, 478, 482, 483, 484], "four": [31, 58, 64, 89, 92, 94, 106, 109, 120, 132, 158, 177, 190, 191, 207, 211, 242, 247, 255, 258, 259, 267, 268, 271, 278, 281, 292, 314, 318, 334, 337, 338, 344, 345, 347, 369, 376, 384, 389, 435, 441, 461, 468, 471, 475, 482, 483], "pyimport_getmagictag": [31, 57], "tag": [31, 61, 63, 68, 75, 98, 106, 122, 151, 190, 240, 248, 250, 269, 278, 293, 299, 314, 346, 352, 356, 368, 395, 410, 413, 417, 419, 461, 462, 467, 469, 473, 477, 478, 481, 483, 484], "3147": [31, 68, 85, 163, 250, 311, 324, 362, 432, 450, 476, 484], "keep": [31, 33, 39, 63, 73, 85, 94, 100, 102, 106, 108, 109, 120, 128, 139, 144, 151, 158, 160, 169, 176, 177, 179, 181, 186, 191, 193, 196, 211, 214, 226, 234, 243, 247, 252, 255, 258, 261, 271, 278, 292, 293, 299, 305, 307, 319, 338, 344, 348, 352, 362, 369, 388, 395, 402, 410, 415, 427, 428, 432, 436, 440, 463, 465, 466, 467, 468, 469, 475, 477, 480, 483], "mind": [31, 85, 92, 100, 102, 106, 120, 176, 186, 200, 252, 269, 283, 292, 386, 395, 413, 432, 464, 466, 475], "cache_tag": [31, 250, 352, 474, 476, 483], "authorit": [31, 110, 474, 483], "pyimport_getmoduledict": [31, 57, 483], "administr": [31, 33, 59, 101, 151, 155, 248, 287, 288, 293, 334, 337, 366, 407, 429, 461, 466, 476, 481, 482, 483], "pyimport_getmodul": [31, 57, 480, 483], "pyimport_getimport": [31, 57, 483], "finder": [31, 68, 87, 193, 250, 251, 270, 279, 302, 352, 433, 459, 461, 466, 468, 472, 474, 476, 477, 483], "pkg": [31, 250, 302, 421, 436, 455, 456, 460, 462, 463, 467, 469, 472, 473, 474, 481, 483], "__path__": [31, 68, 87, 250, 302, 312, 352, 450, 477, 479, 480, 483], "fetch": [31, 68, 93, 95, 110, 167, 175, 208, 248, 257, 261, 281, 283, 293, 299, 307, 315, 333, 337, 340, 341, 390, 395, 396, 414, 419, 452, 466, 475, 476, 483], "path_importer_cach": [31, 250, 302, 352, 432, 450, 465, 473, 474, 476, 477, 478, 480, 483], "cach": [31, 34, 42, 61, 63, 64, 68, 73, 75, 84, 87, 93, 101, 106, 110, 116, 126, 139, 147, 158, 160, 163, 176, 184, 190, 191, 216, 220, 226, 230, 250, 265, 267, 283, 288, 293, 302, 311, 319, 324, 330, 340, 341, 347, 352, 360, 362, 382, 386, 388, 395, 402, 423, 425, 427, 450, 452, 453, 455, 461, 463, 465, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483], "path_hook": [31, 87, 142, 250, 302, 352, 432, 436, 450, 465, 476, 477, 483], "our": [31, 73, 76, 85, 93, 94, 102, 106, 109, 110, 134, 167, 169, 176, 196, 200, 205, 259, 292, 299, 319, 335, 338, 340, 341, 362, 386, 390, 402, 407, 422, 464, 467, 468, 483], "find": [31, 33, 61, 63, 68, 72, 73, 75, 77, 93, 94, 95, 96, 99, 101, 102, 103, 105, 106, 109, 112, 118, 120, 141, 147, 151, 158, 160, 177, 181, 183, 190, 191, 193, 195, 196, 197, 199, 205, 207, 213, 221, 225, 226, 230, 235, 247, 250, 251, 254, 255, 266, 267, 273, 278, 280, 292, 293, 299, 302, 313, 323, 337, 341, 344, 348, 352, 354, 362, 363, 365, 367, 369, 386, 388, 394, 395, 402, 410, 429, 430, 432, 434, 436, 441, 442, 455, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483], "pyimport_importfrozenmoduleobject": [31, 57, 483], "frozen": [31, 34, 68, 176, 225, 250, 283, 302, 315, 352, 382, 386, 428, 432, 455, 461, 465, 474, 477, 480, 483], "misnom": 31, "pyimport_importfrozenmodul": [31, 57, 483], "_frozen": [31, 176, 473, 483], "freez": [31, 81, 85, 226, 227, 247, 288, 453, 480, 483], "tool": [31, 33, 51, 68, 72, 79, 85, 87, 92, 93, 95, 99, 101, 102, 106, 108, 109, 112, 137, 155, 156, 169, 176, 193, 194, 204, 223, 225, 226, 230, 231, 251, 254, 255, 261, 262, 299, 307, 315, 321, 331, 333, 352, 378, 380, 382, 384, 386, 388, 399, 413, 421, 422, 428, 436, 456, 457, 459, 461, 462, 463, 464, 465, 467, 468, 470, 471, 473, 475, 476, 477, 478, 479, 482, 484], "distribut": [31, 33, 66, 68, 71, 73, 75, 84, 85, 96, 126, 186, 209, 230, 235, 250, 271, 275, 280, 283, 284, 302, 318, 340, 343, 355, 358, 369, 377, 388, 414, 421, 426, 456, 459, 461, 462, 463, 465, 467, 468, 470, 472, 475, 478, 479, 480, 481, 482, 483], "is_packag": [31, 250, 423, 473, 483], "pyimport_frozenmodul": [31, 34, 176, 483], "record": [31, 61, 68, 75, 78, 92, 93, 94, 95, 101, 102, 104, 109, 155, 160, 163, 176, 177, 178, 184, 185, 186, 197, 203, 212, 251, 255, 259, 267, 269, 271, 279, 292, 293, 295, 299, 308, 309, 340, 342, 344, 347, 362, 384, 385, 386, 388, 389, 390, 400, 422, 432, 440, 445, 462, 465, 466, 467, 468, 469, 475, 476, 477, 478, 481, 483], "play": [31, 68, 76, 96, 103, 176, 186, 254, 295, 318, 341, 384, 388, 404, 428, 440, 470, 483], "trick": [31, 85, 176, 225, 297, 340, 352, 386, 390, 440, 464], "collect": [31, 32, 42, 45, 50, 52, 63, 64, 67, 68, 73, 74, 75, 78, 84, 85, 87, 92, 95, 98, 101, 102, 106, 112, 116, 120, 122, 125, 133, 139, 147, 151, 158, 167, 169, 170, 176, 179, 181, 182, 184, 187, 193, 194, 213, 214, 225, 226, 227, 242, 243, 251, 254, 255, 261, 264, 283, 293, 299, 305, 308, 314, 316, 330, 332, 333, 336, 337, 338, 340, 341, 343, 344, 347, 352, 359, 360, 362, 376, 382, 384, 385, 388, 395, 402, 405, 411, 413, 427, 428, 430, 436, 441, 442, 452, 453, 456, 461, 464, 465, 466, 467, 468, 470, 471, 473, 474, 483, 484], "pyimport_appendinittab": [31, 33, 34, 45, 57, 72, 73, 483], "initfunc": 31, "pyimport_extendinittab": [31, 33, 34, 483], "extend": [31, 33, 42, 45, 61, 63, 68, 73, 74, 75, 76, 79, 80, 84, 92, 94, 102, 106, 110, 118, 120, 121, 123, 133, 143, 155, 158, 160, 161, 167, 168, 169, 176, 177, 183, 190, 191, 192, 193, 196, 205, 207, 213, 225, 226, 230, 245, 247, 249, 258, 261, 262, 271, 275, 276, 278, 280, 282, 299, 302, 303, 308, 314, 320, 328, 332, 335, 337, 341, 344, 352, 358, 366, 376, 378, 388, 395, 402, 410, 413, 420, 428, 429, 430, 432, 436, 441, 442, 444, 461, 463, 466, 468, 469, 470, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484], "_inittab": 31, "emb": [31, 33, 34, 66, 68, 72, 85, 163, 193, 246, 250, 369, 413, 464, 468, 469, 480, 481, 483], "conjunct": [31, 190, 192, 193, 225, 255, 268, 331, 337, 386, 431, 435, 471, 477], "newtab": 31, "sentinel": [31, 37, 58, 68, 73, 75, 76, 85, 102, 181, 187, 225, 269, 283, 390, 464, 476, 480, 483], "fault": [31, 68, 101, 176, 184, 185, 256, 292, 297, 322, 333, 366, 381, 467, 469, 476, 483], "insuffici": [31, 161, 186, 193, 212, 252, 283, 293, 479], "high": [32, 33, 38, 42, 60, 64, 68, 73, 74, 79, 84, 85, 96, 101, 102, 110, 126, 128, 130, 133, 136, 137, 139, 149, 164, 177, 183, 186, 191, 194, 201, 226, 248, 254, 259, 260, 261, 266, 270, 283, 289, 293, 295, 299, 308, 309, 318, 319, 328, 332, 333, 337, 340, 341, 343, 352, 353, 356, 358, 366, 403, 436, 464, 465, 466, 467, 468, 474, 475, 476, 477, 478, 480, 482, 483], "queri": [32, 50, 68, 84, 95, 102, 106, 109, 118, 133, 136, 151, 158, 169, 205, 219, 230, 245, 250, 251, 255, 281, 298, 305, 328, 358, 362, 369, 375, 376, 386, 394, 395, 405, 410, 419, 432, 455, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "signal": [32, 33, 34, 49, 59, 63, 68, 92, 95, 100, 102, 106, 115, 130, 132, 133, 135, 137, 140, 141, 142, 166, 176, 177, 185, 187, 188, 191, 193, 213, 242, 254, 257, 258, 260, 261, 267, 268, 275, 283, 290, 292, 293, 297, 299, 309, 319, 322, 328, 329, 331, 337, 340, 341, 345, 348, 352, 362, 365, 366, 371, 381, 386, 395, 413, 415, 419, 430, 432, 455, 462, 463, 464, 465, 466, 467, 468, 469, 472, 475, 479, 481, 483], "categori": [32, 68, 84, 101, 106, 109, 133, 213, 225, 241, 266, 269, 315, 319, 340, 344, 362, 387, 394, 435, 455, 462, 463, 467, 468, 470, 475, 480, 483], "marshal": [32, 65, 68, 85, 142, 158, 254, 262, 269, 298, 379, 419, 465, 466, 469, 478, 483], "pyhash": [32, 65, 68, 426, 456, 483], "perf": [32, 34, 65, 68, 97, 352, 455, 474, 483], "abstract": [32, 55, 63, 68, 74, 76, 78, 79, 84, 85, 87, 91, 92, 93, 103, 126, 132, 133, 169, 176, 182, 183, 186, 208, 213, 221, 226, 244, 251, 254, 258, 264, 269, 280, 290, 293, 301, 329, 337, 341, 344, 352, 386, 425, 428, 430, 465, 467, 469, 470, 472, 475, 476, 478, 479, 480, 482, 483, 484], "configur": [32, 35, 42, 59, 63, 64, 68, 72, 73, 85, 92, 95, 96, 100, 104, 106, 115, 118, 126, 132, 136, 167, 170, 176, 182, 186, 189, 222, 223, 235, 245, 247, 248, 250, 254, 266, 267, 269, 271, 272, 292, 293, 305, 306, 307, 314, 315, 320, 323, 331, 335, 337, 340, 341, 352, 354, 358, 361, 362, 365, 369, 374, 375, 376, 388, 395, 399, 400, 405, 411, 412, 413, 417, 419, 426, 455, 456, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 473, 474, 476, 477, 478, 479, 480, 482, 483, 484], "wide": [32, 34, 59, 64, 68, 92, 95, 100, 101, 109, 115, 120, 132, 141, 150, 155, 167, 176, 177, 183, 186, 193, 194, 243, 247, 255, 257, 266, 271, 282, 293, 295, 299, 302, 305, 315, 330, 341, 344, 347, 348, 358, 365, 366, 375, 410, 422, 425, 426, 456, 461, 464, 467, 468, 469, 474, 475, 476, 477, 483], "sub": [32, 45, 50, 68, 95, 100, 101, 102, 106, 118, 122, 124, 133, 176, 177, 178, 183, 190, 191, 194, 196, 201, 205, 207, 214, 231, 248, 252, 254, 261, 268, 271, 278, 291, 308, 314, 319, 330, 344, 352, 362, 375, 386, 388, 390, 405, 413, 430, 431, 443, 451, 461, 462, 464, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 483], "asynchron": [32, 63, 68, 84, 87, 125, 126, 130, 133, 135, 136, 137, 139, 161, 166, 169, 170, 187, 191, 213, 225, 254, 256, 260, 267, 283, 315, 337, 341, 348, 352, 385, 388, 390, 406, 427, 436, 469, 473, 474, 475, 476, 477, 478, 480, 481, 483], "notif": [32, 67, 68, 329, 400, 405, 415, 462, 469, 474, 481, 483], "trace": [32, 34, 35, 42, 63, 68, 73, 98, 101, 104, 115, 144, 156, 157, 171, 176, 185, 191, 214, 226, 241, 248, 254, 255, 257, 293, 297, 340, 352, 362, 365, 381, 384, 426, 428, 436, 455, 456, 463, 464, 465, 469, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483], "advanc": [32, 68, 76, 85, 92, 106, 149, 167, 169, 176, 177, 186, 187, 194, 225, 234, 255, 258, 261, 270, 278, 292, 337, 341, 348, 352, 380, 384, 386, 402, 411, 412, 422, 427, 428, 434, 461, 465, 470, 475, 481, 483, 484], "pywidestringlist": [32, 68, 481], "pystatus": [32, 33, 68, 474, 481], "pypreconfig": [32, 33, 42, 59, 68, 474, 481], "preiniti": [32, 42, 59, 68, 266], "pyconfig": [32, 33, 35, 59, 66, 68, 87, 293, 352, 354, 355, 456, 469, 472, 473, 474, 481, 482, 483], "isol": [32, 33, 45, 63, 66, 68, 87, 95, 97, 114, 122, 139, 193, 247, 352, 354, 362, 388, 399, 455, 461, 473, 474, 477, 479, 482, 483], "py_runmain": [32, 68, 481, 483], "py_getargcargv": [32, 68, 483], "provision": [32, 68, 87, 197, 203, 205, 208, 251, 352, 477, 478, 479, 480, 481, 483], "domain": [32, 68, 98, 101, 126, 145, 203, 208, 209, 212, 230, 235, 243, 244, 248, 266, 268, 269, 283, 287, 335, 337, 338, 341, 346, 347, 352, 382, 394, 398, 455, 465, 467, 474, 476, 477, 478, 479, 480, 483], "custom": [32, 33, 34, 59, 63, 68, 71, 73, 76, 79, 85, 96, 100, 110, 115, 118, 119, 126, 135, 139, 155, 158, 161, 164, 181, 183, 185, 189, 193, 194, 207, 208, 217, 225, 242, 245, 247, 250, 251, 254, 255, 256, 258, 262, 267, 269, 271, 280, 285, 292, 298, 320, 323, 332, 333, 334, 341, 344, 345, 352, 354, 358, 362, 365, 369, 376, 386, 388, 395, 399, 400, 402, 410, 412, 413, 419, 425, 427, 430, 432, 436, 456, 458, 460, 462, 465, 466, 467, 468, 469, 470, 474, 475, 476, 478, 481, 482, 483], "pymalloc": [32, 34, 68, 352, 455, 456, 463, 468, 469, 475, 477, 479, 481, 483, 484], "tracemalloc": [32, 34, 68, 185, 188, 254, 362, 426, 455, 483], "cyclic": [32, 45, 50, 63, 68, 74, 85, 87, 270, 292, 411, 424, 428, 475, 477, 483], "garbag": [32, 42, 45, 50, 52, 63, 64, 67, 68, 73, 74, 75, 84, 85, 87, 95, 98, 102, 125, 139, 151, 159, 169, 170, 176, 179, 193, 213, 214, 254, 274, 283, 292, 293, 315, 337, 352, 360, 362, 388, 402, 411, 427, 428, 430, 452, 456, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484], "pyinitfrozenextens": 33, "pymem_setalloc": [33, 34, 42, 474], "pymem_setupdebughook": [33, 42, 188, 479, 483], "pyobject_setarenaalloc": [33, 42], "py_setpath": [33, 57, 354, 461, 473, 481, 483], "py_setprogramnam": [33, 34, 35, 57, 72, 73, 461, 473, 483], "py_setpythonhom": [33, 34, 57, 473, 483], "py_setstandardstreamencod": [33, 34, 473, 477, 483], "pysys_addwarnopt": [33, 57, 59, 473, 480, 483], "pysys_addxopt": [33, 57, 59, 473, 483], "pysys_resetwarnopt": [33, 57, 59, 474, 483], "py_isiniti": [33, 35, 57], "pymem_getalloc": [33, 42], "pyobject_getarenaalloc": [33, 42], "py_getbuildinfo": [33, 57, 467], "py_getcompil": [33, 57], "py_getcopyright": [33, 57], "py_getplatform": [33, 57], "py_getvers": [33, 57], "py_decodelocal": [33, 34, 57, 59, 64, 72, 73, 478, 480, 483], "pymem_rawmalloc": [33, 34, 42, 66, 477, 483], "pymem_rawrealloc": [33, 42, 66, 477], "pymem_rawcalloc": [33, 42, 478, 483], "pymem_rawfre": [33, 42, 59, 72, 73], "py_encodelocal": [33, 57, 59, 64, 478, 480, 483], "py_getpath": [33, 35, 57, 472, 474, 483], "py_getprefix": [33, 35, 57, 472, 474, 483], "py_getexecprefix": [33, 35, 57, 472, 474, 483], "py_getprogramfullpath": [33, 35, 57, 472, 474, 481, 483], "py_getpythonhom": [33, 57, 472, 474, 483], "py_getprogramnam": [33, 57, 472, 474, 481, 483], "pyeval_initthread": [33, 57, 475, 482, 483], "py_byteswarningflag": [33, 474, 480], "bb": [33, 95, 160, 261, 267, 455, 480, 483], "bytes_warn": [33, 34, 352, 474, 475], "py_debugflag": [33, 474], "parser_debug": [33, 34, 474], "parser": [33, 34, 68, 73, 79, 89, 95, 102, 106, 109, 112, 118, 122, 157, 159, 160, 175, 190, 193, 194, 196, 199, 200, 201, 203, 205, 206, 208, 213, 217, 238, 254, 262, 268, 273, 285, 297, 304, 309, 319, 331, 344, 350, 395, 399, 409, 410, 411, 412, 413, 415, 417, 431, 435, 436, 441, 443, 447, 451, 455, 456, 462, 463, 465, 466, 467, 469, 472, 474, 475, 476, 477, 478, 479, 480, 481, 483], "expert": [33, 34, 292, 455], "pythondebug": [33, 34, 455, 456], "py_dontwritebytecodeflag": [33, 474], "write_bytecod": [33, 34, 474], "tri": [33, 34, 35, 42, 45, 49, 63, 68, 71, 73, 75, 76, 77, 78, 79, 84, 87, 92, 93, 94, 95, 96, 99, 100, 101, 102, 103, 106, 109, 110, 112, 114, 115, 120, 122, 126, 133, 135, 138, 139, 140, 141, 146, 149, 151, 159, 160, 166, 167, 175, 176, 177, 183, 186, 188, 190, 191, 193, 200, 203, 209, 212, 213, 225, 226, 228, 230, 245, 247, 250, 255, 258, 261, 262, 266, 267, 268, 269, 271, 276, 279, 282, 283, 292, 293, 295, 297, 299, 302, 305, 308, 313, 314, 315, 319, 320, 322, 323, 330, 331, 332, 333, 335, 337, 340, 341, 344, 348, 352, 358, 359, 361, 362, 365, 367, 369, 375, 381, 384, 386, 395, 399, 400, 402, 403, 407, 408, 413, 419, 420, 422, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 441, 443, 446, 449, 455, 461, 462, 463, 464, 465, 466, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "pythondontwritebytecod": [33, 34, 85, 352, 455, 468], "py_frozenflag": [33, 474], "pathconfig_warn": [33, 34, 474], "_freeze_modul": [33, 483], "frozenmain": 33, "py_hashrandomizationflag": [33, 474], "hash_se": [33, 34, 474], "use_hash_se": [33, 34, 474], "pythonhashse": [33, 34, 428, 455, 476, 483], "secret": [33, 68, 133, 174, 235, 254, 283, 292, 293, 305, 318, 327, 341, 426, 455, 462, 483], "py_ignoreenvironmentflag": [33, 474, 480, 483], "use_environ": [33, 34, 35, 474, 482], "pythonpath": [33, 34, 35, 71, 86, 151, 352, 354, 362, 432, 450, 455, 459, 461, 477, 483], "pythonhom": [33, 34, 35, 354, 362, 455, 461, 474, 479], "py_inspectflag": [33, 474], "script": [33, 34, 35, 66, 68, 72, 73, 75, 79, 85, 87, 98, 101, 102, 103, 104, 110, 112, 120, 152, 163, 169, 188, 191, 193, 213, 222, 228, 230, 240, 244, 245, 250, 251, 254, 267, 280, 292, 297, 308, 309, 311, 313, 324, 330, 334, 340, 352, 354, 355, 362, 369, 376, 378, 386, 388, 395, 399, 403, 420, 421, 429, 432, 434, 435, 436, 443, 450, 453, 455, 456, 458, 460, 462, 463, 464, 465, 466, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "enter": [33, 34, 68, 79, 84, 85, 86, 92, 95, 109, 135, 144, 151, 155, 157, 159, 169, 177, 189, 225, 247, 258, 282, 292, 293, 297, 312, 325, 335, 340, 341, 344, 352, 359, 365, 369, 375, 384, 388, 400, 427, 428, 429, 441, 443, 452, 455, 464, 465, 467, 475, 476, 477, 480, 481, 483], "stdin": [33, 34, 59, 66, 76, 85, 87, 94, 95, 100, 103, 120, 122, 126, 130, 133, 137, 144, 151, 155, 157, 163, 176, 186, 190, 191, 193, 208, 214, 215, 218, 229, 234, 247, 248, 258, 259, 262, 283, 293, 296, 297, 309, 321, 328, 331, 344, 347, 348, 352, 358, 361, 362, 378, 387, 395, 407, 420, 427, 428, 430, 432, 436, 440, 441, 442, 443, 446, 448, 449, 450, 451, 452, 455, 456, 463, 464, 465, 466, 468, 469, 470, 472, 474, 476, 477, 478, 479, 480, 482, 483], "pythoninspect": [33, 34, 455, 465], "py_interactiveflag": [33, 474], "py_isolatedflag": [33, 474], "neither": [33, 76, 95, 99, 103, 106, 133, 143, 144, 158, 181, 186, 191, 193, 196, 205, 209, 225, 242, 262, 270, 271, 275, 283, 292, 293, 296, 299, 319, 338, 340, 341, 344, 352, 376, 380, 386, 388, 403, 425, 426, 428, 430, 455, 474, 477, 479, 480, 483], "directori": [33, 34, 51, 68, 73, 75, 79, 84, 85, 86, 89, 93, 95, 96, 102, 109, 112, 114, 118, 137, 151, 152, 163, 167, 169, 184, 189, 190, 193, 200, 210, 212, 213, 219, 220, 223, 225, 230, 245, 247, 248, 250, 251, 252, 253, 254, 271, 279, 283, 292, 296, 297, 302, 310, 311, 312, 313, 320, 324, 331, 334, 340, 341, 342, 348, 352, 354, 355, 357, 358, 360, 362, 375, 380, 384, 388, 395, 399, 402, 403, 421, 422, 423, 425, 432, 443, 451, 455, 456, 461, 462, 463, 465, 466, 467, 469, 470, 471, 472, 473, 474, 476, 477, 479, 480, 481, 482, 483, 484], "site": [33, 34, 68, 85, 95, 96, 109, 110, 156, 167, 225, 243, 244, 250, 251, 254, 259, 267, 293, 302, 315, 335, 352, 354, 355, 358, 395, 399, 400, 414, 430, 432, 438, 450, 453, 455, 456, 461, 462, 467, 469, 470, 476, 477, 478, 483, 484], "py_legacywindowsfsencodingflag": [33, 474, 483], "legacy_windows_fs_encod": [33, 34, 59, 474], "surrogatepass": [33, 34, 158, 455, 477, 479, 483], "pythonlegacywindowsfsencod": [33, 34, 352, 455, 479], "529": [33, 64, 68, 293, 352, 455, 461, 481, 483], "py_legacywindowsstdioflag": [33, 474], "legacy_windows_stdio": [33, 34, 474], "fileio": [33, 34, 120, 225, 258, 469, 477, 483], "_windowsconsoleio": [33, 34], "pythonlegacywindowsstdio": [33, 34, 352, 455, 479], "528": [33, 34, 68, 461, 483], "py_nositeflag": [33, 474], "site_import": [33, 34, 474], "entail": [33, 34, 455], "py_nousersitedirectori": [33, 474], "user_site_directori": [33, 34, 474], "pythonnousersit": [33, 34, 334, 455, 468], "py_optimizeflag": [33, 474], "optimization_level": [33, 34, 474], "pythonoptim": [33, 34, 455], "py_quietflag": [33, 474], "quiet": [33, 34, 89, 96, 163, 186, 190, 275, 292, 311, 352, 362, 397, 461, 466, 469, 472, 474, 475, 478, 483], "copyright": [33, 34, 69, 73, 86, 123, 168, 235, 247, 352, 413, 426, 448, 450, 455, 475, 481], "py_unbufferedstdioflag": [33, 474], "buffered_stdio": [33, 34, 474], "stdout": [33, 34, 59, 64, 66, 68, 73, 87, 101, 102, 120, 122, 126, 130, 133, 137, 139, 151, 155, 169, 176, 177, 190, 191, 193, 210, 216, 223, 225, 242, 247, 248, 258, 262, 268, 269, 283, 292, 293, 297, 300, 307, 308, 309, 321, 333, 344, 348, 352, 358, 359, 362, 378, 380, 381, 388, 389, 399, 400, 407, 413, 417, 422, 428, 446, 450, 451, 455, 456, 461, 462, 466, 467, 468, 469, 470, 475, 476, 477, 478, 479, 480, 483], "unbuff": [33, 258, 348, 352, 455, 483], "pythonunbuff": [33, 34, 352, 455, 483], "py_verboseflag": [33, 474], "verbos": [33, 34, 63, 68, 89, 99, 101, 102, 120, 160, 177, 187, 188, 193, 210, 226, 228, 268, 292, 301, 319, 331, 332, 345, 352, 357, 358, 362, 367, 382, 388, 399, 419, 428, 461, 464, 465, 466, 468, 469, 473, 474, 475, 477, 479, 480, 483], "show": [33, 34, 68, 72, 73, 76, 85, 89, 92, 93, 94, 95, 98, 100, 101, 102, 103, 109, 110, 120, 126, 139, 151, 152, 155, 158, 160, 169, 176, 179, 186, 188, 189, 190, 193, 202, 213, 216, 225, 226, 235, 242, 243, 247, 248, 250, 261, 262, 267, 278, 283, 292, 293, 299, 307, 308, 321, 332, 334, 337, 340, 341, 343, 344, 345, 358, 369, 373, 375, 376, 378, 380, 381, 384, 388, 399, 400, 402, 419, 420, 421, 431, 435, 442, 451, 452, 453, 455, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483], "cleanup": [33, 34, 35, 59, 68, 95, 102, 115, 135, 140, 164, 169, 214, 293, 338, 348, 352, 360, 362, 388, 390, 402, 405, 411, 427, 428, 429, 430, 455, 462, 464, 467, 469, 470, 474, 475, 476, 481, 483], "pythonverbos": [33, 34, 455], "fundament": [33, 63, 68, 103, 118, 194, 259, 283, 292, 299, 307, 308, 340, 385, 402, 432, 461, 462, 468, 474, 479, 483], "builtin": [33, 34, 35, 53, 63, 68, 85, 87, 93, 96, 122, 142, 158, 160, 191, 193, 225, 230, 235, 244, 247, 250, 254, 255, 259, 268, 299, 308, 315, 323, 334, 344, 352, 385, 386, 390, 427, 428, 430, 432, 435, 437, 440, 450, 456, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482], "__main__": [33, 34, 35, 66, 68, 79, 84, 85, 87, 93, 96, 101, 102, 104, 126, 144, 155, 166, 188, 190, 193, 200, 213, 228, 250, 254, 267, 279, 283, 292, 297, 299, 308, 313, 315, 323, 324, 333, 338, 340, 342, 362, 367, 382, 384, 386, 388, 389, 390, 399, 400, 402, 407, 421, 429, 433, 437, 440, 450, 455, 463, 466, 467, 468, 469, 471, 475, 476, 477, 478, 481, 482, 483], "argv": [33, 34, 35, 66, 68, 72, 73, 102, 114, 118, 126, 136, 142, 188, 190, 193, 218, 228, 247, 292, 293, 297, 309, 324, 338, 342, 352, 356, 369, 388, 407, 443, 448, 450, 451, 455, 465, 468, 469, 470, 475, 480, 481, 483], "pysys_setargvex": [33, 57, 468, 469, 473, 475, 483], "py_finalizeex": [33, 35, 57, 59, 72, 100, 479, 483], "py_initializefromconfig": [33, 34, 42, 354, 474, 481, 483], "consol": [33, 34, 66, 68, 85, 92, 101, 102, 176, 178, 180, 193, 201, 247, 268, 293, 297, 313, 320, 348, 352, 404, 455, 459, 461, 464, 468, 475, 476, 480, 483], "o_text": [33, 282, 293], "o_binari": [33, 34, 282, 293], "affect": [33, 45, 59, 60, 64, 68, 73, 84, 93, 94, 95, 102, 106, 139, 144, 167, 177, 183, 186, 191, 193, 202, 205, 225, 230, 243, 247, 250, 258, 266, 269, 271, 278, 293, 307, 319, 320, 321, 322, 337, 340, 341, 348, 354, 356, 358, 362, 366, 375, 376, 384, 386, 388, 390, 394, 400, 402, 405, 410, 427, 428, 430, 432, 436, 440, 455, 456, 461, 462, 463, 464, 465, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "py_initializeex": [33, 57, 100, 483], "initsig": 33, "registr": [33, 59, 161, 169, 293, 299, 329, 395, 405, 420, 468, 483], "undo": [33, 155, 177, 247, 267, 384, 468, 483], "py_newinterpret": [33, 57, 100, 483], "ideal": [33, 63, 95, 102, 109, 183, 352, 400, 466, 475], "flush": [33, 101, 102, 107, 115, 126, 130, 133, 136, 149, 158, 160, 177, 214, 225, 245, 258, 267, 269, 270, 271, 278, 283, 293, 314, 322, 333, 337, 348, 352, 362, 399, 405, 413, 424, 476, 477, 479, 481, 483], "restart": [33, 102, 177, 212, 247, 268, 297, 333, 361, 366, 468, 469, 478, 480, 481, 483], "itself": [33, 42, 45, 49, 51, 61, 63, 64, 67, 68, 72, 73, 75, 76, 85, 93, 94, 95, 96, 100, 101, 102, 103, 106, 110, 115, 119, 120, 126, 133, 139, 144, 151, 155, 163, 176, 177, 178, 181, 183, 188, 191, 193, 195, 197, 203, 205, 215, 225, 226, 243, 245, 247, 248, 250, 255, 257, 259, 261, 262, 267, 268, 269, 271, 281, 282, 283, 288, 292, 293, 299, 308, 314, 319, 331, 332, 337, 340, 341, 344, 345, 346, 348, 352, 355, 358, 359, 361, 362, 365, 376, 381, 384, 385, 386, 388, 394, 395, 397, 399, 400, 414, 415, 416, 419, 428, 429, 430, 432, 434, 435, 436, 443, 455, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 475, 476, 477, 480, 482, 483], "loadabl": [33, 63, 100, 250, 307, 340, 456, 461, 483], "dll": [33, 57, 68, 77, 84, 176, 269, 293, 352, 369, 461, 467, 468, 472, 477, 481, 483], "unload": [33, 100, 362, 402, 483], "hunt": [33, 292, 483], "develop": [33, 34, 68, 75, 77, 78, 80, 85, 87, 92, 100, 101, 102, 103, 106, 109, 125, 126, 151, 161, 169, 176, 186, 187, 213, 214, 235, 250, 254, 267, 268, 269, 292, 293, 307, 313, 340, 344, 348, 352, 362, 368, 369, 375, 386, 400, 419, 422, 425, 455, 456, 457, 461, 463, 464, 465, 466, 467, 469, 470, 474, 475, 476, 477, 478, 481, 482, 483, 484], "random": [33, 34, 35, 68, 73, 84, 85, 87, 92, 95, 102, 109, 118, 126, 134, 149, 158, 173, 174, 176, 193, 218, 219, 226, 247, 254, 257, 261, 283, 290, 292, 308, 319, 326, 327, 328, 341, 343, 358, 362, 384, 388, 398, 410, 424, 426, 428, 451, 455, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 476, 477, 478, 481, 483], "amount": [33, 45, 73, 76, 84, 85, 95, 126, 133, 139, 177, 186, 235, 258, 259, 270, 283, 288, 292, 293, 295, 299, 305, 307, 314, 322, 330, 332, 333, 337, 342, 344, 364, 365, 366, 369, 376, 384, 395, 411, 463, 466, 468, 475, 477, 478, 479, 480, 482, 483], "tie": [33, 186, 308, 341, 353, 427, 481, 483], "_pysys_clearaudithook": [33, 142], "py_fin": [33, 34, 57, 469, 483], "stdio_encod": [33, 34, 352], "stdio_error": [33, 34, 352], "pythonioencod": [33, 34, 293, 352, 455, 468, 477, 483], "backslashreplac": [33, 34, 109, 158, 214, 225, 258, 267, 293, 344, 352, 455, 465, 478, 480, 483], "program_nam": [33, 34], "durat": [33, 102, 126, 135, 139, 183, 271, 283, 308, 337, 338, 341, 344, 352, 361, 362, 365, 366, 388, 406, 469, 474, 475, 476, 478, 481, 483], "prefix": [33, 34, 35, 47, 58, 61, 63, 64, 68, 73, 99, 106, 118, 155, 159, 163, 167, 173, 176, 177, 186, 190, 191, 203, 213, 228, 230, 235, 243, 245, 247, 256, 268, 269, 282, 293, 297, 302, 312, 314, 315, 319, 332, 334, 344, 345, 347, 352, 354, 360, 362, 364, 369, 375, 376, 380, 388, 399, 400, 410, 413, 415, 419, 423, 427, 431, 435, 436, 440, 449, 450, 455, 456, 460, 461, 465, 468, 469, 474, 475, 476, 478, 479, 481, 483], "complic": [33, 63, 73, 92, 94, 95, 100, 103, 106, 109, 110, 141, 158, 169, 176, 181, 190, 193, 215, 226, 243, 292, 299, 319, 366, 428, 430, 462, 464, 465, 466, 467, 468, 469, 471, 475, 483], "usr": [33, 35, 79, 84, 89, 95, 96, 98, 102, 109, 151, 167, 176, 200, 230, 231, 272, 292, 294, 296, 303, 319, 326, 334, 344, 348, 352, 355, 360, 366, 369, 382, 395, 421, 438, 448, 453, 455, 456, 459, 460, 461, 463, 465, 467, 472, 475, 477, 478, 483], "bin": [33, 35, 68, 72, 79, 84, 95, 102, 109, 110, 151, 164, 167, 200, 225, 245, 251, 292, 293, 296, 301, 343, 344, 345, 355, 395, 396, 399, 421, 428, 438, 448, 450, 453, 459, 460, 461, 465, 466, 467, 468, 469, 470, 471, 483], "makefil": [33, 68, 72, 73, 79, 231, 235, 258, 296, 337, 341, 355, 428, 458, 462, 463, 468, 469, 474, 476, 477, 478, 479, 483], "exec": [33, 73, 84, 102, 112, 122, 142, 144, 157, 159, 193, 212, 213, 225, 227, 250, 293, 297, 308, 344, 348, 351, 352, 362, 369, 378, 380, 381, 382, 428, 429, 436, 437, 438, 440, 450, 456, 462, 463, 464, 466, 467, 470, 472, 477, 478, 483], "exec_prefix": [33, 34, 35, 283, 334, 352, 354, 380, 399, 450, 455, 456, 460, 474, 475], "background": [33, 68, 77, 92, 102, 126, 139, 167, 169, 177, 246, 247, 269, 283, 293, 340, 348, 362, 365, 369, 375, 376, 384, 427, 428, 452, 466, 477, 483], "plat": [33, 461, 479, 483], "subtre": [33, 413, 462], "speak": [33, 34, 68, 73, 85, 183, 344, 347, 356], "hardwar": [33, 109, 141, 177, 186, 293, 295, 322, 337, 348, 366, 405, 469, 478, 483], "softwar": [33, 68, 69, 77, 80, 95, 101, 102, 103, 109, 151, 158, 177, 187, 192, 193, 194, 212, 228, 235, 245, 246, 247, 266, 267, 288, 293, 307, 341, 366, 384, 399, 405, 419, 426, 459, 461, 462, 463, 465, 466, 468, 469, 483, 484], "sparc": [33, 295], "machin": [33, 51, 64, 73, 84, 87, 96, 101, 102, 133, 158, 177, 178, 183, 200, 212, 225, 230, 243, 255, 260, 268, 269, 270, 272, 283, 284, 288, 293, 296, 303, 308, 313, 333, 335, 337, 340, 341, 344, 347, 365, 420, 421, 428, 434, 456, 461, 462, 463, 464, 467, 468, 469, 471, 474, 475, 476, 480, 481, 483], "solari": [33, 68, 246, 293, 303, 306, 328, 352, 355, 366, 462, 469, 475, 476, 478, 480, 483], "consid": [33, 34, 39, 42, 49, 55, 56, 63, 64, 72, 73, 75, 76, 85, 92, 93, 94, 95, 96, 99, 100, 102, 103, 106, 112, 120, 126, 128, 144, 151, 163, 167, 176, 177, 181, 183, 184, 186, 190, 191, 193, 196, 204, 205, 208, 225, 226, 228, 230, 235, 236, 243, 250, 252, 253, 255, 257, 259, 261, 262, 266, 267, 268, 269, 270, 271, 275, 283, 288, 292, 297, 299, 308, 314, 319, 320, 328, 331, 333, 340, 341, 344, 345, 347, 352, 355, 358, 362, 364, 365, 366, 369, 385, 386, 388, 394, 395, 399, 402, 410, 411, 412, 420, 421, 427, 428, 429, 430, 432, 436, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 477, 478, 479, 480, 481, 482, 483], "intel": [33, 86, 141, 295, 308, 347, 456, 459, 467, 469, 478, 479, 481, 482, 483], "linux": [33, 34, 51, 68, 71, 72, 80, 83, 84, 92, 93, 97, 98, 115, 118, 132, 176, 177, 186, 212, 214, 215, 230, 247, 257, 258, 269, 278, 283, 295, 306, 309, 322, 326, 328, 332, 333, 337, 342, 348, 352, 355, 358, 360, 362, 365, 366, 369, 383, 395, 448, 455, 456, 458, 461, 462, 463, 465, 466, 467, 468, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "major": [33, 68, 77, 93, 94, 109, 110, 122, 167, 177, 183, 187, 194, 203, 206, 208, 230, 235, 243, 267, 292, 293, 303, 305, 313, 344, 352, 355, 358, 394, 461, 462, 465, 467, 468, 469, 470, 471, 473, 474, 475, 476, 478, 479, 481, 482, 483], "revis": [33, 68, 109, 110, 347, 408, 426, 462, 467, 468, 471, 479, 480, 483], "stori": [33, 73, 147, 446], "strategi": [33, 42, 63, 73, 76, 79, 120, 135, 158, 269, 362, 369, 388, 403, 424, 425, 432, 441, 465, 470, 475, 480, 483], "meaningless": [33, 109, 463, 464, 477, 483], "mount": [33, 293, 294, 296, 332, 469, 474, 477, 480, 483], "automount": 33, "comput": [33, 34, 49, 63, 64, 68, 72, 75, 76, 85, 87, 92, 93, 95, 99, 101, 102, 103, 106, 109, 133, 139, 141, 146, 160, 161, 178, 181, 183, 185, 186, 191, 193, 216, 225, 226, 235, 254, 255, 259, 261, 267, 269, 275, 283, 293, 294, 307, 308, 311, 318, 334, 337, 338, 341, 344, 352, 363, 365, 369, 384, 388, 395, 405, 426, 427, 428, 430, 435, 436, 440, 451, 455, 456, 462, 463, 464, 465, 467, 468, 469, 471, 473, 474, 475, 477, 480, 481, 483], "delimit": [33, 59, 68, 85, 87, 106, 167, 175, 193, 201, 221, 247, 248, 271, 288, 292, 299, 319, 320, 344, 345, 348, 369, 378, 394, 425, 433, 452, 461, 465, 475, 483], "maco": [33, 34, 57, 68, 80, 81, 83, 84, 85, 98, 109, 111, 115, 118, 133, 176, 184, 215, 257, 269, 278, 283, 293, 304, 308, 309, 320, 328, 330, 332, 333, 334, 337, 340, 341, 342, 352, 355, 362, 365, 366, 368, 369, 373, 376, 383, 395, 403, 426, 439, 453, 455, 458, 459, 462, 463, 464, 465, 467, 468, 469, 472, 473, 474, 479, 480], "startup": [33, 34, 68, 188, 214, 250, 266, 268, 293, 334, 344, 352, 363, 368, 382, 432, 455, 467, 468, 476, 477, 478, 480, 482, 483], "module_search_path": [33, 34, 59, 473, 483], "module_search_paths_set": [33, 34, 59, 473, 483], "knowledg": [33, 92, 183, 194, 266, 330, 468], "compon": [33, 42, 45, 64, 68, 73, 85, 93, 101, 102, 106, 109, 110, 139, 158, 160, 177, 183, 186, 194, 208, 230, 243, 245, 250, 251, 254, 255, 256, 281, 293, 296, 319, 331, 332, 344, 345, 352, 353, 355, 356, 358, 366, 369, 376, 384, 385, 386, 395, 405, 410, 415, 420, 422, 425, 428, 432, 435, 455, 461, 465, 466, 468, 469, 470, 474, 475, 477, 478, 479, 480, 483], "wchar_": 33, "0a5": 33, "py3k": [33, 87, 352, 355, 470], "63103m": 33, "2008": [33, 158, 183, 223, 332, 347, 413, 426, 468, 469, 470, 475, 483], "00": [33, 89, 104, 107, 109, 183, 186, 221, 235, 267, 319, 341, 366, 384, 425, 451, 452, 455, 467, 468, 469, 475, 479, 482, 483], "53": [33, 78, 102, 104, 139, 183, 186, 275, 318, 344, 366, 390, 444, 467, 483], "55": [33, 93, 95, 101, 102, 104, 139, 186, 226, 284, 318, 319, 343, 384, 441, 442, 444, 449, 450, 455, 479], "gcc": [33, 35, 63, 176, 303, 352, 448, 455, 456, 468, 469, 471, 472, 473, 477, 479, 483], "minor": [33, 63, 66, 68, 77, 79, 84, 92, 102, 110, 122, 177, 203, 206, 293, 303, 313, 352, 355, 358, 415, 456, 461, 463, 464, 465, 466, 467, 469, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 483], "period": [33, 85, 94, 101, 151, 177, 183, 186, 220, 226, 267, 269, 283, 294, 302, 323, 337, 338, 341, 343, 364, 376, 420, 430, 435, 461, 462, 465, 466, 467, 468, 469, 474, 475, 483], "offici": [33, 103, 105, 158, 195, 209, 276, 295, 341, 369, 388, 411, 419, 428, 459, 461, 462, 463, 464, 467, 469, 475, 476, 478, 480, 482, 483], "lower": [33, 64, 68, 72, 84, 85, 87, 92, 96, 102, 103, 106, 122, 126, 133, 139, 140, 146, 155, 158, 160, 163, 167, 177, 178, 180, 186, 195, 196, 200, 202, 203, 205, 211, 225, 226, 236, 245, 267, 271, 283, 288, 293, 308, 319, 322, 325, 337, 340, 344, 352, 365, 366, 375, 377, 384, 386, 394, 395, 400, 428, 430, 436, 463, 465, 466, 467, 468, 469, 471, 475, 477, 482, 483], "suno": [33, 303, 358, 483], "sunos5": [33, 352], "darwin": [33, 303, 352, 366, 462, 468, 478, 483], "1991": [33, 69, 80, 340, 426], "1995": [33, 69, 209, 426, 462, 483], "sticht": [33, 69, 426], "mathematisch": [33, 69, 426], "centrum": [33, 69, 426], "amsterdam": [33, 366, 426], "67": [33, 104, 221, 225, 337, 343, 382, 384, 446, 468, 483], "aug": [33, 95, 183, 423, 464, 465], "1997": [33, 147, 426, 469, 475], "22": [33, 77, 96, 102, 106, 109, 150, 160, 173, 176, 183, 191, 236, 247, 259, 261, 267, 284, 318, 337, 341, 343, 345, 384, 423, 426, 444, 465, 474, 475, 481, 482, 483], "34": [33, 96, 102, 139, 183, 186, 221, 226, 337, 341, 343, 430, 441, 449, 450, 475, 483], "argc": [33, 34, 66, 72, 73, 191, 483], "updatepath": [33, 468, 469], "parse_argv": [33, 34, 35, 483], "safe_path": [33, 34, 352, 473], "host": [33, 68, 84, 102, 107, 126, 136, 142, 158, 177, 178, 209, 212, 223, 225, 242, 243, 245, 247, 248, 256, 257, 269, 271, 283, 286, 287, 288, 293, 294, 296, 305, 313, 319, 335, 337, 338, 341, 344, 346, 347, 359, 362, 394, 395, 398, 407, 419, 456, 461, 462, 465, 467, 468, 469, 475, 476, 477, 478, 479, 480, 483], "condit": [33, 59, 63, 68, 73, 75, 78, 85, 87, 94, 95, 110, 124, 133, 137, 139, 140, 144, 164, 181, 186, 190, 191, 199, 213, 226, 228, 236, 240, 248, 250, 251, 257, 258, 261, 267, 268, 271, 272, 281, 283, 297, 309, 314, 319, 327, 328, 337, 341, 352, 353, 360, 362, 386, 388, 400, 402, 412, 414, 416, 419, 426, 427, 428, 429, 433, 445, 452, 455, 462, 463, 464, 466, 468, 469, 472, 475, 476, 477, 478, 479, 481, 482, 483, 484], "py_fatalerror": [33, 35, 42, 57, 59, 64, 482, 483], "prepend": [33, 34, 93, 102, 158, 163, 178, 202, 226, 261, 269, 271, 288, 292, 301, 312, 331, 332, 352, 356, 364, 413, 421, 455, 461, 474, 483], "orig_argv": [33, 34, 352, 472, 483], "themselv": [33, 63, 73, 75, 85, 99, 101, 106, 141, 151, 158, 167, 176, 194, 208, 230, 261, 262, 275, 283, 297, 299, 319, 332, 340, 344, 362, 364, 388, 411, 419, 428, 430, 432, 464, 467, 468, 469, 474, 475, 477, 478, 480, 483], "cve": [33, 344, 409, 468, 469, 472, 473, 480, 481, 482, 483], "5983": [33, 468, 469], "achiev": [33, 45, 63, 72, 85, 95, 100, 102, 120, 158, 167, 176, 226, 245, 261, 267, 283, 320, 341, 352, 362, 365, 369, 374, 390, 395, 413, 428, 435, 436, 462, 464, 465, 467, 477, 478, 483], "manual": [33, 45, 61, 68, 72, 73, 77, 79, 84, 85, 92, 93, 95, 100, 102, 109, 112, 120, 126, 132, 133, 139, 164, 176, 177, 185, 193, 197, 206, 215, 225, 267, 271, 283, 292, 293, 302, 304, 313, 320, 328, 337, 340, 341, 344, 356, 358, 361, 366, 368, 375, 386, 410, 413, 421, 424, 428, 434, 451, 460, 461, 462, 463, 464, 465, 466, 468, 469, 470, 474, 476, 477, 478, 480, 481, 483], "pop": [33, 35, 80, 84, 85, 102, 121, 160, 161, 186, 191, 194, 203, 236, 271, 293, 305, 331, 344, 375, 376, 384, 388, 399, 428, 435, 442, 452, 464, 465, 466, 467, 468, 475, 477, 478, 483], "pysys_setargv": [33, 57, 468, 469, 473, 483], "pyrun_simplestr": [33, 34, 66, 72, 79, 86, 468], "home": [33, 34, 68, 85, 86, 92, 96, 102, 103, 106, 151, 155, 167, 177, 214, 234, 247, 251, 271, 272, 293, 294, 296, 297, 306, 310, 314, 315, 320, 331, 334, 348, 354, 362, 369, 375, 384, 399, 434, 438, 453, 456, 461, 468, 474, 475, 476, 478, 481, 483], "simplest": [33, 63, 72, 73, 76, 95, 99, 100, 101, 106, 110, 120, 158, 169, 186, 193, 200, 299, 319, 341, 365, 386, 388, 428, 430, 455, 462, 464, 465], "simultan": [33, 63, 102, 137, 138, 149, 186, 247, 258, 261, 271, 281, 330, 338, 340, 362, 365, 375, 436, 461, 468, 478, 481, 483], "twice": [33, 34, 77, 95, 102, 109, 146, 163, 167, 183, 188, 214, 255, 275, 319, 340, 378, 400, 422, 455, 462, 464, 465, 466, 468, 469, 479, 481, 483], "concurr": [33, 68, 84, 87, 114, 123, 124, 126, 129, 130, 133, 134, 137, 170, 226, 254, 271, 283, 296, 299, 311, 320, 330, 340, 341, 348, 352, 365, 413, 443, 469, 473, 474, 481, 483, 484], "setswitchinterv": [33, 84, 352, 362, 450, 475, 482, 483], "potenti": [33, 34, 63, 85, 95, 100, 102, 103, 126, 167, 173, 183, 223, 225, 248, 250, 253, 255, 261, 267, 268, 269, 283, 293, 299, 305, 338, 341, 344, 352, 364, 385, 386, 388, 394, 421, 428, 432, 455, 461, 463, 464, 468, 472, 474, 475, 476, 477, 478, 480, 481, 482, 483], "meantim": [33, 483], "bookkeep": [33, 68, 177, 290, 474], "pythreadst": [33, 57, 472, 473, 474, 477, 482, 483], "pythreadstate_get": [33, 57, 483], "reacquir": [33, 176, 365], "py_end_allow_thread": [33, 57, 73, 481, 483], "hidden": [33, 85, 179, 191, 247, 297, 308, 338, 376, 384, 474, 476, 480, 481, 482, 483], "close": [33, 51, 63, 66, 68, 76, 78, 79, 85, 95, 96, 100, 101, 102, 107, 109, 117, 120, 126, 130, 132, 133, 135, 136, 137, 139, 151, 153, 155, 157, 158, 161, 167, 169, 170, 177, 184, 188, 190, 191, 199, 207, 208, 213, 214, 218, 223, 225, 234, 235, 240, 242, 243, 247, 248, 258, 267, 269, 270, 271, 275, 278, 281, 283, 284, 288, 292, 293, 295, 301, 308, 309, 314, 320, 328, 329, 330, 331, 333, 335, 337, 338, 340, 341, 344, 348, 349, 352, 358, 359, 360, 362, 365, 366, 369, 375, 376, 378, 384, 386, 388, 390, 395, 399, 401, 405, 407, 413, 416, 417, 419, 420, 421, 422, 428, 430, 431, 435, 443, 446, 452, 455, 462, 466, 467, 468, 469, 471, 472, 475, 476, 477, 478, 479, 480, 481, 482, 483], "expand": [33, 58, 63, 75, 94, 106, 109, 167, 186, 193, 230, 247, 255, 259, 261, 268, 283, 292, 314, 319, 344, 355, 364, 366, 369, 376, 394, 405, 410, 412, 413, 415, 420, 430, 461, 464, 465, 468, 475, 476, 477, 478, 479, 480, 481, 482, 483], "_save": 33, "pyeval_savethread": [33, 57, 475], "pyeval_restorethread": [33, 57, 475, 481, 483], "compress": [33, 68, 95, 99, 102, 117, 119, 133, 158, 167, 200, 218, 234, 235, 254, 259, 261, 276, 281, 295, 299, 332, 336, 341, 342, 349, 358, 401, 421, 422, 424, 451, 464, 465, 467, 469, 471, 475, 476, 477, 478, 479, 480, 481, 483], "cryptograph": [33, 235, 293, 341, 413, 479], "zlib": [33, 68, 84, 106, 119, 158, 234, 235, 254, 332, 362, 422, 451, 464, 465, 467, 472, 473, 482, 483], "hashlib": [33, 68, 84, 173, 174, 237, 254, 327, 340, 426, 456, 468, 469, 470, 483], "dedic": [33, 68, 102, 167, 193, 235, 341, 344, 362, 386, 483], "aforement": [33, 476], "pygilstate_ensur": [33, 57, 481, 483], "pygilstate_releas": [33, 57], "idiom": [33, 73, 85, 103, 112, 114, 120, 193, 225, 283, 331, 341, 352, 386, 402, 465, 470, 475, 476, 482, 483], "pygilstate_st": [33, 57], "gstate": 33, "action": [33, 42, 55, 68, 73, 75, 76, 89, 92, 106, 115, 118, 144, 155, 160, 169, 177, 190, 200, 215, 228, 242, 248, 281, 283, 293, 297, 301, 308, 309, 325, 328, 333, 338, 340, 344, 352, 358, 359, 361, 365, 376, 384, 388, 389, 395, 399, 400, 426, 428, 441, 455, 462, 463, 465, 466, 467, 468, 469, 471, 475, 477, 482, 483], "callsomefunct": 33, "beyond": [33, 68, 74, 92, 99, 106, 118, 183, 186, 197, 203, 255, 262, 268, 271, 282, 293, 319, 337, 340, 341, 344, 347, 405, 427, 434, 463, 474, 476, 483], "pygilstate_": 33, "mix": [33, 42, 68, 102, 116, 167, 186, 204, 205, 206, 207, 218, 225, 228, 259, 275, 283, 293, 295, 309, 338, 344, 355, 362, 386, 394, 427, 428, 435, 464, 465, 467, 468, 469, 470, 471, 474, 475, 476, 477, 483], "unsupport": [33, 34, 68, 89, 110, 115, 120, 126, 167, 183, 193, 225, 230, 258, 283, 284, 295, 299, 304, 337, 341, 348, 365, 386, 394, 395, 405, 422, 432, 443, 461, 462, 466, 468, 475, 479, 482, 483], "face": [33, 109, 126, 149, 247, 269, 302, 394, 425, 462, 468, 470, 476, 477, 478, 483], "impact": [33, 68, 75, 167, 211, 250, 293, 307, 334, 340, 341, 347, 348, 362, 386, 483], "fact": [33, 64, 73, 85, 95, 101, 106, 110, 126, 167, 176, 186, 193, 206, 223, 225, 250, 279, 292, 299, 308, 344, 358, 369, 384, 386, 395, 421, 428, 430, 432, 434, 461, 462, 463, 468, 474, 476, 477, 478, 483], "solv": [33, 84, 85, 95, 103, 106, 247, 283, 330, 343, 347, 358, 386, 390, 427, 464, 465, 467, 471, 475, 477, 481, 483], "afterward": [33, 72, 93, 176, 183, 186, 261, 293, 328, 340, 352, 359, 421, 428, 464, 465, 468, 483], "pthread_atfork": 33, "accomplish": [33, 85, 120, 177, 248, 330, 410, 427, 483], "deadlock": [33, 96, 137, 166, 212, 214, 267, 283, 293, 316, 338, 348, 352, 365, 428, 468, 475, 476, 483], "defunct": 33, "pyos_afterfork_child": [33, 57, 59, 293, 474, 480, 481, 483], "necessari": [33, 49, 61, 63, 64, 72, 73, 76, 77, 84, 85, 93, 94, 95, 99, 100, 101, 102, 106, 112, 115, 120, 133, 139, 143, 155, 158, 161, 167, 169, 177, 184, 186, 193, 194, 195, 196, 205, 206, 207, 208, 209, 213, 225, 226, 242, 243, 247, 248, 250, 261, 266, 267, 270, 271, 272, 275, 278, 283, 288, 292, 293, 299, 302, 308, 332, 335, 337, 340, 341, 344, 346, 347, 348, 353, 355, 356, 362, 364, 365, 374, 376, 384, 388, 402, 405, 408, 410, 412, 415, 419, 422, 428, 429, 430, 431, 436, 440, 461, 464, 465, 467, 468, 469, 471, 474, 476, 477, 478, 479, 481, 483], "go": [33, 42, 73, 75, 76, 78, 79, 85, 92, 94, 95, 96, 101, 102, 106, 110, 115, 133, 139, 151, 177, 189, 193, 200, 247, 250, 313, 319, 340, 341, 348, 352, 355, 359, 365, 366, 380, 394, 395, 427, 446, 457, 462, 463, 464, 465, 467, 469, 470, 483], "belong": [33, 42, 58, 63, 73, 85, 94, 100, 139, 193, 243, 259, 272, 281, 292, 293, 314, 338, 340, 344, 376, 385, 400, 410, 416, 427, 428, 469, 476, 483], "pyinterpreterst": [33, 34, 57, 63, 472, 481, 482, 483], "natur": [33, 94, 106, 109, 126, 158, 176, 186, 193, 194, 230, 261, 275, 278, 308, 330, 337, 376, 402, 403, 413, 430, 435, 462, 466, 468, 469, 470, 471, 475, 479, 480, 483], "cooper": [33, 87, 116, 139, 203, 225, 341, 352, 369, 426, 480, 483], "interp": [33, 369, 483], "didn": [33, 76, 79, 85, 103, 106, 109, 169, 244, 292, 319, 335, 352, 428, 462, 463, 464, 466, 467, 468, 469, 477, 480, 482, 483], "pyeval_threadsiniti": [33, 57, 466, 482, 483], "tstate": [33, 473, 474, 482, 483], "ensu": [33, 475], "_py_isfin": [33, 481], "unwant": [33, 85, 358, 480, 483], "needn": [33, 319, 347, 480], "pythreadstate_swap": [33, 57], "swap": [33, 72, 158, 160, 176, 191, 261, 283, 322, 337, 347, 362, 428, 436, 473, 480, 483], "readi": [33, 64, 80, 92, 101, 102, 132, 133, 136, 144, 170, 176, 186, 190, 242, 245, 258, 269, 283, 328, 329, 337, 341, 366, 381, 416, 417, 462, 465, 475, 476, 478, 483], "uniqu": [33, 68, 73, 75, 93, 95, 98, 101, 109, 115, 120, 160, 176, 183, 184, 190, 203, 205, 209, 211, 212, 225, 228, 236, 255, 259, 261, 262, 271, 281, 293, 299, 305, 314, 340, 341, 344, 353, 355, 365, 376, 386, 388, 394, 398, 426, 427, 428, 432, 440, 442, 456, 461, 466, 467, 469, 471, 474, 475, 480, 482, 483], "henc": [33, 73, 102, 169, 191, 193, 247, 250, 253, 269, 283, 292, 301, 308, 322, 331, 344, 347, 348, 365, 400, 427, 428, 430, 466, 477, 480, 483], "gilstat": [33, 483], "everi": [33, 42, 49, 58, 73, 75, 77, 85, 93, 95, 96, 100, 101, 102, 103, 106, 109, 110, 112, 126, 132, 139, 140, 143, 146, 158, 167, 170, 176, 177, 183, 184, 186, 190, 191, 193, 194, 196, 205, 214, 225, 230, 236, 243, 245, 247, 251, 255, 259, 261, 262, 267, 269, 278, 283, 292, 293, 295, 302, 314, 319, 332, 333, 334, 337, 338, 340, 344, 348, 356, 364, 365, 376, 384, 388, 395, 400, 407, 408, 410, 413, 419, 425, 427, 428, 432, 434, 455, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 477, 478, 479, 481, 483], "pygilstate_getthisthreadst": [33, 57, 483], "auto": [33, 68, 93, 96, 110, 183, 211, 247, 320, 331, 337, 384, 389, 456, 460, 462, 469, 472, 475, 479, 480, 483], "diagnost": [33, 42, 68, 75, 101, 386, 419, 421, 458, 475, 479], "pygilstate_check": 33, "sensit": [33, 167, 220, 248, 269, 276, 352, 386, 388, 400, 455, 463, 465, 466, 467, 468, 474, 477, 483], "brace": [33, 158, 281, 319, 344, 345, 398, 430, 435, 479, 480, 483], "discuss": [33, 72, 73, 85, 95, 100, 102, 103, 106, 109, 110, 181, 190, 203, 208, 230, 247, 258, 268, 275, 288, 293, 319, 330, 333, 341, 376, 386, 395, 410, 419, 426, 427, 429, 430, 432, 435, 462, 463, 464, 467, 468, 469, 471, 473, 474, 477, 479, 482, 483], "py_block_thread": [33, 57], "py_unblock_thread": [33, 57], "pyinterpreterstate_new": [33, 57, 142, 483], "serial": [33, 41, 42, 68, 102, 167, 182, 194, 196, 197, 201, 203, 205, 206, 207, 208, 262, 267, 269, 283, 284, 299, 304, 330, 333, 335, 340, 347, 352, 413, 446, 462, 468, 469, 471, 473, 475, 476, 477, 482, 483], "pyinterpreterstate_clear": [33, 57, 142], "pyinterpreterstate_delet": [33, 57], "pythreadstate_new": [33, 57, 483], "pythreadstate_clear": [33, 57, 483], "on_delet": [33, 483], "pythreadstate_delet": [33, 57, 483], "pythreadstate_deletecurr": [33, 482, 483], "uint64_t": 33, "pythreadstate_getid": [33, 57, 482, 483], "pythreadstate_getinterpret": [33, 57, 482, 483], "pythreadstate_entertrac": [33, 473, 483], "suspend": [33, 95, 139, 177, 255, 314, 333, 352, 361, 365, 366, 427, 428, 430, 464, 465, 467, 478, 480, 483], "resum": [33, 95, 133, 139, 169, 177, 178, 191, 255, 283, 293, 297, 299, 314, 353, 361, 365, 427, 428, 430, 464, 465, 466, 467, 473, 483], "pythreadstate_leavetrac": [33, 473, 483], "pyeval_settrac": [33, 464, 483], "pyeval_setprofil": [33, 464, 483], "pyinterpreterstate_get": [33, 57, 482, 483], "int64_t": 33, "pyinterpreterstate_getid": [33, 57, 480], "pyinterpreterstate_getdict": [33, 57, 483], "pymodule_getst": [33, 45, 57, 61, 100, 482, 483], "_pyframeevalfunct": [33, 473, 483], "throwflag": [33, 66, 96, 483], "throw": [33, 66, 77, 94, 95, 101, 112, 128, 139, 161, 177, 191, 247, 293, 353, 362, 386, 394, 428, 430, 431, 467, 474, 476, 479, 482, 483], "_pyinterpreterstate_getevalframefunc": [33, 483], "_pyinterpreterstate_setevalframefunc": [33, 483], "eval_fram": [33, 482], "pythreadstate_getdict": [33, 57, 483], "okay": [33, 94, 120, 167, 266, 386], "pythreadstate_setasyncexc": [33, 57, 480, 483], "naiv": [33, 68, 103, 106, 182, 203, 209, 235, 290, 340, 476, 483], "misus": [33, 45, 340, 464, 483], "pyeval_acquirethread": [33, 57, 481, 483], "pyeval_releasethread": [33, 57], "pyeval_acquirelock": [33, 57, 475, 481, 483], "pyeval_releaselock": [33, 57, 475], "perhap": [33, 63, 72, 73, 76, 79, 84, 94, 100, 101, 102, 106, 110, 120, 151, 177, 181, 193, 218, 243, 266, 268, 283, 293, 299, 334, 337, 394, 411, 428, 430, 431, 462, 463, 464, 466, 467, 468, 472, 474, 481, 483], "pyinterpreterstate_main": [33, 483], "pyinterpreterconfig": [33, 474, 483], "py_newinterpreterfromconfig": [33, 474, 483], "use_main_obmalloc": 33, "check_multi_interp_extens": [33, 474], "pyinterpreterconfig_own_gil": [33, 474, 483], "allow_fork": 33, "unrestrict": [33, 59, 426], "subprocess": [33, 68, 102, 123, 130, 131, 132, 142, 164, 166, 169, 208, 210, 248, 254, 257, 283, 293, 301, 327, 331, 337, 338, 362, 368, 382, 384, 399, 400, 455, 460, 465, 468, 469, 472, 475, 481, 482, 483, 484], "allow_exec": 33, "execv": [33, 257, 292, 293, 306, 476, 483], "allow_thread": 33, "allow_daemon_thread": 33, "daemon": [33, 101, 102, 269, 283, 316, 335, 337, 338, 365, 366, 402, 465, 468, 472, 476, 480, 482, 483], "init": [33, 45, 63, 68, 73, 86, 142, 176, 203, 250, 276, 293, 296, 308, 315, 363, 375, 386, 467, 468, 483], "489": [33, 45, 68, 71, 73, 250, 482, 483], "py_mod_multiple_interpret": [33, 45, 483], "pyinterpreterconfig_default_gil": [33, 483], "pyinterpreterconfig_shared_gil": [33, 483], "tstate_p": 33, "config": [33, 34, 68, 72, 79, 85, 96, 101, 102, 118, 167, 247, 254, 266, 267, 269, 292, 332, 352, 355, 369, 372, 389, 390, 407, 452, 456, 460, 465, 469, 472, 473, 474, 475, 477, 479, 480, 481, 483], "almost": [33, 64, 72, 75, 76, 84, 85, 92, 102, 106, 108, 109, 112, 120, 157, 177, 186, 251, 258, 266, 272, 275, 283, 288, 292, 319, 344, 348, 369, 388, 428, 434, 456, 461, 463, 465, 468, 470, 474, 476, 482, 483], "total": [33, 34, 35, 59, 73, 78, 85, 89, 95, 102, 117, 126, 133, 134, 139, 160, 183, 186, 190, 191, 193, 196, 205, 211, 225, 226, 230, 259, 261, 272, 293, 308, 319, 332, 337, 340, 341, 344, 345, 358, 366, 376, 382, 386, 388, 395, 428, 430, 435, 444, 455, 469, 473, 474, 475, 476, 477, 478, 479, 481, 483], "unsuccess": [33, 483], "likewis": [33, 55, 85, 94, 112, 120, 186, 190, 208, 209, 267, 271, 338, 384, 415, 434, 435, 475, 476, 483], "briefli": [33, 77, 109, 186, 467, 483], "pymodule_fromdefandspec": [33, 45, 478], "squirrel": [33, 308], "across": [33, 42, 61, 63, 68, 85, 100, 120, 167, 169, 176, 183, 191, 193, 209, 255, 260, 261, 266, 267, 268, 269, 283, 299, 314, 320, 328, 330, 344, 352, 365, 369, 376, 378, 384, 413, 430, 435, 465, 466, 468, 469, 474, 475, 479, 480, 481, 483], "initmodul": 33, "essenti": [33, 73, 85, 93, 133, 167, 215, 225, 250, 268, 269, 275, 288, 292, 293, 324, 330, 338, 343, 344, 352, 388, 411, 422, 433, 462, 464, 469, 470, 476, 477, 482, 483], "unisol": 33, "py_endinterpret": [33, 57, 100, 483], "haven": [33, 96, 106, 109, 139, 151, 186, 468, 469, 474, 483], "benefit": [33, 85, 95, 102, 186, 268, 299, 341, 344, 352, 362, 376, 386, 402, 461, 464, 465, 466, 469, 475, 476, 480, 481, 483], "truli": [33, 73, 84, 85, 100, 115, 139, 181, 271, 364, 395, 469, 470, 483], "advantag": [33, 51, 73, 75, 85, 95, 101, 102, 186, 197, 250, 299, 308, 324, 331, 344, 375, 388, 402, 411, 413, 415, 462, 465, 466, 471, 474, 475, 476, 477, 478, 481, 483], "cpu": [33, 84, 104, 107, 109, 122, 125, 126, 130, 139, 158, 164, 166, 235, 236, 262, 270, 293, 322, 337, 344, 358, 366, 367, 382, 409, 456, 459, 465, 472, 474, 476, 480, 481, 482, 483], "encourag": [33, 58, 73, 77, 292, 328, 329, 331, 353, 386, 405, 411, 415, 434, 456, 462, 463, 470, 481, 483], "approach": [33, 68, 73, 74, 76, 79, 85, 95, 101, 102, 109, 110, 115, 151, 158, 169, 186, 190, 193, 225, 267, 275, 283, 293, 333, 338, 340, 344, 348, 365, 369, 384, 388, 395, 413, 419, 428, 430, 461, 462, 463, 467, 468, 469, 471, 475, 476, 478, 479, 480, 483, 484], "554": [33, 160, 483], "vigil": 33, "especi": [33, 63, 72, 73, 76, 84, 85, 99, 109, 126, 167, 169, 183, 186, 193, 198, 205, 247, 262, 268, 288, 293, 297, 308, 311, 313, 314, 333, 341, 342, 348, 352, 362, 384, 402, 410, 427, 432, 434, 462, 464, 465, 468, 469, 470, 475, 476, 477, 478, 479, 481, 483], "safeti": [33, 68, 73, 94, 118, 139, 200, 255, 283, 292, 324, 340, 469, 471, 475, 483], "spite": 33, "come": [33, 64, 71, 75, 84, 85, 92, 93, 101, 102, 103, 109, 110, 151, 158, 161, 169, 177, 181, 186, 193, 209, 226, 235, 244, 250, 292, 295, 299, 319, 320, 334, 338, 340, 341, 344, 355, 369, 376, 386, 395, 399, 410, 415, 427, 428, 432, 434, 435, 441, 461, 462, 463, 464, 465, 466, 468, 477, 480, 481, 482, 483], "consequ": [33, 42, 63, 73, 85, 161, 167, 191, 255, 283, 293, 314, 333, 337, 344, 352, 413, 428, 430, 434, 467, 469, 470, 474, 475, 476, 477, 478, 480, 483], "race": [33, 87, 140, 186, 226, 250, 293, 327, 337, 360, 402, 474, 475, 476, 482, 483], "hard": [33, 42, 72, 73, 76, 92, 93, 95, 100, 102, 106, 163, 167, 175, 176, 177, 183, 184, 190, 193, 202, 225, 267, 268, 292, 293, 296, 297, 308, 319, 322, 330, 340, 341, 348, 358, 362, 375, 390, 461, 462, 475, 477, 480, 481, 483], "asid": [33, 183, 225, 247, 308, 358, 390, 428, 430, 475, 480, 481], "challeng": [33, 283, 335, 400, 475, 480, 483], "communic": [33, 68, 102, 126, 133, 137, 193, 212, 242, 245, 247, 254, 257, 269, 283, 293, 299, 305, 309, 333, 337, 338, 341, 347, 348, 365, 376, 386, 419, 426, 462, 466, 467, 468, 478, 480, 481, 483], "break": [33, 63, 64, 68, 75, 76, 78, 84, 92, 94, 95, 102, 103, 106, 122, 128, 132, 136, 139, 144, 151, 158, 169, 170, 176, 177, 190, 193, 200, 202, 208, 247, 250, 255, 261, 271, 283, 292, 297, 299, 307, 314, 319, 321, 326, 333, 335, 337, 341, 344, 345, 348, 352, 359, 361, 362, 364, 365, 384, 388, 394, 399, 400, 407, 411, 427, 428, 429, 430, 431, 433, 435, 440, 443, 445, 462, 463, 464, 465, 467, 468, 469, 471, 475, 476, 477, 478, 480, 481, 483], "stdlib": [33, 34, 35, 68, 73, 100, 102, 211, 235, 247, 355, 456, 467, 473, 475, 476, 478, 483], "mitig": [33, 68, 135, 244, 290, 344, 358, 471, 472, 479, 480, 481, 482, 483], "effort": [33, 79, 102, 106, 122, 226, 275, 307, 462, 464, 465, 466, 468, 469, 471, 475, 480, 483], "insul": 33, "perfect": [33, 95, 151, 196, 243, 247, 292, 341, 343, 430, 461, 483], "malici": [33, 109, 268, 299, 314, 348, 352, 358, 411, 412, 413, 414, 419, 420, 455, 468, 483], "namespac": [33, 45, 61, 68, 73, 78, 79, 85, 87, 89, 93, 95, 101, 114, 118, 157, 160, 168, 181, 191, 193, 207, 222, 225, 226, 230, 247, 248, 250, 251, 255, 267, 268, 273, 283, 293, 297, 299, 302, 314, 324, 331, 337, 344, 351, 352, 353, 366, 382, 385, 386, 388, 389, 390, 398, 400, 410, 411, 412, 415, 416, 427, 429, 436, 437, 445, 450, 455, 462, 463, 464, 465, 467, 469, 470, 474, 475, 477, 478, 479, 480, 481, 483, 484], "reachabl": [33, 193, 292, 293, 296, 386, 428, 482, 483], "delic": [33, 63], "biject": [33, 109], "assumpt": [33, 63, 73, 76, 100, 140, 161, 181, 183, 343, 464, 468, 475, 479, 480, 483], "broken": [33, 100, 102, 107, 109, 112, 138, 190, 207, 212, 255, 266, 283, 293, 294, 305, 333, 344, 352, 362, 364, 365, 369, 388, 394, 435, 455, 467, 471, 474, 476, 477, 481, 482, 483], "presenc": [33, 63, 73, 75, 112, 158, 161, 186, 191, 218, 243, 250, 292, 308, 341, 348, 352, 378, 386, 388, 427, 428, 430, 464, 465, 470, 472, 479, 480, 481, 482, 483], "furthermor": [33, 84, 120, 158, 191, 255, 268, 269, 271, 324, 344, 427, 461, 474, 477], "ctype": [33, 68, 73, 96, 118, 142, 164, 196, 200, 205, 214, 254, 266, 293, 302, 344, 352, 386, 469, 474, 476, 479, 483], "py_addpendingcal": [33, 57, 469, 482, 483], "schedul": [33, 68, 80, 84, 108, 115, 118, 125, 164, 252, 254, 255, 322, 333, 352, 366, 376, 430, 464, 467, 468, 470, 474, 475, 476, 477, 478, 479, 480, 482, 483], "queu": [33, 126, 155, 177, 269, 295, 337, 361, 468], "met": [33, 63, 75, 93, 94, 95, 101, 190, 341, 426, 467, 481, 483], "boundari": [33, 94, 106, 153, 183, 193, 196, 199, 205, 206, 211, 213, 283, 299, 319, 344, 347, 362, 415, 435, 468, 473, 483], "subinterpret": [33, 45, 63, 140, 250, 293, 344, 348, 356, 362, 473, 474, 481, 482, 483], "quick": [33, 50, 68, 75, 84, 85, 95, 102, 106, 110, 118, 190, 216, 217, 218, 222, 267, 269, 290, 319, 333, 352, 369, 375, 388, 463, 464, 465, 466, 467, 468, 470, 471, 474, 475, 477, 483], "busi": [33, 85, 137, 212, 269, 338, 348, 369, 406, 415, 426, 441], "suitabl": [33, 63, 64, 73, 85, 95, 101, 102, 108, 109, 124, 146, 158, 169, 173, 176, 183, 190, 196, 204, 208, 209, 235, 244, 250, 253, 259, 261, 266, 267, 268, 269, 271, 276, 283, 288, 293, 299, 308, 323, 324, 333, 335, 337, 338, 344, 352, 358, 362, 365, 366, 380, 388, 400, 410, 413, 421, 422, 428, 455, 461, 464, 465, 466, 468, 469, 475, 479, 480, 481, 483], "pygilst": 33, "coverag": [33, 85, 352, 380, 470, 472, 474, 477, 483], "overhead": [33, 35, 75, 102, 132, 139, 188, 252, 261, 270, 293, 308, 340, 342, 344, 352, 353, 367, 382, 384, 386, 402, 428, 432, 462, 463, 464, 465, 467, 471, 473, 474, 475, 476, 479, 480, 481, 482, 483], "py_tracefunc": 33, "pertain": [33, 63, 73, 293, 352, 375, 426, 470, 483], "pytrace_cal": 33, "pytrace_except": 33, "pytrace_lin": 33, "pytrace_return": 33, "pytrace_c_cal": 33, "pytrace_c_except": 33, "pytrace_c_return": 33, "pytrace_opcod": 33, "transfer": [33, 68, 72, 73, 92, 110, 136, 143, 169, 191, 195, 196, 197, 198, 201, 202, 203, 206, 207, 208, 223, 235, 241, 242, 244, 271, 276, 283, 288, 293, 299, 335, 347, 395, 397, 419, 426, 430, 432, 468, 469, 475, 476, 479, 481, 483], "unwind": [33, 75, 104, 135, 169, 255, 353, 428, 483], "f_trace_lin": [33, 352, 428, 473, 480, 483], "opcod": [33, 68, 190, 264, 299, 300, 352, 428, 465, 466, 468, 469, 472, 474, 477, 479, 480, 481, 482, 483], "f_trace_opcod": [33, 352, 428, 473, 480, 483], "monitor": [33, 68, 101, 102, 126, 132, 137, 186, 254, 269, 308, 315, 329, 338, 352, 399, 466, 468, 479, 480, 483], "setprofil": [33, 142, 283, 352, 365, 450, 464, 472, 483], "pyeval_setprofileallthread": [33, 474, 483], "settrac": [33, 142, 144, 283, 352, 365, 450, 464, 472, 483], "pyeval_settraceallthread": [33, 474, 483], "pyinterpreterstate_head": [33, 464], "head": [33, 63, 102, 103, 106, 136, 150, 151, 155, 178, 200, 240, 241, 242, 245, 288, 294, 308, 318, 333, 334, 338, 341, 376, 384, 395, 413, 462, 464, 476, 483], "pyinterpreterstate_next": [33, 464], "pyinterpreterstate_threadhead": [33, 464], "pythreadstate_next": [33, 464], "offer": [33, 63, 73, 84, 91, 92, 93, 94, 95, 99, 101, 102, 109, 157, 161, 186, 216, 225, 235, 258, 261, 267, 268, 269, 271, 283, 297, 319, 320, 324, 332, 337, 340, 344, 348, 354, 365, 366, 395, 405, 408, 416, 426, 461, 462, 463, 464, 465, 466, 467, 468, 469, 475, 477, 481, 482, 483], "pthread": [33, 115, 352, 365, 456, 475, 483], "pythread": 33, "behalf": [33, 126, 333, 426, 483], "introduc": [33, 34, 45, 73, 85, 95, 100, 101, 102, 103, 106, 126, 139, 183, 188, 213, 235, 243, 250, 251, 269, 271, 275, 283, 292, 299, 305, 308, 314, 341, 344, 347, 351, 352, 369, 375, 376, 384, 385, 386, 394, 414, 425, 427, 428, 429, 430, 432, 434, 435, 436, 455, 456, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "supersed": [33, 59, 250, 253, 288, 295, 341, 426, 462, 469, 476, 480, 483], "py_tss_t": [33, 480], "539": [33, 68, 483], "py_limited_api": [33, 56, 57, 59, 61, 472, 473, 475, 480, 482, 483], "py_tss_needs_init": 33, "pythread_tss_alloc": [33, 57, 474], "pythread_tss_fre": [33, 57, 474], "pythread_tss_delet": [33, 57, 474], "unassign": [33, 93, 346, 483], "dangl": [33, 63, 73, 77, 87, 293, 332, 344, 362, 427, 483], "moreov": [33, 34, 103, 225, 271, 384, 469, 470, 483], "pythread_tss_set": [33, 57, 474], "pythread_tss_get": [33, 57, 474], "pythread_tss_cr": [33, 57], "pythread_tss_is_cr": [33, 57], "repeat": [33, 54, 58, 63, 68, 79, 95, 103, 110, 112, 120, 155, 161, 176, 177, 183, 190, 197, 214, 225, 235, 247, 261, 266, 276, 283, 285, 292, 295, 297, 302, 308, 318, 319, 337, 340, 341, 344, 345, 347, 365, 367, 380, 381, 384, 386, 388, 395, 405, 406, 427, 428, 443, 455, 464, 465, 466, 468, 469, 475, 476, 477, 478, 479, 483], "forget": [33, 72, 73, 100, 102, 139, 186, 362, 376, 430, 431, 442, 466, 467, 468, 472, 474, 475, 481, 483], "distinct": [33, 42, 45, 63, 85, 92, 106, 109, 141, 169, 181, 183, 186, 193, 226, 261, 268, 270, 292, 299, 308, 334, 340, 341, 344, 347, 352, 369, 386, 432, 435, 462, 464, 468, 475, 476, 479, 480, 482, 483], "pythread_create_key": [33, 57, 474, 483], "ops": [33, 122, 341], "pythread_delete_key": [33, 57, 474], "pythread_set_key_valu": [33, 57, 474, 477], "pythread_get_key_valu": [33, 57, 474], "pythread_delete_key_valu": [33, 57, 474], "pythread_reinittl": [33, 57, 474], "py_preiniti": [34, 42, 59, 474, 481], "kind": [34, 63, 64, 68, 73, 76, 79, 85, 87, 99, 100, 102, 109, 120, 122, 133, 151, 176, 193, 250, 251, 255, 258, 281, 283, 293, 299, 301, 319, 328, 340, 341, 344, 346, 352, 365, 369, 386, 388, 395, 400, 413, 414, 415, 426, 427, 428, 430, 431, 432, 440, 441, 456, 461, 464, 465, 466, 468, 470, 474, 475, 476, 477, 478, 479, 480, 481, 483], "lc_ctype": [34, 59, 87, 109, 266, 293, 344, 455, 479, 480, 483], "unchang": [34, 42, 93, 102, 106, 112, 144, 151, 155, 167, 176, 177, 186, 208, 230, 255, 258, 261, 266, 269, 271, 293, 302, 319, 337, 340, 344, 345, 358, 369, 384, 385, 386, 389, 394, 427, 428, 430, 435, 461, 464, 466, 467, 468, 469, 470, 471, 474, 475, 476, 479, 480, 483], "587": [34, 68, 102, 341, 483], "pyconfig_initpythonconfig": [34, 481], "pyconfig_setbytesargv": [34, 481], "pystatus_except": [34, 474, 481], "goto": [34, 35, 68, 155, 384, 456, 471, 473, 475, 483], "pyconfig_clear": [34, 481, 483], "pystatus_isexit": [34, 481], "exitcod": [34, 283, 293, 348, 362, 483], "py_exitstatusexcept": [34, 481], "pywidestringlist_append": [34, 481], "pywidestringlist_insert": [34, 481], "err_msg": [34, 352, 362], "pystatus_ok": [34, 481], "pystatus_error": [34, 481], "pystatus_nomemori": [34, 481], "pystatus_exit": [34, 481], "pystatus_iserror": [34, 481], "wherea": [34, 73, 85, 96, 102, 103, 126, 137, 167, 262, 267, 283, 319, 329, 352, 369, 402, 432, 461, 470, 482, 483], "preconfigur": 34, "pypreconfig_initpythonconfig": [34, 481], "preconfig": [34, 481], "pypreconfig_initisolatedconfig": [34, 481], "pymem_allocator_not_set": 34, "pymem_allocator_default": 34, "pymem_allocator_debug": 34, "pymem_allocator_malloc": 34, "pymem_allocator_malloc_debug": 34, "pymem_allocator_pymalloc": 34, "pymem_allocator_pymalloc_debug": 34, "configure_local": 34, "coerce_c_local": 34, "coerce_c_locale_warn": 34, "coerc": [34, 64, 99, 167, 186, 195, 196, 205, 266, 343, 345, 455, 462, 470, 480, 483], "dev_mod": [34, 188, 352, 483], "utf8_mod": [34, 293, 352, 474], "filesystem_encod": [34, 59, 87, 293, 352, 474], "filesystem_error": [34, 59, 87, 293, 352, 474], "ifdef": [34, 73, 456, 462, 483], "py_preinitializefromarg": [34, 481], "py_preinitializefrombytesarg": [34, 481], "pars": [34, 59, 64, 65, 66, 68, 73, 79, 84, 85, 99, 102, 106, 110, 112, 118, 122, 133, 136, 151, 155, 157, 159, 167, 183, 193, 194, 196, 199, 200, 201, 203, 205, 206, 208, 209, 217, 222, 225, 228, 230, 240, 242, 243, 244, 245, 248, 250, 254, 256, 259, 262, 264, 268, 269, 271, 273, 276, 285, 286, 293, 308, 340, 344, 345, 348, 355, 366, 378, 382, 392, 395, 396, 399, 400, 410, 411, 412, 414, 415, 416, 417, 419, 420, 430, 431, 435, 436, 443, 446, 450, 455, 462, 463, 464, 465, 466, 467, 468, 474, 476, 477, 478, 479, 483, 484], "utf8": [34, 58, 122, 151, 158, 203, 205, 207, 208, 248, 293, 305, 314, 335, 352, 411, 413, 455, 461, 478, 480, 483], "pythonutf8": [34, 293, 352, 455, 461, 480, 483], "_pyruntim": [34, 482, 483], "pre": [34, 35, 73, 101, 102, 106, 111, 186, 191, 203, 208, 226, 245, 250, 261, 268, 292, 324, 331, 338, 340, 352, 353, 358, 381, 386, 387, 395, 399, 427, 455, 456, 461, 462, 465, 466, 467, 469, 474, 475, 477, 478, 479, 480, 482, 483], "pyconfig_initisolatedconfig": [34, 481], "pyconfig_setstr": [34, 481], "config_str": 34, "pyconfig_setbytesstr": [34, 59, 481], "pyconfig_setargv": [34, 481], "pyconfig_setwidestringlist": [34, 483], "pyconfig_read": [34, 59, 87, 293, 352, 473, 481, 483], "stripp": [34, 483], "tune": [34, 226, 243, 292, 322, 341, 462, 465, 474, 483], "strip": [34, 85, 95, 106, 120, 158, 167, 170, 177, 178, 183, 190, 193, 200, 208, 209, 225, 228, 245, 247, 268, 269, 284, 308, 326, 331, 335, 338, 343, 344, 348, 356, 358, 362, 381, 382, 386, 394, 400, 413, 422, 442, 443, 462, 465, 470, 471, 472, 475, 478, 479, 480, 481, 482, 483], "unsaf": [34, 63, 75, 85, 149, 167, 188, 283, 293, 309, 331, 340, 352, 358, 388, 389, 395, 398, 455, 465, 472, 474, 478, 480, 483], "py": [34, 35, 51, 68, 73, 76, 79, 85, 86, 87, 89, 94, 95, 98, 101, 102, 103, 104, 109, 111, 112, 113, 116, 117, 120, 122, 125, 126, 127, 129, 131, 133, 134, 135, 136, 137, 138, 139, 143, 144, 147, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 162, 163, 166, 167, 169, 171, 172, 173, 175, 176, 178, 181, 183, 184, 186, 188, 189, 190, 191, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 207, 208, 209, 211, 214, 216, 218, 220, 221, 223, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 258, 259, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 276, 279, 281, 284, 286, 288, 289, 291, 292, 293, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 321, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 354, 355, 357, 358, 359, 360, 362, 364, 365, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 388, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 408, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 430, 432, 438, 448, 449, 450, 451, 452, 453, 455, 456, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "symbol": [34, 66, 68, 71, 73, 77, 79, 85, 92, 94, 96, 102, 103, 104, 109, 118, 157, 159, 176, 177, 186, 193, 245, 254, 266, 269, 272, 293, 294, 296, 300, 319, 322, 332, 333, 337, 340, 342, 344, 351, 352, 354, 357, 358, 359, 361, 362, 369, 376, 384, 387, 394, 405, 410, 415, 428, 431, 434, 436, 441, 455, 461, 462, 464, 466, 467, 469, 471, 472, 474, 475, 479, 481, 482, 483], "link": [34, 35, 63, 66, 68, 71, 73, 74, 77, 78, 79, 84, 85, 86, 87, 101, 102, 118, 142, 161, 163, 178, 183, 200, 212, 235, 240, 243, 245, 257, 259, 261, 266, 293, 294, 296, 328, 332, 342, 348, 352, 354, 357, 358, 362, 369, 375, 376, 399, 402, 403, 405, 413, 414, 426, 428, 432, 455, 456, 462, 464, 465, 466, 468, 469, 472, 474, 475, 476, 477, 478, 480, 481, 482, 483], "resolv": [34, 68, 75, 85, 101, 102, 120, 126, 128, 139, 167, 176, 183, 191, 193, 250, 251, 252, 255, 259, 267, 268, 292, 293, 296, 302, 308, 314, 332, 337, 348, 352, 385, 386, 388, 411, 412, 413, 415, 416, 417, 429, 455, 461, 464, 476, 477, 478, 479, 480, 481, 483], "pythonsafepath": [34, 327, 352, 455, 473, 483], "base_exec_prefix": [34, 334, 352, 399, 450], "base_execut": 34, "_base_execut": [34, 483], "__pyvenv_launcher__": [34, 483], "base_prefix": [34, 230, 334, 352, 399, 450], "configure_c_stdio": 34, "warn_default_encod": [34, 258, 352, 455, 472, 483], "encodingwarn": [34, 68, 213, 258, 455, 483], "textiowrapp": [34, 120, 149, 188, 218, 225, 234, 250, 253, 258, 270, 348, 360, 422, 468, 472, 476, 477, 479, 480, 483], "code_debug_rang": 34, "caret": [34, 106, 177, 178, 193, 319, 381, 483], "pythonnodebugrang": [34, 428, 455, 473], "no_debug_rang": [34, 428, 455, 473], "check_hash_pycs_mod": 34, "check_sourc": 34, "552": [34, 68, 250, 311, 473, 483], "determinist": [34, 68, 102, 106, 169, 185, 188, 250, 255, 337, 340, 359, 413, 475, 480, 482, 483], "dev": [34, 68, 79, 80, 96, 98, 102, 103, 126, 188, 229, 269, 271, 272, 293, 294, 295, 307, 333, 348, 352, 355, 438, 455, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 478, 483], "pythondevmod": [34, 188, 455, 480], "dump_ref": 34, "dump": [34, 42, 68, 73, 94, 101, 102, 122, 142, 151, 172, 175, 185, 188, 254, 262, 266, 269, 274, 284, 286, 293, 297, 299, 304, 308, 333, 340, 342, 381, 382, 413, 419, 446, 455, 456, 462, 463, 464, 465, 468, 469, 471, 476, 477, 478, 479, 482, 483], "aliv": [34, 63, 85, 176, 226, 283, 305, 344, 362, 365, 402, 427, 428, 452, 455, 463, 469, 470, 475, 477, 483], "pythondumpref": [34, 63, 455, 456, 481, 483], "py_trace_ref": [34, 35, 63, 456, 472, 481, 482, 483], "faulthandl": [34, 68, 176, 185, 188, 254, 297, 333, 362, 381, 455, 483], "pythonfaulthandl": [34, 188, 214, 455, 476], "getfilesystemencod": [34, 66, 87, 109, 120, 293, 352, 358, 421, 450, 479, 483], "android": [34, 64, 87, 266, 303, 352, 362, 479, 480, 481, 483], "vxwork": [34, 64, 87, 173, 266, 293, 301, 322, 472, 483], "nl_langinfo": [34, 266, 464, 483], "codeset": [34, 158, 230, 266, 464, 473, 481, 483], "announc": [34, 80, 109, 293, 476], "mbstowc": 34, "latin1": [34, 136, 158, 299, 314, 467, 476, 479, 482, 483], "ansi_x3": 34, "1968": 34, "getfilesystemencodeerror": [34, 87, 352, 450, 479], "surrogateescap": [34, 59, 64, 109, 158, 201, 208, 218, 225, 293, 337, 340, 352, 358, 455, 475, 478, 479, 480, 483], "chosen": [34, 45, 73, 94, 101, 106, 186, 225, 235, 268, 283, 284, 292, 299, 337, 341, 347, 352, 375, 415, 428, 451, 455, 461, 465, 466, 470, 483], "import_tim": 34, "importtim": [34, 455, 480, 483], "pythonprofileimporttim": [34, 455, 480, 483], "install_signal_handl": [34, 472, 483], "repl": [34, 114, 123, 191, 319, 352, 455, 472, 481, 483], "int_max_str_digit": [34, 344, 352, 455, 483], "4300": [34, 344, 472, 473, 480, 481, 482], "int_info": [34, 344, 352, 450, 456, 471], "default_max_str_digit": [34, 344, 352], "640": [34, 344, 384], "str_digits_check_threshold": [34, 344, 352], "pythonintmaxstrdigit": [34, 344, 352, 455, 483], "prompt": [34, 66, 79, 85, 112, 120, 142, 155, 157, 166, 173, 176, 189, 191, 193, 200, 207, 225, 229, 247, 248, 283, 297, 313, 319, 320, 335, 341, 344, 348, 352, 361, 365, 381, 384, 395, 399, 432, 436, 441, 444, 449, 455, 461, 465, 468, 472, 475, 477, 479, 480, 481, 482, 483], "malloc_stat": 34, "statist": [34, 42, 68, 93, 185, 226, 254, 275, 288, 290, 308, 318, 332, 341, 352, 380, 451, 455, 456, 462, 463, 467, 469, 473, 475, 476, 483], "pythonmallocstat": [34, 42, 455, 483], "platlibdir": [34, 352, 354, 455, 456, 482, 483], "pythonplatlibdir": [34, 354, 455, 483], "lib": [34, 35, 72, 77, 79, 84, 86, 89, 95, 96, 98, 112, 113, 116, 117, 120, 122, 123, 126, 127, 129, 131, 133, 134, 135, 136, 137, 138, 139, 143, 144, 147, 149, 150, 151, 152, 153, 155, 157, 158, 159, 160, 161, 162, 163, 166, 167, 169, 171, 172, 173, 175, 176, 177, 178, 181, 183, 184, 186, 189, 190, 191, 193, 194, 195, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 216, 218, 220, 221, 223, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 258, 259, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 276, 279, 281, 283, 284, 286, 288, 289, 291, 292, 293, 294, 296, 297, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 311, 312, 313, 316, 317, 318, 319, 321, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 354, 355, 357, 358, 359, 360, 364, 365, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 430, 438, 450, 452, 453, 455, 456, 460, 461, 462, 463, 464, 465, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483], "dlls": [34, 68, 74, 118, 293, 462, 467, 481, 483], "layout": [34, 42, 61, 63, 68, 76, 100, 101, 102, 158, 189, 213, 271, 341, 347, 355, 368, 369, 373, 398, 428, 432, 445, 461, 468, 474, 476, 477, 483], "virtual": [34, 68, 73, 85, 87, 102, 111, 116, 161, 176, 177, 179, 192, 225, 226, 242, 251, 254, 255, 280, 293, 333, 337, 340, 341, 352, 355, 358, 368, 385, 395, 427, 428, 429, 432, 440, 453, 458, 462, 468, 474, 475, 476, 477, 479, 480, 481, 483], "pythonpath_env": 34, "delim": 34, "pathsep": [34, 293, 334, 380, 403, 425, 455, 456], "peephol": [34, 466, 467, 475, 480, 483], "__debug__": [34, 66, 168, 188, 225, 250, 436, 450, 455, 465, 472, 483], "assert": [34, 35, 49, 66, 68, 96, 102, 108, 112, 116, 122, 139, 143, 168, 181, 183, 184, 187, 188, 191, 193, 213, 225, 228, 255, 283, 292, 297, 299, 319, 340, 344, 362, 385, 386, 388, 389, 400, 402, 411, 425, 426, 427, 430, 431, 433, 435, 450, 455, 456, 465, 466, 468, 471, 475, 477, 478, 481, 482, 483], "py_debug": [34, 35, 362, 456, 472, 481, 483], "log": [34, 59, 68, 93, 95, 97, 109, 118, 125, 126, 139, 147, 151, 152, 154, 164, 166, 169, 188, 193, 214, 223, 230, 236, 245, 254, 258, 275, 288, 293, 305, 327, 332, 335, 340, 341, 344, 348, 352, 356, 358, 362, 386, 388, 400, 420, 428, 445, 451, 455, 461, 462, 463, 464, 466, 467, 468, 471, 472, 482, 483, 484], "pythonexecut": [34, 455], "with_next_framework": 34, "python3": [34, 57, 72, 89, 96, 98, 102, 111, 112, 200, 208, 296, 334, 344, 354, 355, 382, 399, 421, 438, 448, 453, 455, 456, 460, 461, 469, 472, 474, 475, 477, 479, 481, 482, 483], "pycache_prefix": [34, 163, 352, 450, 455, 481, 483], "pythonpycacheprefix": [34, 352, 455, 481, 483], "run_command": [34, 142, 455], "run_filenam": 34, "skip_source_first_lin": 34, "run_modul": [34, 142, 324, 455, 483], "show_ref_count": 34, "showrefcount": [34, 455, 456, 477, 483], "py_ref_debug": [34, 456], "no_sit": [34, 352, 475], "invert": [34, 93, 94, 95, 122, 158, 186, 191, 211, 291, 344, 428, 430, 431, 473, 483], "cmd": [34, 68, 86, 102, 120, 126, 137, 142, 144, 177, 215, 222, 223, 254, 293, 297, 301, 308, 332, 335, 348, 380, 399, 455, 474, 475, 483], "dos": [34, 78, 177, 288, 292, 455, 462, 464, 475, 477, 483], "hack": [34, 84, 95, 100, 193, 331, 395, 455, 462, 463, 464, 483], "pythontracemalloc": [34, 382, 455, 483], "perf_profil": 34, "trampolin": [34, 352, 474, 483], "pythonperfsupport": [34, 104, 455, 474], "warnopt": [34, 59, 352, 362, 400, 450, 474, 480, 483], "filter": [34, 59, 68, 85, 95, 101, 112, 118, 119, 141, 160, 177, 185, 188, 189, 190, 213, 216, 218, 220, 225, 261, 268, 312, 315, 328, 332, 337, 362, 388, 399, 421, 425, 430, 442, 450, 455, 456, 462, 463, 464, 465, 466, 468, 469, 470, 472, 473, 474, 475, 479, 480, 481, 482, 483], "lowest": [34, 42, 101, 122, 186, 191, 221, 236, 278, 341, 344, 348, 365, 430, 462, 467, 479], "highest": [34, 79, 93, 94, 101, 122, 133, 167, 267, 278, 299, 300, 328, 333, 340, 341, 344, 352, 366, 430, 468, 476, 483], "prioriti": [34, 68, 93, 108, 124, 142, 167, 236, 250, 262, 269, 293, 299, 316, 322, 325, 328, 341, 344, 348, 356, 365, 375, 428, 430, 464, 465, 468, 475, 476, 477, 479, 481, 483], "revers": [34, 38, 68, 73, 80, 92, 93, 95, 108, 109, 121, 140, 141, 158, 160, 161, 169, 177, 181, 183, 186, 191, 211, 214, 225, 236, 255, 259, 261, 283, 289, 293, 308, 314, 319, 331, 340, 344, 378, 382, 385, 386, 388, 394, 402, 428, 440, 442, 450, 462, 465, 467, 468, 469, 470, 471, 472, 475, 476, 477, 478, 479, 480, 481, 483, 484], "pythonwarn": [34, 188, 400, 455, 469, 475, 480, 483], "dont_write_bytecod": [34, 352, 450, 468, 475], "xoption": [34, 59, 455, 473, 483], "_xoption": [34, 59, 352, 450, 455], "show_alloc_count": [34, 479, 482, 483], "init_python": 34, "my_program": 34, "pysys_getobject": [34, 57, 59, 100, 473], "my_execut": 34, "unspecifi": [34, 95, 126, 149, 176, 193, 259, 270, 275, 287, 293, 299, 314, 337, 366, 376, 386], "coercion": [34, 68, 225, 293, 345, 428, 455, 456, 467, 469, 483, 484], "538": [34, 68, 266, 455, 456, 483], "540": [34, 68, 266, 293, 483], "pythoncoerceclocal": [34, 293, 455, 456, 480, 483], "softwarepythonpythoncorex": 34, "ypythonpath": 34, "hkey_current_us": [34, 405, 461], "hkey_local_machin": [34, 405, 461], "unset": [34, 59, 63, 191, 271, 293, 295, 344, 352, 362, 432, 468, 469, 480, 483], "overridden": [34, 85, 93, 94, 102, 103, 120, 144, 155, 161, 167, 183, 208, 225, 230, 243, 244, 245, 250, 255, 267, 269, 292, 293, 297, 307, 313, 324, 338, 340, 341, 344, 348, 352, 358, 365, 376, 386, 388, 395, 399, 400, 428, 430, 432, 443, 455, 468, 469, 476, 477, 481, 482, 483], "py_main": [34, 57, 66, 461, 480, 483], "pyvenv": [34, 334, 354, 399, 461, 476, 477, 479, 481, 483], "cfg": [34, 85, 167, 268, 334, 354, 384, 399, 461, 468, 476, 478, 479, 483], "_pth": [34, 68, 280, 461, 479, 480, 483], "pybuilddir": [34, 483], "txt": [34, 35, 68, 78, 95, 102, 109, 120, 160, 166, 169, 188, 193, 208, 218, 220, 225, 230, 231, 234, 235, 243, 247, 251, 253, 254, 256, 258, 278, 288, 292, 293, 296, 299, 332, 344, 348, 352, 358, 369, 387, 392, 399, 413, 421, 422, 435, 440, 443, 451, 452, 453, 456, 461, 462, 468, 469, 471, 475, 476, 477, 478, 479, 481, 483], "432": [34, 480, 483], "bare": [34, 101, 102, 122, 167, 203, 292, 335, 431, 459, 461, 467, 470, 473, 481, 483], "importlib": [34, 68, 85, 87, 98, 102, 112, 225, 247, 254, 255, 268, 280, 302, 311, 324, 352, 362, 382, 385, 422, 423, 428, 433, 436, 450, 461, 471, 473, 475, 481, 483, 484], "_init_main": 34, "_py_initializemain": 34, "move": [34, 84, 85, 91, 92, 93, 96, 99, 102, 110, 112, 120, 142, 155, 176, 177, 179, 181, 183, 196, 205, 206, 218, 247, 261, 269, 271, 278, 293, 297, 311, 332, 362, 366, 371, 375, 376, 384, 388, 389, 394, 395, 413, 451, 462, 463, 464, 465, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "mayb": [34, 73, 94, 95, 271, 400, 431, 434, 472], "meta_path": [34, 87, 142, 250, 251, 302, 352, 432, 436, 450, 461, 465, 476, 479, 483], "motiv": [34, 93, 358, 428, 430, 463, 465, 466, 476, 481, 483], "anytim": [34, 151, 344, 369], "res": [34, 42, 45, 79, 103, 106, 139, 242, 283, 319, 337, 340, 483], "put": [34, 49, 58, 68, 73, 75, 76, 79, 84, 85, 92, 93, 94, 95, 96, 100, 102, 106, 134, 138, 151, 158, 167, 176, 191, 193, 201, 203, 208, 215, 230, 232, 241, 242, 247, 250, 268, 281, 283, 295, 299, 300, 316, 333, 334, 335, 337, 341, 344, 355, 364, 365, 369, 390, 395, 425, 432, 441, 449, 461, 463, 464, 465, 466, 467, 468, 469, 475, 478, 483], "cookbook": [35, 68, 74, 85, 97, 101, 110, 268, 269, 275, 367, 454, 475, 483], "stdio": [35, 72, 73, 104, 293, 468, 473, 483], "_pi": [35, 481, 483], "pythonvers": 35, "version_info": [35, 80, 100, 113, 122, 340, 352, 355, 450, 462, 469, 471, 473, 474, 475, 476, 483], "pythonx": [35, 72, 334, 344, 352, 399, 483], "py_return_non": [35, 46, 73, 466], "pymodinit_func": [35, 73, 76, 456, 465, 483], "pyinit": [35, 71], "linkag": [35, 68, 74, 303], "pyinit_": [35, 71, 456, 483], "pymoduledef": [35, 45, 57, 61, 71, 72, 73, 76, 100, 482, 483], "spam_modul": [35, 73], "pymoduledef_head_init": [35, 45, 72, 73, 76], "m_name": [35, 45, 76], "spam": [35, 45, 73, 77, 102, 103, 106, 110, 120, 170, 175, 176, 218, 225, 226, 230, 242, 243, 245, 250, 255, 258, 268, 296, 307, 313, 319, 321, 330, 334, 340, 344, 348, 358, 381, 385, 386, 389, 390, 395, 413, 422, 428, 430, 432, 440, 441, 443, 446, 449, 450, 462, 468, 478, 483], "pyinit_spam": [35, 73], "py_ab": 35, "py_always_inlin": [35, 483], "inlin": [35, 52, 58, 60, 64, 68, 87, 167, 190, 191, 196, 197, 203, 205, 237, 308, 319, 379, 388, 456, 465, 467, 472, 473, 475, 479, 481, 483], "msc": [35, 86, 483], "py_charmask": 35, "128": [35, 64, 87, 99, 102, 109, 141, 160, 177, 186, 226, 235, 259, 284, 293, 340, 341, 384, 398, 435, 449, 467, 474, 478, 483], "127": [35, 58, 64, 102, 107, 109, 126, 133, 136, 170, 245, 247, 259, 283, 293, 338, 341, 344, 348, 352, 362, 382, 467, 478, 483], "255": [35, 64, 68, 87, 92, 99, 109, 113, 158, 160, 177, 191, 225, 235, 259, 344, 347, 384, 430, 473, 476, 478, 480, 483, 484], "py_deprec": [35, 481, 483], "pyapi_func": [35, 456, 465, 481, 483], "py_oldfunct": [35, 481], "msvc": [35, 63, 77, 86, 176, 466, 481, 483], "py_getenv": 35, "getenv": [35, 293, 306], "py_max": 35, "py_member_s": 35, "py_min": 35, "py_no_inlin": [35, 483], "lto": [35, 456, 473, 483], "pgo": [35, 362, 456, 468, 479, 482, 483], "33720": [35, 483], "py_stringifi": 35, "123": [35, 73, 100, 102, 106, 122, 186, 221, 225, 261, 268, 337, 344, 347, 430, 440, 446, 462, 464, 468, 469, 471, 475], "py_unreach": [35, 480, 483], "__builtin_unreach": [35, 483], "_py_no_return": 35, "py_unus": [35, 58, 76, 483], "pydoc_strvar": [35, 45, 100, 456, 483], "pop_doc": 35, "rightmost": [35, 147, 158, 160, 177, 186, 261, 293, 344, 430, 466], "deque_method": 35, "pycfunct": [35, 44, 57, 58, 73, 75, 76, 100, 466, 483], "deque_pop": 35, "meth_noarg": [35, 58, 76, 464, 465, 483], "pydoc_str": [35, 58, 63, 76, 483], "pysqlite_row_method": 35, "pysqlite_row_key": 35, "row": [35, 68, 73, 85, 175, 225, 261, 298, 369, 376, 378, 384, 435, 442, 467, 471, 475, 478, 479, 483], "pylist_check": [35, 38, 79], "incref": [35, 63, 483], "sizeof": [35, 42, 63, 76, 176, 303, 347, 352, 389, 483], "pyobject_": [35, 45, 63, 467], "pynumber_": 35, "pysequence_": 35, "pymapping_": 35, "py_xdecref": [35, 45, 52, 63, 72, 73, 76, 473, 481, 483], "pylist_setitem": [35, 38, 57, 73], "pytuple_setitem": [35, 55, 57, 60, 72, 73], "pytuple_new": [35, 57, 60, 72], "1l": [35, 341, 464, 465, 468, 469, 483], "2l": [35, 462], "pysequence_setitem": [35, 38, 54, 57, 63, 483], "pyobject_setitem": [35, 40, 49, 57, 63, 467, 483], "iis": [35, 407], "set_al": [35, 226], "pyobject_length": [35, 49, 57], "pylong_fromssize_t": [35, 39, 57], "pysequence_getitem": [35, 54, 57, 63, 79, 483], "plumag": [35, 73, 441], "pylist_getitem": [35, 38, 57, 73, 79, 483], "sum_list": 35, "pylist_s": [35, 38, 57, 79, 467], "pylong_check": [35, 39, 63], "fit": [35, 73, 99, 120, 176, 177, 178, 186, 191, 193, 195, 215, 250, 259, 269, 292, 307, 308, 337, 347, 364, 369, 384, 388, 395, 400, 410, 421, 426, 465, 466, 469, 474, 475, 476, 477, 482, 483], "bail": [35, 483], "sum_sequ": 35, "pysequence_length": [35, 54, 57, 79], "ownership": [35, 68, 100, 102, 126, 136, 257, 283, 365, 426, 468, 476, 483], "353": [35, 68, 472, 483, 484], "py_ssize_t_max": [35, 47, 56, 483], "incr_item": 35, "const_on": 35, "incremented_item": 35, "0l": [35, 73, 347], "pynumber_add": [35, 47, 57], "shell": [35, 68, 73, 76, 79, 80, 85, 86, 87, 92, 95, 102, 111, 124, 126, 130, 137, 151, 155, 164, 167, 177, 193, 220, 222, 231, 254, 255, 262, 272, 284, 288, 292, 293, 294, 309, 313, 340, 350, 352, 354, 362, 368, 369, 384, 388, 399, 400, 405, 438, 439, 447, 448, 449, 450, 451, 453, 455, 456, 459, 460, 461, 462, 464, 466, 469, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483], "fallback": [35, 68, 126, 163, 168, 184, 217, 230, 299, 332, 352, 358, 362, 376, 406, 428, 430, 432, 474, 475, 481, 483], "getpath": [35, 483], "specialbuild": [35, 456], "pydebug": [35, 96, 352, 456, 465, 472, 477, 483], "_debug": 35, "doubli": [35, 63, 85, 469], "pyiter_check": [36, 57, 63, 483], "pyiter_next": [36, 57, 63], "pyaiter_check": [36, 57, 483], "asynciter": [36, 49, 161, 344, 386, 478, 483], "pyobject_getit": [36, 49, 55, 57, 63], "pysendresult": [36, 63], "pyiter_send": [36, 57, 63, 472, 483], "enum": [36, 42, 68, 97, 120, 163, 182, 241, 254, 255, 262, 308, 311, 319, 333, 341, 344, 385, 428, 441, 476, 483], "presult": 36, "pygen_return": 36, "pygen_next": 36, "pygen_error": 36, "__getitem__": [37, 40, 54, 63, 64, 68, 80, 87, 98, 102, 108, 116, 160, 161, 176, 196, 203, 205, 211, 218, 225, 271, 283, 291, 319, 344, 345, 386, 389, 390, 407, 410, 412, 413, 427, 430, 452, 464, 465, 466, 470, 473, 474, 475, 479, 481, 483], "pyseqiter_typ": [37, 57], "pyseqiter_new": [37, 57], "pyseqiter_check": 37, "seq": [37, 64, 85, 103, 160, 191, 220, 225, 261, 291, 318, 344, 462, 466, 473, 475], "subscript": [37, 63, 68, 87, 102, 176, 191, 247, 264, 344, 386, 428, 436, 449, 455, 465, 468, 472, 473, 474, 482, 483], "pycalliter_typ": [37, 57], "pycalliter_new": [37, 57], "pycalliter_check": 37, "pylist_typ": [38, 57, 76], "pylist_checkexact": 38, "pylist_get_s": 38, "pylist_get_item": [38, 57], "pylist_set_item": [38, 472, 483], "pylist_insert": [38, 57], "pylist_append": [38, 57, 483], "pylist_getslic": [38, 57], "pylist_setslic": [38, 57], "itemlist": 38, "pylist_sort": [38, 57], "sort": [38, 68, 76, 77, 80, 84, 87, 89, 95, 110, 112, 120, 147, 151, 160, 167, 173, 176, 184, 186, 190, 193, 208, 225, 226, 232, 236, 248, 251, 255, 259, 261, 262, 266, 271, 283, 291, 292, 293, 296, 304, 307, 308, 318, 319, 328, 335, 340, 343, 344, 358, 362, 382, 384, 388, 395, 410, 413, 422, 428, 430, 440, 441, 442, 450, 452, 461, 464, 465, 466, 467, 468, 469, 470, 471, 475, 477, 478, 480, 481, 482, 483], "pylist_revers": [38, 57], "pylist_astupl": [38, 57], "pylong_a": 39, "distinguish": [39, 63, 68, 73, 96, 122, 161, 177, 187, 191, 193, 197, 225, 243, 255, 268, 275, 314, 341, 355, 376, 386, 400, 428, 430, 432, 461, 463, 464, 469, 476, 477, 483], "pylongobject": [39, 57, 96, 474, 483], "pylong_typ": [39, 57, 483], "pylong_checkexact": 39, "256": [39, 42, 64, 87, 99, 158, 173, 177, 186, 225, 235, 270, 326, 341, 344, 358, 428, 449, 466, 467, 481, 482, 483], "pylong_fromunsignedlong": [39, 57, 483], "pylong_fromsize_t": [39, 57, 483], "pylong_fromlonglong": [39, 57, 483], "pylong_fromunsignedlonglong": [39, 57, 483], "pylong_fromdoubl": [39, 57, 482, 483], "pylong_fromstr": [39, 57, 483], "radix": [39, 186, 225, 266, 352, 435, 483], "decim": [39, 59, 64, 68, 78, 85, 106, 109, 158, 167, 178, 183, 221, 225, 226, 254, 259, 261, 262, 266, 268, 275, 290, 292, 308, 319, 343, 344, 345, 352, 365, 366, 378, 379, 387, 388, 419, 426, 428, 430, 435, 444, 445, 449, 455, 456, 462, 467, 468, 469, 471, 472, 473, 481, 482, 483, 484], "whitespac": [39, 64, 68, 85, 94, 95, 106, 109, 112, 120, 126, 137, 143, 146, 155, 167, 178, 186, 190, 193, 199, 202, 203, 208, 221, 245, 247, 255, 262, 266, 297, 314, 319, 331, 344, 345, 347, 348, 364, 366, 381, 400, 410, 413, 415, 455, 462, 465, 468, 469, 471, 475, 476, 477, 480, 483], "underscor": [39, 68, 71, 85, 94, 102, 146, 151, 158, 176, 186, 196, 205, 221, 225, 271, 307, 319, 331, 344, 345, 352, 354, 369, 422, 427, 428, 429, 430, 434, 435, 436, 468, 470, 471, 474, 483], "digit": [39, 59, 64, 85, 100, 106, 109, 117, 141, 143, 146, 158, 160, 173, 178, 183, 186, 193, 221, 225, 235, 244, 259, 266, 268, 275, 288, 293, 319, 321, 326, 340, 341, 344, 345, 352, 362, 366, 369, 378, 387, 388, 394, 395, 398, 413, 424, 426, 435, 444, 449, 456, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 479, 480, 481, 482, 483], "to_byt": [39, 344, 483], "from_byt": [39, 344, 483], "pylong_fromunicodeobject": [39, 472], "pylong_fromvoidptr": [39, 57], "pylong_asvoidptr": [39, 57], "__int__": [39, 63, 221, 225, 386, 389, 428, 467, 469, 472, 473, 480, 481, 483], "pylong_aslongandoverflow": [39, 57, 469, 475], "long_min": 39, "pylong_aslonglong": [39, 57], "pylong_aslonglongandoverflow": [39, 57, 469, 475], "llong_max": 39, "llong_min": 39, "pylong_asssize_t": [39, 57], "pylong": [39, 471, 483], "pylong_asunsignedlong": [39, 57], "pylong_assize_t": [39, 57], "pylong_asunsignedlonglong": [39, 57, 471], "pylong_asunsignedlongmask": [39, 57], "reduct": [39, 68, 172, 298, 344, 474, 476, 483], "modulo": [39, 102, 186, 213, 225, 291, 333, 344, 376, 428, 430, 446, 465, 469, 475, 481, 483], "pylong_asunsignedlonglongmask": [39, 57, 483], "ullong_max": 39, "pylong_asdoubl": [39, 57, 483], "assur": [39, 76, 226, 275, 283, 378, 428, 469, 471, 475, 483], "usabl": [39, 54, 56, 59, 63, 64, 76, 85, 99, 126, 151, 158, 176, 177, 209, 225, 245, 250, 259, 268, 276, 283, 293, 337, 341, 344, 348, 410, 428, 430, 432, 464, 465, 466, 467, 474, 475, 479, 480, 483], "pyunstable_long_iscompact": [39, 474, 483], "compact": [39, 42, 85, 106, 109, 151, 155, 190, 197, 198, 262, 299, 307, 347, 381, 430, 465, 474, 476, 477, 479, 483], "critic": [39, 75, 87, 101, 102, 126, 191, 250, 267, 268, 269, 292, 406, 432, 451, 452, 465, 467, 468, 471, 473, 475, 478, 483], "fast": [39, 58, 64, 68, 94, 100, 141, 170, 184, 186, 191, 225, 234, 250, 254, 255, 258, 261, 269, 273, 299, 308, 332, 344, 369, 384, 386, 413, 428, 442, 462, 466, 467, 469, 475, 476, 477, 478, 479, 480, 482, 483], "pyunstable_long_compactvalu": [39, 474, 483], "speedup": [39, 299, 426, 431, 463, 467, 468, 469, 471, 474, 475, 476, 477, 481, 483], "neglig": [39, 344, 426], "pyobject_delitem": [40, 49, 57, 63, 465], "pymapping_check": [40, 57, 63], "pymapping_s": [40, 57, 63, 483], "pymapping_length": [40, 57], "pymapping_getitemstr": [40, 57], "pymapping_setitemstr": [40, 57, 483], "pymapping_delitem": 40, "pymapping_delitemstr": 40, "pymapping_haskey": [40, 57], "pymapping_haskeystr": [40, 57], "pymapping_valu": [40, 57, 480, 483], "pymapping_item": [40, 57, 480, 483], "unmarshal": [41, 419, 465, 467, 479, 483], "py_marshal_vers": [41, 473, 483], "pymarshal_writelongtofil": [41, 473, 483], "pymarshal_writeobjecttofil": [41, 473, 483], "pymarshal_writeobjecttostr": [41, 473, 483], "pymarshal_readlongfromfil": 41, "pymarshal_readshortfromfil": 41, "pymarshal_readobjectfromfil": 41, "pymarshal_readlastobjectfromfil": 41, "aggress": [41, 344, 467, 483], "pymarshal_readobjectfromstr": [41, 473, 483], "deal": [42, 63, 64, 68, 72, 106, 109, 120, 125, 157, 158, 194, 196, 197, 205, 225, 258, 266, 282, 283, 292, 299, 318, 325, 337, 366, 384, 394, 413, 426, 431, 462, 464, 465, 466, 467, 470, 476, 478, 483], "aspect": [42, 72, 73, 94, 102, 106, 110, 181, 183, 193, 250, 268, 293, 335, 394, 428, 475, 479], "segment": [42, 48, 176, 184, 193, 214, 215, 220, 253, 283, 293, 296, 333, 366, 394, 399, 467, 469, 475, 476, 483], "prealloc": 42, "room": [42, 55, 343, 434, 446, 470, 483], "polici": [42, 68, 80, 102, 123, 126, 131, 135, 194, 196, 200, 201, 203, 205, 206, 207, 213, 225, 243, 285, 293, 335, 338, 341, 456, 461, 463, 466, 469, 474, 477, 478, 479, 483], "adapt": [42, 68, 85, 102, 141, 176, 186, 191, 225, 230, 267, 297, 298, 332, 337, 341, 369, 384, 462, 463, 467, 469, 471, 473, 474, 479, 483], "peculiar": [42, 126, 255, 293], "speed": [42, 64, 73, 93, 101, 106, 146, 161, 177, 184, 186, 190, 216, 226, 234, 250, 258, 261, 295, 297, 299, 330, 341, 343, 352, 361, 384, 428, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "tradeoff": [42, 483], "deleg": [42, 63, 68, 101, 102, 225, 226, 234, 267, 268, 269, 275, 299, 324, 385, 388, 428, 430, 432, 470, 473, 475, 479, 481, 482, 483, 484], "corrupt": [42, 59, 93, 109, 146, 177, 184, 212, 215, 243, 270, 271, 283, 299, 330, 340, 344, 358, 461, 480, 481, 483], "writer": [42, 68, 73, 76, 109, 126, 136, 149, 158, 170, 175, 193, 246, 251, 258, 293, 319, 411, 413, 416, 455, 465, 474, 478, 480, 483], "calloc": [42, 478, 483], "bufsiz": [42, 73, 120, 126, 295, 337, 348, 358, 411, 412, 424, 466, 481, 483], "ed": [42, 63, 73, 92, 167, 177, 193, 270, 293, 319, 332, 340, 472, 475, 482, 483], "exclus": [42, 47, 63, 68, 106, 118, 149, 177, 186, 215, 258, 262, 269, 270, 271, 291, 292, 293, 319, 340, 343, 344, 358, 380, 382, 403, 422, 426, 428, 430, 468, 476, 477, 478, 481, 482, 483], "accur": [42, 176, 207, 245, 275, 292, 308, 352, 358, 366, 369, 382, 422, 466, 468, 469, 474, 475, 477, 479, 480, 481, 483], "footprint": [42, 92, 456, 476, 479, 481, 483], "whole": [42, 79, 99, 106, 120, 141, 158, 167, 169, 177, 183, 207, 208, 235, 242, 259, 261, 267, 278, 292, 293, 305, 307, 319, 328, 337, 340, 344, 364, 375, 388, 410, 413, 426, 427, 435, 455, 462, 469, 477, 481, 483], "procedur": [42, 72, 80, 95, 103, 121, 151, 158, 176, 308, 335, 346, 362, 384, 418, 419, 436, 441, 463, 464, 467, 475], "pythonmalloc": [42, 68, 188, 455, 456, 483], "shutdown": [42, 87, 100, 102, 107, 126, 135, 136, 140, 166, 212, 213, 227, 248, 267, 269, 283, 284, 333, 337, 338, 341, 365, 402, 405, 428, 430, 455, 468, 475, 477, 478, 480, 482, 483], "pymemallocatordomain": 42, "hint": [42, 68, 79, 87, 88, 96, 119, 158, 167, 202, 230, 241, 243, 246, 247, 258, 262, 303, 344, 384, 385, 386, 427, 428, 436, 473, 479, 480, 483, 484], "practic": [42, 63, 68, 74, 76, 84, 92, 95, 99, 101, 102, 103, 110, 120, 174, 177, 178, 186, 193, 194, 199, 223, 225, 235, 242, 248, 251, 252, 255, 283, 288, 305, 335, 340, 341, 344, 358, 366, 369, 386, 394, 411, 425, 426, 428, 430, 463, 464, 465, 470, 475, 477, 480, 483], "pyobject_malloc": [42, 57, 96, 465, 467, 477, 479, 483], "pymem_malloc": [42, 57, 64, 66, 465, 467, 477, 479, 483], "nelem": 42, "elsiz": 42, "model": [42, 60, 68, 84, 85, 93, 126, 169, 183, 186, 194, 196, 205, 225, 254, 273, 283, 293, 318, 335, 341, 343, 365, 368, 384, 395, 411, 412, 415, 427, 428, 433, 461, 462, 464, 465, 466, 467, 473, 474, 475, 477, 478, 479, 480, 481, 483, 484], "ansi": [42, 68, 87, 120, 145, 176, 266, 293, 352, 366, 461, 462, 474, 476, 479, 481, 483], "pymem_calloc": [42, 57, 478, 483], "pymem_realloc": [42, 57, 66, 465, 467, 477], "pymem_new": [42, 64, 463], "pymem_res": 42, "lose": [42, 94, 106, 167, 183, 186, 213, 243, 269, 271, 318, 319, 340, 348, 462, 469, 475, 483], "pymem_del": [42, 463], "intercept": [42, 102, 139, 343, 352, 479, 483], "pyobject_calloc": [42, 57, 478, 483], "pyobject_realloc": [42, 57, 465, 467, 483], "pyobject_fre": [42, 57, 63, 465, 467, 479, 483], "pymalloc_debug": [42, 455, 483], "malloc_debug": [42, 455], "legend": 42, "pymemallocatorex": [42, 478], "new_siz": [42, 473], "pymemalloc": [42, 478], "pymem_domain_raw": [42, 455], "pymem_domain_mem": [42, 455, 479, 483], "pymem_domain_obj": [42, 455, 479], "reinstal": [42, 461], "contract": [42, 247, 344, 426], "impos": [42, 195, 262, 293, 299, 321, 322, 344, 386, 434, 455], "substitut": [42, 68, 87, 101, 102, 106, 112, 132, 143, 158, 164, 167, 178, 186, 193, 250, 261, 272, 292, 293, 308, 319, 320, 321, 340, 344, 345, 359, 378, 386, 403, 426, 427, 428, 430, 436, 447, 452, 461, 465, 467, 468, 469, 474, 475, 477, 478, 483, 484], "setup": [42, 68, 73, 76, 79, 92, 102, 110, 169, 193, 247, 296, 338, 341, 355, 362, 367, 384, 388, 389, 390, 453, 455, 456, 461, 462, 463, 464, 465, 467, 468, 469, 473, 474, 475, 476, 479, 481, 483], "recogniz": [42, 161, 186, 483], "pattern": [42, 63, 68, 76, 85, 93, 109, 142, 144, 163, 169, 178, 189, 190, 191, 219, 222, 226, 231, 247, 248, 254, 261, 264, 267, 275, 281, 283, 288, 292, 293, 296, 297, 308, 319, 332, 344, 345, 362, 369, 371, 382, 386, 388, 390, 402, 429, 430, 431, 435, 441, 456, 461, 463, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483], "0xcd": [42, 483], "pymem_cleanbyt": 42, "0xdd": [42, 483], "pymem_deadbyt": 42, "surround": [42, 79, 95, 106, 167, 190, 225, 244, 247, 266, 345, 348, 374, 399, 427, 429, 430, 431, 435, 450, 456, 462, 467, 468, 469, 470, 471, 474, 479, 483], "0xfd": [42, 483], "pymem_forbiddenbyt": 42, "underflow": [42, 186, 188, 456, 479, 483], "treatment": [42, 49, 102, 194, 283, 394, 462, 470], "ask": [42, 87, 92, 102, 161, 194, 233, 235, 243, 247, 258, 269, 292, 297, 332, 339, 341, 344, 386, 395, 412, 413, 414, 422, 430, 432, 436, 461, 466, 467, 468, 469, 470, 483], "easier": [42, 76, 84, 87, 92, 95, 96, 100, 103, 106, 108, 115, 161, 169, 193, 206, 250, 252, 259, 269, 293, 308, 313, 319, 344, 353, 358, 362, 374, 388, 394, 434, 462, 463, 464, 465, 466, 467, 468, 469, 470, 475, 476, 477, 478, 479, 483], "excess": [42, 85, 112, 133, 146, 176, 186, 242, 267, 321, 366, 427, 430, 483], "overwritten": [42, 102, 243, 269, 271, 308, 332, 352, 386, 427, 469, 476, 483], "pymem_debug_serialno": [42, 483], "bad": [42, 68, 72, 73, 101, 110, 120, 187, 190, 193, 201, 212, 213, 235, 247, 266, 268, 271, 283, 292, 308, 333, 384, 386, 397, 422, 436, 441, 443, 464, 468, 470, 472, 477, 479, 483], "excel": [42, 109, 175, 193, 200, 384, 465, 466, 470], "breakpoint": [42, 68, 79, 85, 142, 144, 147, 185, 225, 247, 297, 352, 353, 455, 467, 475, 483], "captur": [42, 68, 92, 95, 102, 122, 169, 176, 183, 193, 265, 267, 293, 319, 337, 341, 345, 348, 352, 358, 362, 381, 386, 400, 429, 466, 473, 476, 477, 478, 480, 483], "instant": [42, 68, 92, 185, 293, 384], "bumpserialno": 42, "obmalloc": [42, 96, 463, 465, 467, 477, 482, 483], "intact": [42, 102, 167, 183, 203, 205, 208, 218, 269, 466], "ve": [42, 76, 94, 95, 99, 102, 106, 109, 114, 139, 152, 251, 271, 292, 340, 369, 462, 463, 464, 465, 466, 468, 469, 471, 477, 483], "provok": 42, "0xcb": [42, 479, 483], "0xdb": [42, 479, 483], "0xfb": [42, 479, 483], "crt": [42, 68, 282, 341, 469, 477, 483], "512": [42, 131, 173, 235, 293, 328, 358, 424, 446, 467, 474, 475, 479, 481, 483], "fix": [42, 55, 61, 63, 68, 77, 79, 84, 85, 92, 93, 95, 105, 106, 112, 120, 126, 151, 159, 161, 176, 177, 182, 183, 188, 193, 201, 225, 243, 247, 254, 261, 283, 288, 290, 293, 299, 314, 319, 340, 343, 344, 345, 347, 348, 365, 372, 408, 413, 427, 455, 462, 464, 466, 467, 468, 470, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "kib": [42, 115, 136, 270, 293, 332, 365, 382, 481, 483], "mib": [42, 235, 270, 283, 332, 473, 481, 483], "virtualalloc": [42, 477], "virtualfre": 42, "mmap": [42, 68, 142, 213, 254, 260, 462, 468, 473, 475, 478, 479, 483], "munmap": 42, "pyobjectarenaalloc": 42, "pytracemalloc_track": [42, 480], "uintptr_t": 42, "pytracemalloc_untrack": [42, 480], "untrack": [42, 76, 471, 483], "rewritten": [42, 135, 193, 194, 235, 283, 436, 462, 463, 464, 465, 468, 469, 471, 475, 476, 477, 479, 480, 481, 483], "inde": [42, 76, 137, 195, 341], "reduc": [42, 56, 75, 85, 95, 103, 108, 112, 126, 133, 177, 183, 186, 226, 235, 247, 261, 293, 299, 308, 328, 341, 344, 362, 365, 402, 413, 421, 435, 456, 461, 462, 464, 465, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "label": [42, 68, 78, 94, 95, 158, 189, 191, 247, 271, 281, 292, 318, 331, 341, 345, 368, 369, 375, 386, 461, 464, 465, 475, 477, 480, 483], "buf1": 42, "buf2": 42, "buf3": 42, "aim": [42, 72, 75, 99, 109, 270, 281, 352, 386, 413, 461, 464, 466, 467, 477, 481], "explain": [42, 45, 63, 73, 75, 76, 77, 85, 92, 95, 96, 99, 101, 102, 103, 106, 109, 110, 114, 151, 176, 193, 225, 235, 243, 245, 247, 255, 261, 292, 297, 344, 369, 376, 388, 430, 455, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "pymemoryview_fromobject": [43, 57], "discret": [43, 261, 338, 343, 481], "pybuf_read": 43, "pymemoryview_frommemori": [43, 57, 476], "pymemoryview_getcontigu": [43, 57], "buffertyp": 43, "ortran": 43, "pymemoryview_check": 43, "pymemoryview_get_buff": 43, "mview": 43, "pymemoryview_get_bas": 43, "pymethod_new": 44, "pyinstancemethod_typ": 44, "pyinstancemethod_check": 44, "pyinstancemethod_new": 44, "pyinstancemethod_funct": 44, "im": [44, 85, 92, 344], "pyinstancemethod_get_funct": 44, "pymethod_typ": [44, 93], "methodtyp": [44, 93, 385, 483], "pymethod_check": 44, "pymethod_funct": 44, "pymethod_get_funct": 44, "pymethod_self": 44, "pymethod_get_self": 44, "pymodule_typ": [45, 57], "moduletyp": [45, 250, 252, 385, 428, 432, 465, 474, 478, 483], "pymodule_check": 45, "pymodule_checkexact": 45, "pymodule_newobject": [45, 57], "__doc__": [45, 63, 75, 80, 84, 87, 93, 94, 96, 157, 160, 190, 193, 211, 225, 226, 255, 289, 313, 320, 323, 385, 427, 428, 435, 440, 441, 450, 463, 464, 465, 470, 472, 475, 477, 478, 482, 483], "__package__": [45, 96, 225, 250, 324, 385, 432, 450, 468, 472, 474, 476, 477, 479, 483], "pymodule_new": [45, 57], "pymodule_getdict": [45, 57], "__dict__": [45, 49, 61, 63, 85, 88, 93, 100, 102, 116, 144, 148, 193, 225, 226, 250, 255, 267, 269, 297, 299, 308, 344, 385, 419, 427, 428, 432, 440, 463, 464, 469, 470, 472, 474, 478, 479, 483], "pymodule_": 45, "pymodule_getnameobject": [45, 57], "pymodule_getnam": [45, 57], "m_size": [45, 76, 100, 482, 483], "pymodule_getdef": [45, 57], "pymodule_getfilenameobject": [45, 57, 474], "pymodule_getfilenam": [45, 57, 474], "unencod": [45, 109, 158, 465, 470, 475, 483], "pymoduledef_bas": [45, 57], "m_base": [45, 76], "m_doc": [45, 76], "m_free": [45, 100, 482, 483], "3121": [45, 470, 483], "m_method": [45, 483], "pymoduledef_slot": 45, "m_slot": 45, "m_reload": 45, "m_travers": [45, 100, 482, 483], "py_mod_exec": [45, 482, 483], "m_clear": [45, 100, 482, 483], "collector": [45, 50, 63, 68, 73, 76, 85, 87, 95, 100, 214, 254, 283, 292, 315, 352, 362, 402, 411, 428, 456, 462, 464, 467, 468, 469, 471, 472, 474, 476, 477, 480, 482, 483], "pymodule_create2": [45, 57], "module_api_vers": 45, "python_api_vers": [45, 465], "pymodule_addobjectref": [45, 57, 76, 472, 483], "split": [45, 64, 68, 78, 84, 85, 102, 108, 120, 141, 155, 158, 167, 186, 190, 191, 196, 200, 202, 208, 213, 228, 230, 248, 261, 281, 291, 292, 293, 294, 297, 303, 307, 318, 319, 321, 331, 335, 340, 341, 344, 345, 348, 364, 378, 386, 388, 389, 394, 399, 407, 415, 435, 440, 464, 465, 466, 467, 468, 469, 471, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483], "__new__": [45, 61, 63, 68, 76, 80, 85, 93, 121, 142, 203, 211, 213, 225, 274, 278, 296, 299, 337, 382, 385, 389, 428, 474, 477, 479, 481, 483], "__init__": [45, 61, 63, 68, 76, 78, 79, 80, 85, 87, 93, 101, 102, 107, 108, 114, 120, 128, 133, 139, 148, 160, 161, 167, 169, 172, 175, 176, 183, 184, 190, 194, 211, 213, 214, 225, 226, 238, 241, 245, 250, 251, 252, 253, 261, 262, 267, 268, 269, 281, 283, 296, 299, 302, 308, 315, 320, 333, 340, 345, 358, 362, 365, 369, 382, 385, 386, 388, 389, 390, 399, 402, 407, 410, 414, 422, 428, 432, 440, 441, 450, 452, 462, 463, 464, 465, 467, 468, 472, 473, 474, 476, 479, 481, 483], "pyinit_modulenam": [45, 71], "pymoduledef_init": [45, 57], "py_mod_cr": 45, "create_modul": [45, 250, 423, 432, 472, 478, 479, 483], "451": [45, 68, 87, 160, 241, 250, 302, 324, 352, 432, 472, 474, 478, 483], "loop": [45, 64, 66, 68, 73, 92, 95, 96, 101, 102, 106, 123, 124, 125, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 157, 159, 176, 177, 184, 186, 189, 191, 196, 205, 218, 225, 232, 257, 261, 269, 283, 297, 308, 309, 319, 332, 333, 337, 338, 341, 344, 348, 352, 362, 365, 367, 369, 381, 384, 388, 412, 413, 420, 427, 428, 429, 430, 431, 435, 436, 440, 441, 456, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "hierarchi": [45, 68, 85, 98, 101, 102, 103, 186, 213, 225, 250, 255, 267, 268, 290, 299, 302, 329, 333, 340, 369, 375, 376, 388, 410, 413, 428, 432, 436, 465, 467, 470, 483, 484], "symlink": [45, 142, 163, 257, 292, 293, 296, 311, 332, 358, 399, 450, 459, 460, 466, 468, 472, 475, 476, 477, 481, 483], "exec_modul": [45, 100, 250, 423, 432, 472, 474, 477, 478, 479, 483], "py_mod_multiple_interpreters_not_support": 45, "py_mod_multiple_interpreters_support": 45, "py_mod_per_interpreter_gil_support": [45, 483], "hood": [45, 101, 102, 106, 362, 467, 468, 475], "pymodule_execdef": [45, 57, 478], "pymodule_fromdefandspec2": [45, 57, 478], "pymodule_setdocstr": [45, 57], "pymodule_addfunct": [45, 57], "lack": [45, 46, 85, 99, 213, 216, 247, 250, 283, 293, 294, 335, 341, 347, 422, 429, 430, 461, 462, 463, 468, 470, 477, 478, 480, 483], "add_spam": 45, "pymodule_addobject": [45, 57, 73, 76, 462, 472, 483], "easi": [45, 63, 68, 73, 84, 85, 92, 99, 100, 102, 106, 120, 137, 151, 167, 169, 183, 186, 191, 193, 194, 204, 208, 226, 228, 268, 292, 293, 299, 318, 331, 337, 341, 343, 344, 358, 364, 388, 411, 428, 430, 463, 464, 466, 467, 468, 469, 475, 476, 477, 478, 479, 480, 483, 484], "stole": 45, "pymodule_addintconst": [45, 57, 462], "pymodule_addstringconst": [45, 57, 462], "pymodule_addintmacro": [45, 468], "af_inet": [45, 102, 107, 126, 283, 337, 338, 341, 362, 468, 483], "pymodule_addstringmacro": [45, 468], "pymodule_addtyp": [45, 57, 482, 483], "tp_name": [45, 61, 63, 75, 76, 483], "pystate_findmodul": [45, 57], "pystate_addmodul": [45, 57, 483], "beforehand": [45, 432], "unnecessari": [45, 73, 85, 101, 120, 133, 271, 283, 284, 288, 344, 352, 382, 386, 394, 410, 436, 463, 464, 466, 469, 474, 478, 481, 483], "harmless": [45, 73, 193, 376, 426, 483], "pystate_removemodul": [45, 57], "suffici": [46, 63, 73, 99, 100, 101, 115, 158, 183, 184, 186, 193, 275, 293, 312, 314, 341, 344, 365, 388, 390, 403, 415, 432, 436, 461, 475, 476, 479, 480, 483], "pynone_check": 46, "pynumber_check": [47, 57, 481], "o1": [47, 49, 54, 78, 181], "o2": [47, 49, 54, 78, 181, 306, 402], "pynumber_subtract": [47, 55, 57], "subtract": [47, 141, 160, 183, 186, 259, 270, 275, 308, 384, 419, 430, 462, 465, 468, 469, 475, 480, 483], "pynumber_multipli": [47, 57], "multipli": [47, 72, 76, 141, 176, 183, 186, 199, 261, 269, 308, 318, 344, 345, 352, 419, 430, 462, 465, 466, 468, 475, 483], "pynumber_matrixmultipli": [47, 57, 478], "matrix": [47, 68, 85, 225, 261, 384, 402, 426, 430, 442, 463, 481, 483], "pynumber_floordivid": [47, 57], "floor": [47, 87, 166, 183, 186, 193, 221, 225, 275, 289, 344, 384, 428, 430, 449, 464, 468, 481, 482, 483], "divid": [47, 84, 92, 106, 141, 167, 183, 186, 191, 193, 194, 225, 247, 275, 284, 308, 353, 375, 419, 435, 443, 468, 475, 476, 477, 481, 483], "pynumber_truedivid": [47, 57], "approxim": [47, 64, 68, 85, 158, 177, 181, 186, 190, 193, 202, 213, 221, 247, 275, 280, 283, 343, 347, 348, 362, 381, 384, 388, 428, 430, 432, 446, 461, 468, 469, 480, 483], "mathemat": [47, 95, 106, 183, 186, 261, 275, 290, 344, 428, 430, 466, 468, 478, 483], "pynumber_remaind": [47, 57], "remaind": [47, 75, 106, 155, 183, 186, 208, 268, 275, 292, 319, 344, 366, 369, 430, 449, 468, 480, 483], "pynumber_divmod": [47, 57], "divmod": [47, 85, 183, 186, 225, 289, 344, 428, 430, 444, 450, 481, 483], "pynumber_pow": [47, 57], "o3": [47, 72], "pow": [47, 85, 89, 122, 166, 169, 225, 261, 275, 283, 289, 291, 344, 420, 428, 430, 431, 450, 464, 473, 475, 481, 483], "pynumber_neg": [47, 57], "pynumber_posit": [47, 57], "pynumber_absolut": [47, 57], "abs": [47, 63, 95, 154, 183, 186, 225, 275, 289, 291, 344, 381, 382, 384, 386, 428, 430, 440, 442, 450, 473, 480, 483], "pynumber_invert": [47, 57], "bitwis": [47, 58, 68, 92, 94, 95, 106, 177, 178, 193, 215, 282, 293, 319, 329, 337, 340, 353, 406, 428, 431, 433, 465, 468, 469, 474, 479, 483], "pynumber_lshift": [47, 57], "shift": [47, 68, 177, 178, 183, 186, 191, 247, 283, 293, 344, 376, 428, 433, 462, 464, 466, 468, 469, 473, 476, 483], "pynumber_rshift": [47, 57], "pynumber_and": [47, 55, 57], "pynumber_xor": [47, 55, 57], "pynumber_or": [47, 55, 57], "pynumber_inplaceadd": [47, 57], "pynumber_inplacesubtract": [47, 55, 57], "pynumber_inplacemultipli": [47, 57], "pynumber_inplacematrixmultipli": [47, 57, 478], "pynumber_inplacefloordivid": [47, 57], "pynumber_inplacetruedivid": [47, 57], "pynumber_inplaceremaind": [47, 57], "pynumber_inplacepow": [47, 57], "pynumber_inplacelshift": [47, 57], "pynumber_inplacershift": [47, 57], "pynumber_inplaceand": [47, 55, 57], "pynumber_inplacexor": [47, 55, 57], "pynumber_inplaceor": [47, 55, 57], "pynumber_long": [47, 57, 471, 481], "pynumber_float": [47, 57, 481], "pynumber_index": [47, 57, 79, 467, 472, 483], "pynumber_tobas": [47, 57, 483], "marker": [47, 98, 109, 117, 149, 158, 170, 191, 193, 225, 255, 258, 270, 297, 299, 340, 341, 377, 386, 400, 456, 476, 479, 480, 483], "pynumber_asssize_t": [47, 57], "clip": [47, 56, 177, 436], "py_ssize_t_min": [47, 56], "pyindex_check": [47, 57, 482, 483], "nb_index": [47, 63, 467], "tp_as_numb": [47, 63, 75, 482, 483], "pyobject_ascharbuff": [48, 57, 483], "buffer_len": 48, "pyobject_asreadbuff": [48, 57, 483], "pyobject_checkreadbuff": [48, 57, 483], "pyobject_aswritebuff": [48, 57, 483], "py_notimpl": [49, 63, 64, 75, 463], "notimpl": [49, 68, 94, 116, 168, 213, 226, 250, 289, 299, 385, 389, 430, 450, 469, 470, 472, 477, 482, 483], "py_return_notimpl": 49, "pyobject_print": [49, 55, 73, 483], "fp": [49, 59, 66, 78, 95, 120, 151, 186, 188, 196, 200, 201, 204, 207, 223, 230, 242, 262, 276, 293, 304, 355, 360, 379, 382, 393, 395, 426, 466, 483], "pyobject_hasattr": [49, 57], "attr_nam": [49, 362, 464], "hasattr": [49, 87, 93, 102, 110, 225, 226, 255, 283, 314, 320, 344, 352, 358, 367, 386, 388, 389, 413, 427, 428, 432, 450, 465, 468, 474, 475, 477, 480, 483], "__getattr__": [49, 58, 63, 75, 85, 93, 142, 176, 216, 225, 255, 299, 323, 344, 385, 389, 428, 430, 447, 464, 468, 474, 475, 476, 477, 480, 483], "__getattribute__": [49, 63, 80, 87, 93, 225, 255, 299, 428, 430, 464, 468, 475, 480, 483], "pyobject_getattr": [49, 57, 61, 63], "pyobject_hasattrstr": [49, 57, 483], "pyobject_getattrstr": [49, 57, 72, 73, 79, 473], "pyobject_genericgetattr": [49, 57, 63, 93], "getter": [49, 50, 57, 68, 76, 93, 116, 167, 225, 226, 344, 365, 395, 468, 474, 477, 478, 483], "meant": [49, 61, 101, 102, 133, 139, 141, 158, 213, 230, 250, 308, 337, 362, 369, 386, 395, 422, 431, 461, 467, 468, 469, 472, 475, 476, 477, 478, 480, 481, 483], "tp_getattro": [49, 63, 75, 483], "mro": [49, 61, 68, 85, 87, 103, 116, 181, 197, 344, 385, 480, 483], "outlin": [49, 101, 102, 139, 167, 221, 244, 384, 428, 483], "pyobject_setattr": [49, 57, 63, 483], "favour": [49, 54, 250, 255, 467, 476, 479, 480, 482, 483], "pyobject_delattr": 49, "plan": [49, 133, 299, 384, 386, 403, 462, 466, 467, 468, 469, 470, 475, 477, 483], "pyobject_setattrstr": [49, 57, 79, 483], "pyobject_delattrstr": 49, "pyobject_genericsetattr": [49, 57, 63], "setter": [49, 50, 57, 68, 76, 93, 116, 225, 226, 344, 365, 389, 395, 468, 477, 483], "tp_setattro": [49, 63, 75], "del": [49, 54, 58, 68, 73, 76, 85, 88, 93, 100, 103, 122, 144, 160, 178, 191, 196, 205, 225, 227, 230, 236, 247, 255, 271, 283, 284, 291, 292, 293, 296, 299, 330, 344, 389, 402, 427, 428, 429, 430, 431, 432, 433, 435, 440, 441, 445, 452, 462, 463, 465, 467, 468, 469, 475, 483], "pyobject_genericgetdict": [49, 57, 63, 483], "pyobject_genericsetdict": [49, 57], "_pyobject_getdictptr": 49, "pyobject_richcompar": [49, 57, 63, 75], "opid": 49, "py_lt": [49, 63, 64, 75], "py_l": [49, 63, 64, 75], "py_eq": [49, 63, 64, 75], "py_n": [49, 63, 64, 75], "py_gt": [49, 63, 64, 75], "py_g": [49, 63, 64, 75], "pyobject_richcomparebool": [49, 55, 57, 75, 483], "pyobject_format": [49, 57, 191], "format_spec": [49, 122, 221, 225, 345, 428, 435, 468, 483], "pyobject_repr": [49, 55, 57, 63, 64, 477, 478, 483], "pyobject_ascii": [49, 57], "pyobject_str": [49, 57, 63, 64, 477], "pyobject_byt": [49, 57], "pyobject_issubclass": [49, 57, 61, 478, 483], "cls": [49, 58, 61, 63, 85, 93, 94, 103, 116, 122, 161, 181, 191, 203, 211, 213, 225, 226, 255, 262, 296, 299, 340, 362, 382, 385, 386, 388, 427, 428, 431, 436, 443, 464, 466, 473, 475, 479, 480, 483], "against": [49, 72, 73, 75, 76, 85, 94, 102, 106, 112, 120, 126, 136, 141, 173, 176, 181, 190, 191, 193, 235, 251, 255, 278, 292, 293, 305, 307, 308, 311, 314, 319, 324, 331, 333, 342, 344, 358, 362, 365, 369, 375, 384, 385, 386, 388, 390, 400, 411, 412, 413, 414, 419, 420, 421, 426, 427, 428, 432, 455, 456, 462, 463, 464, 465, 466, 467, 474, 475, 477, 478, 479, 480, 481, 483], "__subclasscheck__": [49, 61, 116, 389, 428, 483], "3119": [49, 68, 116, 161, 428, 470, 484], "__mro__": [49, 63, 85, 93, 116, 197, 225, 344, 386, 428], "__bases__": [49, 63, 76, 103, 203, 225, 299, 344, 385, 428, 465, 483], "pyobject_isinst": [49, 57, 63, 478, 483], "inst": [49, 93, 436, 443], "__instancecheck__": [49, 389, 428, 483], "__class__": [49, 80, 85, 87, 93, 94, 100, 183, 211, 225, 250, 299, 344, 389, 400, 428, 440, 464, 465, 468, 479, 483], "pyobject_hash": [49, 55, 57, 63, 473, 474], "pyobject_hashnotimpl": [49, 57, 63, 468], "pyobject_istru": [49, 55, 57, 483], "pyobject_not": [49, 57, 483], "pyobject_typ": [49, 57], "realli": [49, 63, 72, 75, 77, 85, 92, 95, 102, 103, 106, 109, 183, 191, 200, 203, 205, 271, 283, 288, 293, 328, 344, 352, 365, 366, 384, 387, 413, 428, 435, 436, 441, 462, 463, 464, 465, 466, 467, 470, 474, 479, 483], "py_typ": [49, 58, 61, 63, 75, 76, 100, 468, 473, 481, 482, 483], "pyobject_typecheck": [49, 75, 483], "pyobject_s": [49, 57, 63, 483], "pyobject_lengthhint": [49, 477], "defaultvalu": [49, 268], "estim": [49, 68, 186, 261, 288, 290, 318, 362, 428, 483], "__length_hint__": [49, 291, 428, 477, 483], "length_hint": [49, 291, 428, 477], "pyobject_dir": [49, 57], "dir": [49, 68, 78, 80, 85, 94, 112, 114, 163, 184, 189, 210, 211, 223, 225, 266, 292, 293, 294, 296, 323, 344, 348, 358, 360, 369, 380, 389, 399, 422, 428, 445, 451, 456, 465, 468, 472, 473, 474, 475, 476, 483], "pyobject_getait": [49, 57, 483], "aiter": [49, 225, 428, 472, 479, 483], "pyobject_gettypedata": [49, 57, 61, 474, 483], "pytype_spec": [49, 57, 61, 63, 100, 474, 483], "basics": [49, 58, 61, 474, 483], "pytype_gettypedatas": [49, 57, 474], "memset": [49, 176, 483], "pyobject_getitemdata": [49, 474], "py_tpflags_items_at_end": [49, 61, 63, 474, 483], "tp": [50, 68, 337, 362, 384, 386, 483], "visibl": [51, 60, 68, 73, 85, 92, 95, 102, 126, 128, 139, 158, 167, 177, 179, 190, 196, 205, 222, 247, 255, 261, 271, 337, 353, 376, 395, 400, 429, 463, 466, 467, 474, 475, 476, 480, 481, 483], "tmp": [51, 76, 96, 102, 109, 169, 223, 245, 271, 332, 360, 432, 456, 462, 465, 466, 467, 468, 469, 475, 481], "fli": [51, 68, 75, 186, 225, 246, 427, 439], "pyunstable_perfmapstate_init": [51, 483], "pid": [51, 98, 126, 132, 137, 142, 167, 278, 283, 293, 299, 309, 322, 337, 348, 362, 467, 469, 482, 483], "pyunstable_writeperfmapentri": [51, 483], "code_addr": 51, "code_s": 51, "entry_nam": 51, "7f3529fcf759": 51, "pyunstable_perfmapstate_fini": [51, 483], "shut": [51, 72, 102, 126, 245, 328, 333, 337, 338, 352, 384, 407, 452, 455, 465, 469, 478, 482, 483], "down": [51, 68, 72, 76, 85, 95, 101, 102, 126, 139, 151, 160, 177, 179, 191, 193, 212, 245, 247, 267, 275, 283, 293, 297, 308, 309, 319, 328, 333, 337, 338, 341, 352, 353, 371, 376, 384, 388, 394, 407, 452, 455, 462, 464, 465, 469, 474, 478, 479, 480, 481, 482, 483], "shouldn": [51, 64, 76, 100, 106, 133, 272, 302, 352, 388, 395, 463, 464, 466, 467, 468, 471, 479, 483], "scenario": [51, 101, 102, 186, 188, 267, 268, 320, 388, 395, 432, 456, 477, 479, 483], "fork": [51, 59, 68, 73, 84, 102, 140, 142, 166, 213, 227, 257, 278, 283, 293, 309, 328, 332, 338, 341, 348, 395, 465, 469, 474, 477, 480, 481, 483], "py_refcnt": [52, 58, 76, 468, 472, 483], "py_set_refcnt": [52, 472, 483], "refcnt": [52, 472], "py_newref": [52, 57, 76, 87, 472, 483], "py_xincref": [52, 73, 473, 481, 483], "py_xnewref": [52, 57, 472, 483], "attr": [52, 63, 68, 79, 92, 122, 177, 191, 240, 244, 251, 255, 273, 281, 291, 292, 299, 314, 360, 362, 369, 388, 389, 413, 415, 416, 417, 427, 428, 431, 436, 462, 463, 466, 473, 476, 483], "py_clear": [52, 63, 73, 75, 76, 466, 474, 483], "py_setref": [52, 76, 474, 483], "dst": [52, 142, 176, 183, 293, 332, 340, 366, 476, 483], "py_xsetref": [52, 76, 474, 483], "pyeval_getbuiltin": [53, 57], "pyeval_getloc": [53, 57], "pyeval_getglob": [53, 57], "pyeval_getfuncnam": [53, 57], "pyeval_getfuncdesc": [53, 57], "pysequence_check": [54, 57, 63], "pysequence_s": [54, 57, 63, 483], "pysequence_concat": [54, 57, 63], "pysequence_repeat": [54, 57, 63], "pysequence_inplaceconcat": [54, 57, 63], "pysequence_inplacerepeat": [54, 57, 63], "th": [54, 150, 191, 196, 225, 266, 283, 343, 344, 366, 384, 410, 428, 462, 465, 467], "pysequence_getslic": [54, 57, 63], "i1": [54, 190, 278, 419, 466], "i2": [54, 190, 278, 419, 466], "assign": [54, 61, 63, 68, 73, 75, 76, 79, 85, 87, 93, 94, 95, 109, 112, 115, 120, 122, 126, 139, 158, 167, 170, 176, 177, 181, 186, 191, 196, 202, 203, 205, 208, 212, 225, 226, 243, 250, 267, 271, 278, 283, 292, 293, 296, 297, 299, 314, 319, 330, 331, 337, 340, 341, 344, 347, 351, 352, 362, 364, 365, 376, 381, 386, 387, 388, 389, 400, 411, 413, 422, 425, 427, 428, 429, 431, 432, 433, 435, 440, 441, 442, 449, 456, 463, 464, 465, 466, 467, 468, 469, 470, 472, 474, 476, 478, 479, 480, 482, 483, 484], "pysequence_delitem": [54, 57, 483], "pysequence_setslic": [54, 57, 63], "pysequence_delslic": [54, 57, 63], "pysequence_count": [54, 57], "occurr": [54, 64, 85, 106, 140, 160, 167, 177, 186, 196, 205, 228, 271, 292, 319, 328, 344, 358, 400, 413, 428, 429, 430, 431, 434, 435, 436, 464, 466, 467, 470, 475, 483], "pysequence_contain": [54, 57, 63], "pysequence_index": [54, 57], "pysequence_list": [54, 57], "pysequence_tupl": [54, 57, 483], "pysequence_fast": [54, 57], "pysequence_fast_get_s": 54, "faster": [54, 63, 68, 84, 85, 93, 106, 126, 139, 176, 177, 186, 207, 226, 234, 235, 247, 261, 283, 293, 308, 341, 344, 384, 426, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 479, 480, 481, 482, 483], "pysequence_fast_get_item": 54, "pysequence_fast_item": 54, "reloc": [54, 468, 483], "pysequence_item": 54, "frozenset": [55, 68, 87, 122, 182, 225, 254, 274, 299, 352, 386, 388, 402, 427, 428, 430, 450, 466, 467, 468, 473, 475, 482, 483], "pysetobject": 55, "medium": [55, 94, 178, 186, 426, 466, 467, 483], "pyset_typ": [55, 57], "pyfrozenset_typ": [55, 57], "pyset_check": 55, "pyfrozenset_check": 55, "pyanyset_check": 55, "pyset_checkexact": [55, 472, 483], "pyanyset_checkexact": 55, "pyfrozenset_checkexact": 55, "pyset_new": [55, 57, 467], "pyfrozenset_new": [55, 57, 467], "pyset_s": [55, 57, 467], "anyset": 55, "pyset_get_s": 55, "pyset_contain": [55, 57, 467], "__contains__": [55, 58, 63, 80, 85, 87, 94, 98, 161, 196, 205, 211, 261, 271, 291, 344, 389, 407, 416, 428, 430, 462, 465, 466, 468, 483], "unhash": [55, 78, 181, 211, 344, 388, 428, 430, 472, 482, 483], "pyset_add": [55, 57, 467], "grow": [55, 60, 85, 102, 193, 226, 269, 320, 376, 462, 466, 468, 469, 475, 483], "pyset_discard": [55, 57, 467], "miss": [55, 106, 160, 170, 176, 181, 186, 196, 199, 205, 211, 226, 235, 247, 250, 251, 255, 261, 267, 276, 279, 292, 293, 337, 341, 343, 348, 352, 353, 362, 366, 367, 375, 380, 386, 394, 395, 425, 427, 428, 430, 431, 432, 441, 443, 462, 465, 466, 467, 468, 469, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483], "pyset_pop": [55, 57], "pyset_clear": [55, 57], "pyslice_typ": [56, 57], "pyslice_check": 56, "pyslice_new": [56, 57], "step": [56, 63, 68, 72, 73, 77, 84, 85, 93, 95, 100, 106, 110, 112, 120, 122, 141, 144, 151, 155, 158, 169, 176, 185, 186, 191, 193, 225, 230, 242, 247, 250, 261, 267, 275, 281, 283, 292, 293, 297, 318, 319, 338, 340, 343, 344, 352, 358, 376, 384, 399, 414, 421, 427, 428, 430, 436, 441, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 483], "pyslice_getindic": [56, 57], "treat": [56, 58, 59, 61, 63, 64, 66, 68, 84, 94, 95, 99, 100, 106, 120, 139, 141, 158, 167, 177, 181, 183, 186, 188, 190, 193, 194, 203, 205, 216, 221, 226, 243, 245, 259, 261, 267, 268, 271, 275, 292, 296, 319, 331, 335, 340, 344, 345, 348, 353, 358, 362, 364, 369, 376, 386, 388, 394, 395, 400, 412, 413, 427, 428, 429, 430, 435, 436, 461, 462, 464, 467, 468, 469, 470, 476, 479, 481, 482, 483], "pysliceobject": 56, "pyslice_getindicesex": [56, 57, 474, 480, 483], "slicelength": 56, "manner": [56, 73, 85, 92, 101, 102, 167, 245, 268, 270, 292, 307, 311, 313, 319, 321, 348, 386, 388, 400, 415, 427, 428, 432, 456, 465, 467, 468, 483], "pyslice_unpack": [56, 57, 474, 480, 483], "pyslice_adjustindic": [56, 57, 474, 480, 483], "0x03050400": [56, 480, 483], "0x03060000": [56, 480, 483], "0x03060100": [56, 480, 483], "extract": [56, 68, 72, 74, 75, 89, 94, 95, 99, 100, 119, 120, 177, 183, 190, 191, 193, 197, 198, 200, 214, 225, 230, 242, 243, 251, 252, 255, 261, 293, 297, 312, 313, 319, 330, 332, 335, 344, 352, 381, 394, 428, 461, 465, 466, 467, 468, 469, 472, 473, 474, 475, 477, 478, 479, 481, 482, 483], "boost": [56, 79, 226, 466, 483], "py_ellipsi": [56, 431], "387": [57, 80, 213, 343], "pyunstabl": 57, "_py_internalst": 57, "hardcod": [57, 176, 257, 267, 269, 460, 477, 483], "0x030a0000": 57, "0x03020000": 57, "stabl": [57, 58, 61, 68, 100, 225, 236, 252, 276, 292, 344, 352, 425, 465, 466, 469, 474, 477, 478, 479, 481, 482, 483, 484], "python39": 57, "abi3": [57, 476], "mymodul": [57, 79, 101, 230, 389, 390, 400, 469, 475], "prereleas": [57, 483], "pybaseobject_typ": [57, 63], "pybytearrayiter_typ": 57, "pybytesiter_typ": 57, "pybytes_decodeescap": [57, 483], "pybytes_repr": [57, 483], "pycfunctionwithkeyword": [57, 58], "pycfunction_cal": [57, 483], "pycfunction_getflag": 57, "pycfunction_getfunct": 57, "pycfunction_getself": 57, "pycfunction_new": [57, 58, 483], "pycfunction_newex": [57, 58, 483], "pycfunction_typ": 57, "pycmethod_new": [57, 58, 483], "pycapsule_typ": 57, "pyclassmethoddescr_typ": 57, "pydictitems_typ": 57, "pydictiteritem_typ": 57, "pydictiterkey_typ": 57, "pydictitervalue_typ": 57, "pydictkeys_typ": 57, "pydictproxy_typ": 57, "pydictreviteritem_typ": 57, "pydictreviterkey_typ": 57, "pydictrevitervalue_typ": 57, "pydictvalues_typ": 57, "pyellipsis_typ": 57, "pyenum_typ": 57, "pyerr_display": [57, 472, 474, 483], "pyerr_programtext": 57, "pyeval_callfunct": [57, 482, 483], "pyeval_callmethod": [57, 482, 483], "pyeval_callobjectwithkeyword": [57, 482, 483], "pyeval_evalcod": [57, 66, 104, 472, 483], "pyeval_evalcodeex": [57, 66, 483], "pyeval_evalfram": [57, 66], "pyeval_evalframeex": [57, 66, 96, 477, 483], "pyexc_baseexceptiongroup": 57, "pyexc_encodingwarn": 57, "pyexceptionclass_nam": [57, 481, 483], "pyfilter_typ": 57, "pygetsetdescr_typ": 57, "pylistiter_typ": 57, "pylistreviter_typ": 57, "pylongrangeiter_typ": 57, "pylong_getinfo": 57, "pymap_typ": 57, "pymemberdescr_typ": 57, "pymember_geton": [57, 58, 93, 474], "pymember_seton": [57, 58, 474], "pymemoryview_typ": 57, "pymethoddescr_typ": 57, "pymoduledef_typ": 57, "pyos_afterfork": [57, 59, 474, 480, 483], "pyos_afterfork_par": [57, 59, 293, 480, 483], "pyos_beforefork": [57, 59, 293, 480, 483], "pyos_fspath": [57, 59, 479, 483], "pyos_inputhook": [57, 66, 474, 483], "pyos_interruptoccur": [57, 483], "pyos_getsig": [57, 59, 462], "pyos_mystricmp": [57, 483], "pyos_mystrnicmp": [57, 483], "pyos_setsig": [57, 59, 462, 483], "pyos_sighandler_t": [57, 59], "ob_refcnt": [57, 63, 96, 472, 483], "ob_typ": [57, 63, 76, 96, 473, 483], "pyobject_clearweakref": [57, 63, 67, 75, 474], "pyobject_delitemstr": [57, 465], "pyobject_selfit": 57, "pyrangeiter_typ": 57, "pyrange_typ": [57, 467], "pyreversed_typ": 57, "pysequence_in": 57, "pysetiter_typ": 57, "pystructsequence_desc": [57, 60, 480, 483], "pystructsequence_field": [57, 60, 480, 483], "pystructsequence_getitem": [57, 60], "pystructsequence_new": [57, 60], "pystructsequence_newtyp": [57, 60, 483], "pystructsequence_setitem": [57, 60], "pystructsequence_unnamedfield": [57, 60, 482, 483], "pysuper_typ": 57, "pysys_addwarnoptionunicod": [57, 59, 473, 480, 483], "pysys_formatstderr": [57, 59], "pysys_formatstdout": [57, 59], "pysys_getxopt": [57, 59], "pysys_haswarnopt": [57, 473, 483], "pysys_setobject": [57, 59], "pysys_setpath": [57, 59, 473, 483], "pysys_writestderr": [57, 59], "pysys_writestdout": [57, 59], "pythread_getinfo": 57, "pythread_acquire_lock": [57, 483], "pythread_acquire_lock_tim": [57, 483], "pythread_allocate_lock": 57, "pythread_exit_thread": [57, 483], "pythread_free_lock": 57, "pythread_get_stacks": 57, "pythread_get_thread_id": [57, 480, 483], "pythread_get_thread_native_id": [57, 483], "pythread_init_thread": 57, "pythread_release_lock": [57, 483], "pythread_set_stacks": 57, "pythread_start_new_thread": [57, 480, 483], "pytraceback_her": [57, 483], "pytraceback_print": [57, 479, 483], "pytraceback_typ": 57, "pytupleiter_typ": 57, "pytuple_getitem": [57, 60, 73, 79], "pytuple_getslic": [57, 60], "pytuple_pack": [57, 60, 79, 466], "pytuple_s": [57, 60, 79], "pytuple_typ": [57, 60], "pytype_clearcach": [57, 61], "pytype_frommetaclass": [57, 61, 63, 474, 483], "pytype_frommoduleandspec": [57, 61, 63, 100, 472, 474, 482, 483], "pytype_genericalloc": [57, 61, 63, 481], "pytype_genericnew": [57, 61, 63, 76], "pytype_getflag": [57, 61, 483], "pytype_getmodul": [57, 61, 100, 482, 483], "pytype_getmodulest": [57, 61, 100, 482, 483], "pytype_getnam": [57, 61, 473, 483], "pytype_getqualnam": [57, 61, 473, 483], "pytype_getslot": [57, 61, 472, 477, 483], "pytype_issubtyp": [57, 61], "pytype_modifi": [57, 61, 63, 483], "pytype_slot": [57, 58, 61], "pytype_typ": [57, 61, 63, 474, 483], "pyunicodeiter_typ": 57, "pyunicode_append": 57, "pyunicode_appendanddel": 57, "pyunicode_asasciistr": [57, 64, 476], "pyunicode_ascharmapstr": [57, 64], "pyunicode_asdecodedobject": [57, 474, 479, 483], "pyunicode_asdecodedunicod": [57, 474, 479, 483], "pyunicode_asencodedobject": [57, 474, 476, 479, 483], "pyunicode_asencodedstr": [57, 64, 483], "pyunicode_asencodedunicod": [57, 474, 479, 483], "pyunicode_aslatin1str": [57, 64, 476], "pyunicode_asmbcsstr": [57, 64, 476], "pyunicode_asrawunicodeescapestr": [57, 64, 476], "pyunicode_asucs4": [57, 64, 476], "pyunicode_asucs4copi": [57, 64, 472, 476], "pyunicode_asutf16str": [57, 64], "pyunicode_asutf32str": [57, 64], "pyunicode_asutf8ands": [57, 64, 472, 480, 483], "pyunicode_asutf8str": [57, 64, 476], "pyunicode_asunicodeescapestr": [57, 64, 476], "pyunicode_aswidechar": [57, 64, 483], "pyunicode_aswidecharstr": [57, 64, 472, 476, 480, 483], "pyunicode_buildencodingmap": [57, 483], "pyunicode_compar": [57, 64, 472, 476], "pyunicode_comparewithasciistr": [57, 64, 475, 483], "pyunicode_concat": [57, 64, 476], "pyunicode_contain": [57, 64], "pyunicode_count": [57, 64], "pyunicode_decod": [57, 64, 483], "pyunicode_decodeascii": [57, 64], "pyunicode_decodecharmap": [57, 64], "pyunicode_decodecodepagest": 57, "pyunicode_decodefsdefault": [57, 64, 72, 483], "pyunicode_decodefsdefaultands": [57, 59, 64], "pyunicode_decodelatin1": [57, 64], "pyunicode_decodelocal": [57, 64], "pyunicode_decodelocaleands": [57, 59, 64, 480], "pyunicode_decodembc": [57, 64], "pyunicode_decodembcsst": [57, 64], "pyunicode_decoderawunicodeescap": [57, 64], "pyunicode_decodeutf16": [57, 64], "pyunicode_decodeutf16st": [57, 64], "pyunicode_decodeutf32": [57, 64], "pyunicode_decodeutf32st": [57, 64], "pyunicode_decodeutf7": [57, 64], "pyunicode_decodeutf7st": [57, 64], "pyunicode_decodeutf8": [57, 64], "pyunicode_decodeutf8st": [57, 64, 483], "pyunicode_decodeunicodeescap": [57, 64], "pyunicode_encodecodepag": [57, 64, 476, 483], "pyunicode_encodefsdefault": [57, 59, 64, 483], "pyunicode_encodelocal": [57, 59, 64, 480, 483], "pyunicode_fsdecod": [57, 64, 474, 479, 483], "pyunicode_find": [57, 64], "pyunicode_findchar": [57, 64, 472, 476, 480, 483], "pyunicode_format": [57, 64], "pyunicode_fromencodedobject": [57, 64], "pyunicode_fromformatv": [57, 59, 64, 474, 483], "pyunicode_fromobject": [57, 64], "pyunicode_fromordin": 57, "pyunicode_fromstringands": [57, 64, 472, 483], "pyunicode_fromwidechar": [57, 64, 476], "pyunicode_getdefaultencod": 57, "pyunicode_getlength": [57, 64, 472, 476], "pyunicode_internfromstr": [57, 64], "pyunicode_interninplac": [57, 64, 472, 483], "pyunicode_isidentifi": [57, 64, 483], "pyunicode_join": [57, 64, 476], "pyunicode_partit": 57, "pyunicode_rpartit": 57, "pyunicode_rsplit": 57, "pyunicode_readchar": [57, 64, 476], "pyunicode_replac": [57, 64], "pyunicode_res": 57, "pyunicode_richcompar": [57, 64], "pyunicode_split": [57, 64], "pyunicode_splitlin": [57, 64], "pyunicode_substr": [57, 64, 472, 476], "pyunicode_tailmatch": [57, 64, 472, 476, 482], "pyunicode_transl": [57, 64], "pyunicode_typ": [57, 63, 64], "pyunicode_writechar": [57, 64, 476], "ob_bas": [57, 58, 76, 96, 483], "ob_siz": [57, 58, 63, 96, 473, 483], "pyweakrefer": [57, 473, 483], "pyweakref_getobject": [57, 67], "pyweakref_newproxi": [57, 67], "pywrapperdescr_typ": 57, "pyzip_typ": 57, "py_atexit": [57, 59], "py_bytesmain": [57, 66, 104, 481], "py_compilestr": [57, 66, 472], "py_exit": [57, 59, 479, 483], "py_filesystemdefaultencodeerror": [57, 474, 483], "py_filesystemdefaultencod": [57, 474, 483], "py_genericalia": [57, 62, 483], "py_genericaliastyp": [57, 62, 483], "py_getrecursionlimit": 57, "py_hasfilesystemdefaultencod": [57, 474], "py_i": [57, 58, 472, 483], "py_isfals": [57, 58, 472, 483], "py_isnon": [57, 58, 472, 483], "py_istru": [57, 58, 472, 483], "py_makependingcal": 57, "py_setrecursionlimit": 57, "py_ucs4": [57, 64, 476], "py_utf8mod": [57, 474, 483], "py_intptr_t": 57, "py_uintptr_t": 57, "allocfunc": [57, 63, 75], "binaryfunc": [57, 63], "descrgetfunc": [57, 63, 75], "descrsetfunc": [57, 63, 75], "getattrfunc": [57, 63, 75], "getattrofunc": [57, 63, 75], "getiterfunc": [57, 63, 75], "hashfunc": [57, 63, 75], "initproc": [57, 63, 75, 76], "iternextfunc": [57, 63, 75], "lenfunc": [57, 63], "newfunc": [57, 63, 75, 226], "objobjargproc": [57, 63], "objobjproc": [57, 63], "releasebufferproc": [57, 63, 483], "reprfunc": [57, 63, 75], "richcmpfunc": [57, 63, 75], "setattrfunc": [57, 63, 75], "setattrofunc": [57, 63, 75], "ssizeargfunc": [57, 63], "ssizeobjargproc": [57, 63], "ssizessizeargfunc": 57, "ssizessizeobjargproc": 57, "symtabl": [57, 68, 254, 264, 469, 472, 474, 482, 483], "ternaryfunc": [57, 63, 75], "unaryfunc": [57, 63], "ultim": [58, 193, 225, 235, 292, 352, 428, 430, 432, 436, 464, 466, 483], "expans": [58, 220, 234, 247, 294, 308, 314, 348, 364, 409, 422, 466, 476, 477], "notion": [58, 183, 186, 190, 193, 225, 299, 344, 376, 410, 414, 430, 434, 475], "py_siz": [58, 468, 473, 483], "pyobject_head": [58, 63, 76, 470], "pyobject_var_head": [58, 63, 75], "py_set_typ": [58, 473, 483], "py_is_typ": [58, 483], "py_set_s": [58, 473, 483], "pyobject_head_init": [58, 63, 474], "_pyobject_extra_init": 58, "pyvarobject_head_init": [58, 63, 75, 76, 483], "shall": [58, 103, 299, 329, 415, 426, 461, 475], "meth_keyword": [58, 73, 100, 483], "_pycfunctionfast": 58, "meth_fastcal": [58, 100, 480, 483], "narg": [58, 68, 89, 100, 102, 118, 292, 309, 340, 399, 451, 469, 475, 483], "_pycfunctionfastwithkeyword": 58, "pycmethod": [58, 61, 100, 473, 482, 483], "meth_method": [58, 100, 482, 483], "defining_class": [58, 100, 483], "ml_name": [58, 75], "ml_meth": [58, 75], "ml_flag": [58, 75], "ml_doc": [58, 75], "bitfield": [58, 113, 483], "convent": [58, 61, 63, 73, 85, 92, 93, 100, 101, 102, 109, 167, 176, 177, 178, 181, 183, 209, 228, 230, 243, 246, 266, 271, 292, 293, 295, 345, 352, 362, 364, 366, 395, 399, 428, 430, 434, 435, 452, 462, 463, 464, 465, 466, 467, 468, 469, 470, 475, 477, 478, 480, 483], "fourth": [58, 95, 177, 194, 267, 307, 319, 366, 419, 464], "question": [58, 73, 79, 85, 94, 95, 101, 102, 106, 109, 141, 158, 193, 194, 235, 266, 292, 340, 369, 373, 406, 442, 462, 464, 465, 467, 480, 482, 483], "superclass": [58, 61, 63, 100, 103, 116, 155, 181, 225, 226, 262, 268, 312, 338, 386, 428, 464, 465, 467, 474, 483], "unus": [58, 63, 76, 89, 126, 149, 177, 230, 258, 259, 282, 283, 313, 332, 338, 340, 345, 358, 362, 435, 461, 464, 468, 477, 480, 482, 483], "meth_o": [58, 62, 464, 483], "meth_class": [58, 62, 465], "classmethod": [58, 87, 93, 94, 116, 160, 161, 176, 183, 186, 191, 193, 203, 211, 221, 225, 226, 250, 255, 261, 283, 296, 299, 343, 344, 358, 381, 382, 386, 388, 422, 425, 428, 450, 464, 466, 469, 472, 473, 474, 475, 476, 479, 480, 481, 483], "meth_stat": [58, 465], "staticmethod": [58, 85, 87, 93, 94, 116, 193, 211, 225, 226, 268, 358, 389, 420, 428, 450, 464, 466, 469, 472, 475, 476, 481, 483], "meth_coexist": [58, 466], "sq_contain": [58, 63], "preclud": [58, 344, 481], "ml": [58, 95, 465], "unavail": [58, 84, 110, 193, 255, 270, 283, 293, 332, 386, 428, 483], "tp_member": [58, 63, 75, 76, 473, 483], "py_readon": [58, 75, 474], "py_t_str": 58, "py_t_object_ex": [58, 76, 474], "t_object": [58, 474, 483], "__vectorcalloffset__": [58, 61], "py_t_pyssizet": 58, "spam_type_memb": 58, "offsetof": [58, 76, 474], "spam_object": 58, "stddef": [58, 76, 474], "tp_dictoffset": [58, 61, 63, 75, 474, 483], "tp_weaklistoffset": [58, 61, 63, 75, 474, 482, 483], "__dictoffset__": 58, "__weaklistoffset__": 58, "py_tpflags_managed_dict": [58, 61, 63, 474, 483], "py_tpflags_managed_weakref": [58, 61, 63, 75, 474, 483], "structmemb": [58, 93, 474, 483], "obj_addr": 58, "py_audit_read": [58, 474], "py_relative_offset": [58, 474], "py_tp_memb": [58, 61, 483], "mandatori": [58, 76, 84, 242, 248, 250, 268, 293, 342, 465, 476, 480, 482, 483], "read_restrict": [58, 474], "write_restrict": [58, 474], "py_": [58, 61, 461, 483], "delattr": [58, 225, 440, 450], "py_t_byt": 58, "py_t_short": 58, "py_t_int": [58, 75, 76, 474], "py_t_long": 58, "py_t_longlong": 58, "py_t_ubyt": 58, "py_t_uint": 58, "py_t_ushort": 58, "py_t_ulong": 58, "py_t_ulonglong": 58, "py_t_float": 58, "py_t_doubl": [58, 75, 474], "py_t_bool": 58, "ro": [58, 85, 340], "py_t_string_inplac": 58, "py_t_char": 58, "t_int": [58, 474], "surpris": [58, 68, 84, 85, 102, 108, 118, 183, 186, 193, 225, 247, 267, 283, 308, 343, 358, 369, 386, 425, 432, 463, 464, 467, 471, 472, 473, 474, 478, 480, 481, 482, 483], "t_none": [58, 474, 483], "tp_getset": [58, 63, 75, 76], "pathlik": [59, 64, 87, 163, 225, 252, 293, 294, 296, 344, 389, 425, 479, 483], "__fspath__": [59, 293, 296, 362, 389, 479, 483], "py_fdisinteract": 59, "deem": [59, 207, 230, 269, 344, 426, 462, 463, 467, 469, 474, 475, 476, 477, 483], "isatti": [59, 153, 225, 258, 293, 352, 446, 483], "clone": [59, 201, 205, 208, 230, 235, 237, 283, 293, 301, 335, 376, 384, 410, 434, 460, 476, 481], "parent": [59, 61, 63, 68, 85, 99, 101, 102, 103, 114, 118, 133, 160, 177, 189, 225, 236, 248, 250, 253, 255, 267, 278, 281, 283, 293, 296, 302, 305, 309, 312, 314, 333, 337, 338, 340, 341, 348, 352, 369, 371, 373, 376, 385, 389, 390, 395, 410, 413, 421, 428, 432, 440, 464, 465, 466, 467, 468, 472, 474, 476, 477, 479, 480, 483], "register_at_fork": [59, 293, 480, 483], "reliabl": [59, 124, 126, 132, 133, 139, 158, 161, 186, 188, 251, 283, 333, 348, 403, 415, 427, 432, 440, 461, 465, 469, 475, 476, 477, 478, 479, 480, 483], "microsoft": [59, 68, 77, 86, 158, 167, 176, 254, 293, 350, 352, 398, 399, 407, 448, 456, 458, 464, 465, 467, 468, 473, 478, 483], "visual": [59, 77, 85, 92, 319, 341, 375, 384, 413, 455, 456, 461, 462, 465, 468, 478, 483], "sigact": [59, 483], "undecod": [59, 109, 158, 196, 293, 475, 483], "dc80": [59, 109, 158, 225], "dcff": [59, 109, 158, 225], "surrog": [59, 64, 158, 225, 262, 293, 340, 346, 358, 410, 476, 477, 481, 483], "error_po": 59, "0x80": [59, 109, 178, 344, 483], "0xff": [59, 158, 225, 344], "1000": [59, 85, 98, 102, 109, 149, 173, 177, 183, 221, 247, 259, 261, 275, 283, 284, 320, 329, 344, 345, 352, 369, 382, 384, 426, 440, 441, 444, 446, 449, 450, 462, 467, 468, 469, 475, 476, 481], "plus": [59, 63, 75, 84, 103, 120, 176, 177, 178, 186, 190, 194, 208, 283, 292, 293, 305, 331, 342, 344, 352, 362, 364, 365, 377, 394, 411, 430, 434, 435, 461, 464, 465, 466, 467, 474, 476, 477, 483], "hundr": [59, 102, 193, 235], "pysys_audit": [59, 98, 142, 352, 483], "apart": [59, 76, 95, 106, 167, 190, 275, 283, 292, 302, 430, 435, 461, 465, 469, 471], "unavoid": [59, 95, 103, 183, 466, 469, 471], "pysys_addaudithook": [59, 142, 352], "py_audithookfunct": 59, "silenc": [59, 120, 225, 323, 332, 397, 469, 475, 477, 482, 483], "578": [59, 68, 142, 352, 467, 468, 483], "addaudithook": [59, 142, 352, 450], "kill": [59, 84, 115, 130, 133, 137, 140, 142, 166, 177, 247, 257, 283, 293, 333, 348, 362, 402, 407, 422, 468, 469, 470, 475, 480, 483], "120": [59, 72, 95, 155, 193, 226, 261, 352, 384, 469, 479, 481, 483], "pytuple_check": [60, 79], "pytuple_checkexact": 60, "oo": [60, 352, 362, 450, 455, 471, 478, 483], "pytuple_get_s": 60, "pytuple_get_item": 60, "pytuple_set_item": [60, 472, 483], "_pytuple_res": [60, 464], "shrink": [60, 184, 466, 483], "client": [60, 68, 73, 84, 93, 101, 102, 107, 110, 126, 142, 144, 151, 158, 164, 167, 170, 194, 196, 241, 244, 245, 251, 254, 256, 259, 267, 269, 288, 293, 299, 328, 329, 337, 338, 340, 359, 362, 365, 384, 386, 394, 395, 409, 410, 417, 418, 420, 426, 441, 451, 464, 466, 468, 474, 476, 481, 483], "namedtupl": [60, 68, 87, 94, 117, 147, 182, 288, 299, 302, 303, 319, 329, 336, 340, 344, 347, 349, 352, 382, 385, 386, 401, 442, 468, 469, 471, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483], "desc": [60, 93, 281, 288, 340, 471], "pystructsequence_inittyp": [60, 477], "pystructsequence_inittype2": [60, 477], "meta": [60, 68, 87, 112, 122, 151, 177, 178, 220, 231, 250, 251, 292, 352, 395, 428, 464, 474, 476, 477, 479, 483], "n_in_sequ": 60, "unnam": [60, 73, 94, 176, 340, 405, 430, 477, 483], "pystructsequence_get_item": 60, "pystructsequence_set_item": 60, "pytype_check": [61, 73, 483], "pytype_checkexact": [61, 483], "primarili": [61, 85, 99, 101, 139, 141, 158, 183, 194, 206, 226, 252, 255, 267, 299, 304, 344, 348, 352, 386, 388, 400, 411, 427, 429, 461, 463, 464, 466, 468, 469, 476, 478, 480, 482, 483], "pytype_getdict": [61, 63, 483], "proxi": [61, 67, 68, 164, 167, 170, 187, 213, 225, 226, 242, 248, 257, 344, 385, 388, 395, 402, 410, 419, 426, 428, 463, 468, 474, 475, 476, 478, 479, 481, 483], "tp_dict": [61, 63, 75, 468, 483], "languag": [61, 64, 68, 72, 73, 74, 80, 84, 85, 87, 93, 94, 95, 100, 102, 106, 109, 110, 112, 122, 158, 167, 176, 180, 191, 196, 202, 205, 209, 217, 222, 225, 240, 246, 247, 250, 254, 266, 273, 281, 299, 307, 319, 340, 344, 345, 352, 355, 364, 369, 377, 379, 385, 386, 402, 410, 411, 419, 428, 430, 434, 435, 436, 445, 457, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "adequ": [61, 63, 76, 213, 469, 476], "pytype_addwatch": [61, 474], "pytype_watchcallback": 61, "pytype_watch": [61, 474, 483], "pytype_clearwatch": 61, "_pytype_lookup": [61, 93, 472, 483], "pytype_hasfeatur": [61, 63, 483], "pytype_is_gc": 61, "detector": [61, 73, 255, 456, 469], "issubclass": [61, 78, 87, 116, 161, 225, 344, 385, 386, 400, 428, 440, 450, 462, 468, 472, 480, 483], "nitem": [61, 63], "tp_alloc": [61, 63, 75, 76, 100, 483], "kwds": [61, 63, 75, 76, 93, 137, 144, 169, 175, 203, 211, 225, 226, 255, 283, 297, 318, 345, 362, 380, 385, 388, 428, 431, 441, 467, 481, 483], "qualifi": [61, 68, 87, 93, 191, 193, 197, 250, 255, 268, 269, 299, 335, 337, 344, 348, 386, 388, 398, 400, 413, 416, 423, 428, 432, 436, 455, 461, 467, 473, 478, 481, 483, 484], "pytype_getmodulebydef": [61, 100, 473, 483], "shortcut": [61, 68, 103, 193, 235, 247, 298, 321, 344, 358, 385, 428, 461, 466, 468, 480, 483], "togeth": [61, 63, 68, 72, 92, 93, 95, 99, 101, 102, 103, 106, 120, 126, 133, 158, 160, 176, 193, 202, 207, 208, 218, 225, 234, 235, 243, 244, 247, 259, 261, 267, 268, 271, 293, 332, 341, 344, 353, 369, 374, 384, 386, 388, 390, 395, 399, 412, 414, 426, 428, 430, 440, 449, 466, 474, 475, 476, 482, 483], "nb_add": [61, 63, 100], "pyunstable_type_assignversiontag": [61, 483], "metaclass": [61, 68, 87, 93, 94, 112, 116, 122, 176, 211, 225, 226, 255, 344, 385, 386, 427, 468, 470, 473, 474, 475, 477, 478, 479, 480, 481, 483], "py_tpflags_heaptyp": [61, 63, 100, 472, 482], "py_tp_bas": [61, 63], "pytype_from": [61, 474, 483], "14": [61, 68, 85, 89, 95, 96, 98, 106, 109, 121, 139, 141, 150, 158, 160, 161, 166, 176, 177, 183, 186, 191, 193, 209, 225, 236, 241, 247, 250, 253, 259, 261, 283, 293, 296, 302, 319, 322, 332, 337, 340, 343, 344, 345, 352, 358, 366, 378, 386, 398, 413, 428, 430, 432, 435, 442, 444, 446, 449, 452, 464, 466, 467, 469, 472, 473, 475, 478, 483, 484], "__init_subclass__": [61, 211, 225, 428, 473, 479, 483], "__set_name__": [61, 93, 181, 428, 474, 479, 483], "tp_doc": [61, 63, 75, 76, 472, 483], "overlap": [61, 64, 92, 106, 161, 177, 190, 259, 261, 282, 292, 319, 343, 344, 384, 436, 463, 464, 483], "mistak": [61, 73, 94, 103, 106, 120, 211, 213, 267, 271, 292, 344, 366, 369, 456, 466, 467, 469, 471, 474, 483], "suggest": [61, 68, 74, 84, 85, 91, 95, 102, 106, 109, 115, 133, 186, 225, 230, 235, 250, 299, 307, 320, 340, 365, 366, 382, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 477, 479, 481, 482, 483], "pynumbermethod": [61, 63, 75, 464, 467], "pysequencemethod": [61, 63, 75], "pymappingmethod": [61, 63, 75], "pyasyncmethod": [61, 63, 75, 483], "py_tp_dealloc": 61, "py_nb_add": 61, "py_sq_length": 61, "sq_length": [61, 63, 483], "tp_vectorcal": [61, 63, 75, 483], "tp_mro": [61, 63, 75, 483], "tp_cach": [61, 63, 75], "tp_subclass": [61, 63, 75, 474, 483], "tp_weaklist": [61, 63, 75, 474], "problemat": [61, 167, 268, 283, 466, 471, 475, 480, 483], "unlimit": [61, 126, 137, 151, 202, 203, 208, 235, 247, 283, 320, 322, 344, 348, 365, 428, 435, 483], "bf_getbuff": [61, 63, 473], "pfunc": [61, 72], "py_tp_doc": 61, "genericalia": [62, 68, 385, 428, 430, 472, 482, 483], "union": [62, 68, 88, 118, 160, 161, 225, 226, 252, 254, 333, 342, 346, 385, 386, 426, 428, 465, 466, 468, 469, 472, 473, 474, 478, 482, 483], "__origin__": [62, 344], "__args__": [62, 344, 472, 482, 483], "__parameters__": [62, 344, 386, 483], "lazili": [62, 166, 216, 243, 261, 344, 386, 388, 389, 427, 429, 430, 472, 473, 477, 483], "my_obj_method": 62, "__class_getitem__": [62, 68, 344, 386, 430, 473, 480, 483], "585": [62, 87, 161, 344, 385, 386, 473, 482, 483], "pytype_": 63, "fair": [63, 84, 92, 102, 109, 193, 204, 208, 281, 308, 330, 369, 388, 394, 410, 411, 456, 462, 464, 465, 467, 468, 479, 483], "examin": [63, 68, 72, 85, 101, 109, 181, 187, 255, 293, 297, 308, 331, 332, 333, 335, 344, 352, 362, 410, 463, 465, 467, 468, 483], "glanc": [63, 102, 465], "insight": 63, "tp_getattr": [63, 75], "tp_setattr": [63, 75], "__setattr__": [63, 75, 80, 85, 93, 142, 181, 299, 389, 428, 436, 464, 483], "__delattr__": [63, 75, 80, 93, 142, 181, 428, 483], "tp_as_async": [63, 75, 478], "__repr__": [63, 80, 93, 94, 103, 108, 160, 181, 183, 195, 211, 225, 255, 283, 286, 307, 321, 340, 385, 386, 389, 419, 425, 428, 452, 464, 465, 472, 473, 475, 480, 481, 483], "tp_as_sequ": [63, 75], "tp_as_map": [63, 75], "tp_str": [63, 75], "__str__": [63, 80, 94, 101, 102, 160, 183, 195, 196, 201, 202, 203, 205, 211, 255, 267, 283, 344, 345, 385, 389, 425, 428, 443, 464, 472, 473, 481, 483], "tp_as_buff": [63, 75, 482, 483], "tp_richcompar": [63, 75, 483], "__lt__": [63, 75, 80, 94, 108, 147, 161, 168, 181, 225, 226, 291, 344, 385, 389, 428, 430, 463, 469, 470, 475, 483], "__le__": [63, 80, 94, 161, 181, 226, 291, 344, 389, 428, 463, 469, 475], "__ne__": [63, 80, 161, 195, 202, 291, 389, 419, 428, 463, 473, 483], "__gt__": [63, 80, 94, 108, 161, 181, 225, 226, 291, 344, 389, 428, 463, 469, 475], "__ge__": [63, 80, 94, 161, 181, 226, 291, 344, 389, 428, 463, 469, 475], "tp_iter": [63, 75, 344, 464], "__iter__": [63, 75, 80, 87, 94, 102, 116, 161, 211, 225, 258, 261, 271, 283, 344, 386, 388, 389, 390, 422, 427, 428, 430, 440, 464, 465, 468, 477, 479, 482, 483], "tp_iternext": [63, 75, 344, 464, 483], "__next__": [63, 75, 87, 95, 112, 161, 166, 175, 191, 213, 225, 258, 261, 283, 344, 422, 428, 430, 440, 470, 483], "tp_method": [63, 75, 76], "tp_base": [63, 75, 76, 483], "__base__": 63, "tp_descr_get": [63, 75], "__get__": [63, 87, 93, 181, 226, 255, 389, 428, 464, 479, 483], "tp_descr_set": [63, 75, 483], "__set__": [63, 87, 93, 181, 255, 389, 428, 464, 479, 483], "__delete__": [63, 87, 93, 255, 389, 428, 464, 483], "tp_free": [63, 68, 75, 76], "tp_is_gc": [63, 75], "__subclasses__": [63, 344, 389, 474, 483], "tp_del": [63, 75, 227], "tp_version_tag": [63, 75, 483], "tp_final": [63, 75, 478, 481, 483], "tp_watch": [63, 75], "angl": [63, 106, 144, 158, 209, 225, 275, 384, 468, 469, 483], "am_await": 63, "__await__": [63, 87, 161, 191, 385, 428, 478, 483], "am_ait": 63, "__aiter__": [63, 87, 161, 191, 225, 389, 390, 427, 428, 478, 479, 480, 483], "am_anext": 63, "__anext__": [63, 87, 161, 191, 213, 225, 389, 427, 428, 430, 483], "am_send": 63, "sendfunc": 63, "__add__": [63, 80, 94, 100, 160, 168, 255, 289, 291, 389, 428, 430, 483], "__radd__": [63, 289, 428, 430], "nb_inplace_add": 63, "__iadd__": [63, 80, 85, 161, 291, 428, 462], "nb_subtract": 63, "__sub__": [63, 161, 291, 389, 428, 430], "__rsub__": [63, 168, 428], "nb_inplace_subtract": 63, "__isub__": [63, 161, 291, 428, 462], "nb_multipli": 63, "__mul__": [63, 80, 160, 291, 389, 428, 430, 483], "__rmul__": [63, 80, 428, 430, 483], "nb_inplace_multipli": 63, "__imul__": [63, 80, 160, 168, 291, 428, 483], "nb_remaind": 63, "__mod__": [63, 291, 389, 428, 430, 472, 483], "__rmod__": [63, 160, 428, 472, 478, 483], "nb_inplace_remaind": 63, "__imod__": [63, 291, 428], "nb_divmod": 63, "__divmod__": [63, 389, 428, 472, 478, 483], "__rdivmod__": [63, 428, 472, 483], "nb_power": 63, "__pow__": [63, 291, 389, 428, 430, 472, 483], "__rpow__": [63, 428, 472, 483], "nb_inplace_pow": 63, "__ipow__": [63, 291, 428, 472, 483], "nb_negat": 63, "__neg__": [63, 291, 389, 428, 430], "nb_posit": 63, "__pos__": [63, 291, 389, 428, 430], "nb_absolut": 63, "__abs__": [63, 225, 291, 386, 428, 483], "nb_bool": [63, 470], "__bool__": [63, 94, 112, 211, 232, 291, 344, 367, 389, 405, 428, 430, 470, 483], "nb_invert": 63, "__invert__": [63, 211, 291, 389, 428, 430], "nb_lshift": 63, "__lshift__": [63, 291, 389, 428, 430], "__rlshift__": [63, 428], "nb_inplace_lshift": 63, "__ilshift__": [63, 291, 428], "nb_rshift": 63, "__rshift__": [63, 291, 389, 428, 430], "__rrshift__": [63, 428], "nb_inplace_rshift": 63, "__irshift__": [63, 291, 428], "nb_and": 63, "__and__": [63, 161, 211, 291, 389, 428, 430], "__rand__": [63, 428, 430], "nb_inplace_and": 63, "__iand__": [63, 161, 168, 291, 428], "nb_xor": 63, "__xor__": [63, 161, 211, 291, 389, 428, 430], "__rxor__": [63, 428, 430], "nb_inplace_xor": 63, "__ixor__": [63, 161, 291, 428], "nb_or": 63, "__or__": [63, 161, 211, 291, 344, 389, 428, 430], "__ror__": [63, 428, 430, 483], "nb_inplace_or": 63, "__ior__": [63, 161, 291, 428], "nb_int": 63, "nb_reserv": 63, "nb_float": 63, "nb_floor_divid": 63, "__floordiv__": [63, 291, 389, 428, 430, 464, 472, 483], "nb_inplace_floor_divid": 63, "__ifloordiv__": [63, 291, 428], "nb_true_divid": 63, "__truediv__": [63, 250, 253, 291, 389, 428, 430, 464, 478], "nb_inplace_true_divid": 63, "__itruediv__": [63, 291, 428], "nb_matrix_multipli": 63, "__matmul__": [63, 291, 389, 428, 478], "__rmatmul__": [63, 428, 478], "nb_inplace_matrix_multipli": 63, "__imatmul__": [63, 291, 428, 478], "mp_length": 63, "__len__": [63, 80, 87, 116, 161, 196, 205, 211, 225, 271, 283, 291, 344, 386, 389, 410, 413, 427, 428, 465, 466, 481, 483], "mp_subscript": [63, 483], "mp_ass_subscript": 63, "__setitem__": [63, 80, 160, 161, 191, 196, 205, 208, 271, 283, 291, 299, 389, 390, 407, 410, 413, 428, 436, 465, 470, 483], "__delitem__": [63, 80, 160, 161, 196, 205, 271, 291, 389, 407, 410, 413, 428, 465, 470, 483], "sq_concat": 63, "sq_repeat": 63, "sq_item": [63, 483], "sq_ass_item": 63, "sq_inplace_concat": 63, "sq_inplace_repeat": 63, "_typeobject": [63, 75], "tp_compar": [63, 75], "tp_reserv": [63, 75, 478], "suit": [63, 75, 84, 85, 87, 95, 101, 102, 161, 193, 230, 283, 292, 340, 341, 358, 362, 382, 388, 400, 422, 427, 456, 461, 467, 468, 469, 470, 473, 474, 475, 477, 479, 480, 482, 483], "rich": [63, 64, 68, 75, 112, 160, 197, 225, 226, 291, 369, 375, 419, 428, 430, 432, 470, 475, 480, 482, 483, 484], "stuff": [63, 75, 79, 101, 102, 122, 169, 176, 193, 307, 389, 470], "resolut": [63, 68, 75, 76, 85, 87, 93, 97, 100, 116, 118, 126, 183, 214, 216, 225, 226, 232, 234, 245, 255, 293, 294, 295, 299, 308, 337, 344, 366, 427, 428, 432, 440, 465, 467, 476, 477, 478, 479, 481, 482, 483], "bitset": [63, 75], "type_new": [63, 93, 483], "metatyp": [63, 255], "complain": [63, 76, 102, 169, 247, 463, 483], "foo_typ": 63, "_ob_next": 63, "_ob_prev": 63, "getobject": [63, 456, 481, 483], "act": [63, 67, 75, 85, 95, 101, 144, 176, 181, 183, 191, 196, 201, 205, 208, 225, 226, 244, 248, 250, 253, 259, 267, 293, 309, 311, 340, 344, 352, 365, 375, 384, 385, 386, 426, 428, 435, 461, 462, 463, 468, 472, 476, 477, 481, 482, 483], "subpackag": [63, 87, 250, 281, 352, 388, 422, 432, 450, 462], "everyth": [63, 73, 76, 85, 92, 102, 103, 110, 120, 193, 208, 220, 225, 247, 268, 292, 293, 296, 299, 319, 332, 333, 337, 359, 369, 400, 419, 434, 435, 468, 470, 474, 476, 483], "pickl": [63, 68, 76, 84, 101, 102, 142, 156, 158, 160, 166, 171, 176, 182, 183, 186, 226, 254, 262, 264, 267, 268, 269, 274, 283, 284, 298, 327, 330, 347, 379, 386, 389, 446, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 480, 483, 484], "pydoc": [63, 68, 76, 84, 156, 187, 225, 254, 420, 463, 464, 465, 466, 469, 471, 478, 483], "meaning": [63, 106, 193, 198, 235, 250, 255, 259, 268, 271, 283, 293, 314, 319, 337, 341, 352, 382, 385, 395, 428, 434, 436, 470, 475, 477, 478, 483], "whichev": [63, 73, 75, 183, 267, 347, 388, 461, 476, 478], "align": [63, 68, 118, 145, 153, 345, 362, 376, 384, 408, 468, 469, 474, 483], "py_tpflags_basetyp": [63, 76], "permiss": [63, 84, 85, 87, 101, 102, 110, 163, 212, 213, 216, 248, 257, 293, 311, 332, 333, 337, 340, 342, 355, 358, 360, 395, 397, 405, 426, 461, 469, 480, 483], "foo_dealloc": [63, 481], "foo_object": 63, "tp_print": [63, 482], "inconsist": [63, 103, 190, 213, 292, 293, 337, 435, 463, 474, 479, 483], "relev": [63, 73, 75, 84, 85, 92, 95, 96, 99, 101, 102, 122, 167, 186, 193, 194, 208, 215, 242, 245, 251, 262, 267, 268, 269, 288, 292, 293, 302, 341, 344, 348, 355, 356, 362, 388, 414, 423, 425, 461, 462, 464, 466, 474, 476, 477, 478, 479, 482, 483], "await": [63, 68, 87, 123, 124, 126, 129, 130, 132, 133, 134, 135, 136, 137, 138, 161, 169, 170, 188, 191, 225, 255, 264, 344, 377, 385, 386, 388, 389, 427, 429, 431, 433, 435, 462, 465, 472, 473, 479, 480, 481, 482, 483], "eval": [63, 85, 88, 112, 121, 122, 144, 157, 159, 213, 225, 255, 268, 297, 299, 307, 327, 344, 375, 381, 429, 431, 435, 436, 437, 440, 444, 450, 462, 466, 468, 470, 471, 472, 473, 474, 475, 483], "feasibl": [63, 73, 330, 477, 483], "deduc": [63, 193, 283, 308, 354, 461, 475], "isinst": [63, 78, 85, 87, 88, 93, 94, 101, 102, 112, 116, 151, 161, 169, 181, 183, 211, 225, 250, 251, 255, 262, 289, 291, 299, 344, 385, 386, 388, 389, 390, 427, 428, 440, 450, 462, 465, 466, 468, 470, 472, 473, 474, 475, 479, 480, 483], "friend": [63, 73, 92, 102, 120, 190, 194, 292, 337, 344, 352, 388, 413, 425, 462, 466, 470, 477, 480, 482, 483], "among": [63, 103, 126, 141, 176, 181, 190, 193, 271, 283, 284, 293, 300, 328, 352, 358, 366, 369, 375, 388, 428, 461, 475, 481, 483], "mask": [63, 68, 176, 177, 256, 293, 322, 329, 332, 333, 337, 342, 353, 356, 369, 376, 405, 428, 466, 468, 475, 476, 482, 483], "guard": [63, 68, 100, 102, 122, 126, 251, 313, 362, 365, 385, 386, 431, 432, 441, 481, 483], "xxx": [63, 101, 102, 120, 352, 432, 456, 468, 469, 471, 476, 477, 483], "py_tpflags_default": [63, 76], "ore": [63, 178, 190, 193, 293, 319, 341, 369, 406], "decref": [63, 64, 483], "java": [63, 68, 78, 80, 84, 85, 95, 102, 106, 107, 116, 118, 225, 293, 344, 365, 410, 414, 415, 428, 434, 439, 441, 444, 462, 466, 467, 468, 470, 472, 475], "py_tpflags_readi": 63, "group": [63, 68, 84, 89, 94, 99, 101, 102, 109, 118, 124, 142, 151, 158, 169, 178, 186, 187, 190, 191, 193, 203, 225, 248, 251, 254, 259, 261, 266, 271, 281, 283, 288, 293, 296, 299, 314, 319, 332, 334, 337, 339, 341, 342, 343, 344, 345, 348, 353, 358, 365, 375, 376, 381, 382, 386, 391, 394, 400, 405, 415, 419, 428, 430, 431, 434, 435, 443, 452, 461, 462, 466, 467, 468, 469, 470, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483], "bitmask": [63, 126, 193, 295, 328, 329], "py_tpflags_have_stackless_extens": 63, "py_tpflags_immutabletyp": [63, 100, 472, 473, 474, 483], "portion": [63, 87, 92, 95, 99, 106, 128, 141, 179, 183, 186, 203, 209, 226, 235, 267, 268, 269, 337, 342, 376, 388, 394, 410, 416, 419, 420, 426, 432, 462, 475, 476, 478, 483], "py_tpflags_long_subclass": 63, "py_tpflags_list_subclass": 63, "py_tpflags_tuple_subclass": 63, "py_tpflags_bytes_subclass": 63, "py_tpflags_unicode_subclass": 63, "py_tpflags_dict_subclass": 63, "py_tpflags_base_exc_subclass": 63, "py_tpflags_type_subclass": 63, "ins": [63, 94, 95, 462, 464, 465, 466, 483], "py_tpflags_have_fin": [63, 474, 481], "py_tpflags_disallow_instanti": [63, 100, 472, 474, 483], "py_tpflags_map": [63, 191, 427, 483], "abc": [63, 68, 73, 78, 80, 85, 87, 88, 93, 95, 106, 109, 112, 126, 133, 136, 160, 167, 170, 176, 182, 184, 187, 191, 226, 228, 242, 251, 252, 254, 258, 259, 261, 267, 268, 280, 283, 290, 299, 315, 319, 321, 330, 331, 344, 345, 352, 362, 382, 385, 422, 423, 426, 427, 428, 430, 432, 435, 440, 442, 462, 464, 465, 466, 467, 468, 469, 470, 473, 474, 479, 480, 481, 483], "py_tpflags_sequ": [63, 191, 427, 483], "634": [63, 68, 112, 427, 428, 483], "py_tpflags_valid_version_tag": [63, 483], "local_travers": 63, "_thread": [63, 68, 84, 96, 142, 164, 254, 365, 465, 474, 476, 483], "localobject": 63, "particip": [63, 75, 76, 183, 243, 250, 299, 319, 462, 464, 467, 469], "hand": [63, 73, 75, 84, 85, 87, 94, 95, 103, 106, 129, 176, 177, 181, 186, 196, 201, 206, 213, 225, 230, 247, 258, 269, 299, 305, 319, 338, 366, 369, 384, 386, 389, 427, 430, 434, 436, 451, 462, 463, 464, 465, 467, 468, 470, 471, 476, 481, 483], "aid": [63, 340, 461, 465, 466, 469, 475, 476, 477, 483], "anyway": [63, 76, 176, 225, 243, 247, 259, 388, 463, 464, 474, 483], "get_refer": [63, 142, 227, 465, 472, 483], "weakrefer": 63, "40217": [63, 482, 483], "doubt": [63, 84, 92, 103, 167, 183, 467], "prove": [63, 95, 103, 176, 261, 341, 427, 465, 470, 471], "compos": [63, 68, 173, 200, 201, 202, 203, 208, 272, 293, 335, 355, 356, 375, 382, 387, 435, 476], "obvious": [63, 73, 95, 101, 102, 103, 106, 167, 177, 186, 267, 292, 295, 299, 308, 323, 347, 348, 362, 379, 413, 461, 462, 466, 467, 479, 483], "rare": [63, 84, 103, 126, 133, 177, 181, 193, 199, 213, 235, 243, 247, 267, 292, 330, 333, 337, 344, 358, 410, 463, 464, 467, 468, 474, 476, 483], "good": [63, 75, 78, 79, 84, 85, 93, 94, 100, 101, 102, 103, 106, 109, 110, 120, 139, 151, 155, 167, 170, 176, 177, 183, 190, 193, 198, 207, 225, 235, 250, 283, 292, 293, 295, 299, 307, 319, 341, 362, 364, 384, 386, 388, 411, 419, 426, 428, 462, 463, 465, 466, 468, 469, 473, 483], "local_clear": 63, "trash": [63, 271, 483], "reclam": 63, "weakref": [63, 68, 75, 85, 87, 181, 182, 213, 254, 283, 316, 344, 362, 452, 463, 464, 466, 467, 469, 473, 474, 483], "goal": [63, 75, 95, 100, 103, 201, 225, 235, 320, 362, 413, 434, 463, 465, 467, 468, 475, 477, 478, 479], "eas": [63, 68, 330, 344, 365, 388, 436, 462, 476, 478, 480, 483], "py_return_richcompar": [63, 480, 483], "val_a": 63, "val_b": 63, "pyweakref_": 63, "confus": [63, 72, 84, 85, 92, 96, 100, 102, 106, 110, 157, 176, 186, 190, 193, 225, 259, 269, 292, 293, 299, 319, 333, 358, 369, 395, 428, 430, 435, 436, 462, 463, 464, 465, 466, 467, 469, 471, 474, 475, 477, 479, 480, 481, 483], "unari": [63, 68, 122, 186, 191, 344, 428, 433, 435, 476], "overload": [63, 126, 226, 386, 395, 419, 428, 430, 463, 464, 473, 477, 483], "regard": [63, 100, 101, 169, 205, 226, 235, 269, 293, 340, 344, 348, 353, 383, 410, 413, 426, 461, 483], "reiniti": [63, 483], "unrel": [63, 73, 85, 94, 213, 271, 337, 483], "thumb": [63, 100, 190, 376], "defer": [63, 68, 73, 101, 126, 160, 193, 246, 269, 278, 340, 341, 356, 463, 468, 474, 483], "presum": [63, 101, 161, 183, 271, 283, 347, 348, 394, 430, 464, 469, 470, 483], "factori": [63, 68, 87, 99, 120, 126, 128, 130, 133, 158, 169, 172, 176, 189, 193, 203, 207, 208, 226, 250, 256, 267, 268, 269, 271, 275, 283, 292, 298, 315, 332, 365, 369, 371, 386, 390, 402, 407, 410, 413, 419, 420, 428, 464, 467, 468, 471, 474, 475, 476, 478, 480, 481, 482, 483], "mixtur": [63, 203, 431, 435, 478], "_pyobject_get_weakrefs_listptr": [63, 474], "sane": [63, 177, 183, 319, 483], "trivial": [63, 68, 72, 73, 75, 84, 95, 103, 137, 151, 194, 200, 208, 234, 283, 299, 319, 352, 465, 476, 477, 483], "local_fin": 63, "error_typ": 63, "error_valu": 63, "error_traceback": 63, "442": [63, 68, 75, 227, 482, 483], "tradit": [63, 73, 76, 93, 100, 173, 266, 271, 275, 292, 293, 299, 308, 355, 359, 362, 427, 431, 432, 456, 461, 465, 468, 475, 480, 483], "ternari": [63, 428, 430], "operand": [63, 68, 89, 122, 158, 183, 191, 193, 213, 225, 267, 290, 344, 428, 430, 436, 443, 449, 464, 469, 470, 475, 476, 483], "nb_long": 63, "augment": [63, 68, 85, 120, 122, 193, 268, 276, 331, 375, 428, 431, 435, 455, 475, 483, 484], "counter": [63, 68, 73, 76, 85, 87, 95, 140, 182, 190, 191, 200, 236, 283, 292, 293, 343, 344, 365, 366, 386, 388, 430, 440, 464, 466, 467, 468, 469, 471, 475, 476, 481, 483], "root": [63, 93, 96, 101, 102, 111, 112, 141, 142, 160, 176, 186, 201, 205, 206, 207, 210, 235, 236, 247, 248, 252, 261, 267, 268, 275, 283, 293, 294, 296, 302, 304, 314, 332, 339, 341, 342, 348, 352, 358, 362, 366, 369, 371, 372, 375, 376, 388, 410, 413, 415, 421, 422, 423, 428, 452, 455, 456, 462, 465, 466, 467, 468, 469, 470, 474, 475, 476, 477, 478, 481, 482, 483], "react": [63, 92, 272, 369, 462, 468], "demonstr": [63, 73, 75, 92, 94, 102, 106, 107, 114, 120, 140, 149, 176, 186, 242, 244, 247, 267, 278, 283, 292, 307, 319, 320, 340, 343, 347, 369, 380, 381, 384, 388, 413, 425, 430, 442, 461, 463, 475, 483], "tricki": [63, 85, 94, 157, 292, 369, 462, 463, 470], "tutori": [63, 68, 74, 92, 102, 105, 110, 118, 120, 162, 177, 193, 225, 226, 247, 268, 269, 290, 298, 337, 344, 369, 384, 413, 427, 434, 453, 464, 466, 467, 468, 475, 483], "assort": [63, 68, 74, 193, 375, 483], "topic": [63, 68, 72, 74, 76, 84, 92, 102, 106, 155, 193, 292, 307, 313, 337, 462, 465, 471, 483], "myobject": [63, 75], "myobject_typ": 63, "mymod": 63, "my": [63, 73, 78, 94, 95, 102, 103, 110, 151, 160, 193, 230, 248, 268, 296, 341, 344, 345, 362, 369, 446, 462, 464, 465, 466, 467, 474, 483], "myobj_new": 63, "myobj_dealloc": 63, "myobj_repr": 63, "myobj_travers": 63, "myobj_clear": 63, "myobj_hash": 63, "mystr": 63, "mystr_typ": 63, "393": [64, 68, 158, 352, 472, 482, 483, 484], "varieti": [64, 73, 75, 95, 100, 102, 109, 120, 158, 186, 194, 225, 230, 273, 292, 293, 308, 314, 344, 348, 369, 413, 432, 466, 467, 468, 469, 477], "stay": [64, 138, 352, 474, 475, 476, 479, 483], "65536": [64, 449, 483], "1114112": [64, 158], "623": [64, 318, 472, 474, 483], "py_ucs2": [64, 476], "py_ucs1": [64, 476], "narrow": [64, 319, 337, 344, 386, 456, 464, 472, 475, 476, 483], "pyasciiobject": [64, 476], "pycompactunicodeobject": [64, 476], "pyunicode_check": [64, 76], "pyunicode_checkexact": 64, "pyunicode_readi": [64, 473, 474, 476], "pyunicode_get_length": [64, 472, 476], "canon": [64, 85, 87, 94, 144, 167, 183, 186, 195, 211, 235, 292, 337, 346, 386, 387, 413, 425, 430, 469, 478, 483], "pyunicode_1byte_data": [64, 476], "pyunicode_2byte_data": [64, 476], "pyunicode_4byte_data": [64, 476], "ucs1": [64, 483], "ucs2": [64, 483], "ucs4": [64, 464, 483], "pyunicode_kind": [64, 476], "pyunicode_1byte_kind": [64, 476], "pyunicode_2byte_kind": [64, 476], "pyunicode_4byte_kind": [64, 476], "pyunicode_wchar_kind": [64, 473, 474, 476], "pyunicod": [64, 483], "pyunicode_data": [64, 476, 483], "pyunicode_writ": [64, 476], "saniti": [64, 456, 477, 483], "pyunicode_read": [64, 476], "pyunicode_read_char": [64, 476], "pyunicode_max_char_valu": [64, 476], "py_unicode_isspac": [64, 483], "ch": [64, 92, 101, 102, 158, 177, 190, 395, 462, 483], "py_unicode_islow": 64, "lowercas": [64, 106, 109, 143, 155, 158, 167, 186, 196, 205, 235, 248, 259, 305, 319, 344, 352, 364, 435, 470, 483], "py_unicode_isupp": 64, "uppercas": [64, 85, 93, 109, 120, 148, 178, 248, 259, 281, 292, 293, 344, 345, 435, 462, 469, 470, 474, 477, 479, 483], "py_unicode_istitl": 64, "titlecas": [64, 344, 435, 483], "py_unicode_islinebreak": 64, "linebreak": 64, "py_unicode_isdecim": [64, 475], "py_unicode_isdigit": 64, "py_unicode_isnumer": 64, "py_unicode_isalpha": 64, "alphabet": [64, 85, 89, 143, 146, 173, 178, 186, 196, 199, 262, 267, 268, 271, 308, 326, 334, 344, 385, 461, 465, 466, 467, 468, 469, 472, 477, 478, 479, 480, 481, 483], "py_unicode_isalnum": 64, "alphanumer": [64, 106, 151, 178, 193, 250, 268, 272, 299, 319, 331, 344, 345, 366, 465, 483], "py_unicode_isprint": 64, "printabl": [64, 146, 158, 177, 178, 195, 196, 197, 198, 202, 203, 208, 225, 282, 317, 344, 345, 346, 428, 463, 470, 475], "nonprint": [64, 344], "databas": [64, 68, 72, 84, 93, 106, 109, 142, 158, 177, 181, 183, 209, 225, 243, 254, 266, 276, 298, 299, 308, 330, 339, 340, 344, 346, 363, 365, 366, 369, 375, 376, 391, 395, 425, 432, 435, 443, 463, 464, 465, 467, 468, 469, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "0x20": [64, 143, 344, 428], "bear": [64, 183, 243, 250, 283, 344, 352, 483], "py_unicode_tolow": [64, 475], "py_unicode_toupp": 64, "upper": [64, 85, 92, 94, 95, 101, 102, 106, 122, 146, 148, 151, 160, 177, 190, 248, 283, 319, 337, 338, 340, 341, 344, 345, 375, 384, 388, 428, 430, 431, 436, 465, 475, 481, 483], "py_unicode_totitl": 64, "py_unicode_todecim": 64, "py_unicode_todigit": 64, "py_unicode_tonumer": 64, "py_unicode_is_surrog": 64, "0xd800": 64, "0xdfff": 64, "py_unicode_is_high_surrog": 64, "0xdbff": 64, "py_unicode_is_low_surrog": 64, "0xdc00": 64, "py_unicode_join_surrog": 64, "join": [64, 68, 77, 79, 85, 95, 102, 107, 114, 120, 126, 134, 136, 151, 158, 160, 175, 186, 190, 200, 202, 203, 208, 225, 242, 243, 244, 247, 259, 268, 270, 279, 283, 284, 293, 294, 296, 302, 316, 319, 320, 321, 326, 331, 332, 335, 337, 338, 342, 344, 345, 362, 364, 365, 367, 385, 386, 394, 399, 407, 410, 411, 413, 422, 425, 441, 449, 452, 462, 466, 467, 468, 474, 475, 476, 477, 478, 479, 480, 481, 483], "pyunicode_new": [64, 472, 476], "maxchar": 64, "nearest": [64, 103, 183, 186, 221, 225, 275, 352, 429, 436, 470, 471, 483], "65535": [64, 422, 464], "1114111": [64, 352, 476], "pyunicode_fromkindanddata": [64, 476], "transform": [64, 68, 87, 93, 94, 95, 102, 108, 109, 112, 122, 139, 145, 167, 183, 186, 193, 196, 197, 201, 205, 208, 213, 225, 226, 255, 266, 267, 271, 299, 344, 378, 384, 385, 386, 413, 426, 427, 428, 430, 462, 463, 468, 470, 477, 478, 480, 483], "codepoint": [64, 247, 266], "width": [64, 75, 85, 92, 106, 117, 120, 141, 150, 158, 176, 177, 181, 183, 186, 225, 247, 281, 292, 293, 307, 319, 343, 344, 345, 352, 364, 366, 369, 372, 376, 381, 384, 386, 387, 401, 428, 435, 449, 452, 462, 465, 467, 468, 469, 474, 475, 477, 479, 481, 483], "asterisk": [64, 248, 344, 386, 406, 413, 427, 430, 436, 480], "pad": [64, 68, 84, 122, 143, 146, 153, 177, 183, 186, 196, 199, 225, 234, 235, 259, 284, 337, 344, 345, 347, 349, 366, 369, 376, 395, 408, 462, 465, 468, 469, 475, 479, 483], "ll": [64, 73, 75, 76, 84, 85, 92, 93, 94, 95, 99, 101, 102, 106, 107, 109, 110, 112, 179, 193, 200, 269, 272, 292, 297, 319, 331, 340, 341, 344, 369, 384, 390, 413, 432, 434, 435, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 481, 482, 483], "intmax_t": [64, 474, 483], "uintmax_t": 64, "ssize_t": [64, 68, 176, 347, 475, 476, 484], "ptrdiff_t": [64, 474, 483], "octal": [64, 85, 106, 112, 151, 184, 259, 292, 293, 319, 344, 345, 435, 462, 463, 465, 466, 468, 470, 472, 473, 474, 475, 480, 481, 482, 483], "hexadecim": [64, 85, 96, 100, 106, 146, 158, 178, 235, 259, 292, 319, 344, 345, 347, 352, 435, 462, 466, 468, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483], "formatt": [64, 68, 118, 120, 268, 269, 292, 345, 465, 469, 472, 475, 477, 478, 480, 483], "lld": [64, 456, 469], "llu": [64, 469], "li": [64, 411, 478, 480, 483], "lli": [64, 384], "zi": 64, "ing": [64, 79, 106, 193, 243, 469, 473, 476, 480, 483], "pyunicode_copycharact": [64, 472, 473, 476, 483], "to_start": 64, "from_start": 64, "how_mani": 64, "memcpi": [64, 473, 483], "pyunicode_fil": [64, 473, 476, 483], "fill_char": 64, "bigger": [64, 93, 275, 332, 344, 358, 461, 481, 483], "contrast": [64, 186, 226, 247, 308, 341, 344, 347, 369, 386, 412, 428, 429, 430, 432, 464, 476, 479, 480], "substr": [64, 95, 106, 109, 167, 193, 235, 292, 319, 344, 388, 430, 449, 462, 464, 465, 466, 467, 468, 476, 478, 480, 483], "buflen": [64, 337], "copy_nul": 64, "383": [64, 158, 337, 483], "strlen": [64, 79, 107, 109], "parsetupl": 64, "wstr": [64, 472, 474], "wcslen": 64, "deviat": [64, 348, 394, 475, 476, 477, 483], "simplic": [64, 75, 262, 340, 344, 462, 464, 483], "pyunicode_asutf8": [64, 476, 480, 483], "byteord": [64, 344, 347, 352, 450, 483], "bom": [64, 68, 109, 145, 262, 378, 483], "divis": [64, 66, 68, 87, 102, 113, 183, 186, 213, 297, 302, 333, 344, 428, 429, 430, 436, 443, 449, 465, 466, 468, 469, 473, 475, 482, 483, 484], "ufeff": 64, "ufff": 64, "odd": [64, 92, 95, 153, 186, 235, 308, 348, 435, 441, 462, 465, 466, 467, 469, 483], "ordin": [64, 94, 109, 158, 176, 177, 178, 183, 343, 344, 384, 476, 478], "unmap": [64, 376], "0xfffe": [64, 158], "translat": [64, 68, 73, 106, 109, 112, 158, 176, 177, 187, 212, 213, 220, 222, 225, 245, 246, 250, 258, 262, 282, 293, 333, 337, 344, 348, 387, 413, 417, 419, 426, 427, 428, 462, 465, 466, 468, 469, 470, 471, 473, 475, 478, 480, 481, 483], "dbcs": [64, 158], "code_pag": [64, 476], "page": [64, 68, 84, 87, 92, 95, 101, 102, 103, 110, 115, 120, 126, 133, 136, 158, 166, 169, 173, 177, 190, 215, 247, 251, 254, 266, 268, 269, 271, 278, 284, 293, 304, 313, 314, 322, 328, 333, 337, 340, 342, 347, 350, 356, 361, 362, 365, 366, 369, 375, 383, 384, 395, 403, 413, 420, 422, 426, 434, 440, 451, 453, 455, 461, 462, 464, 466, 467, 468, 469, 475, 476, 479, 480, 481, 483], "cp_acp": [64, 158, 476, 479], "we": [64, 72, 73, 75, 76, 85, 91, 93, 94, 95, 96, 101, 102, 103, 106, 107, 109, 110, 120, 122, 126, 129, 133, 134, 136, 139, 144, 150, 155, 157, 160, 166, 167, 169, 170, 176, 183, 190, 191, 194, 196, 200, 202, 205, 208, 232, 235, 236, 242, 243, 247, 251, 255, 266, 268, 269, 283, 284, 292, 293, 299, 319, 332, 333, 338, 340, 341, 343, 344, 345, 347, 348, 362, 369, 376, 378, 382, 384, 386, 388, 390, 394, 395, 400, 402, 407, 411, 413, 419, 422, 427, 428, 430, 431, 432, 441, 443, 446, 456, 462, 464, 465, 467, 468, 469, 470, 474, 475, 476, 479, 480, 481, 482, 483], "concat": [64, 95, 291, 386, 441], "sep": [64, 85, 95, 146, 183, 186, 225, 231, 244, 247, 253, 293, 296, 341, 344, 345, 358, 407, 427, 441, 464, 467, 468, 469, 470, 473, 483], "maxsplit": [64, 106, 319, 344], "keepend": [64, 158, 190, 200, 344], "crlf": [64, 223, 244, 245, 480, 483], "tail": [64, 94, 103, 151, 160, 190, 261, 294, 334, 413, 467, 474, 476, 479, 483], "forward": [64, 85, 93, 95, 106, 153, 155, 176, 177, 183, 191, 200, 226, 230, 253, 258, 267, 271, 289, 297, 340, 341, 344, 384, 386, 402, 411, 427, 462, 463, 464, 466, 468, 471, 475, 480, 483], "replstr": 64, "maxcount": 64, "iso": [64, 150, 158, 183, 190, 195, 196, 202, 205, 239, 242, 266, 288, 314, 337, 340, 352, 366, 398, 407, 417, 419, 462, 466, 473, 475, 478, 479, 481, 483], "8859": [64, 109, 158, 190, 195, 196, 202, 205, 242, 288, 314, 340, 407, 417, 462, 475, 478], "p_unicod": 64, "clarif": [64, 432, 483], "lot": [64, 68, 73, 75, 77, 79, 84, 85, 96, 101, 106, 109, 110, 151, 169, 170, 176, 184, 193, 200, 234, 245, 259, 283, 292, 304, 308, 330, 338, 348, 374, 382, 399, 462, 463, 464, 465, 466, 468, 469, 470, 477, 482, 483], "talk": [64, 85, 92, 102, 109, 341, 348, 428, 467, 478], "neutral": [64, 73, 99, 477], "portabl": [65, 73, 80, 81, 102, 109, 131, 176, 177, 215, 216, 219, 249, 250, 266, 275, 278, 293, 299, 303, 306, 337, 342, 358, 366, 403, 421, 448, 461, 462, 465, 471, 476, 480, 481, 483], "grammar": [66, 68, 95, 112, 157, 264, 345, 377, 427, 431, 434, 435, 462, 463, 467, 470, 472, 474, 482, 483], "py_eval_input": [66, 79, 431], "py_file_input": [66, 431, 472], "py_single_input": [66, 431], "incompat": [66, 80, 176, 184, 255, 259, 266, 267, 271, 288, 293, 299, 386, 436, 456, 462, 465, 467, 470, 474, 475, 476, 478, 480, 481, 482, 483], "pyrun_anyfil": 66, "pyrun_anyfileexflag": 66, "closeit": 66, "pyrun_anyfileflag": 66, "pycompilerflag": [66, 481], "pyrun_anyfileex": 66, "devic": [66, 68, 99, 131, 158, 177, 178, 212, 225, 247, 258, 269, 293, 296, 328, 329, 332, 333, 337, 342, 348, 352, 358, 405, 413, 455, 462, 468, 483], "pseudo": [66, 68, 94, 120, 176, 181, 191, 196, 254, 274, 286, 293, 302, 322, 326, 344, 352, 391, 432, 464, 465, 468, 474, 479, 483], "pyrun_interactiveloop": [66, 79], "pyrun_simplefil": [66, 72], "pyrun_simplefileexflag": [66, 483], "pyrun_simplestringflag": 66, "pyrun_simplefileex": 66, "fopen": [66, 190, 476], "rb": [66, 84, 87, 102, 117, 126, 149, 160, 200, 208, 218, 225, 234, 235, 250, 252, 253, 258, 270, 288, 299, 302, 344, 360, 378, 379, 386, 397, 401, 407, 419, 422, 435, 446, 452, 462, 465, 472, 476, 483], "lf": [66, 178, 208, 435, 483], "pyrun_interactiveon": [66, 483], "pyrun_interactiveoneflag": 66, "ps1": [66, 157, 337, 352, 399, 438, 450, 455, 481, 483], "ps2": [66, 157, 352, 438, 450, 455, 483], "errcod": [66, 419], "pyrun_interactiveloopflag": 66, "eof": [66, 107, 126, 130, 133, 136, 137, 149, 155, 157, 168, 193, 213, 223, 225, 258, 270, 293, 309, 328, 331, 337, 340, 341, 359, 424, 455, 467, 472, 476, 483], "prototyp": [66, 68, 118, 155, 186, 340, 462, 467, 469, 483], "idl": [66, 68, 79, 80, 85, 87, 175, 176, 178, 229, 254, 334, 348, 368, 369, 384, 410, 411, 413, 459, 461, 464, 465, 484], "wait": [66, 68, 73, 85, 92, 96, 102, 110, 115, 120, 124, 125, 126, 129, 132, 133, 134, 136, 137, 138, 166, 177, 189, 207, 208, 245, 247, 254, 255, 257, 260, 269, 282, 283, 284, 293, 295, 318, 322, 325, 329, 333, 335, 337, 338, 340, 341, 342, 348, 361, 362, 365, 384, 395, 399, 403, 441, 452, 465, 466, 467, 468, 469, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "integr": [66, 68, 73, 87, 102, 115, 118, 186, 193, 221, 225, 247, 270, 275, 289, 319, 338, 340, 344, 347, 365, 369, 388, 390, 430, 457, 461, 462, 465, 466, 468, 470, 475, 476, 480, 481, 482, 483], "_tkinter": [66, 369, 384, 465, 473, 478, 482, 483], "pyos_readlinefunctionpoint": [66, 79, 472, 474, 477, 483], "edit": [66, 68, 85, 92, 95, 102, 103, 106, 109, 155, 167, 177, 190, 250, 251, 262, 271, 272, 293, 319, 320, 358, 368, 369, 376, 445, 455, 461, 462, 463, 465, 466, 468, 470, 475, 479, 480, 483], "pyrun_str": [66, 79, 483], "pyrun_stringflag": 66, "pyrun_fil": 66, "pyrun_fileexflag": 66, "pyrun_fileex": 66, "pyrun_fileflag": 66, "py_compilestringflag": 66, "py_compilestringexflag": 66, "py_compilestringobject": 66, "constrain": [66, 99, 122, 208, 386, 413, 427, 430, 432, 464, 467, 475, 481, 483], "kws": [66, 225, 352], "kwcount": 66, "defcount": 66, "kwdef": [66, 483], "precompil": [66, 324, 344, 455, 483], "unvarnish": 66, "thrown": [66, 95, 139, 183, 186, 268, 319, 464, 465, 476, 483], "pyeval_mergecompilerflag": 66, "cf": [66, 106, 337], "arbitrarili": [66, 167, 169, 191, 268, 293, 388, 395, 430, 466, 474, 481, 483], "__future__": [66, 68, 87, 88, 112, 159, 213, 225, 254, 255, 263, 315, 386, 427, 428, 436, 464, 465, 467, 468, 470, 472, 473, 477, 478, 480, 481, 482, 483, 484], "cf_flag": [66, 481], "cf_feature_vers": [66, 481, 483], "pycf_only_ast": [66, 122, 467, 481, 483], "co_future_divis": [66, 481, 482], "238": [66, 68, 87, 113, 470, 484], "pyweakref_check": 67, "pyweakref_checkref": 67, "pyweakref_checkproxi": 67, "pyweakref_get_object": [67, 473, 483], "695": [68, 101, 386, 429, 436, 483], "701": [68, 483], "syntact": [68, 85, 169, 202, 250, 314, 340, 344, 378, 386, 394, 400, 414, 427, 429, 430, 434, 435, 436, 441, 466, 467, 470, 483], "formal": [68, 193, 225, 235, 292, 319, 344, 345, 394, 414, 421, 428, 429, 430, 434, 436, 462, 464, 471, 477, 478, 481, 482, 483], "684": [68, 483], "669": [68, 102, 160, 483], "688": [68, 161, 428, 483], "709": [68, 469, 483], "692": [68, 386, 483], "typeddict": [68, 385, 386, 472, 481, 483], "698": [68, 386, 483], "decor": [68, 87, 93, 94, 102, 140, 161, 176, 181, 225, 226, 255, 315, 321, 344, 362, 386, 388, 389, 390, 420, 427, 428, 429, 430, 431, 467, 469, 470, 473, 475, 476, 477, 480, 481, 482, 483, 484], "asyncio": [68, 84, 101, 102, 114, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 156, 164, 169, 188, 254, 260, 267, 283, 341, 348, 352, 365, 389, 390, 428, 430, 455, 483], "calendar": [68, 156, 182, 183, 254, 366, 451, 462, 465, 473, 479, 483], "csv": [68, 100, 160, 217, 254, 362, 451, 465, 467, 471, 479, 483], "dis": [68, 87, 156, 254, 255, 264, 300, 352, 479, 483], "fraction": [68, 73, 109, 183, 186, 193, 225, 226, 254, 261, 266, 275, 289, 290, 308, 318, 319, 340, 343, 344, 365, 366, 384, 430, 435, 444, 449, 464, 465, 466, 467, 469, 470, 471, 472, 478, 479, 481, 482, 483], "itertool": [68, 87, 112, 160, 224, 225, 226, 236, 247, 250, 254, 275, 279, 291, 318, 343, 465, 466, 467, 468, 469, 470, 471, 483], "math": [68, 87, 95, 154, 166, 186, 193, 212, 221, 225, 254, 261, 283, 289, 290, 318, 343, 344, 347, 352, 384, 426, 428, 430, 442, 444, 446, 451, 456, 465, 466, 468, 469, 471, 483], "pathlib": [68, 120, 142, 163, 219, 231, 250, 251, 252, 253, 254, 293, 294, 416, 422, 483], "pdb": [68, 85, 114, 142, 144, 156, 185, 193, 214, 225, 254, 352, 381, 382, 455, 461, 465, 467, 468, 471, 473, 483], "shutil": [68, 84, 102, 110, 119, 142, 166, 219, 225, 234, 254, 293, 296, 348, 358, 362, 402, 451, 465, 468, 469, 472, 480, 482, 483], "sqlite3": [68, 84, 93, 142, 156, 160, 254, 298, 299, 456, 468, 469, 481, 483], "tempfil": [68, 110, 142, 200, 219, 225, 254, 283, 293, 327, 362, 395, 402, 468, 470, 483], "tkinter": [68, 80, 254, 368, 384, 459, 462, 465, 468, 469, 470, 471, 483], "unicodedata": [68, 106, 108, 109, 254, 344, 363, 430, 435, 462, 467, 468, 469, 472, 475, 476, 483], "unittest": [68, 78, 84, 112, 156, 187, 254, 362, 382, 400, 451, 465, 471, 482, 483], "uuid": [68, 156, 254, 256, 281, 337, 467, 473, 481, 483], "demo": [68, 89, 102, 222, 247, 411, 420, 451, 465, 468, 475, 484], "13": [68, 95, 98, 102, 104, 105, 109, 112, 117, 139, 141, 150, 151, 152, 153, 158, 160, 173, 176, 183, 193, 211, 226, 236, 241, 249, 259, 261, 266, 272, 278, 281, 287, 294, 295, 301, 322, 332, 336, 339, 340, 343, 344, 345, 349, 352, 359, 360, 378, 386, 397, 403, 408, 429, 441, 444, 446, 449, 450, 464, 465, 466, 467, 468, 469, 473, 475, 477, 478, 480, 481, 482, 483, 484], "15": [68, 78, 85, 92, 95, 98, 101, 102, 108, 109, 131, 150, 158, 160, 167, 181, 183, 193, 203, 211, 215, 223, 236, 241, 247, 258, 259, 261, 266, 267, 288, 293, 299, 318, 319, 322, 340, 341, 343, 344, 345, 348, 352, 366, 367, 378, 381, 387, 424, 425, 435, 446, 456, 463, 465, 466, 467, 468, 469, 471, 472, 473, 475, 478, 479, 480, 481, 482, 483], "asynchat": [68, 426, 468, 473, 477, 483], "asyncor": [68, 426, 466, 468, 473, 483], "configpars": [68, 114, 217, 254, 268, 331, 462, 466, 469, 470, 471, 473, 477, 480, 483], "distutil": [68, 71, 77, 111, 251, 463, 467, 468, 469, 473, 475, 481, 483, 484], "ensurepip": [68, 111, 142, 156, 192, 254, 399, 456, 472, 483], "ftplib": [68, 142, 156, 158, 254, 256, 395, 463, 465, 468, 469, 475, 477, 478, 479, 480, 481, 483], "gzip": [68, 80, 87, 102, 119, 149, 156, 158, 200, 218, 254, 276, 332, 358, 362, 409, 426, 451, 462, 465, 469, 471, 472, 477, 479, 483], "smtpd": [68, 473, 479, 482, 483], "ssl": [68, 94, 110, 126, 133, 136, 223, 242, 248, 254, 260, 269, 288, 293, 305, 327, 335, 337, 386, 395, 407, 419, 426, 456, 460, 462, 465, 466, 469, 482, 483], "webbrows": [68, 142, 156, 200, 254, 256, 462, 467, 473, 483], "etre": [68, 254, 273, 409, 411, 451, 467, 469, 475, 479, 481, 482, 483], "elementtre": [68, 254, 273, 409, 411, 451, 477, 479, 481, 482, 483], "zipimport": [68, 176, 252, 254, 280, 302, 432, 465, 467, 471, 483], "port": [68, 91, 92, 102, 105, 107, 110, 126, 136, 142, 167, 223, 242, 243, 245, 247, 248, 257, 268, 269, 283, 288, 293, 305, 313, 333, 335, 337, 338, 340, 341, 342, 359, 362, 394, 395, 407, 419, 420, 463, 464, 483, 484], "657": [68, 102, 483], "654": [68, 483], "678": [68, 474, 483], "exe": [68, 86, 104, 106, 247, 269, 283, 293, 294, 332, 334, 348, 399, 422, 438, 446, 448, 456, 461, 464, 469, 475, 479, 480, 483], "launcher": [68, 399, 421, 448, 458, 459, 469, 476, 477, 479, 480, 483], "646": [68, 158, 386, 483], "variad": [68, 118, 386, 441, 483], "655": [68, 386, 483], "673": [68, 102, 386, 483], "675": [68, 225, 386, 483], "681": [68, 386, 483], "563": [68, 113, 288, 386, 427, 436, 483], "contextlib": [68, 78, 187, 254, 315, 340, 344, 382, 469, 470, 471, 481, 483], "dataclass": [68, 108, 160, 211, 236, 254, 307, 308, 315, 316, 340, 344, 386, 440, 441, 483], "fcntl": [68, 142, 254, 337, 391, 464, 465, 466, 468, 483], "functool": [68, 85, 87, 88, 93, 108, 112, 126, 129, 147, 160, 220, 224, 225, 251, 254, 255, 261, 344, 428, 467, 468, 469, 470, 471, 483], "idlelib": [68, 156, 368, 369, 465, 483], "sysconfig": [68, 72, 104, 156, 254, 293, 315, 382, 399, 425, 472, 477, 483], "venv": [68, 87, 102, 111, 114, 156, 192, 251, 254, 355, 453, 461, 474, 476, 480, 483], "zipfil": [68, 119, 156, 254, 324, 327, 332, 358, 400, 421, 432, 451, 452, 455, 462, 467, 468, 469, 471, 483], "cheaper": [68, 381, 480], "lazi": [68, 88, 95, 103, 135, 225, 280, 341, 344, 352, 359, 386, 405, 427, 436, 467, 472, 474, 478, 480, 483], "659": [68, 483], "faq": [68, 78, 85, 86, 225, 235, 255, 290, 305, 344, 394, 429, 454, 467, 469, 477, 483], "jit": [68, 474, 479, 483], "notabl": [68, 100, 137, 191, 266, 283, 333, 340, 353, 400, 425, 463, 465, 466, 467, 468, 469, 471, 478, 479, 484], "tarfil": [68, 114, 119, 156, 254, 332, 451, 465, 466, 467, 468, 469, 474, 479, 480, 483], "openssl": [68, 235, 237, 341, 362, 456, 458, 462, 467, 468, 469, 472, 474, 475, 477, 478, 479, 480, 482, 483], "wildcard": [68, 122, 189, 220, 231, 288, 331, 348, 388, 435, 441, 443, 445, 480, 481, 483], "604": [68, 88, 344, 483], "612": [68, 101, 386, 468, 483], "613": [68, 102, 386, 483], "typealia": [68, 122, 386, 483], "647": [68, 386, 483], "argpars": [68, 85, 97, 102, 118, 160, 190, 200, 228, 254, 292, 309, 399, 451, 474, 483, 484], "base64": [68, 146, 156, 158, 195, 196, 197, 198, 199, 202, 203, 206, 208, 235, 248, 251, 254, 285, 317, 326, 327, 335, 341, 382, 395, 397, 419, 464, 466, 482, 483], "bdb": [68, 167, 185, 254, 297, 456, 469, 481, 483], "bisect": [68, 182, 254, 452, 466, 483], "curs": [68, 97, 118, 254, 462, 463, 466, 468, 483], "__slots__": [68, 87, 160, 181, 225, 226, 255, 299, 385, 402, 464, 469, 481, 483], "doctest": [68, 78, 84, 112, 156, 176, 187, 254, 362, 378, 381, 382, 388, 451, 463, 465, 467, 469, 471, 475, 476, 483], "fileinput": [68, 156, 219, 225, 254, 293, 352, 467, 473, 475, 481, 483], "glob": [68, 102, 142, 144, 193, 219, 220, 254, 281, 294, 296, 297, 332, 348, 451, 468, 469, 473, 474, 475, 479, 483], "hmac": [68, 173, 174, 235, 254, 269, 283, 299, 326, 337, 464, 469, 481, 483], "metadata": [68, 84, 98, 110, 111, 181, 226, 230, 250, 254, 255, 280, 288, 293, 294, 311, 332, 342, 358, 386, 419, 422, 428, 432, 441, 453, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484], "linecach": [68, 219, 254, 382, 483], "pprint": [68, 93, 147, 182, 190, 254, 297, 299, 341, 452, 463, 471, 475, 483], "py_compil": [68, 85, 156, 163, 254, 264, 469, 474, 475, 477, 483], "pyclbr": [68, 156, 254, 264, 483], "shelv": [68, 84, 184, 254, 274, 298, 299, 327, 344, 462, 465, 475, 483], "urllib": [68, 84, 97, 112, 136, 142, 151, 166, 169, 223, 226, 241, 242, 243, 254, 256, 269, 293, 307, 309, 382, 389, 399, 451, 462, 465, 467, 468, 470, 483], "652": [68, 483], "summari": [68, 84, 193, 251, 292, 302, 307, 322, 380, 381, 426, 453, 461, 463, 464, 465, 466, 475, 483, 484], "highlight": [68, 80, 92, 177, 190, 247, 388, 394, 457, 462, 469, 472, 473, 475, 483, 484], "zoneinfo": [68, 182, 183, 254, 366, 456, 483], "graphlib": [68, 182, 254, 483], "ast": [68, 156, 184, 225, 254, 264, 351, 377, 378, 467, 472, 473, 474, 476, 480, 483], "compileal": [68, 85, 156, 254, 264, 311, 352, 450, 456, 461, 474, 475, 479, 483], "http": [68, 80, 84, 101, 102, 103, 107, 110, 133, 142, 143, 150, 151, 156, 158, 166, 169, 183, 200, 208, 209, 240, 254, 256, 269, 313, 314, 327, 333, 337, 338, 341, 362, 382, 393, 394, 395, 396, 409, 413, 415, 418, 419, 420, 424, 426, 428, 432, 451, 452, 453, 454, 455, 459, 462, 464, 465, 466, 467, 468, 470, 474, 481, 483], "imaplib": [68, 106, 142, 194, 254, 256, 305, 464, 465, 466, 469, 471, 474, 479, 483], "ipaddress": [68, 97, 254, 256, 481, 483], "multiprocess": [68, 84, 101, 107, 125, 126, 164, 166, 247, 254, 269, 316, 327, 341, 362, 365, 398, 407, 469, 470, 474, 483, 484], "nntplib": [68, 142, 194, 201, 254, 350, 462, 466, 469, 471, 473, 474, 475, 483], "poplib": [68, 142, 156, 194, 254, 256, 451, 466, 474, 476, 479, 483], "smtplib": [68, 84, 102, 142, 194, 200, 201, 208, 254, 256, 269, 341, 451, 464, 468, 474, 475, 479, 483], "sur": [68, 483], "appl": [68, 93, 176, 190, 217, 247, 254, 269, 291, 347, 442, 451, 459, 465, 468, 469, 471, 479, 483], "silicon": [68, 459, 483], "mac": [68, 225, 235, 303, 332, 341, 376, 398, 456, 458, 470, 472, 474, 475, 477, 479, 480, 483], "parallel": [68, 84, 87, 95, 100, 102, 124, 126, 129, 134, 137, 163, 164, 169, 207, 225, 232, 235, 254, 261, 352, 384, 388, 403, 413, 443, 455, 462, 469, 475, 476, 477, 478, 482, 483], "band": [68, 298, 328, 483], "cprofil": [68, 156, 185, 467, 483], "gettext": [68, 89, 102, 246, 254, 266, 411, 435, 451, 462, 466, 473, 483], "json": [68, 101, 102, 120, 151, 156, 167, 251, 254, 258, 268, 269, 285, 298, 307, 347, 445, 451, 469, 471, 472, 475, 476, 477, 482, 483], "plistlib": [68, 217, 254, 479, 480, 482, 483], "shlex": [68, 114, 126, 137, 167, 222, 254, 297, 348, 474, 482, 483], "xmlrpc": [68, 254, 256, 283, 299, 409, 426, 451, 464, 470, 477, 483], "postpon": [68, 113, 177, 250, 386, 427, 428, 473, 483], "553": [68, 483], "562": [68, 428, 483], "564": [68, 483], "nanosecond": [68, 293, 366, 405, 467, 476, 481, 482, 483], "565": [68, 213], "560": [68, 385, 428, 483], "545": 68, "binascii": [68, 100, 143, 158, 254, 285, 397, 426, 469, 473, 477, 482, 483], "crypt": [68, 174, 254, 310, 350, 426, 473, 474, 479, 483], "dbm": [68, 84, 254, 298, 299, 330, 428, 456, 469, 470, 481, 483], "server": [68, 84, 85, 92, 95, 101, 107, 110, 136, 151, 156, 167, 170, 176, 192, 194, 198, 200, 208, 223, 226, 235, 241, 242, 243, 244, 247, 248, 254, 256, 257, 259, 267, 268, 269, 283, 288, 293, 294, 296, 305, 313, 318, 327, 328, 329, 333, 335, 337, 340, 352, 355, 356, 359, 362, 365, 369, 382, 386, 393, 395, 407, 418, 426, 451, 452, 461, 463, 464, 465, 466, 467, 468, 469, 474, 476, 477, 478, 479, 481, 482, 483, 484], "mimetyp": [68, 156, 197, 200, 254, 272, 285, 382, 407, 464, 468, 469, 479, 483], "msilib": [68, 254, 350, 467, 468, 473, 474, 483], "queue": [68, 84, 101, 102, 107, 108, 123, 126, 136, 160, 164, 177, 182, 212, 232, 254, 261, 268, 269, 293, 318, 322, 325, 328, 337, 338, 344, 359, 361, 365, 369, 413, 445, 452, 462, 465, 466, 467, 468, 470, 475, 478, 481, 482, 483], "socketserv": [68, 102, 241, 245, 254, 256, 337, 420, 468, 469, 470, 483], "mock": [68, 187, 254, 382, 388, 473, 476, 477, 481, 482, 483], "uu": [68, 146, 158, 397, 426, 464, 473, 474, 483], "zipapp": [68, 114, 156, 192, 254, 483], "aifc": [68, 206, 254, 336, 349, 350, 401, 462, 473, 474, 482, 483], "macpath": [68, 481, 483], "sunau": [68, 254, 350, 473, 474, 482, 483], "wave": [68, 153, 254, 277, 349, 462, 479, 482, 483], "498": [68, 87, 435, 477, 483], "526": [68, 87, 102, 122, 181, 386, 427, 436, 472, 480, 481, 483], "515": [68, 221, 345, 473, 483], "525": [68, 87, 161, 255, 352, 430, 483], "530": [68, 430, 483], "487": [68, 483], "enhanc": [68, 80, 87, 92, 95, 102, 103, 175, 226, 245, 268, 283, 341, 348, 362, 376, 384, 386, 426, 430, 435, 462, 463, 464, 466, 467, 470, 471, 475, 476, 477, 478, 483, 484], "519": [68, 87, 382, 483], "495": [68, 425, 483], "520": 68, "468": [68, 160, 483], "dtrace": [68, 97, 456, 483], "systemtap": [68, 97, 456, 483], "probe": [68, 98, 477, 483], "cmath": [68, 87, 254, 275, 290, 344, 466, 468, 477, 483], "email": [68, 87, 101, 143, 146, 151, 235, 242, 243, 245, 251, 254, 268, 269, 271, 272, 285, 293, 319, 335, 341, 352, 366, 395, 426, 432, 451, 453, 464, 466, 467, 468, 469, 474, 483], "pickletool": [68, 156, 254, 264, 299, 382, 468, 483], "rlcomplet": [68, 114, 254, 320, 334, 363, 467, 468, 483], "telnetlib": [68, 142, 254, 350, 468, 473, 474, 483], "timeit": [68, 85, 156, 169, 185, 254, 308, 451, 455, 465, 466, 468, 483], "robotpars": [68, 254, 256, 392, 462, 470, 483], "winreg": [68, 142, 254, 404, 450, 470, 483], "winsound": [68, 77, 254, 404, 483], "grp": [68, 254, 310, 339, 348, 391, 465, 482, 483], "regen": [68, 456, 483], "492": [68, 87, 161, 255, 427, 428, 430, 479, 483], "465": [68, 335, 483], "infix": 68, "448": [68, 430, 483], "461": [68, 344], "percent": [68, 84, 343, 345, 377, 394, 426, 461, 468, 470, 475, 483], "484": [68, 87, 122, 343, 344, 386, 427, 428, 436, 441, 472, 473, 474, 479, 480, 481, 483], "471": [68, 160, 483], "scandir": [68, 142, 231, 293, 296, 479, 480, 481, 483], "better": [68, 72, 73, 75, 76, 84, 85, 93, 95, 100, 101, 102, 106, 114, 120, 126, 138, 141, 159, 176, 190, 193, 215, 226, 228, 234, 247, 261, 266, 271, 283, 292, 293, 305, 308, 328, 347, 348, 365, 366, 369, 376, 384, 386, 388, 390, 397, 413, 462, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 479, 480, 481, 482, 483], "475": [68, 213, 225, 293, 328, 329, 333, 337, 366, 483], "retri": [68, 106, 110, 213, 269, 293, 328, 329, 333, 337, 341, 348, 373, 395, 429, 441, 464, 465, 469, 473, 483], "479": [68, 113, 213, 479, 480, 483], "485": [68, 154, 275, 483], "486": [68, 214, 476, 483], "awar": [68, 77, 99, 100, 103, 106, 108, 139, 167, 179, 182, 194, 196, 200, 202, 203, 205, 206, 209, 226, 230, 248, 266, 272, 293, 340, 341, 345, 352, 366, 369, 400, 413, 416, 455, 456, 461, 462, 464, 465, 466, 470, 471, 474, 475, 476, 479, 480, 483], "488": [68, 250, 311, 362, 455, 483], "elimin": [68, 93, 101, 186, 190, 250, 251, 271, 384, 428, 456, 466, 476, 481, 483], "pyo": [68, 163, 250, 382, 465, 468, 469, 477, 483], "bz2": [68, 119, 158, 176, 218, 254, 270, 296, 332, 358, 362, 422, 451, 465, 469, 471, 472, 477, 482, 483], "cgi": [68, 110, 245, 254, 327, 328, 350, 395, 396, 407, 420, 462, 468, 472, 473, 474, 475, 477, 479, 480, 481, 482, 483], "difflib": [68, 145, 156, 193, 216, 254, 363, 463, 464, 466, 467, 468, 469, 477, 483], "heapq": [68, 87, 108, 182, 225, 226, 254, 316, 318, 452, 465, 466, 467, 468, 483], "imghdr": [68, 254, 336, 350, 473, 474, 483], "lzma": [68, 119, 149, 254, 332, 358, 362, 409, 422, 451, 472, 477, 483], "selector": [68, 95, 125, 126, 131, 254, 260, 261, 328, 333, 338, 341, 361, 368, 395, 469, 471, 480, 483], "sndhdr": [68, 254, 350, 473, 474, 483], "bio": [68, 288, 483], "negoti": [68, 241, 341, 468, 476, 483], "wsgiref": [68, 254, 256, 473, 475, 479, 481, 483], "sax": [68, 254, 273, 409, 410, 411, 412, 451, 462, 463, 472, 479, 480, 481, 483], "453": [68, 210], "bootstrap": [68, 111, 142, 192, 254, 318, 334, 399, 474, 483], "pip": [68, 76, 114, 192, 251, 254, 261, 399, 421, 445, 455, 461, 472, 474, 483], "446": [68, 469], "audioop": [68, 254, 350, 467, 473, 474, 482, 483], "colorsi": [68, 254, 277, 483], "filecmp": [68, 156, 190, 219, 254, 462, 483], "html": [68, 71, 78, 79, 80, 95, 101, 103, 106, 110, 126, 136, 150, 151, 152, 158, 162, 190, 200, 205, 242, 243, 245, 247, 254, 261, 273, 293, 313, 340, 341, 369, 380, 394, 395, 396, 407, 411, 412, 413, 417, 419, 420, 424, 426, 428, 435, 452, 455, 456, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 478, 480, 481, 482, 483, 484], "pti": [68, 142, 254, 293, 341, 391, 474, 483], "stat": [68, 87, 109, 185, 190, 216, 219, 234, 250, 254, 258, 269, 288, 293, 294, 296, 305, 332, 341, 358, 382, 386, 432, 464, 465, 467, 468, 472, 474, 475, 478, 479, 480, 481, 483], "textwrap": [68, 120, 254, 363, 452, 465, 468, 483], "445": 68, "436": [68, 319], "clinic": [68, 479, 481, 483], "476": [68, 382, 483], "certif": [68, 126, 133, 136, 223, 242, 248, 269, 305, 362, 395, 419, 468, 474, 480, 483], "verif": [68, 119, 268, 340, 341, 344, 394, 475, 483], "405": [68, 110, 241, 399, 484], "420": [68, 87, 250, 432, 483, 484], "3118": [68, 344, 470, 481, 483, 484], "flexibl": [68, 73, 84, 93, 99, 101, 102, 106, 112, 133, 151, 169, 176, 190, 193, 196, 205, 208, 230, 268, 283, 292, 295, 299, 340, 344, 348, 358, 366, 386, 400, 411, 413, 428, 462, 463, 465, 467, 469, 470, 475, 478, 482, 484], "397": [68, 332, 461, 478, 483, 484], "rework": [68, 213, 288, 463, 464, 465, 467, 469, 475, 479, 483, 484], "380": [68, 353, 430, 484], "subgener": [68, 430, 484], "409": [68, 110, 241, 484], "414": [68, 110, 186, 241, 343, 382, 435, 465, 483, 484], "3155": [68, 87, 484], "412": [68, 110, 226, 241, 484], "362": [68, 87, 98, 255, 484], "421": [68, 241, 352, 483, 484], "simplenamespac": [68, 160, 307, 385, 399, 482, 483], "finer": [68, 74, 101, 126, 267, 293, 474, 480, 481, 483, 484], "grain": [68, 84, 101, 102, 177, 193, 267, 293, 318, 352, 395, 428, 474, 483, 484], "framework": [68, 84, 102, 123, 126, 133, 155, 167, 170, 176, 187, 193, 222, 247, 254, 256, 334, 335, 341, 344, 352, 388, 395, 420, 428, 443, 456, 459, 464, 465, 468, 469, 470, 475, 477, 478, 480, 481, 482, 483, 484], "sched": [68, 164, 254, 468, 483], "384": [68, 183, 467, 472, 474, 482, 483, 484], "389": [68, 484], "391": [68, 484], "3148": [68, 166, 484], "repositori": [68, 96, 250, 425, 460, 462, 463, 467, 469, 483, 484], "3149": [68, 352, 483, 484], "3333": [68, 407, 484], "web": [68, 84, 85, 95, 103, 107, 109, 110, 151, 226, 235, 244, 245, 247, 254, 256, 257, 269, 272, 313, 340, 341, 394, 395, 407, 410, 420, 426, 432, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 477, 483, 484], "gateway": [68, 110, 151, 467, 484], "v1": [68, 337, 347, 483, 484], "ftp": [68, 80, 110, 254, 256, 269, 286, 394, 395, 460, 462, 463, 468, 469, 476, 479, 480, 481, 482, 483], "popen": [68, 102, 126, 133, 137, 142, 151, 164, 208, 248, 293, 301, 306, 328, 337, 360, 362, 399, 428, 466, 468, 476, 477, 479, 480, 481, 483], "nntp": [68, 194, 254, 350, 394, 466, 476, 482, 483], "mailbox": [68, 85, 194, 201, 248, 254, 285, 305, 467, 469, 479, 482, 483], "turtledemo": [68, 156, 222, 247, 483], "372": [68, 484], "378": [68, 96, 345, 382, 484], "thousand": [68, 109, 235, 266, 307, 308, 319, 345, 441, 479, 480, 483, 484], "stumbl": [68, 484], "vs": [68, 187, 308, 363, 427, 483], "3101": [68, 345, 484], "miscellan": [68, 118, 119, 155, 164, 191, 194, 217, 285, 368, 458, 483, 484], "3106": [68, 484], "3137": [68, 484], "ttk": [68, 254, 368, 369, 375, 471, 479, 480, 481, 483], "theme": [68, 247, 254, 368, 369, 465, 468, 471, 479, 480, 483], "widget": [68, 81, 92, 93, 102, 118, 169, 181, 189, 247, 254, 292, 368, 371, 384, 388, 462, 465, 466, 471, 475, 479, 483], "tk": [68, 247, 254, 371, 372, 384, 439, 459, 461, 462, 463, 468, 471, 472, 473, 475, 476, 478, 479, 480, 482, 483], "freebsd": [68, 92, 115, 133, 212, 215, 278, 293, 295, 309, 322, 328, 337, 352, 362, 365, 366, 458, 467, 473, 477, 480, 482, 483], "mainten": [68, 435, 461, 474, 475, 476, 477, 480, 481, 482, 483, 484], "434": [68, 247], "branch": [68, 154, 191, 270, 319, 353, 362, 375, 380, 462, 467, 468, 482, 483], "466": 68, "network": [68, 101, 107, 109, 110, 133, 136, 141, 184, 212, 247, 249, 254, 256, 257, 269, 283, 288, 293, 299, 322, 328, 335, 341, 347, 355, 358, 362, 394, 395, 398, 405, 414, 420, 432, 463, 464, 465, 468, 476, 478, 480, 481, 483], "477": [68, 474, 483], "backport": [68, 247, 251, 252, 314, 358, 386, 389, 413, 422, 468, 478, 479, 480, 481, 482, 483], "493": [68, 98], "migrat": [68, 91, 251, 252, 255, 386, 400, 410, 436, 467, 468, 471, 474, 476, 477, 483], "roundup": 68, "343": [68, 87, 113, 169, 427, 428, 446, 449, 470, 484], "366": [68, 94, 98, 183, 250, 324, 366, 432, 470, 476, 484], "370": [68, 334, 455, 470, 483, 484], "371": [68, 470, 484], "3105": [68, 113, 470, 484], "3110": [68, 470, 484], "3112": [68, 113, 470, 484], "3116": [68, 87, 470, 471, 484], "3127": [68, 470, 484], "3129": [68, 427, 470, 484], "3141": [68, 116, 289, 470, 484], "future_builtin": [68, 112], "javascript": [68, 167, 240, 244, 257, 262, 299, 441, 446, 472, 483], "notat": [68, 78, 87, 95, 99, 102, 103, 106, 109, 167, 186, 225, 259, 262, 278, 293, 299, 314, 337, 344, 345, 348, 363, 369, 389, 410, 413, 415, 427, 428, 430, 431, 433, 435, 440, 446, 455, 465, 466, 467, 470, 475, 481, 482, 483], "irix": [68, 470, 483], "308": [68, 226, 241, 430, 483, 484], "309": [68, 484], "314": [68, 85, 484], "328": [68, 113, 225, 250, 432, 470, 476, 484], "338": [68, 324, 432, 455, 484], "341": [68, 102, 484], "unifi": [68, 103, 158, 190, 193, 299, 387, 477, 483, 484], "342": [68, 95, 161, 367, 430, 484], "352": [68, 468, 470, 473, 483, 484], "357": [68, 484], "218": [68, 226, 484], "237": [68, 344, 470, 484], "289": [68, 95, 226, 308, 484], "292": [68, 102, 267, 345, 484], "318": [68, 427, 484], "322": [68, 484], "324": [68, 85, 348, 484], "327": [68, 473, 484], "whi": [68, 73, 75, 92, 93, 94, 95, 99, 101, 103, 109, 151, 167, 176, 193, 201, 235, 250, 253, 261, 271, 283, 292, 293, 299, 345, 355, 388, 390, 428, 461, 464, 467, 469, 474, 480, 483], "331": [68, 484], "cookielib": [68, 469, 470], "datatyp": [68, 75, 85, 176, 186, 217, 262, 299, 466, 468, 469, 471, 475, 484], "263": [68, 109, 250, 378, 467, 483, 484], "273": [68, 158, 270, 284, 423, 484], "zip": [68, 85, 87, 95, 102, 112, 114, 119, 146, 158, 160, 166, 192, 225, 250, 251, 252, 253, 254, 261, 275, 280, 327, 332, 340, 344, 345, 354, 358, 362, 409, 432, 440, 442, 450, 452, 453, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 475, 478, 479, 480, 483, 484], "archiv": [68, 84, 102, 103, 105, 119, 192, 219, 251, 254, 271, 280, 342, 354, 362, 399, 426, 451, 456, 462, 463, 467, 468, 469, 471, 474, 475, 477, 480, 481, 483, 484], "277": [68, 484], "nt": [68, 101, 110, 160, 269, 293, 303, 314, 315, 352, 399, 411, 413, 462, 475, 481, 483, 484], "278": [68, 87, 484], "univers": [68, 87, 94, 183, 225, 235, 248, 250, 258, 344, 358, 366, 388, 394, 398, 422, 456, 466, 467, 468, 473, 477, 479, 480, 481, 482, 483, 484], "279": [68, 226, 484], "282": [68, 267, 332, 484], "285": [68, 87, 440, 484], "293": [68, 382, 484], "301": [68, 102, 110, 241, 395, 483, 484], "302": [68, 87, 110, 225, 241, 242, 245, 250, 265, 302, 324, 352, 395, 423, 432, 467, 468, 471, 476, 483, 484], "305": [68, 110, 175, 241, 484], "307": [68, 110, 241, 299, 395, 484], "optpars": [68, 89, 118, 254, 350, 466, 467, 469, 475, 479, 483], "252": [68, 99, 428, 483, 484], "253": [68, 99, 484], "diamond": [68, 94, 103, 177, 225, 428, 440], "234": [68, 186, 345, 452, 471, 478, 484], "227": [68, 113, 484], "scope": [68, 78, 85, 87, 94, 99, 101, 102, 103, 113, 144, 160, 191, 255, 259, 297, 307, 314, 320, 331, 337, 341, 351, 352, 369, 386, 399, 411, 413, 415, 427, 428, 430, 432, 436, 445, 450, 462, 468, 470, 474, 475, 476, 479, 480, 481, 482, 483, 484], "236": [68, 113, 436, 484], "207": [68, 241, 308, 484], "230": [68, 223, 475, 479, 484], "229": [68, 484], "205": [68, 110, 241, 245, 288, 402, 483, 484], "232": [68, 484], "235": [68, 250, 483, 484], "insensit": [68, 106, 109, 158, 167, 196, 205, 244, 245, 250, 276, 319, 334, 340, 345, 346, 358, 362, 400, 455, 461, 466, 468, 480, 483, 484], "217": [68, 382, 484], "208": [68, 241, 484], "241": [68, 484], "sax2": [68, 254, 273, 409, 411, 415], "dom": [68, 254, 257, 273, 409, 415, 451, 463, 465, 467, 473, 479, 480, 481, 483], "relationship": [68, 93, 133, 161, 183, 193, 298, 343, 344, 352, 369, 380, 402, 410, 426, 428, 440, 467, 483], "pyxml": [68, 463], "changelog": [68, 307, 469, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 484], "candid": [68, 80, 93, 103, 113, 205, 230, 352, 428, 467, 468, 469, 477, 484], "lambda": [68, 87, 102, 103, 108, 122, 126, 133, 144, 147, 160, 167, 181, 190, 226, 235, 255, 261, 283, 299, 318, 340, 344, 358, 364, 367, 385, 388, 389, 390, 399, 420, 427, 428, 431, 433, 435, 442, 445, 462, 463, 464, 466, 467, 468, 470, 471, 477, 478, 482, 483], "templat": [68, 73, 85, 96, 101, 160, 201, 267, 319, 344, 345, 368, 384, 445, 446, 464, 466, 468, 469, 473, 475, 476, 479, 480, 483], "histori": [68, 80, 102, 109, 140, 155, 183, 247, 271, 297, 334, 363, 365, 424, 445, 455, 477, 478, 479, 483], "openbsd": [68, 115, 223, 278, 293, 337, 365, 366, 458, 478, 480, 483], "webassembl": [68, 123, 151, 163, 166, 173, 210, 223, 229, 242, 245, 248, 278, 283, 287, 288, 293, 305, 328, 329, 333, 335, 337, 338, 339, 341, 348, 352, 359, 365, 395, 399, 403, 419, 420, 425, 458, 473, 483], "linker": [68, 72, 77, 176, 458, 473, 483], "cross": [68, 72, 76, 102, 141, 183, 212, 244, 247, 293, 299, 337, 358, 410, 425, 426, 435, 458, 459, 462, 463, 464, 465, 468, 469, 471, 475, 476, 477, 478, 479, 481, 483], "max_path": [68, 458, 479, 483], "nuget": [68, 458, 480, 483], "embedd": [68, 244, 283, 458, 481, 483], "bundl": [68, 85, 169, 201, 207, 223, 248, 305, 341, 368, 369, 421, 456, 458, 459, 465, 469, 474, 475, 477, 478, 480, 483], "excursus": [68, 448, 458], "shebang": [68, 167, 399, 421, 448, 458, 460, 476, 479, 483], "ini": [68, 217, 331, 458, 475, 483], "dri": [68, 284, 292, 458], "pywin32": [68, 85, 458, 483], "cx_freez": [68, 85, 283, 458], "gui": [68, 83, 85, 95, 109, 247, 292, 340, 342, 352, 368, 369, 388, 439, 458, 468, 476, 483], "ide": [68, 80, 85, 87, 357, 386, 436, 451, 458, 461, 462, 464], "lexic": [68, 222, 240, 254, 255, 296, 357, 378, 415, 428, 430, 433, 434, 480, 483], "blank": [68, 84, 85, 95, 120, 151, 155, 167, 175, 177, 186, 190, 193, 196, 205, 207, 208, 242, 245, 247, 268, 297, 334, 341, 344, 354, 384, 394, 413, 436, 466, 478, 480, 483], "indent": [68, 98, 106, 112, 120, 122, 167, 169, 193, 204, 213, 255, 262, 307, 321, 364, 367, 368, 375, 377, 378, 411, 413, 427, 431, 447, 462, 472, 474, 475, 476, 477, 482, 483], "imaginari": [68, 183, 344, 345, 352, 384, 427, 428, 430, 468, 469, 475], "bodi": [68, 84, 85, 110, 112, 122, 135, 136, 139, 143, 169, 183, 189, 191, 195, 196, 197, 199, 200, 201, 205, 207, 208, 225, 240, 242, 245, 248, 255, 271, 272, 288, 333, 335, 340, 344, 362, 386, 388, 390, 393, 395, 402, 413, 427, 429, 430, 431, 436, 466, 467, 468, 474, 475, 476, 477, 478, 479, 480, 481, 483], "versus": [68, 183, 193, 250, 253, 267, 430, 475, 481, 483], "consider": [68, 73, 85, 100, 101, 118, 126, 164, 177, 181, 193, 223, 242, 248, 256, 271, 285, 288, 305, 335, 340, 395, 410, 433, 462, 465, 466, 467, 469, 474, 476, 480, 483], "arithmet": [68, 183, 213, 221, 225, 254, 256, 275, 290, 319, 344, 352, 419, 425, 427, 428, 431, 433, 451, 465, 466, 467, 475, 476, 478, 481, 483], "power": [68, 85, 89, 93, 94, 141, 167, 173, 176, 186, 225, 235, 261, 290, 292, 293, 297, 299, 319, 337, 344, 353, 358, 384, 413, 426, 427, 431, 433, 449, 465, 466, 468, 469, 470, 475, 476, 481, 483], "membership": [68, 92, 94, 99, 151, 178, 233, 293, 344, 428, 442, 466, 475, 483], "preced": [68, 93, 101, 102, 103, 106, 153, 167, 178, 183, 187, 190, 191, 193, 194, 202, 207, 226, 247, 255, 266, 267, 268, 276, 303, 308, 319, 334, 337, 340, 344, 345, 347, 348, 352, 353, 366, 369, 376, 384, 400, 410, 413, 419, 420, 422, 427, 428, 429, 431, 433, 434, 435, 436, 440, 455, 456, 461, 463, 464, 476, 480, 483], "nonloc": [68, 85, 87, 122, 160, 225, 255, 351, 427, 429, 431, 433, 435, 440, 441, 470, 479, 483], "overview": [68, 74, 99, 109, 259, 280, 288, 292, 307, 308, 315, 461, 462, 463, 464, 465, 467, 468, 469, 470, 474, 475, 478, 480], "irrefut": 68, "scanf": [68, 363], "phonebook": [68, 363], "mung": [68, 363], "adverb": [68, 363], "sequencematch": [68, 363, 463, 467, 468, 477, 483], "ndiff": [68, 193, 363, 463, 464], "stringprep": [68, 158, 254, 363, 465], "internet": [68, 99, 110, 143, 194, 235, 240, 243, 247, 254, 272, 335, 337, 338, 341, 362, 363, 366, 394, 395, 426, 441, 461, 462, 463, 465, 472, 475, 477, 483], "gnu": [68, 72, 98, 228, 234, 246, 254, 266, 292, 293, 298, 330, 332, 358, 363, 426, 428, 435, 438, 447, 448, 455, 456, 460, 462, 465, 466, 468, 469, 474, 478, 480, 481, 483], "stateless": [68, 141, 145, 147], "streamreaderwrit": [68, 145], "streamrecod": [68, 109, 145, 483], "idna": [68, 145, 203, 387, 394, 465, 483], "internation": [68, 89, 109, 145, 194, 246, 254, 282, 285, 335, 341, 346, 366, 435, 462, 465, 466, 478, 480, 483], "codepag": [68, 120, 145, 352, 474, 483], "utf_8_sig": [68, 145], "strftime": [68, 101, 102, 139, 182, 266, 267, 269, 271, 366, 419, 451, 452, 465, 467, 468, 475, 476, 479, 483], "strptime": [68, 182, 267, 366, 419, 464, 465, 467, 475, 483], "iana": [68, 182, 183, 241, 254, 259, 276, 314, 341, 411, 413, 482, 483], "chainmap": [68, 182, 344, 386, 474, 476, 477, 480, 483], "dequ": [68, 182, 261, 316, 344, 386, 402, 427, 430, 442, 452, 466, 467, 468, 469, 473, 475, 478, 479, 483], "defaultdict": [68, 87, 182, 344, 386, 467, 475, 483], "ordereddict": [68, 87, 167, 175, 182, 255, 344, 386, 469, 471, 473, 475, 478, 479, 481, 482, 483], "userdict": [68, 182, 463, 465, 468, 483], "userlist": [68, 182, 464, 483], "userstr": [68, 182, 462, 478, 482, 483], "recip": [68, 85, 94, 102, 110, 147, 160, 182, 190, 200, 224, 250, 275, 290, 293, 298, 315, 330, 344, 352, 413, 454, 474, 475, 483], "deep": [68, 102, 182, 250, 254, 299, 307, 331, 352, 358, 410, 483], "pretti": [68, 76, 92, 103, 109, 122, 167, 182, 185, 190, 250, 254, 255, 262, 269, 292, 297, 308, 378, 411, 413, 419, 430, 462, 463, 464, 467, 468, 470, 482, 483], "printer": [68, 106, 182, 247, 254, 369, 378, 405], "prettyprint": [68, 182, 477, 483], "__dunder__": [68, 182], "_sunder_": [68, 182], "graph": [68, 103, 182, 254, 268, 292, 299, 353, 384, 464, 477, 482, 483], "logarithm": [68, 186, 290, 295, 344, 465, 468, 471, 475, 476], "trigonometr": [68, 290, 466], "angular": [68, 290, 434], "hyperbol": [68, 190, 290, 468], "off": [68, 84, 92, 95, 101, 102, 106, 110, 112, 120, 155, 167, 176, 177, 183, 190, 191, 200, 208, 209, 216, 225, 232, 243, 247, 261, 267, 268, 269, 275, 290, 292, 301, 305, 308, 315, 331, 335, 344, 361, 362, 366, 376, 384, 388, 395, 420, 428, 432, 435, 436, 448, 455, 462, 463, 464, 465, 466, 467, 468, 470, 475, 477, 478, 479, 481, 482, 483], "ration": [68, 183, 186, 254, 289, 290, 344, 428, 468, 469, 470, 475, 483], "reproduc": [68, 85, 110, 201, 234, 290, 348, 362, 395, 417, 426, 456, 475, 480, 481, 483], "spread": [68, 290, 369, 468], "normaldist": [68, 290, 481, 483], "mont": [68, 290], "carlo": [68, 290, 473], "bayesian": [68, 290], "classifi": [68, 251, 290, 307, 465, 469, 483], "kernel": [68, 92, 115, 126, 132, 257, 261, 278, 290, 293, 328, 332, 333, 337, 341, 352, 355, 365, 462, 467, 472, 476, 477, 479, 481, 483], "densiti": [68, 290], "dircmp": [68, 219, 462, 467, 477, 483], "fnmatch": [68, 219, 231, 254, 296, 348, 382, 388, 483], "copytre": [68, 84, 142, 219, 468, 469, 475, 481, 483], "rmtree": [68, 84, 142, 219, 293, 296, 362, 402, 473, 474, 476, 480, 481, 483], "base_dir": [68, 142, 219], "persist": [68, 184, 241, 245, 247, 254, 268, 269, 274, 281, 320, 426, 475, 477, 483], "unpickl": [68, 76, 94, 102, 183, 267, 269, 283, 284, 298, 300, 425, 465, 468, 469, 471, 483], "dispatch": [68, 78, 84, 85, 87, 101, 102, 144, 155, 177, 197, 226, 245, 298, 308, 321, 388, 419, 471, 473, 475, 477, 481, 483], "copyreg": [68, 171, 254, 279, 298, 299, 470, 483], "ndbm": [68, 298, 330, 428, 456, 481, 483], "dumb": [68, 298, 359, 478, 479, 480, 481, 483], "sqlite": [68, 254, 298, 443, 451, 456, 467, 469, 472, 473, 474, 475, 476, 477, 480, 483], "connect": [68, 92, 93, 99, 102, 107, 110, 118, 124, 136, 142, 151, 160, 164, 169, 207, 212, 213, 223, 241, 242, 243, 245, 247, 248, 266, 267, 269, 288, 292, 293, 298, 299, 305, 309, 327, 328, 332, 333, 335, 338, 341, 347, 348, 352, 359, 362, 365, 369, 375, 384, 386, 390, 395, 397, 405, 411, 414, 416, 419, 426, 430, 449, 455, 456, 461, 462, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483], "cursor": [68, 92, 155, 160, 175, 177, 247, 298, 299, 320, 369, 375, 376, 390, 467, 468, 471, 475, 479, 481, 482, 483], "blob": [68, 298, 341, 390, 473, 483], "prepareprotocol": [68, 298, 483], "guid": [68, 70, 74, 80, 91, 92, 100, 109, 111, 183, 186, 190, 225, 251, 293, 295, 298, 399, 453, 456, 459, 460, 468, 469, 474, 475, 477, 483], "placehold": [68, 93, 102, 191, 230, 236, 267, 269, 298, 321, 345, 358, 364, 394, 399, 405, 436, 452, 467, 473, 474, 475, 477, 480, 483], "sql": [68, 95, 109, 175, 261, 281, 292, 298, 386, 451, 467, 471, 473, 476, 483], "uri": [68, 102, 110, 242, 243, 296, 298, 314, 341, 384, 394, 395, 407, 410, 413, 415, 416, 418, 419, 472, 474, 476, 477, 483], "transact": [68, 95, 242, 243, 281, 298, 318, 365, 465, 467, 468, 474, 475, 478, 479, 483], "autocommit": [68, 298, 474, 483], "isolation_level": [68, 298, 483], "bzip2": [68, 119, 218, 254, 332, 358, 422, 473, 475, 476, 483], "shot": [68, 119, 169, 328, 480], "decompress": [68, 119, 149, 158, 218, 234, 409, 424, 451, 467, 475, 476, 478, 479, 483], "pyzipfil": [68, 119, 477], "zipinfo": [68, 119, 468, 479, 483], "pitfal": [68, 106, 119, 473, 483], "tar": [68, 80, 119, 254, 276, 292, 296, 332, 399, 426, 453, 460, 462, 465, 466, 467, 468, 469, 472, 473, 474, 475, 481, 482, 483], "tarinfo": [68, 119, 469, 475], "dialect": [68, 217, 340, 465, 467, 475, 483], "interpol": [68, 217, 343, 344, 430, 446, 475, 478, 479, 483], "rawconfigpars": [68, 217, 268, 469, 473, 477, 483], "tomllib": [68, 167, 217, 254, 473, 483], "toml": [68, 76, 167, 217, 254, 258, 472, 473, 483], "netrc": [68, 217, 223, 254, 288, 464, 477, 478, 483], "plist": [68, 217, 254, 272, 459, 468, 477, 480, 481, 483], "digest": [68, 174, 196, 204, 205, 237, 254, 283, 305, 341, 395, 467, 469, 470, 475, 476, 477, 480, 481, 482, 483], "shake": [68, 174, 456, 473, 479, 482, 483], "blake2": [68, 174, 456, 473, 479, 482, 483], "person": [68, 93, 95, 174, 225, 247, 340, 341, 343, 355, 426, 461, 462, 464, 468], "credit": [68, 86, 123, 168, 174, 247, 261, 352, 427, 448, 450, 481, 483], "reentranc": [68, 118, 169, 316, 483], "clock": [68, 85, 118, 126, 131, 139, 183, 308, 322, 384, 468, 476, 478, 479, 480, 481, 483], "add_argu": [68, 89, 102, 118, 160, 190, 200, 228, 309, 399, 451, 469, 475, 483], "argumentpars": [68, 89, 102, 118, 160, 190, 200, 228, 309, 399, 451, 469, 474, 475, 478, 480, 483], "prog": [68, 89, 102, 118, 292, 319, 399, 451, 475], "epilog": [68, 118, 205, 292, 467, 475], "formatter_class": [68, 102, 118], "prefix_char": [68, 118], "fromfile_prefix_char": [68, 118, 474, 483], "argument_default": [68, 118], "allow_abbrev": [68, 118, 478, 483], "conflict_handl": [68, 118, 292], "add_help": [68, 118], "exit_on_error": [68, 118, 483], "metavar": [68, 102, 118, 200, 292, 399, 469, 474, 475, 483], "parse_arg": [68, 89, 102, 118, 160, 190, 200, 228, 292, 309, 399, 451, 465, 469, 475], "abbrevi": [68, 109, 118, 177, 183, 186, 266, 292, 297, 308, 348, 366, 381, 413, 455, 477, 478, 479, 483], "filetyp": [68, 118, 189, 336, 469, 477, 483], "intermix": [68, 118, 228, 480, 483], "upgrad": [68, 110, 111, 118, 136, 210, 242, 247, 399, 453, 456, 461, 464, 465, 469, 475, 477, 479, 480, 481, 483], "getopt": [68, 89, 118, 190, 254, 292, 465, 469, 483], "logger": [68, 118, 125, 169, 268, 269, 283, 332, 356, 386, 388, 465, 469, 471, 475, 476, 477, 478, 480, 481, 482, 483], "logrecord": [68, 101, 118, 269, 388, 465, 477, 483], "loggeradapt": [68, 118, 469, 483], "schema": [68, 93, 118, 281, 340, 469, 483], "queuehandl": [68, 101, 118, 483], "queuelisten": [68, 118, 478, 483], "streamhandl": [68, 101, 102, 118, 267, 268, 475, 480, 483], "filehandl": [68, 101, 102, 110, 118, 256, 267, 268, 468, 483], "nullhandl": [68, 101, 118, 471], "watchedfilehandl": [68, 101, 118, 468, 479], "baserotatinghandl": [68, 101, 118, 466], "rotatingfilehandl": [68, 101, 102, 118, 268, 466, 468, 469], "timedrotatingfilehandl": [68, 101, 118, 466, 468, 477, 483], "sockethandl": [68, 101, 102, 118, 268, 473, 477], "datagramhandl": [68, 101, 118, 268, 477], "sysloghandl": [68, 101, 118, 268, 356, 469, 473, 476, 483], "nteventloghandl": [68, 101, 118, 268], "smtphandler": [68, 101, 102, 118, 268, 483], "memoryhandl": [68, 101, 102, 118, 268, 483], "httphandler": [68, 101, 102, 110, 118, 256, 268, 478, 483], "getpass": [68, 118, 173, 248, 254, 282, 293, 305, 359, 361, 468, 483], "textpad": [68, 92, 118, 254, 468, 483], "textbox": [68, 92, 118, 468, 483], "panel": [68, 83, 118, 177, 254, 406, 463, 483], "foreign": [68, 118, 167, 254, 332, 340, 358, 483], "rlock": [68, 164, 169, 283, 468, 472, 475, 478, 483], "semaphor": [68, 84, 98, 115, 124, 164, 212, 283, 293, 352, 362, 452, 468, 475, 476, 481, 482, 483], "timer": [68, 92, 96, 98, 164, 185, 212, 214, 283, 328, 333, 366, 367, 369, 376, 384, 451, 464, 465, 468, 476, 478, 479, 480, 483], "barrier": [68, 124, 164, 283, 384, 473, 475, 483], "exchang": [68, 72, 126, 164, 176, 212, 235, 278, 293, 341, 347, 358, 365, 468, 469, 475, 476, 483], "synchron": [68, 115, 123, 139, 164, 169, 178, 184, 186, 212, 226, 250, 258, 278, 293, 330, 333, 338, 341, 362, 365, 369, 428, 452, 468, 474, 475, 478, 480, 483], "pool": [68, 73, 84, 124, 130, 164, 166, 223, 261, 284, 293, 318, 463, 465, 468, 469, 475, 476, 477, 479, 483], "worker": [68, 102, 134, 163, 164, 166, 232, 316, 365, 467, 468, 469, 478, 482, 483], "pipe": [68, 87, 102, 106, 107, 125, 130, 131, 133, 137, 164, 190, 208, 212, 213, 215, 254, 258, 293, 328, 329, 332, 333, 342, 348, 350, 352, 358, 362, 399, 455, 466, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 483], "primit": [68, 75, 84, 85, 115, 123, 124, 136, 164, 176, 177, 187, 258, 299, 308, 319, 328, 329, 333, 341, 365, 452, 472, 476, 477, 480, 483], "sharedctyp": [68, 164, 478, 483], "remot": [68, 96, 101, 102, 121, 126, 133, 164, 170, 212, 242, 245, 248, 266, 267, 268, 269, 337, 341, 355, 359, 375, 395, 403, 405, 414, 418, 419, 464, 475, 478, 479, 480, 481, 482, 483], "listen": [68, 84, 107, 126, 164, 245, 268, 269, 288, 313, 329, 335, 337, 338, 341, 362, 384, 407, 419, 465, 468, 469, 477, 478, 483], "authent": [68, 164, 223, 235, 241, 248, 267, 269, 286, 288, 305, 335, 341, 395, 419, 424, 464, 469, 475, 476, 477, 478, 479, 480, 481, 482, 483], "guidelin": [68, 75, 100, 164, 247, 362, 462, 463, 467, 483], "spawn": [68, 102, 124, 130, 132, 137, 138, 142, 164, 166, 257, 293, 309, 338, 362, 365, 474, 477, 481, 482, 483], "forkserv": [68, 164, 474, 477, 483], "shared_memori": [68, 164, 254, 352, 481, 483], "executor": [68, 102, 125, 126, 135, 164, 475, 478, 482, 483], "threadpoolexecutor": [68, 84, 125, 126, 164, 283, 365, 473, 475, 478, 479, 480, 481, 482, 483], "processpoolexecutor": [68, 84, 125, 126, 164, 283, 365, 475, 478, 480, 481, 482, 483], "sh": [68, 84, 102, 164, 301, 309, 331, 456, 462, 483], "pipelin": [68, 164, 254, 350, 462, 483], "popen2": [68, 164, 466, 468], "popen3": [68, 164], "vfork": [68, 164, 483], "posix_spawn": [68, 142, 164, 293, 481, 483], "simplequeu": [68, 164, 269, 283, 344, 480, 482, 483], "interprocess": [68, 133, 254, 283, 337], "runner": [68, 102, 123, 124, 193, 388, 400, 466, 469, 473, 483], "keyboard": [68, 81, 86, 92, 96, 177, 247, 333, 348, 376, 384, 388, 441, 468, 483], "task": [68, 73, 85, 87, 95, 96, 100, 101, 103, 106, 108, 109, 115, 123, 125, 127, 129, 130, 134, 135, 136, 138, 167, 169, 170, 201, 207, 236, 247, 259, 267, 269, 271, 283, 293, 299, 308, 316, 322, 338, 348, 365, 388, 394, 420, 430, 452, 456, 462, 464, 468, 469, 471, 473, 474, 475, 478, 479, 480, 481, 482, 483], "cancel": [68, 124, 125, 126, 129, 134, 135, 138, 141, 151, 166, 169, 177, 178, 189, 212, 214, 281, 314, 325, 333, 365, 371, 373, 375, 376, 384, 388, 427, 430, 473, 475, 480, 481, 482, 483], "sleep": [68, 84, 95, 96, 102, 123, 124, 125, 126, 129, 133, 134, 135, 137, 138, 166, 167, 177, 257, 283, 322, 325, 333, 340, 348, 362, 366, 468, 472, 473, 476, 478, 479, 480, 481, 483], "eager": [68, 359, 427, 474, 480, 483], "shield": [68, 124, 481, 483], "timeout": [68, 96, 102, 107, 110, 115, 124, 126, 129, 134, 135, 137, 138, 166, 169, 177, 185, 223, 242, 248, 268, 269, 283, 288, 297, 305, 316, 328, 329, 333, 335, 338, 340, 341, 348, 359, 362, 365, 366, 381, 386, 395, 456, 465, 468, 469, 472, 473, 475, 476, 478, 481, 482, 483], "tcp": [68, 80, 84, 101, 102, 107, 124, 126, 130, 223, 257, 269, 283, 335, 337, 338, 341, 362, 468, 469, 479, 480, 483], "echo": [68, 89, 92, 114, 126, 130, 137, 141, 170, 177, 229, 247, 262, 282, 293, 299, 329, 331, 337, 348, 361, 383, 388, 430, 450, 468, 483], "boundedsemaphor": [68, 124, 283, 365, 476, 481, 483], "lifo": [68, 124, 160, 316, 344, 388], "tls": [68, 130, 136, 223, 242, 254, 260, 269, 293, 305, 327, 335, 337, 362, 456, 460, 464, 468, 469, 472, 473, 474, 475, 477, 478, 479, 480, 481, 483], "dns": [68, 102, 128, 130, 158, 259, 269, 337, 341, 398, 478, 483], "hello": [68, 73, 75, 79, 85, 86, 96, 102, 112, 114, 121, 129, 133, 135, 136, 137, 139, 146, 151, 176, 184, 226, 230, 235, 240, 278, 283, 288, 291, 299, 301, 304, 337, 338, 340, 341, 344, 360, 362, 364, 365, 368, 378, 388, 389, 407, 435, 440, 442, 443, 446, 461, 475, 477, 478, 481, 482, 483], "world": [68, 73, 79, 85, 92, 96, 99, 102, 114, 129, 133, 136, 139, 146, 151, 169, 176, 183, 226, 230, 235, 248, 257, 278, 283, 291, 292, 299, 301, 310, 325, 337, 338, 340, 341, 344, 360, 362, 364, 365, 368, 378, 384, 388, 389, 407, 410, 426, 435, 440, 443, 446, 470, 478, 479, 483], "call_soon": [68, 125, 129, 130, 133, 136, 386, 480, 483], "call_lat": [68, 130, 480, 483], "sigterm": [68, 133, 137, 283, 333, 348, 468, 483], "transport": [68, 123, 126, 129, 130, 136, 137, 170, 194, 198, 201, 206, 212, 335, 341, 418, 419, 464, 478, 479, 480, 483], "datagram": [68, 126, 130, 269, 338, 341, 452, 473, 483], "udp": [68, 101, 126, 130, 269, 337, 338, 362, 469, 473, 479, 480, 481, 482, 483], "subprocess_exec": [68, 126, 130, 131, 132, 137, 483], "subprocessprotocol": [68, 126], "multithread": [68, 126, 137, 139, 235, 266, 283, 348, 359, 407, 465, 474, 482, 483], "ca": [68, 92, 106, 162, 261, 395, 426, 468, 469, 477, 483], "session": [68, 85, 93, 101, 102, 126, 155, 169, 193, 213, 242, 243, 283, 293, 297, 305, 309, 320, 329, 335, 352, 395, 436, 450, 455, 461, 466, 474, 476, 477, 479, 481, 483], "cipher": [68, 133, 167, 173, 235, 456, 469, 475, 476, 478, 479, 480, 483], "poll": [68, 84, 126, 132, 137, 283, 293, 329, 333, 338, 341, 342, 348, 466, 468, 475, 476, 478, 482, 483], "edg": [68, 176, 177, 193, 201, 225, 232, 362, 364, 384, 476, 477, 483], "epol": [68, 329, 468, 477, 478, 482, 483], "kqueue": [68, 322, 329, 468, 478, 483], "kevent": 68, "multiplex": [68, 254, 260, 328, 341, 477], "sigpip": [68, 348], "madv_": 68, "map_": 68, "mime": [68, 87, 106, 143, 146, 151, 158, 196, 200, 202, 203, 204, 205, 207, 208, 245, 254, 272, 285, 352, 407, 432, 451, 464, 466, 469, 472, 475, 477, 478, 479, 480, 483], "feedpars": [68, 194, 199, 285, 466, 483], "defect": [68, 194, 196, 203, 205, 207, 208, 285, 466, 476, 480, 483], "headerregistri": [68, 194, 199, 200, 205, 208, 285, 483], "contentmanag": [68, 194, 206, 285, 477, 483], "compat32": [68, 194, 195, 198, 201, 202, 205, 206, 207, 208, 209, 285, 476, 478, 479, 483], "scratch": [68, 102, 128, 189, 194, 198, 201, 207, 285, 341, 399, 410, 476, 477, 483], "charset": [68, 151, 183, 190, 194, 196, 197, 202, 205, 206, 208, 209, 230, 248, 285, 341, 395, 407, 475, 478, 483], "complianc": [68, 186, 194, 203, 208, 285, 288, 410, 476, 477, 483], "interoper": [68, 94, 102, 126, 141, 208, 245, 259, 285, 299, 318, 341, 344, 422, 428, 446, 471, 475, 477, 483], "mbox": [68, 196, 201, 285, 467, 483], "mh": [68, 285, 467], "babyl": [68, 285], "mmdf": [68, 285, 483], "maildirmessag": [68, 285], "mboxmessag": [68, 205, 285], "mhmessag": [68, 285], "babylmessag": [68, 285], "mmdfmessag": [68, 285], "base16": [68, 254, 285, 466], "base32": [68, 254, 285, 466, 472, 483], "base85": [68, 254, 285, 477, 483], "quopri": [68, 146, 156, 158, 254, 285], "markup": [68, 217, 254, 314, 410, 419, 468, 475, 476, 483], "xhtml": [68, 110, 238, 239, 254, 273, 314, 395, 410, 411, 413, 475], "htmlparser": [68, 273, 470, 472, 476, 477, 478, 482, 483], "entiti": [68, 87, 106, 110, 238, 240, 242, 254, 268, 273, 314, 395, 409, 410, 411, 412, 414, 415, 416, 417, 426, 465, 476, 479, 480, 481, 483], "defusedxml": [68, 273], "pull": [68, 73, 183, 186, 273, 328, 384, 412, 425, 462, 466, 469, 477, 480, 483], "xpath": [68, 273, 409, 482, 483], "xinclud": [68, 273, 483], "qname": [68, 273, 410, 415, 416], "treebuild": [68, 273, 475, 481, 483], "xmlparser": [68, 273, 469, 477, 481, 483], "xmlpullpars": [68, 273, 477, 483], "domimplement": [68, 273], "node": [68, 232, 235, 236, 259, 264, 273, 293, 294, 296, 303, 337, 341, 352, 376, 377, 398, 411, 412, 413, 415, 452, 456, 462, 465, 467, 468, 469, 472, 475, 479, 480, 481, 482, 483], "nodelist": [68, 273, 411, 428], "documenttyp": [68, 273], "namednodemap": [68, 273], "cdatasect": [68, 273], "processinginstruct": [68, 273, 413, 415, 467], "minidom": [68, 254, 273, 409, 410, 412, 462, 463, 465, 479, 480, 481, 483], "pulldom": [68, 254, 273, 409, 473, 481, 483], "domeventstream": [68, 273, 473, 481, 483], "saxexcept": [68, 273], "contenthandl": [68, 273, 412, 414, 416, 417, 462], "dtdhandler": [68, 273, 416], "entityresolv": [68, 273, 416], "errorhandl": [68, 273, 414, 416, 455, 468], "lexicalhandl": [68, 273, 466, 472, 483], "saxutil": [68, 254, 273, 414], "xmlreader": [68, 254, 273, 412, 414, 415, 417, 478], "incrementalpars": [68, 273], "inputsourc": [68, 273, 414, 415, 417, 478, 483], "attributesn": [68, 273, 414, 415], "expat": [68, 254, 273, 304, 409, 413, 415, 456, 462, 463, 465, 467, 469, 475, 483], "expaterror": [68, 273, 475], "browser": [68, 95, 109, 110, 151, 152, 190, 244, 245, 247, 254, 256, 257, 264, 272, 308, 313, 352, 394, 395, 440, 456, 462, 463, 465, 466, 467, 468, 474, 475, 476, 479, 480, 483], "wsgi": [68, 254, 256, 467, 473, 475, 483], "simple_serv": [68, 256, 467, 479, 483], "url": [68, 85, 136, 142, 143, 150, 151, 166, 167, 223, 241, 242, 243, 245, 247, 251, 254, 256, 269, 276, 313, 326, 344, 362, 393, 396, 398, 399, 403, 407, 413, 416, 417, 419, 420, 426, 432, 462, 465, 466, 467, 468, 469, 472, 475, 477, 478, 479, 480, 481, 482, 483], "openerdirector": [68, 110, 256, 477], "basehandl": [68, 256, 389, 407, 483], "httpredirecthandl": [68, 110, 256], "httpcookieprocessor": [68, 243, 256, 466], "proxyhandl": [68, 110, 256, 483], "httppasswordmgr": [68, 110, 256, 483], "httppasswordmgrwithpriorauth": [68, 256, 478, 483], "abstractbasicauthhandl": [68, 256, 389, 483], "httpbasicauthhandl": [68, 110, 256], "proxybasicauthhandl": [68, 256], "abstractdigestauthhandl": [68, 256, 389, 483], "httpdigestauthhandl": [68, 256], "proxydigestauthhandl": [68, 256], "httpshandler": [68, 256, 475], "datahandl": [68, 110, 256, 477], "ftphandler": [68, 110, 256], "cacheftphandl": [68, 256, 483], "unknownhandl": [68, 110, 256], "httperrorprocessor": [68, 110, 256], "robot": [68, 254, 256, 384, 392, 462, 483], "httpconnect": [68, 256, 419, 468, 469, 475, 477, 478, 479, 480, 483], "httprespons": [68, 256, 395, 469, 476, 483], "httpmessag": [68, 110, 245, 256], "ftp_tls": [68, 256, 469, 474, 475, 476, 482, 483], "pop3": [68, 254, 256, 476, 477, 478, 482, 483], "imap4": [68, 254, 256, 305, 475, 478, 479, 481, 482, 483], "smtp": [68, 80, 84, 101, 102, 194, 200, 201, 203, 208, 254, 256, 269, 341, 451, 462, 464, 468, 475, 476, 477, 478, 482, 483], "rfc": [68, 101, 102, 106, 110, 126, 143, 146, 158, 175, 194, 195, 196, 197, 199, 200, 201, 202, 203, 205, 207, 208, 209, 223, 230, 235, 237, 241, 242, 243, 244, 245, 248, 254, 256, 259, 262, 266, 269, 271, 272, 288, 305, 317, 327, 335, 337, 341, 346, 347, 359, 366, 393, 394, 395, 407, 408, 419, 451, 462, 464, 466, 467, 468, 469, 472, 475, 476, 478, 479, 480, 481, 482, 483], "4122": [68, 254, 256, 467], "tcpserver": [68, 102, 245, 256, 267, 420, 469, 483], "udpserv": [68, 256], "mixin": [68, 94, 161, 169, 211, 256, 258, 395, 483], "cooki": [68, 110, 115, 235, 241, 254, 256, 258, 341, 365, 378, 395, 466, 468, 469, 470, 478, 480, 483], "morsel": [68, 256, 468, 478, 480, 483], "cookiejar": [68, 241, 244, 254, 256, 395, 483], "filecookiejar": [68, 256, 483], "cookiepolici": [68, 256], "defaultcookiepolici": [68, 256, 483], "rpc": [68, 80, 247, 254, 256, 262, 274, 418, 426, 464, 465, 466, 467, 468, 469, 479, 483], "serverproxi": [68, 256, 420, 478, 481, 483], "protocolerror": [68, 256], "multical": [68, 256, 420], "simplexmlrpcserv": [68, 256, 419, 464, 466, 467, 468, 469, 470], "cgixmlrpcrequesthandl": [68, 256, 466], "docxmlrpcserv": [68, 256, 465, 467, 468, 470, 483], "doccgixmlrpcrequesthandl": [68, 256], "ipv4": [68, 99, 107, 126, 245, 254, 256, 337, 341, 468, 476, 479, 480, 481, 482, 483], "ipv6": [68, 99, 126, 245, 254, 256, 337, 341, 362, 394, 456, 464, 468, 469, 471, 475, 476, 478, 481, 482, 483], "ip": [68, 80, 101, 102, 126, 147, 243, 245, 256, 267, 269, 337, 338, 341, 359, 362, 394, 395, 462, 468, 475, 476, 478, 479, 480, 481, 482, 483], "net": [68, 81, 84, 110, 183, 194, 235, 243, 256, 293, 319, 328, 424, 426, 434, 461, 462, 463, 464, 465, 466, 467, 468, 470, 476, 483], "wav": [68, 141, 206, 254, 277, 336, 406, 450], "wave_read": [68, 277], "wave_writ": [68, 277], "multilingu": [68, 246, 247, 254, 483], "servic": [68, 102, 110, 225, 246, 254, 255, 262, 267, 269, 282, 283, 293, 303, 314, 321, 328, 335, 337, 338, 341, 344, 358, 366, 409, 419, 426, 428, 455, 461, 462, 466, 469, 472, 473, 476, 480, 481, 482, 483], "nulltransl": [68, 246, 473], "gnutransl": [68, 246], "catalog": [68, 246, 462, 463, 465, 483], "tip": [68, 96, 225, 246, 247, 462, 469, 483], "turtl": [68, 155, 222, 247, 254, 369, 468, 470, 473, 474, 475, 483], "graphic": [68, 92, 109, 158, 173, 177, 222, 249, 254, 369, 375, 388, 403, 468], "pen": [68, 222], "turtlescreen": [68, 222], "screen": [68, 85, 92, 95, 98, 109, 155, 177, 179, 222, 247, 320, 348, 369, 375, 376, 378, 462, 464, 465, 468, 475, 478, 482, 483], "rawturtl": [68, 222, 474, 483], "motion": [68, 177, 222, 371], "measur": [68, 92, 93, 133, 139, 141, 186, 190, 222, 226, 299, 308, 322, 334, 338, 366, 369, 372, 382, 441, 462, 465, 466, 467, 468, 469, 474, 476, 477, 480, 481, 482, 483], "draw": [68, 92, 103, 155, 177, 222, 247, 318, 376, 468, 483], "color": [68, 87, 94, 102, 155, 160, 162, 177, 189, 211, 222, 240, 331, 368, 369, 370, 375, 376, 378, 405, 428, 441, 442, 472, 473, 475, 479, 480, 483], "anim": [68, 94, 222, 230, 376, 446, 468, 478], "explan": [68, 106, 110, 167, 183, 190, 222, 245, 266, 271, 283, 293, 297, 301, 304, 319, 337, 344, 352, 366, 369, 395, 462, 463, 464, 465, 466, 467, 468, 475, 483], "tcl": [68, 81, 247, 254, 368, 375, 376, 452, 459, 461, 462, 465, 468, 469, 472, 473, 475, 478, 479, 481, 482, 483], "architectur": [68, 272, 279, 303, 333, 347, 355, 368, 410, 421, 428, 456, 460, 461, 465, 466, 468, 476, 478, 481, 482, 483], "life": [68, 87, 105, 167, 226, 299, 340, 358, 368, 410, 422, 441, 461, 462, 468, 481, 483], "concept": [68, 92, 95, 99, 100, 101, 109, 139, 167, 186, 194, 244, 250, 258, 261, 283, 301, 309, 340, 344, 358, 365, 368, 384, 386, 390, 412, 413, 427, 432, 464, 465, 470, 476, 477, 478, 483], "handi": [68, 85, 92, 93, 94, 106, 167, 176, 190, 292, 344, 368, 462, 466], "packer": [68, 368], "coupl": [68, 75, 85, 102, 103, 120, 126, 205, 208, 209, 267, 283, 292, 333, 368, 395, 461, 477, 479, 480, 483], "colorchoos": [68, 254, 368, 369, 483], "font": [68, 102, 109, 167, 212, 247, 254, 364, 368, 369, 375, 376, 384, 472, 479, 480, 482, 483], "dialog": [68, 77, 92, 96, 247, 254, 281, 292, 362, 368, 369, 370, 373, 375, 384, 461, 477, 478, 479, 480, 481, 482, 483], "simpledialog": [68, 368, 369, 483], "filedialog": [68, 368, 369], "commondialog": [68, 368, 369, 370], "messagebox": [68, 176, 189, 254, 368, 369, 483], "scrolledtext": [68, 254, 368, 369], "scroll": [68, 92, 155, 177, 247, 254, 368, 369, 376, 483], "dnd": [68, 254, 368, 369], "drag": [68, 254, 368, 369, 375, 376, 384, 483], "scrollabl": [68, 247, 368, 375], "combobox": [68, 368, 375], "spinbox": [68, 368, 375, 480, 481, 483], "notebook": [68, 368, 375, 481, 483], "progressbar": [68, 368], "sizegrip": [68, 368], "treeview": [68, 368, 481, 483], "tix": [68, 81, 254, 368, 369, 465, 479, 483], "hierarch": [68, 101, 245, 267, 268, 368, 369, 376, 394, 412, 413, 420, 432], "listbox": [68, 368, 376, 483], "tabular": [68, 368], "geometri": [68, 368, 369, 374, 376, 483], "menu": [68, 92, 368, 369, 375, 384, 428, 461, 467, 471, 475, 479, 480, 481, 482, 483], "editor": [68, 72, 106, 109, 250, 368, 435, 457, 462, 468, 477, 478, 479, 480, 481, 483], "menus": [68, 368, 369, 483], "calltip": [68, 368, 483], "newtyp": [68, 187, 479, 483], "nomin": [68, 122, 187, 483], "timelin": [68, 187], "onlin": [68, 187, 254, 369, 384, 399, 414, 464, 468], "recogn": [68, 73, 85, 93, 99, 103, 106, 120, 155, 158, 167, 177, 187, 191, 196, 203, 218, 228, 235, 249, 250, 262, 266, 276, 282, 292, 293, 297, 299, 319, 331, 336, 345, 362, 366, 369, 377, 386, 394, 395, 416, 435, 436, 461, 462, 470, 475, 476, 477, 478, 483], "doctestfind": [68, 187, 466, 483], "doctestpars": [68, 187], "doctestrunn": [68, 187, 466], "outputcheck": [68, 187, 466], "soapbox": [68, 187], "discoveri": [68, 187, 193, 280, 335, 419, 475, 477, 478, 483], "organ": [68, 84, 95, 100, 102, 106, 187, 193, 341, 426, 432, 465, 482, 483], "subtest": [68, 187, 477, 483], "load_test": [68, 187, 193, 362, 478, 483], "fixtur": [68, 187, 469], "setupclass": [68, 187, 469, 481, 483], "teardownclass": [68, 187, 469, 483], "setupmodul": [68, 187, 469, 481, 483], "teardownmodul": [68, 187, 469, 483], "patcher": [68, 187, 390, 483], "test_prefix": [68, 187], "magicmock": [68, 187, 478, 483], "create_autospec": [68, 187, 483], "filter_dir": [68, 187], "mock_open": [68, 187, 390, 477, 483], "autospecc": [68, 187, 483], "side_effect": [68, 187, 479, 483], "return_valu": [68, 144, 187, 191, 390, 475, 477, 479, 483], "2to3": [68, 87, 187, 254, 468, 469, 470, 473, 474, 475, 483], "fixer": [68, 187, 483], "lib2to3": [68, 87, 187, 473, 474, 482, 483], "regress": [68, 78, 85, 187, 193, 254, 262, 343, 469, 477, 478, 481, 483], "socket_help": [68, 187, 254], "script_help": [68, 187, 254, 483], "bytecode_help": [68, 187, 254, 483], "threading_help": [68, 187, 254], "os_help": [68, 187, 254, 483], "import_help": [68, 187, 254, 483], "warnings_help": [68, 187, 254, 483], "introduct": [68, 76, 92, 95, 99, 120, 133, 185, 193, 259, 283, 337, 341, 462, 463, 464, 466, 477, 479, 483], "programmat": [68, 72, 167, 169, 185, 208, 266, 268, 280, 292, 299, 309, 320, 352, 378, 395, 469, 476, 477, 483], "peak": [68, 141, 185, 467, 482], "domainfilt": [68, 185, 479], "snapshot": [68, 185, 257, 342, 477], "statisticdiff": [68, 185], "envbuild": [68, 192, 477, 483], "standalon": [68, 169, 192, 193, 252, 314, 384, 388, 411, 427, 459, 468, 483], "ancillari": [68, 315, 337, 483], "stop_iter": [68, 315], "posix_us": [68, 315, 475, 483], "nt_user": [68, 315, 475], "osx_framework_us": [68, 315], "posix_hom": [68, 315, 475], "posix_prefix": [68, 315, 475, 483], "idiomat": [68, 112, 267, 315, 386, 483], "post": [68, 94, 95, 101, 102, 103, 110, 143, 151, 176, 193, 194, 241, 242, 245, 269, 288, 295, 297, 315, 341, 352, 369, 394, 395, 399, 420, 440, 456, 462, 464, 468, 474, 475, 476, 479, 480, 481, 483], "__enter__": [68, 87, 102, 191, 258, 283, 315, 333, 344, 358, 386, 388, 389, 405, 427, 428, 467, 468, 469, 473, 476, 479, 483], "reusabl": [68, 114, 315, 386, 477], "reentrant": [68, 258, 315, 316, 365, 477, 483], "atexit": [68, 78, 84, 112, 166, 254, 267, 315, 320, 402, 462, 466, 472, 483], "tracebackexcept": [68, 315, 473, 478, 483], "stacksummari": [68, 315, 473, 478, 483], "framesummari": [68, 315, 478, 483], "sitecustom": [68, 315, 354, 438, 469, 477, 483], "usercustom": [68, 315, 354, 438, 477, 483], "codeop": [68, 79, 180, 254, 483], "pkgutil": [68, 254, 280, 467, 468, 472, 473, 474, 476, 479, 480, 483], "modulefind": [68, 254, 280, 483], "runpi": [68, 114, 156, 254, 280, 382, 455, 467, 468, 469, 471, 472, 477, 483], "import_modul": [68, 85, 102, 225, 268, 280, 324, 362, 428, 432, 436, 469, 474, 476, 483], "tabnanni": [68, 86, 156, 254, 264, 462, 483], "ms": [68, 98, 158, 176, 177, 254, 292, 293, 348, 375, 461, 462, 480, 483], "msvcrt": [68, 77, 86, 142, 176, 254, 404, 468, 469, 483], "vc": [68, 176, 254, 404, 483], "hkey_": [68, 404], "sound": [68, 72, 84, 117, 141, 177, 223, 254, 295, 336, 355, 404, 450, 465, 468], "pwd": [68, 173, 223, 229, 233, 254, 293, 294, 339, 348, 391, 422, 465, 482, 483], "termio": [68, 215, 254, 383, 391, 482, 483], "tti": [68, 177, 229, 254, 258, 293, 391, 437, 438, 448, 455, 468, 483], "ioctl": [68, 121, 142, 254, 295, 337, 391, 466, 468, 479, 483], "syslog": [68, 101, 142, 254, 269, 391, 469, 474, 476, 483], "aiff": [68, 153, 206, 254, 336, 350, 450, 483], "solut": [68, 73, 84, 85, 93, 94, 95, 100, 102, 103, 106, 109, 132, 181, 186, 247, 299, 333, 338, 343, 355, 384, 426, 432, 461, 462, 464, 465, 466, 467, 468, 469, 471, 475, 481, 483], "cgitb": [68, 151, 254, 350, 473, 474, 483], "iff": [68, 190, 193, 254, 350], "mailcap": [68, 254, 350, 472, 473, 474, 483], "cab": [68, 467, 483], "precomput": [68, 147, 483], "nis": [68, 233, 254, 350, 467, 473, 474, 483], "sun": [68, 109, 141, 150, 183, 245, 249, 254, 274, 295, 343, 350, 366, 408, 426, 473, 483], "yellow": [68, 92, 94, 147, 160, 177, 254, 350, 384, 452, 466, 474], "terminolog": [68, 99, 201, 245, 366, 376, 410, 463, 464, 467, 468], "conflict": [68, 73, 102, 103, 106, 110, 120, 167, 230, 241, 352, 384, 405, 413, 426, 455, 461, 475, 477, 480, 483], "ossaudiodev": [68, 254, 350, 465, 473, 474, 478, 483], "oss": [68, 254, 348, 350, 465, 476, 483], "audio": [68, 117, 141, 153, 206, 336, 362, 406, 462, 483], "mixer": 68, "spwd": [68, 233, 254, 310, 350, 467, 473, 474, 479, 483], "shadow": [68, 85, 86, 173, 233, 254, 255, 310, 350, 358, 450, 467, 477, 482, 483], "au": [68, 206, 254, 295, 336, 341, 350, 450], "au_read": 68, "au_writ": [68, 477], "telnet": [68, 142, 170, 254, 350, 394, 468, 479, 483], "xdrlib": [68, 121, 254, 350, 473, 474, 483], "uuencod": [68, 143, 146, 158, 254, 350], "xdr": [68, 121, 254, 299, 350], "intermezzo": [68, 74], "ice": [68, 284], "setuptool": [68, 74, 76, 77, 251, 302, 307, 355, 399, 453, 461, 469, 472, 474, 477, 479, 483], "app": [68, 74, 102, 247, 269, 352, 369, 399, 407, 459, 461, 468, 469, 475, 483], "pure": [68, 74, 84, 85, 95, 100, 102, 105, 169, 176, 183, 186, 223, 225, 230, 235, 261, 296, 308, 333, 352, 355, 356, 362, 427, 428, 442, 455, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 481, 483], "caution": [68, 73, 85, 128, 190, 268, 292, 293, 296, 348, 413, 467, 483], "tss": [68, 480, 483], "arena": [68, 431, 455, 467, 482, 483], "primer": 68, "thought": [68, 95, 100, 283, 462, 464, 465, 470, 478], "technic": [68, 95, 112, 167, 183, 191, 252, 262, 292, 293, 319, 344, 400, 427, 432, 461, 462, 469, 480, 483], "super": [68, 85, 87, 94, 102, 106, 116, 120, 132, 160, 169, 181, 191, 203, 211, 213, 225, 250, 262, 283, 296, 299, 312, 322, 369, 382, 384, 390, 395, 399, 402, 428, 440, 450, 464, 468, 470, 472, 474, 477, 479, 483], "orm": 68, "gdb": [68, 79, 85, 97, 469, 483], "prerequisit": [68, 427, 470, 483], "distro": [68, 483], "bt": [68, 469, 483], "howto": [68, 85, 92, 97, 106, 120, 340, 419, 462, 469, 470, 475, 483], "intenum": [68, 211, 241, 333, 337, 341, 344, 479, 483], "strenum": [68, 211, 241, 472, 473, 483], "intflag": [68, 211, 255, 319, 341, 344, 479, 483], "_private__nam": 68, "minutia": 68, "aka": [68, 193, 355, 422, 428, 461, 480, 483], "orderedenum": 68, "duplicatefreeenum": 68, "planet": [68, 343, 467], "timeperiod": [68, 211], "enumtyp": [68, 211, 473], "provabl": [68, 461, 483], "modular": [68, 84, 101, 173, 225, 476, 481, 483], "combinator": [68, 261, 318, 471, 481], "acknowledg": [68, 103, 136, 167, 178, 358, 426], "flow": [68, 73, 95, 130, 133, 177, 178, 186, 348, 353, 359, 386, 427, 429, 430, 462, 464, 465, 467, 468, 478, 483], "destin": [68, 101, 109, 177, 189, 208, 212, 242, 267, 268, 269, 271, 278, 292, 293, 332, 337, 344, 356, 358, 399, 466, 468, 472, 473, 474, 476, 477, 481, 482, 483], "contextu": [68, 190, 267], "impart": [68, 267], "deploy": [68, 84, 101, 143, 202, 293, 348, 369, 425, 461, 475, 481, 482, 483], "gunicorn": 68, "uwsgi": [68, 348], "rotat": [68, 101, 160, 186, 269, 384, 466, 468, 469, 483], "zeromq": 68, "pynng": 68, "namer": [68, 269, 483], "elabor": [68, 106, 426, 435, 462, 465, 483], "dictconfig": [68, 101, 268, 269, 469, 475, 483], "throughout": [68, 73, 93, 101, 112, 186, 250, 434, 462, 464, 465, 467, 468, 469, 475, 478, 483], "gmt": [68, 101, 183, 209, 245, 267, 341, 366], "cli": [68, 234, 251, 340, 362, 455, 477, 480, 483], "starter": 68, "qt": [68, 459], "rfc5424": 68, "backslash": [68, 158, 159, 193, 209, 225, 247, 258, 283, 293, 319, 348, 435, 446, 465, 466, 470, 474, 479, 480, 483], "plagu": [68, 477], "metacharact": [68, 272, 319, 348, 466], "lookahead": [68, 319, 427, 431, 466], "greedi": [68, 158, 319, 359], "feedback": [68, 230, 314, 384, 413, 426, 466], "ipc": [68, 123, 130, 133, 257, 337], "undecor": [68, 102, 226, 344], "urlerror": [68, 393, 395, 468, 483], "httperror": [68, 226, 393, 395, 477, 483], "geturl": [68, 242, 394, 395, 483], "tapset": 68, "__annotations__": [68, 87, 93, 181, 191, 225, 226, 255, 386, 427, 428, 436, 441, 470, 472, 475, 477, 478, 479, 481, 482, 483], "opt": [68, 72, 167, 190, 228, 250, 292, 299, 306, 338, 432, 450, 455, 456, 465, 468, 469, 474, 475, 477, 478, 480, 483], "lossless": [68, 186, 190, 378, 428, 474, 475, 483], "c3": [68, 319, 394, 428, 465, 476], "__builtin_new": 68, "__pure_virtu": 68, "pyd": [68, 71, 84, 269, 354, 423, 467, 475, 478, 481, 483], "keypress": [68, 92, 282, 468], "l1": [68, 84, 158, 376], "psf": [68, 80, 296], "beopen": [68, 69], "cnri": [68, 462], "cwi": [68, 80, 240, 337, 394], "bsd": [68, 84, 92, 107, 133, 177, 215, 322, 328, 333, 337, 342, 366, 438, 456, 462, 464, 468, 477, 483], "mersenn": [68, 318, 465], "twister": [68, 318, 465], "uudecod": 68, "test_epol": [68, 483], "siphash24": [68, 456, 473, 483], "strtod": 68, "dtoa": [68, 456, 469, 483], "libffi": [68, 469, 473, 480, 483], "cfuhash": 68, "libmpdec": [68, 186, 456, 476, 483], "w3c": [68, 110, 240, 242, 395, 410, 411, 415, 428, 463, 472, 479, 480, 481, 482, 483], "c14n": [68, 413, 481, 483], "2001": [69, 99, 102, 209, 259, 332, 358, 366, 413, 422, 426, 463, 464, 465, 468, 475, 481, 483], "2023": [69, 102, 409, 426, 474, 483], "foundat": [69, 80, 95, 103, 169, 341, 369, 426, 461, 465, 466, 468, 476], "2000": [69, 85, 101, 150, 158, 223, 269, 284, 366, 384, 426, 441, 444, 462, 465, 468, 475, 476, 477, 483], "corpor": [69, 426], "nation": [69, 426], "research": [69, 95, 426, 483], "project": [70, 75, 76, 77, 84, 86, 91, 102, 112, 151, 167, 183, 193, 223, 230, 235, 250, 251, 261, 292, 307, 314, 386, 388, 399, 421, 422, 425, 426, 434, 456, 459, 461, 462, 465, 468, 469, 470, 473, 474, 475, 476, 477, 479, 482, 483], "pyinitu_": 71, "punycod": [71, 158, 465, 483], "hyphen": [71, 120, 158, 228, 292, 319, 364, 386, 398, 455, 461, 465, 483], "initfunc_nam": 71, "u_": 71, "newer": [71, 75, 96, 101, 117, 193, 243, 247, 257, 268, 269, 288, 293, 297, 299, 312, 314, 328, 340, 344, 366, 369, 386, 408, 422, 456, 461, 474, 477, 478, 479, 480, 481, 482, 483], "readthedoc": [71, 251, 407, 467], "en": [71, 95, 109, 110, 160, 230, 235, 240, 288, 395, 460, 461, 467, 475, 476, 483], "latest": [71, 85, 151, 183, 186, 226, 247, 253, 399, 422, 461, 467, 469, 471, 474, 475, 476, 477, 479, 483], "learn": [71, 73, 75, 77, 79, 80, 84, 87, 92, 93, 95, 96, 103, 106, 109, 151, 176, 186, 193, 247, 275, 299, 331, 340, 369, 384, 411, 464, 465, 467, 468, 469, 475, 479, 480, 483], "enrich": [72, 483], "tailor": [72, 246, 340, 344, 362, 474], "occasion": [72, 84, 102, 120, 169, 177, 186, 190, 201, 205, 230, 247, 271, 275, 292, 293, 365, 436, 462, 467, 468, 475, 483], "identif": [72, 137, 283, 346, 365, 483], "great": [72, 94, 101, 191, 243, 319, 348, 402, 462, 463, 464, 465, 467, 468, 469, 470, 474, 476, 478, 481, 483], "fprintf": [72, 73], "ctime": [72, 183, 293, 294, 342, 366, 465], "today": [72, 94, 109, 167, 183, 211, 288, 295, 340, 390, 419, 435, 451, 463, 465, 466, 468, 481], "troubl": [72, 99, 110, 461, 466], "piec": [72, 87, 95, 106, 133, 141, 146, 151, 169, 179, 190, 191, 193, 202, 243, 270, 292, 341, 358, 369, 386, 414, 429, 435, 464, 467, 477, 482, 483], "cumbersom": [72, 100, 103, 186, 369], "say": [72, 73, 75, 77, 85, 93, 99, 102, 103, 106, 109, 133, 139, 183, 193, 202, 226, 230, 243, 247, 251, 266, 267, 268, 269, 271, 283, 348, 355, 395, 413, 421, 428, 432, 434, 446, 463, 464, 465, 467, 468, 469, 473, 475, 477, 483], "cost": [72, 85, 167, 183, 188, 190, 226, 235, 243, 250, 293, 344, 367, 369, 381, 390, 422, 428, 462, 465, 468, 469, 473, 477, 483], "despit": [72, 85, 102, 103, 235, 262, 325, 348, 386, 432, 468, 483], "accommod": [72, 102, 201, 250, 369, 466, 483], "vice": [72, 84, 141, 176, 250, 267, 293, 319, 344, 376, 380, 386, 413, 468, 474, 477, 483], "versa": [72, 84, 141, 176, 250, 267, 293, 319, 344, 376, 380, 386, 413, 468, 474, 477, 483], "understood": [72, 151, 243, 268, 283, 293, 297, 331, 344, 397, 421, 426, 428, 483], "pname": 72, "pmodul": [72, 73, 483], "parg": 72, "pythonfil": 72, "atoi": [72, 266], "proceed": [72, 76, 110, 186, 195, 205, 261, 271, 283, 293, 308, 341, 365, 427, 430, 483], "subroutin": [72, 87, 95, 467], "glue": [72, 464, 466], "numarg": 72, "emb_numarg": 72, "embmethod": 72, "embmodul": 72, "pyinit_emb": 72, "recompil": [72, 79, 163, 250, 462, 465, 469, 475, 478, 479], "cflag": [72, 104, 306, 361, 456, 465, 483], "wsign": 72, "dndebug": 72, "fwrapv": 72, "wall": [72, 183, 308, 468, 474, 483], "ldflag": [72, 456, 465, 483], "x86_64": [72, 96, 355, 456, 478, 481, 483], "lpython3": [72, 481, 483], "lpthread": 72, "ldl": 72, "lutil": 72, "lm": [72, 344, 435], "welcom": [72, 92, 155, 283, 288, 384, 426, 467, 475, 483], "get_makefile_filenam": [72, 355], "get_config_var": [72, 293, 355, 425, 469, 475, 477, 483], "linkforshar": [72, 483], "xlinker": 72, "incorpor": [73, 101, 106, 186, 267, 341, 394, 413, 426, 465, 467, 468, 469, 475, 481, 483], "cffi": [73, 74, 91, 186, 483], "favorit": [73, 109, 442], "food": [73, 87, 103, 299, 446], "monti": [73, 167, 193, 225, 262, 293, 296, 340, 343, 344, 358, 422, 439, 454, 466, 468, 475], "fan": 73, "ls": [73, 89, 102, 137, 177, 331, 348, 358, 359, 478], "spammodul": 73, "spammifi": 73, "notic": [73, 76, 96, 100, 101, 102, 103, 106, 110, 112, 132, 133, 158, 167, 173, 184, 186, 202, 218, 250, 258, 269, 283, 332, 337, 340, 355, 362, 369, 384, 426, 428, 430, 461, 463, 465, 469, 475, 476, 480, 481, 483], "spam_system": 73, "sts": [73, 84, 348, 466], "saw": 73, "predefin": [73, 85, 101, 106, 112, 155, 158, 176, 177, 247, 267, 281, 345, 369, 403, 405, 428, 483], "pyerr_": 73, "fine": [73, 78, 84, 85, 100, 102, 109, 110, 167, 176, 177, 193, 201, 226, 243, 267, 292, 293, 318, 333, 341, 352, 369, 386, 395, 428, 461, 462, 463, 465, 467, 474, 483], "lost": [73, 94, 101, 102, 109, 133, 177, 183, 186, 201, 226, 247, 262, 267, 269, 283, 308, 332, 333, 335, 338, 426, 427, 444, 462, 464, 475, 476, 477, 482, 483], "pretend": [73, 107, 177, 428, 464, 481], "went": [73, 144, 213, 295, 335, 413, 462, 464, 467, 468, 482], "predeclar": 73, "cours": [73, 76, 94, 95, 101, 102, 176, 186, 193, 200, 202, 207, 235, 267, 268, 283, 292, 293, 331, 338, 341, 369, 384, 410, 419, 426, 428, 455, 462, 463, 465, 470, 475, 476, 477], "choos": [73, 75, 85, 89, 95, 102, 103, 106, 109, 120, 158, 163, 193, 205, 225, 226, 235, 245, 250, 267, 275, 292, 295, 299, 308, 318, 340, 341, 347, 352, 353, 365, 369, 375, 413, 426, 432, 461, 464, 465, 469, 475, 476, 477, 480, 483], "wise": [73, 94, 181, 186, 268, 464, 480], "couldn": [73, 106, 110, 190, 293, 333, 340, 386, 390, 423, 463, 464, 467, 469, 474, 479, 483], "satisfi": [73, 110, 181, 221, 234, 255, 258, 268, 275, 365, 428, 432, 475], "spamerror": 73, "retain": [73, 120, 167, 169, 177, 186, 190, 196, 205, 208, 213, 247, 250, 255, 261, 267, 271, 293, 331, 340, 341, 384, 394, 419, 426, 428, 430, 435, 476, 477, 479, 481, 483], "unintend": [73, 85, 186, 283, 358, 473, 483], "sampl": [73, 75, 84, 93, 94, 95, 102, 104, 106, 117, 141, 155, 175, 176, 193, 247, 279, 295, 299, 307, 308, 318, 319, 336, 343, 349, 358, 367, 376, 395, 401, 413, 427, 441, 451, 461, 463, 464, 465, 468, 469, 473, 475, 477, 479, 480, 481, 483], "going": [73, 75, 76, 79, 84, 93, 95, 96, 103, 106, 117, 126, 137, 144, 151, 186, 196, 200, 279, 292, 293, 308, 334, 341, 358, 362, 365, 407, 413, 419, 428, 461, 462, 464, 468, 483], "got": [73, 110, 126, 136, 138, 193, 267, 283, 335, 340, 386, 395, 430, 441, 449, 455, 467, 471, 474, 481, 483], "genuin": [73, 193, 215, 469, 475], "seen": [73, 75, 84, 85, 94, 95, 102, 155, 191, 230, 235, 255, 261, 269, 271, 292, 305, 331, 353, 369, 400, 402, 413, 415, 455, 465, 468, 471, 474, 477, 480, 483], "promis": [73, 94, 255, 475, 483], "spammethod": 73, "obsolet": [73, 92, 151, 213, 243, 262, 267, 314, 344, 366, 400, 403, 408, 419, 462, 463, 464, 467, 469, 474, 475, 477, 478, 479, 483], "spam_doc": 73, "pyinit_nam": 73, "satisfactorili": 73, "pyimport_inittab": [73, 483], "interven": [73, 102, 190, 193, 204, 476], "exercis": [73, 84, 101, 102, 103, 160, 187, 267, 292, 308, 362, 426, 468, 483], "substanti": [73, 243, 261, 314, 410, 426, 464, 466, 471, 475, 476, 477, 479, 483], "xxmodul": 73, "perman": [73, 110, 248, 395, 452, 461, 478, 482, 483], "rebuild": [73, 163, 475, 483], "luckili": [73, 388], "toplevel": [73, 160, 186, 225, 369, 375, 376, 413, 483], "subdirectori": [73, 76, 84, 85, 102, 163, 200, 216, 247, 250, 252, 253, 271, 293, 302, 334, 355, 380, 388, 399, 421, 422, 423, 461, 462, 463, 465, 468, 469, 478, 480, 481, 482, 483], "lx11": 73, "far": [73, 76, 85, 106, 108, 169, 183, 186, 190, 235, 243, 258, 275, 283, 292, 293, 319, 331, 332, 338, 359, 366, 375, 388, 395, 434, 462, 463, 464, 465, 466, 468, 483], "concentr": [73, 106, 110, 235, 369, 468], "imagin": [73, 106, 114, 299, 384], "fortun": [73, 76, 92, 151, 470], "dwell": 73, "somehow": [73, 283, 358, 468, 469], "wherev": [73, 79, 92, 94, 102, 106, 109, 177, 247, 369, 397, 426, 464, 467], "my_callback": [73, 75, 292], "my_set_callback": 73, "temp": [73, 283, 330, 340, 360, 411, 421, 430, 456, 461, 483], "set_callback": 73, "dispos": [73, 388, 399], "rememb": [73, 85, 92, 95, 101, 102, 106, 159, 193, 247, 261, 283, 319, 340, 362, 369, 376, 395, 402, 410, 412, 436, 441, 461, 462, 463, 467, 468, 469, 471, 475, 476], "boilerpl": [73, 76, 100, 289, 362, 432, 478, 483], "arglist": 73, "eventcod": 73, "placement": [73, 146, 369, 413, 474, 483], "overwrit": [73, 101, 102, 112, 149, 163, 177, 181, 196, 200, 205, 258, 267, 269, 270, 293, 320, 330, 344, 358, 395, 421, 422, 427, 428, 441, 461, 465, 468, 469, 471, 474, 475, 476, 477, 483], "whoop": [73, 102], "lls": 73, "ii": [73, 79, 160, 176, 341, 426, 427], "si": [73, 178, 348], "wb": [73, 87, 102, 117, 120, 149, 200, 208, 223, 234, 270, 278, 299, 309, 320, 349, 386, 397, 401, 419, 421, 422, 462, 471, 475], "100000": [73, 225, 308, 367, 382, 465], "bottom": [73, 84, 95, 96, 100, 120, 176, 177, 179, 191, 258, 267, 293, 297, 369, 376, 384, 386, 389, 428, 435, 461, 462, 464, 465, 483], "rectangl": [73, 92, 177, 181], "400": [73, 102, 110, 117, 155, 223, 241, 283, 288, 335, 369, 384, 441, 452, 472], "300": [73, 92, 102, 110, 155, 241, 247, 384, 395, 427, 452, 475, 483], "myfunct": [73, 79, 169], "2j": [73, 98, 225, 262, 483], "kwlist": [73, 76, 190, 263], "geoff": [73, 483], "philbrick": 73, "hks": 73, "keywdarg_parrot": 73, "keywd": 73, "voltag": [73, 225, 441], "stiff": [73, 441], "voom": [73, 441], "norwegian": [73, 158, 441], "blue": [73, 92, 94, 102, 106, 108, 147, 155, 160, 177, 211, 261, 318, 343, 344, 369, 376, 384, 402, 441, 442, 449, 452, 465, 466, 471, 472, 474, 475, 479, 483], "sss": [73, 75, 183], "parrot": [73, 225, 242, 307, 441, 468], "wouldn": [73, 84, 106, 267, 332, 362, 388, 427, 441, 462, 463, 464, 465, 466, 468, 483], "volt": [73, 441], "love": [73, 102, 147, 175, 244, 441, 471, 477], "keywdarg_method": 73, "skit": [73, 193], "keywdargmodul": 73, "keywdarg": 73, "pyinit_keywdarg": 73, "counterpart": [73, 102, 177, 191, 225, 261, 267, 288, 337, 344, 361, 427, 469, 471, 473, 475, 480, 483], "iii": [73, 426], "789": [73, 186, 468], "ss": [73, 109, 183, 248, 344, 366, 472, 476], "hell": 73, "forgotten": [73, 109, 125], "occupi": [73, 109, 117, 283, 322, 376, 477], "reus": [73, 76, 80, 126, 128, 138, 158, 166, 169, 176, 184, 193, 214, 226, 250, 293, 319, 337, 338, 341, 347, 358, 362, 364, 365, 402, 427, 432, 435, 467, 474, 475, 479, 480, 481, 482, 483], "unusu": [73, 92, 102, 183, 213, 250, 295, 308, 322, 348, 355, 394, 430, 479, 480, 481, 482, 483], "prematur": [73, 101, 242, 271, 470, 483], "undetect": [73, 271, 365], "modern": [73, 126, 139, 143, 177, 178, 194, 235, 258, 332, 337, 358, 369, 406, 462, 466, 468, 469, 475, 476, 479, 480, 481, 482, 483], "plenti": 73, "appar": [73, 92, 151, 333, 408, 462, 466, 483], "heavi": [73, 110, 167, 469, 476, 480, 483], "principl": [73, 85, 103, 186, 476], "somewher": [73, 84, 85, 102, 245, 247, 292, 302, 314, 344, 410, 441, 461, 468, 472], "sometim": [73, 79, 84, 85, 92, 93, 94, 95, 96, 99, 100, 102, 106, 109, 110, 112, 120, 135, 139, 151, 158, 167, 169, 176, 177, 186, 188, 190, 193, 203, 213, 225, 226, 235, 247, 255, 259, 261, 268, 271, 288, 292, 293, 299, 308, 319, 341, 342, 366, 369, 384, 386, 390, 395, 413, 428, 430, 434, 436, 462, 465, 466, 467, 468, 469, 470, 471, 475, 476, 477, 478, 479, 482, 483], "claim": [73, 190, 199, 341, 394, 426, 483], "disadvantag": [73, 76, 84, 85, 106, 132, 158, 186, 341, 464, 471], "worri": [73, 75, 92, 109, 151, 183, 194, 292, 319, 347, 388, 464, 469, 476], "reclaim": [73, 75, 250, 386, 402], "term": [73, 93, 95, 139, 177, 186, 209, 213, 221, 235, 243, 250, 262, 267, 292, 299, 308, 344, 345, 362, 366, 369, 385, 399, 402, 414, 426, 427, 431, 432, 466, 468, 469, 471, 474, 476, 477, 479, 481, 483], "nobodi": [73, 151, 235, 245, 335, 483], "owner": [73, 93, 96, 98, 102, 181, 212, 283, 293, 296, 332, 342, 358, 426, 428, 452, 479, 483], "seem": [73, 76, 79, 95, 101, 106, 120, 193, 216, 271, 279, 293, 308, 340, 430, 432, 462, 463, 464, 465, 467, 483], "popular": [73, 93, 102, 190, 193, 226, 248, 271, 347, 380, 434, 461, 475, 476, 481], "pictur": [73, 167, 200, 464, 466], "bet": 73, "therebi": [73, 85, 197, 203, 384, 477, 483], "no_bug": 73, "someon": [73, 85, 183, 335, 395, 413, 468, 469, 474, 483], "spent": [73, 139, 308, 322, 333, 467, 468], "his": [73, 84, 103, 230, 435, 462, 464, 468, 469, 477, 479, 483], "redund": [73, 270, 319, 344, 386, 424, 436, 464, 469, 483], "slowli": [73, 102], "ever": [73, 85, 93, 94, 177, 199, 201, 250, 261, 282, 283, 341, 348, 384, 386, 461, 464, 465, 467, 468, 469, 470, 477, 483], "enclos": [73, 87, 106, 160, 177, 225, 242, 248, 255, 262, 288, 297, 319, 331, 362, 365, 386, 388, 410, 427, 429, 430, 434, 435, 436, 440, 449, 463, 464, 467, 473, 474, 475, 481, 483], "__cplusplus": 73, "recent": [73, 76, 84, 85, 89, 93, 94, 95, 96, 99, 100, 102, 103, 109, 114, 120, 125, 132, 144, 151, 160, 167, 169, 176, 186, 188, 193, 211, 214, 225, 226, 234, 247, 248, 255, 259, 267, 269, 283, 284, 293, 295, 296, 297, 299, 307, 314, 319, 335, 337, 340, 341, 344, 345, 347, 348, 352, 362, 375, 381, 382, 384, 387, 388, 389, 390, 394, 400, 402, 422, 427, 428, 429, 430, 436, 440, 441, 442, 443, 446, 449, 452, 455, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "sight": [73, 141], "aix": [73, 115, 293, 306, 352, 365, 481, 482, 483], "unic": [73, 295], "wish": [73, 75, 92, 95, 101, 106, 110, 120, 146, 158, 167, 183, 193, 203, 208, 234, 250, 251, 252, 253, 259, 262, 267, 269, 271, 278, 292, 319, 335, 342, 348, 355, 376, 385, 399, 400, 402, 428, 463, 466, 467, 468, 469, 477, 483], "clash": [73, 94, 102, 176, 247, 267, 268, 271, 430, 435, 468, 478, 481, 482, 483], "publish": [73, 102, 106, 186, 190, 192, 340, 362, 420, 426, 461, 463, 469, 475, 482, 483], "degre": [73, 155, 177, 275, 344, 384, 428, 465, 481, 483], "certainti": [73, 405], "burden": [73, 469, 470, 474, 476, 478], "pyspam_system": 73, "realiti": [73, 183, 292, 337, 395, 427], "plain": [73, 85, 94, 102, 110, 126, 151, 152, 160, 173, 183, 196, 197, 200, 204, 205, 206, 213, 242, 255, 267, 293, 335, 341, 342, 346, 376, 386, 395, 407, 421, 422, 426, 427, 435, 464, 470, 475, 477, 478, 479, 483], "pyspam_api": 73, "pyspam_api_point": 73, "c_api_object": 73, "pyspam_system_num": 73, "_c_api": 73, "disappear": [73, 75, 101, 139, 384, 464, 466, 483], "bulk": [73, 186, 477], "ifndef": [73, 483], "py_spammodule_h": 73, "endif": [73, 240, 319, 456, 472, 473, 481, 482], "pyspam_system_return": 73, "pyspam_system_proto": 73, "import_spam": 73, "pyinit_cli": 73, "clientmodul": 73, "mention": [73, 75, 76, 77, 95, 99, 102, 106, 109, 167, 176, 177, 191, 193, 214, 215, 225, 262, 268, 271, 283, 292, 293, 331, 334, 338, 354, 362, 427, 428, 432, 434, 435, 436, 462, 470, 474, 476, 477, 480, 482, 483], "metaphor": [73, 250, 252, 253, 375], "cython": [74, 78, 79, 85, 91, 477, 483], "swig": [74, 79, 86], "numba": 74, "baggag": 75, "easiest": [75, 76, 79, 84, 85, 120, 186, 193, 243, 247, 292, 293], "dealt": [75, 157, 292], "newdatatype_dealloc": 75, "newdatatypeobject": 75, "obj_underlyingdatatypeptr": 75, "other_obj": 75, "unwound": [75, 267, 319, 428], "mislead": [75, 109, 152, 183, 395, 411, 464, 475, 483], "my_dealloc": [75, 100], "cbresult": 75, "err_typ": 75, "err_valu": 75, "err_traceback": 75, "textual": [75, 76, 85, 109, 120, 176, 201, 267, 288, 314, 319, 344, 358, 376, 410, 411, 430, 436, 440, 464, 479, 483], "newdatatype_repr": 75, "ified_newdatatyp": 75, "human": [75, 101, 102, 109, 117, 190, 191, 198, 230, 243, 245, 267, 288, 299, 303, 333, 335, 342, 349, 352, 377, 387, 414, 430, 453, 464, 471, 476, 477, 483], "consumpt": [75, 255, 299, 322, 332, 352, 475, 476, 483], "newdatatype_str": 75, "stringified_newdatatyp": 75, "sens": [75, 85, 94, 99, 101, 102, 103, 112, 120, 183, 186, 190, 205, 206, 226, 247, 259, 271, 283, 292, 293, 308, 333, 338, 340, 344, 352, 384, 394, 403, 426, 428, 432, 461, 470, 475, 477, 478, 480, 483], "flavor": [75, 193, 235, 261, 293, 342, 344, 427, 430, 456, 483], "newdatatype_getattr": 75, "100s": 75, "400s": 75, "newdatatype_setattr": 75, "newdatatype_richcmp": 75, "obj1": [75, 466], "obj2": [75, 466], "size1": 75, "size2": 75, "newdatatyp": 75, "unfil": [75, 430, 483], "newdatatype_hash": 75, "some_s": 75, "32767": [75, 347], "some_numb": 75, "toy": [75, 299], "newdatatype_cal": 75, "arg3": [75, 85, 98, 116], "slight": [75, 79, 85, 95, 101, 102, 110, 169, 186, 196, 215, 230, 243, 251, 258, 292, 293, 297, 307, 308, 341, 344, 384, 390, 394, 432, 436, 462, 464, 465, 466, 467, 468, 469, 475, 477, 478, 480, 482, 483], "incur": [75, 186, 261, 426, 475], "trivialtyp": 75, "breviti": [75, 292], "trivial_dealloc": 75, "trivialobject": 75, "tp_": 75, "some_object": [75, 85, 255, 389], "mytyp": [75, 292, 473], "myth": 75, "download": [75, 80, 85, 96, 102, 103, 296, 307, 375, 395, 399, 453, 461, 467, 468, 469, 475, 476, 480, 481, 483], "www": [75, 79, 95, 103, 107, 109, 110, 151, 158, 162, 166, 169, 183, 184, 200, 235, 240, 242, 243, 261, 314, 318, 319, 340, 341, 344, 352, 387, 394, 395, 396, 403, 411, 413, 424, 426, 435, 445, 454, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 475, 476, 478, 480, 483], "gentl": [76, 93, 99, 120, 464], "cover": [76, 85, 92, 94, 100, 101, 102, 106, 109, 133, 169, 191, 193, 194, 208, 243, 268, 283, 292, 319, 335, 337, 344, 348, 369, 380, 384, 386, 388, 394, 410, 427, 434, 455, 462, 463, 464, 467, 470, 474, 476, 477, 483], "customobject": 76, "customtyp": 76, "custommodul": 76, "pyinit_custom": 76, "hope": [76, 99, 102, 103, 213, 329, 386, 461, 462, 463, 476, 477, 479, 481], "familiar": [76, 92, 95, 96, 99, 102, 106, 157, 194, 228, 293, 340, 432, 463, 464, 465, 468, 483], "wari": [76, 354], "accid": [76, 120, 468, 469, 470, 481, 483], "ob_fval": 76, "pick": [76, 85, 102, 110, 141, 160, 245, 251, 275, 292, 297, 382, 388, 421, 462, 467, 483], "us": [76, 94, 95, 158, 161, 178, 183, 195, 196, 202, 206, 209, 223, 266, 284, 299, 318, 319, 332, 341, 366, 386, 390, 394, 395, 407, 413, 426, 428, 460, 461, 467, 483], "mycustom": 76, "backend": [76, 158, 177, 184, 340, 352, 362, 390, 456], "build_meta": 76, "pyproject": [76, 379, 483], "ext_modul": [76, 462], "fire": [76, 102, 120, 139, 333, 474, 483], "uninterest": [76, 190], "custom2": 76, "custom_dealloc": 76, "custom_new": 76, "custom_init": 76, "ooi": 76, "custom_memb": 76, "custom_nam": 76, "custom_method": 76, "pyinit_custom2": 76, "midway": 76, "polymorph": [76, 87, 417], "oppos": [76, 92, 106, 126, 157, 201, 208, 247, 337, 395, 432, 468, 478, 483], "ourselv": [76, 94, 386, 483], "anyon": [76, 341, 355, 362, 426, 463, 469, 477], "tempt": [76, 102, 106], "riski": [76, 193, 483], "paranoid": 76, "uui": 76, "custom_getfirst": 76, "custom_setfirst": 76, "custom_getlast": 76, "custom_setlast": 76, "custom_getsett": 76, "custom3": 76, "pyinit_custom3": 76, "aren": [76, 84, 85, 92, 93, 94, 95, 99, 106, 109, 112, 139, 167, 176, 201, 217, 255, 259, 268, 269, 292, 338, 341, 347, 352, 369, 377, 390, 419, 462, 463, 464, 465, 466, 467, 468, 469, 476, 477, 483], "did": [76, 84, 85, 102, 106, 110, 139, 167, 191, 193, 202, 243, 245, 283, 284, 292, 293, 314, 319, 329, 341, 348, 352, 365, 382, 383, 388, 415, 422, 428, 431, 442, 462, 463, 464, 472, 474, 475, 476, 477, 480, 481, 483], "unneed": [76, 411, 469, 477, 482, 483], "some_attribut": [76, 389], "custom_travers": 76, "custom_clear": 76, "custom4": 76, "pyinit_custom4": 76, "subobject": [76, 85], "vret": 76, "autom": [76, 84, 288, 365, 463, 469, 477, 481, 483], "nevertheless": [76, 102, 103, 139, 158, 197, 292, 358, 413, 470], "prone": [76, 103, 151, 183, 193, 299, 308, 344, 474, 478, 483], "micro": [76, 85, 352, 462, 469, 471, 480, 483], "expens": [76, 85, 101, 181, 188, 190, 226, 266, 289, 308, 332, 338, 341, 352, 432, 455, 466, 474, 476, 477, 479, 480, 481, 483], "robust": [76, 139, 151, 184, 255, 308, 333, 402, 469, 475, 477, 478, 483], "reimplement": [76, 388, 464, 477, 478, 479, 480, 483], "difficult": [76, 84, 92, 95, 101, 103, 106, 109, 120, 268, 299, 395, 413, 462, 463, 464, 465, 466, 469, 475, 481, 483], "sublist": [76, 375, 462, 475], "sublistobject": 76, "sublist_incr": 76, "sublist_method": 76, "sublist_init": 76, "sublisttyp": 76, "sublistmodul": 76, "pyinit_sublist": 76, "resembl": [76, 94, 177, 225, 243, 293, 297, 331, 455, 464, 468, 469, 481, 483], "explanatori": [77, 193, 314, 388, 483], "materi": [77, 95, 106, 177, 190, 234, 337, 341, 375, 426, 466, 469, 483], "xy": [77, 261, 334, 355, 386], "studi": [77, 85, 95, 193, 384, 413, 465, 468], "paradigm": [77, 95], "goe": [77, 93, 100, 106, 120, 133, 167, 169, 177, 178, 193, 230, 243, 247, 268, 275, 283, 292, 314, 352, 381, 386, 427, 464, 475, 476], "reassur": 77, "pythonxi": [77, 461, 481], "ni": [77, 307, 394, 446, 467], "cl": [77, 297, 468, 483], "thank": [77, 95, 100, 106, 109, 155, 200, 235, 283, 340, 362, 386, 462, 463, 464, 465, 466, 467, 468, 469, 475, 476, 479, 480, 483], "_declspec": 77, "dllexport": [77, 86], "initspam": 77, "nigetspamdata": 77, "studio": [77, 85, 456, 461, 468, 478, 483], "100k": 77, "rid": [77, 463, 483], "xx": [77, 120, 245, 293, 319, 330, 394, 461, 483], "guido": [78, 80, 85, 87, 93, 103, 190, 279, 344, 386, 426, 442, 450, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483], "van": [78, 80, 85, 87, 103, 160, 183, 423, 426, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483], "rossum": [78, 80, 85, 87, 103, 423, 426, 462, 463, 464, 465, 467, 468, 469, 470, 472, 473, 474, 477, 478, 479, 480, 481, 482, 483], "20": [78, 85, 89, 92, 93, 95, 98, 101, 102, 106, 109, 134, 139, 150, 155, 176, 181, 183, 186, 193, 209, 211, 221, 235, 236, 247, 255, 259, 261, 267, 283, 293, 296, 308, 318, 319, 321, 322, 337, 341, 343, 344, 352, 358, 366, 367, 384, 386, 394, 396, 426, 435, 440, 449, 451, 455, 456, 462, 466, 467, 468, 469, 471, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483], "30": [78, 84, 85, 92, 93, 95, 98, 101, 102, 126, 136, 150, 155, 160, 183, 186, 193, 236, 259, 261, 267, 269, 293, 316, 318, 321, 337, 343, 344, 345, 362, 365, 366, 367, 384, 423, 440, 441, 451, 452, 456, 465, 466, 467, 469, 471, 472, 473, 477, 478, 479, 480, 481, 482, 483], "19999999999999996": 78, "0011001100110011001100110011001100110011001100110011": 78, "1999999999999999555910790149937383830547332763671875": 78, "eight": [78, 109, 177, 259, 355, 369, 435, 462, 465, 466, 481, 483], "modula": [78, 80, 274, 440], "m_": 78, "baseclass": 78, "methodnam": [78, 283, 388, 419, 440, 441], "200": [78, 85, 110, 155, 177, 186, 190, 223, 241, 242, 245, 337, 341, 344, 369, 384, 388, 395, 407, 427, 446, 452, 465, 479, 481, 483], "572": [78, 427, 430, 474, 481, 483], "mail": [78, 80, 84, 95, 100, 102, 103, 105, 106, 143, 194, 195, 196, 198, 200, 202, 205, 217, 248, 269, 271, 272, 288, 293, 335, 341, 356, 388, 426, 452, 454, 462, 463, 464, 465, 466, 467, 468, 475, 478, 483], "pipermail": [78, 103, 454, 463, 465], "3000": [78, 87, 113, 385, 386, 427, 428, 468, 470], "2006": [78, 95, 183, 267, 314, 411, 413, 422, 426, 467, 482], "novemb": [78, 150, 183, 435, 483], "004643": 78, "mydict": [78, 85, 386, 466], "getvalu": [78, 79, 85, 151, 169, 196, 234, 258, 262, 299, 308, 362, 389, 416, 421, 475, 478], "elif": [78, 85, 89, 92, 95, 102, 110, 122, 183, 190, 200, 228, 250, 289, 319, 340, 342, 344, 352, 358, 427, 428, 431, 432, 435, 441, 467, 476, 483], "function_1": [78, 98], "function_2": [78, 98], "method_1": 78, "myvisitor": 78, "visit_a": 78, "method_nam": [78, 79], "visit_": [78, 122], "imit": [78, 308, 468], "fallthrough": [78, 483], "harder": [78, 85, 193, 292, 344, 390, 474, 483], "stackless": [78, 434], "nuitka": [78, 85], "jython": [78, 84, 87, 94, 303, 362, 407, 434, 449, 455, 463, 466, 468, 474, 475, 477, 483], "pypi": [78, 84, 89, 101, 151, 188, 303, 307, 341, 352, 389, 399, 409, 425, 434, 449, 454, 459, 465, 467, 469, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483], "very_long_list_of_fil": 78, "boehm": 78, "purifi": [78, 456], "pascal": [78, 80, 85, 95, 347, 440, 441, 442, 465, 469], "listdir": [78, 93, 109, 142, 200, 213, 220, 230, 245, 293, 296, 332, 342, 399, 465, 466, 469, 470, 476, 480, 483], "lisp": [78, 85, 95, 464], "539294296": 78, "1142331976": 78, "listwrapp": 78, "the_list": 78, "98767": 78, "555": 78, "el": [78, 143, 359, 394, 413, 431], "9999999": 78, "1001": [78, 158, 345], "7777777": 78, "333": [78, 85, 442, 444, 467], "mutablemap": [78, 87, 161, 167, 184, 330, 344, 386, 428, 468, 470, 476], "stub": [78, 155, 257, 258, 293, 352, 386, 389, 483], "driven": [78, 85, 169, 276, 369, 384, 388, 410, 412, 462, 475, 483], "1970": [78, 80, 147, 150, 183, 339, 366, 483], "spaghetti": 78, "mydir": 78, "delphi": 78, "21": [78, 95, 98, 102, 109, 150, 183, 186, 190, 203, 223, 226, 235, 236, 319, 341, 343, 366, 378, 382, 441, 449, 450, 455, 464, 465, 467, 468, 475, 476, 479, 481, 482, 483], "42": [78, 85, 94, 96, 101, 120, 122, 125, 129, 139, 160, 169, 170, 176, 186, 193, 225, 226, 255, 268, 283, 284, 292, 296, 297, 318, 343, 344, 345, 367, 381, 384, 386, 388, 389, 420, 427, 429, 440, 441, 446, 449, 466, 467, 468, 475, 476, 479, 481, 482, 483], "63": [78, 318, 340, 352, 483], "idea": [78, 79, 84, 85, 92, 93, 94, 100, 101, 102, 120, 183, 190, 193, 261, 266, 295, 307, 355, 376, 384, 428, 462, 464, 465, 466, 469, 470, 471, 475, 479, 483], "2016": [78, 183, 341, 446, 453, 461, 479, 480, 483], "040070": 78, "fee": [78, 225, 426], "fie": 78, "fum": [78, 225], "fiefoo": 78, "pyrex": 79, "sip": [79, 394], "cxx": [79, 355, 456, 483], "weav": 79, "pythonrun": [79, 467, 483], "al": [79, 95, 181, 337, 341, 346, 376, 468, 479, 483], "pymap": 79, "arg_format": 79, "seek": [79, 84, 85, 109, 117, 149, 153, 175, 212, 215, 218, 258, 278, 293, 299, 340, 358, 360, 362, 422, 424, 446, 462, 468, 471, 483], "print_error": [79, 475], "stringio": [79, 85, 87, 169, 196, 207, 258, 262, 308, 344, 352, 362, 389, 407, 411, 468, 469, 470, 475, 477, 478, 483], "stdoutcatch": 79, "textiobas": [79, 225, 242, 258, 360, 369, 428, 468, 469, 470, 473, 483], "attrnam": [79, 267, 410], "realiz": [79, 208, 297, 467, 468, 483], "ugli": [79, 114, 190, 369, 462, 465], "hackeri": 79, "worth": [79, 102, 117, 149, 193, 261, 268, 269, 283, 384, 434, 435, 462, 463, 464, 467, 478, 483], "gdbinit": [79, 96, 469, 483], "br": [79, 177, 435, 470, 471, 475, 476, 483], "_pyimport_loaddynamicmodul": 79, "myscript": [79, 297, 308, 438, 455], "50": [79, 84, 85, 95, 101, 102, 139, 155, 160, 183, 186, 247, 267, 279, 308, 318, 319, 337, 343, 352, 366, 367, 376, 384, 388, 390, 412, 413, 426, 449, 450, 451, 468, 469, 473, 475, 478, 479, 480, 481, 482, 483], "python2": [79, 96, 111, 112, 344, 355, 421, 461, 463, 468, 477, 483], "red": [79, 80, 92, 94, 101, 102, 106, 108, 147, 150, 160, 177, 211, 230, 240, 261, 318, 343, 344, 369, 376, 384, 402, 426, 441, 449, 452, 465, 466, 471, 472, 473, 474, 479, 483], "hat": [79, 80, 230, 426, 451], "devel": [79, 98, 288, 483], "rpm": [79, 462, 465], "debian": [79, 223, 460, 462, 463, 480, 483], "apt": [79, 96, 98, 479, 483], "tripl": [79, 87, 106, 109, 177, 190, 288, 293, 319, 328, 344, 364, 384, 427, 428, 435, 474, 483], "myreadlin": 79, "relink": 79, "linkcc": [79, 456], "bpl": 79, "amoeba": 80, "bourn": [80, 301], "1989": [80, 183, 468], "usenet": [80, 84, 101], "imap": [80, 112, 194, 248, 283, 305, 394, 465, 466, 481, 483], "bugfix": [80, 89, 462, 463, 464, 465, 467, 468, 469, 471, 474, 475, 477, 478, 479, 480, 481, 482, 483], "bn": [80, 103], "rcn": [80, 93], "0an": 80, "0bn": 80, "0rcn": 80, "a0": 80, "4a0": 80, "pdf": [80, 101, 109, 235, 318, 343, 352, 481, 483], "newsgroup": [80, 288, 466], "comp": [80, 84, 85, 101, 149, 288, 454, 463, 464, 467, 476, 477], "lang": [80, 84, 85, 101, 109, 230, 266, 340, 395, 454, 463, 464, 465, 467, 470], "communiti": [80, 85, 247, 459, 462, 463, 467, 468, 475, 480], "rss": [80, 464], "git": [80, 143, 348, 399, 477, 481, 483], "jelk": 80, "boer": 80, "283": [80, 183], "303": [80, 110, 241, 395], "wiki": [80, 81, 84, 85, 95, 96, 160, 235, 340, 341, 352, 368, 459, 466, 467, 469, 475, 476, 483], "moin": [80, 84, 459, 466], "pythonbook": 80, "bbc": [80, 166, 439, 478], "18": [80, 89, 95, 98, 109, 150, 183, 186, 193, 223, 226, 236, 296, 318, 319, 332, 341, 343, 344, 347, 352, 376, 446, 451, 465, 466, 469, 472, 473, 474, 475, 480, 481, 482, 483], "602": [80, 482], "mailman": [80, 464, 466, 473, 482, 483], "zope": [80, 426, 463, 464, 475], "googl": [80, 83, 84, 101, 110, 403, 419, 467, 468, 469, 474, 476, 481, 483], "yahoo": [80, 184, 467, 468], "lucasfilm": 80, "ltd": [80, 341, 426], "propos": [80, 87, 103, 153, 175, 226, 267, 341, 344, 348, 402, 410, 427, 430, 432, 435, 436, 462, 463, 465, 466, 467, 468, 469, 475, 479, 481, 483], "pygam": 80, "__dir__": [80, 94, 211, 225, 255, 389, 428, 468, 477, 480, 483], "__format__": [80, 183, 211, 221, 225, 259, 345, 389, 428, 435, 468, 469, 473, 476, 477, 480, 483], "__reduce__": [80, 211, 299, 389, 467, 481, 483], "__reduce_ex__": [80, 94, 299, 389, 483], "__reversed__": [80, 87, 160, 161, 211, 225, 389, 428, 479], "__sizeof__": [80, 352, 389, 468, 483], "__subclasshook__": [80, 116, 161, 483], "__": [80, 85, 102, 289, 362, 435], "emac": [80, 86, 92, 109, 155, 177, 271, 331, 435, 468], "edu": [80, 95, 395, 426, 464, 465, 483], "sig": [80, 100, 109, 111, 126, 142, 158, 235, 255, 293, 333, 378, 459, 462, 463, 465, 469, 478], "tcl_librari": 81, "tk_librari": 81, "sam": [81, 294, 426, 462, 473, 483], "sourceforg": [81, 183, 426, 462, 463, 465, 468, 483], "tkappinit": 81, "tclsam_init": 81, "libtclsam": 81, "libtksam": 81, "xt": [81, 149, 234, 270], "xtaddinput": 81, "mainloop": [81, 247, 369, 376, 384, 483], "focus": [81, 85, 100, 110, 183, 189, 208, 247, 358, 369, 376, 384, 394, 467, 469, 474, 475, 476, 477, 479, 483], "takefocus": [81, 376], "hp": [83, 466, 483], "compaq": 83, "engin": [84, 95, 99, 106, 186, 266, 319, 340, 369, 376, 413, 415, 462, 464, 466, 468, 469, 478, 483], "mathmodul": 84, "sl": [84, 284, 483], "builtin_module_nam": [84, 250, 352, 450], "chmod": [84, 102, 142, 151, 293, 296, 332, 342, 358, 438, 460, 472, 476, 483], "scriptfil": 84, "755": [84, 102], "env": [84, 102, 109, 142, 167, 200, 293, 296, 344, 348, 395, 399, 421, 438, 448, 453, 455, 460, 461, 465, 466, 473, 481, 483], "alex": [84, 465, 468, 469, 472, 473, 474, 478, 479, 481, 482, 483], "rezinski": 84, "ncurs": [84, 92, 177, 462, 463, 466, 472, 481, 483], "sysv": [84, 96, 462, 463], "colour": [84, 92, 106, 122, 462, 483], "mous": [84, 92, 177, 348, 371, 376, 384, 462, 468, 483], "ose": [84, 258, 337, 462, 480, 483], "fancier": [84, 120, 190, 466, 467, 469], "smalltalk": [84, 95, 160, 388, 440, 463], "delight": 84, "main_log": 84, "tractabl": 84, "ters": [84, 303, 384, 461], "pleasant": [84, 462, 463, 467], "fun": [84, 167, 226, 384, 386, 388, 473, 479], "flaw": [84, 464, 475, 483], "self_test": 84, "fake": [84, 292, 428, 483], "epydoc": 84, "soon": [84, 92, 106, 109, 136, 139, 193, 228, 232, 261, 283, 293, 297, 344, 362, 384, 386, 411, 427, 428, 465, 467, 474, 477, 482, 483], "thread_task": 84, "sequenti": [84, 102, 125, 163, 218, 235, 283, 299, 308, 344, 362, 428, 452, 483], "001": [84, 183, 225, 261, 271, 308, 366, 435], "guess": [84, 158, 167, 184, 193, 200, 206, 209, 245, 250, 255, 266, 276, 308, 395, 407, 434, 456, 465, 475, 483], "job": [84, 92, 101, 102, 106, 109, 120, 128, 159, 201, 207, 230, 283, 293, 299, 345, 348, 375, 395, 432, 462, 468, 475, 483], "realist": [84, 348, 411, 466, 467], "current_thread": [84, 283, 338, 365, 472, 483], "130283832797456": 84, "130283824404752": 84, "130283816012048": 84, "130283807619344": 84, "130283799226640": 84, "consult": [84, 85, 92, 95, 101, 106, 167, 176, 183, 230, 255, 267, 268, 271, 293, 295, 319, 322, 332, 335, 337, 340, 342, 352, 366, 432, 461, 462, 464, 465, 466, 467, 468, 469, 470, 474, 482, 483], "theori": [84, 319, 426, 477, 478], "account": [84, 106, 158, 160, 163, 167, 183, 186, 190, 191, 202, 209, 223, 225, 235, 244, 266, 267, 268, 286, 293, 307, 339, 347, 352, 358, 359, 362, 399, 467, 471, 475, 477, 478, 479, 481, 482, 483], "pvm": 84, "l2": [84, 158, 376], "d1": [84, 469, 482], "d2": [84, 469, 482], "mass": [84, 94, 183, 462], "mutex": [84, 115, 124, 138, 340, 352, 483], "hindranc": 84, "multiprocessor": [84, 284, 303], "insist": [84, 309, 369], "greg": [84, 462, 464, 465, 466, 467, 476, 478, 481, 483], "stein": [84, 462, 483], "adam": [84, 468, 469, 472, 474, 475, 476, 479, 480, 481, 482, 483], "olsen": [84, 468, 469], "experi": [84, 94, 95, 101, 106, 126, 176, 230, 293, 308, 369, 384, 388, 410, 461, 462, 463, 464, 468, 469, 471, 478, 481, 483], "safethread": 84, "unfortun": [84, 92, 95, 100, 102, 106, 110, 151, 158, 283, 305, 308, 330, 337, 341, 358, 369, 461, 463, 466, 468, 471, 479, 482], "exhibit": [84, 247, 258, 293, 344, 440], "sharp": [84, 158], "slower": [84, 85, 106, 158, 226, 247, 258, 270, 283, 330, 384, 465, 466, 468, 470, 474, 480, 481, 482, 483], "compens": [84, 308, 479, 483], "creativ": [84, 235, 336], "judici": [84, 181, 468], "tremend": 84, "3rd": [84, 319, 334, 386, 446, 476, 483], "rate": [84, 117, 141, 289, 295, 308, 343, 349, 396, 479, 483], "gain": [84, 102, 144, 167, 250, 258, 299, 352, 395, 432, 434, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 483], "unlink": [84, 213, 283, 284, 293, 296, 328, 360, 362, 376, 399, 410, 411, 476, 483], "rmdir": [84, 142, 293, 296, 362, 476], "mkdir": [84, 142, 200, 293, 296, 422, 451, 473, 476, 478, 483], "makedir": [84, 293, 296, 478, 480, 483], "removedir": [84, 293], "old_path": 84, "new_path": 84, "ftruncat": [84, 293, 478, 483], "copyfil": [84, 142, 332, 451, 469, 477, 481, 483], "ntfs": [84, 483], "volum": [84, 142, 160, 261, 293, 295, 422, 466, 474, 477, 483], "hfs": 84, "copy2": [84, 332, 475, 476, 478, 481, 483], "hhl": 84, "letter": [84, 92, 106, 109, 143, 158, 177, 178, 186, 190, 193, 228, 266, 267, 292, 296, 297, 301, 319, 341, 344, 345, 364, 376, 387, 394, 395, 422, 430, 435, 442, 449, 462, 464, 466, 467, 468, 469, 470, 474, 476, 478, 479, 480, 483], "homogen": [84, 344, 347, 408], "osx": [84, 176, 477, 480, 483], "ironpython": [84, 87, 94, 303, 434, 468, 483], "pyseri": 84, "mitch": 84, "chapman": [84, 466, 481, 483], "selm": 84, "34a04430": 84, "cf9": 84, "ohioe": 84, "arrang": [84, 95, 101, 102, 108, 126, 132, 133, 139, 193, 236, 255, 268, 283, 341, 365, 369, 375, 376, 483], "paul": [84, 103, 314, 461, 462, 463, 464, 465, 467, 468, 469, 473, 474, 476, 477, 478, 480, 481, 482, 483], "boddi": [84, 461], "webprogram": 84, "cameron": [84, 147], "laird": 84, "technolog": [84, 92, 426], "20210224183619": 84, "phaseit": 84, "claird": 84, "web_python": 84, "me": [84, 103, 200, 226, 240, 288, 345, 362, 453, 461, 468, 473, 474], "qs": [84, 394], "josephin": 84, "mi": [84, 149, 467, 481, 482, 483], "req": [84, 110, 341, 389, 395, 475], "urlopen": [84, 110, 166, 169, 226, 243, 307, 393, 394, 395, 451, 467, 468, 469, 475, 476, 477, 478, 483], "hdrs": [84, 393, 395], "urlencod": [84, 110, 151, 242, 269, 394, 395, 475, 478, 483], "guy": 84, "steel": [84, 483], "2c": [84, 369, 483], "sender": [84, 102, 200, 203, 208, 271, 335], "fromaddr": [84, 102, 268, 269, 335, 341], "toaddr": [84, 102, 268, 269, 335], "localhost": [84, 102, 107, 110, 200, 242, 245, 247, 268, 269, 283, 305, 313, 329, 335, 338, 359, 395, 419, 420, 451, 483], "sendmail": [84, 102, 106, 201, 208, 319, 335, 451, 475, 478], "sbin": [84, 176, 319], "einprogress": [84, 212, 213], "progress": [84, 106, 151, 193, 212, 283, 293, 331, 340, 341, 358, 375, 376, 399, 400, 461, 462, 464, 469, 483], "connect_ex": [84, 337, 462], "eisconn": [84, 212], "twist": [84, 390, 426, 483], "disk": [84, 95, 101, 109, 169, 184, 194, 200, 208, 213, 234, 243, 247, 258, 265, 267, 269, 271, 278, 281, 288, 293, 295, 298, 299, 322, 330, 332, 340, 348, 352, 358, 382, 405, 413, 422, 428, 465, 467, 468, 470, 476, 483], "gdbm": [84, 184, 456, 470, 483], "lightweight": [84, 216, 226, 340, 381, 399, 461, 462, 467, 468, 478, 479], "databaseprogram": 84, "randrang": [84, 318, 451, 466, 472, 474, 475, 483], "uniform": [84, 110, 134, 190, 255, 318, 394, 398, 419, 475, 483], "normalvari": [84, 318, 483], "sdev": 84, "shuffl": [84, 318, 319, 473, 475, 482, 483], "idle3": 85, "pythonwin": [85, 176, 461, 462], "activepython": [85, 461], "eric": [85, 92, 175, 177, 296, 324, 413, 442, 462, 463, 466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483], "pyqt": [85, 459], "scintilla": 85, "trepan3k": 85, "wing": 85, "komodo": 85, "pycharm": [85, 479], "pylint": 85, "pyflak": [85, 483], "mypi": [85, 386, 428, 473, 478, 479, 483], "pyre": 85, "pytyp": [85, 479], "pyinstal": [85, 283, 459], "pyoxid": 85, "py2app": [85, 459], "py2ex": [85, 283, 483], "foobar": [85, 120, 220, 225, 268, 292, 319, 344, 390, 483], "remind": [85, 344, 441, 470, 483], "superfici": 85, "moment": [85, 109, 183, 213, 283, 293, 432, 479, 483], "clutter": [85, 102, 475], "defeat": [85, 106, 400, 428, 483], "everywher": [85, 362, 483], "mod": [85, 102, 122, 225, 250, 279, 291, 380, 421, 431, 436, 468, 481, 483], "basi": [85, 101, 102, 158, 176, 243, 262, 267, 271, 308, 352, 353, 358, 422, 426, 432, 436, 461, 464, 465, 480, 483], "linter": [85, 122, 386], "dateutil": [85, 183, 483], "gordon": [85, 107, 462, 465, 483], "mcmillan": [85, 107, 465], "2nd": [85, 261, 319, 369, 483], "grab": [85, 101, 102, 365, 461, 483], "1st": [85, 183, 261], "techniqu": [85, 87, 95, 102, 109, 151, 161, 193, 201, 226, 293, 308, 319, 340, 354, 361, 375, 386, 432, 475, 481, 483], "gone": [85, 99, 110, 241, 462, 463, 465, 468, 470, 475, 481, 483], "bite": [85, 106, 292], "neophyt": 85, "memoiz": [85, 139, 226, 463, 479, 483], "_cach": [85, 283, 463], "matter": [85, 93, 94, 102, 109, 163, 193, 208, 247, 250, 253, 266, 292, 293, 338, 340, 344, 352, 361, 376, 386, 388, 400, 428, 431, 461, 462, 464, 466, 467, 468, 469, 477, 483], "tast": 85, "3c": [85, 369], "somevar": 85, "mistaken": [85, 440, 462, 475, 477, 483], "diagnos": [85, 96, 101, 176, 247, 267, 388], "a_list": [85, 381], "some_tupl": 85, "some_int": 85, "calle": [85, 353, 380], "se": [85, 243, 359, 369], "func1": [85, 386], "99": [85, 92, 107, 147, 176, 183, 186, 261, 266, 268, 319, 343, 344, 366, 466, 469, 470, 475], "100": [85, 92, 102, 109, 110, 117, 125, 126, 136, 147, 155, 181, 183, 186, 190, 201, 208, 214, 225, 241, 245, 261, 266, 275, 283, 284, 295, 318, 329, 337, 343, 344, 345, 358, 366, 367, 376, 384, 388, 395, 405, 407, 419, 427, 430, 441, 444, 446, 449, 450, 451, 452, 462, 465, 467, 468, 469, 472, 473, 475, 477, 478, 481, 483], "clearest": [85, 465], "changeabl": 85, "func2": 85, "func3": 85, "setattr": [85, 87, 93, 120, 181, 225, 250, 292, 402, 440, 450, 462, 483], "func4": 85, "linear": [85, 103, 132, 141, 161, 169, 190, 261, 328, 343, 344, 349, 384, 440, 465, 477, 481, 483], "tax": [85, 319, 449, 465], "10e6": 85, "exponenti": [85, 186, 269, 344, 362, 409, 430, 465, 466, 468, 483], "inc": [85, 341, 408, 426, 462, 468], "dec": [85, 86, 95, 183, 221, 223, 451, 464, 465, 483], "deepcopi": [85, 160, 171, 181, 319, 390, 424, 469, 474, 479, 480, 483], "newdict": 85, "olddict": 85, "new_l": 85, "0x16d07cc": 85, "arguabl": [85, 341], "deliber": [85, 120, 292, 305, 334, 344, 385, 388, 426, 455, 477], "benefici": [85, 102, 139, 426, 478], "on_tru": 85, "on_fals": 85, "ulf": 85, "bartelt": 85, "prime": [85, 166, 193, 208, 225, 261, 283, 344, 352, 366, 441, 451, 475, 479, 481, 483], "fibonacci": [85, 226, 441, 449, 450, 473], "mandelbrot": 85, "ru": [85, 218, 465], "iu": [85, 465], "sx": 85, "sy": 85, "yc": 85, "xc": [85, 352], "chr": [85, 109, 225, 240, 314, 387, 428, 450, 467, 469], "80": [85, 107, 136, 147, 155, 158, 167, 208, 242, 243, 247, 261, 307, 308, 332, 337, 338, 343, 384, 388, 394, 395, 452, 466, 473, 475, 478, 479, 483], "___": 85, "______": 85, "__________": 85, "_________________": 85, "axi": [85, 275, 376, 441, 472], "____________________________": 85, "sole": [85, 94, 161, 186, 255, 283, 340, 344, 364, 385, 386, 402, 426, 428, 430, 469, 476, 477, 478, 480, 483], "invari": [85, 94, 95, 186, 196, 236, 299, 386, 430, 432, 483], "div": [85, 122, 186, 240, 412, 431], "0o10": [85, 225], "0xa5": 85, "165": [85, 267, 343], "0xb2": 85, "178": 85, "ago": [85, 464, 483], "190": [85, 343, 464], "144": [85, 226, 261, 441, 449, 450, 481], "0144": 85, "0x144": 85, "rm": [85, 89, 296, 331, 483], "rf": [85, 331, 435, 483], "eras": [85, 92, 102, 177, 344, 359], "09": [85, 102, 154, 209, 267, 275, 332, 341, 448, 483], "oct": [85, 95, 102, 183, 211, 223, 225, 341, 344, 345, 352, 367, 428, 450, 464, 468, 470, 483], "fanci": [85, 92, 102, 465, 469, 483], "04d": [85, 226], "3f": [85, 160, 446, 475, 481], "assembl": [85, 95, 109, 191, 282, 340, 348, 369, 428, 434, 467, 483], "sio": 85, "yello": 85, "tounicod": [85, 121, 158], "paren": [85, 112, 122, 175, 247, 431, 467, 483], "get_input": 85, "do_foo": [85, 155], "do_bar": [85, 155], "foo_inst": 85, "do_": [85, 155, 245], "opnam": [85, 191, 362, 477], "myfunc": [85, 102, 191, 319, 420], "fname": [85, 109, 169, 190, 268, 382, 477], "rstrip": [85, 133, 136, 137, 188, 247, 284, 344, 451, 465, 483], "untermin": [85, 483], "workaround": [85, 181, 193, 284, 297, 341, 344, 402, 422, 473, 474, 476, 481, 483], "tough": 85, "dive": 85, "hot": [85, 247, 308], "spot": [85, 295, 364], "benchmark": [85, 226, 308, 455, 462, 463, 465, 466, 467, 469, 470, 471, 473, 474, 476, 477, 478, 481, 482, 483], "sophist": [85, 133, 155, 169, 186, 267, 345, 413, 464, 467], "said": [85, 92, 93, 167, 283, 427, 428, 435, 449, 463, 464, 479, 483], "toward": [85, 146, 186, 193, 196, 205, 218, 221, 222, 225, 267, 275, 344, 352, 364, 366, 384, 428, 463, 465, 467, 468, 477, 482, 483], "sprinkl": [85, 434], "moder": [85, 95, 106, 288, 292, 305, 319, 464, 465], "tend": [85, 100, 149, 190, 226, 305, 308, 471], "outweigh": 85, "detriment": 85, "confid": [85, 151, 318], "skill": [85, 384], "ineffici": [85, 258, 293, 353, 382, 474, 478, 483], "quadrat": [85, 161, 190, 211, 314, 344, 409, 469, 472, 483], "accumul": [85, 92, 95, 120, 186, 226, 261, 292, 299, 308, 318, 331, 380, 388, 463, 475, 476, 481, 483], "my_str": [85, 474], "my_bytes_object": 85, "cheap": [85, 176, 299, 483], "penultim": 85, "activest": [85, 105, 454, 459, 462, 475], "52560": 85, "reorder": [85, 94, 126, 413, 483], "mylist": [85, 181, 321, 475], "variat": [85, 93, 94, 106, 183, 193, 271, 293, 305, 348, 354, 428, 461, 467, 483], "keep_funct": 85, "keep_condit": 85, "fastest": [85, 234, 283, 319, 384, 451, 468, 475, 481], "con": [85, 340, 483], "lisp_list": 85, "analogu": [85, 283], "car": 85, "cdr": 85, "replic": [85, 95, 208, 283, 461, 466, 469, 483], "eleg": [85, 167, 466, 475], "suffic": [85, 225, 295], "exemplar": 85, "wrote": [85, 95, 338, 426, 462, 464, 466, 477, 483], "randal": [85, 108], "schwartz": [85, 108, 468], "metric": [85, 372, 483], "isort": 85, "list1": 85, "list2": 85, "embodi": [85, 207, 410], "refin": [85, 480, 483], "mboxmailbox": 85, "maildirmailbox": 85, "outlookmailbox": 85, "mere": [85, 169, 183, 193, 225, 284, 292, 333, 348, 352, 384, 426, 427, 470], "class1": [85, 389, 390, 464], "class2": [85, 389, 390, 464], "upperout": 85, "outfil": [85, 120, 140, 262, 292, 301, 380, 452, 471, 475, 483], "_outfil": 85, "redefin": [85, 144, 161, 250, 338, 428, 465, 468, 483], "trickier": [85, 292], "rough": [85, 93, 102, 109, 202, 226, 243, 252, 261, 275, 281, 283, 292, 293, 302, 344, 362, 365, 385, 428, 436, 462, 468, 469, 480, 482, 483], "incident": [85, 213, 251, 385, 426, 483], "basealia": 85, "getcount": [85, 291, 482], "rebind": [85, 227, 436, 466, 483], "tight": [85, 101, 135, 430, 434, 483], "answer": [85, 89, 93, 94, 133, 193, 226, 235, 268, 271, 308, 345, 366, 442, 446, 462, 466, 470, 483], "cout": 85, "mangl": [85, 196, 225, 321, 430, 435, 436, 440, 477, 483], "_classname__spam": [85, 440], "privaci": [85, 341], "bother": [85, 92, 102, 109, 283, 463, 464, 474], "children": [85, 101, 104, 132, 236, 267, 283, 293, 312, 314, 322, 362, 369, 376, 384, 388, 410, 411, 412, 413, 422, 462, 469, 480, 483], "vanish": [85, 158, 386], "inconveni": [85, 243, 255, 390, 413], "wors": [85, 106, 126, 183, 188, 474, 476, 477, 483], "patholog": [85, 483], "illustr": [85, 100, 101, 102, 110, 120, 139, 169, 173, 183, 193, 208, 243, 250, 268, 331, 333, 340, 344, 348, 359, 369, 388, 395, 427, 430, 466, 476], "13901272": 85, "13891296": 85, "500": [85, 102, 110, 155, 183, 186, 214, 223, 241, 288, 343, 344, 398, 407, 450, 452, 465, 467, 472, 483], "thon": [85, 449], "english": [85, 102, 109, 292, 340, 364, 366, 384, 434, 435, 469, 470, 478, 483], "_sentinel": 85, "late": [85, 92, 190, 462, 483], "firstofmonthd": 85, "namedint": 85, "xlat": 85, "ten": [85, 93, 102, 160, 177, 186, 308, 318, 343, 347, 465], "titlestr": [85, 384], "isalnum": [85, 178, 319, 344], "2012": [85, 92, 109, 223, 476, 482, 483], "blog": [85, 390, 467], "rock": [85, 109, 120], "princip": [85, 243, 341, 471, 475], "cached_properti": [85, 93, 226, 344, 474, 481, 483], "lru_cach": [85, 160, 220, 226, 261, 475, 476, 478, 481, 483], "maxsiz": [85, 93, 112, 134, 160, 220, 225, 226, 261, 283, 303, 316, 344, 352, 362, 369, 428, 450, 470, 475, 481, 483], "age": [85, 93, 108, 160, 225, 226, 243, 244, 340, 341, 343, 451, 464, 465, 466, 469, 475], "weather": 85, "govern": [85, 102, 181, 186, 194, 394, 419, 426, 475], "websit": [85, 110, 184, 395, 434, 475, 483], "station_id": 85, "_station_id": 85, "current_temperatur": 85, "longitud": [85, 345], "latitud": [85, 345], "coordin": [85, 92, 94, 102, 176, 177, 179, 183, 271, 275, 281, 340, 345, 366, 369, 376, 378, 384, 462, 468, 474, 478, 483], "station": 85, "historic_rainfal": 85, "mm": [85, 183, 248, 278, 344, 366], "rainfal": 85, "change_st": 85, "cm": [85, 139, 169, 362, 388], "__pycache__": [85, 250, 296, 311, 352, 450, 455, 473, 475, 481, 483], "middl": [85, 92, 126, 169, 199, 297, 318, 321, 364, 384, 416, 467, 469, 479, 483], "xyz": [85, 120, 267, 268, 344, 388, 475, 483], "cfile": [85, 311], "bar_var": 85, "foo_var": 85, "jim": [85, 95, 102, 308, 434, 462, 466, 468, 475, 479, 483], "roskind": [85, 308], "strang": [85, 115, 364, 394, 428, 461, 463, 467, 468], "matthia": [85, 469, 472, 474, 476, 479, 480, 481, 483], "urlich": 85, "modnam": [85, 440, 450, 467, 474, 479], "fool": [85, 462, 466], "proof": [85, 95, 203, 283, 462, 481, 483], "paradox": [85, 465], "0x7352a0": 85, "0x4198d0": 85, "yournam": 86, "v3": [86, 337, 483], "d48eceb": 86, "19": [86, 89, 95, 96, 101, 102, 106, 109, 139, 150, 160, 176, 183, 186, 193, 209, 223, 236, 261, 293, 341, 343, 344, 345, 423, 465, 466, 467, 468, 469, 472, 475, 481, 482, 483], "2017": [86, 294, 341, 435, 456, 483], "06": [86, 102, 183, 245, 267, 332, 449, 467, 479, 483], "04": [86, 89, 92, 183, 345, 347, 366, 425, 448, 467, 469, 472, 479, 480, 483], "45": [86, 95, 146, 160, 167, 186, 267, 283, 318, 337, 343, 384, 386, 465, 466, 467, 472, 481, 482, 483], "1900": [86, 183, 366, 435, 468, 475], "licens": [86, 103, 123, 168, 247, 251, 271, 307, 352, 426, 448, 450, 453, 464, 481, 483], "hellohellohello": 86, "desktop": [86, 109, 403, 459, 461], "pathext": [86, 332, 399, 461, 474, 477, 483], "mcafe": 86, "pyinit_foo": 86, "__declspec": 86, "nn": 86, "33": [86, 96, 147, 160, 176, 178, 261, 283, 284, 319, 352, 389, 444, 450, 451, 464, 465, 466, 475, 481, 482, 483], "loadlibraryex": [86, 176, 481], "getprocaddress": 86, "leo": [86, 149], "initleo": 86, "initleoc": 86, "initmyappc": 86, "myapp": [86, 102, 167, 235, 267, 369, 421, 478], "pythonnn": 86, "_resultobj": 86, "typemap": [86, 269], "wxpythonwindow": 86, "kbhit": [86, 282], "hit": [86, 92, 102, 144, 153, 176, 226, 247, 297, 341, 359, 369, 380, 467, 475, 483], "getch": [86, 92, 177, 282], "duck": [87, 344, 386, 468, 477, 483], "__aenter__": [87, 169, 191, 388, 389, 390, 427, 428, 483], "__aexit__": [87, 139, 169, 191, 388, 389, 390, 427, 428, 483], "bdfl": 87, "benevol": [87, 462], "bytesio": [87, 196, 207, 234, 235, 258, 271, 299, 344, 360, 378, 421, 425, 468, 470, 475, 478, 483], "gzipfil": [87, 234, 358, 469, 471, 472, 474, 475, 478, 482, 483], "argument1": 87, "argument2": 87, "argumentn": 87, "1j": [87, 154, 225, 262, 389, 483], "__exit__": [87, 102, 169, 191, 258, 283, 333, 344, 358, 362, 388, 389, 405, 427, 428, 467, 468, 469, 479, 483], "multidimension": [87, 344], "perl": [87, 95, 106, 108, 243, 319, 439, 444, 452, 462, 466, 467, 483], "dictview": [87, 344, 481, 483], "eafp": [87, 293], "forgiv": [87, 462, 483], "lbyl": 87, "75": [87, 92, 102, 190, 193, 283, 343, 384, 449, 451, 465, 466, 468, 469, 474, 479, 480, 481, 482, 483], "sum_two_numb": [87, 122], "_featur": [87, 113, 225], "8192": [87, 107, 223, 225, 242, 407], "81": [87, 104, 261, 283, 318, 343, 378, 442, 446, 449, 451, 481], "singledispatch": [87, 226, 473, 477, 480, 483], "443": [87, 136, 242, 341, 477], "parameter": [87, 177, 193, 340, 344, 385, 386, 428, 472, 482, 483], "483": [87, 478], "intens": [87, 177, 270, 293, 476, 483], "collat": [87, 266, 340, 473, 483], "strxfrm": [87, 108, 266], "nsmallest": [87, 108, 225, 226, 236, 466, 467], "nlargest": [87, 108, 225, 226, 236, 466, 467, 483], "groupbi": [87, 95, 226, 261, 291, 466, 471, 483], "attrgett": [87, 95, 108, 147, 291, 466, 467, 468, 475, 478, 483], "itemgett": [87, 108, 147, 261, 291, 466, 467, 478, 481, 483], "methodcal": [87, 108, 291, 468, 478, 483], "leap": [87, 101, 106, 183, 366], "04x": [87, 109], "load_modul": [87, 250, 423, 432, 465, 472, 474, 477, 479, 483], "setlocal": [87, 258, 266, 416, 452, 473, 478, 483], "new_local": 87, "cp1252": [87, 158, 448], "getencod": [87, 92, 109, 158, 175, 177, 225, 258, 266, 416, 461, 473, 483], "metapathfind": [87, 250, 251, 352, 472, 473, 476, 477, 480, 483], "organiz": [87, 341, 428], "localtim": [87, 101, 183, 203, 209, 248, 267, 366, 463, 464, 474, 476, 483], "float_info": [87, 275, 344, 450, 468, 483], "1024": [87, 109, 175, 186, 215, 235, 268, 309, 337, 338, 341, 344, 382, 435, 451, 483], "max_exp": [87, 352], "islic": [87, 95, 160, 225, 261, 467, 480, 483], "posonly1": 87, "posonly2": 87, "positional_or_keyword": [87, 255], "kw_only1": 87, "kw_only2": 87, "pathentryfind": [87, 250, 423, 432, 472, 473, 476, 477, 480], "fspath": [87, 234, 293, 296, 479, 483], "fsencod": [87, 293, 296, 352, 362, 475, 479, 483], "411": [87, 110, 241, 267, 352, 382, 483], "getrefcount": [87, 352, 450], "abracadabra": [87, 93, 160, 283, 344, 345, 442, 466], "variable_nam": 87, "checker": [87, 120, 177, 183, 193, 292, 344, 386, 427, 428, 466, 467, 472, 473, 474, 478, 479, 481, 482, 483], "0000": [87, 99, 109, 158, 183, 203, 209, 259, 344, 366, 428, 462, 475, 476, 483], "10ffff": [87, 158, 428, 476, 483], "datastream": 87, "unescap": [87, 106, 190, 238, 239, 288, 319, 394, 417, 435, 477, 482, 483], "remove_gray_shad": 87, "refactor": [87, 95, 112, 388, 390, 466, 477, 478, 479, 480, 483], "get_type_hint": [87, 386, 473, 480, 482, 483], "macintosh": [87, 158, 435, 462, 465], "splitlin": [87, 155, 190, 200, 208, 344, 364, 381, 468, 475, 477, 483], "zen": [87, 114], "larri": [88, 469, 471, 472, 476, 477, 481, 482, 483], "hast": [88, 469, 471, 472, 476, 477, 481, 482, 483], "get_annot": [88, 255, 472, 483], "un": [88, 200, 203, 255, 288, 436, 449, 477, 483], "stringiz": [88, 255, 472, 483], "ann": 88, "exot": [88, 100, 262, 464], "malform": [88, 158, 186, 199, 225, 242, 258, 271, 466, 468, 475, 483], "update_wrapp": [88, 93, 226, 255, 467, 477, 483], "__wrapped__": [88, 93, 225, 226, 255, 472, 473, 475, 477, 478, 483], "__globals__": [88, 255, 428, 470, 472, 483], "type_check": [88, 250, 292, 386, 479, 483], "fn": [88, 102, 109, 166, 200, 267, 399, 407, 421, 422, 470, 478, 481], "tshepang": 89, "mbambo": 89, "devguid": [89, 96, 477], "ctypes_configur": 89, "dotview": 89, "lib_pypi": 89, "drwxr": [89, 223], "xr": [89, 223, 332, 475], "wena": 89, "4096": [89, 107, 109, 115, 160, 173, 223, 225, 235, 337, 344, 365, 475], "feb": [89, 95, 183, 464], "51": [89, 102, 104, 318, 384, 442, 468, 472], "rwxr": [89, 332], "535": 89, "05": [89, 102, 134, 154, 183, 261, 275, 319, 341, 347, 366, 452, 467, 468, 479, 483], "rw": [89, 94, 102, 223, 295, 332, 340, 348, 475, 478, 479, 480], "741": [89, 483], "01": [89, 96, 102, 107, 146, 183, 186, 209, 225, 235, 240, 267, 332, 337, 339, 341, 344, 366, 408, 422, 425, 430, 451, 461, 463, 465, 466, 467, 475, 476, 479, 480, 483], "cftuvsux": 89, "cp": [89, 93, 158, 292, 293, 469, 478], "store_tru": [89, 120, 190, 228, 292, 309, 399, 469, 475, 483], "vv": [89, 120, 455, 471, 479, 483], "vvv": [89, 120, 395], "vvvv": 89, "nonetyp": [89, 168, 193, 226, 284, 319, 385, 386, 472, 473, 483], "greedili": 89, "add_mutually_exclusive_group": [89, 120, 483], "vq": 89, "po": [89, 230, 469, 473], "babel": [89, 230], "pybabel": [89, 230], "book": [91, 95, 106, 160, 183, 271, 319, 340, 369, 475, 483], "reader": [91, 99, 103, 106, 109, 126, 136, 149, 158, 160, 170, 175, 196, 200, 202, 205, 225, 242, 250, 253, 258, 271, 272, 283, 288, 292, 299, 333, 337, 347, 387, 399, 410, 413, 414, 415, 416, 417, 428, 434, 455, 465, 467, 470, 472, 478, 483], "py3c": 91, "opinion": [91, 462, 467], "kuchl": [92, 95, 106, 109, 177, 462, 463, 464, 465, 466, 467, 468, 469, 477], "raymond": [92, 93, 95, 108, 177, 347, 427, 462, 463, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "paint": [92, 177, 384, 464], "vt100s": [92, 177], "quirk": [92, 344, 434, 472, 477, 483], "nich": 92, "valuabl": [92, 114, 230, 337, 381, 476], "button": [92, 102, 151, 177, 189, 247, 281, 369, 375, 376, 384, 426, 461, 479, 480, 481, 483], "checkbox": [92, 151, 281, 461], "urwid": 92, "commerci": [92, 295, 426, 468], "carri": [92, 93, 101, 158, 184, 186, 191, 265, 267, 275, 283, 292, 318, 340, 344, 388, 410, 426, 429, 435, 436, 467, 468, 469, 478, 481, 483], "proprietari": 92, "unicurs": 92, "biggest": [92, 382, 470, 475, 476], "addstr": [92, 177, 483], "mvaddstr": 92, "mvwaddstr": 92, "initscr": [92, 177], "stdscr": [92, 177, 468], "noecho": [92, 177], "cbreak": [92, 177, 383, 483], "multibyt": [92, 177, 208, 344, 476, 483], "key_left": [92, 177], "keypad": [92, 177], "nocbreak": [92, 177], "endwin": [92, 177], "mess": [92, 120, 292, 464], "die": [92, 212, 328, 402, 481, 483], "buggi": [92, 462, 464, 474, 476, 477, 483], "uncaught": [92, 152, 340, 352, 365, 430, 463, 481, 483], "refresh": [92, 160, 177, 288, 369, 376, 467, 482, 483], "getkey": [92, 177, 483], "funni": [92, 141], "rectangular": [92, 384], "redraw": 92, "newwin": [92, 177], "begin_x": [92, 177], "begin_i": [92, 177], "height": [92, 177, 181, 247, 281, 293, 319, 343, 369, 376, 384, 386, 449, 467, 483], "40": [92, 93, 95, 96, 101, 155, 160, 183, 193, 247, 267, 308, 318, 319, 321, 332, 343, 366, 375, 384, 424, 441, 451, 452, 472, 477, 480, 481, 482, 483], "col": [92, 177, 247, 261, 345, 478, 483], "slow": [92, 102, 126, 184, 235, 247, 258, 261, 269, 283, 330, 338, 344, 353, 362, 384, 386, 422, 423, 462, 463, 465, 466, 468, 482, 483], "baud": [92, 483], "flurri": [92, 462], "paus": [92, 95, 133, 137, 177, 295, 297, 333, 430, 466, 467, 483], "redrawn": [92, 177, 384], "subsect": [92, 106, 126, 247, 344, 430, 483], "newpad": [92, 177], "addch": [92, 177, 483], "ord": [92, 109, 120, 122, 176, 178, 225, 340, 344, 389, 428, 430, 450, 462, 468], "26": [92, 94, 101, 104, 150, 183, 236, 259, 283, 318, 332, 341, 366, 367, 378, 394, 423, 426, 465, 466, 469, 475, 479, 481, 482, 483], "ordinari": [92, 101, 106, 151, 169, 193, 225, 234, 319, 330, 333, 340, 343, 358, 402, 413, 432, 435, 436, 462, 476, 483], "annoy": [92, 109, 151, 267, 462, 464, 465, 468, 470, 476, 481, 483], "flicker": [92, 177, 483], "noutrefresh": [92, 177], "doupdat": [92, 177, 179], "twisti": 92, "maze": 92, "subt": [92, 196, 205, 432], "waddstr": [92, 476], "hide": [92, 96, 109, 179, 193, 194, 216, 247, 258, 292, 348, 362, 376, 384, 386, 400, 427, 461, 465, 469, 474, 475, 482, 483], "boldfac": [92, 468], "underlin": [92, 177, 372, 376], "bytestr": [92, 161, 293, 337, 344, 386, 413, 424, 468, 474, 483], "acs_plminus": [92, 177], "acs_ulcorn": [92, 177], "box": [92, 102, 177, 247, 271, 369, 373, 375, 376, 386, 430, 479, 480, 481, 483], "border": [92, 177, 369, 376, 394], "flash": [92, 177, 483], "distract": [92, 292, 483], "blink": [92, 177, 481, 482, 483], "curs_set": [92, 177], "invis": [92, 158, 177, 179, 384, 469, 471, 483], "leaveok": [92, 177], "synonym": [92, 102, 103, 109, 115, 177, 292, 299, 342, 369, 410, 435, 468, 483], "video": [92, 177, 261, 272, 275, 468], "viewer": [92, 247, 269, 384, 483], "safest": [92, 176, 271, 483], "stick": [92, 109, 270, 283, 362, 376, 384, 464, 465, 468], "a_blink": [92, 177], "a_bold": [92, 177, 468], "bright": 92, "bold": [92, 150, 177, 369, 372], "a_dim": [92, 177], "a_revers": [92, 177], "a_standout": [92, 177], "a_underlin": [92, 177], "xterm": [92, 177, 483], "start_color": [92, 177], "has_color": [92, 177], "american": [92, 183], "spell": [92, 158, 183, 203, 225, 267, 308, 344, 376, 435, 436, 465, 470, 476, 483], "canadian": [92, 158], "british": 92, "resign": 92, "misspel": [92, 93, 167, 483], "sake": [92, 102, 128, 205, 236, 293, 331, 432, 465, 483], "foreground": [92, 177, 247, 376, 452], "color_pair": [92, 177, 483], "init_pair": [92, 177, 472], "wire": [92, 101, 158, 177, 267, 268, 269, 341, 346, 419, 478], "black": [92, 94, 102, 109, 147, 160, 177, 211, 247, 318, 376, 384, 452, 465, 466, 472, 473, 474, 477, 481], "green": [92, 94, 122, 160, 177, 211, 240, 318, 343, 384, 402, 441, 449, 452, 465, 466, 471, 472, 475, 479, 483], "magenta": [92, 94, 177, 452], "cyan": [92, 94, 177, 452], "color_black": [92, 177], "color_r": [92, 177], "color_whit": [92, 177], "alert": [92, 240, 269, 341, 386, 400, 480, 483], "rgb": [92, 94, 162, 177, 206, 249, 292, 369, 384, 449, 477, 483], "purpl": [92, 94, 102, 211], "unabl": [92, 95, 96, 101, 102, 110, 255, 267, 271, 293, 328, 340, 348, 352, 364, 443, 461, 467, 483], "can_change_color": [92, 177], "lucki": [92, 176], "talent": 92, "man": [92, 126, 173, 271, 293, 313, 322, 328, 333, 337, 342, 366, 369, 375, 383, 469, 483], "key_up": [92, 177], "nodelay": [92, 177], "err": [92, 177, 213, 228, 269, 314, 348, 388, 419, 426, 443, 476], "halfdelay": [92, 177], "tenth": [92, 141, 177, 209], "key_ppag": [92, 177], "key_hom": [92, 177], "printdocu": 92, "getstr": [92, 177, 281, 468, 483], "backspac": [92, 106, 177, 178, 247, 319, 435, 448, 483], "keybind": [92, 177, 247, 320], "gather": [92, 120, 124, 134, 137, 139, 177, 293, 308, 337, 380, 388, 456, 473, 478, 480, 481, 483], "editwin": 92, "struck": 92, "brows": [92, 110, 313, 376, 468, 483], "vendor": [92, 235, 303, 460, 461, 483], "acs_": 92, "submit": [92, 102, 110, 139, 151, 166, 247, 283, 426, 462, 469, 475, 478, 479, 480, 481, 483], "lengthi": [92, 95, 106, 261, 462, 463, 464, 465, 466, 475, 483], "swear": 92, "pycon": [92, 105, 109, 341, 467], "2013": [92, 102, 109, 183, 294, 341, 426, 483], "hetting": [93, 95, 108, 427, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "peopl": [93, 95, 99, 103, 109, 177, 186, 190, 193, 230, 235, 292, 413, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 476, 479, 481, 483], "curious": [93, 151, 483], "objtyp": 93, "directorys": 93, "dirnam": [93, 223, 271, 293, 294, 296, 302, 362, 388, 400, 456, 480], "song": [93, 474], "game": [93, 96, 120, 384, 467, 468], "twenti": 93, "chess": [93, 95, 109, 464, 465], "reveal": [93, 96, 183, 386, 468, 475, 483], "_age": 93, "basicconfig": [93, 101, 102, 125, 169, 267, 466, 475, 476, 481, 483], "loggedageaccess": 93, "birthday": [93, 451, 472], "mari": [93, 337, 441], "dave": [93, 108, 465, 466, 469, 475, 483], "david": [93, 95, 96, 98, 103, 109, 230, 426, 461, 462, 463, 464, 465, 466, 468, 469, 471, 473, 475, 476, 477, 478, 479, 481, 483], "hardwir": [93, 169, 308], "loggedaccess": 93, "public_nam": 93, "private_nam": 93, "_name": [93, 176, 181, 196, 205, 483], "pete": 93, "peter": [93, 99, 114, 230, 318, 367, 462, 463, 464, 465, 466, 467, 468, 473, 476, 477, 478, 479, 482, 483], "kate": 93, "catherin": 93, "some_class": 93, "descriptor_nam": 93, "notori": [93, 402], "meet": [93, 95, 102, 140, 169, 186, 190, 193, 299, 344, 395, 426, 428, 462, 466], "abstractmethod": [93, 116, 226, 250, 251, 253, 289, 293, 329, 468, 476], "oneof": 93, "predic": [93, 95, 138, 255, 261, 364, 365, 413, 465, 468, 475, 480, 482, 483], "minvalu": 93, "maxvalu": 93, "minsiz": 93, "isupp": [93, 178, 326, 344, 388], "wood": [93, 120], "metal": 93, "plastic": 93, "quantiti": [93, 186, 275, 293, 319, 341, 465, 469, 475], "metl": 93, "summar": [93, 109, 186, 193, 259, 330, 343, 386, 388, 427, 430, 432, 466, 475], "toolset": [93, 261, 292, 468, 483], "deeper": [93, 110, 167, 183, 193, 307, 352], "behind": [93, 176, 193, 309, 325, 355, 358, 384, 395, 428, 461, 463, 466, 483], "everyday": [93, 225], "find_name_in_mro": 93, "object_getattribut": 93, "cls_var": 93, "descr_get": 93, "bypass": [93, 158, 226, 235, 293, 345, 352, 354, 425, 428, 430, 432, 474, 483], "getattr_hook": 93, "slot_tp_getattr_hook": 93, "type_getattro": [93, 483], "super_getattro": 93, "set_nam": [93, 126, 139, 481, 483], "skeleton": 93, "conn": [93, 126, 160, 166, 169, 242, 283, 299, 329, 337, 341, 365, 467, 475, 478], "fetchon": [93, 299, 340, 467, 475], "commit": [93, 120, 281, 288, 305, 340, 348, 371, 431, 467, 468, 469, 477, 479, 483], "movi": [93, 147, 340, 386, 473, 474], "director": [93, 147, 395], "music": [93, 160], "artist": 93, "genr": 93, "entertain": [93, 151], "star": [93, 122, 191, 358, 377, 427, 431, 434, 436, 472, 473, 483], "war": [93, 473], "georg": [93, 109, 261, 446, 467, 468, 469, 471, 472, 475, 476, 478, 479, 483], "luca": [93, 235, 477, 478, 483], "jaw": [93, 147], "1975": [93, 147, 262, 340, 343, 449, 481], "steven": [93, 463, 467, 469, 474, 475, 477, 478, 479, 481, 483], "spielberg": [93, 147], "countri": [93, 243, 266, 341, 344, 413, 466], "road": [93, 244], "john": [93, 108, 110, 160, 175, 190, 369, 413, 440, 441, 442, 463, 466, 467, 468, 469, 472, 473, 476, 479, 483], "denver": [93, 483], "abram": 93, "excit": [93, 462, 464], "prepackag": 93, "succinct": [93, 261], "fget": [93, 225, 385], "fset": [93, 225, 385], "fdel": [93, 225, 385], "getx": [93, 225], "__x": 93, "setx": [93, 225, 384, 461], "delx": [93, 225], "descrobject": 93, "prop": [93, 461, 474, 483], "intervent": [93, 369, 425], "spreadsheet": [93, 465], "b10": 93, "recalcul": [93, 267, 425], "recalc": 93, "_valu": [93, 196, 205], "seamless": 93, "classobject": [93, 473, 483], "__func__": [93, 112, 255, 344, 428, 440, 468, 469], "__self__": [93, 255, 344, 428, 440, 468, 483], "func_descr_get": 93, "funcobject": [93, 473, 483], "0x00c45070": 93, "0x00b18c90": 93, "wonder": [93, 151, 175, 308, 434, 462, 465, 475], "recap": 93, "chart": [93, 109], "experiment": [93, 247, 271, 369, 371, 410, 434, 456, 465, 470, 471, 473, 474, 475, 480, 481, 483], "averag": [93, 141, 261, 293, 308, 318, 344, 348, 376, 382, 434, 451, 470, 477, 481, 483], "median": [93, 318, 343, 451, 477, 483], "conceptu": [93, 95, 101, 120, 141, 194, 196, 200, 205, 250, 253, 345, 386, 400, 432, 480], "erf": [93, 275, 469, 475, 480, 483], "dataset": [93, 167, 226, 466, 481, 483], "9332": 93, "unexcit": 93, "pystaticmethod_typ": 93, "fromkey": [93, 160, 344, 385, 465, 473, 475, 483], "dict_fromkey": 93, "dictobject": [93, 96, 467, 483], "pyclassmethod_typ": 93, "vehicl": 93, "id_numb": 93, "id_nubm": 93, "vye483814lqex": 93, "_dept": 93, "dept": [93, 440, 471, 475], "botani": 93, "watney": 93, "pirat": 93, "mar": [93, 94, 95, 183, 343, 434, 441, 464, 468], "48": [93, 96, 235, 343, 344, 382, 398, 472, 483], "152": 93, "flyweight": 93, "35": [93, 95, 186, 225, 318, 343, 403, 435, 465, 466, 467, 468, 474, 475, 479, 481, 482, 483], "m1": [93, 261, 347, 473], "pi": [93, 154, 176, 177, 186, 221, 275, 297, 318, 384, 413, 442, 444, 446, 451, 475, 476, 481], "100_000": [93, 343], "faith": [93, 208, 345, 352], "_slotvalu": 93, "clsname": 93, "descr_new": 93, "member_get": 93, "member_set": 93, "member_delet": 93, "member_repr": 93, "mcls": [93, 382], "pytypereadi": 93, "add_method": 93, "slot_nam": 93, "object_new": 93, "empty_slot": 93, "_pyobject_genericsetattrwithdict": 93, "pp": [93, 297, 307, 318, 481, 483], "0x7fb5d302f9d0": 93, "slot_valu": 93, "xz": [93, 270, 332, 358, 386, 475, 476, 478, 483], "week": [94, 183, 266, 366, 462, 474, 481, 483], "weekday": [94, 150, 183, 211, 269, 366, 481, 483], "monday": [94, 150, 183, 211, 266, 269, 366, 483], "tuesday": [94, 150, 183, 211, 269, 451], "wednesday": [94, 150, 183, 211], "thursday": [94, 150, 183, 211], "friday": [94, 150, 211], "saturday": [94, 150, 183, 211], "sunday": [94, 150, 183, 211, 266, 269, 366, 469, 483], "upper_cas": [94, 483], "isoweekday": [94, 183, 211], "from_dat": 94, "plot": [94, 466], "chore": [94, 462], "first_week_day": 94, "weekend": 94, "96": [94, 99, 259, 344, 382, 479, 480, 481, 482, 483], "chores_for_ethan": 94, "feed": [94, 158, 177, 178, 207, 208, 235, 240, 261, 283, 344, 407, 413, 416, 467, 475, 483], "cat": [94, 102, 106, 160, 230, 287, 348, 441, 451, 453, 475, 478], "dish": [94, 344], "show_chor": 94, "circl": [94, 155, 275, 384, 468], "alias_for_squar": 94, "unimport": 94, "_generate_next_value_": [94, 211, 483], "autonam": 94, "north": [94, 183, 376, 384, 469, 471, 483], "south": [94, 158, 319, 376, 384, 468, 471], "east": [94, 183, 366, 376, 384, 387, 440, 466], "west": [94, 183, 366, 376, 384, 440, 471], "__members__": [94, 211, 464, 470], "recreat": [94, 158, 190, 298, 337, 394, 399, 402, 428, 476, 480, 483], "vast": [94, 330, 481, 482, 483], "mood": 94, "funki": [94, 167], "happi": [94, 126, 465, 481, 483], "favorite_mood": 94, "_ignore_": [94, 211, 480, 483], "enumnam": 94, "morecolor": 94, "pink": [94, 384], "some_behavior": 94, "sad": [94, 470, 483], "creaturedatamixin": 94, "leg": 94, "creatur": 94, "beetl": 94, "dog": [94, 106, 160, 319, 440, 475, 478], "test_enum": 94, "fruit": [94, 307, 428, 442], "tomato": [94, 340], "picklabl": [94, 166, 255, 283, 299, 478, 483], "myenum": 94, "pickle_by_enum_nam": 94, "ant": [94, 149], "bee": 94, "closer": [94, 331, 332, 390, 400, 469, 470, 478, 483], "somedata": [94, 235, 304], "newenumnam": 94, "chartreus": 94, "sea_green": 94, "rosemari": 94, "flagboundari": [94, 211, 473], "perm": [94, 223, 275, 435, 473, 480, 481, 483], "rwx": [94, 332], "transit": [94, 99, 100, 110, 183, 226, 268, 330, 338, 395, 425, 430, 464, 466, 467, 469, 476, 483], "floatenum": 94, "_value_": [94, 211], "px": [94, 275], "km": [94, 343], "vx": 94, "vy": 94, "member_nam": [94, 472], "_name_": [94, 211], "_missing_": [94, 211, 483], "_order_": [94, 211, 483], "sync": [94, 177, 184, 255, 283, 293, 295, 330, 369, 474, 476, 481, 483], "enumclass": [94, 483], "earth": [94, 340, 343, 441], "jupit": [94, 343], "mercuri": [94, 343, 475, 477, 483], "neptun": [94, 343], "saturn": [94, 343], "uranus": [94, 343], "venus": [94, 343, 441], "radius": [94, 155, 275, 340, 384], "surface_grav": 94, "compris": [94, 288, 302, 348, 430, 435, 436, 468], "eject": [94, 211], "_convert_": [94, 483], "some_enum_var": 94, "__getnewargs__": [94, 160, 299, 389, 465, 478, 483], "signifi": [94, 181, 245, 340, 344, 428, 435, 474], "renumb": [94, 248], "autonumb": 94, "swatch": 94, "panton": 94, "auburn": 94, "3497": 94, "1246": 94, "bleached_cor": 94, "grade": [94, 108, 147, 225, 343, 344, 384, 465, 483], "grene": 94, "303e": 94, "4397e6": 94, "869e": 94, "0518e6": 94, "976e": 94, "37814e6": 94, "421e": 94, "3972e6": 94, "9e": 94, "27": [94, 150, 183, 236, 257, 293, 319, 337, 341, 343, 367, 378, 435, 446, 449, 462, 465, 471, 472, 475, 476, 480, 481, 482, 483], "1492e7": 94, "688e": 94, "0268e7": 94, "686e": 94, "5559e7": 94, "024e": 94, "4746e7": 94, "kilogram": [94, 386], "meter": [94, 375], "gravit": [94, 384], "m3": [94, 366, 473], "kg": 94, "67300e": 94, "6378140": 94, "802652743337129": 94, "367": 94, "day_": 94, "day_0": 94, "day_1": [94, 266], "day_365": 94, "365": [94, 183, 341, 343, 366], "day_366": 94, "tour": [95, 464, 465], "subclaus": 95, "ocaml": 95, "haskel": [95, 261, 441, 462, 465], "emphas": [95, 193, 284, 427, 483], "discourag": [95, 106, 139, 158, 181, 194, 225, 250, 288, 319, 334, 344, 353, 358, 362, 428, 464, 467, 483], "puriti": [95, 394], "opposit": [95, 106, 109, 209, 319, 384, 428, 462, 468, 470, 483], "constraint": [95, 122, 186, 191, 267, 293, 299, 307, 344, 386, 394, 427, 429, 431, 432, 467, 468, 470, 474, 483], "theoret": [95, 186], "conclud": [95, 101, 106], "rigor": 95, "aros": 95, "onward": [95, 102, 186, 221, 255, 333, 340, 344, 483], "impract": 95, "enorm": 95, "daili": [95, 464, 483], "proven": [95, 193, 384, 465], "believ": [95, 292, 465], "synthes": [95, 193, 386], "largest": [95, 100, 108, 167, 183, 186, 275, 322, 344, 352, 362, 462, 463, 464, 465, 466, 467, 468, 476, 483], "smallest": [95, 108, 109, 183, 186, 236, 275, 344, 352, 362, 369, 382, 452, 465, 466, 467, 468, 483], "jan": [95, 183, 341, 348, 405, 464, 469, 472, 473, 475, 478, 479, 480, 481, 482, 483], "apr": [95, 455, 464, 467], "jun": [95, 223, 366, 464], "jul": [95, 223, 464, 475], "nov": [95, 183, 209, 223, 245, 341, 366, 464, 479], "itali": 95, "rome": 95, "franc": 95, "pari": [95, 106, 425, 449], "washington": [95, 248], "dc": [95, 261, 293, 413, 467], "subset": [95, 158, 167, 177, 235, 247, 248, 250, 253, 257, 262, 269, 271, 295, 299, 314, 328, 332, 337, 344, 358, 365, 410, 413, 415, 422, 430, 465, 467, 469, 478, 480, 483], "listcomp": [95, 122, 431, 442], "genexp": [95, 431], "concis": [95, 99, 167, 267, 292, 340, 428, 462, 466, 475, 479, 483], "line_list": 95, "stripped_it": 95, "stripped_list": 95, "expr": [95, 122, 144, 340, 388, 429, 430, 436, 462, 466, 470, 481, 482, 483], "sequence1": [95, 462], "condition1": 95, "expr2": [95, 430, 462], "sequence2": [95, 462], "condition2": 95, "expr3": [95, 430], "sequence3": 95, "condition3": 95, "exprn": [95, 462], "sequencen": [95, 462], "conditionn": 95, "obj_tot": 95, "list_all_object": [95, 466], "expr1": [95, 430, 462], "seq1": [95, 291, 462], "doubtless": [95, 463, 464, 465], "weren": [95, 106, 235, 463, 464, 465, 466, 467, 469], "generate_int": [95, 464, 465], "gen": [95, 255, 261, 430, 464, 465, 475, 478, 483], "messier": [95, 106, 464, 465, 469], "test_gener": [95, 464, 465, 483], "inord": [95, 464, 465], "queen": [95, 318, 319, 464, 465], "nxn": [95, 464, 465], "board": [95, 100, 177, 464, 465], "threaten": [95, 464, 465], "knight": [95, 109, 307, 426, 442, 446, 464, 465, 481], "rout": [95, 110, 212, 385, 452, 464, 465, 469, 477], "chessboard": [95, 464, 465], "messi": [95, 465, 469], "becam": [95, 149, 293, 335, 352, 366, 386, 462, 468, 469, 478, 481, 482, 483], "cumul": [95, 218, 226, 275, 308, 343, 380, 382, 455, 467, 475, 477, 478, 483], "itera": 95, "iterb": 95, "sentenc": [95, 226, 319, 364, 464, 465, 468, 483], "fragment": [95, 141, 314, 344, 394, 395, 412, 413, 467, 469, 475, 476, 483], "is_even": [95, 419], "verb": [95, 293], "10000": [95, 308, 333, 367, 384, 465, 476, 483], "rand_list": 95, "769": 95, "7953": 95, "9828": 95, "6431": 95, "8442": 95, "9878": 95, "6213": 95, "2207": 95, "shortest": [95, 195, 225, 261, 462, 467, 469, 470, 471, 475], "broad": [95, 183, 292, 394, 464, 467, 469, 476, 483], "interv": [95, 101, 177, 183, 247, 269, 293, 308, 318, 333, 343, 352, 362, 365, 366, 376, 384, 466, 468, 475, 479, 481, 483], "elem": [95, 147, 160, 225, 226, 261, 344, 413, 442, 467, 469, 473, 475], "endless": [95, 261, 462, 464, 466, 467, 483], "tee": [95, 177, 261, 466, 483], "ne": [95, 112, 291, 369], "starmap": [95, 225, 261, 275, 283, 476], "rubi": [95, 343, 452], "filterfals": [95, 112, 225, 261, 343], "takewhil": [95, 261], "less_than_10": 95, "dropwhil": [95, 261], "permut": [95, 261, 318, 435, 462, 468, 471, 481, 483], "aba": 95, "came": [95, 102, 193, 202, 283, 443, 463, 464, 465, 466, 467, 483], "combinations_with_replac": [95, 160, 261, 318, 469, 471, 483], "relax": [95, 183, 244, 475, 482, 483], "key_func": 95, "city_list": 95, "decatur": 95, "huntsvill": 95, "selma": 95, "anchorag": 95, "ak": 95, "nome": 95, "flagstaff": 95, "az": 95, "phoenix": 95, "tucson": 95, "get_stat": [95, 227, 477, 483], "city_st": 95, "kwarg1": [95, 467], "value1": [95, 167, 467, 482], "kwarg2": [95, 467], "value2": [95, 167, 467, 482], "server_log": [95, 467], "initial_valu": [95, 258], "abbc": 95, "mul": [95, 112, 141, 186, 261, 275, 283, 291, 420], "clearer": [95, 193, 292, 344, 462, 463, 464, 465, 466, 468, 480, 483], "floordiv": [95, 122, 291, 431], "not_": [95, 291], "and_": [95, 291], "or_": [95, 291], "eq": [95, 122, 181, 291, 386, 431, 483], "lt": [95, 122, 291, 344, 384, 417, 431, 435, 463, 475], "gt": [95, 122, 238, 239, 240, 291, 417, 431, 475, 476], "ge": [95, 291], "is_": [95, 291], "is_not": [95, 291], "stripped_lin": 95, "existing_fil": 95, "file_list": 95, "anonym": [95, 176, 223, 268, 278, 293, 384, 427, 430, 462, 475, 483], "adder": 95, "print_assign": 95, "multiway": 95, "disentangl": 95, "heck": 95, "essenc": 95, "disagre": [95, 378, 462], "assist": [95, 109, 264, 278, 385, 399, 426, 428, 464, 465, 466, 467, 468, 469, 480, 483], "draft": [95, 109, 151, 271, 296, 410, 462, 463, 464, 465, 466, 467, 468, 469, 479, 480, 483], "articl": [95, 109, 226, 235, 261, 271, 288, 384, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482], "ian": [95, 407, 473], "bick": [95, 407], "nick": [95, 99, 109, 324, 428, 464, 466, 467, 468, 469, 471, 475, 476, 477, 478, 479, 480, 483], "coghlan": [95, 99, 109, 324, 466, 467, 468, 469, 471, 475, 476, 477, 478, 479, 480, 483], "efford": 95, "jewett": [95, 466, 468], "mike": [95, 464, 466, 467, 468, 473, 483], "krell": 95, "leandro": 95, "lameiro": 95, "jussi": 95, "salmela": 95, "collin": [95, 468, 469, 478, 483], "winter": [95, 225, 468, 469], "blake": [95, 235], "winton": 95, "june": [95, 150, 408, 471, 480], "juli": [95, 150, 190, 426, 435, 464, 465, 469, 483], "typo": [95, 151, 386, 389, 430, 464, 483], "tutor": 95, "harold": [95, 345], "abelson": 95, "gerald": 95, "jay": [95, 463, 475, 483], "sussman": 95, "mitpress": 95, "mit": [95, 251, 307, 426, 483], "sicp": 95, "classic": [95, 103, 167, 184, 203, 230, 271, 369, 384, 449, 464, 465, 467, 469, 470, 475, 483], "textbook": [95, 106, 319, 467, 468], "scienc": [95, 106, 365, 478], "defmacro": 95, "rambl": 95, "wikipedia": [95, 109, 160, 235, 271, 347, 384, 467, 475, 476, 483], "functional_program": 95, "partial_appl": 95, "curri": 95, "gnosi": 95, "cx": [95, 261, 465], "tpip": 95, "mertz": [95, 103], "ibm": [95, 158, 177, 186, 347, 422, 465, 467, 476, 483], "developerwork": 95, "front": [96, 106, 169, 201, 208, 247, 261, 302, 390, 400, 423, 428, 430, 455, 462, 465, 467, 469, 483], "surfac": [96, 293, 384, 474], "tinker": [96, 358], "consolid": [96, 163, 284, 465, 476, 479, 483], "guidanc": [96, 105, 385, 469, 474, 483], "outdat": [96, 176, 250, 369, 468, 474, 475, 480, 483], "debuginfo": 96, "dbg": 96, "fedora": [96, 105, 223, 352, 456, 460, 472, 475, 482, 483], "sudo": [96, 98, 102], "dnf": 96, "ubuntu": [96, 456, 473, 480, 483], "debuginfod": 96, "backtrac": [96, 483], "0x000000000041a6b1": 96, "nbyte": [96, 126, 133, 142, 282, 284, 314, 326, 337, 344], "0x7fffff7fefe8": 96, "748": 96, "0x000000000041b7c0": 96, "_pyobject_debugmallocapi": 96, "111": [96, 109, 225, 261, 343, 345, 461], "1445": 96, "0x000000000041b717": 96, "_pyobject_debugmalloc": 96, "1412": 96, "0x000000000044060a": 96, "_pyunicode_new": 96, "unicodeobject": [96, 483], "346": 96, "0x00000000004466aa": 96, "pyunicodeucs2_decodeutf8st": 96, "0x5c2b8d": 96, "__lltrace__": [96, 456, 483], "0x0": [96, 158], "2531": [96, 469, 475], "0x0000000000446647": 96, "pyunicodeucs2_decodeutf8": 96, "2495": 96, "0x0000000000440d1b": 96, "pyunicodeucs2_fromstringands": 96, "551": [96, 469], "0x0000000000440d94": 96, "pyunicodeucs2_fromstr": 96, "569": 96, "0x0000000000584abd": 96, "yuck": [96, 450], "0xad4730": 96, "0x7ffff7fd5ee8": 96, "crasher": 96, "nasty_eq_vs_dict": 96, "0xaacd80": 96, "0xaace60": 96, "2171": 96, "0x7ffff7fb1868": 96, "0x7ffff7f14360": 96, "0x3dbdf85820": 96, "ma_fil": 96, "ma_us": 96, "ma_mask": 96, "ma_tabl": 96, "0x63d0f8": 96, "ma_lookup": 96, "0x3dbdc7ea70": 96, "lookdict_str": 96, "ma_smallt": 96, "me_hash": 96, "7065186196740147912": 96, "me_key": 96, "me_valu": 96, "368181376027291943": 96, "9177857982131165996": 96, "8518757509529533123": 96, "6614918939584953775": 96, "some_machine_integ": 96, "some_python_integ": 96, "0x3dad39f5e0": 96, "ob_digit": [96, 483], "aris": [96, 186, 258, 267, 268, 299, 385, 426, 430, 464, 466, 475, 481, 483], "ptr_to_python_str": 96, "ptr_to_char_star": 96, "0x6d72c0": 96, "0x3dad3a95a0": 96, "0x7ffff2128500": 96, "defenc": 96, "901": [96, 471], "902": [96, 475], "903": [96, 382], "profile_m": 96, "904": 96, "905": 96, "906": 96, "ui": [96, 102, 407, 461, 462, 483], "907": 96, "908": 96, "909": 96, "gtk": [96, 466, 468], "910": 96, "911": [96, 382], "37": [96, 176, 245, 318, 343, 344, 345, 382, 406, 451, 466, 469, 471, 472, 473, 480, 481, 482, 483], "0x9420b04": 96, "gnome_sudoku": 96, "start_gam": 96, "0x948e82c": 96, "0xb771b7f4": 96, "0x99262ac": 96, "game_selector": 96, "201": [96, 110, 241, 261, 369, 462], "run_swallowed_dialog": 96, "neworsavedgameselector": 96, "new_game_model": 96, "liststor": 96, "0x98fab44": 96, "puzzl": [96, 467], "saved_gam": 96, "gsd": 96, "auto_fil": 96, "saved_at": 96, "1270084485": 96, "n7": 96, "impossible_hint": 96, "__absolute_start_time__": 96, "0x984b474": 96, "active_tim": 96, "0x984b494": 96, "total_tim": 96, "0x984b464": 96, "0x98faaa4": 96, "saved_game_model": 96, "0x98fad24": 96, "sudoku_mak": 96, "sudokumak": 96, "batch_siz": 96, "swallow": [96, 101, 102, 139, 452, 462, 469, 475, 481, 483], "run_dialog": 96, "0x9aead74": 96, "dialog_swallow": 96, "swappablearea": 96, "main_pag": 96, "0x98fa6e4": 96, "0x7ffff7fb62b0": 96, "rec": [96, 314, 411, 413], "recursive_funct": 96, "0x7ffff7fb6240": 96, "0x7ffff7fb61d0": 96, "0x7ffff7fb6160": 96, "0x7ffff7fb60f0": 96, "0x7ffff7fb6080": 96, "0x7ffff7fb6020": 96, "scarlet_pimpernel": 96, "complement": [96, 106, 319, 344, 384, 428, 476, 480, 482, 483], "snip": 96, "68": [96, 109, 186, 225, 318, 366, 413, 481], "0xaa4560": 96, "regrtest": [96, 362, 382, 465, 469, 483], "1548": 96, "0x00000000004cd1e6": 96, "ceval": [96, 472, 483], "2665": 96, "call_funct": [96, 142, 176, 473, 479, 483], "sp": [96, 178, 235, 240], "oparg": [96, 191, 474, 483], "1543": 96, "cwd": [96, 142, 223, 293, 296, 348, 362, 399, 466, 481, 483], "1544": 96, "1545": 96, "1546": 96, "test_support": [96, 468, 470], "savedcwd": [96, 362], "1547": 96, "temp_cwd": [96, 362, 483], "testcwd": 96, "105": [96, 186, 343], "0x7fffefa18710": 96, "lwp": 96, "10260": 96, "sem_wait": 96, "nptl": 96, "sysdep": 96, "86": [96, 104, 173, 221, 343, 345, 382, 384], "104": [96, 186, 343, 475, 481, 482], "0x7fffdf5fe710": 96, "10259": 96, "0x7ffff7fe2700": 96, "10145": 96, "0x00000038e46d73e3": 96, "syscal": [96, 126, 213, 293, 322, 332, 478, 479, 481, 483], "82": [96, 464], "0x7fffd00019d0": 96, "svn": [96, 120, 163, 355, 394, 465, 467, 468, 469, 475, 483], "155": [96, 319], "_acquire_restor": 96, "_rlock": 96, "_verbose__verbos": 96, "_rlock__own": 96, "140737354016512": 96, "_rlock__block": 96, "0x858770": 96, "_rlock__count": 96, "0xd7ff40": 96, "count_own": 96, "140737213728528": 96, "__block": 96, "0x7fffac001640": 96, "269": [96, 188, 483], "_condit": 96, "_condition__lock": 96, "instancemethod": 96, "0xd80260": 96, "_is_own": 96, "0xd80160": 96, "_release_sav": 96, "0xd803e0": 96, "0xd802e0": 96, "0xd7ee60": 96, "_condition__wait": 96, "0xd7fd10": 96, "waiter": [96, 138, 365, 483], "0x858a90": 96, "saved_st": 96, "0x7fffb8001a10": 96, "lock_test": 96, "348": 96, "cond": [96, 138, 144, 352, 386, 467], "0x7fffb8001c40": 96, "tid": [96, 365, 483], "0x7fffe4001580": 96, "140736940992272": 96, "0x7fffc8002090": 96, "0x858860": 96, "0x7fffac001c90": 96, "0x7fffac0011c0": 96, "0xcb5380": 96, "_wait": 96, "0x7fffd00024a0": 96, "_check_notifi": 96, "conditiontest": 96, "_testmethodnam": 96, "test_notifi": 96, "_resultfordocleanup": 96, "testresult": [96, 193, 388, 469, 471, 476, 483], "_original_stdout": 96, "cstringio": [96, 468, 470], "stringo": 96, "0xc191e0": 96, "_mirroroutput": 96, "testsrun": [96, 388], "39": [96, 160, 183, 193, 283, 293, 366, 456, 466, 472, 476, 481, 482, 483], "_original_stderr": 96, "0x7ffff7fc6340": 96, "_stdout_buff": 96, "0xc9c7f8": 96, "_stderr_buff": 96, "0xc9c790": 96, "_modulesetupfail": 96, "expectedfailur": [96, 362, 388, 471, 483], "_previoustestclass": 96, "0x928310": 96, "unexpectedsuccess": [96, 388], "shouldstop": [96, 388], "failfast": [96, 388, 469, 483], "0xc185a0": 96, "_cleanup": 96, "_type_equality_func": 96, "0x7eba00": 96, "0xd750e0": 96, "0x7e7820": 96, "0xd75160": 96, "0x7e30e0": 96, "0xd75060": 96, "0x7e7d20": 96, "0xd751e0": 96, "0x7f19e0": 96, "malcolm": [98, 319, 469, 475, 479, 483], "ukasz": [98, 288, 475, 477, 478, 479, 480, 481, 482, 483], "langa": [98, 288, 475, 477, 478, 479, 480, 481, 482, 483], "yum": 98, "sdt": 98, "29564": [98, 483], "python18035": 98, "_pyeval_evalframedefault": [98, 104, 483], "29565": 98, "dtrace_function_entri": 98, "29566": [98, 483], "29567": 98, "dtrace_function_return": 98, "29568": [98, 483], "29569": 98, "29570": 98, "29571": [98, 483], "maybe_dtrace_lin": 98, "stapsdt": 98, "readelf": [98, 483], "grep": [98, 102, 104, 247, 348, 462, 483], "0000000000000000": 98, "00308d78": 98, "libpython3": [98, 483], "3dm": 98, "00365b68": 98, "0x00000254": 98, "0x00000020": [98, 176], "0x00000010": 98, "nt_gnu_abi_tag": 98, "0x00000274": 98, "0x00000024": 98, "0x00000014": 98, "nt_gnu_build_id": 98, "bitstr": 98, "df924a2b08a7e89f6e11251d4602022977af2670": 98, "0x002d6c30": 98, "0x00000144": 98, "0x00000031": 98, "nt_stapsdt": 98, "gc__start": 98, "0x00000000004371c3": 98, "0x0000000000630ce2": 98, "0x00000000008d6bf6": 98, "ebx": 98, "0x00000030": 98, "gc__done": 98, "0x00000000004374e1": 98, "0x00000000008d6bf8": 98, "rax": 98, "0x00000045": 98, "function__entri": 98, "0x000000000053db6c": 98, "0x00000000008d6be8": 98, "rbp": 98, "r12": 98, "eax": 98, "0x00000046": 98, "function__return": 98, "0x000000000053dba8": 98, "0x00000000008d6bea": 98, "copyinstr": 98, "timestamp": [98, 102, 126, 160, 163, 183, 203, 209, 234, 245, 293, 311, 335, 340, 341, 358, 366, 380, 422, 432, 455, 465, 469, 476, 478, 480, 483], "probenam": 98, "basenam": [98, 102, 120, 184, 193, 292, 294, 296, 369, 375, 399, 422, 483], "arg0": [98, 293, 353, 483], "call_stack": 98, "156641360502280": 98, "156641360518804": 98, "156641360532797": 98, "function_3": 98, "156641360546807": 98, "156641360563367": 98, "156641360578365": 98, "156641360591757": 98, "156641360605556": 98, "156641360617482": 98, "156641360629814": 98, "156641360642285": 98, "156641360656770": 98, "156641360669707": 98, "156641360687853": 98, "function_4": 98, "156641360700719": 98, "156641360719640": 98, "function_5": 98, "156641360732567": 98, "156641360747370": 98, "user_str": 98, "thread_ind": 98, "stap": 98, "stp": 98, "11408": 98, "8274": 98, "_abcol": 98, "11414": 98, "425": [98, 241, 482, 483], "11418": 98, "490": 98, "11424": 98, "11428": 98, "426": [98, 241], "11433": 98, "libpython": [98, 456, 472, 473, 481, 483], "6dm": 98, "import__find__load__start": [98, 480], "import__find__load__don": [98, 480], "find_and_load": 98, "frameptr": 98, "arg4": 98, "fn_call": 98, "033": [98, 177, 483], "1h": [98, 469], "6s": [98, 102, 190], "80s": 98, "30s": 98, "foreach": 98, "6d": [98, 102], "moodi": [99, 476, 477, 478], "ip_address": [99, 142, 259, 337], "192": [99, 102, 243, 259, 267, 345], "ipv4address": [99, 259, 478, 483], "db8": [99, 259], "ipv6address": [99, 259, 478, 482, 483], "3221225985": [99, 259], "42540766411282592856903984951653826561": 99, "ip_network": [99, 259], "ipv4network": [99, 259, 478, 480, 483], "ipv6network": [99, 259, 478, 480, 483], "3221225984": 99, "42540766411282592856903984951653826560": 99, "firewal": [99, 247, 283, 463, 476], "router": [99, 259, 337], "hybrid": [99, 183, 477], "ip_interfac": [99, 259, 483], "ipv4interfac": [99, 259, 483], "ipv6interfac": [99, 259, 483], "ipv": [99, 483], "intuit": [99, 100, 101, 103, 106, 151, 186, 190, 261, 375, 430, 462, 463, 464, 477], "addr4": 99, "addr6": [99, 478], "host4": 99, "host6": 99, "net4": 99, "num_address": [99, 259], "net6": 99, "4294967296": [99, 259, 470], "254": [99, 483], "netmask": [99, 259, 478, 483], "hostmask": [99, 259], "ffff": [99, 259, 462, 476], "explod": [99, 259, 462, 464, 483], "0db8": 99, "0001": [99, 183, 435, 480, 483], "explos": [99, 413], "lend": [99, 464], "agnost": [99, 344, 386], "addressvalueerror": [99, 259], "netmaskvalueerror": [99, 259], "168": [99, 102, 243, 259, 267, 345], "octet": [99, 200, 206, 259, 305, 345, 394, 483], "concern": [99, 101, 126, 133, 158, 167, 269, 299, 314, 341, 362, 426, 463, 464, 469, 479, 480, 481, 482, 483], "safer": [100, 193, 299, 465, 466, 474, 483], "evolv": [100, 257, 268, 432], "granular": [100, 102, 250, 293, 352, 483], "old_binascii": 100, "stringent": [100, 477], "unhexlifi": [100, 146, 483], "qwertyuiop": 100, "boo": 100, "circuit": [100, 344, 442], "led": [100, 167, 293, 463, 476, 479, 483], "field_size_limit": [100, 175, 467, 483], "price": [100, 160, 221, 319, 412, 449, 466, 467, 478, 481, 483], "xxlimit": [100, 483], "my_struct": 100, "pay": [100, 102, 106, 193, 461, 474, 477], "myattribut": 100, "rewrit": [100, 200, 218, 293, 378, 462, 465, 467, 469, 470, 478, 481, 483], "unintent": [100, 102, 267, 348, 475, 483], "pickleabl": [100, 269, 483], "blueprint": 100, "py_tp_travers": 100, "grew": [100, 471, 475], "awkward": [100, 469, 481], "0x03090000": [100, 482], "tedious": [100, 109, 128, 151, 384, 462, 467, 481], "roadblock": 100, "get_defining_class": 100, "get_type_of_self": 100, "example_method": 100, "example_method_doc": 100, "my_method": 100, "module_def": 100, "span": [100, 106, 122, 167, 193, 220, 240, 278, 319, 344, 345, 427, 467, 468, 474, 476, 478, 479, 483], "capi": [100, 469], "iron": 100, "vinay": [101, 102, 465, 466, 468, 469, 471, 475, 476, 477, 478, 479, 480, 481, 482], "sajip": [101, 102, 465, 466, 468, 469, 471, 475, 476, 477, 478, 479, 480, 481, 482], "vinay_sajip": [101, 102], "dove": [101, 102], "getlogg": [101, 102, 125, 267, 388, 465, 469, 471, 482, 483], "investig": [101, 344], "confirm": [101, 189, 267, 297, 386, 395, 400, 461, 483], "serious": [101, 103, 126, 193, 213, 235, 267], "told": [101, 386, 399, 428, 465], "resund": 101, "malm": 101, "threshold": [101, 102, 267, 344, 467], "loglevel": 101, "numeric_level": 101, "afresh": [101, 169, 267], "filemod": [101, 102, 267, 342, 358, 476, 481, 483], "explor": [101, 110, 167, 191, 240, 247, 293, 384, 399, 413, 428, 461, 468, 475, 483], "levelnam": [101, 102, 267, 268, 269, 283, 466, 469, 475], "asctim": [101, 102, 267, 268, 309, 366, 463, 469, 475], "2010": [101, 102, 109, 267, 332, 345, 352, 390, 469, 475], "41": [101, 261, 307, 318, 319, 343, 419, 451, 468, 482, 483], "iso8601": [101, 419], "3339": 101, "datefmt": [101, 102, 267, 268], "46": [101, 160, 318, 344, 452, 472, 481, 482, 483], "am": [101, 102, 103, 183, 266, 299, 366, 434], "invest": 101, "favourit": 101, "beverag": 101, "hereaft": [101, 308, 355], "diagram": [101, 103, 193, 225, 338, 464], "threefold": 101, "setlevel": [101, 102, 125, 267, 283, 465, 483], "addhandl": [101, 102, 267, 471], "removehandl": [101, 102, 267, 388, 469], "addfilt": [101, 102, 267], "removefilt": [101, 267], "paragraph": [101, 139, 197, 247, 262, 292, 293, 341, 344, 364, 413, 420, 426, 428, 462, 465, 483], "baz": [101, 102, 104, 120, 167, 247, 250, 262, 267, 268, 283, 293, 311, 362, 385, 388, 389, 390, 407, 432, 436], "bam": [101, 267], "descend": [101, 108, 163, 196, 205, 255, 267, 283, 308, 342, 369, 376, 388, 410, 411, 413, 467, 469, 483], "ancestor": [101, 102, 103, 177, 267, 268, 283, 296, 376, 389, 413, 428, 465, 483], "setformatt": [101, 102, 267, 269], "deconfigur": 101, "establish": [101, 126, 193, 247, 248, 269, 283, 299, 302, 305, 319, 328, 335, 341, 359, 395, 405, 427, 428, 429, 469, 475, 483], "fmt": [101, 102, 183, 201, 259, 267, 295, 304, 362, 452, 468, 483], "millisecond": [101, 126, 177, 183, 247, 267, 328, 376, 384, 406, 475, 479, 482, 483], "tack": 101, "gmtime": [101, 102, 150, 183, 209, 267, 271, 366, 464, 475, 476, 483], "fileconfig": [101, 102, 268, 469, 477, 480, 483], "simple_exampl": [101, 102], "simple_logging_modul": 101, "2005": [101, 102, 183, 271, 426, 466, 467, 468, 483], "03": [101, 102, 183, 186, 267, 341, 345, 347, 366, 451, 465, 467, 483], "618": [101, 261, 472, 483], "620": [101, 466], "697": [101, 474, 483], "773": 101, "conf": [101, 102, 106, 296, 452, 465, 475, 483], "simpleexampl": [101, 102], "consolehandl": 101, "simpleformatt": 101, "logger_root": [101, 268], "logger_simpleexampl": 101, "handler_consolehandl": 101, "formatter_simpleformatt": 101, "simple_logging_config": 101, "38": [101, 102, 190, 225, 267, 337, 382, 465, 472, 481, 482, 483], "977": [101, 288], "979": 101, "56": [101, 104, 183, 186, 225, 258, 283, 337, 343, 442, 444, 475, 478, 483], "054": 101, "055": 101, "130": [101, 259, 343, 469], "noncod": 101, "disable_existing_logg": [101, 102, 268], "mypackag": 101, "myhandl": [101, 102, 268], "superset": [101, 306, 344, 430, 462, 465, 483], "yaml": [101, 120, 251, 262, 268, 469, 472, 475], "ext": [101, 102, 158, 191, 200, 268, 276, 294, 297, 452, 465, 466, 475, 483], "resort": [101, 184, 266, 267, 464], "lastresort": [101, 267, 475], "raiseexcept": [101, 102, 267, 269, 475], "absenc": [101, 110, 115, 255, 265, 267, 319, 341, 365, 428, 443, 483], "organis": [101, 102, 267], "orgnam": 101, "advis": [101, 169, 176, 248, 283, 288, 293, 365, 400, 425, 426, 428, 430, 475, 481, 483], "prerog": 101, "audienc": [101, 307, 400, 434, 465, 470], "interfer": [101, 132, 167, 226, 266, 297, 483], "deliv": [101, 110, 133, 183, 225, 328, 333, 335, 376, 390, 430, 468, 483], "notset": [101, 267, 268, 283], "desk": 101, "staff": [101, 332, 358], "convinc": [101, 266], "xp": [101, 269, 465, 478], "criteria": [101, 248, 267, 308], "reopen": [101, 269, 299, 340, 359, 469, 479, 483], "batch": [101, 106, 126, 261, 299, 348, 461, 474, 478, 483], "bufferingformatt": [101, 267], "provis": [101, 302, 341, 426, 430], "trailer": [101, 293, 424, 431, 483], "misconfigur": [101, 247, 483], "handleerror": [101, 267, 269], "altogeth": [101, 102, 151, 314, 389, 422, 428, 475], "isenabledfor": [101, 102, 267, 469, 483], "expensive_func1": 101, "expensive_func2": 101, "deepli": [101, 362, 435, 462, 468, 483], "recomput": [101, 328, 329, 333, 366, 477, 483], "_srcfile": 101, "_getfram": [101, 142, 352, 450, 463, 473, 483], "logthread": 101, "getpid": [101, 126, 283, 293, 483], "logprocess": 101, "logmultiprocess": 101, "logasynciotask": 101, "past": [102, 120, 183, 193, 216, 247, 255, 293, 299, 314, 345, 348, 366, 407, 475, 477, 478, 481, 482, 483], "somelogg": 102, "auxiliary_modul": 102, "spam_appl": 102, "fh": 102, "auxiliari": [102, 108, 261, 475, 483], "do_someth": [102, 151, 267, 341, 388, 430], "some_funct": [102, 389, 390], "module_logg": 102, "47": [102, 183, 209, 261, 318, 319, 424, 442, 451, 468, 472, 483], "663": 102, "665": 102, "668": [102, 332], "670": [102, 473], "671": 102, "672": [102, 221], "hi": [102, 147, 176, 304, 344, 369, 386, 483], "relativecr": [102, 267], "threadnam": [102, 267], "mainthread": [102, 483], "505": [102, 110, 241], "1007": 102, "1507": [102, 468], "1508": 102, "2258": 102, "2512": 102, "3009": 102, "3013": 102, "3515": 102, "3761": 102, "4017": 102, "4513": 102, "4518": 102, "interspers": [102, 292], "quota": [102, 212, 248], "dormant": 102, "12s": 102, "8s": [102, 267, 268, 469, 475], "jackdaw": 102, "quartz": 102, "logger1": 102, "area1": 102, "logger2": 102, "area2": 102, "zephyr": 102, "blow": [102, 151, 292, 475, 483], "vex": [102, 463], "daft": 102, "jump": [102, 103, 191, 193, 247, 270, 297, 353, 384, 428, 441, 465, 467, 470, 473, 474, 479, 480, 483], "zebra": [102, 160, 299], "jail": 102, "zesti": 102, "vixen": 102, "quack": [102, 468], "five": [102, 186, 269, 271, 292, 293, 319, 338, 340, 341, 352, 394, 415, 462, 468, 476, 481, 483], "wizard": [102, 464], "warnings_and_below": 102, "filter_mak": 102, "levelno": [102, 267], "9999": [102, 104, 133, 150, 183, 247, 338, 475, 480, 483], "stoplisten": [102, 268], "data_to_send": 102, "sock_stream": [102, 107, 126, 269, 337, 338, 341, 362, 469, 480], "culprit": 102, "sluggish": 102, "poor": [102, 149, 305, 308, 319, 463, 464, 483], "infrastructur": [102, 158, 341, 400, 468, 469, 477, 480, 483], "capac": [102, 177, 269, 293, 343, 365, 467, 469], "precaut": 102, "eat": [102, 275, 483], "que": 102, "queue_handl": 102, "respect_handler_level": [102, 269, 478, 483], "rootlogg": 102, "default_tcp_logging_port": [102, 268], "unformat": [102, 262, 319], "logrecordstreamhandl": 102, "streamrequesthandl": [102, 338, 479, 483], "recv": [102, 107, 126, 283, 327, 329, 333, 337, 338, 341, 362, 369, 469, 478, 483], "slen": 102, "makelogrecord": [102, 267, 269], "handlelogrecord": 102, "lognam": [102, 229, 293], "wast": [102, 109, 470, 483], "bandwidth": [102, 109, 343, 441, 469, 472], "logrecordsocketreceiv": 102, "threadingtcpserv": [102, 338], "allow_reuse_address": [102, 338, 420, 468], "serve_until_stop": 102, "rd": [102, 341, 344], "wr": [102, 463, 483], "handle_request": [102, 170, 333, 338, 407, 420, 469], "5d": 102, "15s": [102, 267, 268, 469, 475], "69": [102, 366, 413, 472], "makepickl": [102, 269], "supervisor": 102, "gist": 102, "bone": [102, 459], "bash": [102, 155, 296, 331, 399, 447, 453, 483], "ensure_app": 102, "log_listen": 102, "webapp": 102, "unzip": [102, 225, 421, 423, 465, 483], "bottl": [102, 176, 468], "supervisorctl": 102, "tweak": [102, 292, 390, 463, 466, 479, 483], "usernam": [102, 110, 151, 173, 200, 203, 223, 229, 248, 269, 293, 294, 305, 335, 394, 395, 475, 476, 478, 483], "customadapt": 102, "connid": 102, "some_conn_id": 102, "threadloc": 102, "contextfilt": 102, "inject": [102, 126, 137, 267, 272, 331, 340, 348, 358, 455, 467, 472, 478, 483], "sheila": 102, "ips": [102, 483], "231": 102, "5s": 102, "a1": [102, 228, 483], "a2": [102, 228, 319], "lvl": 102, "lvlname": 102, "getlevelnam": [102, 267], "webapplib": 102, "11s": 102, "appnam": [102, 269], "9s": 102, "4s": 102, "ctx_request": 102, "ctx_appnam": 102, "injectingfilt": 102, "num_request": 102, "process_request": [102, 338], "splitext": [102, 200, 294, 296, 358, 452, 468, 479, 483], "adhf": 102, "argumentdefaultshelpformatt": [102, 120, 483], "ap": 102, "aa": [102, 160, 261, 319, 442, 469], "app1": 102, "app2": 102, "49": [102, 245, 261, 267, 283, 382, 442, 446, 449, 472, 481, 482, 483], "wc": 102, "153": 102, "147": [102, 481], "600": [102, 183, 479, 483], "issue3770": 102, "listener_configur": 102, "mptest": 102, "processnam": [102, 267, 283], "10s": [102, 347], "listener_process": 102, "print_exc": [102, 367, 381, 483], "worker_configur": 102, "worker_process": 102, "current_process": [102, 283], "orchestr": 102, "put_nowait": [102, 134, 269, 283, 316], "logger_thread": 102, "qh": 102, "ham": [102, 160, 170, 190, 225, 255, 279, 321, 430, 432, 441, 478], "egg": [102, 103, 160, 175, 190, 218, 225, 226, 251, 258, 296, 307, 319, 321, 330, 344, 348, 358, 381, 385, 386, 389, 390, 395, 413, 422, 432, 441, 443, 446, 449, 462, 483], "mplog": 102, "foofil": 102, "wp": 102, "lp": [102, 270, 473], "max_work": [102, 126, 166, 475, 483], "log_filenam": 102, "logging_rotatingfile_exampl": 102, "my_logg": 102, "mylogg": [102, 267], "maxbyt": [102, 268, 269, 469], "backupcount": [102, 268, 269, 469], "logfil": [102, 151], "backup": [102, 112, 218, 269, 340, 358, 468, 475, 480, 483], "bf": [102, 319, 451], "df": [102, 103, 469], "924": 102, "494": [102, 479], "833": 102, "recal": [102, 247], "bracemessag": 102, "dollarmessag": 102, "unwieldi": 102, "palat": 102, "brethren": 102, "2f": [102, 134, 221, 345, 394, 444, 468, 469, 471, 483], "penalti": [102, 181, 216, 462, 475], "trip": [102, 149, 243, 378, 468, 470, 471, 473, 483], "sugar": [102, 169, 225, 244, 250, 261, 340, 441, 470], "styleadapt": 102, "stacklevel": [102, 258, 267, 400, 467, 483], "makerecord": [102, 267], "setloggerclass": [102, 267], "setlogrecordfactori": [102, 267], "interrog": [102, 205], "getlogrecordfactori": [102, 267], "old_factori": [102, 267], "record_factori": [102, 267], "custom_attribut": [102, 267], "0xdecafbad": [102, 267], "born": [102, 344], "zmq": 102, "pyzmq": 102, "sock": [102, 106, 107, 126, 133, 136, 242, 308, 329, 337, 338, 341, 362, 475, 478, 480, 483], "pub": [102, 124, 223, 332, 460], "push": [102, 157, 160, 169, 177, 179, 186, 191, 282, 283, 314, 331, 365, 413, 435, 436, 441, 462, 468, 476, 483], "5556": 102, "zeromqsockethandl": [102, 483], "enqueu": [102, 269, 283, 483], "send_json": 102, "socktyp": [102, 269, 337, 362, 469], "subscrib": [102, 248, 386, 428, 483], "zeromqsocketlisten": [102, 483], "setsockopt_str": 102, "dequeu": [102, 269, 483], "recv_json": 102, "nng": 102, "bill": [102, 344, 446, 462, 468], "spiritu": 102, "successor": [102, 128, 232, 389], "default_addr": 102, "13232": 102, "nngsocketlisten": 102, "sub0": 102, "recv_timeout": 102, "enqueue_sentinel": [102, 269], "nngsockethandl": 102, "pub0": 102, "dial": 102, "send_timeout": 102, "logger_nam": 102, "lib1": [102, 456], "lib2": 102, "msgno": 102, "interleav": [102, 126, 136, 193, 283, 469, 475, 480, 481, 483], "django": [102, 160, 297, 302, 389, 469, 476], "specialfilt": 102, "mail_admin": 102, "adminemailhandl": 102, "myproject": [102, 388], "runnabl": [102, 126, 483], "gz": [102, 218, 234, 276, 296, 332, 358, 399, 424, 426, 453, 460, 462, 467, 474, 475, 483], "f_in": [102, 234], "f_out": [102, 234], "copyfileobj": [102, 110, 234, 332, 481, 483], "rh": 102, "six": [102, 108, 183, 225, 226, 299, 318, 319, 340, 376, 394, 422, 468, 475, 477, 480, 481, 483], "zcat": 102, "02": [102, 104, 183, 186, 267, 283, 332, 366, 423, 451, 462, 464, 465, 466, 475, 479, 483], "767": [102, 406], "996": 102, "997": 102, "998": 102, "stop_ev": 102, "initialis": [102, 243, 269, 324, 352, 428, 455, 477, 479, 483], "heterogen": [102, 344, 470, 483], "bunch": [102, 128, 200, 207, 292, 462, 463, 464, 465, 468, 483], "config_initi": 102, "config_work": 102, "config_listen": 102, "hang": [102, 110, 135, 283, 328, 333, 362, 465, 475, 483], "5424": [102, 269], "compliant": [102, 112, 126, 146, 183, 194, 195, 196, 198, 201, 202, 203, 207, 208, 209, 215, 235, 262, 271, 311, 331, 340, 366, 394, 407, 426, 430, 464, 467, 469, 474, 476, 479, 480, 483], "ufeffunicod": 102, "feff": [102, 109, 158], "xef": [102, 146, 394], "xbb": 102, "xbf": 102, "readili": [102, 283, 359, 477, 483], "parseabl": [102, 303, 331], "serialis": [102, 158, 324, 413, 483], "structuredmessag": 102, "fnum": 102, "specialis": [102, 110, 340, 344, 386, 431, 483], "jsonencod": [102, 262, 479, 483], "unicode_escap": [102, 158], "set_valu": 102, "snowman": [102, 474], "u2603": 102, "chown": [102, 142, 293, 332, 476, 483], "owned_file_handl": 102, "creator": [102, 283, 293, 332, 411, 422, 423, 428, 434, 483], "puls": 102, "chowntest": 102, "resid": [102, 200, 230, 271, 293, 313, 322, 342, 432, 462, 483], "orthogon": 102, "getmessag": [102, 267, 414], "cater": [102, 193, 268, 269], "myfilt": [102, 475], "param": [102, 139, 151, 196, 197, 203, 205, 209, 242, 255, 281, 293, 305, 340, 388, 394, 395, 399, 419, 420, 431, 469, 475, 482, 483], "noshow": 102, "onelineexceptionformatt": 102, "formatexcept": [102, 267], "exc_text": [102, 267, 269, 483], "configure_log": 102, "2015": [102, 183, 326, 426, 456, 478, 483], "07": [102, 183, 267, 271, 319, 345, 366, 378, 425, 467, 468, 479, 482, 483], "logtest7": 102, "nzerodivisionerror": 102, "simplist": 102, "render": [102, 109, 126, 189, 198, 201, 338, 376, 381, 411, 428, 461, 465, 468, 469, 481, 483], "audibl": [102, 177], "speech": [102, 295], "tts": 102, "frequenc": [102, 117, 366, 406, 415, 468], "swamp": 102, "spoken": 102, "espeak": 102, "ttshandler": 102, "femal": [102, 343], "voic": [102, 336, 464], "s150": 102, "ven": 102, "f3": [102, 120], "goodby": [102, 140, 223, 299, 369, 443], "parameteris": [102, 386, 473], "log_if_error": 102, "target_handl": 102, "flush_level": 102, "flushlevel": [102, 269], "write_lin": 102, "decorated_foo": 102, "bufferinghandl": [102, 269], "har": [102, 155, 388, 475, 477, 483], "bufferingsmtphandl": 102, "mailhost": [102, 268, 269], "password": [102, 110, 173, 223, 229, 233, 235, 248, 269, 283, 286, 288, 293, 305, 310, 326, 335, 339, 341, 359, 361, 394, 395, 419, 422, 467, 468, 469, 476, 477, 478, 479, 483], "mailport": 102, "starttl": [102, 248, 269, 288, 335, 341, 468, 475, 476, 483], "login": [102, 173, 223, 248, 286, 288, 293, 335, 339, 359, 395, 475, 483], "nto": [102, 335], "nsubject": 102, "addresse": [102, 269], "102": [102, 186, 241, 261, 343, 469, 475, 481, 482], "eleven": 102, "eleventh": 102, "utcformatt": 102, "console1": 102, "console2": 102, "501": [102, 110, 241, 245, 293, 475], "sat": [102, 150, 183, 341, 343], "revert": [102, 170, 242, 243, 324, 358, 362, 455, 469, 476, 479, 483], "loggingcontext": 102, "old_level": 102, "ev": [102, 341], "logctx": 102, "generalis": 102, "subcommand": [102, 120, 469, 475], "scriptnam": 102, "subpars": [102, 120, 475, 480, 483], "add_subpars": [102, 120, 475, 480, 483], "start_cmd": 102, "add_pars": [102, 120, 475], "stop_cmd": 102, "restart_cmd": 102, "log_level": 102, "plural": [102, 230, 469, 480, 483], "rfind": [102, 278, 344, 468, 475, 476, 478, 483], "pyside2": 102, "pyqt5": 102, "qthandler": 102, "qthread": 102, "pyside6": 102, "pyqt6": 102, "qtcore": 102, "qtgui": 102, "qtwidget": 102, "pyqtsign": 102, "pyqtslot": 102, "qobject": 102, "slotfunc": 102, "ctname": 102, "currentthread": [102, 190, 365, 472, 483], "objectnam": 102, "kick": 102, "qthreadnam": 102, "isinterruptionrequest": 102, "1f": [102, 318, 382, 483], "qwidget": 102, "orang": [102, 160, 291, 384, 442, 471, 483], "textedit": 102, "te": 102, "qplaintextedit": 102, "monospac": [102, 247, 364], "qfont": 102, "nosuchfont": 102, "setstylehint": 102, "stylehint": 102, "qt6": 102, "setfont": 102, "setreadon": 102, "pb": [102, 270], "qpushbutton": 102, "work_button": 102, "log_button": 102, "clear_button": 102, "update_status": 102, "fs": [102, 166, 178, 293, 343, 483], "abouttoquit": 102, "force_quit": 102, "lay": [102, 215], "qvboxlayout": 102, "addwidget": 102, "setfixeds": 102, "900": [102, 449], "click": [102, 151, 177, 189, 247, 293, 358, 384, 426, 461, 476, 479, 480, 481, 483], "manual_upd": 102, "clear_display": 102, "start_thread": [102, 362, 483], "seten": 102, "worker_thread": 102, "setobjectnam": 102, "workerthread": 102, "movetothread": 102, "kill_thread": 102, "requestinterrupt": 102, "isrun": 102, "appendhtml": 102, "qapplic": 102, "rc": [102, 106, 176, 208, 296, 348, 355, 362, 399, 411], "exec_": 102, "2009": [102, 183, 319, 340, 390, 426, 463, 469, 471], "3164": 102, "hail": 102, "2003": [102, 183, 267, 413, 423, 451, 465, 468, 483], "widespread": [102, 202, 434, 463, 475], "sysloghandler5424": 102, "tz_offset": 102, "msgid": [102, 200, 209], "isoformat": [102, 183, 190, 340, 425, 465, 479, 480, 483], "has_offset": 102, "hrs": 102, "hostnam": [102, 110, 126, 136, 142, 151, 158, 184, 209, 223, 242, 248, 259, 269, 283, 288, 293, 305, 313, 335, 337, 341, 394, 395, 419, 449, 462, 465, 469, 474, 475, 476, 477, 480, 483], "gethostnam": [102, 107, 142, 293, 337, 483], "procid": 102, "sdata": 102, "structured_data": 102, "sd": 102, "sdid": 102, "dv": [102, 362], "specir": 102, "12345": [102, 176, 225, 440, 442, 465, 471, 479, 483], "bozz": [102, 268], "fizz": 102, "buzz": 102, "54321": [102, 442], "rab": 102, "zab": 102, "zzif": 102, "loggerwrit": 102, "info_fp": 102, "debug_fp": 102, "merci": [102, 428], "slghtli": 102, "bufferingloggerwrit": 102, "52": [102, 104, 106, 139, 183, 275, 318, 319, 341, 345, 382, 442, 444, 466, 469, 483], "unhelp": [102, 462, 483], "garbl": [102, 483], "circumv": 102, "pointless": [102, 483], "decomposit": [102, 387, 483], "appendix": [103, 235, 426], "michel": [103, 464, 465, 476, 477, 478, 479, 480, 481, 482, 483], "simionato": [103, 465], "newbi": [103, 467, 469], "pedagog": 103, "disclaim": [103, 288, 349, 426], "donat": [103, 466], "warranti": [103, 235, 426, 481], "peril": [103, 444], "foley": 103, "imprecis": 103, "goodger": [103, 463, 464, 466], "enthusiast": 103, "felix": [103, 483], "qui": [103, 149], "potuit": 103, "rerum": 103, "cognoscer": 103, "causa": 103, "virgilius": 103, "samuel": [103, 235, 337, 426, 465, 467, 479, 482, 483], "pedroni": [103, 465, 467], "monoton": [103, 126, 131, 134, 169, 190, 325, 343, 366, 440, 465, 476, 478, 483], "he": [103, 158, 297, 319, 365, 435, 462, 479], "agre": [103, 341, 347, 426, 483], "invent": [103, 158, 271, 365, 434, 465, 469], "dylan": [103, 465], "paper": [103, 109, 120, 337, 384, 465, 483], "lisper": 103, "pythonista": 103, "scare": 103, "news": [103, 106, 184, 194, 226, 269, 288, 394, 464, 465, 466, 467, 468, 469, 470, 475, 476, 477, 478, 483, 484], "furthest": 103, "literatur": 103, "c1": [103, 176, 344], "c2": [103, 176], "innocu": [103, 465], "admit": 103, "forbid": [103, 262, 299, 341, 344, 469, 483], "ad": [103, 261, 426, 465], "hoc": 103, "cabxyo": 103, "cn": [103, 158], "b1": [103, 337, 384], "b2": [103, 337, 384], "prescript": 103, "disagr": 103, "drawn": [103, 155, 177, 267, 293, 384, 483], "eo": 103, "fo": [103, 225, 228, 464], "bdeo": 103, "cdfo": 103, "bc": [103, 106, 160, 247, 261, 344, 462], "deo": 103, "dfo": 103, "nice": [103, 120, 140, 144, 151, 169, 176, 193, 225, 270, 293, 322, 335, 338, 344, 403, 428, 462, 475, 476], "coincid": 103, "axyo": 103, "byxo": 103, "ab": [103, 106, 149, 160, 190, 234, 261, 270, 292, 309, 319, 344, 417, 426, 435, 442, 462, 465], "xyo": 103, "yxo": 103, "remember2buy": 103, "goodfood": 103, "buy": [103, 341, 467], "rembermer2buy": 103, "p22": 103, "argu": [103, 462, 464, 469], "gfef": 103, "unclear": [103, 106, 474], "viceversa": 103, "efo": 103, "fe": 103, "gef": 103, "smart": [103, 247, 464, 483], "lesson": 103, "knew": [103, 110, 470], "discern": [103, 234], "p21": 103, "mros": 103, "essay": 103, "k1": [103, 160, 402], "k2": [103, 160, 402], "k3": 103, "dismiss": [103, 247, 384, 483], "favor": [103, 161, 225, 242, 288, 293, 344, 362, 386, 395, 466, 468, 470, 474, 475, 477, 478, 479, 481, 483], "impati": [103, 469], "her": 103, "brain": [103, 466], "hubri": 103, "virtu": [103, 421, 483], "deserv": [103, 271, 462], "prize": 103, "__metaclass__": [103, 112, 464, 468, 470], "metamag": 103, "ex_2": 103, "ex_5": 103, "ex_6": 103, "ex_9": 103, "ncpl": 103, "nonemptyseq": 103, "cand": 103, "nothead": 103, "print_mro": 103, "nmro": 103, "np22": 103, "folk": [103, 452], "enjoy": [103, 413, 474], "2002": [103, 109, 183, 259, 426, 464, 465], "octob": [103, 150, 183, 462, 464, 465, 468, 474, 481, 482], "029035": [103, 465], "doi": 103, "1145": 103, "236337": 103, "236343": 103, "20140210194412": 103, "descrintro": 103, "pablo": [104, 469, 472, 473, 474, 478, 480, 481, 482, 483], "galindo": [104, 472, 473, 474, 480, 481, 482, 483], "interpos": 104, "have_perf_trampolin": 104, "1000000": [104, 167, 183, 221, 225, 283, 308, 367, 441, 469, 479, 483], "my_script": 104, "91": [104, 343], "08": [104, 183, 209, 245, 267, 341, 366, 425, 482, 483], "_start": 104, "90": [104, 147, 155, 261, 283, 318, 343, 384, 481], "71": [104, 382, 474, 483], "__libc_start_main": 104, "88": [104, 183, 343, 382, 478], "pymain_run_python": [104, 483], "constprop": 104, "_pyrun_anyfileobject": 104, "_pyrun_simplefileobject": 104, "run_mod": 104, "54": [104, 139, 318, 332, 343, 423, 465, 472, 473], "65": [104, 288, 318, 332, 343, 344, 449, 462, 468, 469, 478, 483], "_pyeval_vector": [104, 483], "_pylong_add": 104, "97": [104, 109, 122, 225, 278, 344, 469, 475], "_pyobject_malloc": [104, 483], "_py_eval_evalframedefault": 104, "58": [104, 158, 318, 343, 345, 483], "89": [104, 147, 186, 226, 337, 343, 441, 449, 450, 471, 475], "43": [104, 160, 173, 183, 223, 341, 344, 367, 441, 475, 481, 482, 483], "62": [104, 186, 238, 240, 382], "77": [104, 147, 186, 382, 384, 475], "activate_stack_trampolin": [104, 352, 474, 483], "deactivate_stack_trampolin": [104, 352, 474, 483], "do_profiled_stuff": 104, "non_profiled_stuff": 104, "fno": [104, 456, 472, 483], "mno": 104, "leaf": [104, 235, 293, 377, 386, 483], "dwarf": [104, 343, 428], "brett": [105, 308, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483], "cannon": [105, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482], "2020": [105, 344, 425, 426, 469, 472, 473, 480, 481, 482, 483], "373": [105, 469], "discontinu": [105, 366, 483], "digitalocean": 105, "amk": [106, 319, 465, 468, 469], "regex": [106, 163, 220, 266, 302, 319, 359, 388, 463, 467, 468, 475, 477, 480, 483], "tex": 106, "automata": 106, "devot": 106, "akm": 106, "elsewher": [106, 139, 157, 167, 272, 283, 324, 386, 394, 410, 427, 432, 435, 474, 477, 483], "za": [106, 109, 173, 319, 344, 435, 464], "z0": [106, 109, 173, 319, 345, 435], "9_": [106, 109, 319, 435], "dotal": [106, 319], "ct": [106, 107], "caaat": 106, "repetit": [106, 120, 149, 235, 261, 270, 275, 319, 344, 381, 388, 400, 428, 430, 434, 464, 483], "fewer": [106, 108, 247, 261, 319, 340, 376, 432, 465, 467, 470, 477, 479, 480, 481, 483], "bcd": [106, 261], "abcbd": 106, "abcb": 106, "quantifi": [106, 261, 314, 319, 473, 483], "brew": 106, "homebrew": 106, "slash": [106, 221, 225, 253, 255, 259, 292, 293, 296, 313, 358, 377, 394, 422, 423, 461, 483], "reductionist": 106, "bent": 106, "shorter": [106, 202, 225, 235, 261, 292, 347, 430, 462, 463, 466, 468, 469, 474, 475, 483], "ignorecas": [106, 319, 345, 483], "bloat": 106, "latex": [106, 468, 482], "stage": [106, 365, 395, 400, 410, 462, 482, 483], "findal": [106, 160, 319, 413, 451, 477, 483], "findit": [106, 279, 319, 464, 483], "tempo": 106, "clarifi": [106, 344, 467, 468, 475, 477, 483], "drummer": 106, "drum": 106, "piper": 106, "lord": 106, "cook": [106, 177, 359, 483], "callable_iter": 106, "fromag": 106, "thu": [106, 150, 366], "1998": [106, 111, 318, 426], "multilin": [106, 158, 167, 247, 319, 335, 388, 474, 475, 482, 483], "0130": [106, 319], "capit": [106, 109, 186, 319, 344, 345, 386, 387, 427, 430, 462, 480, 482, 483], "0131": [106, 319], "dotless": [106, 319], "017f": [106, 319], "212a": [106, 319], "kelvin": [106, 319], "pam": [106, 483], "french": [106, 109, 366, 478, 480], "unreli": [106, 177, 319, 483], "cultur": [106, 230, 266, 319], "charref": 106, "9a": [106, 319], "fa": [106, 319], "crow": 106, "servo": 106, "cro": 106, "ervo": 106, "etern": [106, 139], "recit": 106, "bclass": 106, "declassifi": 106, "subtleti": [106, 183, 243], "worst": [106, 176, 188, 190, 428, 432, 455, 466, 479, 480, 483], "collis": [106, 235, 289, 330, 461, 472, 477, 481, 482, 483], "x08class": 106, "x08": [106, 347, 398], "dissect": [106, 463, 464], "subgroup": [106, 191, 213, 319, 475, 481, 483], "822": [106, 109, 200, 202, 230, 242, 335, 366, 464], "agent": [106, 110, 271, 272, 335, 352, 395, 396, 464, 468], "thunderbird": 106, "x11": [106, 369, 376, 395, 403, 483], "20061227": 106, "ababababab": 106, "upward": [106, 177, 299, 384], "parenthesi": [106, 112, 122, 247, 427, 431, 466, 483], "abcd": [106, 109, 160, 190, 261, 465, 468, 472], "backrefer": [106, 319, 483], "spring": [106, 183, 225], "keystrok": [106, 155, 177, 333, 462, 469], "chose": [106, 250, 293, 434, 467], "subexpress": [106, 483], "punctuat": [106, 109, 331, 345, 435, 479], "groupdict": [106, 319, 483], "jane": [106, 108], "internald": [106, 248], "mon": [106, 150, 183, 209, 211, 465], "sec": [106, 366, 367, 478, 483], "zonen": 106, "zoneh": 106, "zonem": 106, "autoexec": 106, "bat": [106, 296, 319, 362, 399, 483], "cut": [106, 154, 225, 247, 343, 366, 466, 468, 483], "subn": [106, 319, 469, 471, 474, 478, 483], "sweet": [106, 261], "p2": [106, 176, 261, 284, 348, 427, 441, 466, 472, 473, 478], "leftmost": [106, 147, 160, 190, 193, 226, 235, 319, 430, 466, 480, 481], "shoe": 106, "adjac": [106, 183, 190, 252, 270, 282, 319, 388, 410, 435, 461, 477, 480, 483], "abxd": [106, 319, 480], "carriag": [106, 178, 207, 208, 258, 319, 331, 344, 364, 407, 419, 435, 465, 467], "hexrepl": 106, "65490": 106, "49152": 106, "0xffd2": 106, "0xc000": 106, "bbbb": 106, "deed": 106, "swordfish": 106, "sdeedfish": 106, "bword": 106, "superstit": 106, "insuper": 106, "resist": [106, 235, 332, 463, 469, 476, 483], "temptat": [106, 388, 463], "backtrack": [106, 319, 483], "balanc": [106, 160, 477], "pain": [106, 266, 462, 467, 483], "dirti": 106, "terribl": 106, "neat": [106, 169, 464, 469], "pat": [106, 189, 220, 478], "jeffrey": [106, 319, 341, 468, 469, 472, 473, 475, 483], "friedl": [106, 319], "master": [106, 109, 189, 193, 292, 293, 295, 299, 309, 319, 369, 370, 373, 374, 376, 384, 468, 483], "reilli": [106, 319, 367, 454, 464, 478, 483], "flavour": [106, 109, 250, 296, 358, 390, 467, 483], "inet": [107, 337, 483], "scoket": 107, "berkeley": [107, 184, 470], "serversocket": 107, "snmp": 107, "clientsocket": 107, "client_thread": 107, "peer": [107, 133, 212, 213, 288, 328, 341, 483], "eot": [107, 178], "mysocket": [107, 262], "clariti": [107, 292, 366, 427, 475, 483], "mysend": 107, "totals": 107, "msglen": [107, 337], "myrec": 107, "bytes_recd": 107, "2048": [107, 341, 405, 483], "x86": [107, 176, 300, 347, 456, 461, 468, 473, 480, 483], "amd64": [107, 303, 347, 355, 483], "arm": [107, 478, 483], "risc": [107, 483], "ntohl": [107, 337], "htonl": [107, 337], "ntoh": [107, 337, 472, 480, 483], "hton": [107, 337, 472, 480, 483], "setblock": [107, 293, 329, 337, 341, 483], "o_nonblock": [107, 293, 476, 478, 483], "o_ndelay": [107, 215, 293], "tcp_nodelay": [107, 126, 469, 479, 480, 483], "ready_to_read": 107, "ready_to_writ": 107, "in_error": 107, "potential_read": 107, "potential_writ": 107, "potential_err": 107, "outbound": 107, "andrew": [108, 109, 177, 426, 462, 464, 465, 466, 467, 472, 473, 474, 475, 476, 477, 479, 480, 481, 482, 483], "dalk": [108, 426, 464, 465, 467], "casefold": [108, 109, 120, 143, 160, 261, 344, 476, 478, 481, 483], "student_tupl": 108, "student": [108, 114, 175, 226, 347, 384, 386, 440, 461, 473, 475], "student_object": 108, "ariti": 108, "zo": 108, "bj": 108, "rn": [108, 481], "ez": [108, 230], "lana": 108, "zeke": 108, "abe": 108, "nubia": 108, "elois": 108, "nfd": [108, 109, 387], "nfc": [108, 109, 387, 481], "secondari": [108, 126, 247, 261, 308, 352, 469, 470, 483], "multisort": 108, "xs": 108, "timsort": [108, 475], "lexicograph": [108, 261, 344, 430, 442, 467], "schwartzian": 108, "cmp": [108, 216, 225, 344, 462, 463, 466, 470, 483], "strcoll": [108, 226, 266, 475], "cmp_to_key": [108, 225, 226, 344, 469, 475], "standard_way": 108, "double_revers": 108, "total_ord": [108, 226, 428, 430, 469, 475, 477, 483], "newgrad": 108, "heappush": [108, 236, 452, 465, 468], "heappop": [108, 236, 452, 465, 468], "japanes": [109, 158, 266, 466, 480], "hebrew": [109, 158], "russian": [109, 158], "emoji": [109, 475, 481, 483], "roman": [109, 372, 387, 465, 483], "0x10ffff": [109, 225, 352, 476], "million": [109, 343, 441], "265e": 109, "0x265e": 109, "0061": 109, "0062": 109, "0063": 109, "007b": 109, "cur": [109, 271, 281, 340, 345, 387, 430, 435, 468, 469, 479, 483], "2167": 109, "2168": 109, "nine": [109, 186, 355, 477, 483], "265f": 109, "pawn": 109, "1f600": 109, "grin": 109, "1f609": 109, "wink": 109, "glyph": [109, 208, 247], "diagon": [109, 441, 472], "stroke": [109, 464], "horizont": [109, 177, 178, 375, 376, 384, 435], "toolkit": [109, 261, 369, 439, 459, 462], "114": [109, 122, 225], "0x50": 109, "79": [109, 382, 441], "74": [109, 343, 452, 481, 482], "6f": 109, "6e": [109, 221], "0x00": [109, 178, 191], "ram": [109, 186, 467, 483], "gigabyt": [109, 483], "factor": [109, 141, 161, 193, 235, 261, 292, 314, 344, 386, 388, 430, 431, 441, 464, 469, 476, 480, 482, 483], "intoler": 109, "strcpi": 109, "resynchron": [109, 476], "consortium": [109, 410], "glossari": [109, 181, 483], "chronolog": [109, 126, 479], "computerphil": 109, "youtub": [109, 261], "channel": [109, 117, 133, 141, 176, 201, 212, 268, 283, 295, 336, 337, 341, 349, 464, 476, 479, 480, 481, 482, 483], "tom": [109, 379, 464, 467, 472, 475, 477, 483], "scott": [109, 465, 467, 481, 483], "jukka": [109, 478], "korpela": 109, "introductori": [109, 337, 384, 467], "joel": [109, 479, 483], "spolski": 109, "rudiment": 109, "fichier": 109, "trouv": 109, "pertoir": 109, "greek": [109, 158], "u0394": 109, "u00000394": 109, "xnn": 109, "x80abc": 109, "ufffdabc": 109, "iso_8859_1": 109, "57344": 109, "ue000": 109, "xmlcharrefreplac": [109, 158, 225, 258, 344, 465, 483], "unnnn": 109, "namereplac": [109, 158, 225, 258, 478, 483], "40960": 109, "1972": [109, 340, 465, 466, 467], "xea": 109, "x80": [109, 300, 464], "x80abcd": 109, "xde": 109, "xb4": 109, "ua000": 109, "ua000abcd": 109, "u07b4": 109, "yi": 109, "syllabl": 109, "comfort": [109, 193], "xac": 109, "u1234": [109, 158, 262], "u20ac": [109, 470, 478], "u00008000": 109, "172": [109, 343, 476], "4660": 109, "8364": [109, 225], "32768": [109, 220, 341, 347, 424, 483], "dose": 109, "accent": [109, 331], "inspir": [109, 167, 200, 261, 426, 427, 462, 463, 465, 468, 475, 476, 483], "fifth": [109, 177, 247, 344, 366, 483], "bidirect": [109, 126, 133, 283, 344, 346, 387, 462, 483], "233": [109, 226, 441, 449, 450], "0x0bf2": 109, "3972": [109, 469], "6000": [109, 235, 283], "13231": 109, "00e9": 109, "acut": 109, "0bf2": 109, "tamil": 109, "0f84": 109, "mn": [109, 435], "tibetan": 109, "halanta": 109, "1770": 109, "lo": [109, 147, 344, 386, 435, 471], "tagbanwa": 109, "sa": [109, 150, 183, 337], "33af": 109, "rad": [109, 465], "subcategori": 109, "nonspac": [109, 435], "00ea": 109, "0065": 109, "0302": 109, "circumflex": [109, 377], "german": [109, 158, 266, 344, 384, 477, 483], "00df": 109, "street": [109, 120, 319], "rzenichstra": 109, "rzenichstrass": 109, "inequ": [109, 186, 195, 202, 388, 430, 468, 475], "compare_str": 109, "single_char": 109, "multiple_char": 109, "strs": [109, 386], "nfkc": [109, 346, 387, 394, 435, 483], "nfkd": [109, 387], "caseless": [109, 344, 476], "compare_caseless": 109, "nd": [109, 225, 247, 255, 319, 344, 435], "57": [109, 465, 481, 482, 483], "thai": [109, 158, 426], "arab": [109, 158, 186, 344, 462, 469, 475], "u0e55": 109, "u0e57": 109, "pragmat": 109, "ned": [109, 469, 475, 477, 481, 482, 483], "batcheld": [109, 483], "marc": [109, 230, 340, 462, 463, 464, 465, 467, 476, 483], "andr": [109, 230, 340, 462, 463, 464, 465, 467, 483], "lemburg": [109, 230, 340, 462, 463, 464, 465, 467], "gave": [109, 388, 469, 475, 483], "slide": [109, 411], "europython": 109, "transmiss": [109, 178, 208, 269], "gib": [109, 270, 306, 358, 362, 422, 462, 465, 467, 483], "u4500": 109, "blah": [109, 270, 292], "autodetect": [109, 304, 358, 395, 463, 467], "converg": 109, "u4500abc": 109, "xe4": 109, "x94": [109, 235], "occas": [109, 110, 297, 313, 333, 347, 362, 467, 477], "vulner": [109, 126, 137, 193, 245, 299, 331, 340, 348, 467, 483], "untrust": [109, 190, 245, 268, 283, 299, 312, 314, 330, 332, 358, 411, 412, 413, 414, 419, 420, 422, 465, 468, 483], "attack": [109, 126, 173, 225, 235, 244, 262, 268, 332, 340, 344, 358, 409, 467, 468, 469, 472, 473, 476, 477, 478, 479, 480, 481, 482, 483], "clever": [109, 151, 299, 345, 464], "bytestream": 109, "transpar": [109, 120, 149, 158, 176, 177, 191, 202, 203, 218, 241, 247, 258, 270, 299, 358, 376, 384, 461, 463, 465, 466, 476, 477, 479, 480, 483], "new_f": 109, "getdecod": [109, 158], "getread": [109, 158], "getwrit": [109, 158], "beazley": [109, 464, 475], "gut": [109, 151, 483], "benjamin": [109, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483], "peterson": [109, 468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481], "alexand": [109, 468, 469, 471, 474, 475, 478, 479, 480, 483], "belopolski": [109, 468, 469, 471, 474, 475, 478, 479, 480, 483], "brandl": [109, 467, 468, 469, 471, 475, 476, 478, 479, 483], "ezio": [109, 469, 475, 476, 477, 478], "melotti": [109, 469, 475, 476, 477, 478], "ric": [109, 473, 476, 477, 481, 483], "araujo": [109, 473, 476, 477, 481, 483], "nichola": [109, 465, 472], "bastin": [109, 466], "marius": [109, 462], "gedmina": 109, "kent": [109, 341, 362, 388, 463, 467, 468], "johnson": [109, 467, 468, 483], "ken": [109, 369, 472, 473, 474, 479, 480, 481, 482, 483], "krugler": 109, "martin": [109, 230, 288, 462, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 479, 481, 483], "von": [109, 230, 318, 428, 462, 464, 465, 466, 467, 468, 469, 475, 476, 477, 481], "wis": [109, 230, 288, 462, 464, 465, 466, 467, 468, 469, 475, 476, 477, 481], "terri": [109, 442, 472, 473, 478, 479, 480, 481, 482, 483], "reedi": [109, 465, 472, 473, 478, 479, 480, 481, 482, 483], "serhiy": [109, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483], "storchaka": [109, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483], "eryk": [109, 473, 483], "chad": [109, 465, 467, 468, 483], "whitacr": 109, "graham": [109, 442, 468, 473, 483], "wideman": 109, "michael": [110, 441, 442, 463, 464, 465, 466, 467, 468, 469, 475, 476, 477, 478, 481, 482, 483], "foord": [110, 469, 475], "hypertext": [110, 240, 241, 273, 410], "2616": [110, 242, 393, 395, 407, 475], "namedtemporaryfil": [110, 200, 360, 468, 474, 483], "tmp_file": 110, "the_pag": 110, "transmit": [110, 126, 133, 141, 242, 288, 335, 337, 361, 419, 466, 481], "someserv": 110, "northampton": 110, "upload": [110, 151, 463, 467, 469, 478, 480, 482, 483], "submiss": [110, 151, 283, 314, 426, 462], "hundredweight": 110, "tin": [110, 271, 483], "door": [110, 120, 342], "somebodi": 110, "url_valu": 110, "full_url": [110, 395, 477], "dislik": 110, "user_ag": 110, "win64": [110, 462, 478, 483], "x64": [110, 468], "pretend_serv": 110, "getaddrinfo": [110, 126, 130, 142, 337, 426, 478, 479, 480, 483], "fulfil": [110, 241, 245, 463, 465, 475], "404": [110, 151, 241, 242, 245, 262, 395, 407, 419, 420, 441, 472, 478], "403": [110, 241, 245, 441, 472], "401": [110, 241, 395, 441, 472, 478, 483], "299": [110, 223, 241], "599": [110, 223, 241, 288], "basehttprequesthandl": [110, 242, 245, 393, 407, 475, 476, 483], "shortmessag": [110, 245], "longmessag": [110, 245, 388, 469, 483], "101": [110, 120, 241, 261, 318, 343, 345, 382, 389, 444, 461, 469, 475], "obey": [110, 331, 344, 348, 365, 428, 468], "202": [110, 183, 235, 241], "203": [110, 241], "204": [110, 241, 245, 384], "206": [110, 241], "304": [110, 241, 245, 480], "unauthor": [110, 241], "402": [110, 241, 382], "payment": [110, 261], "charg": [110, 250, 426], "406": [110, 241], "407": [110, 241], "408": [110, 241], "410": [110, 241], "precondit": [110, 341, 343, 464, 475], "413": [110, 241, 483], "415": [110, 241], "media": [110, 153, 281, 293, 319, 426], "416": [110, 241, 382], "417": [110, 241, 245], "502": [110, 241, 466], "503": [110, 241], "504": [110, 241, 344], "respond": [110, 242, 245, 247, 269, 313, 337, 341, 352, 369, 407, 419, 420, 469, 483], "fish": [110, 299, 389, 390, 399, 453, 477, 483], "doctyp": [110, 240, 242, 314, 395, 410, 413, 475, 481, 483], "dtd": [110, 240, 314, 395, 409, 414, 415, 416, 479, 480, 481, 483], "w3": [110, 240, 314, 395, 411, 413, 426, 483], "tr": [110, 177, 240, 301, 314, 395, 411, 413, 426, 483], "xhtml1": [110, 395], "someurl": 110, "brief": [110, 120, 193, 205, 225, 226, 268, 292, 302, 308, 319, 322, 344, 348, 380, 426, 462, 464, 466, 467, 470, 475, 483], "lift": [110, 353, 384, 474, 479, 480, 481], "add_handl": [110, 395], "some_handler_inst": 110, "build_open": [110, 243, 395], "install_open": [110, 395], "realm": [110, 208, 395, 483], "cpanel": 110, "httppasswordmgrwithdefaultrealm": [110, 395], "add_password": [110, 395], "password_mgr": [110, 395], "top_level_url": 110, "a_url": 110, "http_proxi": [110, 395, 483], "httpdefaulterrorhandl": [110, 395], "8080": [110, 242, 243, 337, 395, 419], "userinfo": [110, 395], "joe": [110, 151, 234, 384, 395, 478, 481, 483], "proxy_support": 110, "request_method": [110, 395, 407, 483], "getproxi": [110, 395, 483], "setdefaulttimeout": [110, 337], "voidspac": [110, 469], "uk": [110, 166, 243, 344, 366, 469, 483], "review": [110, 143, 169, 235, 340, 465, 470, 479, 481, 483], "lee": [110, 466, 467, 469, 473, 475, 480, 483], "snif": 110, "sensibl": [110, 120, 126, 167, 183, 235, 255, 292, 365, 394, 430, 466, 469, 479, 480, 483], "msie": [110, 244], "sv1": 110, "clr": 110, "4322": 110, "ie": [110, 205, 218, 240, 243, 248, 278, 292, 395, 419, 478, 483], "aspn": [110, 275], "virtualenv": [111, 399, 461, 476, 483], "somepackag": 111, "wheel": [111, 190, 251, 318, 456, 472, 473, 474, 481, 482, 483], "greet": [112, 305, 335, 340, 386, 478], "raw_input": [112, 157, 470], "diff": [112, 143, 190, 193, 388, 463, 466, 469, 475, 483], "has_key": [112, 177, 462, 463, 464, 465, 470, 483], "beneath": [112, 413, 483], "print_funct": [112, 113, 436, 468], "py3": [112, 453, 471, 475, 483], "mycod": 112, "failunlessequ": [112, 473, 474], "assertequ": [112, 362, 388, 389, 390, 451, 469, 473, 474, 475, 477, 481, 483], "failifequ": [112, 473, 474], "assertnotequ": [112, 388, 473, 474, 475], "failunless": [112, 473, 474], "asserttru": [112, 388, 469, 473, 474, 475], "assert_": [112, 473, 474, 475, 483], "failif": [112, 473, 474], "assertfals": [112, 388, 469, 473, 474], "failunlessrais": [112, 473, 474], "cal": [112, 150, 395, 396], "assertrais": [112, 388, 451, 469, 471, 473, 474, 476, 483], "failunlessalmostequ": [112, 473, 474], "assertalmostequ": [112, 388, 469, 473, 474, 475, 483], "failifalmostequ": [112, 473, 474], "assertnotalmostequ": [112, 388, 469, 473, 474, 475, 483], "basestr": [112, 465, 470, 477], "iteritem": [112, 271, 464, 465, 466, 470, 483], "iterkey": [112, 271, 464, 465, 466, 468, 470, 483], "itervalu": [112, 271, 464, 465, 466, 470, 483], "viewitem": [112, 469], "viewkey": [112, 469], "viewvalu": [112, 469], "execfil": [112, 465, 466, 470, 483], "exitfunc": [112, 462, 466, 470], "funcattr": 112, "my_funct": [112, 441], "func_closur": [112, 470], "__closure__": [112, 428, 470, 483], "new_featur": 112, "getcwdu": [112, 465], "getcwd": [112, 293, 294, 296, 362, 407, 451, 480, 483], "someclass": [112, 299, 386, 389, 390, 462], "some_iter": 112, "imports2": 112, "itertools_import": 112, "ifilt": [112, 465], "izip": [112, 466], "ifilterfals": 112, "methodattr": 112, "im_func": [112, 468], "__nonzero__": [112, 470], "numliter": 112, "iscal": [112, 469, 470, 483], "sequenceinclud": [112, 469, 470], "issequencetyp": 112, "ismappingtyp": 112, "isnumbertyp": 112, "irepeat": 112, "imul": [112, 291], "with_traceback": [112, 213, 436, 483], "maxint": [112, 470], "backtick": [112, 146, 397, 470, 480], "set_liter": 112, "standarderror": [112, 468, 470], "sys_exc": 112, "exc_valu": [112, 352, 362, 365, 381, 428, 469, 470, 473, 483], "exc_typ": [112, 169, 333, 344, 352, 362, 365, 381, 390, 428, 470, 473, 483], "exc_traceback": [112, 352, 362, 365, 381, 470, 473, 483], "tuple_param": 112, "urllib2": [112, 395, 466, 468, 469, 470], "ws_comma": 112, "xrang": [112, 463, 464, 465, 466, 470], "xreadlin": [112, 463, 465, 466], "peg": [112, 431, 472, 473, 474, 482, 483], "617": [112, 431, 472, 473, 482, 483], "parsabl": [112, 476, 482, 483], "libcst": [112, 122, 482], "parso": [112, 122, 482], "nested_scop": [113, 436, 463, 464], "0b1": [113, 483], "0a1": [113, 483], "0a2": [113, 483], "absolute_import": [113, 436, 467], "with_stat": [113, 436, 467, 468], "unicode_liter": [113, 436, 468], "generator_stop": [113, 213, 436, 478, 483], "tbd": [113, 483], "featurenam": [113, 416], "optionalreleas": 113, "mandatoryreleas": [113, 483], "compilerflag": 113, "0a3": [113, 483], "getoptionalreleas": 113, "getmandatoryreleas": 113, "compiler_flag": [113, 225], "steer": [113, 384, 463, 466, 473, 475, 483], "council": [113, 483], "649": [113, 429], "helloworld": [114, 435], "tim": [114, 345, 367, 461, 462, 463, 464, 465, 466, 467, 469, 473, 474, 477, 478, 479, 482, 483], "beauti": [114, 190], "phrase": [114, 241, 242, 248, 272, 292, 395, 430, 434, 435, 465, 468, 476, 478, 483], "bandclass": 114, "search_stud": 114, "student_nam": 114, "did_user_define_their_nam": 114, "my_nam": [114, 389], "print_user_nam": 114, "dinsdal": 114, "jabberwocki": 114, "light": [115, 176, 177, 468, 469, 471, 483], "weight": [115, 160, 176, 202, 318, 343, 345, 372, 479, 483], "locktyp": 115, "start_new_thread": [115, 142, 483], "interrupt_main": [115, 472, 483], "raise_sign": [115, 333, 483], "allocate_lock": 115, "unlock": [115, 138, 215, 271, 282, 283, 305, 362, 365, 428, 467, 483], "get_id": [115, 333, 351, 365, 366, 476], "recycl": [115, 365, 483], "get_native_id": [115, 365, 481, 483], "netbsd": [115, 293, 303, 337, 365, 366, 473, 480, 483], "dragonflybsd": [115, 337, 365, 483], "stack_siz": [115, 365, 467, 483], "768": [115, 365], "timeout_max": [115, 365], "a_lock": 115, "surviv": [115, 176, 402], "abcmeta": [116, 428, 468, 475, 476, 477, 483], "myabc": 116, "get_cache_token": [116, 477], "get_iter": 116, "myiter": [116, 386], "update_abstractmethod": [116, 483], "my_abstract_method": 116, "my_abstract_classmethod": 116, "my_abstract_staticmethod": 116, "my_abstract_properti": 116, "_get_x": 116, "_set_x": 116, "__isabstractmethod__": [116, 476], "_fget": 116, "_fset": 116, "_fdel": 116, "abstractclassmethod": [116, 475, 476], "abstractstaticmethod": [116, 475, 476], "abstractproperti": [116, 468, 476], "594": [117, 141, 151, 152, 153, 173, 249, 272, 281, 287, 288, 295, 301, 336, 339, 349, 359, 397, 408, 473, 474, 483], "mono": [117, 141, 295], "stereo": [117, 141, 295], "quadro": 117, "nchannel": [117, 141, 295, 336, 349, 401], "samples": 117, "framer": [117, 336, 349, 401], "cd": [117, 120, 190, 261, 295, 388, 417, 468], "qualiti": [117, 193, 293, 295, 305, 428, 475, 483], "44": [117, 160, 186, 284, 318, 328, 387, 472, 476, 481, 482], "44100": [117, 295], "176": 117, "seekabl": [117, 149, 258, 401, 422, 468, 483], "ahead": [117, 261, 359, 366, 403, 410, 431, 466, 483], "writeframesraw": [117, 349, 401, 477], "setnfram": [117, 349, 401], "getnchannel": [117, 349, 401], "getsampwidth": [117, 349, 401], "getframer": [117, 349, 401], "getnfram": [117, 349, 401], "getcomptyp": [117, 349, 401], "getcompnam": [117, 349, 401], "getparam": [117, 349, 401, 477], "sampwidth": [117, 336, 349, 401], "nframe": [117, 336, 349, 382, 401, 455], "comptyp": [117, 349, 401], "compnam": [117, 349, 401], "getmark": [117, 349, 401], "readfram": [117, 349, 401], "uncompress": [117, 149, 234, 270, 332, 358, 421, 422, 475, 483], "rewind": [117, 258, 349, 401], "setpo": [117, 349, 384, 401], "writefram": [117, 349, 401, 477], "setnchannel": [117, 349, 401], "setsampwidth": [117, 349, 401, 477], "setframer": [117, 349, 401], "setcomptyp": [117, 349, 401], "ulaw": [117, 336, 349], "alaw": [117, 349], "g722": 117, "setparam": [117, 349, 401], "setmark": 117, "programnam": 120, "store_const": [120, 292, 483], "append_const": [120, 292, 483], "walk": [120, 122, 142, 196, 200, 204, 205, 207, 292, 293, 296, 348, 369, 381, 408, 464, 468, 470, 474, 476, 478, 483], "helpformatt": [120, 292, 483], "myprogram": 120, "subdir": [120, 216, 253, 271, 362, 483], "print_help": [120, 292], "parent_pars": 120, "foo_pars": 120, "bar_pars": 120, "yyy": [120, 432], "rawdescriptionhelpformatt": 120, "rawtexthelpformatt": 120, "metavartypehelpformatt": 120, "weird": 120, "dedent": [120, 247, 364, 377, 378, 427, 431, 435, 483], "nbar": 120, "convert_arg_line_to_arg": 120, "getpreferredencod": [120, 258, 266, 293, 348, 473, 474, 480, 483], "set_default": [120, 292, 483], "foonley": 120, "store_fals": [120, 292], "foon": 120, "argumenterror": [120, 176, 483], "_storeact": 120, "option_str": 120, "f1": [120, 190, 216, 268, 283, 344, 427, 440, 483], "f2": [120, 190, 216, 283, 344, 427, 483], "f4": [120, 464], "booleanoptionalact": [120, 474, 483], "format_usag": [120, 483], "fooaction": 120, "yy": 120, "infil": [120, 122, 140, 191, 262, 301, 331, 380, 452, 471, 475, 483], "_io": [120, 188, 475, 479, 483], "argumenttypeerror": 120, "distanc": [120, 155, 270, 275, 343, 369, 384, 473, 481, 483], "code_point": 120, "source_fil": 120, "dest_fil": 120, "datapath": 120, "short_titl": 120, "tale": 120, "citi": [120, 341, 396, 426, 483], "downstream": [120, 267, 425, 483], "jsondecodeerror": [120, 262, 478, 483], "scissor": 120, "frobbl": 120, "infer": [120, 161, 193, 225, 226, 268, 283, 302, 366, 381, 386, 479, 483], "foo_bar": [120, 292, 390], "xyzz": 120, "badger": 120, "inher": [120, 365, 413, 483], "cautious": [120, 271, 394], "1s": [120, 483], "bacon": [120, 160, 190, 250, 279, 344, 381, 395, 428], "bac": 120, "mmm": [120, 248], "ba": [120, 255, 261, 422, 478], "parser_class": 120, "checkout": [120, 461, 469, 483], "cmd1": 120, "cmd2": 120, "parser_a": 120, "parser_b": 120, "parser_foo": 120, "parser_bar": 120, "xyzyx": 120, "subparser_nam": 120, "subparser1": 120, "subparser2": 120, "dat": [120, 184, 461], "add_argument_group": [120, 483], "group1": [120, 319, 443], "group2": [120, 443], "exclusive_group": 120, "736": 120, "get_default": 120, "print_usag": [120, 292], "format_help": 120, "parse_known_arg": [120, 483], "arg_lin": 120, "myargumentpars": 120, "errorcatchingargumentpars": 120, "parse_intermixed_arg": [120, 480, 483], "parse_known_intermixed_arg": 120, "unpars": [120, 122, 199, 251, 314, 413, 415, 482, 483], "doit": 120, "monkey": [120, 386, 389, 390, 474, 483], "optionpars": [120, 292, 465, 467], "add_opt": [120, 292, 465], "disable_interspersed_arg": [120, 292], "callback_": 120, "optionerror": [120, 292], "optionvalueerror": [120, 292], "typecod": [121, 142, 283, 385, 470, 483], "frombyt": [121, 337, 475, 482, 483], "fromunicod": 121, "buffer_info": 121, "byteswap": [121, 141, 477], "fromfil": [121, 190, 470], "fromstr": [121, 413, 475, 482, 483], "unicodestr": 121, "enc": [121, 341], "tobyt": [121, 344, 469, 475, 482, 483], "tofil": [121, 190, 470], "tostr": [121, 413, 469, 475, 477, 482, 483], "tolist": [121, 344, 464, 469, 475], "u2641": 121, "asdl": [122, 467, 472, 482, 483], "stmt": [122, 367, 468, 483], "type_ignor": [122, 377], "argtyp": [122, 176, 483], "functiondef": [122, 483], "decorator_list": 122, "type_com": [122, 377, 431, 481, 483], "type_param": [122, 386, 427, 431, 436, 483], "asyncfunctiondef": [122, 483], "classdef": [122, 427, 483], "augassign": [122, 431], "annassign": 122, "orels": [122, 468], "asyncfor": [122, 483], "withitem": 122, "asyncwith": [122, 483], "match_cas": 122, "excepthandl": 122, "finalbodi": 122, "trystar": 122, "importfrom": [122, 483], "end_lineno": [122, 191, 213, 381, 431, 472, 481, 483], "end_col_offset": [122, 191, 431, 481, 483], "boolop": 122, "namedexpr": 122, "binop": [122, 468, 483], "unaryop": 122, "ifexp": 122, "elt": 122, "setcomp": [122, 431], "dictcomp": [122, 431], "generatorexp": 122, "yieldfrom": 122, "cmpop": 122, "formattedvalu": [122, 483], "joinedstr": [122, 483], "expr_context": 122, "mult": [122, 431], "matmult": [122, 431], "lshift": [122, 291, 431], "rshift": [122, 291, 431], "bitor": [122, 431], "bitxor": [122, 431], "bitand": [122, 431], "uadd": [122, 431], "usub": [122, 431], "noteq": [122, 431], "lte": [122, 431], "gte": [122, 431], "isnot": [122, 431], "notin": [122, 431], "ifs": 122, "is_async": [122, 312, 483], "posonlyarg": [122, 483], "vararg": [122, 255, 483], "kwonlyarg": [122, 255], "kw_default": 122, "asnam": 122, "context_expr": 122, "optional_var": 122, "matchvalu": [122, 483], "matchsingleton": [122, 483], "matchsequ": [122, 483], "matchmap": [122, 483], "matchclass": [122, 483], "kwd_attr": 122, "kwd_pattern": 122, "matchstar": [122, 483], "matcha": [122, 483], "matchor": [122, 483], "typeignor": [122, 483], "typevar": [122, 191, 344, 351, 385, 386, 427, 473, 474, 483], "paramspec": [122, 191, 344, 386, 427, 431, 472, 474, 483], "typevartupl": [122, 191, 344, 386, 427, 431, 473, 474, 483], "_ast": [122, 467, 475, 483], "_field": [122, 160, 386, 468, 469, 483], "source_lin": 122, "nameconst": [122, 474, 481, 483], "extslic": [122, 482, 483], "snake": [122, 160], "func_typ": [122, 431, 481], "115": [122, 261, 345, 382, 483], "sin": [122, 154, 186, 275, 428, 465], "soc": 122, "otherexcept": [122, 213], "point2d": [122, 386], "point3d": [122, 160, 386], "ts": [122, 177, 232, 384, 386, 427, 467, 474, 483], "decorator1": 122, "decorator2": 122, "3115": [122, 385, 427, 428, 470, 476], "base1": [122, 440], "base2": [122, 440], "other_func": 122, "feature_vers": [122, 377, 481, 483], "pycf_type_com": 122, "ast_obj": 122, "literal_ev": [122, 225, 468, 475, 480, 483], "node_or_str": 122, "get_docstr": [122, 483], "cleandoc": [122, 255], "get_source_seg": [122, 481, 483], "fix_missing_loc": [122, 483], "increment_lineno": [122, 483], "copy_loc": 122, "new_nod": 122, "old_nod": 122, "iter_field": 122, "fieldnam": [122, 160, 175, 468, 471, 483], "iter_child_nod": 122, "nodevisitor": [122, 468, 481, 483], "generic_visit": 122, "visit_const": [122, 481, 483], "nodetransform": [122, 468, 483], "visit_num": [122, 481, 483], "visit_str": [122, 481, 483], "visit_byt": [122, 481], "visit_nameconst": [122, 481], "visit_ellipsi": [122, 481], "rewritenam": 122, "visit_nam": 122, "new_tre": 122, "yourtransform": 122, "annotate_field": 122, "include_attribut": 122, "pycf_allow_top_level_await": [122, 225, 481, 482, 483], "asttoken": 122, "leoast": 122, "codemod": 122, "emscripten": [123, 151, 163, 166, 173, 210, 215, 223, 229, 233, 242, 245, 248, 257, 278, 283, 287, 288, 293, 305, 310, 322, 328, 329, 333, 335, 337, 338, 339, 341, 348, 352, 356, 359, 365, 395, 399, 403, 419, 420, 425, 456, 473, 483], "wasi": [123, 151, 163, 166, 173, 210, 212, 213, 215, 223, 229, 233, 242, 245, 248, 257, 278, 283, 287, 288, 293, 305, 310, 322, 328, 329, 333, 335, 337, 338, 339, 341, 348, 352, 356, 359, 365, 395, 399, 403, 419, 420, 425, 456, 473, 483], "wasm32": [123, 151, 163, 166, 173, 210, 223, 229, 242, 245, 248, 257, 278, 283, 287, 288, 293, 305, 328, 329, 333, 335, 337, 338, 339, 341, 348, 352, 359, 365, 395, 399, 403, 419, 420, 425, 456, 473, 483], "taskgroup": [124, 139, 473, 483], "create_task": [124, 125, 126, 128, 129, 130, 134, 138, 139, 473, 478, 480, 481, 483], "current_task": [124, 128, 139, 474, 480, 482, 483], "all_task": [124, 128, 139, 480, 482, 483], "wait_for": [124, 134, 137, 138, 139, 283, 365, 473, 481, 482, 483], "to_thread": [124, 139, 482, 483], "run_coroutine_threadsaf": [124, 125, 139, 472, 478, 479, 483], "as_complet": [124, 129, 139, 166, 474, 481, 483], "fifo": [124, 134, 160, 261, 283, 293, 296, 316, 329, 342, 358, 479, 480, 483], "priorityqueu": [124, 134, 316, 344, 468, 483], "lifoqueu": [124, 134, 316, 344, 468, 483], "create_subprocess_exec": [124, 126, 132, 137, 348, 481, 483], "create_subprocess_shel": [124, 126, 137, 481, 483], "open_connect": [124, 126, 133, 136, 478, 480, 483], "open_unix_connect": [124, 136], "start_serv": [124, 126, 133, 136, 170, 365, 480, 483], "start_unix_serv": [124, 126, 136], "cancellederror": [124, 127, 129, 135, 138, 139, 166, 481, 483], "brokenbarriererror": [124, 138, 365, 473, 475], "pythonasynciodebug": [125, 126, 188, 455, 483], "set_debug": [125, 126, 130, 227, 478], "threadsaf": [125, 226, 261, 267, 318, 483], "call_at": [125, 126, 130, 480], "slow_callback_dur": [125, 126], "call_soon_threadsaf": [125, 126, 130, 480, 483], "fut": [125, 129], "coro_func": 125, "run_in_executor": [125, 126, 130, 139, 482, 483], "coro": [125, 126, 128, 135, 139, 478, 483], "set_except": [125, 129, 139, 142, 166, 176, 479, 483], "321": [125, 186], "source_traceback": 125, "base_ev": [126, 352, 430, 483], "prefac": [126, 133], "get_running_loop": [126, 129, 130, 133, 136, 139, 480, 483], "get_event_loop": [126, 130, 132, 474, 478, 479, 480, 483], "get_event_loop_polici": [126, 130, 132], "set_event_loop": [126, 130, 131, 132, 135, 481, 483], "new_event_loop": [126, 130, 132, 135, 481], "timerhandl": [126, 483], "create_serv": [126, 130, 133, 136, 337, 478, 479, 480, 481, 483], "selectoreventloop": [126, 131, 132, 137, 473, 483], "proactoreventloop": [126, 131, 132, 137, 473, 481, 483], "showcas": [126, 133], "run_until_complet": [126, 130, 478, 479, 481, 483], "run_forev": [126, 130, 483], "is_run": [126, 130], "is_clos": [126, 130, 133, 136, 478, 479, 480, 483], "idempot": [126, 133, 167, 226, 474, 480, 483], "irrevers": 126, "shutdown_asyncgen": [126, 130, 352, 430, 479, 483], "aclos": [126, 161, 169, 430, 472, 482, 483], "shutdown_default_executor": [126, 135, 482, 483], "567": [126, 129, 170, 186, 345, 452, 471, 480, 483], "create_futur": [126, 128, 129, 130, 133, 478, 479, 483], "instrument": [126, 191, 226, 308, 456, 475, 479, 483], "set_task_factori": [126, 130, 139, 478, 483], "get_task_factori": [126, 130, 478, 483], "create_connect": [126, 128, 130, 133, 136, 337, 341, 468, 469, 473, 475, 478, 480, 481, 483], "protocol_factori": [126, 133], "proto": [126, 136, 300, 337, 386, 395], "local_addr": [126, 133, 136], "server_hostnam": [126, 136, 341, 475, 480, 483], "ssl_handshake_timeout": [126, 136, 480], "ssl_shutdown_timeout": [126, 136, 483], "happy_eyeballs_delay": [126, 136, 481, 483], "all_error": [126, 223, 337, 473, 483], "af_inet6": [126, 337, 483], "synopsi": [126, 313, 341, 483], "connection_mad": [126, 130, 133, 483], "sslcontext": [126, 133, 136, 223, 242, 248, 269, 288, 305, 335, 341, 395, 419, 469, 472, 474, 475, 476, 477, 478, 479, 480, 483], "create_default_context": [126, 341, 395, 469, 477, 483], "eyebal": [126, 481, 483], "8305": 126, "250": [126, 223, 308, 335, 340, 384, 469], "local_host": 126, "local_port": 126, "handshak": [126, 136, 341, 477, 478, 479, 480, 481, 483], "60": [126, 136, 147, 155, 166, 183, 186, 196, 261, 307, 318, 341, 343, 366, 381, 382, 384, 398, 435, 465, 467, 473, 475, 479, 481, 483], "dual": [126, 337, 426, 435, 483], "undesir": [126, 341, 463, 467, 483], "datatrack": 126, "ietf": [126, 235, 259, 341, 347], "rfc6555": 126, "create_datagram_endpoint": [126, 130, 133, 473, 479, 480, 481, 482, 483], "remote_addr": [126, 133], "reuse_port": [126, 136, 337], "allow_broadcast": 126, "af_unix": [126, 131, 283, 337, 338, 483], "sock_dgram": [126, 269, 337, 338, 469], "remote_host": 126, "remote_port": 126, "endpoint": [126, 133, 212, 242, 337, 384, 475, 483], "so_reuseport": [126, 337, 362, 483], "broadcast": [126, 259, 337, 483], "preexist": 126, "reuse_address": [126, 136, 473, 479, 480, 481, 482, 483], "so_reuseaddr": [126, 337, 362, 473, 479, 480, 481, 482, 483], "pose": [126, 462, 466], "uid": [126, 142, 151, 245, 248, 293, 296, 304, 305, 310, 322, 332, 342, 358, 468, 469, 476, 478, 481, 483], "incom": [126, 133, 213, 245, 262, 283, 338, 341, 412, 474, 475, 483], "packet": [126, 133, 141, 259, 269, 337, 338, 419, 469, 483], "create_unix_connect": [126, 130, 131, 133, 136, 483], "af_unspec": [126, 136, 337], "ai_pass": [126, 136, 337], "backlog": [126, 136, 283, 337, 478, 483], "time_wait": [126, 337], "expir": [126, 139, 212, 243, 244, 283, 325, 329, 333, 335, 337, 339, 348, 365, 366, 395, 476, 483], "serve_forev": [126, 133, 136, 170, 245, 283, 333, 338, 407, 419, 420, 467, 468, 476, 480, 483], "create_unix_serv": [126, 130, 131, 133, 136, 480, 483], "connect_accepted_socket": [126, 130, 133, 472, 479, 483], "sendfil": [126, 127, 130, 133, 293, 332, 337, 341, 407, 476, 478, 480, 483], "sendfilenotavailableerror": [126, 127], "start_tl": [126, 130, 136, 473, 480, 483], "server_sid": [126, 341], "coder": [126, 141], "sporad": [126, 293], "add_read": [126, 130, 131, 133, 136, 483], "remove_read": [126, 130], "add_writ": [126, 130, 131, 483], "remove_writ": [126, 130], "sock_recv": [126, 130, 480, 483], "sock_recv_into": [126, 130, 480, 483], "recv_into": [126, 337, 341, 467, 469, 483], "sock_recvfrom": [126, 130, 473, 483], "recvfrom": [126, 337, 369, 478, 483], "sock_recvfrom_into": [126, 130, 473, 483], "recvfrom_into": [126, 337, 467, 469], "sock_sendal": [126, 130, 480, 483], "sendal": [126, 337, 338, 341, 478, 483], "sock_sendto": [126, 130, 473, 483], "sendto": [126, 130, 133, 142, 337, 338, 478, 483], "sock_connect": [126, 130, 478, 483], "inet_pton": [126, 259, 337, 477, 481, 482, 483], "sock_accept": [126, 130, 480, 483], "sock_sendfil": [126, 130, 480, 483], "getnameinfo": [126, 130, 142, 337, 426, 480, 483], "sockaddr": [126, 142, 337], "connect_read_pip": [126, 130, 131, 133, 137, 483], "readtransport": [126, 133, 480, 483], "connect_write_pip": [126, 130, 131, 133, 137, 483], "writetransport": [126, 133, 483], "subprocess_shel": [126, 130, 131, 133, 137], "add_signal_handl": [126, 130, 131, 483], "uncatch": 126, "remove_signal_handl": [126, 130, 131], "blocking_io": [126, 139], "urandom": [126, 235, 283, 293, 318, 341, 466, 469, 473, 474, 477, 478, 479, 483], "cpu_bound": 126, "set_default_executor": [126, 130, 473, 481, 483], "set_exception_handl": [126, 130], "call_exception_handl": [126, 130], "get_exception_handl": [126, 130, 478, 479, 483], "default_exception_handl": [126, 130], "asyncgen": 126, "get_debug": [126, 130, 227, 478], "devnul": [126, 137, 283, 293, 333, 348, 476, 483], "universal_newlin": [126, 137, 348, 466, 480, 483], "subprocesstransport": [126, 133], "get_context": [126, 139, 166, 283, 474, 477, 483], "srv": [126, 170, 480], "wait_clos": [126, 136, 480, 483], "get_loop": [126, 129, 135, 480, 483], "client_connect": 126, "is_serv": [126, 480, 483], "trsock": [126, 483], "transportsocket": [126, 483], "ship": [126, 132, 184, 250, 253, 369, 388, 421, 461, 462, 465, 469, 471, 475, 477, 478, 482, 483], "mypolici": [126, 476], "defaulteventlooppolici": [126, 132, 483], "selectselector": [126, 131, 329], "set_event_loop_polici": [126, 130, 132], "iocp": [126, 483], "msdn": [126, 293], "abstracteventloop": [126, 128, 132, 482, 483], "hello_world": 126, "reschedul": [126, 139], "display_d": [126, 139], "end_tim": [126, 139], "socketpair": [126, 133, 136, 333, 337, 466, 480, 483], "rsock": [126, 133, 136], "wsock": [126, 133, 136], "unregist": [126, 128, 140, 158, 214, 293, 328, 329, 332, 353, 369, 402, 472, 482, 483], "recept": [126, 133, 136], "ask_exit": 126, "signam": [126, 333], "3600": [126, 133, 139, 169, 183], "invalidstateerror": [127, 129, 139, 166, 483], "incompletereaderror": [127, 136, 483], "limitoverrunerror": [127, 136, 483], "baseeventloop": [128, 483], "_make_socket_transport": 128, "_register_task": [128, 483], "_unregister_task": [128, 483], "_enter_task": [128, 483], "_leave_task": [128, 483], "base_futur": 129, "isfutur": [129, 483], "_asyncio_future_block": 129, "ensure_futur": [129, 139, 478, 479, 483], "iscoroutin": [129, 139, 255, 474, 478, 483], "isawait": [129, 161, 255, 389, 478, 483], "wrap_futur": [129, 483], "set_result": [129, 133, 139, 166, 483], "add_done_callback": [129, 139, 166, 480, 483], "remove_done_callback": [129, 139, 483], "set_aft": 129, "excutor": 130, "get_extra_info": [130, 133, 136, 170, 481, 483], "set_protocol": [130, 133, 483], "get_protocol": [130, 133, 483], "is_read": [130, 133, 480, 483], "pause_read": [130, 133, 480, 483], "resume_read": [130, 133, 480, 483], "writelin": [130, 133, 136, 158, 190, 258, 462, 483], "can_write_eof": [130, 133, 136], "write_eof": [130, 133, 136, 341, 483], "get_write_buffer_s": [130, 133], "get_write_buffer_limit": [130, 133, 478, 483], "water": [130, 328, 478, 483], "set_write_buffer_limit": [130, 133], "get_pid": [130, 133], "get_pipe_transport": [130, 133], "get_returncod": [130, 133], "send_sign": [130, 133, 137, 348, 468, 483], "connection_lost": [130, 133, 483], "pause_writ": [130, 133], "resume_writ": [130, 133], "data_receiv": [130, 133, 483], "eof_receiv": [130, 133], "get_buff": [130, 133, 408], "buffer_upd": [130, 133], "datagram_receiv": [130, 133], "error_receiv": [130, 133], "pipe_data_receiv": [130, 133, 483], "pipe_connection_lost": [130, 133], "process_exit": [130, 133, 483], "abstracteventlooppolici": [130, 132, 474, 483], "proactor_ev": 131, "windows_ev": [131, 483], "windows_util": [131, 480, 483], "hpet": 131, "set_child_watch": [131, 132, 474, 483], "kqueueselector": [131, 329, 483], "pollselector": [131, 329, 480], "get_child_watch": [132, 474, 483], "abstractchildwatch": [132, 474, 483], "windowsselectoreventlooppolici": [132, 480, 483], "windowsproactoreventlooppolici": [132, 480, 483], "threadedchildwatch": [132, 137, 474], "multiloopchildwatch": [132, 474, 483], "safechildwatch": [132, 474, 483], "fastchildwatch": [132, 474, 483], "prohibit": [132, 193, 258, 262, 341, 430, 480, 481, 482, 483], "add_child_handl": 132, "returncod": [132, 133, 137, 348, 478, 481, 483], "remove_child_handl": 132, "attach_loop": [132, 483], "detach": [132, 142, 149, 258, 270, 293, 337, 341, 376, 402, 405, 430, 475, 476, 483], "is_act": [132, 232], "inact": [132, 137, 441, 468, 483], "sigchld": [132, 293, 333], "disrupt": [132, 474, 483], "reap": [132, 483], "waitpid": [132, 257, 293, 309, 467, 477, 478, 483], "pidfdchildwatch": [132, 474, 482, 483], "pidfd": [132, 333, 483], "goldilock": 132, "launch": [132, 186, 283, 293, 348, 352, 362, 403, 461, 462, 475, 476, 477, 481, 483], "scale": [132, 318, 328, 343, 376, 386, 462, 465, 468, 479, 480, 483], "myeventlooppolici": 132, "eventloop": [132, 483], "extent": [133, 155, 235, 258, 278, 376, 384, 426, 471, 483], "basetransport": [133, 136, 481], "datagramtransport": [133, 483], "baseprotocol": 133, "bufferedprotocol": [133, 480, 481, 483], "datagramprotocol": [133, 473], "outgo": [133, 200, 337, 341, 474, 475, 476], "getsockopt": [133, 337, 341, 469, 479], "peernam": [133, 136], "getpeernam": [133, 170, 337, 341], "socknam": [133, 483], "getsocknam": [133, 136, 337, 341, 483], "sslsocket": [133, 341, 469, 472, 477, 478, 479, 480, 482, 483], "peercert": 133, "getpeercert": [133, 341, 468, 477, 483], "ssl_object": 133, "sslobject": [133, 341, 386, 478, 480, 483], "watermark": [133, 136], "opportun": [133, 139, 158, 325, 461, 483], "list_of_data": 133, "addr": [133, 136, 151, 170, 259, 329, 337, 341, 362, 420, 475, 478, 483], "sigkil": [133, 137, 283, 293, 333, 348, 360, 466, 480, 483], "terminateprocess": [133, 137, 142, 283, 293, 348, 468, 469, 483], "unidirect": [133, 283], "drain": [133, 136, 138, 341, 475, 483], "reassembl": 133, "sizehint": [133, 158, 328, 483], "recipi": [133, 200, 208, 209, 335, 338, 426], "undeliver": 133, "enobuf": [133, 212, 483], "echoserverprotocol": 133, "8888": [133, 136], "echoclientprotocol": 133, "on_con_lost": 133, "myprotocol": 133, "dateprotocol": 133, "exit_futur": 133, "pipe_clos": 133, "check_for_exit": 133, "get_dat": [133, 137, 271], "qsize": [134, 283, 316], "get_nowait": [134, 283, 316], "queueempti": 134, "task_don": [134, 283, 316, 467, 478, 483], "unblock": [134, 138, 283, 333, 483], "queueful": 134, "priority_numb": [134, 316], "sleep_for": 134, "slept": 134, "workload": [134, 482, 483], "total_sleep_tim": 134, "started_at": 134, "total_slept_for": 134, "return_except": [134, 139, 483], "loop_factori": [135, 474, 483], "tcp_echo_cli": 136, "client_connected_cb": [136, 483], "feed_eof": [136, 483], "readexact": [136, 479, 483], "readuntil": [136, 478, 479, 483], "at_eof": 136, "handle_echo": 136, "print_http_head": 136, "urlsplit": [136, 394, 469, 479, 483], "wait_for_data": 136, "base_subprocess": 137, "proc": [137, 240, 293, 348, 479, 483], "zzz": [137, 432], "stdout_data": [137, 348, 466], "stderr_data": [137, 348, 466], "ctrl_c_event": [137, 293, 333, 348, 469], "ctrl_break_ev": [137, 293, 333, 348, 469], "creationflag": [137, 348, 466], "create_new_process_group": [137, 348], "waiter_task": 138, "is_set": [138, 365, 472, 483], "codit": 138, "notify_al": [138, 365, 472, 483], "sem": 138, "example_barri": 138, "housekeep": [138, 365], "n_wait": [138, 365], "0x1053bb7c8": 139, "say_aft": 139, "task1": [139, 452], "task2": [139, 452], "tg": 139, "function_that_returns_a_future_object": 139, "some_python_coroutin": 139, "leverag": [139, 252, 283, 477, 482], "mid": [139, 483], "background_task": 139, "some_coro": 139, "forev": [139, 309, 328, 463, 464, 465, 466, 476, 483], "misbehav": [139, 483], "uncancel": [139, 473, 483], "another_coro": 139, "bubbl": [139, 427, 483], "baseexceptiongroup": [139, 169, 213, 381, 427, 473, 483], "aws": [139, 483], "aggreg": [139, 261, 340, 388, 473, 483], "stronger": [139, 483], "subtask": 139, "eager_task_factori": [139, 474, 483], "employ": [139, 151, 283, 293, 412, 432, 476], "create_eager_task_factori": [139, 474], "custom_task_constructor": 139, "aw": [139, 483], "long_running_task": 139, "deadlin": [139, 325], "overdu": 139, "new_deadlin": 139, "timeout_at": [139, 483], "yay": [139, 449], "return_when": [139, 166], "all_complet": [139, 166], "first_complet": [139, 166], "first_except": [139, 166], "earliest": [139, 183, 190, 366], "earliest_result": 139, "took": [139, 169, 308, 462, 483], "eager_start": 139, "get_stack": [139, 144, 483], "oldest": [139, 227, 269, 365, 382, 402, 469, 475, 480, 481, 483], "newest": 139, "print_stack": [139, 267, 381, 478, 483], "get_coro": [139, 481, 483], "get_nam": [139, 351, 481, 483], "deni": [139, 212, 338, 428, 465, 483], "cancel_m": 139, "ineffect": [139, 477], "make_request_with_timeout": 139, "make_request": 139, "make_another_request": 139, "unrelated_cod": 139, "fashion": [139, 170, 234, 262, 283, 308, 319, 337, 381, 413, 427, 428, 430, 466, 469, 476, 477, 483], "suppres": 139, "_exit": [140, 213, 214, 293], "unregistr": [140, 329], "counterfil": 140, "_count": 140, "incrcount": 140, "savecount": 140, "adject": [140, 446], "donni": 140, "sector": 140, "law": [141, 235, 336, 343, 349, 366, 426, 467, 483], "dvi": 141, "adpcm": 141, "fragment1": 141, "fragment2": 141, "adpcm2lin": [141, 483], "adpcmfrag": 141, "lin2adpcm": [141, 483], "newstat": 141, "alaw2lin": 141, "avg": 141, "avgpp": 141, "bias": [141, 196, 205, 308, 318, 465, 475], "findfactor": 141, "rms": 141, "proport": [141, 167, 318, 343, 483], "findfit": 141, "findmax": 141, "energi": 141, "maxim": [141, 190, 191, 196, 235, 247, 362, 440, 481, 483], "getsampl": 141, "wherebi": [141, 151, 268, 299, 483], "ima": 141, "lin2alaw": 141, "lin2lin": 141, "newwidth": 141, "new_fram": 141, "old_width": 141, "lin2ulaw": 141, "maxpp": 141, "minmax": 141, "ratecv": [141, 483], "inrat": 141, "outrat": 141, "weighta": 141, "weightb": [141, 483], "newfrag": 141, "sqrt": [141, 154, 166, 186, 275, 343, 466, 467, 468, 475, 481, 483], "s_i": 141, "tomono": 141, "lfactor": 141, "rfactor": 141, "tostereo": 141, "ulaw2lin": 141, "recombin": [141, 476], "mul_stereo": 141, "lsampl": 141, "rsampl": 141, "toler": [141, 154, 184, 259, 275, 478, 480, 483], "loss": [141, 186, 225, 243, 258, 271, 275, 366, 395, 421, 426, 430, 464, 466, 468, 475, 479, 480, 481, 483], "predict": [141, 225, 258, 352, 413, 428, 455, 461, 475, 482, 483], "misinterpret": 141, "energet": 141, "echocancel": 141, "outputdata": 141, "inputdata": 141, "800": [141, 235, 270, 467, 469, 472, 475, 479, 483], "out_test": 141, "in_test": 141, "ipo": 141, "prefil": 141, "postfil": 141, "breakpointhook": [142, 225, 352, 450, 455, 480, 483], "run_fil": [142, 455], "run_interactivehook": [142, 352], "run_startup": [142, 455], "run_stdin": [142, 455], "addressof": [142, 176], "func_point": 142, "cdata": [142, 176, 314, 410, 415, 416, 483], "create_string_buff": [142, 176, 467], "create_unicode_buff": [142, 176, 483], "dlopen": [142, 176, 293, 352, 456, 464, 467, 483], "dlsym": [142, 176], "get_errno": [142, 176, 468], "get_last_error": [142, 176, 468], "set_errno": [142, 176, 468], "set_last_error": [142, 176, 468], "string_at": [142, 176, 214, 476], "wstring_at": [142, 176], "code_object": [142, 225, 483], "flock": [142, 215, 271, 483], "lockf": [142, 215, 271, 293, 464, 468, 476, 483], "whenc": [142, 153, 215, 258, 278, 293, 446, 464], "sendcmd": [142, 223], "get_object": [142, 227, 472, 481, 483], "get_referr": [142, 227, 382, 472, 483], "root_dir": [142, 231, 332, 472, 474, 483], "dir_fd": [142, 225, 231, 293, 332, 472, 473, 476, 483], "get_osfhandl": [142, 282], "open_osfhandl": [142, 282], "putlin": [142, 288, 305, 483], "add_dll_directori": [142, 293, 481, 483], "chdir": [142, 169, 293, 332, 352, 451, 473, 475, 476, 482, 483], "chflag": [142, 293, 332, 342, 468, 476, 483], "gid": [142, 233, 293, 296, 310, 358, 468, 469, 476, 478, 483], "forkpti": [142, 293, 483], "fwalk": [142, 293, 476, 480, 483], "topdown": [142, 293], "onerror": [142, 293, 302, 332, 474, 480, 483], "follow_symlink": [142, 293, 296, 332, 472, 476, 483], "getxattr": [142, 293, 476], "killpg": [142, 293, 465, 483], "pgid": [142, 293], "src_dir_fd": [142, 293], "dst_dir_fd": [142, 293], "listdriv": [142, 293, 474, 483], "listmount": [142, 293, 474, 483], "listvolum": [142, 293, 474, 483], "listxattr": [142, 293, 476], "putenv": [142, 293, 306, 482, 483], "removexattr": [142, 293, 476], "setxattr": [142, 293, 476, 483], "startfil": [142, 293, 483], "show_cmd": [142, 293], "unsetenv": [142, 293, 468, 482, 483], "utim": [142, 293, 332, 476, 483], "ns": [142, 293, 314, 382, 385, 398, 413, 473, 483], "followlink": [142, 293, 468], "rglob": [142, 296, 473, 474, 483], "find_class": [142, 299], "prlimit": [142, 322, 477, 483], "setrlimit": [142, 322, 362, 483], "copymod": [142, 332, 483], "copystat": [142, 332, 476, 483], "make_arch": [142, 332, 469, 474, 475, 478, 481, 483], "base_nam": [142, 332], "unpack_arch": [142, 332, 472, 473, 474, 475, 481, 482, 483], "extract_dir": [142, 332], "pthread_kil": [142, 293, 333, 476], "thread_id": [142, 333, 366, 483], "signalnum": [142, 333], "gethostbyaddr": [142, 293, 337, 483], "gethostbynam": [142, 337], "getservbynam": [142, 337, 483], "servicenam": [142, 337], "protocolnam": [142, 337], "getservbyport": [142, 337, 466, 483], "sendmsg": [142, 337, 474, 476, 478, 483], "sethostnam": [142, 337, 476], "connection_handl": [142, 340], "enable_load_extens": [142, 340, 456, 469, 472, 475, 483], "load_extens": [142, 340, 469, 472, 474, 475, 483], "_current_except": [142, 352, 474, 483], "_current_fram": [142, 352, 450, 467], "_getframemodulenam": [142, 352, 483], "excepthook": [142, 152, 352, 362, 365, 450, 463, 472, 481, 482, 483], "set_asyncgen_hooks_fin": [142, 352], "set_asyncgen_hooks_firstit": [142, 352], "closelog": [142, 356, 474], "openlog": [142, 356, 474, 483], "logopt": [142, 356], "setlogmask": [142, 356], "maskpri": [142, 356], "mkdtemp": [142, 293, 360, 362, 402, 474, 483], "fullpath": [142, 360], "mkstemp": [142, 283, 360, 483], "fullurl": [142, 395], "connectregistri": [142, 405], "computer_nam": [142, 405], "createkey": [142, 405], "sub_key": [142, 405], "deletekey": [142, 405], "deletevalu": [142, 405], "disablereflectionkey": [142, 405, 468, 469], "enablereflectionkey": [142, 405, 468, 469], "enumkey": [142, 405], "enumvalu": [142, 405], "expandenvironmentstr": [142, 405, 468], "loadkey": [142, 405], "file_nam": [142, 405], "openkey": [142, 405], "pyhkey": [142, 405], "queryinfokey": [142, 405], "queryreflectionkey": [142, 405, 468, 469], "queryvalu": [142, 405, 483], "value_nam": [142, 405], "savekey": [142, 405], "setvalu": [142, 405, 483], "_winapi": [142, 483], "createfil": 142, "desired_access": 142, "share_mod": 142, "creation_disposit": 142, "flags_and_attribut": 142, "createjunct": 142, "src_path": 142, "dst_path": 142, "createnamedpip": 142, "open_mod": 142, "pipe_mod": 142, "createpip": 142, "createprocess": [142, 348, 483], "application_nam": 142, "command_lin": [142, 348], "current_directori": 142, "openprocess": 142, "process_id": [142, 337], "exit_cod": [142, 213], "pyobj_fromptr": 142, "4648": [143, 327, 483], "ascii85": [143, 477, 483], "76": [143, 202, 343, 382, 384, 419], "2045": [143, 194, 196, 202, 203, 205, 419], "b64encod": [143, 235, 483], "altchar": 143, "b64decod": [143, 235, 476, 483], "a2b_base64": [143, 146, 483], "standard_b64encod": 143, "standard_b64decod": 143, "urlsafe_b64encod": 143, "urlsafe_b64decod": 143, "b32encod": 143, "b32decod": [143, 477, 483], "map01": 143, "oh": 143, "eye": [143, 186, 190, 467, 474, 478, 481], "b32hexencod": [143, 472, 483], "b32hexdecod": [143, 472, 483], "b16encod": 143, "b16decod": 143, "a85encod": [143, 477, 483], "foldspac": 143, "wrapcol": 143, "adob": [143, 477, 483], "btoa": 143, "a85decod": [143, 477, 483], "ignorechar": 143, "x0b": [143, 344, 398], "b85encod": [143, 477, 483], "b85decod": [143, 477], "decodebyt": [143, 158, 482, 483], "encodebyt": [143, 158, 482, 483], "zgf0ysb0bybizsblbmnvzgvk": 143, "1521": [143, 317], "multipurpos": 143, "bdbquit": 144, "bpbynumb": 144, "bplist": 144, "deletem": 144, "bpformat": 144, "bpprint": 144, "botfram": [144, 483], "stopfram": 144, "returnfram": 144, "trace_dispatch": 144, "c_call": [144, 352], "c_return": [144, 352, 353], "c_except": [144, 352], "dispatch_lin": 144, "user_lin": 144, "dispatch_cal": 144, "user_cal": 144, "dispatch_return": 144, "user_return": 144, "dispatch_except": 144, "user_except": 144, "is_skipped_lin": 144, "module_nam": [144, 250, 283, 362, 472, 480, 483], "stop_her": 144, "break_her": 144, "break_anywher": 144, "argument_list": [144, 427, 430], "do_clear": 144, "set_step": 144, "set_next": 144, "set_return": 144, "set_until": 144, "set_trac": [144, 193, 225, 297, 352, 455, 480, 483], "set_continu": 144, "set_quit": 144, "dispatch_": 144, "set_break": 144, "clear_break": 144, "clear_bpbynumb": 144, "clear_all_file_break": 144, "clear_all_break": 144, "get_bpbynumb": 144, "get_break": 144, "get_file_break": 144, "get_all_break": 144, "format_stack_entri": [144, 483], "frame_lineno": 144, "lprefix": 144, "runev": [144, 297], "runctx": [144, 308, 380], "runcal": [144, 297, 308, 481], "checkfuncnam": 144, "a2b_": [146, 476], "a2b_uu": 146, "b2a_uu": [146, 480, 483], "strict_mod": [146, 483], "3548": [146, 466], "b2a_base64": [146, 479, 483], "a2b_qp": [146, 483], "b2a_qp": [146, 483], "quotetab": [146, 158, 317], "istext": 146, "1522": [146, 317], "linefe": [146, 208, 331, 345, 435, 465], "crc_hqx": [146, 473, 483], "crc": [146, 422, 424, 483], "ccitt": [146, 349], "polynomi": [146, 261], "0x1021": 146, "binhex4": [146, 482, 483], "crc32": [146, 235, 424, 451, 452, 483], "checksum": [146, 337, 358, 422, 424], "010x": 146, "b2a_hex": [146, 158, 483], "bytes_per_sep": [146, 344], "hexlifi": [146, 483], "xb9": 146, "x01": [146, 258, 259, 284, 337, 347, 398], "b901ef": 146, "b9": 146, "ef": [146, 160, 261, 394, 417], "b9_01ef": 146, "b901": 146, "a2b_hex": [146, 158, 477], "hexstr": 146, "invers": [146, 183, 186, 201, 209, 211, 225, 244, 259, 275, 291, 299, 331, 340, 343, 344, 366, 430, 431, 468, 474, 481, 483], "liber": [146, 193], "fromhex": [146, 344, 444, 468, 473, 479, 480, 483], "85": [146, 153, 288, 343, 478], "bisect_left": 147, "bisect_right": 147, "insort_left": [147, 483], "insort_right": 147, "insort": [147, 452, 483], "domin": [147, 243, 483], "sortedcollect": 147, "find_lt": 147, "find_l": 147, "find_gt": 147, "find_g": 147, "score": [147, 190, 340, 343, 452], "70": [147, 183, 186, 318, 343, 364, 382, 441, 451, 452, 483], "fdcba": 147, "titan": 147, "bird": 147, "1963": 147, "hitchcock": 147, "alien": [147, 365], "1986": [147, 183], "1960": 147, "by_year": 147, "romanc": 147, "hiller": 147, "_f": 148, "bz2file": [149, 270, 469, 471, 472, 476, 477, 482, 483], "bz2compressor": [149, 483], "bz2decompressor": [149, 478, 483], "compresslevel": [149, 234, 358, 422, 480, 482, 483], "xb": [149, 234, 270], "rt": [149, 225, 234, 270, 362, 384, 483], "wt": [149, 225, 234, 270, 343], "bufferediobas": [149, 225, 234, 242, 245, 258, 270, 299, 338, 360, 369, 407, 468, 469, 473, 475, 476, 478, 479, 483], "peek": [149, 160, 234, 258, 270, 402, 475, 483], "read1": [149, 234, 258, 483], "compressor": [149, 270, 483], "decompressor": [149, 270, 483], "max_length": [149, 270, 424, 478, 483], "needs_input": [149, 270], "unused_data": [149, 270, 424], "donec": 149, "rhoncus": 149, "sapien": 149, "sit": [149, 375, 417], "amet": 149, "molesti": 149, "fusc": 149, "scelerisqu": 149, "vel": 149, "augu": 149, "nec": 149, "ullamcorp": 149, "nam": 149, "rutrum": 149, "pretium": 149, "placerat": 149, "aliquam": 149, "tristiqu": 149, "lorem": 149, "cursus": 149, "interdum": 149, "laoreet": 149, "ultric": 149, "purus": 149, "pulvinar": 149, "gravida": 149, "euismod": 149, "magna": 149, "varius": 149, "justo": 149, "tincidunt": 149, "feugiat": 149, "pharetra": 149, "lacus": 149, "risus": 149, "vehicula": 149, "maecena": 149, "feli": 149, "pellentesqu": 149, "semper": 149, "nunc": 149, "nibh": 149, "ac": [149, 160, 261, 426, 456, 465, 483], "elementum": 149, "dolor": 149, "luctus": 149, "curabitur": 149, "lacinia": 149, "ornar": 149, "consectetur": 149, "vestibulum": 149, "ratio": [149, 190, 221, 275, 343, 344, 384, 476, 483], "513595166163142": 149, "gen_data": 149, "chunksiz": [149, 166, 283, 303, 478, 483], "nonrandom": 149, "myfil": [149, 258, 293, 388, 422, 440, 443, 452], "setfirstweekday": 150, "gregorian": [150, 183], "dershowitz": [150, 183], "reingold": [150, 183], "calendr": [150, 183], "prolept": [150, 183], "8601": [150, 183, 190, 266, 340, 419, 473, 479, 483], "firstweekday": 150, "iterweekday": 150, "itermonthd": [150, 480, 483], "itermonthday": [150, 483], "itermonthdays2": [150, 483], "itermonthdays3": [150, 480, 483], "itermonthdays4": [150, 480, 483], "monthdatescalendar": 150, "monthdays2calendar": 150, "monthdayscalendar": 150, "yeardatescalendar": 150, "yeardays2calendar": 150, "yeardayscalendar": 150, "textcalendar": [150, 483], "formatmonth": 150, "theyear": 150, "themonth": 150, "prmonth": [150, 483], "formatyear": 150, "pryear": [150, 483], "htmlcalendar": [150, 480], "withyear": 150, "formatyearpag": 150, "css": [150, 240, 475, 480, 483], "cascad": [150, 483], "sheet": [150, 384, 386, 483], "formatmonthnam": [150, 483], "cssclass": 150, "tue": [150, 183], "wed": [150, 183, 366], "fri": [150, 209, 475, 476, 483], "cssclass_noday": 150, "cssclasses_weekday_head": 150, "cssclass_month_head": 150, "cssclass_month": 150, "cssclass_year": 150, "cssclass_year_head": 150, "customhtmlc": 150, "nowrap": 150, "center": [150, 155, 177, 186, 248, 255, 344, 345, 369, 376, 384, 426, 428, 446, 466, 468, 476, 483], "ital": [150, 177, 372], "localetextcalendar": [150, 473, 483], "localehtmlcalendar": [150, 473, 483], "formatweekday": [150, 483], "lc_time": [150, 266], "isleap": 150, "leapday": 150, "y1": [150, 430, 441, 472, 474, 483], "y2": [150, 225, 441, 472, 474, 483], "weekhead": 150, "monthrang": 150, "monthcalendar": 150, "prcal": 150, "timegm": [150, 366], "day_nam": 150, "day_abbr": 150, "month_nam": [150, 435], "month_abbr": 150, "januari": [150, 153, 183, 318, 366, 426, 435, 463, 474, 483], "februari": [150, 183, 366, 435, 463, 474, 475, 483], "march": [150, 183, 344, 366, 384, 451, 462, 466, 477], "april": [150, 183, 435, 448, 462, 463], "august": [150, 467], "septemb": [150, 435, 462, 467, 476, 478], "decemb": [150, 183, 435, 451, 464, 465, 470, 479], "illegalmontherror": 150, "illegalweekdayerror": 150, "mo": [150, 183, 230, 319, 344, 465, 479, 481, 483], "tu": [150, 465], "fr": [150, 230, 271, 318, 435, 465, 480], "su": [150, 483], "fieldstorag": [151, 477, 478, 480, 483], "parse_qsl": [151, 394, 468, 472, 479, 480, 481, 482, 483], "multipart": [151, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 483], "maxlen": [151, 160, 261, 386, 468, 469], "isindex": 151, "goodi": 151, "h1": [151, 235, 240, 242, 268, 420], "logdir": [151, 152], "keep_blank_valu": [151, 394], "minifieldstorag": [151, 483], "getlist": [151, 478], "fileitem": 151, "userfil": 151, "linecount": 151, "getfirst": 151, "strict_pars": [151, 394], "parse_q": [151, 394, 468, 472, 479, 480, 481, 482, 483], "parse_multipart": [151, 472, 479, 480, 481, 482, 483], "pdict": 151, "megabyt": 151, "emailmessag": [151, 194, 196, 197, 200, 201, 202, 205, 207, 208, 242, 395, 477, 479, 483], "rfcs": [151, 158, 194, 196, 201, 202, 203, 205, 208, 209, 305, 341, 465, 478, 483], "parse_head": [151, 242, 245, 483], "get_content_typ": [151, 196, 200, 205], "print_environ": 151, "print_form": 151, "print_directori": 151, "print_environ_usag": 151, "hole": [151, 293, 331, 468, 469, 472, 483], "hacker": [151, 318], "exploit": [151, 245, 270, 293, 358, 428, 455, 477, 483], "gullibl": 151, "trust": [151, 268, 283, 299, 302, 305, 341, 348, 358, 394, 460, 461, 468, 469, 477, 479, 480, 481, 482, 483], "dash": [151, 158, 177, 196, 205, 319, 331], "0o755": 151, "0755": [151, 483], "0o644": 151, "0o666": [151, 184, 293, 296, 397], "privileg": [151, 288, 293, 337, 339, 342, 366, 405, 476, 479, 483], "everybodi": [151, 244], "cryptic": [151, 483], "yourhostnam": 151, "suspect": [151, 462, 483], "userid": [151, 269, 386, 479], "suexec": 151, "liabil": [151, 426], "excerpt": [152, 186, 481], "ea": 153, "rmff": 153, "bigendian": 153, "inclhead": 153, "getnam": [153, 358, 365, 416, 472, 483], "getsiz": [153, 293, 294, 483], "ioerror": [153, 190, 213, 215, 218, 225, 230, 243, 255, 258, 282, 283, 295, 332, 333, 423, 450, 468, 469, 470, 476], "jerri": 153, "morrison": [153, 477], "electron": [153, 341, 426], "art": [153, 154, 160, 193], "1985": [153, 340], "kahan": 154, "elementari": [154, 177, 384], "4142135623730951j": 154, "modulus": [154, 289, 344, 352, 468, 475, 481], "phi": [154, 275], "atan2": [154, 275, 483], "141592653589793": [154, 444, 475], "polar": [154, 468, 483], "rect": [154, 176, 468], "cos": [154, 186, 221, 275, 299, 451, 465, 481], "log10": [154, 186, 275, 468], "aco": [154, 275], "asin": [154, 275], "atan": [154, 275, 468], "tan": [154, 275, 483], "acosh": [154, 275, 468, 483], "asinh": [154, 275, 468, 483], "atanh": [154, 275, 468, 483], "cosh": [154, 275], "sinh": [154, 275], "tanh": [154, 275], "isfinit": [154, 275, 475, 483], "isinf": [154, 275, 344, 468, 483], "isnan": [154, 275, 343, 344, 442, 468, 483], "isclos": [154, 275, 444, 478, 483], "rel_tol": [154, 275, 478], "1e": [154, 225, 275, 345, 347, 430, 478, 483], "abs_tol": [154, 275, 478], "tau": [154, 275, 479, 483], "infj": [154, 479, 483], "nanj": [154, 479, 483], "ado": 154, "iserl": 154, "powel": [154, 483], "eds": 154, "clarendon": 154, "1987": [154, 158, 183, 408], "pp165": 154, "211": [154, 288, 476], "completekey": [155, 297], "use_rawinput": 155, "cmdloop": 155, "intro": [155, 469], "banner": [155, 157, 483], "do_help": [155, 483], "do_shel": 155, "postcmd": 155, "complete_foo": 155, "begidx": 155, "endidx": 155, "help_bar": 155, "help_": 155, "undocu": [155, 184, 226, 267, 297, 362, 388, 422, 474, 476, 477, 478, 479, 480, 482, 483], "onecmd": 155, "precmd": 155, "emptylin": 155, "nonempti": [155, 191, 319, 344, 384, 403, 428], "completedefault": 155, "complete_": 155, "displaywidth": 155, "preloop": 155, "postloop": 155, "solicit": 155, "identchar": 155, "lastcmd": 155, "cmdqueue": 155, "doc_head": 155, "misc_head": 155, "undoc_head": 155, "ruler": 155, "do_forward": 155, "playback": [155, 295], "do_playback": 155, "turtleshel": 155, "do_right": 155, "do_left": 155, "do_goto": 155, "do_hom": 155, "do_circl": 155, "do_posit": 155, "do_head": [155, 245], "do_color": 155, "do_undo": 155, "do_reset": 155, "do_by": 155, "bye": [155, 170, 248, 288, 384, 476], "do_record": 155, "rose": [155, 261, 479, 483], "spiral": 155, "180": [155, 235, 343, 384, 475], "rot_13": [156, 158], "pstat": [156, 308, 451, 463, 467, 483], "interactiveinterpret": [157, 478, 483], "__console__": 157, "interactiveconsol": [157, 320], "readfunc": 157, "exitmsg": 157, "compile_command": [157, 159, 483], "runsourc": [157, 340], "showsyntaxerror": 157, "runcod": 157, "showtraceback": [157, 478, 483], "stuf": 157, "resetbuff": 157, "codecinfo": [158, 467], "getincrementalencod": [158, 476], "getincrementaldecod": 158, "wider": [158, 183, 386, 466, 477], "encodedfil": 158, "data_encod": 158, "file_encod": 158, "transcod": [158, 475], "iterencod": [158, 262], "base64_codec": 158, "iterdecod": 158, "bom_b": 158, "bom_l": 158, "bom_utf8": 158, "bom_utf16": 158, "bom_utf16_b": 158, "bom_utf16_l": 158, "bom_utf32": 158, "bom_utf32_b": 158, "bom_utf32_l": 158, "xdf": [158, 235, 304], "u266c": 158, "223": 158, "9836": 158, "strict_error": 158, "ignore_error": [158, 332, 483], "replace_error": 158, "hh": [158, 183, 248, 366, 435, 462, 483], "xxxx": [158, 293, 435, 483], "xxxxxxxx": [158, 293, 435], "backslashreplace_error": 158, "xmlcharrefreplace_error": 158, "namereplace_error": 158, "d800": 158, "dfff": 158, "register_error": [158, 225, 258, 344, 465], "error_handl": [158, 414], "lookup_error": [158, 465], "getstat": [158, 318], "setstat": [158, 318, 483], "utf_8": [158, 483], "rescan": [158, 302], "recov": [158, 190, 221, 352, 397, 415, 469, 474, 475], "firstlin": [158, 188], "huge": [158, 258, 462, 477, 483], "reposit": [158, 258], "resp": [158, 266, 288, 307, 478], "frontend": 158, "adher": [158, 167, 245, 262, 269, 283, 434], "00ff": [158, 475, 476, 483], "charmap": 158, "fffe": 158, "ligatur": 158, "2060": [158, 248], "joiner": [158, 478, 483], "role": [158, 341, 413, 470, 475, 481, 483], "payload": [158, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 242, 251, 469, 483], "00000000": 158, "0000007f": 158, "0xxxxxxx": 158, "00000080": 158, "000007ff": 158, "110xxxxx": 158, "10xxxxxx": 158, "00000800": 158, "0000ffff": 158, "1110xxxx": 158, "00010000": 158, "0010ffff": 158, "11110xxx": 158, "notepad": 158, "0xef": 158, "0xbb": 158, "0xbf": 158, "improb": 158, "diaeresi": 158, "quotat": [158, 348, 468, 483], "iso8859": 158, "utf16": 158, "utf32": 158, "euro": [158, 469, 470], "european": [158, 469], "ebcdic": [158, 477], "pc": [158, 177, 274, 406, 422, 435, 456, 461, 468, 473, 483], "big5": [158, 466], "csbig5": 158, "big5hksc": [158, 466], "hkscs": 158, "cp037": 158, "ibm037": 158, "ibm039": 158, "cp273": [158, 477], "ibm273": 158, "csibm273": 158, "cp424": 158, "ibm424": 158, "cp437": [158, 422], "437": 158, "ibm437": 158, "cp500": 158, "ibm500": 158, "western": [158, 366], "europ": [158, 166, 366, 425, 469], "cp720": [158, 469, 475], "cp737": 158, "cp775": 158, "ibm775": 158, "baltic": 158, "cp850": 158, "850": [158, 469], "ibm850": 158, "cp852": 158, "852": 158, "ibm852": 158, "central": [158, 183, 194, 205, 287, 343, 462, 463, 464, 465, 467, 475, 483], "eastern": [158, 183, 366, 479], "cp855": 158, "855": [158, 221], "ibm855": 158, "bulgarian": 158, "byelorussian": 158, "macedonian": 158, "serbian": 158, "cp856": 158, "cp857": 158, "857": 158, "ibm857": 158, "cp858": [158, 469], "858": 158, "ibm858": 158, "cp860": 158, "860": 158, "ibm860": 158, "portugues": [158, 483], "cp861": 158, "861": [158, 296], "ibm861": 158, "iceland": [158, 467], "cp862": 158, "862": 158, "ibm862": 158, "cp863": 158, "863": 158, "ibm863": 158, "cp864": 158, "ibm864": 158, "cp865": 158, "865": 158, "ibm865": 158, "danish": 158, "cp866": 158, "866": [158, 190, 481], "ibm866": 158, "cp869": 158, "869": 158, "gr": [158, 467, 472, 473, 481, 483], "ibm869": 158, "cp874": 158, "cp875": 158, "cp932": [158, 466], "932": 158, "ms932": 158, "mskanji": 158, "kanji": 158, "cp949": [158, 466], "949": 158, "ms949": 158, "uhc": 158, "cp950": [158, 466], "950": 158, "ms950": 158, "cp1006": 158, "urdu": 158, "cp1026": 158, "ibm1026": 158, "cp1125": [158, 477], "1125": 158, "ibm1125": 158, "cp866u": 158, "ruscii": 158, "cp1140": 158, "ibm1140": 158, "cp1250": [158, 167], "1250": 158, "cp1251": 158, "1251": 158, "1252": [158, 448, 452], "cp1253": 158, "1253": 158, "cp1254": 158, "1254": [158, 319], "cp1255": 158, "1255": 158, "cp1256": 158, "1256": 158, "cp1257": 158, "1257": 158, "cp1258": 158, "1258": 158, "euc_jp": 158, "eucjp": 158, "uji": 158, "jis": [158, 466], "euc_jis_2004": 158, "jisx0213": [158, 466], "eucjis2004": 158, "euc_jisx0213": 158, "eucjisx0213": 158, "euc_kr": 158, "euckr": 158, "korean": [158, 466, 480, 483], "ksc5601": 158, "ks_c": 158, "5601": 158, "ksx1001": 158, "ks_x": 158, "gb2312": [158, 387, 466, 476], "chines": [158, 466, 483], "csiso58gb231280": 158, "euc": [158, 195, 466], "euccn": 158, "eucgb2312": 158, "1980": [158, 190, 422, 483], "ir": 158, "gbk": [158, 466], "936": 158, "cp936": 158, "ms936": 158, "gb18030": [158, 466, 483], "hz": [158, 466, 476, 483], "hzgb": 158, "gb": [158, 341, 409, 483], "2312": 158, "iso2022_jp": 158, "csiso2022jp": 158, "iso2022jp": 158, "2022": [158, 183, 195, 235, 448, 451, 466, 473, 483], "jp": [158, 195, 426, 466], "iso2022_jp_1": 158, "iso2022_jp_2": 158, "iso2022_jp_2004": [158, 483], "2004": [158, 183, 376, 426, 466], "iso2022_jp_3": [158, 483], "iso2022_jp_ext": 158, "iso2022_kr": 158, "csiso2022kr": 158, "iso2022kr": 158, "kr": [158, 466], "latin_1": [158, 195, 483], "cp819": 158, "iso8859_2": 158, "latin2": [158, 340], "iso8859_3": 158, "latin3": 158, "l3": 158, "esperanto": 158, "maltes": 158, "iso8859_4": 158, "latin4": 158, "l4": 158, "iso8859_5": 158, "cyril": 158, "iso8859_6": 158, "iso8859_7": 158, "greek8": 158, "iso8859_8": 158, "iso8859_9": 158, "latin5": 158, "l5": 158, "iso8859_10": 158, "latin6": 158, "l6": [158, 476], "nordic": 158, "iso8859_11": 158, "iso8859_13": 158, "latin7": 158, "l7": 158, "iso8859_14": 158, "latin8": 158, "l8": 158, "celtic": 158, "iso8859_15": 158, "latin9": 158, "l9": 158, "iso8859_16": 158, "latin10": 158, "l10": 158, "johab": [158, 466], "cp1361": 158, "ms1361": 158, "koi8_r": 158, "koi8_t": [158, 478, 483], "tajik": [158, 478], "koi8_u": 158, "kz1048": [158, 478, 483], "kz_1048": 158, "strk1048_2002": 158, "rk1048": 158, "kazakh": [158, 478], "mac_cyril": 158, "maccyril": 158, "mac_greek": 158, "macgreek": 158, "mac_iceland": 158, "maciceland": 158, "mac_latin2": [158, 483], "maclatin2": 158, "maccentraleurop": 158, "mac_centeuro": [158, 483], "mac_roman": 158, "macroman": 158, "mac_turkish": 158, "macturkish": 158, "ptcp154": 158, "csptcp154": 158, "pt154": 158, "cp154": 158, "asian": [158, 387, 466], "shift_ji": 158, "csshiftji": 158, "shiftji": 158, "sjis": 158, "s_jis": 158, "shift_jis_2004": 158, "shiftjis2004": 158, "sjis_2004": 158, "sjis2004": 158, "shift_jisx0213": 158, "shiftjisx0213": 158, "sjisx0213": 158, "s_jisx0213": 158, "utf_32": 158, "u32": 158, "utf_32_b": 158, "32be": 158, "utf_32_l": 158, "32le": 158, "utf_16": 158, "u16": 158, "utf_16_b": 158, "16be": 158, "utf_16_l": 158, "16le": 158, "utf_7": 158, "u7": 158, "u8": 158, "cp65001": [158, 476, 483], "asymmetr": 158, "3490": [158, 465], "oem": [158, 479, 483], "cp_oemcp": [158, 479], "palmo": 158, "3492": [158, 465], "raw_unicode_escap": 158, "bewar": [158, 221, 262, 283, 330, 340, 341, 432, 451, 470], "unicode_intern": [158, 476, 481, 483], "base_64": 158, "bz2_codec": [158, 477], "hex_codec": [158, 477], "quopri_codec": 158, "quotedprint": 158, "quoted_print": 158, "uu_codec": [158, 483], "zlib_codec": 158, "rot13": [158, 477, 483], "caesar": 158, "cypher": 158, "encrypt": [158, 173, 233, 248, 268, 288, 305, 335, 339, 341, 422, 462, 464, 465, 469, 475, 476, 477, 483], "nameprep": [158, 346], "idn": [158, 341, 480, 483], "5891": 158, "5895": 158, "alliancefran": [158, 465], "ais": [158, 465], "nu": [158, 465], "ace": [158, 318, 319, 465], "xn": [158, 341, 465, 480], "alliancefranais": [158, 465], "npb": [158, 465], "allowunassign": 158, "toascii": 158, "usestd3asciirul": 158, "outcom": [159, 167, 388, 427, 483], "commandcompil": 159, "subcontext": 160, "new_child": [160, 477, 483], "baselin": 160, "bach": 160, "rembrandt": 160, "gogh": 160, "opera": [160, 403, 467, 483], "carmen": 160, "584": [160, 293, 385, 402, 482, 483], "enthought": [160, 461], "codetool": 160, "multicontext": 160, "pylookup": 160, "guest": [160, 337, 483], "command_line_arg": 160, "flatten": [160, 196, 201, 202, 203, 205, 208, 261, 299, 344, 386, 442, 474, 477, 478, 482, 483], "deepchainmap": 160, "inner": [160, 169, 191, 235, 237, 255, 319, 340, 344, 384, 386, 413, 427, 429, 466, 469, 475, 476, 483], "eleph": 160, "lion": 160, "topmost": [160, 352, 467, 483], "talli": [160, 469, 475, 476], "cnt": 160, "hamlet": [160, 462], "most_common": [160, 469], "1143": 160, "966": 160, "762": 160, "631": 160, "546": [160, 382], "514": [160, 269, 461, 465, 473, 483], "bag": [160, 200, 427, 440], "multiset": [160, 475], "gallahad": [160, 442, 471], "sausag": [160, 225, 344], "list_of_pair": 160, "intersect": [160, 344, 384, 428, 465, 466, 468, 469, 483], "knuth": [160, 186], "donald": [160, 341, 469, 477], "cc": [160, 203, 209, 261, 271, 335, 361, 456, 465, 474, 476, 483], "deck": [160, 318], "appendleft": [160, 466], "extendleft": 160, "popleft": [160, 261, 316, 442, 452, 466], "ghi": [160, 176, 267, 331, 466], "jkl": 160, "pyshel": [160, 186, 247, 319, 479, 480, 481, 483], "moving_averag": 160, "roundrobin": [160, 261], "delete_nth": 160, "dup": [160, 293, 337, 483], "rot": [160, 464, 483], "roll": [160, 183, 269, 340, 362, 388, 440, 467, 468, 483], "default_factori": [160, 181, 386, 483], "__missing__": [160, 344, 389, 427, 428, 467, 475, 483], "mississippi": [160, 344], "constant_factori": 160, "ran": [160, 193, 348, 388, 468, 469, 474, 483], "typenam": [160, 307, 340, 468, 483], "field_nam": [160, 345], "_1": [160, 469, 471], "_3": 160, "_sourc": [160, 480, 483], "_field_default": [160, 386, 483], "employeerecord": 160, "depart": [160, 225, 344], "paygrad": 160, "emp": 160, "_make": [160, 340, 347, 483], "employe": [160, 386, 440, 483], "companydata": 160, "fetchal": [160, 340, 467], "somenamedtupl": 160, "_asdict": [160, 468, 469, 471, 481, 483], "_replac": [160, 394, 468, 483], "partnum": 160, "inventori": [160, 181, 291], "newpric": 160, "pixel": [160, 369, 372, 376, 384, 483], "premium": 160, "hypot": [160, 275, 481, 483], "000": [160, 176, 183, 186, 235, 261, 282, 308, 461, 474, 475, 476], "714": 160, "018": 160, "hardcov": 160, "isbn": [160, 369, 454], "part_numb": 160, "lru": [160, 226, 483], "popitem": [160, 161, 167, 261, 271, 288, 344, 428, 463, 465, 469, 483], "od": [160, 469, 472, 475, 483], "move_to_end": [160, 475, 483], "acdeb": 160, "bacd": 160, "od1": [160, 469], "od2": [160, 469], "lastupdatedordereddict": 160, "timeboundedlru": 160, "maxag": 160, "multihitlrucach": 160, "maxrequest": 160, "cache_aft": 160, "uncached_key": 160, "request_count": 160, "cached_key": 160, "function_result": 160, "uncach": [160, 293, 475, 483], "initialdata": 160, "format_map": [160, 344, 475, 478, 483], "isprint": [160, 178, 344, 478, 483], "maketran": [160, 344, 471, 475, 478, 483], "_collections_abc": 161, "mutablesequ": [161, 344, 386, 470, 476, 478, 483], "isdisjoint": [161, 344, 483], "mutableset": [161, 344, 386, 483], "mappingview": [161, 344, 386, 483], "itemsview": [161, 344, 386], "keysview": [161, 344, 386], "valuesview": [161, 344, 386, 483], "asyncgener": [161, 344, 386, 479, 483], "asend": [161, 430, 482, 483], "athrow": [161, 430, 482, 483], "__buffer__": [161, 255, 428, 474, 483], "gencoro": 161, "myvar": 161, "listbasedset": 161, "lst": [161, 297], "abcdef": [161, 176, 258, 261, 319, 469, 477], "defghi": 161, "_from_iter": 161, "_hash": [161, 483], "orderedset": 161, "yiq": [162, 477], "hls": 162, "hsv": 162, "poynton": 162, "colorfaq": 162, "cambridgeincolour": 162, "htm": [162, 183, 245, 464, 465, 466, 467, 468, 469, 470], "rgb_to_yiq": 162, "yiq_to_rgb": 162, "rgb_to_hl": [162, 483], "hls_to_rgb": 162, "rgb_to_hsv": 162, "hsv_to_rgb": 162, "qq": 163, "destdir": [163, 483], "strip_prefix": 163, "prepend_prefix": 163, "coexist": 163, "cpu_count": [163, 166, 283, 293, 472, 477, 483], "uncheck": [163, 432, 455, 480, 483], "source_date_epoch": [163, 311, 480, 483], "hardlink": [163, 358, 482, 483], "dupe": [163, 482], "multilevel": [163, 483], "getrecursionlimit": [163, 213, 247, 352, 450, 462, 474, 483], "compile_dir": [163, 478, 480, 483], "maxlevel": [163, 307, 321], "ddir": [163, 483], "rx": [163, 319], "invalidation_mod": [163, 311, 480, 483], "stripdir": [163, 482, 483], "prependdir": [163, 482, 483], "limit_sl_dest": [163, 482, 483], "hardlink_dup": [163, 482], "pycinvalidationmod": [163, 311], "compile_fil": [163, 478, 483], "fullnam": [163, 250, 252, 253, 302, 423, 465], "compile_path": [163, 478], "skip_curdir": 163, "323": [166, 479], "1235": 166, "cancel_futur": [166, 482, 483], "src1": [166, 475], "dest1": [166, 475], "src2": [166, 475], "dest2": [166, 475], "src3": [166, 475], "dest3": [166, 475], "src4": 166, "dest4": [166, 475], "wait_on_b": 166, "wait_on_a": 166, "wait_on_futur": 166, "thread_name_prefix": [166, 479, 483], "initarg": [166, 283, 480], "grace": [166, 319, 333, 365, 430, 469, 475, 480, 483], "brokenthreadpool": 166, "foxnew": 166, "cnn": [166, 184], "wsj": 166, "nonexist": [166, 483], "subdomain": 166, "load_url": 166, "future_to_url": 166, "mp_context": [166, 283, 480, 483], "max_tasks_per_child": [166, 483], "61": [166, 344, 366, 466, 483], "brokenprocesspool": 166, "start_method": 166, "112272535095293": 166, "112582705942171": 166, "115280095190773": 166, "115797848077099": 166, "1099726899285419": 166, "is_prim": 166, "sqrt_n": 166, "set_running_or_notify_cancel": 166, "not_don": 166, "brokenexecutor": 166, "mini": [167, 345, 435, 469, 471], "serveraliveinterv": 167, "compressionlevel": 167, "forwardx11": 167, "forg": 167, "hg": [167, 296, 341, 465, 469, 475, 483], "topsecret": 167, "50022": 167, "configfil": 167, "another_config": 167, "read_str": [167, 475, 478], "nport": 167, "48484": 167, "read_dict": [167, 475, 480, 481, 482, 483], "21212": 167, "getboolean": [167, 483], "getint": [167, 483], "getfloat": 167, "3des": [167, 341, 479, 483], "cbc": [167, 337], "monster": [167, 364], "batchmod": 167, "sectcr": 167, "14159265359": [167, 444, 446], "chorus": 167, "lumberjack": [167, 307, 381], "night": 167, "key_without_valu": 167, "harm": [167, 226, 292, 475, 483], "can_values_be_as_wel": 167, "does_that_mean_anything_speci": 167, "multiline_valu": 167, "preprocess": [167, 175, 394], "basicinterpol": [167, 473, 483], "home_dir": 167, "my_dir": 167, "my_pictur": 167, "extendedinterpol": [167, 473, 475, 483], "zc": 167, "buildout": [167, 475], "library_dir": 167, "system_dir": 167, "macports_dir": 167, "arthur": [167, 344, 481, 483], "nicknam": 167, "shed": 167, "last_nam": [167, 175, 319], "jackson": [167, 477], "twosh": 167, "python_dir": 167, "optionxform": 167, "defaultsect": 167, "section_nam": 167, "section_proxi": 167, "dict_typ": [167, 304], "section1": 167, "key1": [167, 427, 482], "key2": [167, 427, 482], "key3": [167, 482], "value3": [167, 482], "section2": 167, "keya": 167, "valuea": 167, "keyb": 167, "valueb": 167, "keyc": 167, "valuec": 167, "section3": 167, "allow_no_valu": [167, 469], "sample_config": [167, 469], "mysqld": [167, 469], "mysql": [167, 223, 469], "old_password": 167, "acid": [167, 464, 474], "innodb": 167, "space_around_delimit": 167, "comment_prefix": 167, "inline_comment_prefix": 167, "enabled_extens": 167, "another_extens": 167, "disabled_by_com": 167, "yet_another_extens": 167, "read_fil": [167, 268, 474], "empty_lines_in_valu": 167, "gotcha": 167, "she": 167, "default_sect": 167, "parser_inst": 167, "getdecim": 167, "boolean_st": 167, "nope": [167, 441], "unsuit": [167, 413, 463, 469, 483], "anotherkey": 167, "larch": 167, "optcr": 167, "downright": 167, "counterintuit": 167, "add_sect": [167, 475], "an_int": 167, "a_bool": 167, "a_float": 167, "1415": [167, 186, 468], "evil": [167, 469, 483], "nooptionerror": [167, 469], "remove_opt": [167, 292], "intrins": [167, 191, 299, 428, 471, 483], "duplicatesectionerror": [167, 475, 483], "duplicateoptionerror": [167, 475, 483], "has_sect": 167, "has_opt": [167, 292], "expandus": [167, 231, 243, 286, 294, 296, 320, 332, 348, 478, 481, 483], "readfp": [167, 276, 469, 473, 474, 483], "nosectionerror": 167, "fileobject": [167, 472], "remove_sect": 167, "cfgparser": 167, "max_interpolation_depth": 167, "interpolationerror": 167, "interpolationdeptherror": 167, "interpolationmissingoptionerror": [167, 483], "interpolationsyntaxerror": 167, "missingsectionheadererror": 167, "parsingerror": [167, 473, 474, 483], "footnot": 167, "notimplementedtyp": [168, 385, 472, 483], "ellipsistyp": [168, 385, 472, 483], "abstractcontextmanag": [169, 344, 386, 479, 483], "abstractasynccontextmanag": [169, 344, 386, 480, 483], "contextmanag": [169, 344, 386, 467, 468, 475, 479, 483], "managed_resourc": 169, "acquire_resourc": 169, "release_resourc": 169, "trap": [169, 186, 464, 466, 476, 483], "contextdecor": [169, 475], "asynccontextmanag": [169, 386, 390, 428, 480, 483], "get_connect": 169, "acquire_db_connect": 169, "release_db_connect": 169, "get_all_us": 169, "my_gener": 169, "nullcontext": [169, 472, 480, 483], "enter_result": 169, "ignore_except": 169, "process_fil": 169, "file_or_path": 169, "send_http": 169, "aiohttp": 169, "clientsess": 169, "somefil": [169, 204, 230, 293, 331, 380], "someotherfil": 169, "redirect_stdout": [169, 477, 478], "new_target": [169, 371], "redirect_stderr": [169, 478, 483], "relinquish": [169, 293, 365, 366], "mycontext": 169, "contextbaseclass": 169, "asynccontextdecor": [169, 472, 483], "exitstack": [169, 473, 476, 480, 481, 483], "enter_context": [169, 473, 483], "pop_al": 169, "onto": [169, 177, 191, 248, 299, 307, 331, 346, 384, 386, 388, 390, 432, 462, 468, 474, 483], "close_fil": 169, "asyncexitstack": [169, 473, 480, 481, 483], "enter_async_context": [169, 473, 483], "push_async_exit": 169, "push_async_callback": [169, 481], "need_special_resourc": 169, "acquire_special_resourc": 169, "release_special_resourc": 169, "inadvert": [169, 255, 468, 477, 478, 483], "acquisit": [169, 267, 365, 475, 483], "resourcemanag": 169, "check_resource_ok": 169, "_cleanup_on_error": 169, "exc_detail": 169, "cleanup_need": 169, "perform_oper": 169, "cleanup_resourc": 169, "cb": [169, 261], "track_entry_and_exit": [169, 475], "exc_tb": [169, 333, 344], "load_widget": [169, 475], "singleus": 169, "write_to_stream": 169, "innermost": [169, 193, 314, 352, 386, 430, 477, 483], "outer_stack": 169, "inner_stack": 169, "copy_context": 170, "bleed": 170, "old_valu": 170, "client_addr_var": 170, "client_addr": 170, "render_goodby": 170, "8081": 170, "memo": [171, 299, 300, 431, 479, 483], "copied_list": 171, "original_list": 171, "__copy__": [171, 474, 483], "__deepcopy__": [171, 483], "constructor_ob": 172, "dispatch_t": [172, 299, 476, 483], "pickler": [172, 299, 300, 471, 476, 481, 483], "pickle_c": 172, "passlib": 173, "des": [173, 310], "crack": [173, 190], "method_sha512": 173, "salt": [173, 235, 326, 428, 455, 475, 476, 483], "sha": [173, 235, 398, 467, 468, 472, 475, 476, 479, 483], "strongest": [173, 469], "method_sha256": 173, "method_blowfish": 173, "blowfish": [173, 480, 483], "method_md5": 173, "md5": [173, 235, 237, 248, 335, 340, 341, 398, 456, 467, 468, 469, 470, 474, 475, 477, 481, 482, 483], "method_crypt": [173, 479, 483], "weakest": 173, "method_": 173, "mksalt": [173, 476, 480, 483], "perturb": 173, "999_999_999": 173, "5000": [173, 186], "2_147_483_648": 173, "exposur": [173, 476], "compare_digest": [173, 235, 237, 326, 469, 476, 483], "compare_hash": 173, "cryptedpasswd": 173, "getpwnam": [173, 310, 348, 483], "cleartext": [173, 269], "plaintext": [173, 248, 476], "4180": [175, 483], "dictread": [175, 479, 481, 483], "dictwrit": [175, 475, 483], "csvfile": 175, "fmtparam": 175, "list_dialect": [175, 483], "quote_nonnumer": 175, "spamread": 175, "quotechar": [175, 483], "bake": [175, 319], "bean": [175, 319], "stringifi": [175, 381, 473, 483], "spamwrit": 175, "quote_minim": 175, "writerow": [175, 475, 478, 483], "register_dialect": 175, "unregister_dialect": [175, 483], "get_dialect": [175, 483], "new_limit": [175, 467], "restkey": 175, "restval": 175, "first_nam": [175, 319], "clees": [175, 413, 441, 481], "extrasact": [175, 483], "writehead": [175, 475, 483], "excel_tab": 175, "unix_dialect": [175, 475], "sniffer": [175, 337, 483], "sniff": [175, 483], "has_head": [175, 243, 395, 483], "quote_al": 175, "quote_non": 175, "quote_notnul": [175, 474, 483], "quote_str": [175, 474, 483], "doublequot": [175, 483], "escapechar": [175, 483], "linetermin": [175, 483], "quote_": 175, "skipinitialspac": [175, 483], "csvreader": 175, "line_num": [175, 319, 467], "csvwriter": 175, "passwd": [175, 223, 296, 310, 361, 388, 395, 466, 467, 468], "someiter": 175, "unixpwd": 175, "linend": 175, "c_int": [176, 283, 467, 483], "c_long": [176, 344], "cdll": [176, 467, 481, 483], "windll": [176, 468, 483], "oledl": [176, 468, 483], "cdecl": 176, "stdcall": 176, "hresult": 176, "kernel32": [176, 352, 483], "libc": [176, 257, 293, 303, 348, 456, 467, 483], "loadlibrari": 176, "_funcptr": 176, "getmodulehandlea": 176, "myownfunct": 176, "239": 176, "_stdcallfuncptr": 176, "user32": 176, "getmodulehandl": 176, "hmodul": 176, "lpcstr": 176, "lpmodulenam": 176, "getmodulehandlew": 176, "lpcwstr": 176, "yapaxi": 176, "310": 176, "rand": [176, 341], "1804289383": 176, "0x1d000000": 176, "erron": [176, 292, 384, 425, 462, 477, 478, 480, 482, 483], "c_bool": [176, 468], "_bool": [176, 347, 468], "c_char": [176, 283], "c_wchar": 176, "c_byte": [176, 483], "c_ubyt": [176, 483], "c_short": [176, 283], "c_ushort": 176, "c_uint": 176, "c_ulong": 176, "c_longlong": 176, "__int64": 176, "c_ulonglong": 176, "c_size_t": 176, "c_ssize_t": [176, 475], "c_time_t": [176, 483], "time_t": [176, 483], "c_float": [176, 467], "c_doubl": [176, 283, 467, 483], "c_longdoubl": [176, 483], "c_char_p": [176, 467], "c_wchar_p": [176, 483], "c_void_p": 176, "140018365411392": 176, "65533": 176, "c_s": 176, "139966785747344": 176, "139966783348904": 176, "x00": [176, 235, 258, 259, 284, 319, 337, 344, 347, 398, 483], "x00lo": 176, "c_buffer": 176, "beer": [176, 483], "1234": [176, 186, 259, 313, 329, 344, 378, 398, 442, 468, 472, 478, 483], "140000": [176, 345], "arm64": [176, 481, 482, 483], "inhibit": [176, 250, 314], "_as_parameter_": 176, "200000": [176, 367], "000000": [176, 183, 366, 464], "from_param": [176, 483], "typecheck": [176, 386, 483], "restyp": [176, 467], "1150640792": 176, "strchr": 176, "8059983": 176, "validhandl": 176, "winerror": [176, 213, 483], "486539264": 176, "silli": [176, 292, 390], "126": [176, 259, 382, 481], "errcheck": 176, "byref": [176, 468], "sscanf": 176, "1400001049": 176, "_fields_": [176, 283, 344, 483], "upperleft": 176, "lowerright": 176, "ofs": 176, "_pack_": 176, "pragma": [176, 483], "bigendianstructur": [176, 344, 483], "littleendianstructur": [176, 483], "bigendianunion": [176, 483], "littleendianunion": [176, 483], "first_16": 176, "second_16": 176, "tenpointsarraytyp": 176, "artifici": [176, 353, 413, 428, 474, 477, 483], "mystruct": [176, 283], "point_array": 176, "arr": [176, 283, 444], "pt": 176, "teninteg": 176, "c_long_array_10": 176, "oor": 176, "scene": [176, 384, 461], "lp_c_long": 176, "null_ptr": 176, "dereferenc": [176, 402, 476, 483], "c_byte_array_4": 176, "cfunctyp": [176, 483], "winfunctyp": [176, 483], "qsort": 176, "intarray5": 176, "ia": 176, "cmpfunc": 176, "py_cmp_func": 176, "cmp_func": 176, "in_dll": 176, "pythonapi": [176, 467], "0x30c00a0": 176, "struct_frozen": 176, "get_cod": [176, 250, 423, 477], "frozent": 176, "_pyimport_frozenbootstrap": 176, "sooner": [176, 411, 468], "_frozen_importlib": [176, 283, 483], "31764": [176, 483], "_frozen_importlib_extern": [176, 483], "41499": 176, "__hello__": [176, 483], "p1": [176, 261, 284, 348, 427, 466, 473, 478], "hm": 176, "temp0": 176, "temp1": 176, "short_array": 176, "find_librari": [176, 479, 483], "dylib": [176, 483], "ldconfig": [176, 483], "objdump": 176, "ld_library_path": [176, 479, 483], "libm": [176, 456, 483], "libbz2": 176, "agl": 176, "default_mod": 176, "use_errno": [176, 468], "use_last_error": [176, 468], "winmod": [176, 481], "dumpbin": 176, "pydll": [176, 483], "manpag": [176, 293, 337, 479, 483], "rtld_now": [176, 293, 476], "setlasterror": 176, "hijack": 176, "rtld_global": [176, 293, 352, 476, 481, 483], "rtld_local": [176, 293, 476, 481, 483], "_handl": 176, "prefabr": 176, "libraryload": 176, "dlltype": 176, "pyfunctyp": 176, "func_spec": 176, "paramflag": 176, "name_or_ordin": 176, "vtbl_index": 176, "iid": [176, 376, 483], "messageboxw": 176, "winuserapi": 176, "winapi": [176, 332, 348, 483], "hwnd": 176, "lptext": 176, "lpcaption": 176, "uint": 176, "utyp": 176, "wintyp": [176, 483], "caption": 176, "getwindowrect": 176, "lprect": 176, "obj_or_typ": 176, "init_or_s": 176, "dllcanunloadnow": 176, "_ctype": [176, 426, 469, 480, 483], "dllgetclassobject": 176, "find_msvcrt": 176, "formaterror": [176, 271], "lasterror": [176, 468], "memmov": [176, 468], "enlarg": [176, 483], "_cdata": [176, 483], "_object": 176, "from_buff": [176, 468, 483], "writeabl": [176, 225, 258, 341, 348, 483], "from_buffer_copi": [176, 468, 483], "from_address": 176, "_b_base_": 176, "_b_needsfree_": 176, "_simplecdata": 176, "c_int8": 176, "c_int16": 176, "c_int32": 176, "c_int64": 176, "c_uint8": [176, 483], "c_uint16": 176, "c_uint32": 176, "c_uint64": 176, "py_object": [176, 467, 483], "wparam": 176, "dword": 176, "pnext": 176, "_anonymous_": [176, 483], "_u": 176, "lptdesc": 176, "typedesc": 176, "lpadesc": 176, "arraydesc": 176, "hreftyp": 176, "vt": [176, 178, 386, 435], "vartyp": 176, "td": [176, 183], "vt_ptr": 176, "some_typ": 176, "_length_": [176, 483], "_type_": 176, "_pointer": 176, "facto": [177, 243, 252, 358, 394, 419], "a_norm": 177, "baudrat": 177, "beep": [177, 406, 479], "driver": [177, 193, 212, 230, 293, 295, 337, 362, 405, 406, 416, 465, 483], "color_cont": [177, 472], "color_numb": 177, "pair_numb": 177, "a_": 177, "def_prog_mod": 177, "reset_prog_mod": 177, "def_shell_mod": 177, "reset_shell_mod": 177, "delay_output": 177, "ground": 177, "erasechar": 177, "cup": 177, "cud": 177, "cud1": 177, "cuu1": 177, "cuu": 177, "vpa": 177, "cr": [177, 178, 208, 435, 480, 483], "confin": [177, 193], "bell": [177, 178, 369, 435, 467, 483], "flushinp": 177, "typeahead": 177, "getmous": 177, "key_mous": 177, "bstate": 177, "buttonn_press": 177, "buttonn_releas": 177, "buttonn_click": 177, "buttonn_double_click": 177, "buttonn_triple_click": 177, "button_shift": 177, "button_ctrl": 177, "button_alt": 177, "button5_": [177, 472, 483], "getsyx": 177, "getwin": 177, "putwin": 177, "has_extended_color_support": [177, 472, 483], "256color": [177, 483], "has_ic": 177, "has_il": 177, "region": [177, 247, 278, 282, 293, 319, 369, 376, 384, 440, 468, 471, 483], "init_color": [177, 472], "fg": [177, 261, 344, 369, 376], "bg": [177, 369, 376, 384, 483], "use_default_color": [177, 466], "is_term_res": 177, "nline": [177, 188], "ncol": 177, "resize_term": 177, "isendwin": 177, "deiniti": 177, "keynam": 177, "alt": [177, 178, 240, 247, 376, 462, 483], "killchar": 177, "longnam": [177, 358, 483], "terminfo": 177, "mouseinterv": 177, "elaps": [177, 269, 283, 293, 308, 329, 337, 365, 366, 388, 475, 483], "mousemask": 177, "availmask": 177, "oldmask": 177, "napm": 177, "pminrow": 177, "pmincol": 177, "sminrow": 177, "smincol": 177, "smaxrow": 177, "smaxcol": 177, "nl": [177, 178, 240, 337, 377, 378, 394, 426, 435, 468, 483], "nonl": 177, "vertic": [177, 178, 247, 297, 344, 345, 364, 369, 374, 375, 376, 384, 427, 434, 435], "noqiflush": 177, "intr": 177, "susp": 177, "noraw": 177, "pair_cont": [177, 472], "putp": 177, "tput": 177, "putchar": 177, "qiflush": 177, "resetti": 177, "savetti": 177, "resizeterm": 177, "sigwinch": [177, 333, 483], "get_escdelay": [177, 482, 483], "set_escdelay": [177, 482, 483], "get_tabs": [177, 482, 483], "set_tabs": [177, 482, 483], "setsyx": 177, "setupterm": 177, "termattr": 177, "termnam": 177, "tigetflag": 177, "capnam": 177, "tigetnum": 177, "tigetstr": 177, "tparm": 177, "4h": [177, 347], "breakout": 177, "unctrl": [177, 178], "ungetch": [177, 282], "update_lines_col": [177, 478, 483], "unget_wch": [177, 476, 483], "get_wch": [177, 476, 483], "ungetmous": [177, 483], "use_env": 177, "newterm": 177, "subwindow": 177, "addnstr": 177, "segfault": [177, 466, 467, 479, 480, 483], "20190511": 177, "stuck": 177, "attroff": 177, "attron": 177, "attrset": 177, "bkgd": 177, "bkgdset": 177, "rs": [177, 178], "bs": [177, 178, 435], "tl": 177, "bl": 177, "acs_vlin": 177, "acs_hlin": 177, "acs_urcorn": 177, "acs_llcorn": 177, "acs_lrcorn": 177, "vertch": 177, "horch": 177, "chgat": [177, 468], "touchlin": 177, "redisplay": [177, 320, 465], "repaint": 177, "clearok": 177, "clrtobot": 177, "clrtoeol": 177, "cursyncup": 177, "delch": 177, "deleteln": 177, "derwin": 177, "subwin": 177, "echochar": 177, "getbegyx": 177, "getbkgd": 177, "getmaxyx": 177, "getparyx": 177, "getyx": 177, "hline": 177, "idcok": 177, "idlok": 177, "immedok": 177, "degrad": [177, 475, 483], "wrefresh": 177, "inch": [177, 369], "insch": 177, "insdelln": 177, "insertln": 177, "insnstr": 177, "insstr": 177, "instr": [177, 191, 362, 477, 483], "is_linetouch": 177, "is_wintouch": 177, "movement": [177, 384, 468, 475, 483], "new_i": 177, "new_x": 177, "mvderwin": 177, "mvwin": 177, "notimeout": 177, "overlay": 177, "destwin": 177, "dminrow": 177, "dmincol": 177, "dmaxrow": 177, "dmaxcol": 177, "redrawln": 177, "beg": 177, "redrawwin": 177, "rendit": 177, "scrollok": 177, "setscrreg": 177, "standend": 177, "standout": 177, "subpad": 177, "syncdown": 177, "syncok": 177, "syncup": 177, "indefinit": [177, 183, 245, 261, 265, 269, 271, 333, 359, 469, 477, 478, 483], "touchwin": 177, "untouchwin": 177, "vline": [177, 483], "__version__": [177, 190, 245, 388, 476, 478, 482, 483], "ncurses_vers": [177, 481, 483], "a_altcharset": 177, "dim": 177, "a_invi": 177, "a_ital": [177, 483], "a_protect": 177, "a_horizont": 177, "a_left": 177, "a_low": 177, "a_right": 177, "a_top": 177, "a_vert": 177, "a_attribut": 177, "a_chartext": 177, "a_color": 177, "key_": 177, "keycap": 177, "key_min": 177, "key_break": 177, "key_down": 177, "arrow": [177, 247, 297, 375, 376, 384, 443], "key_right": 177, "key_backspac": 177, "key_f0": 177, "key_fn": 177, "key_dl": 177, "key_il": 177, "key_dc": 177, "key_ic": 177, "key_eic": 177, "key_clear": 177, "key_eo": 177, "key_eol": 177, "key_sf": 177, "key_sr": 177, "key_npag": 177, "key_stab": 177, "key_ctab": 177, "key_catab": 177, "key_ent": 177, "key_sreset": 177, "soft": [177, 247, 263, 322, 358, 362, 427, 431, 435, 436, 472, 483], "key_reset": 177, "key_print": 177, "key_ll": 177, "key_a1": 177, "key_a3": 177, "key_b2": 177, "key_c1": 177, "key_c3": 177, "key_btab": 177, "key_beg": 177, "key_cancel": 177, "key_clos": 177, "key_command": 177, "key_copi": 177, "key_creat": 177, "key_end": 177, "key_exit": 177, "key_find": 177, "key_help": 177, "key_mark": 177, "key_messag": 177, "key_mov": 177, "key_next": 177, "key_open": 177, "key_opt": 177, "key_previ": 177, "prev": [177, 376], "key_redo": 177, "redo": [177, 247, 483], "key_refer": 177, "key_refresh": 177, "key_replac": 177, "key_restart": 177, "key_resum": 177, "key_sav": 177, "key_sbeg": 177, "key_scancel": 177, "key_scommand": 177, "key_scopi": 177, "key_screat": 177, "key_sdc": 177, "key_sdl": 177, "key_select": 177, "key_send": 177, "key_seol": 177, "key_sexit": 177, "key_sfind": 177, "key_shelp": 177, "key_shom": 177, "key_sic": 177, "key_sleft": 177, "key_smessag": 177, "key_smov": 177, "key_snext": 177, "key_sopt": 177, "key_sprevi": 177, "key_sprint": 177, "key_sredo": 177, "key_sreplac": 177, "key_sright": 177, "key_srsum": 177, "key_ssav": 177, "key_ssuspend": 177, "key_sundo": 177, "key_suspend": 177, "key_undo": 177, "key_res": 177, "key_max": 177, "key_f1": 177, "key_f2": 177, "key_f3": 177, "key_f4": 177, "twelv": [177, 376], "vt100": 177, "crude": 177, "acs": 177, "acs_bbss": 177, "acs_block": 177, "solid": [177, 476, 477], "acs_board": 177, "acs_bsb": 177, "acs_bssb": 177, "acs_bsss": 177, "acs_bte": 177, "acs_bullet": 177, "bullet": [177, 299], "acs_ckboard": 177, "stippl": 177, "acs_darrow": 177, "acs_degre": 177, "acs_diamond": 177, "acs_gequ": 177, "acs_lantern": 177, "lantern": 177, "acs_larrow": 177, "acs_lequ": 177, "acs_lte": 177, "acs_nequ": 177, "acs_pi": 177, "minus": [177, 186, 225, 275, 332, 344, 345, 347, 365, 377, 430, 436, 480, 483], "acs_plus": 177, "acs_rarrow": 177, "acs_rte": 177, "acs_s1": 177, "acs_s3": 177, "acs_s7": 177, "acs_s9": 177, "acs_sbb": 177, "acs_sbsb": 177, "acs_sbss": 177, "acs_ssbb": 177, "acs_ssb": 177, "acs_sssb": 177, "acs_ssss": 177, "crossov": 177, "acs_sterl": 177, "pound": [177, 190], "sterl": 177, "acs_tte": 177, "acs_uarrow": 177, "color_blu": 177, "color_cyan": 177, "greenish": 177, "color_green": 177, "color_magenta": 177, "purplish": 177, "color_yellow": 177, "netscap": [177, 243, 271, 403, 463, 466, 468, 474, 483], "bbedit": [177, 459], "framemak": 177, "uli": 177, "ulx": 177, "lri": 177, "lrx": 177, "stripspac": 177, "do_command": 177, "land": [177, 483], "soh": 178, "stx": 178, "etx": 178, "enq": 178, "enquiri": 178, "bel": [178, 435, 465, 466, 467, 468, 469, 475, 476], "ht": [178, 343, 384], "ff": [178, 190, 225, 319, 347, 435], "dle": 178, "dc1": 178, "xon": 178, "dc2": 178, "dc3": 178, "xoff": 178, "dc4": 178, "nak": 178, "syn": 178, "etb": 178, "em": [178, 319], "esc": 178, "gs": 178, "mnemon": [178, 268, 341, 376, 464], "teleprint": 178, "predat": [178, 190, 283, 394], "isalpha": [178, 344], "isdigit": [178, 326, 344], "islow": [178, 326, 344], "isascii": [178, 344, 480, 483], "isblank": [178, 483], "iscntrl": [178, 483], "0x1f": [178, 472, 474], "0x7f": [178, 344], "isgraph": 178, "ispunct": [178, 483], "isspac": [178, 344], "isxdigit": 178, "hexdigit": [178, 281, 345, 435], "isctrl": 178, "ismeta": 178, "controlnam": 178, "thirti": [178, 316], "bottom_panel": 179, "new_panel": 179, "top_panel": 179, "update_panel": 179, "set_userptr": 179, "userptr": [179, 483], "557": [181, 382, 480, 483], "inventoryitem": 181, "unit_pric": 181, "quantity_on_hand": 181, "total_cost": 181, "unsafe_hash": [181, 386, 483], "match_arg": [181, 386, 483], "kw_on": [181, 386, 472, 483], "weakref_slot": [181, 483], "dunder": [181, 435, 481, 483], "__match_args__": [181, 427, 428, 441, 472, 483], "__weakref__": [181, 402, 428, 483], "contribut": [181, 230, 235, 308, 319, 397, 426, 432, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "class_or_inst": 181, "classvar": [181, 386, 473, 479, 483], "initvar": [181, 483], "asdict": [181, 483], "dict_factori": [181, 340, 483], "astupl": [181, 483], "tuple_factori": 181, "make_dataclass": [181, 483], "cls_name": [181, 211], "add_on": 181, "__post_init__": [181, 483], "forewarn": 181, "is_dataclass": [181, 483], "is_dataclass_inst": 181, "frozeninstanceerror": [181, 483], "databasetyp": 181, "my_databas": 181, "intconversiondescriptor": 181, "_default": 181, "datetyp": 183, "differenti": [183, 186, 320, 395, 475, 476, 479, 482, 483], "categor": [183, 292, 319, 400, 430], "polit": [183, 462], "daylight": [183, 209, 366, 425, 482], "metr": 183, "mile": 183, "est": [183, 366, 475, 479], "edt": [183, 366, 476, 479], "minyear": 183, "maxyear": [183, 483], "microsecond": [183, 322, 340, 366, 468, 483], "customiz": [183, 369, 469, 483], "utcoffset": [183, 483], "29000": [183, 483], "29156": 183, "tiebreak": 183, "lie": [183, 242, 250, 269, 283, 344, 376, 386, 428, 436, 464, 465], "t1": [183, 186, 261, 386, 399], "t2": [183, 186, 261, 386, 399], "t3": [183, 186, 292, 386], "overal": [183, 194, 268, 292, 308, 319, 345, 347, 382, 428, 444, 469, 477, 478], "quotient": [183, 186, 275, 308, 344, 430, 449], "uuuuuu": 183, "68400": 183, "total_second": [183, 469], "270": [183, 384], "accuraci": [183, 225, 261, 275, 308, 444, 466, 474, 483], "another_year": 183, "84": [183, 343, 479, 481, 483], "31536000": 183, "ten_year": 183, "3650": 183, "nine_year": 183, "3285": 183, "three_year": 183, "1095": [183, 288], "2038": [183, 366, 483], "fromordin": [183, 480], "toordin": 183, "fromisoformat": [183, 340, 473, 480, 483], "date_str": 183, "yyyi": [183, 248], "yyyyyi": 183, "dd": [183, 248, 261, 292], "ooo": [183, 435], "2019": [183, 343, 455, 481, 483], "20191204": 183, "2021": [183, 426, 468, 472, 483], "w01": 183, "fromisocalendar": [183, 481, 483], "isocalendar": [183, 481, 482, 483], "date2": 183, "date1": 183, "timetupl": 183, "struct_tim": [183, 248, 271, 366, 479], "yday": 183, "isocalendard": 183, "mktime": [183, 209, 366, 475, 483], "2007": [183, 369, 426, 468, 483], "my_birthday": 183, "time_to_birthday": 183, "730920": 183, "730920th": 183, "70th": 183, "ic": [183, 347, 468], "tz": [183, 362, 366, 425, 474, 483], "gettimeofday": [183, 366, 483], "utcnow": [183, 474, 483], "utcfromtimestamp": [183, 341, 474, 483], "formula": [183, 230, 344, 483], "2011": [183, 203, 341, 413, 426, 428, 455, 475], "20111104": 183, "04t00": 183, "23z": 183, "20111104t000523": 183, "2t00": 183, "283000": 183, "14400": 183, "datetime2": 183, "datetime1": 183, "comparand": 183, "timetz": 183, "astimezon": [183, 190, 425, 476, 479, 481, 483], "astz": 183, "dt": [183, 209, 419, 425, 482], "fromutc": [183, 483], "magnitud": [183, 186, 262, 275, 344, 345, 462, 476], "tm_isdst": [183, 366], "utctimetupl": [183, 483], "spill": 183, "timespec": [183, 479, 483], "ddthh": 183, "ffffff": [183, 384], "132263": 183, "18t15": 183, "27t00": 183, "000100": 183, "25t00": 183, "01t12": 183, "79043": 183, "79060": 183, "tt": 183, "325": [183, 186, 467], "30pm": 183, "kabul": 183, "afghanistan": 183, "1945": 183, "thereaft": [183, 247, 266, 395], "kabultz": 183, "utc_move_d": 183, "1944": 183, "pep495": 183, "tz1": 183, "dt1": 183, "dt2": 183, "dt3": 183, "midnight": [183, 269, 468, 475, 478, 483], "obscur": [183, 193, 468, 477, 478, 480, 483], "13936": [183, 478, 483], "time_str": 183, "t04": 183, "t042301": 183, "000384": 183, "01z": 183, "123456": 183, "geograph": 183, "dston": 183, "dstoff": 183, "america": [183, 425, 426, 469, 482], "york": 183, "repli": [183, 203, 245, 271, 283, 288, 335, 338, 395, 441, 483], "discov": [183, 196, 205, 244, 362, 388, 415, 463, 464, 465, 469, 475, 477, 483], "straddl": 183, "dtoff": 183, "dtdst": 183, "tzinfo_exampl": 183, "_time": 183, "stdoffset": 183, "dstoffset": 183, "altzon": [183, 366], "dstdiff": 183, "localtimezon": 183, "stamp": [183, 384, 465, 466, 483], "dst_diff": 183, "_isdst": 183, "first_sunday_on_or_aft": 183, "days_to_go": 183, "olson": [183, 483], "pytz": 183, "twinsun": 183, "2am": 183, "dststart_2007": 183, "dstend_2007": 183, "dststart_1987_2006": 183, "dstend_1987_2006": 183, "1967": [183, 384, 469], "dststart_1967_1986": 183, "dstend_1967_1986": 183, "us_dst_rang": 183, "dststart": 183, "dstend": 183, "1966": 183, "ustimezon": 183, "reprnam": 183, "stdname": [183, 308], "dstname": [183, 332], "gap": [183, 269, 271, 475, 483], "std_time": 183, "dst_time": 183, "cst": 183, "cdt": 183, "mountain": [183, 426], "mst": 183, "mdt": 183, "pacif": [183, 425], "pst": [183, 425, 482], "pdt": [183, 425, 482], "0500": [183, 209], "u0": [183, 479], "mimic": [183, 255, 267, 347, 381, 384, 469, 471, 483], "bring": [183, 247, 261, 332, 345, 375, 477, 478, 481, 482, 483], "tzdata": [183, 425, 482, 483], "globe": 183, "civil": 183, "59pm": 183, "en_us": [183, 478, 483], "de_d": [183, 266, 478], "sonntag": 183, "montag": 183, "samstag": 183, "dez": 183, "januar": 183, "februar": 183, "dezemb": 183, "centuri": [183, 366, 475, 483], "0002": 183, "2014": [183, 237, 341, 468, 469, 477, 483], "9998": [183, 479, 483], "pm": [183, 193, 266, 297, 352, 366], "000001": 183, "hhmm": [183, 248, 366], "0400": [183, 476], "1030": 183, "063415": 183, "030712": 183, "345216": 183, "002": [183, 308, 344], "1988": [183, 190, 358, 468], "di": [183, 467], "c89": [183, 468], "01t00": 183, "0330": 183, "japan": [183, 266], "jst": 183, "gent": 183, "oracl": [184, 340, 467, 476, 483], "whichdb": [184, 470], "unread": [184, 299, 395, 471, 478, 483], "cabl": 184, "open_flag": 184, "firstkey": 184, "nextkey": 184, "reorgan": [184, 194, 463, 468, 471, 479, 481, 483], "shorten": [184, 321, 364, 475, 476, 477, 482, 483], "unwritten": [184, 483], "pag": 184, "heavili": [184, 250, 335, 427, 463, 479, 480], "dumbdbm": [184, 470], "bottleneck": [185, 226, 471], "paramount": 186, "school": [186, 347, 465], "3000000000000003": 186, "5511151231257827e": 186, "017": 186, "customari": [186, 364, 426, 455], "monetari": [186, 266, 467, 480, 483], "schoolbook": 186, "multiplicand": 186, "5600": 186, "getcontext": [186, 452, 466], "prec": [186, 452, 466, 467, 468], "142857": [186, 193], "1428571428571428571428571429": [186, 466], "modest": [186, 483], "inexact": [186, 293, 476], "prejudic": 186, "unround": 186, "coeffici": [186, 261, 343, 344, 345, 465, 477, 483], "round_ceil": [186, 466], "round_down": [186, 466], "round_floor": [186, 483], "round_half_down": 186, "round_half_even": [186, 466, 483], "round_half_up": 186, "round_up": 186, "round_05up": 186, "clamp": [186, 475, 476, 483], "invalidoper": [186, 466, 468, 469, 476], "divisionbyzero": [186, 466], "subnorm": [186, 483], "floatoper": [186, 476], "sticki": [186, 342, 358, 376], "emin": [186, 476], "emax": [186, 476], "140000000000000124344978758017532527446746826171875": 186, "4142135623730951": 186, "414213562373095048801688724": 186, "1415926535": 186, "7182818285": 186, "85987": 186, "85988": 186, "1e9999999999999999999": 186, "circus": [186, 225, 439], "87": [186, 248, 343, 348], "5058": 186, "718281828459045235360287471": [186, 468], "ln": [186, 247, 468, 476, 483], "302585092994045684017991455": 186, "quantiz": [186, 476, 483], "setcontext": 186, "basiccontext": [186, 476], "extendedcontext": [186, 476], "myothercontext": 186, "142857142857142857142857142857142857142857142857142857142857": 186, "142857143": [186, 466], "143": [186, 248, 382, 384, 464], "clear_flag": 186, "355": [186, 221], "113": [186, 221, 449], "14159292": 186, "112": [186, 343, 382, 472, 481, 482, 483], "snan": [186, 469], "devan": 186, "gar": [186, 296], "fullwidth": 186, "uff10": 186, "uff19": 186, "100000000000000088817841970012523233890533447265625": [186, 471, 475], "00000": 186, "321e": 186, "seven": [186, 244, 390, 475, 483], "as_integer_ratio": [186, 221, 344, 444, 468, 479, 481, 483], "denomin": [186, 221, 289, 344, 468, 479, 481, 483], "157": [186, 479], "as_tupl": [186, 468], "decimaltupl": 186, "compare_sign": 186, "compare_tot": 186, "unequ": [186, 344, 428, 430, 466, 467, 470, 476, 483], "unaffect": [186, 332, 366, 428, 436, 455, 465, 468, 479, 483], "compare_total_mag": 186, "copy_ab": 186, "conjug": [186, 289, 344, 468], "compli": [186, 262, 271, 314, 426, 468, 483], "copy_neg": 186, "copy_sign": 186, "561702493119680037517373933e": 186, "139": [186, 382, 464], "from_float": [186, 221, 444, 469, 471, 475, 483], "0x1": [186, 344, 444, 468, 471, 472, 474], "999999999999ap": 186, "1000000000000000055511151231257827021181583404541015625": [186, 444, 469], "fma": 186, "fuse": 186, "is_canon": [186, 469], "is_finit": 186, "is_infinit": 186, "is_nan": 186, "is_norm": [186, 387, 481, 483], "is_qnan": 186, "is_sign": 186, "is_snan": 186, "is_subnorm": 186, "is_zero": 186, "logb": 186, "logical_and": 186, "logical_invert": 186, "logical_or": 186, "logical_xor": 186, "max_mag": 186, "min_mag": 186, "next_minus": 186, "next_plus": 186, "next_toward": 186, "closest": [186, 221, 225, 275, 427, 468, 469, 474, 483], "321000e": 186, "number_class": 186, "41421356": 186, "etini": 186, "remainder_near": 186, "same_quantum": 186, "scaleb": 186, "to_eng_str": [186, 466], "123e": 186, "23e": 186, "to_integr": 186, "to_integral_valu": 186, "to_integral_exact": 186, "localcontext": [186, 344, 467, 468, 483], "calculate_someth": 186, "halt": [186, 212, 292, 296, 388, 477], "defaultcontext": [186, 476], "max_prec": [186, 476], "min_emin": [186, 476], "max_emax": [186, 476], "02e": 186, "weaker": [186, 463], "999": [186, 284], "create_decim": [186, 468, 476], "23e999": 186, "23000e": 186, "clear_trap": 186, "copy_decim": 186, "4445": 186, "0023": 186, "create_decimal_from_float": 186, "etop": 186, "recount": 186, "divide_int": 186, "qnan": 186, "msd": 186, "xor": [186, 211, 291, 344, 430], "to_sci_str": [186, 466], "scientif": [186, 345, 454, 461, 468], "425000000": [186, 476], "999999999999999999": [186, 476], "min_etini": 186, "849999999": 186, "1999999999999999997": 186, "have_thread": [186, 476], "have_contextvar": [186, 456], "decimalexcept": 186, "inward": 186, "outward": 186, "stricter": [186, 462, 463, 467, 476, 478, 480, 483], "amplifi": 186, "breakdown": 186, "seminumer": 186, "11111113": 186, "11111111": [186, 344], "51111111": 186, "5111111": 186, "20000": [186, 367], "0000003": 186, "0060000": 186, "affin": [186, 483], "indetermin": [186, 352, 376, 400, 408], "854": [186, 359], "accustom": 186, "0e": 186, "1000026": 186, "interf": [186, 283, 353, 430, 477], "applicationwid": 186, "moneyfmt": 186, "curr": 186, "dp": [186, 483], "neg": [186, 226, 261, 291], "trailneg": 186, "money": [186, 348], "currenc": [186, 266, 467, 483], "1234567": [186, 221, 452, 471], "8901": [186, 482, 483], "568": 186, "123456789": 186, "141592653589793238462643383": 186, "na": [186, 326, 463, 472, 473, 474, 481, 482, 483], "da": [186, 261, 319], "389056098930650227230427461": 186, "38905609893": 186, "0j": [186, 225, 344, 419, 483], "cosin": [186, 275], "radian": [186, 275, 384, 465, 481, 483], "taylor": [186, 468, 483], "8775825618903727161162815826": 186, "87758256189": 186, "sine": [186, 275], "4794255386042030002732879352": 186, "479425538604": 186, "twoplac": 186, "214": [186, 308], "72": [186, 247, 261, 343, 384, 466, 467, 483], "4314": 186, "2e2": 186, "2e": [186, 483], "philosophi": [186, 196, 470], "1416": [186, 442], "00005": 186, "remove_expon": 186, "5e": [186, 347], "141592653589793115997963468544185161590576171875": 186, "spurious": [186, 333, 471, 483], "anomali": 186, "ill": [186, 304, 475, 480, 483], "23456789": 186, "2345678": 186, "2345": 186, "pypy3": 186, "karatsuba": [186, 465], "bignum": [186, 344, 476], "904625697166532776746648320380374280103671755200316906558262375061821325312": 186, "overalloc": [186, 344, 481, 483], "8gb": 186, "500mb": 186, "maxdigit": [186, 352], "getsizeof": [186, 352, 362, 382, 450, 468, 473, 483], "524288112": 186, "tighter": [186, 427, 466, 476], "sigsegv": [188, 214, 333, 455, 476, 483], "sigfp": [188, 214, 333, 455, 476, 483], "sigabrt": [188, 214, 293, 333, 455, 476, 483], "sigbus": [188, 214, 333, 455, 476], "sigil": [188, 214, 333, 455, 476], "iobas": [188, 190, 213, 215, 258, 378, 455, 481, 483], "readm": [188, 223, 247, 258, 296, 456, 460, 461, 462, 475, 479, 480, 483], "unclos": [188, 247, 340, 475, 479, 483], "rst": [188, 296, 456, 460, 480, 483], "18748": [188, 481, 483], "modal": [189, 373], "askfloat": 189, "askinteg": [189, 483], "askstr": 189, "buttonbox": [189, 375], "feel": [189, 292, 376, 441, 464, 465, 468, 472], "initialdir": 189, "initialfil": 189, "defaultextens": 189, "askopenfil": 189, "asksaveasfil": 189, "savea": 189, "askopenfilenam": 189, "asksaveasfilenam": 189, "askdirectori": 189, "mustexist": 189, "cancel_command": 189, "dirs_double_ev": 189, "dirs_select_ev": 189, "files_double_ev": 189, "files_select_ev": 189, "filter_command": 189, "get_filt": 189, "get_select": 189, "dir_or_fil": 189, "curdir": [189, 216, 293, 294, 332, 369], "ok_ev": 189, "set_filt": 189, "set_select": 189, "loadfiledialog": 189, "ok_command": 189, "savefiledialog": 189, "ratcliff": 190, "obershelp": 190, "gestalt": 190, "longest": [190, 259, 261, 435, 464, 467, 478], "junk": [190, 283, 288, 348, 483], "cubic": 190, "heurist": [190, 197, 203, 225, 471, 475, 483], "autojunk": 190, "intralin": 190, "htmldiff": [190, 466, 478, 483], "intra": 190, "tabsiz": [190, 344, 364, 483], "wrapcolumn": 190, "linejunk": 190, "charjunk": 190, "is_character_junk": 190, "make_fil": [190, 478, 483], "fromlin": 190, "tolin": 190, "fromdesc": 190, "todesc": 190, "numlin": 190, "hyperlink": [190, 483], "make_t": 190, "context_diff": 190, "fromfiled": 190, "tofiled": 190, "lineterm": 190, "eggi": 190, "hamster": 190, "get_close_match": 190, "cutoff": [190, 483], "appel": 190, "ape": 190, "peach": 190, "puppi": 190, "pineappl": 190, "is_line_junk": 190, "constitut": [190, 259, 331, 394, 426, 483], "nois": [190, 292, 293, 343, 483], "ntwo": 190, "nthree": 190, "ntree": 190, "nemu": 190, "emu": 190, "unified_diff": 190, "diff_byt": [190, 478, 483], "dfunc": 190, "metzen": 190, "dr": [190, 223, 364, 475], "dobb": 190, "journal": 190, "isjunk": 190, "synch": 190, "bjunk": [190, 477], "bpopular": [190, 477], "b2j": 190, "set_seq": 190, "set_seq2": 190, "set_seq1": 190, "find_longest_match": [190, 483], "alo": 190, "ahi": 190, "blo": 190, "bhi": 190, "get_matching_block": [190, 467, 483], "abxcd": 190, "get_opcod": 190, "j1": [190, 460, 483], "j2": 190, "qabxcd": 190, "abycdf": 190, "get_grouped_opcod": 190, "cluster": [190, 225, 337, 455, 468], "quick_ratio": 190, "real_quick_ratio": 190, "tide": [190, 375], "diet": 190, "bcde": [190, 261, 469], "volatil": [190, 284, 483], "text1": 190, "text2": 190, "flat": [190, 201, 204, 369, 376, 412], "interlin": 190, "file_mtim": 190, "st_mtime": [190, 234, 293, 296, 342, 358, 465], "fromdat": 190, "todat": 190, "tf": [190, 475], "file1": [190, 390, 469], "file2": [190, 390, 469], "r1": [190, 242, 384, 394], "r2": [190, 242, 384, 394], "ndiff_output": 190, "file1_or_file2": 190, "sed": [190, 483], "gripe": 190, "spray": 190, "fcompar": 190, "f1name": 190, "f2name": 190, "qr": 190, "noisi": [190, 292, 483], "qseen": 190, "rseen": 190, "whichfil": 190, "vms": [191, 292, 476, 477], "accompani": [191, 271, 335, 337, 463, 475, 483], "show_cach": [191, 483], "alist": [191, 304, 428], "disassembl": [191, 264, 300, 362, 477, 480, 483], "load_glob": [191, 481, 483], "load_fast": [191, 477, 483], "reciev": 191, "first_lin": 191, "current_offset": [191, 477], "analys": 191, "get_instruct": [191, 477, 483], "from_traceback": [191, 477], "codeobj": 191, "code_info": [191, 475], "show_cod": [191, 475, 477], "distb": [191, 477, 483], "lasti": [191, 483], "disco": 191, "findlinestart": [191, 483], "co_lin": [191, 428, 472, 483], "co_firstlineno": [191, 255, 428, 483], "co_lnotab": [191, 255, 428, 472, 474, 479, 483], "findlabel": 191, "stack_effect": [191, 477, 483], "argval": [191, 362], "argrepr": 191, "starts_lin": 191, "is_jump_target": 191, "nop": [191, 359, 441, 483], "pop_top": [191, 483], "end_for": 191, "end_send": [191, 474], "quicken": [191, 483], "unary_neg": 191, "unary_not": 191, "unary_invert": 191, "get_it": 191, "get_yield_from_it": [191, 483], "binary_op": [191, 473, 483], "rhs": [191, 476], "lhs": 191, "binary_subscr": [191, 483], "store_subscr": [191, 483], "delete_subscr": 191, "binary_slic": [191, 474, 483], "store_slic": [191, 474, 483], "get_await": [191, 483], "co_iterable_coroutin": [191, 255], "get_ait": 191, "get_anext": 191, "end_async_for": [191, 481, 483], "cleanup_throw": [191, 474], "before_async_with": 191, "set_add": 191, "list_append": [191, 466], "map_add": [191, 481], "return_const": [191, 474, 483], "consti": 191, "co_const": [191, 255, 428, 483], "yield_valu": [191, 483], "setup_annot": [191, 479], "pop_except": 191, "push_exc_info": [191, 473], "check_exc_match": [191, 473, 483], "check_eg_match": [191, 473, 483], "with_except_start": [191, 483], "context_manag": 191, "load_assertion_error": [191, 482], "load_build_class": 191, "__build_class__": [191, 450, 483], "before_with": [191, 473], "get_len": 191, "match_map": 191, "match_sequ": 191, "match_key": [191, 473], "store_nam": [191, 341], "namei": 191, "co_nam": [191, 255, 381, 428, 478, 483], "store_fast": [191, 483], "store_glob": 191, "delete_nam": 191, "unpack_sequ": [191, 483], "unpack_ex": 191, "leftov": [191, 292], "extended_arg": [191, 483], "store_attr": [191, 483], "delete_attr": 191, "delete_glob": 191, "load_const": [191, 475, 477, 483], "load_nam": [191, 475], "load_loc": [191, 474, 483], "load_from_dict_or_deref": [191, 474, 483], "load_from_dict_or_glob": [191, 474], "build_tupl": [191, 483], "build_list": [191, 483], "build_set": [191, 483], "build_map": [191, 483], "build_const_key_map": [191, 479, 483], "build_str": [191, 479, 483], "list_extend": [191, 483], "set_upd": [191, 483], "dict_upd": [191, 483], "dict_merg": [191, 483], "load_attr": [191, 472, 474, 483], "load_super_attr": [191, 474, 483], "compare_op": [191, 475, 482, 483], "cmp_op": 191, "is_op": [191, 482, 483], "contains_op": [191, 482, 483], "import_nam": [191, 431], "import_from": [191, 431], "jump_forward": [191, 483], "jump_backward": [191, 473, 483], "jump_backward_no_interrupt": [191, 473, 483], "pop_jump_if_tru": [191, 473, 483], "pop_jump_if_fals": [191, 473, 475, 483], "pop_jump_if_not_non": [191, 483], "pop_jump_if_non": [191, 483], "for_it": [191, 483], "var_num": 191, "load_fast_check": [191, 474, 483], "load_fast_and_clear": [191, 474], "delete_fast": 191, "make_cel": [191, 473, 483], "load_closur": [191, 483], "co_fastlocalnam": [191, 483], "load_deref": 191, "load_classderef": [191, 474, 477], "store_deref": [191, 483], "delete_deref": 191, "copy_free_var": [191, 473, 483], "raise_vararg": 191, "kw_name": [191, 473, 483], "ascend": [191, 308, 344], "call_function_ex": [191, 479, 483], "push_nul": [191, 473, 483], "load_method": [191, 474, 480, 483], "make_funct": [191, 472, 479, 483], "0x02": [191, 479], "0x08": [191, 428], "build_slic": 191, "format_valu": [191, 479, 483], "fmt_spec": 191, "match_class": [191, 473], "return_gener": [191, 473, 483], "have_argu": [191, 474], "hasarg": [191, 474], "call_intrinsic_1": [191, 474, 483], "intrinsic_1_invalid": 191, "intrinsic_print": 191, "intrinsic_import_star": 191, "intrinsic_stopiteration_error": 191, "intrinsic_async_gen_wrap": 191, "aync": 191, "intrinsic_unary_posit": 191, "intrinsic_list_to_tupl": 191, "intrinsic_typevar": 191, "intrinsic_paramspec": 191, "intrinsic_typevartupl": 191, "intrinsic_subscript_gener": 191, "intrinsic_typealia": 191, "typealiastyp": [191, 386, 427, 436, 474, 483], "call_intrinsic_2": [191, 474, 483], "intrinsic2": 191, "intrinsic_2_invalid": 191, "intrinsic_prep_reraise_star": 191, "intrinsic_typevar_with_bound": 191, "intrinsic_typevar_with_constraint": 191, "intrinsic_set_function_type_param": 191, "__type_params__": [191, 255, 344, 386, 427, 428, 429, 483], "setup_fin": [191, 473, 483], "setup_cleanup": 191, "setup_with": [191, 473], "pop_block": [191, 473], "jump_no_interrupt": [191, 483], "undirect": 191, "min_pseudo_opcod": 191, "min_instrumented_opcod": 191, "opmap": 191, "hasconst": 191, "hasfre": 191, "hasnam": 191, "hasjrel": 191, "hasjab": 191, "hasloc": 191, "hascompar": 191, "hasexc": [191, 474], "expositori": 193, "265252859812191058636308480000000": 193, "ridicul": 193, "1e100": [193, 275, 430, 435], "1e300": 193, "testmod": [193, 451, 466, 471], "test_doctest": [193, 483], "testfil": [193, 467, 483], "giant": 193, "720": [193, 475, 481], "__test__": 193, "blanklin": [193, 466], "normalize_whitespac": 193, "trial": [193, 318, 465], "crumb": 193, "freeli": [193, 344, 426], "your_dict": 193, "rapid": [193, 308, 481, 483], "verbatim": [193, 348], "ndetail": 193, "transcript": 193, "ignore_exception_detail": [193, 469], "tild": [193, 231, 294, 377], "dont_accept_true_for_1": 193, "dont_accept_blanklin": 193, "oop": [193, 443], "comparison_flag": 193, "report_udiff": [193, 466], "report_cdiff": [193, 466], "report_ndiff": [193, 466], "mismatch": [193, 213, 216, 267, 319, 334, 341, 413, 427, 463, 465, 467, 469, 478, 483], "report_only_first_failur": 193, "fail_fast": [193, 477], "reporting_flag": 193, "register_optionflag": 193, "my_flag": 193, "directive_opt": 193, "on_or_off": 193, "directive_option_nam": 193, "hermion": 193, "harri": [193, 467], "7948648": 193, "0x00ac18f0": 193, "14285714285714285": [193, 446], "142857142857": 193, "contriv": [193, 483], "utter": [193, 470], "module_rel": 193, "optionflag": 193, "extraglob": 193, "raise_on_error": 193, "failure_count": 193, "test_count": 193, "slate": [193, 358, 432, 477, 478, 483], "mortem": [193, 297, 352, 440, 474], "exclude_empti": 193, "run_docstring_exampl": 193, "nonam": [193, 422], "compileflag": 193, "systemat": [193, 483], "my_module_with_doctest": 193, "addtest": [193, 388], "doctestsuit": [193, 388, 465, 478, 483], "testsuit": [193, 362, 388, 465, 477, 478, 483], "docfilesuit": [193, 467], "teardown": [193, 362, 388, 389, 390, 469, 483], "failureexcept": [193, 388], "tear": [193, 388], "set_unittest_reportflag": 193, "test_find": 193, "doctestcas": 193, "testcas": [193, 362, 388, 389, 390, 426, 451, 469, 471, 473, 474, 475, 476, 477, 481, 483], "docfilecas": 193, "runtest": [193, 388], "revolv": 193, "exc_msg": 193, "format_exception_on": [193, 381, 472, 483], "get_doctest": 193, "get_exampl": 193, "report_start": 193, "report_success": 193, "report_unexpected_except": 193, "report_failur": 193, "clear_glob": 193, "report_": 193, "check_output": [193, 348, 469, 477, 483], "output_differ": 193, "debugrunn": 193, "cont": 193, "script_from_exampl": 193, "testsourc": 193, "post_mortem": [193, 297, 468], "debug_src": 193, "sketch": [193, 243, 441, 467, 468], "unexpectedexcept": 193, "doctestfailur": 193, "grown": [193, 328], "invalu": [193, 319], "amaz": [193, 464], "skimp": 193, "prose": 193, "attitud": 193, "coher": [193, 226], "narrat": 193, "blur": [193, 261], "_regrtest_top": 193, "2821": 194, "5322": [194, 196, 199, 201, 203, 205, 207, 208, 335], "6532": [194, 205, 207, 208, 478, 480, 483], "2046": [194, 197, 202], "2047": [194, 202, 203, 208, 209, 235, 475], "2183": [194, 196, 205, 483], "2231": [194, 196, 202, 205, 209], "subcompon": 194, "forego": [194, 426], "promot": [194, 426, 468, 483], "emailpolici": [194, 197, 203, 208, 476, 478, 483], "offic": [194, 426], "input_charset": [195, 196], "default_charset": 195, "outright": 195, "header_encod": 195, "qp": 195, "body_encod": [195, 483], "output_charset": [195, 196, 469, 473, 481], "input_codec": 195, "output_codec": 195, "get_body_encod": 195, "7bit": [195, 197, 198, 201, 203, 208, 271, 475, 476, 483], "get_output_charset": 195, "header_encode_lin": 195, "maxlength": [195, 283], "add_charset": 195, "header_enc": 195, "body_enc": 195, "add_codec": 195, "add_alia": 195, "codecnam": 195, "rfc822": [196, 197, 204, 205, 206, 207, 248, 464, 466], "envelop": [196, 201, 205, 207, 248, 271, 335, 483], "from_": [196, 271, 376, 483], "as_str": [196, 201, 202, 205, 477, 483], "unixfrom": [196, 201, 205, 477, 483], "maxheaderlen": [196, 201, 205, 477], "max_line_length": [196, 205, 208, 476, 483], "mangle_from_": [196, 201, 208, 478], "as_byt": [196, 200, 201, 205, 208, 251, 477], "bytesgener": [196, 197, 201, 205, 208, 335, 475], "__bytes__": [196, 201, 205, 344, 386, 428, 473, 477, 478, 483], "is_multipart": [196, 199, 205, 207, 483], "cte": [196, 197, 198, 203, 205, 208, 340, 483], "get_content_maintyp": [196, 200, 205], "set_unixfrom": [196, 205], "get_unixfrom": [196, 205], "set_payload": [196, 206, 483], "set_cont": [196, 197, 198, 200, 205, 207, 208, 483], "get_payload": [196, 200, 204, 206, 475, 483], "invalidbase64paddingdefect": [196, 199], "invalidbase64charactersdefect": [196, 199], "8bit": [196, 197, 198, 201, 202, 203, 207, 208, 475, 476, 483], "get_cont": [196, 197, 200, 205, 208], "iter_part": [196, 205, 207], "set_charset": 196, "get_charset": [196, 205], "2822": [196, 202, 209, 242, 245, 271, 366, 451, 464], "contravent": 196, "mymessag": [196, 205], "get_al": [196, 205, 209, 407, 483], "extant": [196, 205, 483], "roolz": [196, 205], "failobj": [196, 205], "add_head": [196, 205, 206, 389, 395, 407], "_param": [196, 205, 206, 407], "disposit": [196, 197, 203, 205, 248, 293, 333, 400, 407, 478], "bud": [196, 205, 407], "gif": [196, 205, 206, 231, 249, 369, 384, 407, 467, 483], "fu": [196, 205, 483], "baller": [196, 205], "ppt": [196, 205], "dfballer": 196, "replace_head": [196, 205], "maintyp": [196, 197, 200, 201, 203, 204, 205], "get_default_typ": [196, 205], "mandat": [196, 205, 248, 262, 319, 366, 479], "get_content_subtyp": [196, 205], "subpart": [196, 198, 199, 201, 204, 205, 206, 207], "set_default_typ": [196, 205], "get_param": [196, 209, 483], "unquot": [196, 205, 209, 303, 394, 395, 483], "collaps": [196, 259, 364, 477, 483], "collapse_rfc2231_valu": [196, 209], "rawparam": 196, "set_param": [196, 205, 477], "requot": [196, 205], "del_param": [196, 205], "set_typ": 196, "make_": 196, "add_": [196, 197], "get_filenam": [196, 200, 205, 250, 423, 477], "get_boundari": [196, 205], "set_boundari": [196, 199, 205], "headerparseerror": [196, 199, 205], "get_content_charset": [196, 205], "get_content_disposit": [196, 205, 478], "deliveri": [196, 200, 205, 207, 271, 293, 333, 337, 483], "_structur": [196, 204, 205], "preambl": [196, 200, 205, 300, 483], "armor": [196, 205], "epilogu": [196, 205], "clear_cont": [197, 205], "typ": [197, 248, 386, 474, 483], "mimepart": [197, 205, 477], "add_get_handl": 197, "add_set_handl": 197, "typekey": 197, "raw_data_manag": [197, 208], "content_manag": [197, 205, 208, 477], "cid": [197, 200, 337], "headernam": 197, "headervalu": 197, "mimetext": [198, 206, 478, 483], "_subtyp": [198, 206], "_charset": [198, 206, 230, 483], "mimeaudio": [198, 206, 483], "mimeimag": [198, 199, 200, 206], "encode_quopri": 198, "unprint": [198, 483], "encode_base64": [198, 206], "drawback": [198, 252, 292, 480], "encode_7or8bit": 198, "encode_noop": 198, "messageerror": 199, "messageparseerror": [199, 271], "boundaryerror": 199, "multipartconversionerror": [199, 206], "add_payload": 199, "mimenonmultipart": [199, 206, 483], "messagedefect": 199, "headerdefect": [199, 203], "noboundaryinmultipartdefect": 199, "startboundarynotfounddefect": 199, "closeboundarynotfounddefect": 199, "firstheaderlineiscontinuationdefect": 199, "misplacedenvelopeheaderdefect": 199, "missingheaderbodyseparatordefect": 199, "malformedheaderdefect": 199, "multipartinvariantviolationdefect": [199, 207, 483], "invalidbase64lengthdefect": 199, "invaliddatedefect": 199, "textfil": 200, "send_messag": [200, 208, 335, 475, 478, 483], "bytespars": [200, 201, 207, 475, 483], "uncom": [200, 247, 464, 474], "messagefil": 200, "uncommon": [200, 250, 340, 467, 483], "parsestr": [200, 207, 411, 412, 414, 462, 478, 483], "someone_els": 200, "display_nam": [200, 203, 476], "reunion": 200, "pngfile": 200, "img_data": 200, "add_attach": [200, 205], "png": [200, 206, 240, 249, 369, 376], "abspath": [200, 294, 296, 399, 469, 483], "isfil": [200, 294, 296, 358, 438, 475, 481, 483], "guess_typ": [200, 245, 276, 407, 483], "msgfile": 200, "message_from_binary_fil": [200, 207, 208, 475], "sanit": [200, 456, 483], "guess_extens": [200, 276], "03d": [200, 267, 344], "make_msgid": [200, 209, 483], "ayon": 200, "asperg": 200, "pour": 200, "jeuner": 200, "pew": 200, "pepe": 200, "penelop": 200, "pussycat": 200, "fabrett": 200, "salut": 200, "cela": 200, "ressembl": 200, "yumm": 200, "roast": 200, "asparagus": 200, "epicuri": 200, "203718": 200, "asparagus_cid": 200, "add_altern": [200, 205], "href": [200, 238, 240, 242, 413, 469], "img": [200, 240], "peel": 200, "jpg": [200, 258, 294, 419, 452, 467], "add_rel": [200, 205], "jpeg": [200, 206, 249, 369, 446, 468, 483], "magic_html_pars": 200, "html_text": 200, "partfil": 200, "preview": [200, 257, 483], "useless": [200, 411, 481, 483], "get_bodi": [200, 205, 207], "preferencelist": [200, 205], "ans": 200, "richest": 200, "content_typ": [200, 203], "iter_attach": [200, 205, 483], "matthew": [200, 473, 477, 483], "dixon": 200, "cowl": 200, "regener": [201, 311, 432, 456, 469, 474, 478, 479, 483], "necess": [201, 483], "smime": 201, "outfp": 201, "refold": [201, 208, 476], "rewrap": [201, 226], "manheaderlen": 201, "linesep": [201, 202, 203, 208, 225, 258, 293, 335, 348, 476, 483], "cte_typ": [201, 203, 208, 476], "craft": [201, 299, 432, 475, 483], "amessag": 201, "transfer_encod": 201, "decodedgener": [201, 479, 483], "part_info": 201, "_mangle_from_": 201, "refold_sourc": [201, 208, 476], "recoveri": [201, 248, 395, 431], "worldwid": [202, 235, 426], "slew": 202, "xf6stal": 202, "f6stal": 202, "maxlinelen": 202, "header_nam": [202, 395, 407], "continuation_w": 202, "straight": [202, 206, 225, 283, 352, 388, 402, 411, 444, 462, 470, 481, 483], "splitchar": 202, "decode_head": [202, 288, 476], "decoded_str": 202, "make_head": [202, 476], "decoded_seq": 202, "header_factori": [203, 208, 476], "basehead": [203, 205], "unstructuredhead": 203, "max_count": [203, 208], "_myattr": 203, "myattr": 203, "unstructur": 203, "datehead": 203, "wild": [203, 436, 462, 483], "format_datetim": [203, 209, 476], "addresshead": 203, "singleaddresshead": 203, "uniqueunstructuredhead": 203, "mimeversionhead": 203, "parameterizedmimehead": 203, "supplement": [203, 293, 461, 468, 477, 483], "contenttypehead": 203, "contentdispositionhead": 203, "content_disposit": 203, "contenttransferencod": 203, "base_class": 203, "default_class": 203, "use_default_map": 203, "uniquedatehead": 203, "resent": [203, 209, 271, 335], "uniquesingleaddresshead": 203, "uniqueaddresshead": 203, "bcc": [203, 335], "contenttransferencodinghead": 203, "messageidhead": 203, "map_to_typ": 203, "addr_spec": [203, 476], "5321": [203, 476], "body_line_iter": 204, "typed_subpart_iter": 204, "include_default": 204, "message_from_fil": [204, 207], "addtion": 205, "6531": [205, 208, 335, 478, 483], "is_attach": [205, 483], "make_rel": 205, "make_altern": 205, "make_mix": 205, "ordinarili": [206, 331], "dice": 206, "mimebas": 206, "_maintyp": 206, "nonmultipart": [206, 483], "mimemultipart": 206, "_subpart": 206, "mimeappl": 206, "_data": [206, 226], "_encod": 206, "_audiodata": 206, "_imagedata": 206, "tiff": [206, 249, 369, 467], "pbm": [206, 249], "pgm": [206, 249, 369], "ppm": [206, 249, 369, 375], "rast": [206, 249], "xbm": [206, 249, 369, 375], "bmp": [206, 247, 249, 369, 476, 477, 480, 481, 483], "webp": [206, 249, 369, 478, 483], "exr": [206, 249], "mimemessag": 206, "_msg": 206, "thereof": [206, 268, 269, 293, 362, 365, 426, 429, 483], "_text": 206, "cloth": 207, "bytesfeedpars": [207, 475], "conduc": 207, "_factori": 207, "message_factori": [207, 208, 479], "stitch": 207, "fed": [207, 235, 283, 314, 413, 467], "bytesheaderpars": [207, 476], "headerpars": [207, 476], "_class": 207, "headerson": [207, 483], "parsebyt": 207, "message_from_byt": [207, 475], "message_from_str": [207, 476], "mybyt": 207, "edness": 207, "dispar": 208, "settabl": [208, 247, 400, 462, 464, 483], "mymsg": [208, 477], "compat_smtp": 208, "compat_strict": 208, "raise_on_defect": [208, 476], "compat_strict_smtp": 208, "commut": [208, 261, 474], "policy100": 208, "policy80": 208, "apolici": 208, "78": [208, 284, 476, 483], "disciplin": 208, "fold_binari": 208, "register_defect": 208, "handle_defect": 208, "header_max_count": 208, "header_source_pars": 208, "sourcelin": 208, "unfold": 208, "header_store_pars": 208, "header_fetch_pars": 208, "smtputf8": [208, 335, 478, 483], "stype": 208, "rejoin": 208, "refold_head": 208, "traffic": [208, 337, 341, 464, 475, 483], "somepolici": 208, "isdst": [209, 474, 483], "idstr": 209, "strengthen": [209, 483], "parseaddr": [209, 483], "constitu": [209, 251, 410], "realnam": [209, 483], "formataddr": [209, 476], "email_address": 209, "getaddress": [209, 483], "fieldvalu": 209, "tos": [209, 472, 483], "ccs": [209, 341], "resent_to": 209, "resent_cc": 209, "all_recipi": 209, "parsed": 209, "mailer": 209, "parsedate_tz": [209, 483], "greenwich": [209, 366], "parsedate_to_datetim": [209, 476], "mktime_tz": 209, "epoch": [209, 243, 248, 271, 288, 340, 358, 366, 419, 463, 483], "formatd": [209, 466, 483], "timev": [209, 483], "usegmt": 209, "decode_rfc2231": 209, "encode_rfc2231": 209, "fallback_charset": 209, "decode_param": 209, "pipx": [210, 469, 477], "altinstal": [210, 456, 460, 469, 475, 477], "default_pip": 210, "reprenum": [211, 473], "enumcheck": [211, 473], "named_flag": 211, "nonmemb": [211, 473, 483], "global_enum": [211, 473], "show_flag_valu": 211, "some_var": 211, "enummeta": [211, 428, 473, 474, 483], "powersofthre": 211, "myintenum": 211, "seventeen": 211, "1a": [211, 479], "otherstyl": 211, "something_els": 211, "_numeric_repr_": 211, "crimson": 211, "neon": 211, "0x18": 211, "strictflag": 211, "0b0": 211, "10100": 211, "00111": 211, "conformflag": 211, "ejectflag": 211, "keepflag": 211, "regexflag": [211, 319, 473, 480, 483], "errorcod": [212, 314], "eperm": [212, 213, 476, 483], "enoent": [212, 213, 328, 476, 483], "esrch": [212, 213], "eio": 212, "enxio": 212, "e2big": 212, "enoexec": 212, "ebadf": [212, 328, 479, 482, 483], "echild": [212, 213], "eagain": [212, 213, 215, 293], "enomem": [212, 483], "eacc": [212, 213, 215, 250, 476, 483], "efault": 212, "enotblk": 212, "ebusi": 212, "eexist": [212, 213, 293, 483], "exdev": [212, 293], "enodev": 212, "enotdir": [212, 213], "eisdir": [212, 213], "einval": [212, 293, 483], "enfil": 212, "emfil": [212, 483], "enotti": [212, 483], "typewrit": 212, "etxtbsi": 212, "efbig": 212, "enospc": 212, "espip": 212, "erof": 212, "emlink": 212, "epip": [212, 213, 333], "edeadlk": 212, "enametoolong": 212, "enolck": 212, "enosi": [212, 483], "enotempti": 212, "eloop": 212, "ewouldblock": [212, 213], "enomsg": 212, "eidrm": 212, "echrng": 212, "el2nsync": 212, "el3hlt": 212, "el3rst": 212, "elnrng": 212, "eunatch": 212, "enocsi": 212, "csi": 212, "el2hlt": 212, "ebad": 212, "ebadr": 212, "exful": 212, "enoano": 212, "anod": 212, "ebadrqc": 212, "ebadslt": 212, "edeadlock": 212, "ebfont": 212, "enostr": 212, "enodata": [212, 293], "etim": 212, "enosr": 212, "enonet": 212, "enopkg": 212, "eremot": 212, "enolink": 212, "eadv": 212, "advertis": [212, 288, 335, 341, 426, 468, 477, 478, 481, 483], "esrmnt": 212, "srmount": 212, "ecomm": 212, "eproto": 212, "emultihop": 212, "multihop": 212, "edotdot": 212, "rfs": 212, "ebadmsg": 212, "eoverflow": 212, "enotuniq": 212, "ebadfd": 212, "eremchg": 212, "elibacc": 212, "elibbad": 212, "elibscn": 212, "elibmax": 212, "elibexec": 212, "eilseq": 212, "erestart": 212, "estrpip": 212, "euser": 212, "enotsock": 212, "edestaddrreq": 212, "emsgsiz": 212, "eprototyp": 212, "enoprotoopt": 212, "eprotonosupport": 212, "esocktnosupport": 212, "eopnotsupp": 212, "enotsup": 212, "epfnosupport": 212, "eafnosupport": 212, "eaddrinus": 212, "eaddrnotavail": 212, "enetdown": 212, "enetunreach": [212, 483], "enetreset": 212, "econnabort": [212, 213], "econnreset": [212, 213, 483], "enotconn": [212, 477], "eshutdown": [212, 213], "etoomanyref": 212, "splice": [212, 293, 472, 483], "etimedout": [212, 213, 468, 483], "econnrefus": [212, 213], "ehostdown": 212, "ehostunreach": 212, "ealreadi": [212, 213], "estal": 212, "stale": [212, 250, 477, 483], "nfs": [212, 293, 483], "euclean": 212, "enotnam": 212, "xenix": 212, "enavail": 212, "eisnam": 212, "eremoteio": 212, "edquot": 212, "eqful": [212, 483], "enotcap": [212, 213, 483], "ecancel": 212, "eownerdead": 212, "enotrecover": 212, "recover": [212, 415], "new_exc": 213, "original_exc": 213, "3134": [213, 470, 483], "someexcept": [213, 388, 470], "add_not": [213, 443, 473, 483], "__notes__": [213, 381, 483], "rescu": 213, "unqualifi": [213, 348, 440, 477, 483], "perror": 213, "environmenterror": [213, 450, 476], "end_offset": [213, 381, 472, 483], "abandon": [213, 369, 415, 475], "inappropri": [213, 338, 346, 428, 483], "characters_written": [213, 483], "rational": [213, 235, 293, 328, 329, 333, 337, 358, 366, 402, 428, 462, 463, 464, 465, 466, 467, 468, 469, 470, 474, 475, 477, 478, 479, 481, 483], "upcom": [213, 226, 325, 483], "dubious": [213, 400, 483], "recognis": [213, 268, 302, 331, 340, 428, 483], "mygroup": [213, 341], "eg": [213, 243, 248, 293, 341, 427, 483], "apport": 214, "sigaltstack": [214, 483], "catastroph": [214, 475, 483], "dump_traceback": [214, 478, 483], "all_thread": 214, "print_tb": [214, 381, 478], "uninstal": [214, 281, 382, 453, 461, 477, 483], "is_en": 214, "dump_traceback_lat": [214, 478, 483], "cancel_dump_traceback_lat": 214, "watchdog": 214, "dup2": [214, 293, 333, 473, 478, 480, 483], "0x00007fb899f39700": [214, 476], "f_add_seal": 215, "f_get_seal": 215, "f_seal_": 215, "seal": [215, 389, 475, 480, 483], "memfd_creat": [215, 293, 481, 483], "f_getpath": [215, 483], "f_ofd_getlk": [215, 482, 483], "f_ofd_setlk": [215, 482, 483], "f_ofd_setlkw": [215, 482, 483], "f_getpipe_sz": [215, 483], "f_setpipe_sz": [215, 483], "f_dup2fd": [215, 473, 483], "f_dup2fd_cloexec": [215, 473, 483], "fd_cloexec": [215, 473], "ficlon": [215, 483], "ficlonerang": [215, 483], "reflink": [215, 293], "btrfs": [215, 293], "ocfs2": 215, "xfs": [215, 293], "mutate_flag": 215, "simplif": [215, 483], "getpgrp": [215, 293], "13341": 215, "tiocgpgrp": 215, "lock_un": 215, "lock_sh": 215, "lock_ex": 215, "lock_nb": 215, "lock_": 215, "seek_set": [215, 258, 278, 293, 340, 467, 471], "seek_cur": [215, 258, 278, 293, 340, 467, 471], "seek_end": [215, 258, 278, 293, 340, 467, 471], "svr4": 215, "f_setfl": 215, "lockdata": 215, "hhllhh": 215, "f_wrlck": 215, "f_setlkw": 215, "o_shlock": [215, 293, 467, 483], "o_exlock": [215, 293, 467, 483], "trade": [216, 292, 344, 426], "clear_cach": [216, 425, 477], "cmpfile": 216, "dir1": 216, "dir2": 216, "mtime": [216, 234, 250, 293, 358, 396, 481, 483], "default_ignor": [216, 477], "pardir": [216, 293], "report_partial_closur": 216, "report_full_closur": 216, "left_list": 216, "right_list": 216, "left_on": 216, "right_on": 216, "common_dir": 216, "common_fil": 216, "common_funni": 216, "same_fil": 216, "diff_fil": 216, "funny_fil": 216, "mydircmp": 216, "print_diff_fil": 216, "dcmp": 216, "sub_dcmp": 216, "openhook": [218, 467, 483], "hook_compress": [218, 472], "inplac": [218, 483], "filelineno": 218, "isfirstlin": 218, "isstdin": 218, "nextfil": 218, "bak": 218, "fi": [218, 225], "hook_encod": [218, 479, 483], "fnmatchcas": [220, 388, 483], "normcas": [220, 294, 483], "reobj": 220, "other_fract": 221, "limit_denomin": 221, "414213": 221, "1414213": 221, "125": [221, 446, 449, 468], "7e": 221, "2476979795053773": [221, 475], "2251799813685248": [221, 475], "gcd": [221, 275, 478, 482, 483], "supportsint": [221, 386, 473, 481, 483], "is_integ": [221, 344, 483], "flt": 221, "from_decim": [221, 475], "max_denomin": 221, "1415926535897932": 221, "4503599627370497": 221, "9007199254740992": 221, "__floor__": [221, 275, 389, 428, 483], "greatest": [221, 275, 344], "__ceil__": [221, 275, 389, 428, 483], "ceil": [221, 275, 289, 322, 344, 428, 468, 481, 483], "__round__": [221, 225, 386, 389, 428, 470, 483], "ndigit": [221, 225, 428, 444, 483], "40g": 221, "1428571428571428571428571428571428571429": 221, "1_234_567": 221, "141593e": 221, "old_pric": 221, "new_pric": 221, "499": [221, 223, 241, 288], "tower": [221, 384, 468, 470, 483], "959": 223, "2640": [223, 482, 483], "retrlin": 223, "1176": 223, "1063": 223, "sr": 223, "226": [223, 241], "retrbinari": 223, "retr": [223, 305], "221": 223, "acct": 223, "source_address": [223, 242, 335, 337, 469, 475, 476], "ftp1": [223, 475], "proftpd": [223, 475], "154": [223, 284, 382, 466, 475], "cento": [223, 473, 475, 480, 483], "set_debuglevel": [223, 242, 288, 305, 335, 359, 478], "getwelcom": [223, 288, 305], "voidcmd": 223, "error_repli": 223, "blocksiz": [223, 242, 293, 358, 480, 483], "stor": 223, "transfercmd": 223, "nlst": [223, 476], "set_pasv": [223, 463], "storbinari": [223, 468, 469], "storlin": [223, 468], "eprt": 223, "passiv": [223, 255, 461, 463, 479, 480, 481, 482], "epsv": 223, "pasv": [223, 483], "ntransfercmd": 223, "mlsd": [223, 476], "3659": 223, "fromnam": 223, "tonam": 223, "error_perm": 223, "mkd": 223, "rmd": 223, "4217": 223, "prot_p": 223, "check_hostnam": [223, 242, 248, 288, 305, 335, 341, 395, 413, 474, 479, 483], "has_sni": [223, 242, 248, 288, 305, 335, 341, 395], "keyfil": [223, 248, 269, 281, 305, 335, 341, 462, 474, 479, 483], "certfil": [223, 248, 305, 335, 341, 462, 474, 479, 483], "ftps": 223, "pureftpd": 223, "6jack": 223, "antilink": 223, "blogbench": 223, "bsdcam": 223, "clockspe": 223, "djbdns": 223, "jedi": 223, "eacceler": 223, "favicon": 223, "ico": [223, 483], "francoton": 223, "fugu": 223, "libpuzzl": 223, "metalog": 223, "minidentd": 223, "udf": [223, 483], "php": [223, 419, 462, 464], "jenkin": [223, 388], "skein": [223, 235], "webdav": [223, 241], "phpaudit": 223, "phpbench": 223, "pincast": 223, "ping": [223, 462, 463, 464, 467], "posto": 223, "public_key": 223, "ftpd": 223, "qscan": 223, "qtc": 223, "shared": 223, "skycach": 223, "ucarp": 223, "ssl_version": [223, 341, 474, 483], "protocol_sslv23": [223, 341, 472, 483], "auth": [223, 248, 269, 335, 341, 465, 478, 483], "ccc": [223, 347, 376, 476], "nat": [223, 337, 476], "prot_c": 223, "error_temp": 223, "error_proto": [223, 305, 476], "anext": [225, 472, 483], "async_iter": 225, "0b11": 225, "0b1010": [225, 470], "0b1110": 225, "1110": 225, "pythonbreakpoint": [225, 352, 455, 480], "dont_inherit": [225, 477], "pycf_": 225, "__all__": [225, 247, 279, 319, 362, 436, 450, 463, 479, 483], "__initializing__": 225, "_clearcach": 225, "pack_into": [225, 347, 467, 483], "unpack_from": [225, 347, 467, 483], "perimet": 225, "season": 225, "summer": [225, 366, 467, 468], "floatvalu": 225, "digitpart": [225, 435], "floatnumb": [225, 430, 435], "003": [225, 428, 446, 455], "1e6": 225, "0x2a": [225, 345], "__trunc__": [225, 275, 389, 428, 473, 483], "010": [225, 261, 362], "denial": [225, 262, 314, 344, 358, 409, 428, 455, 472, 473, 480, 481, 482, 483], "classinfo": 225, "mydata": [225, 365, 411, 452, 475], "process_block": 225, "iterat": 225, "keyfunc": [225, 261], "0o70": 225, "0o12": 225, "write_through": [225, 258, 476, 483], "reconfigur": [225, 258, 480, 483], "default_buffer_s": [225, 258, 348, 483], "nnn": [225, 240, 395], "untransl": [225, 258], "somedir": 225, "o_rdon": [225, 282, 283, 293], "spamspam": 225, "bufferedread": [225, 258, 358, 468, 469, 475, 483], "bufferedwrit": [225, 258, 468, 475, 483], "bufferedrandom": [225, 258, 468, 483], "rawiobas": [225, 258, 468, 476, 478, 483], "3j": [225, 289, 469], "inv_bas": 225, "forcibl": [225, 476, 477], "_x": [225, 259, 468, 479], "_voltag": 225, "displayhook": [225, 352, 450, 463], "salari": [225, 344, 440], "argn": 225, "regular_funct": 225, "fsum": [225, 275, 343, 444, 468, 483], "summat": [225, 275, 444, 474, 483], "object_or_typ": 225, "type2": [225, 386], "spice": 225, "transpos": [225, 261, 442, 466], "manifest": [225, 362, 469, 483], "zip_longest": [225, 261, 470, 483], "x2": [225, 430, 441, 472, 474, 483], "attain": 225, "till": [225, 283, 308, 341, 359, 482, 483], "saus": 225, "_temp": 225, "pythoncaseok": [225, 455, 463, 482, 483], "user_funct": 226, "evict": 226, "3628800": 226, "479001600": 226, "sequence_of_numb": [226, 481], "stdev": [226, 343, 473, 481, 483], "unaccept": [226, 299, 337, 413, 436], "count_vowel": 226, "vowel": 226, "aeiouaeiou": 226, "cache_paramet": [226, 483], "cache_info": [226, 475], "currsiz": [226, 475], "cache_clear": [226, 475], "predictor": 226, "impur": 226, "get_pep": 226, "290": 226, "320": [226, 388], "9991": 226, "cacheinfo": [226, 475], "fib": [226, 441, 450], "377": [226, 441, 449, 450], "610": [226, 441, 449, 450], "_is_valid_operand": 226, "lastnam": [226, 340, 475, 481], "firstnam": [226, 340, 475], "unrecognis": [226, 268, 476], "farg": 226, "fkeyword": 226, "newkeyword": 226, "basetwo": 226, "10010": 226, "partialmethod": [226, 344, 477, 481, 483], "_aliv": 226, "set_stat": 226, "set_dead": 226, "strength": [226, 473], "eh": [226, 473], "uniontyp": [226, 344, 385, 473, 483], "fun_num": 226, "615": [226, 425, 482, 483], "0x1035a2840": 226, "0x103fe0000": 226, "dict_key": [226, 469, 483], "singledispatchmethod": [226, 481, 483], "wrapper_assign": 226, "wrapper_upd": 226, "17482": 226, "my_decor": [226, 467], "debug_leak": 227, "debug_saveal": 227, "uncollect": [227, 475, 483], "set_threshold": 227, "threshold0": 227, "threshold1": 227, "threshold2": 227, "get_count": [227, 467], "count0": 227, "count1": 227, "count2": 227, "get_threshold": 227, "lazarus": 227, "gc_ref": 227, "unfreez": [227, 480], "get_freeze_count": [227, 480], "debug_uncollect": [227, 475], "debug_stat": 227, "debug_collect": 227, "unfamiliar": [228, 292, 467, 468], "shortopt": 228, "longopt": 228, "frob": [228, 390], "getopterror": 228, "gnu_getopt": [228, 465], "posixly_correct": 228, "cfoo": 228, "optlist": 228, "ho": [228, 483], "getpasswarn": 229, "getus": [229, 248, 293, 305], "lname": 229, "getlogin": [229, 293], "i18n": [230, 345, 462, 469, 483], "l10n": [230, 462], "monolingu": 230, "bindtextdomain": [230, 266], "localedir": 230, "lc_messag": [230, 266], "lc_all": [230, 266, 362, 452, 455, 473, 480, 483], "textdomain": [230, 266], "dgettext": [230, 266], "ngettext": [230, 483], "singular": [230, 483], "dngettext": 230, "pgettext": [230, 481, 483], "dpgettext": 230, "npgettext": 230, "dnpgettext": 230, "dcgettext": [230, 266], "unimpl": [230, 243], "myapplic": 230, "class_": 230, "_info": 230, "_fallback": 230, "add_fallback": 230, "_pars": 230, "albeit": 230, "gnome": [230, 466, 476, 483], "jame": [230, 423, 426, 462, 465, 467, 469, 473, 474, 480, 483], "henstridg": [230, 462, 469], "habit": [230, 271], "mylog": [230, 471, 475], "xgettext": [230, 483], "fran": [230, 476, 477, 478], "ois": [230, 476, 477, 478], "pinard": 230, "xpot": 230, "pygettext": [230, 478, 483], "msgfmt": [230, 469], "lang1": 230, "lang2": 230, "lang3": 230, "language1": 230, "mollusk": 230, "albatross": 230, "rat": 230, "penguin": [230, 427], "n_": 230, "teach": [230, 464, 481, 483], "markthisstringfortransl": 230, "funk": [230, 462], "juan": [230, 469], "ib": 230, "palomar": 230, "barri": [230, 462, 463, 464, 466, 467, 468, 474, 475, 476, 477, 478, 479, 480, 481, 483], "warsaw": [230, 462, 463, 464, 466, 467, 468, 474, 475, 476, 477, 478, 480, 481, 483], "gustavo": [230, 464, 465, 466, 467, 483], "niemey": [230, 464, 465, 466, 467], "subshel": [231, 293], "expandvar": [231, 294, 348, 468, 483], "include_hidden": [231, 483], "altsep": [231, 247, 293, 296, 473, 483], "iglob": [231, 472, 478, 479, 483], "drive": [231, 247, 292, 293, 294, 296, 358, 362, 369, 388, 422, 426, 461, 474, 476, 477, 478, 483], "unc": [231, 293, 294, 296, 422, 483], "sharepoint": [231, 422, 483], "quo": 231, "vadi": 231, "card": [231, 295, 318, 319, 436], "topologicalsort": [232, 482, 483], "topolog": [232, 465, 482, 483], "vertex": [232, 384], "acycl": 232, "predecessor": [232, 465, 475], "get_readi": 232, "static_ord": 232, "topological_sort": 232, "task_queu": [232, 283], "finalized_tasks_queu": 232, "cycleerror": 232, "node_group": 232, "ts2": 232, "gr_name": [233, 465], "gr_passwd": 233, "gr_gid": [233, 348, 465], "gr_mem": 233, "yp": 233, "getgrnam": [233, 348, 465, 483], "getgrgid": [233, 479, 483], "getgral": [233, 483], "gunzip": 234, "badgzipfil": [234, 481, 483], "fileobj": [234, 235, 329, 333, 358, 476, 483], "slowest": [234, 362, 384, 388, 474, 483], "unseek": [234, 401, 422, 475, 477, 478, 483], "wbit": [234, 424, 483], "file_cont": [234, 270], "s_in": 234, "s_out": 234, "fip": [235, 341, 483], "sha1": [235, 456, 467, 469, 474, 475, 483], "sha224": [235, 467, 469, 475], "sha256": [235, 251, 337, 341, 456, 467, 469, 475, 483], "sha384": [235, 341, 467, 469, 475], "sha512": [235, 456, 467, 469, 475, 483], "rsa": [235, 341, 472, 483], "1321": 235, "adler32": [235, 424, 483], "hexdigest": [235, 237, 340, 467, 483], "sha3_224": [235, 479], "sha3_256": [235, 479, 483], "sha3_384": [235, 479], "sha3_512": [235, 479, 483], "shake_128": [235, 479], "shake_256": [235, 479], "blake2b": [235, 473, 479, 482, 483], "algorithms_guarante": [235, 469, 475], "algorithms_avail": [235, 469, 475, 483], "seealso": 235, "sha3": [235, 456, 473, 474, 482, 483], "keccak": [235, 473, 479, 483], "usedforsecur": [235, 327, 483], "insecur": [235, 330, 340, 341, 467, 474, 475, 483], "sha2": [235, 341, 474, 482, 483], "hacl": [235, 474, 483], "spammish": 235, "x03": [235, 284, 337, 344, 347, 398], "x1e": [235, 344], "xdd": 235, "ae": 235, "x15": [235, 347], "x93": 235, "xc5": 235, "xfe": 235, "x00o": 235, "xa5u": 235, "xfd": 235, "xf7": 235, "xbcn": 235, "x84": [235, 468], "xa6": 235, "xaf": [235, 468], "x0c": [235, 344, 398], "x95": 235, "x0fk": 235, "x06": [235, 398], "031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406": 235, "condens": [235, 268, 467, 483], "upstream": [235, 340, 481, 483], "digest_s": [235, 237, 477], "block_siz": [235, 237, 477], "incept": 235, "length_in_bit": 235, "44709d6fcb83d92a76dcb0b668c98e1b1d3dafe7": 235, "file_digest": [235, 473, 483], "socketio": 235, "mac1": 235, "digestmod": [235, 237, 477, 481, 483], "mac2": 235, "stretch": [235, 247, 376, 384, 410, 480], "brute": 235, "tunabl": [235, 293, 475], "pbkdf2_hmac": [235, 469, 472, 474, 477, 483], "hash_nam": 235, "dklen": 235, "pkcs": [235, 341, 477, 483], "pseudorandom": [235, 318], "nist": [235, 465], "132": 235, "stackexchang": 235, "pbkdf2": [235, 472], "our_app_it": 235, "500_000": [235, 344], "dk": 235, "15530bba69924174860db778f2c6f8104d3aaf9d26241840c8c4a641c8d000a9": 235, "scrypt": [235, 479, 483], "maxmem": 235, "7914": 235, "7693": 235, "fanout": 235, "leaf_siz": [235, 483], "node_offset": [235, 483], "node_depth": 235, "inner_s": 235, "last_nod": 235, "salt_siz": 235, "person_s": 235, "max_key_s": 235, "max_digest_s": 235, "6ff843ba685842aa82031d3f53c48b66326df7639a63d128974c5c14f31a0f33343a8c65551134ed1ae0f2b0dd2bb495dc81039e3eeb0aa1bb0388bbeac29183": 235, "d24f26cf8de66472d58d4e1b1774b4c9158b1f4c": 235, "6fa1d8fcfd719046d762": 235, "eb6ec15daf9546254f0809": 235, "1bf21a98c78a1c376ae9": 235, "567004bf96e4a25773ebf4": 235, "indifferenti": 235, "3d363ff7401e02026f4a4687d4863c": 235, "symmetr": [235, 284, 341, 344, 428, 430, 462, 464, 465, 466, 476, 483], "tamper": [235, 299], "secret_key": 235, "auth_siz": 235, "good_sig": 235, "alic": 235, "43b3c982cf697e0c5ab22172d1ca7421": 235, "bob": [235, 283, 386, 459, 467, 468, 469, 471, 476], "0102030405060708090a0b0c0d0e0f00": 235, "e3c8102868d28b5ff85fc35dda07329970d1a01e273c37481326fe0c861c8142": 235, "signer": 235, "likelihood": [235, 343, 481], "106": [235, 261, 343, 461, 464], "salt1": 235, "salt2": 235, "h2": [235, 242, 268, 411], "summarili": 235, "files_hash_person": 235, "block_hash_person": 235, "20d9cd024d4fb086aae819a1432dd2466de12947831b75c5a30cf2676095d3b4": 235, "cf68fb5761b9c44e7878bfb2c4c9aea52264a80b75005e65619778de59f383a3": 235, "orig_key": 235, "rm5epjai72qck3rgbpw3vpnfzy5ozothi": 235, "khy6h21km": 235, "enc_key": 235, "kencrypt": 235, "mac_key": 235, "kmac": 235, "rbpb15s": 235, "z9t": 235, "agffno5wuhb77vbri6f9iv2qixu7whw": 235, "g9gthfe1yluxy1zwplyk1": 235, "nwfu0wseb0krcjhdep": 235, "h00": 235, "h01": 235, "h10": 235, "3ad2a9b37c6070e374c7a8c508fe20ca86b6ed54e286e93a0318e95e881db5aa": 235, "jean": [235, 426, 468, 469, 476], "philipp": [235, 426, 467, 472, 483], "aumasson": [235, 426], "neve": [235, 426, 479], "zooko": [235, 426], "wilcox": 235, "hearn": 235, "christian": [235, 426, 462, 466, 468, 472, 473, 474, 476, 477, 479, 480, 481, 482, 483], "winnerlein": 235, "finalist": 235, "henzen": 235, "willi": 235, "meier": 235, "raphael": 235, "phan": [235, 483], "chacha": 235, "daniel": [235, 465, 468, 469, 472, 473, 475, 477, 478, 479, 483], "bernstein": [235, 426, 468, 483], "pyblake2": 235, "dmitri": [235, 466, 478, 479, 483], "chestnykh": [235, 479], "heim": [235, 426, 468, 472, 473, 474, 476, 477, 479, 480, 481, 482, 483], "neighbor": [235, 413, 464, 465], "cc0": 235, "creativecommon": 235, "publicdomain": 235, "alexandr": [235, 468, 469, 471, 475, 477, 483], "sokolovskiy": 235, "nvlpub": 235, "gov": [235, 243, 465], "nistpub": 235, "csrc": 235, "cryptographic_hash_funct": 235, "rfc8018": 235, "cryptographi": [235, 337], "nistspecialpublication800": 235, "heapifi": [236, 318, 452, 483], "heappushpop": [236, 468], "heapreplac": [236, 318], "heapsort": 236, "prioritizeditem": [236, 316], "pq": [236, 319], "entry_find": 236, "add_task": 236, "remove_task": 236, "pop_task": 236, "midi": 236, "digest_con": [237, 483], "crypto_memcmp": [237, 483], "x3e": [238, 240], "html5": [239, 476, 477, 483], "name2codepoint": [239, 240], "codepoint2nam": 239, "entitydef": 239, "html4": [239, 240, 483], "whatwg": [239, 394, 472, 479, 480, 481, 482, 483], "multipag": 239, "convert_charref": [240, 477, 478, 483], "myhtmlpars": 240, "handle_starttag": 240, "handle_endtag": 240, "handle_data": 240, "getpo": 240, "get_starttag_text": 240, "handle_startendtag": 240, "handle_entityref": 240, "handle_charref": 240, "handle_com": 240, "condcom": 240, "ie9": 240, "handle_decl": 240, "decl": 240, "handle_pi": 240, "sgml": [240, 273, 417, 468], "unknown_decl": 240, "ent": 240, "startswith": [240, 293, 344, 352, 388, 399, 422, 451, 462, 465, 467, 468, 471, 476, 478, 481, 483], "logo": [240, 384, 426], "buff": 240, "ere": 240, "pan": [240, 483], "soup": 240, "httpstatus": [241, 478, 482, 483], "switching_protocol": 241, "7231": 241, "2518": 241, "103": [241, 261, 343, 344, 382, 461, 469, 475, 482, 483], "early_hint": [241, 482, 483], "8297": [241, 483], "non_authoritative_inform": 241, "no_cont": 241, "reset_cont": 241, "partial_cont": 241, "7233": 241, "multi_status": 241, "4918": 241, "already_report": 241, "5842": 241, "im_us": 241, "3229": 241, "multiple_choic": 241, "moved_perman": [241, 466], "see_oth": 241, "not_modifi": 241, "7232": [241, 469], "use_proxi": 241, "temporary_redirect": 241, "permanent_redirect": 241, "7238": 241, "bad_request": 241, "7235": 241, "payment_requir": 241, "not_found": [241, 242, 483], "method_not_allow": 241, "not_accept": 241, "proxy_authentication_requir": 241, "request_timeout": 241, "length_requir": 241, "precondition_fail": 241, "request_entity_too_larg": 241, "request_uri_too_long": 241, "unsupported_media_typ": 241, "requested_range_not_satisfi": 241, "expectation_fail": 241, "418": [241, 441, 472, 476, 482, 483], "im_a_teapot": [241, 482], "htcpcp": 241, "2324": 241, "misdirected_request": 241, "7540": 241, "422": 241, "unprocessable_ent": 241, "423": 241, "424": [241, 477], "failed_depend": 241, "too_ear": [241, 482, 483], "8470": 241, "upgrade_requir": 241, "428": [241, 296, 477], "precondition_requir": 241, "6585": 241, "429": [241, 477], "too_many_request": 241, "431": 241, "request_header_fields_too_larg": 241, "unavailable_for_legal_reason": [241, 483], "obstacl": [241, 483], "7725": 241, "internal_server_error": 241, "not_impl": 241, "bad_gateway": 241, "service_unavail": 241, "gateway_timeout": 241, "http_version_not_support": 241, "506": [241, 326, 479, 483], "variant_also_negoti": 241, "2295": 241, "507": 241, "insufficient_storag": 241, "508": 241, "loop_detect": 241, "510": 241, "not_extend": 241, "2774": 241, "511": [241, 422, 479], "network_authentication_requir": 241, "is_inform": 241, "199": 241, "is_success": [241, 483], "is_redirect": 241, "399": [241, 483], "is_client_error": 241, "is_server_error": 241, "httpmethod": [241, 483], "5789": 241, "h3": 242, "h4": 242, "httpsconnect": [242, 395, 468, 469, 475, 477, 480, 483], "unverifi": [242, 243, 395], "_create_unverified_context": [242, 469, 477], "post_handshake_auth": [242, 341, 479, 480, 481, 483], "cert_fil": [242, 395, 474, 483], "alpn": [242, 341, 395, 472, 478, 483], "set_alpn_protocol": [242, 341, 395, 478], "key_fil": [242, 395, 474, 483], "debuglevel": [242, 335, 359, 395, 478, 483], "httpexcept": 242, "notconnect": 242, "invalidurl": [242, 483], "unknownprotocol": 242, "unknowntransferencod": 242, "unimplementedfilemod": 242, "incompleteread": 242, "improperconnectionst": 242, "cannotsendrequest": 242, "cannotsendhead": 242, "responsenotreadi": 242, "badstatuslin": 242, "linetoolong": 242, "remotedisconnect": [242, 478, 483], "getrespons": [242, 478, 483], "http_port": 242, "https_port": 242, "encode_chunk": 242, "reconnect": [242, 478, 483], "set_tunnel": [242, 419, 475, 483], "tunnel": [242, 475, 483], "get_proxy_response_head": [242, 483], "putrequest": [242, 483], "skip_host": 242, "skip_accept_encod": 242, "puthead": 242, "endhead": [242, 479], "message_bodi": 242, "7230": [242, 395], "amt": 242, "gethead": 242, "getcod": [242, 395, 483], "data1": [242, 390], "data2": [242, 390], "12524": 242, "issue12524": 242, "filecont": 242, "2965": [243, 395, 483], "2109": [243, 244], "cookie2": 243, "loaderror": 243, "delayload": 243, "blocked_domain": 243, "allowed_domain": 243, "rfc2965": 243, "rfc2109_as_netscap": 243, "hide_cookie2": 243, "strict_domain": 243, "strict_rfc2965_unverifi": 243, "strict_ns_unverifi": 243, "strict_ns_domain": 243, "domainliber": 243, "strict_ns_set_initial_dollar": 243, "strict_ns_set_path": 243, "secure_protocol": [243, 483], "wss": [243, 394, 483], "websocket": [243, 257, 483], "downgrad": [243, 483], "make_cooki": [243, 483], "curl": [243, 460, 461, 483], "cookie_spec": 243, "kristol": 243, "errata": [243, 262], "unfinish": [243, 283, 314, 483], "2964": 243, "add_cookie_head": 243, "get_full_url": [243, 395], "get_head": [243, 386, 395], "header_item": [243, 395], "add_unredirected_head": [243, 395], "origin_req_host": [243, 395], "get_origin_req_host": [243, 395, 477], "extract_cooki": 243, "set_ok": 243, "approv": [243, 288, 307, 461, 462, 469, 483], "set_polici": 243, "set_cookie_if_ok": 243, "set_cooki": 243, "clear_session_cooki": 243, "ignore_discard": 243, "ignore_expir": 243, "wipe": 243, "mozillacookiejar": [243, 483], "lynx": [243, 403, 466], "clobber": [243, 292, 483], "lwpcookiejar": [243, 483], "libwww": [243, 466], "cookie3": 243, "return_ok": 243, "domain_return_ok": 243, "path_return_ok": 243, "mycookiepolici": 243, "i_dont_want_to_store_this_cooki": 243, "tighten": [243, 462, 469, 475], "loos": [243, 365, 483], "benign": 243, "blocklist": 243, "allowlist": [243, 394], "set_blocked_domain": 243, "coyot": 243, "193": [243, 384, 470], "is_block": 243, "set_allowed_domain": 243, "is_not_allow": 243, "nz": 243, "domainstrictnodot": 243, "domainstrictnondomain": 243, "domainrfc2965match": 243, "domainstrict": 243, "acm": [243, 318], "rocket_launch": 243, "expiri": [243, 483], "is_expir": 243, "comment_url": 243, "rfc2109": 243, "port_specifi": 243, "domain_specifi": 243, "domain_initial_dot": 243, "began": [243, 250, 267, 362, 462, 463, 483], "has_nonstandard_attr": 243, "get_nonstandard_attr": 243, "set_nonstandard_attr": 243, "cj": 243, "ads": 243, "serializ": [244, 262], "2068": [244, 366], "ascii_lett": [244, 326, 345, 464, 470], "cookieerror": 244, "basecooki": 244, "simplecooki": [244, 483], "value_decod": 244, "value_encod": 244, "real_valu": 244, "coded_valu": [244, 478, 480, 483], "js_output": 244, "rawdata": 244, "http_cooki": 244, "httpon": [244, 468, 483], "samesit": [244, 483], "csrf": 244, "lax": [244, 467, 483], "isreservedkey": 244, "outputstr": 244, "fig": 244, "newton": [244, 319], "wafer": 244, "rocki": [244, 468], "chip": [244, 469], "ahoy": 244, "vienna": 244, "finger": [244, 470], "keebler": 244, "fudg": 244, "012": [244, 261, 344, 463], "oreo": 244, "doublestuff": 244, "twix": 244, "httpserver": [245, 333, 407], "server_class": [245, 407], "handler_class": [245, 407], "server_address": [245, 338, 407], "8000": [245, 295, 333, 407, 419, 420, 467, 481, 483], "httpd": [245, 276, 333, 407, 467], "requesthandlerclass": [245, 338, 407], "server_nam": [245, 407, 420], "server_port": [245, 407], "threadinghttpserv": [245, 480, 483], "threadingmixin": [245, 338, 480, 483], "client_address": [245, 338, 407], "do_spam": 245, "close_connect": 245, "handle_one_request": 245, "requestlin": 245, "3986": [245, 394, 469, 472, 478, 479, 480, 481, 482, 483], "hier": 245, "request_vers": 245, "messageclass": 245, "rfile": [245, 338], "wfile": [245, 338, 479, 483], "server_vers": 245, "basehttp": 245, "sys_vers": 245, "version_str": 245, "error_message_format": [245, 477], "send_error": [245, 477, 483], "error_content_typ": 245, "protocol_vers": [245, 248], "send_head": 245, "send_response_on": 245, "handle_expect_100": 245, "send_respons": 245, "date_time_str": 245, "end_head": [245, 476], "flush_head": [245, 476], "log_request": 245, "log_error": 245, "log_messag": [245, 483], "1994": [245, 426], "log_date_time_str": 245, "address_str": 245, "simplehttprequesthandl": [245, 333, 480, 483], "do_get": 245, "simplehttp": 245, "extensions_map": 245, "list_directori": 245, "webserv": 245, "index_pag": [245, 483], "9000": [245, 386, 430], "cgihttprequesthandl": [245, 483], "empt": 245, "cgi_directori": 245, "htbin": 245, "do_post": 245, "scrub": 245, "nefari": 245, "namag": 247, "aqua": [247, 459, 483], "unsav": [247, 483], "undon": [247, 384], "clipboard": [247, 369, 479, 480, 481, 483], "reformat": [247, 271, 292, 465, 483], "tabifi": 247, "untabifi": 247, "toggl": [247, 337, 376, 481, 482, 483], "chitespac": 247, "autosav": 247, "wake": [247, 328, 333, 365, 468, 483], "pane": [247, 375, 376, 483], "zoom": [247, 483], "momentarili": [247, 271, 483], "deiconifi": 247, "idlerc": [247, 483], "squeez": [247, 479, 480, 481, 483], "dicuss": 247, "leftarrow": 247, "rightarrow": 247, "pageup": 247, "pagedown": 247, "popup": [247, 362, 483], "100000000": 247, "uncolor": 247, "idlestartup": [247, 483], "pythonstartup": [247, 320, 334, 352, 438, 455, 477, 483], "masquerad": [247, 483], "tcpconnect": 247, "irv": [247, 442], "6543": 247, "tcplisten": 247, "antivirus": [247, 362], "taught": 247, "mis": [247, 483], "admin": 247, "zombi": [247, 283, 338, 362, 467, 476, 483], "pythonw": [247, 283, 334, 352, 459, 461, 464, 479, 480, 483], "glitch": 247, "active_count": [247, 283, 365, 468, 472, 483], "__stdin__": [247, 352, 450], "__stdout__": [247, 332, 352, 450], "__stderr__": [247, 352, 362, 450], "pyw": [247, 438, 461, 464, 483], "setrecursionlimit": [247, 299, 352, 450, 462, 474, 483], "plane": [247, 275, 472, 483], "x02": [247, 259, 284, 337, 347, 398], "x07": [247, 284, 398], "x08c": 247, "loopback": [247, 259, 362], "transient": [247, 268, 340, 483], "f5": [247, 462], "mousewheel": [247, 483], "scrollbar": [247, 369, 374, 376, 384, 483], "toc": [247, 483], "dock": [247, 483], "zzdummi": [247, 483], "imap4_ssl": [248, 476, 482, 483], "imap4_stream": [248, 482, 483], "imap4rev1": 248, "1730": 248, "imap4_port": 248, "logout": [248, 478, 481, 483], "noop": [248, 283, 305, 335, 483], "d25if65hy903weo": 248, "imap4_ssl_port": 248, "ssl_context": [248, 288, 474, 483], "993": 248, "internaldate2tupl": 248, "datestr": 248, "int2ap": 248, "parseflag": 248, "flagstr": 248, "time2internald": 248, "date_tim": [248, 422], "expung": 248, "uw": 248, "message_set": 248, "authobject": [248, 335], "checkpoint": [248, 352], "new_mailbox": 248, "deleteacl": [248, 466], "acl": [248, 332], "5161": [248, 478, 483], "6855": [248, 478, 483], "message_part": 248, "getacl": [248, 464], "cyrus": [248, 483], "getannot": 248, "getquota": 248, "rfc2087": 248, "getquotaroot": 248, "folder": [248, 271, 399, 459, 461, 483], "login_cram_md5": 248, "cram": [248, 335], "lsub": 248, "myright": [248, 466], "2342": [248, 464], "message_num": 248, "proxyauth": 248, "authoris": 248, "oldmailbox": 248, "newmailbox": 248, "criterion": [248, 299, 428, 462], "msgnum": 248, "ldj": 248, "inbox": [248, 271], "setacl": [248, 464], "setannot": 248, "setquota": 248, "sort_criteria": 248, "search_criterion": 248, "flag_list": 248, "3501": 248, "gmail": [248, 483], "nonetheless": 248, "threading_algorithm": 248, "unsubscrib": [248, 483], "unselect": [248, 482, 483], "xatom": 248, "utf8_en": [248, 478], "sgi": 249, "imglib": 249, "87a": 249, "89a": 249, "bitmap": [249, 255, 281, 328, 369, 375, 376], "graymap": 249, "pixmap": [249, 375], "raster": 249, "jfif": [249, 483], "exif": [249, 483], "openexr": [249, 478, 483], "bass": [249, 336], "comprehend": 250, "3120": [250, 435, 470], "anchor": [250, 252, 296, 354, 369, 376, 469, 474, 477, 483], "subpkg": 250, "invalidate_cach": [250, 423, 472, 476, 480, 483], "rebound": [250, 429, 436], "redefinit": [250, 428, 483], "resourceload": [250, 480, 483], "inspectload": [250, 477, 478, 483], "executionload": 250, "fileload": [250, 476, 477], "sourceload": [250, 476, 477], "find_spec": [250, 302, 352, 423, 432, 472, 474, 477, 478, 480, 483], "educ": [250, 261, 384], "spec_from_load": [250, 472], "pathfind": [250, 432, 472, 473, 477, 480, 483], "get_resource_read": [250, 252, 253, 480, 483], "resourceread": [250, 252, 253, 474, 480, 483], "get_data": [250, 302, 395, 423, 468, 477, 483], "get_sourc": [250, 265, 423, 477, 483], "source_to_cod": [250, 477, 478, 483], "sourceless": [250, 476, 478], "path_stat": [250, 476], "path_mtim": [250, 476], "set_data": 250, "traversableresourc": [250, 253, 474, 483], "perspect": [250, 253], "artifact": [250, 252, 253, 295, 459, 476, 483], "correl": [250, 253, 343, 472, 474, 483], "open_resourc": [250, 253], "resource_path": [250, 253], "is_resourc": [250, 252, 253, 473, 474], "priori": [250, 253], "as_fil": [250, 252, 253, 474, 483], "iterdir": [250, 252, 253, 296, 422, 483], "is_dir": [250, 253, 293, 296, 422, 479, 481, 483], "is_fil": [250, 252, 253, 293, 296, 422, 478, 481, 483], "joinpath": [250, 252, 253, 296, 422, 483], "read_byt": [250, 252, 253, 278, 296, 422, 478, 483], "read_text": [250, 251, 252, 253, 258, 296, 422, 473, 474, 478, 483], "source_suffix": [250, 474], "debug_bytecode_suffix": 250, "bytecode_suffix": [250, 474], "optimized_bytecode_suffix": 250, "extension_suffix": [250, 474], "all_suffix": [250, 255], "getmodulenam": [250, 255, 479], "builtinimport": [250, 283, 472, 473, 479, 483], "allevi": [250, 462], "frozenimport": [250, 472, 473, 477, 483], "windowsregistryfind": [250, 461, 472, 473, 479, 483], "filefind": [250, 302, 472, 473, 476, 483], "loader_detail": 250, "sourcelessfileload": [250, 476, 479], "extensionfileload": [250, 476, 477, 479], "namespaceload": [250, 477, 483], "path_find": 250, "my_namespac": 250, "loader_st": [250, 483], "submodule_search_loc": [250, 252, 432], "has_loc": [250, 432], "magic_numb": [250, 474, 477], "cache_from_sourc": [250, 474, 475, 477, 478, 479], "debug_overrid": [250, 478], "get_tag": [250, 474, 475], "decode_sourc": [250, 477], "source_byt": 250, "resolve_nam": [250, 302, 482, 483], "module_from_spec": [250, 385, 474, 478, 483], "spec_from_file_loc": [250, 474, 479], "implic": [250, 283, 299, 314, 394, 430, 483], "source_hash": [250, 480, 483], "_incompatible_extension_module_restrict": [250, 483], "disable_check": [250, 483], "lazyload": [250, 478, 479, 483], "lazy_load": 250, "file_path": 250, "lazy_import": 250, "lazy_typ": 250, "spammetapathfind": 250, "spampathentryfind": 250, "absolute_nam": 250, "parent_nam": 250, "child_nam": 250, "rpartit": [250, 344, 467, 469, 475, 483], "parent_modul": 250, "pkg_resourc": [251, 252, 474, 483], "discover": [251, 312, 461, 477, 483], "dist": [251, 270, 275, 296, 384, 467, 475, 478, 481, 483], "package_distribut": 251, "importlib_metadata": [251, 472, 482, 483], "entrypoint": [251, 340, 472, 474, 483], "console_script": 251, "entry_point": [251, 483], "eps": 251, "setup_keyword": [251, 465], "egg_info": 251, "0x103528488": 251, "entry_points_select": 251, "wheel_metadata": 251, "packagemetadata": [251, 483], "566": [251, 483], "requires_python": [251, 307], "quickest": 251, "packagepath": [251, 481], "purepath": [251, 293, 296, 472, 473, 474, 482, 483], "859": 251, "_hook": 251, "pathdistribut": [251, 483], "0x101e0cef0": 251, "filehash": 251, "bykw5omccfazvcoyqwkkkemovymafor34mmkbx8r1ni": 251, "text_typ": 251, "posixpath": [251, 253, 294, 296, 483], "gustav": 251, "always_iter": 251, "pytest": [251, 388], "cov": 251, "packages_distribut": [251, 472, 483], "pyyaml": [251, 469, 471], "jaraco": 251, "find_distribut": 251, "distributionfind": 251, "pycach": [252, 352], "akin": [252, 344, 432], "importlib_resourc": [252, 480, 482, 483], "open_binari": [252, 473, 474], "binaryio": [252, 386, 483], "open_text": [252, 473, 474], "textio": [252, 386, 483], "read_binari": [252, 473, 474, 483], "pathseg": [253, 296], "subsuddir": 253, "subsubdir": 253, "getmemb": [255, 358, 478, 483], "set_coroutine_origin_tracking_depth": [255, 352, 450, 480, 483], "__code__": [255, 344, 428, 470, 481, 483], "__defaults__": [255, 428, 470, 483], "__kwdefaults__": [255, 428, 477], "tb_frame": [255, 385, 428, 483], "tb_lasti": [255, 385, 428], "tb_lineno": [255, 381, 385, 428], "tb_next": [255, 381, 385, 428, 480, 483], "f_back": [255, 381, 428, 473, 483], "f_code": [255, 381, 428, 465, 473, 483], "f_lineno": [255, 428, 465, 472, 473, 479, 483], "f_trace": [255, 352, 428, 473, 483], "co_argcount": [255, 428, 483], "co_flag": [255, 428, 483], "co_": [255, 483], "co_posonlyargcount": [255, 428, 481, 483], "co_kwonlyargcount": [255, 428], "co_nloc": [255, 428], "co_stacks": [255, 428], "gi_fram": [255, 467, 483], "gi_run": 255, "gi_cod": [255, 468, 478, 483], "gi_yieldfrom": [255, 478, 483], "cr_await": [255, 483], "cr_frame": [255, 483], "cr_run": 255, "cr_code": 255, "cr_origin": [255, 352, 483], "getmembers_stat": [255, 473, 483], "ismodul": 255, "isclass": [255, 428], "ismethod": 255, "isfunct": 255, "isgeneratorfunct": [255, 468, 483], "isgener": [255, 468], "iscoroutinefunct": [255, 389, 474, 478, 483], "markcoroutinefunct": [255, 474, 483], "gen_coro": 255, "isasyncgenfunct": [255, 483], "agen": [255, 430], "isasyncgen": 255, "istraceback": 255, "isfram": 255, "iscod": 255, "isbuiltin": 255, "ismethodwrapp": [255, 473, 483], "methodwrappertyp": [255, 385, 473, 480, 483], "isroutin": [255, 483], "isabstract": [255, 468, 483], "ismethoddescriptor": 255, "isdatadescriptor": [255, 483], "isgetsetdescriptor": 255, "ismemberdescriptor": 255, "getdoc": [255, 428, 478, 481, 483], "getcom": [255, 313], "getfil": [255, 483], "getmodul": [255, 483], "getsourcefil": [255, 483], "getsourcelin": [255, 483], "getsourc": [255, 483], "follow_wrap": [255, 478, 483], "eval_str": 255, "unwrap": [255, 341, 394, 477, 483], "__signature__": [255, 477, 483], "unannounc": 255, "return_annot": 255, "boundargu": [255, 476, 478, 482, 483], "bind_parti": 255, "omiss": [255, 314, 337, 483], "new_sig": 255, "anno": 255, "from_cal": [255, 472, 473, 478, 483], "mysignatur": 255, "implicit0": [255, 479, 483], "keyword_on": 255, "positional_on": 255, "var_posit": 255, "var_keyword": 255, "apply_default": [255, 478, 483], "getclasstre": 255, "getfullargspec": [255, 313, 473, 477, 478, 479, 483], "fullargspec": 255, "varkw": 255, "kwonlydefault": 255, "getargspec": [255, 473, 477, 478, 479, 483], "getargvalu": [255, 478], "arginfo": 255, "formatargvalu": [255, 478], "formatarg": 255, "formatvararg": 255, "formatvarkw": 255, "formatvalu": 255, "getmro": 255, "getcallarg": [255, 469, 478, 483], "getclosurevar": [255, 476], "closurevar": 255, "conting": 255, "frameinfo": [255, 473], "code_context": 255, "lifespan": 255, "handle_stackframe_without_leak": 255, "currentfram": [255, 473], "getframeinfo": [255, 473, 483], "getouterfram": [255, 473, 478, 483], "outermost": [255, 344, 365, 483], "getinnerfram": [255, 473, 478, 483], "getattr_stat": [255, 386, 474, 475, 483], "_foo": 255, "slot_descriptor": 255, "getset_descriptor": 255, "wrapper_descriptor": [255, 466], "descriptor_typ": 255, "getgeneratorst": [255, 475, 483], "gen_creat": [255, 475], "gen_run": 255, "gen_suspend": [255, 475], "gen_clos": [255, 475], "getcoroutinest": [255, 478, 483], "coro_cr": 255, "coro_run": 255, "coro_suspend": 255, "coro_clos": 255, "getasyncgenst": [255, 474, 483], "ag_run": [255, 482, 483], "ag_fram": 255, "agen_cr": 255, "agen_run": 255, "agen_suspend": 255, "agen_clos": 255, "getgeneratorloc": [255, 476], "getcoroutineloc": [255, 478, 483], "getasyncgenloc": [255, 474, 483], "co_optim": 255, "co_newloc": 255, "co_vararg": 255, "co_varkeyword": 255, "co_nest": 255, "co_gener": [255, 483], "co_coroutin": [255, 481, 483], "co_async_gener": 255, "bufferflag": [255, 428, 474], "c_contigu": [255, 344], "f_contigu": [255, 344], "any_contigu": 255, "contig_ro": 255, "strided_ro": 255, "records_ro": 255, "full_ro": 255, "glibc": [257, 259, 293, 322, 473, 477, 481, 482, 483], "sandbox": [257, 324, 352, 483], "sdk": [257, 456, 482, 483], "wasm": [257, 456, 483], "nodej": 257, "wasmtim": [257, 483], "pyodid": [257, 473, 483], "pyscript": 257, "xmlhttprequest": 257, "markdown": [258, 472], "md": 258, "long_descript": 258, "686": [258, 293], "597": [258, 472, 483], "pythonwarndefaultencod": [258, 455, 472, 483], "text_encod": [258, 483], "blksize": [258, 407], "unsupportedoper": [258, 483], "bufferedrwpair": [258, 468, 483], "readal": [258, 472, 477, 483], "readinto1": [258, 478], "seek_": 258, "seek_hol": [258, 293, 476], "seek_data": [258, 293, 476], "initial_byt": 258, "getbuff": [258, 475, 483], "ab56ef": 258, "buffer_s": [258, 314, 468], "line_buff": 258, "nsecond": [258, 449], "incrementalnewlinedecod": [258, 483], "reconstruct": [258, 299, 307, 378, 407, 483], "subnet": [259, 476, 478, 483], "downsid": [259, 461, 476, 480], "3232235521": [259, 345], "xc0": [259, 464], "xa8": 259, "max_prefixlen": 259, "reverse_point": [259, 478, 483], "arpa": [259, 359, 478], "ip6": [259, 478], "is_multicast": [259, 483], "multicast": [259, 337, 362, 398, 483], "3171": 259, "2373": 259, "is_priv": [259, 483], "is_glob": [259, 351, 477, 483], "is_unspecifi": 259, "5735": 259, "is_reserv": [259, 296, 483], "is_loopback": 259, "3330": 259, "is_link_loc": 259, "3927": 259, "0b11000000101010000000000000000001": 259, "2001_0db8_0000_0000_0000_0000_0000_1000": 259, "_n": 259, "0x2001_0db8_0000_0000_0000_0000_0000_1000": 259, "longhand": 259, "4291": [259, 483], "0abc": 259, "0007": 259, "0def": 259, "scope_id": [259, 337, 482, 483], "4007": 259, "fe80": 259, "ff02": 259, "5678": [259, 398], "is_site_loc": 259, "3879": 259, "4193": 259, "ipv4_map": 259, "sixtofour": 259, "6to4": 259, "3056": 259, "teredo": 259, "4380": 259, "nbit": 259, "ff00": 259, "cisco": [259, 483], "network_address": 259, "broadcast_address": 259, "with_prefixlen": 259, "with_netmask": 259, "with_hostmask": 259, "prefixlen": 259, "wholli": [259, 413], "address_exclud": 259, "n1": 259, "n2": 259, "prefixlen_diff": 259, "new_prefix": 259, "supernet": [259, 478], "subnet_of": [259, 480, 483], "supernet_of": [259, 480], "compare_network": 259, "db00": 259, "anycast": 259, "v4_int_to_pack": 259, "v6_int_to_pack": 259, "summarize_address_rang": [259, 478, 483], "ipaddr": 259, "collapse_address": [259, 478, 483], "get_mixed_type_key": 259, "sortabl": [259, 269], "apl": [261, 471, 475], "sml": 261, "recast": [261, 475], "algebra": [261, 468, 483], "tabul": [261, 344, 411], "vector": [261, 275, 348, 384, 386, 409, 474, 483], "vec1": 261, "vec2": [261, 386], "p0": 261, "plast": 261, "p_n": 261, "abcdefg": [261, 291, 473, 483], "q0": 261, "q1": 261, "from_iter": [261, 468, 483], "pairwis": [261, 384, 472, 483], "it1": 261, "it2": 261, "itn": [261, 483], "fillvalu": [261, 321, 468, 483], "ax": 261, "cartesian": [261, 340, 468, 471, 478], "bd": 261, "addabl": 261, "110": [261, 305, 343, 345, 441], "amort": 261, "1296": 261, "loan": 261, "annual": [261, 482], "account_upd": 261, "bal": 261, "pmt": 261, "1_000": [261, 483], "960": [261, 483], "918": 261, "874": 261, "828": 261, "779": [261, 382], "728": [261, 304], "674": 261, "559": 261, "497": 261, "flattened_data": 261, "violet": [261, 384], "unflatten": 261, "013": 261, "023": 261, "uniq": [261, 466], "uniquekey": 261, "aaaabbbccdaabbb": 261, "aaaabbbccd": 261, "aaaa": [261, 319, 469], "bbb": 261, "tgtkey": 261, "currkey": 261, "currvalu": 261, "_grouper": 261, "nexti": 261, "021": 261, "210": 261, "odomet": 261, "ay": [261, 319], "bx": 261, "cy": 261, "dx": [261, 343], "dy": 261, "011": 261, "prod": [261, 275, 481, 483], "iterool": 261, "before_and_aft": 261, "mydequ": 261, "newval": 261, "uneven": 261, "num_act": 261, "incub": 261, "sliding_window": 261, "iter_index": 261, "siev": 261, "superior": 261, "repeatfunc": 261, "list_of_list": 261, "ncycl": 261, "first_tru": 261, "all_equ": 261, "unique_justseen": 261, "abbccad": 261, "unique_everseen": 261, "cdef": 261, "defg": 261, "grouper": 261, "gxx": 261, "sakki": [261, 469], "partit": [261, 332, 337, 344, 467, 478, 481, 483], "is_odd": 261, "subslic": 261, "getitem": [261, 291, 390, 464], "aabcadeaf": 261, "seq_index": 261, "iter_except": 261, "powerset": 261, "sum_of_squar": 261, "1400": 261, "sumprod": [261, 275, 474, 483], "reshap": 261, "matmul": [261, 291, 478, 483], "m2": [261, 464, 469, 473, 476], "matric": [261, 288, 463], "convolv": 261, "convolut": 261, "betterexplain": 261, "kuxjwb4lzsa": 261, "padded_sign": 261, "windowed_sign": 261, "polynomial_from_root": 261, "4x": [261, 292, 474, 476, 477, 479, 483], "17x": [261, 472, 483], "polynomial_ev": 261, "stabil": [261, 473, 483], "horner": 261, "polynomial_deriv": 261, "3x": [261, 477, 483], "8x": [261, 483], "isqrt": [261, 275, 481, 483], "1_000_000_000_000_007": 261, "360620266859": 261, "1_000_000_000_000_403": 261, "1000000000000403": 261, "totient": 261, "coprim": [261, 344], "mathworld": 261, "wolfram": 261, "totientfunct": 261, "7159": [262, 478, 483], "4627": [262, 483], "ecma": 262, "sort_key": [262, 304, 475], "x08ar": 262, "as_complex": 262, "dct": 262, "object_hook": [262, 483], "parse_float": [262, 379], "complexencod": 262, "unord": [262, 283, 344, 428], "skipkey": [262, 304, 483], "ensure_ascii": [262, 478, 483], "check_circular": 262, "allow_nan": [262, 483], "item_separ": 262, "key_separ": 262, "parse_int": 262, "parse_const": 262, "object_pairs_hook": [262, 469, 471], "num_str": [262, 379], "jsondecod": [262, 469, 479, 483], "deseri": [262, 284, 299, 340, 425, 446, 469, 473, 477, 479, 483], "raw_decod": [262, 483], "extran": [262, 308, 369, 483], "bigobject": 262, "colno": [262, 319, 478], "unpair": 262, "weird_json": 262, "object_parts_hook": 262, "voluntarili": [262, 293], "mp_film": 262, "1971": [262, 340, 343], "holi": [262, 340, 345, 442], "grail": [262, 340, 403, 442, 474, 483], "2028": 262, "2029": 262, "ecmascript": [262, 410], "iskeyword": [263, 344], "issoftkeyword": 263, "softkwlist": 263, "detect_encod": [265, 378], "getlin": [265, 382, 478, 483], "module_glob": [265, 400, 483], "clearcach": 265, "checkcach": [265, 483], "lazycach": [265, 478, 483], "_local": [266, 482, 483], "localeconv": [266, 344, 452, 479, 480, 483], "lc_numer": [266, 344, 478, 479, 480, 483], "decimal_point": [266, 344, 483], "thousands_sep": [266, 344, 483], "char_max": 266, "lc_monetari": [266, 483], "int_curr_symbol": 266, "currency_symbol": [266, 452], "p_cs_preced": 266, "n_cs_preced": 266, "p_sep_by_spac": 266, "n_sep_by_spac": 266, "mon_decimal_point": 266, "frac_digit": [266, 452], "int_frac_digit": 266, "mon_thousands_sep": 266, "mon_group": 266, "positive_sign": 266, "negative_sign": 266, "p_sign_posn": 266, "n_sign_posn": 266, "d_t_fmt": 266, "d_fmt": 266, "t_fmt": 266, "t_fmt_ampm": 266, "day_2": 266, "day_3": 266, "day_4": 266, "day_5": 266, "day_6": 266, "day_7": 266, "abday_1": 266, "abday_2": 266, "abday_3": 266, "abday_4": 266, "abday_5": 266, "abday_6": 266, "abday_7": 266, "mon_1": 266, "mon_2": 266, "mon_3": 266, "mon_4": 266, "mon_5": 266, "mon_6": 266, "mon_7": 266, "mon_8": 266, "mon_9": 266, "mon_10": 266, "mon_11": 266, "mon_12": 266, "abmon_1": 266, "abmon_2": 266, "abmon_3": 266, "abmon_4": 266, "abmon_5": 266, "abmon_6": 266, "abmon_7": 266, "abmon_8": 266, "abmon_9": 266, "abmon_10": 266, "abmon_11": 266, "abmon_12": 266, "radixchar": 266, "thousep": 266, "yesexpr": 266, "noexpr": 266, "crncystr": 266, "era": [266, 467], "emperor": 266, "reign": 266, "era_d_t_fmt": 266, "era_d_fmt": 266, "era_t_fmt": 266, "alt_digit": 266, "getdefaultlocal": [266, 455, 473, 474, 483], "envvar": [266, 362, 395], "1766": 266, "getlocal": [266, 473, 483], "lc_": 266, "do_setlocal": [266, 293], "localenam": 266, "resetlocal": [266, 473, 474, 483], "string1": [266, 340, 442], "string2": [266, 340, 442], "lc_collat": 266, "format_str": [266, 345, 452, 467, 474, 478, 480, 483], "deloc": [266, 478, 483], "atof": [266, 466, 467], "ssh": [266, 288, 331, 332, 394, 483], "pyctyp": [266, 472, 483], "py_tolow": [266, 469], "loc": 266, "xe4n": 266, "umlaut": 266, "classif": [266, 292, 435], "bind_textdomain_codeset": [266, 466, 473, 481], "mylib": [267, 388], "geteffectivelevel": 267, "getchild": [267, 469], "getchildren": [267, 469, 475, 481, 482, 483], "stack_info": [267, 483], "clientip": 267, "fblogg": 267, "hdlr": 267, "findcal": 267, "lno": 267, "sinfo": 267, "hashandl": 267, "createlock": [267, 269], "tidi": [267, 388, 465, 467, 468, 483], "emiss": [267, 362, 483], "formattim": 267, "preparatori": 267, "formatstack": 267, "uuu": 267, "default_time_format": 267, "default_msec_format": 267, "print_except": [267, 269, 381, 472, 483], "linefmt": 267, "formathead": 267, "formatfoot": 267, "footer": [267, 341, 483], "pertin": [267, 325], "tracebacktyp": [267, 381, 385, 428, 480, 483], "msec": [267, 367, 478], "0f": [267, 475, 483], "004": 267, "896": [267, 343], "la": [267, 467, 473], "tasknam": [267, 483], "_log": 267, "entrant": [267, 483], "getloggerclass": 267, "beginn": [267, 331], "throttl": 267, "28524": 267, "addlevelnam": 267, "getlevelnamesmap": [267, 473, 483], "reinstat": [267, 483], "gethandlerbynam": [267, 268, 483], "gethandlernam": [267, 483], "attrdict": [267, 483], "reconstitut": [267, 299], "klass": 267, "capturewarn": [267, 400], "formatwarn": [267, 400, 468, 483], "inabl": [268, 293, 426], "dictconfigur": 268, "dictconfigclass": 268, "uncustom": 268, "default_logging_config_port": 268, "decrypt": [268, 341, 422], "victim": 268, "customis": [268, 384], "allow_foo": 268, "logconfig": 268, "compel": [268, 469], "customformatterfactori": 268, "_after_": 268, "my_app": 268, "tld": 268, "support_team": 268, "dev_team": 268, "houston": 268, "mykey": 268, "config_dict": 268, "baseconfigur": 268, "qhand": 268, "queue_factori": 268, "customlisten": 268, "hand_name_1": 268, "hand_name_2": 268, "log01": 268, "logger_log01": 268, "hand01": 268, "handler_hand01": 268, "form01": 268, "formatter_form01": 268, "log02": 268, "log03": 268, "log04": 268, "log05": 268, "log06": 268, "log07": 268, "hand02": 268, "hand03": 268, "hand04": 268, "hand05": 268, "hand06": 268, "hand07": 268, "hand08": 268, "hand09": 268, "form02": 268, "form03": 268, "form04": 268, "form05": 268, "form06": 268, "form07": 268, "form08": 268, "form09": 268, "logger_pars": 268, "exemplifi": 268, "_defaultformatt": 268, "handler_hand02": 268, "handler_hand03": 268, "handler_hand04": 268, "default_udp_logging_port": 268, "handler_hand05": 268, "syslog_udp_port": [268, 269], "log_us": [268, 269, 356], "handler_hand06": 268, "handler_hand07": 268, "user1": [268, 473], "user2": [268, 473], "handler_hand08": 268, "handler_hand09": 268, "9022": 268, "typifi": 268, "customfield": 268, "setstream": [269, 281, 480, 483], "42378": [269, 483], "newsyslog": 269, "logrot": 269, "inod": [269, 293, 342, 483], "st_ino": [269, 293, 342, 474, 483], "reopenifneed": [269, 479], "precursor": 269, "rotation_filenam": 269, "rollov": [269, 360, 477, 483], "getfilestodelet": 269, "default_nam": [269, 428], "predetermin": 269, "dorollov": [269, 483], "attim": [269, 477], "w0": 269, "w6": 269, "w1": [269, 440], "d_": 269, "makesocket": 269, "record_attr_dict": 269, "datalen": 269, "createsocket": [269, 473, 483], "retrystart": 269, "retryfactor": 269, "retrymax": 269, "latenc": [269, 293, 441, 469, 472, 479], "rsyslog": 269, "monterey": [269, 483], "gh": [269, 284, 319, 348, 386, 456, 468, 472, 473, 474, 479, 480, 481, 482, 483], "91070": 269, "12168": 269, "append_nul": [269, 476], "12419": 269, "encodeprior": 269, "log_": 269, "log_alert": [269, 356], "crit": 269, "log_crit": [269, 356], "log_debug": [269, 356], "emerg": [269, 462], "panic": [269, 465], "log_emerg": [269, 356], "log_err": [269, 356], "log_info": [269, 356], "log_notic": [269, 356], "log_warn": [269, 356], "log_auth": [269, 356], "authpriv": 269, "log_authpriv": [269, 356], "cron": 269, "log_cron": [269, 356], "log_daemon": [269, 356], "log_ftp": 269, "kern": 269, "log_kern": [269, 356], "lpr": 269, "log_lpr": [269, 356], "log_mail": [269, 356], "log_new": [269, 356], "log_syslog": [269, 356], "uucp": 269, "log_uucp": [269, 356], "local0": 269, "log_local0": [269, 356], "local1": 269, "log_local1": 269, "local2": 269, "log_local2": 269, "local3": 269, "log_local3": 269, "local4": 269, "log_local4": 269, "local5": 269, "log_local5": 269, "local6": 269, "log_local6": 269, "local7": 269, "log_local7": [269, 356], "mapprior": 269, "hammond": [269, 461, 462, 464, 465, 476, 483], "dllname": [269, 481], "logtyp": 269, "win32servic": 269, "slimmer": 269, "geteventcategori": 269, "geteventtyp": 269, "getmessageid": 269, "credenti": [269, 288, 337, 395, 461, 478, 483], "getsubject": 269, "shouldflush": 269, "flushonclos": [269, 483], "settarget": [269, 483], "maplogrecord": 269, "lzmafil": [270, 477, 483], "lzmaerror": 270, "preset": [270, 297, 358, 483], "lzmadecompressor": [270, 478, 483], "lzmacompressor": [270, 483], "format_xz": 270, "format_alon": [270, 483], "format_raw": 270, "format_auto": 270, "check_non": 270, "check_crc32": 270, "check_crc64": 270, "check_sha256": 270, "preset_extrem": 270, "preset_default": 270, "memlimit": 270, "check_unknown": 270, "is_check_support": 270, "liblzma": [270, 473], "filter_lzma1": 270, "filter_lzma2": 270, "filter_delta": 270, "bcj": [270, 483], "filter_x86": 270, "filter_ia64": 270, "filter_arm": 270, "filter_armthumb": 270, "filter_powerpc": 270, "filter_sparc": 270, "dict_siz": 270, "lc": [270, 483], "mode_fast": 270, "mode_norm": 270, "nice_len": 270, "mf": 270, "mf_hc3": 270, "mf_hc4": 270, "mf_bt2": 270, "mf_bt3": 270, "mf_bt4": 270, "start_offset": 270, "data_in": 270, "data_out": 270, "lzc": 270, "out1": 270, "out2": 270, "out3": 270, "out4": 270, "lzf": 270, "my_filt": 270, "maildir": [271, 467, 469, 483], "noteworthi": [271, 462, 463], "get_messag": 271, "get_byt": [271, 475], "get_str": [271, 475, 483], "get_fil": [271, 475], "advisori": [271, 428, 455, 462, 483], "externalclasherror": 271, "qmail": 271, "courier": [271, 369, 372, 483], "exclam": [271, 297, 345, 376, 377, 406, 435], "list_fold": 271, "get_fold": 271, "nosuchmailboxerror": 271, "add_fold": 271, "remove_fold": 271, "notemptyerror": 271, "remark": [271, 384, 462, 466, 483], "inventor": 271, "perceiv": 271, "shortcom": [271, 465], "mboxo": 271, "mh_sequenc": 271, "mh_profil": 271, "get_sequ": 271, "set_sequ": 271, "nmh": 271, "gpl": [271, 426, 464], "rmail": 271, "037": 271, "014": 271, "abridg": 271, "attract": [271, 468, 470], "get_label": 271, "multichannel": 271, "memorandum": 271, "newsread": 271, "insofar": [271, 436], "composit": [271, 352, 376, 387, 432, 483], "bounc": [271, 462], "get_subdir": 271, "get_flag": 271, "set_subdir": 271, "set_flag": 271, "add_flag": 271, "remove_flag": 271, "set_dat": 271, "get_info": 271, "set_info": 271, "unseen": 271, "mua": [271, 341, 480], "get_from": 271, "set_from": 271, "time_": 271, "add_sequ": 271, "remove_sequ": 271, "set_label": 271, "add_label": 271, "remove_label": 271, "get_vis": 271, "set_vis": 271, "update_vis": 271, "list_nam": 271, "list_id": 271, "mpeg": 272, "xmpeg": 272, "1524": 272, "multimedia": [272, 295], "findmatch": 272, "cap": [272, 483], "showparti": 272, "getcap": [272, 288], "tmp1223": 272, "unmarsh": [274, 473], "comb": [275, 343, 442, 473, 481, 483], "copysign": [275, 468, 483], "fab": 275, "fmod": [275, 430], "frexp": 275, "mantissa": [275, 318, 466, 468], "lcm": [275, 482, 483], "ldexp": [275, 318, 483], "modf": 275, "nextaft": [275, 474, 482, 483], "ulp": [275, 318, 352, 468, 482, 483], "halfway": [275, 470], "trunc": [275, 289, 344, 428, 468, 483], "denorm": [275, 352, 483], "epsilon": [275, 352, 468], "cbrt": [275, 343, 473, 483], "cube": [275, 343, 449, 483], "718281": 275, "exp2": [275, 473, 483], "expm1": [275, 469, 475, 483], "0000050000069649e": 275, "0000050000166668e": 275, "log1p": [275, 468, 483], "log2": [275, 475, 476], "bit_length": [275, 318, 344, 469, 471], "arc": [275, 384, 468, 469, 471, 475, 483], "tangent": [275, 384], "quadrant": 275, "euclidean": [275, 481, 483], "qx": 275, "norm": [275, 483], "hypotenus": 275, "triangl": [275, 384], "pythagorean": 275, "theorem": [275, 343, 344], "hyperbola": 275, "erfc": [275, 469, 475, 480, 483], "complementari": [275, 318, 408, 469, 475], "gamma": [275, 318, 469, 475], "lgamma": [275, 469, 475], "141592": 275, "283185": 275, "circumfer": 275, "vi": [275, 320], "hart": 275, "celebr": 275, "pie": [275, 340], "annex": [275, 387, 435, 468], "guess_all_extens": [276, 483], "knownfil": 276, "rebuilt": [276, 476, 478, 483], "read_mime_typ": [276, 483], "add_typ": 276, "suffix_map": 276, "recognit": 276, "tgz": [276, 460], "encodings_map": [276, 483], "types_map": [276, 468, 483], "common_typ": 276, "types_map_inv": 276, "read_windows_registri": 276, "access_read": 278, "access_writ": 278, "access_copi": 278, "access_default": [278, 483], "prot": 278, "tagnam": [278, 376, 410, 411, 412, 483], "allocationgranular": 278, "map_shar": 278, "prot_writ": 278, "prot_read": 278, "map_priv": 278, "lieu": [278, 426], "pages": 278, "madvis": [278, 481, 483], "advic": [278, 293, 461, 474, 483], "pagefil": 278, "write_byt": [278, 296, 478, 483], "madv_norm": 278, "madv_random": 278, "madv_sequenti": 278, "madv_willne": 278, "madv_dontne": 278, "madv_remov": 278, "madv_dontfork": 278, "madv_dofork": 278, "madv_hwpoison": 278, "madv_merg": 278, "madv_unmerg": 278, "madv_soft_offlin": 278, "madv_hugepag": 278, "madv_nohugepag": 278, "madv_dontdump": 278, "madv_dodump": 278, "madv_fre": 278, "madv_nosync": 278, "madv_autosync": 278, "madv_nocor": 278, "madv_cor": 278, "madv_protect": 278, "madv_free_reus": 278, "map_denywrit": 278, "map_execut": 278, "map_anon": 278, "map_anonym": 278, "map_popul": [278, 483], "map_stack": [278, 483], "map_aligned_sup": [278, 483], "map_conc": [278, 483], "addpackagepath": 279, "pkg_name": [279, 362, 382], "replacepackag": 279, "oldnam": 279, "newnam": [279, 452], "replace_path": 279, "run_script": 279, "oldpath": 279, "newpath": 279, "analyz": [279, 299, 319, 331, 341, 382, 386, 426, 435, 467, 468, 469, 475, 483], "baconhamegg": 279, "globalnam": 279, "badmodul": 279, "_type": 279, "_inverted_registri": 279, "_slotnam": [279, 483], "_compil": [279, 308], "isstr": 279, "_sre": [279, 478, 483], "_optimize_unicod": 279, "_constant": [279, 344, 483], "repeat_on": 279, "makedict": 279, "at_end_lin": 279, "_expand": 279, "_parser": [279, 308], "_patternend": 279, "sre_flag_unicod": 279, "inttyp": [279, 483], "typetyp": 279, "msi": [281, 467, 478, 480, 483], "cabinet": [281, 483], "fcicreat": [281, 483], "cabnam": 281, "mszip": 281, "uuidcreat": 281, "uuidtostr": 281, "opendatabas": [281, 483], "msiopendatabas": 281, "msidbopen_createdirect": 281, "msidbopen_cr": 281, "msidbopen_direct": 281, "msidbopen_readon": 281, "msidbopen_transact": 281, "msidbopen_patchfil": 281, "createrecord": 281, "msicreaterecord": 281, "init_databas": [281, 483], "productnam": 281, "productcod": 281, "productvers": 281, "manufactur": 281, "_validation_record": 281, "add_data": [281, 395, 477], "add_tabl": 281, "add_stream": 281, "_stream": 281, "gen_uuid": 281, "openview": [281, 483], "msidatabaseopenview": 281, "msidatabasecommit": 281, "getsummaryinform": 281, "msigetsummaryinform": 281, "msiclosehandl": 281, "msiviewexecut": 281, "getcolumninfo": 281, "msiviewgetcolumninfo": 281, "msicolinfo_nam": 281, "msicolinfo_typ": 281, "msiviewfetch": 281, "msiviewmodifi": 281, "msimodify_seek": 281, "msimodify_refresh": 281, "msimodify_insert": 281, "msimodify_upd": 281, "msimodify_assign": 281, "msimodify_replac": 281, "msimodify_merg": 281, "msimodify_delet": 281, "msimodify_insert_temporari": 281, "msimodify_valid": 281, "msimodify_validate_new": 281, "msimodify_validate_field": 281, "msimodify_validate_delet": 281, "msiviewclos": 281, "summaryinform": [281, 483], "getproperti": [281, 416, 483], "msisummaryinfogetproperti": 281, "pid_codepag": 281, "pid_titl": 281, "pid_subject": 281, "pid_author": 281, "pid_keyword": 281, "pid_com": 281, "pid_templ": 281, "pid_lastauthor": 281, "pid_revnumb": 281, "pid_lastprint": 281, "pid_create_dtm": 281, "pid_lastsave_dtm": 281, "pid_pagecount": 281, "pid_wordcount": 281, "pid_charcount": 281, "pid_appnam": 281, "pid_secur": 281, "getpropertycount": 281, "msisummaryinfogetpropertycount": 281, "setproperti": [281, 415, 416], "msisummaryinfosetproperti": 281, "msisummaryinfopersist": 281, "getfieldcount": 281, "msirecordgetfieldcount": 281, "getinteg": [281, 468], "setstr": 281, "msirecordsetstr": 281, "msirecordsetstream": 281, "setinteg": 281, "msirecordsetinteg": 281, "cleardata": 281, "msirecordcleardata": 281, "msierror": [281, 483], "basedir": 281, "componentflag": 281, "start_compon": [281, 483], "defaultdir": 281, "keypath": 281, "add_fil": 281, "remove_pyc": 281, "featurecompon": 281, "set_curr": 281, "dlg": 281, "controlev": 281, "eventmap": 281, "controlcondit": 281, "radiobuttongroup": 281, "radio": [281, 375, 483], "control_next": 281, "pushbutton": 281, "next_control": 281, "radiogroup": 281, "radiobutton": [281, 375, 376, 483], "adminexecutesequ": 281, "adminuisequ": 281, "advtexecutesequ": 281, "installexecutesequ": 281, "installuisequ": 281, "uitext": 281, "actiontext": 281, "lk_": 282, "lk_lock": 282, "lk_rlck": 282, "lk_nblck": 282, "lk_nbrlck": 282, "lk_unlck": 282, "setmod": 282, "o_append": [282, 293], "fdopen": [282, 293, 337, 428], "xe0": 282, "keycod": [282, 369], "getwch": [282, 468], "putch": 282, "putwch": [282, 468], "unicode_char": 282, "ungetwch": 282, "heapmin": 282, "crt_assembly_vers": [282, 469], "crtassem": [282, 469], "vc_assembly_publickeytoken": [282, 469], "libraries_assembly_name_prefix": [282, 469], "getppid": [283, 293, 483], "set_start_method": [283, 474, 477], "preload": [283, 456, 483], "33725": [283, 481, 483], "sharedmemori": [283, 284, 483], "reboot": [283, 296, 477], "mp": [283, 465], "duplex": [283, 295], "parent_conn": 283, "child_conn": 283, "liabl": [283, 402, 426], "1415927": 283, "offload": 283, "imap_unord": [283, 483], "apply_async": [283, 468], "multiple_result": 283, "patienc": 283, "poolwork": 283, "semi": [283, 292, 377, 483], "is_al": [283, 365, 468, 482, 483], "orphan": [283, 483], "authkey": [283, 284, 483], "waitforsingleobject": [283, 483], "waitformultipleobject": [283, 483], "processerror": 283, "buffertooshort": 283, "recv_bytes_into": 283, "authenticationerror": 283, "joinablequeu": [283, 478, 483], "difficulti": [283, 462, 465], "infinitesim": 283, "cancel_join_thread": 283, "conn1": 283, "conn2": 283, "feeder": [283, 386, 483], "sem_getvalu": [283, 483], "join_thread": [283, 362, 483], "allow_exit_without_flush": 283, "3770": 283, "active_children": 283, "cpus": [283, 293, 347, 477, 478, 483], "sched_getaffin": [283, 293, 476, 483], "parent_process": [283, 483], "freeze_support": 283, "get_all_start_method": [283, 477, 483], "get_start_method": [283, 477], "allow_non": [283, 419, 420, 465], "set_execut": [283, 483], "set_forkserver_preload": [283, 483], "send_byt": 283, "recv_byt": 283, "arr1": 283, "arr2": 283, "solitari": 283, "indistinguish": [283, 308], "unown": [283, 483], "sem_timedwait": [283, 483], "typecode_or_typ": 283, "get_lock": 283, "size_or_initi": 283, "rawarray": 283, "rawvalu": 283, "get_obj": 283, "875": 283, "375": [283, 343], "1111111111111111": 283, "515625": 283, "0625": [283, 449], "640625": 283, "syncmanag": [283, 483], "basemanag": [283, 284, 483], "shutdown_timeout": [283, 483], "get_serv": 283, "xmlrpclib": [283, 464, 465, 466, 467, 468, 469, 470, 483], "50000": [283, 367], "typeid": [283, 481], "proxytyp": [283, 402, 483], "method_to_typeid": 283, "create_method": 283, "baseproxi": [283, 483], "_callmethod": 283, "_exposed_": 283, "_method_to_typeid_": 283, "_z": 283, "mathsclass": 283, "mymanag": 283, "queuemanag": 283, "get_queu": 283, "listproxi": [283, 483], "l_outer": 283, "d_first_inn": 283, "lproxi": 283, "remoteerror": 283, "_getvalu": 283, "deregist": 283, "maxtasksperchild": [283, 469, 483], "apach": [283, 341, 419, 426, 453, 462, 479, 483], "mod_wsgi": [283, 348], "error_callback": 283, "asyncresult": 283, "chop": [283, 462, 466, 470], "map_async": [283, 468, 476], "lazier": 283, "starmap_async": [283, 476], "outstand": [283, 426], "deliver_challeng": 283, "answer_challeng": 283, "af_pip": 283, "last_accept": 283, "object_list": 283, "waitabl": [283, 293, 328, 366, 473, 483], "1729": 283, "pipenam": 283, "servernam": 283, "get_logg": 283, "log_to_stderr": [283, 483], "doom": [283, 467], "mainprocess": 283, "pymp": 283, "threadpool": [283, 483], "_bootstrap": [283, 382, 483], "collid": [283, 395], "_pid": 283, "5155": 283, "5313": 283, "5331": 283, "_h": 283, "generatorproxi": 283, "get_operator_modul": 283, "foo1": [283, 319], "foo2": [283, 319], "94": [283, 318, 469], "calculatestar": 283, "pow3": 283, "imap_it": 283, "imap_unordered_it": 283, "tgot": 283, "imapiter": 283, "applyresult": 283, "number_of_process": 283, "tasks1": 283, "tasks2": 283, "done_queu": 283, "smp": 284, "sharedmemorymanag": [284, 483], "shm_a": 284, "shm_b": 284, "howdi": 284, "ndarray": 284, "np": [284, 476], "shm": [284, 483], "dtype": [284, 386], "psm_21467_46075": 284, "existing_shm": 284, "int64": 284, "888": 284, "shareablelist": [284, 483], "smm": 284, "psm_6572_7512": 284, "raw_shm": 284, "another_sl": 284, "psm_6572_12221": 284, "do_work": [284, 293], "total_result": 284, "10m": 284, "106939": 284, "nul_bug_demo": 284, "deserialized_sl": 284, "netrcparseerror": 286, "mapnam": 287, "default_domain": 287, "joy": [287, 384], "get_default_domain": 287, "nntlib": 288, "poster": 288, "3977": 288, "2980": 288, "gmane": [288, 476, 483], "committ": [288, 476], "1096": 288, "1087": 288, "1088": 288, "1089": 288, "1090": 288, "1091": 288, "1092": 288, "1093": 288, "1094": 288, "fellow": 288, "240": [288, 384], "119": [288, 343, 382, 481], "readermod": 288, "usenetrc": 288, "authinfo": 288, "nntppermanenterror": 288, "1755": [288, 476], "nntp_ssl": [288, 475, 482, 483], "nntps": 288, "4642": 288, "nntperror": [288, 483], "nntpreplyerror": 288, "nntptemporaryerror": 288, "nntpprotocolerror": 288, "nntpdataerror": 288, "nntp_version": 288, "nntp_implement": 288, "newgroup": 288, "groupinfo": 288, "tor": 288, "newnew": 288, "group_pattern": [288, 427, 431], "offlin": [288, 382, 461], "grouppattern": 288, "wildmat": 288, "295": [288, 474, 483], "biopython": 288, "elid": 288, "message_spec": 288, "xover": 288, "article_numb": 288, "art_num": 288, "117216": 288, "xref": 288, "ik1hcnrpbib2libmw7z3axmi": 288, "loewi": 288, "message_id": 288, "9099": 288, "20030112190404": 288, "ge29873": 288, "metaslash": 288, "neal": [288, 465, 467, 468], "norwitz": [288, 465, 467, 468], "ihav": 288, "slave": [288, 293, 309, 369, 483], "xhdr": 288, "hdr": 288, "header_str": 288, "e9buter_en_python": 288, "buter": 288, "chjvymzdqg1ligrlig1hdhjpy2u": 288, "probl": 288, "myfoo": 289, "myintegr": 289, "do_my_adding_stuff": 289, "othertypeiknowabout": 289, "do_my_other_adding_stuff": 289, "_operator_fallback": 289, "monomorphic_oper": 289, "fallback_oper": 289, "__r": 289, "_add": 289, "__not__": 291, "inv": [291, 478], "__inv__": 291, "truediv": 291, "66": [291, 389, 442, 463, 468], "__concat__": 291, "countof": [291, 482, 483], "delitem": 291, "indexof": [291, 482, 483], "setitem": [291, 390], "tuppl": 291, "resolve_attr": 291, "cdefg": 291, "soldier": 291, "rank": [291, 343, 413, 474], "captain": [291, 479], "dotterbart": 291, "banana": [291, 344, 442, 451, 471], "pear": [291, 442, 451, 471], "iadd": 291, "iand": 291, "iconcat": 291, "__iconcat__": 291, "ifloordiv": 291, "ilshift": 291, "imod": 291, "imatmul": [291, 478], "ior": 291, "ipow": 291, "irshift": 291, "isub": 291, "itruediv": 291, "ixor": 291, "yourscript": 292, "foutfil": 292, "qfoutfil": 292, "acquaint": 292, "execl": [292, 293], "xf": [292, 440], "pf": [292, 376], "ffoo": 292, "controversi": [292, 464], "contradictori": 292, "hypothet": [292, 337, 462], "whatsoev": [292, 325, 426], "mutant": 292, "oddbal": 292, "humbl": 292, "mission": 292, "overwhelm": 292, "opt_str": 292, "jam": 292, "n42": 292, "vewwi": 292, "wabbit": 292, "novic": 292, "bland": [292, 467, 468], "clue": 292, "optiongroup": 292, "optioncontain": 292, "add_option_group": 292, "get_option_group": 292, "print_vers": 292, "get_vers": 292, "suppress_usag": 292, "option_list": 292, "standard_option_list": 292, "option_class": 292, "indentedhelpformatt": 292, "titledhelpformatt": 292, "add_help_opt": 292, "make_opt": 292, "irrelev": [292, 469, 483], "callback_arg": 292, "callback_kwarg": 292, "suppress_help": 292, "fbar": 292, "mypkg": [292, 388], "check_choic": 292, "poke": 292, "enable_interspersed_arg": 292, "get_opt": 292, "set_conflict_handl": 292, "optionconflicterror": 292, "intellig": [292, 295, 297], "whittl": 292, "set_usag": 292, "get_usag": 292, "overkil": 292, "rarg": 292, "optionvalu": 292, "record_foo_seen": 292, "saw_foo": 292, "check_ord": 292, "moon": [292, 386], "check_moon": 292, "is_moon_ful": 292, "store_valu": 292, "hairi": 292, "intricaci": 292, "stab": 292, "vararg_callback": 292, "floatabl": 292, "vararg_attr": 292, "check_mytyp": 292, "wind": 292, "sillier": 292, "check_complex": 292, "myoption": 292, "store_act": 292, "typed_act": 292, "always_typed_act": 292, "take_act": 292, "ding": [292, 482, 483], "dong": [292, 483], "ensure_valu": 292, "optparse_pars": 292, "valv": 292, "badoptionerror": 292, "ambiguousoptionerror": 292, "threat": 293, "getuid": [293, 483], "inaccess": [293, 395, 428, 462, 465, 477, 483], "unam": [293, 303, 352, 355, 358, 475, 476, 483], "device_encod": [293, 483], "nonsens": [293, 477], "ctermid": 293, "environb": [293, 348, 475, 483], "supports_bytes_environ": [293, 475], "fchdir": [293, 478], "getenvb": [293, 475], "get_exec_path": 293, "getegid": [293, 483], "geteuid": [293, 483], "getgid": [293, 483], "getgrouplist": [293, 476, 483], "getgroup": [293, 483], "setgroup": [293, 348, 483], "macosx_deployment_target": [293, 483], "getpwuid": [293, 310, 483], "getpgid": [293, 465], "getprior": [293, 476], "prio_process": 293, "prio_pgrp": 293, "prio_us": 293, "setprior": [293, 476, 483], "prio_darwin_thread": [293, 483], "prio_darwin_process": [293, 483], "prio_darwin_bg": [293, 483], "prio_darwin_nonui": [293, 483], "getresuid": [293, 469, 483], "ruid": 293, "euid": 293, "suid": 293, "getresgid": [293, 469, 483], "rgid": 293, "egid": 293, "sgid": 293, "initgroup": [293, 469], "setegid": 293, "seteuid": 293, "setgid": [293, 358], "superus": 293, "setn": [293, 483], "nstype": 293, "reassoci": 293, "clone_new": 293, "pidfd_open": [293, 474, 482, 483], "clone_newut": 293, "clone_newpid": 293, "clone_newnet": 293, "unshar": [293, 322, 483], "setpgrp": 293, "setpgid": [293, 348], "pgrp": 293, "setregid": [293, 348], "setresgid": [293, 469], "setresuid": [293, 469], "setreuid": [293, 348], "getsid": [293, 466], "setsid": [293, 348, 483], "setuid": [293, 358], "umask": [293, 296, 348, 362, 480, 483], "sysnam": [293, 303], "nodenam": [293, 303, 410], "disassoci": 293, "clone_": 293, "clone_fil": 293, "clone_f": 293, "clone_newcgroup": 293, "clone_newipc": 293, "clone_newn": 293, "clone_newtim": 293, "clone_newus": 293, "clone_sighand": 293, "clone_sysvsem": 293, "clone_thread": 293, "clone_vm": 293, "decept": [293, 465], "closerang": [293, 468, 483], "fd_low": [293, 483], "fd_high": [293, 483], "copy_file_rang": [293, 483], "offset_src": 293, "offset_dst": 293, "procf": [293, 483], "sysf": 293, "fd2": 293, "fchmod": [293, 468, 478, 483], "fchown": [293, 468, 478], "fdatasync": [293, 478], "filedescriptor": 293, "fpathconf": [293, 483], "95": [293, 314, 318, 343, 382, 465, 468], "98": [293, 337, 344, 405, 468, 469, 475], "pathconf_nam": 293, "pathconf": [293, 476], "fstat": [293, 294, 342, 464, 476, 478, 483], "stat_result": [293, 296, 358, 465, 478, 481, 483], "fstatvf": [293, 464, 478], "statvf": [293, 464, 468, 476, 483], "fsync": [293, 478, 483], "_commit": 293, "get_block": [293, 478, 483], "set_block": [293, 478, 483], "f_lock": [293, 483], "f_tlock": 293, "f_ulock": 293, "f_test": 293, "login_tti": [293, 483], "leader": [293, 331, 483], "lseek": [293, 467, 476], "0o777": [293, 296], "o_wron": [293, 333], "o_rdwr": [293, 333], "o_creat": 293, "o_excl": [293, 360], "o_trunc": 293, "o_dsync": 293, "o_rsync": 293, "o_sync": 293, "o_noctti": 293, "o_cloexec": [293, 476, 483], "o_noinherit": 293, "o_short_liv": 293, "o_temporari": [293, 360], "o_random": 293, "o_sequenti": 293, "o_evton": [293, 472, 483], "o_fsync": [293, 472, 483], "o_symlink": [293, 472, 483], "o_nofollow_ani": [293, 472, 483], "o_async": 293, "o_direct": 293, "o_directori": 293, "o_nofollow": 293, "o_noatim": 293, "o_path": [293, 477, 483], "o_tmpfil": [293, 360, 477, 483], "openpti": [293, 309, 483], "pipe2": [293, 476], "posix_falloc": [293, 476, 478, 483], "posix_fadvis": [293, 476, 478, 483], "posix_fadv_norm": 293, "posix_fadv_sequenti": 293, "posix_fadv_random": 293, "posix_fadv_noreus": 293, "posix_fadv_willne": 293, "posix_fadv_dontne": 293, "pread": [293, 476, 478, 480, 483], "preadv": [293, 480, 483], "rwf_hipri": 293, "rwf_nowait": 293, "sysconf": [293, 337, 483], "sc_iov_max": [293, 337], "readv": [293, 476, 478, 480, 483], "pwrite": [293, 476, 478, 480], "pwritev": [293, 480, 483], "rwf_dsync": 293, "rwf_sync": 293, "rwf_append": [293, 483], "writev": [293, 476, 478, 480, 483], "out_fd": [293, 483], "in_fd": [293, 483], "sf_nodiskio": 293, "sf_mnowait": 293, "sf_sync": 293, "sf_nocach": [293, 483], "splice_f_mov": 293, "splice_f_nonblock": 293, "splice_f_mor": 293, "tcgetpgrp": 293, "tcsetpgrp": 293, "pg": 293, "ttynam": [293, 483], "get_terminal_s": [293, 332, 476, 483], "stdout_fileno": 293, "terminal_s": [293, 332], "close_fd": [293, 348, 466, 475, 480, 481, 483], "get_inherit": [293, 337, 477], "set_inherit": [293, 328, 337, 477, 483], "get_handle_inherit": [293, 477], "set_handle_inherit": [293, 348, 477], "supports_fd": [293, 476], "faccessat": 293, "supports_dir_fd": [293, 476], "supports_follow_symlink": [293, 332], "effective_id": [293, 476], "f_ok": [293, 332], "r_ok": 293, "w_ok": 293, "x_ok": [293, 332, 483], "supports_effective_id": [293, 476], "uf_nodump": [293, 342], "uf_immut": [293, 342, 468], "uf_append": [293, 342, 468], "uf_opaqu": [293, 342], "uf_nounlink": [293, 342], "uf_compress": [293, 342], "uf_hidden": [293, 342], "sf_archiv": [293, 342], "sf_immut": [293, 342], "sf_append": [293, 342], "sf_nounlink": [293, 342], "sf_snapshot": [293, 342], "s_isuid": [293, 342], "s_isgid": [293, 342], "s_enfmt": [293, 342], "s_isvtx": [293, 342], "s_iread": [293, 342], "s_iwrit": [293, 332, 342], "s_iexec": [293, 342], "s_irwxu": [293, 342], "s_irusr": [293, 342, 358], "s_iwusr": [293, 342, 358], "s_ixusr": [293, 342, 358], "s_irwxg": [293, 342], "s_irgrp": [293, 342], "s_iwgrp": [293, 342, 358], "s_ixgrp": [293, 342, 358], "s_irwxo": [293, 342], "s_iroth": [293, 342], "s_iwoth": [293, 342, 358], "s_ixoth": [293, 342, 358], "chroot": [293, 483], "getcwdb": [293, 470, 481, 483], "lchflag": [293, 468], "lchmod": [293, 296, 468, 483], "lchown": [293, 465], "xxxxxxxxxxxx": 293, "lstat": [293, 294, 296, 342, 362, 474, 476, 481, 483], "vista": [293, 483], "repars": [293, 314, 413, 481, 483], "junction": [293, 294, 296, 332, 474, 481, 483], "exist_ok": [293, 296, 478, 483], "21082": [293, 483], "mkfifo": [293, 476, 478, 483], "rendezv": [293, 475], "mknod": [293, 465, 476, 478, 483], "0o600": 293, "s_ifreg": [293, 342], "s_ifchr": [293, 342, 483], "s_ifblk": [293, 342], "s_ififo": [293, 342], "makedev": [293, 465, 483], "st_dev": [293, 342, 474], "st_rdev": [293, 474], "readlink": [293, 296, 476, 481, 482, 483], "realpath": [293, 294, 296, 461, 472, 481, 483], "prune": [293, 483], "direntri": [293, 474, 478, 479, 483], "opendir": [293, 483], "readdir": [293, 478], "findfirstfilew": [293, 483], "findnextfilew": 293, "scandir_path": 293, "s_isdir": [293, 342], "dirent": 293, "d_type": 293, "dt_unknown": 293, "is_symlink": [293, 296, 481, 483], "islink": [293, 294, 296, 481, 483], "is_junct": [293, 296, 474, 483], "isjunct": [293, 294, 474, 483], "st_nlink": [293, 342], "st_ctime": [293, 342, 474, 483], "st_birthtim": [293, 467, 474, 483], "statinfo": 293, "st_mode": [293, 296, 342, 477, 481], "33188": 293, "7876932": 293, "234881026": 293, "st_uid": [293, 342], "st_gid": [293, 342], "st_size": [293, 296, 342, 464], "264": [293, 347, 464], "st_atim": [293, 342], "1297230295": 293, "1297230027": 293, "st_atime_n": 293, "st_mtime_n": 293, "st_ctime_n": 293, "st_birthtime_n": 293, "fat32": [293, 483], "st_block": [293, 483], "st_blksize": 293, "st_flag": [293, 467], "st_gen": [293, 467], "st_fstype": [293, 480, 483], "st_rsize": 293, "st_creator": 293, "st_type": 293, "st_file_attribut": [293, 342, 478, 483], "dwfileattribut": [293, 478], "by_handle_file_inform": [293, 478], "getfileinformationbyhandl": [293, 478], "file_attribute_": 293, "file_attribute_arch": [293, 342], "st_reparse_tag": [293, 342, 481], "file_attribute_reparse_point": [293, 342], "io_reparse_tag_": 293, "f_bsize": 293, "f_frsize": 293, "f_block": 293, "f_bfree": 293, "f_bavail": 293, "f_file": 293, "f_ffree": 293, "f_favail": 293, "f_flag": 293, "f_namemax": 293, "f_fsid": [293, 483], "st_rdon": 293, "st_nosuid": 293, "st_nodev": 293, "st_noexec": 293, "st_synchron": 293, "st_mandlock": 293, "st_write": 293, "st_append": 293, "st_immut": 293, "st_noatim": 293, "st_nodiratim": 293, "st_relatim": 293, "atim": 293, "target_is_directori": [293, 296, 476], "morph": 293, "unprivileg": 293, "secreatesymboliclinkprivileg": 293, "unelev": 293, "atime_n": 293, "mtime_n": 293, "dirpath": [293, 296], "resumpt": [293, 353, 479, 483], "cvs": [293, 462, 463, 464, 465, 466, 467, 483], "dirfd": 293, "rootfd": 293, "mfd_cloexec": 293, "mfd_": 293, "memfd": [293, 483], "mfd_allow_s": 293, "mfd_hugetlb": 293, "mfd_huge_shift": 293, "mfd_huge_mask": 293, "mfd_huge_64kb": 293, "mfd_huge_512kb": 293, "mfd_huge_1mb": 293, "mfd_huge_2mb": 293, "mfd_huge_8mb": 293, "mfd_huge_16mb": 293, "mfd_huge_32mb": 293, "mfd_huge_256mb": 293, "mfd_huge_512mb": 293, "mfd_huge_1gb": 293, "mfd_huge_2gb": 293, "mfd_huge_16gb": 293, "mfd_huge": 293, "eventfd": [293, 472, 483], "initv": 293, "efd_cloexec": [293, 483], "efd_nonblock": [293, 483], "efd_semaphor": [293, 483], "eventfd_read": 293, "eventfd_writ": 293, "efc_cloexec": 293, "xattr_replac": 293, "xattr_creat": 293, "xattr_size_max": 293, "adddlldirectori": 293, "execlp": 293, "execvp": [293, 348], "ex_ok": 293, "exit_success": 293, "ex_usag": 293, "ex_dataerr": 293, "ex_noinput": 293, "ex_nous": 293, "ex_nohost": 293, "ex_unavail": 293, "ex_softwar": 293, "ex_oserr": 293, "ex_osfil": 293, "ex_cantcreat": 293, "ex_ioerr": 293, "ex_tempfail": 293, "retryabl": 293, "ex_protocol": 293, "ex_noperm": 293, "ex_config": 293, "ex_notfound": 293, "cygwin": [293, 352, 360, 461, 463, 465, 481, 483], "longstand": [293, 474, 476, 483], "pidfd_nonblock": [293, 474, 483], "waitid": [293, 476, 478, 483], "plock": 293, "waitstatus_to_exitcod": [293, 309, 482, 483], "file_act": [293, 483], "setpgroup": [293, 483], "resetid": [293, 483], "setsigmask": [293, 483], "setsigdef": [293, 483], "posix_spawnp": [293, 483], "posix_spawn_open": 293, "posix_spawn_clos": 293, "posix_spawn_dup2": 293, "new_fd": 293, "posix_spawn_file_actions_addopen": 293, "posix_spawn_file_actions_addclos": 293, "posix_spawn_file_actions_adddup2": 293, "posix_spawn_setpgroup": 293, "posix_spawn_resetid": 293, "posix_spawn_setsid": 293, "posix_spawn_setsid_np": 293, "posix_spawn_setsigmask": 293, "sigdef": 293, "posix_spawn_setsigdef": 293, "sched_param": 293, "posix_spawn_setschedparam": 293, "posix_spawn_setschedul": 293, "after_in_par": 293, "after_in_child": 293, "spawnl": 293, "spawnlp": [293, 348], "spawnv": [293, 483], "spawnvp": [293, 348], "p_nowait": [293, 348], "p_wait": [293, 348], "p_nowaito": 293, "p_detach": 293, "p_overlay": 293, "shellexecut": [293, 483], "normpath": [293, 294, 469, 483], "comspec": [293, 348, 476, 477], "children_us": 293, "children_system": 293, "getprocesstim": 293, "idtyp": 293, "p_pid": 293, "p_pgid": 293, "p_all": 293, "p_pidfd": [293, 482, 483], "wexit": 293, "wstop": 293, "wcontinu": 293, "wnohang": 293, "wnowait": 293, "siginfo_t": [293, 333, 483], "si_pid": [293, 333], "si_uid": [293, 333], "si_signo": [293, 333], "si_status": [293, 333], "si_cod": [293, 333, 482, 483], "cld_exit": 293, "wuntrac": 293, "wait3": [293, 467, 478, 483], "getrusag": [293, 322, 467, 483], "wait4": [293, 467, 478], "cld_kill": [293, 482, 483], "cld_dump": 293, "cld_trap": 293, "cld_stop": [293, 482, 483], "cld_continu": 293, "wifexit": 293, "wexitstatus": 293, "wifsign": 293, "wtermsig": 293, "wifstop": 293, "wstopsig": 293, "wcoredump": 293, "wifcontinu": 293, "sigcont": [293, 333], "ptrace": [293, 483], "sched_oth": 293, "sched_batch": 293, "sched_idl": 293, "sched_sporad": 293, "sched_fifo": 293, "sched_rr": 293, "robin": [293, 413, 442, 481, 483], "sched_reset_on_fork": 293, "sched_prior": 293, "sched_setparam": [293, 476], "sched_setschedul": [293, 476], "sched_getparam": [293, 476], "sched_get_priority_min": [293, 476], "sched_get_priority_max": [293, 476], "sched_getschedul": [293, 476], "sched_rr_get_interv": [293, 476], "quantum": 293, "sched_yield": [293, 476, 483], "sched_setaffin": [293, 476, 483], "confstr": [293, 483], "confstr_nam": 293, "undetermin": 293, "getloadavg": 293, "unobtain": 293, "sysconf_nam": [293, 483], "sc_minsigstksz": [293, 483], "extsep": 293, "defpath": [293, 332, 483], "rtld_lazi": [293, 352, 476], "rtld_nodelet": [293, 476], "rtld_noload": [293, 476], "rtld_deepbind": [293, 476], "setdlopenflag": [293, 352, 450, 464, 476], "getdlopenflag": [293, 352, 450, 464], "getrandom": [293, 478, 479, 483], "entropi": [293, 341, 479, 483], "environment": [293, 395, 455, 483], "unnecessarili": [293, 483], "grnd_random": 293, "grnd_nonblock": [293, 483], "524": [293, 479, 483], "bcryptgenrandom": [293, 473, 483], "systemrandom": [293, 318, 326], "getentropi": [293, 478, 483], "cryptgenrandom": [293, 473, 483], "ntpath": [294, 480, 483], "lexist": [294, 466, 481, 483], "isdir": [294, 296, 302, 358, 481, 483], "ismount": [294, 477, 481, 483], "commonpath": [294, 478, 483], "commonprefix": [294, 478], "userprofil": [294, 481, 483], "homepath": 294, "homedr": 294, "getatim": 294, "getmtim": 294, "getctim": 294, "isab": [294, 296], "getvolumepathnam": 294, "isdevdr": [294, 483], "std": [294, 352, 366, 467, 483], "1003": 294, "relpath": [294, 296, 468, 474, 483], "samefil": [294, 296, 477, 478, 483], "path1": 294, "path2": 294, "sameopenfil": 294, "fp1": 294, "fp2": 294, "samestat": [294, 296, 477], "stat1": 294, "stat2": 294, "splitdriv": [294, 480, 483], "splitroot": [294, 474, 483], "cshrc": [294, 459], "supports_unicode_filenam": [294, 465], "soundcard": 295, "ossaudioerror": 295, "audiodev": [295, 468], "dsp": 295, "player": [295, 319, 345, 384], "linuxaudiodev": [295, 462, 465, 468], "openmix": 295, "mixerdev": 295, "setfmt": 295, "setparamet": 295, "oss_audio_devic": 295, "writeal": 295, "sndctl_dsp_setfmt": 295, "sndctl_dsp_sync": 295, "nonblock": [295, 483], "getfmt": 295, "afmt_mu_law": 295, "afmt_a_law": 295, "afmt_ima_adpcm": 295, "afmt_u8": 295, "afmt_s16_l": 295, "afmt_s16_b": 295, "68k": 295, "powerpc": [295, 466, 467, 468, 483], "afmt_s8": 295, "afmt_u16_l": 295, "afmt_u16_b": 295, "afmt_queri": 295, "monophon": 295, "stereophon": 295, "sampler": 295, "11025": 295, "22050": 295, "96000": 295, "dvd": 295, "obufcount": 295, "obuffre": 295, "oss_mixer_devic": 295, "mixabl": 295, "sound_mixer_pcm": 295, "sound_mixer_synth": 295, "sound_mixer_": 295, "pcm": [295, 401], "sound_mixer_volum": 295, "gravi": 295, "ultrasound": 295, "stereocontrol": 295, "reccontrol": 295, "left_volum": 295, "right_volum": 295, "get_recsrc": 295, "set_recsrc": 295, "microphon": 295, "setrecsrc": 295, "sound_mixer_m": 295, "windowspath": [296, 483], "purewindowspath": [296, 483], "test_pathlib": [296, 483], "pureposixpath": [296, 483], "lib64": [296, 352, 354, 456, 482, 483], "apache2": 296, "an_absolute_path": 296, "stem": [296, 422, 469, 473, 483], "as_posix": 296, "as_uri": 296, "is_absolut": [296, 483], "is_relative_to": [296, 483], "case_sensit": [296, 474, 483], "relative_to": [296, 474, 483], "walk_up": [296, 474, 483], "941": 296, "error_messag": 296, "subpath": [296, 423], "with_nam": [296, 483], "antoin": [296, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "751": 296, "with_stem": [296, 483], "851": 296, "with_suffix": [296, 483], "with_seg": [296, 474, 483], "mypath": 296, "session_id": 296, "798": 296, "is_mount": [296, 480, 481, 483], "is_block_devic": [296, 481, 483], "is_char_devic": [296, 481, 483], "is_fifo": [296, 481, 483], "is_socket": [296, 481, 483], "956": 296, "1327883547": 296, "852554": 296, "33277": 296, "0o444": 296, "33060": 296, "nonexistentfil": 296, "film": [296, 386], "_templat": 296, "_build": 296, "_static": [296, 483], "top_down": 296, "on_error": [296, 386], "my_binary_fil": 296, "my_text_fil": 296, "write_text": [296, 478, 483], "mylink": 296, "symlink_to": [296, 472, 481, 483], "other_path": 296, "hardlink_to": [296, 472, 481, 483], "missing_ok": [296, 483], "abnorm": [297, 352, 394, 475], "pdbrc": [297, 473, 475, 479, 482, 483], "nosigint": [297, 475], "readrc": [297, 479, 483], "elp": 297, "hel": 297, "_frame": [297, 483], "_retval": 297, "_except": 297, "reak": 297, "tbreak": 297, "ear": 297, "bpnumber": 297, "some_vari": 297, "tep": 297, "unt": 297, "il": [297, 341, 434], "eturn": 297, "ont": 297, "inu": 297, "ump": 297, "ist": 297, "longlist": 297, "rgs": 297, "whati": [297, 483], "undisplay": [297, 475, 483], "classinst": 297, "ps": [297, 308, 348, 399], "unalia": 297, "list_opt": 297, "uit": 297, "retval": [297, 353, 463], "ecosystem": 299, "tackl": [299, 462], "brought": [299, 465, 483], "3154": [299, 477, 483], "574": [299, 382, 481, 483], "conceiv": [299, 358], "highest_protocol": [299, 465], "default_protocol": [299, 330, 472, 483], "fix_import": [299, 471], "buffer_callback": 299, "therein": 299, "pickleerror": 299, "picklingerror": 299, "unpicklingerror": [299, 483], "picklebuff": [299, 483], "persistent_id": [299, 483], "persistent_load": [299, 483], "reducer_overrid": [299, 481, 483], "superflu": [299, 337, 340, 483], "referenti": [299, 483], "elig": [299, 430, 475], "__getstate__": [299, 389, 465, 473, 483], "picklestr": [299, 300], "worthwhil": [299, 467, 476], "__setstate__": [299, 389, 465, 481, 483], "__getnewargs_ex__": [299, 483], "list_of_item": 299, "sixth": [299, 464, 481], "memorecord": 299, "dbpickler": 299, "dbunpickl": 299, "type_tag": 299, "key_id": 299, "fight": [299, 475], "italian": [299, 384], "disturb": [299, 483], "reduce_someclass": 299, "mypickl": 299, "textread": 299, "endswith": [299, 344, 399, 462, 465, 467, 468, 478, 483], "new_read": 299, "myclass": [299, 428, 440], "my_attribut": 299, "unpickled_class": 299, "massiv": [299, 466, 467, 478, 483], "eschew": 299, "reconstructor": 299, "zerocopybytearray": 299, "_reconstruct": 299, "unseri": [299, 475], "new_b": 299, "nsystem": 299, "ntr": 299, "inoffens": 299, "safe_builtin": 299, "restrictedunpickl": 299, "restricted_load": 299, "cbuiltin": [299, 471], "neval": 299, "4j": [299, 427, 435, 442, 468], "binint1": 300, "tuple2": 300, "binput": [300, 483], "indentlevel": 300, "genop": 300, "opcodeinfo": 300, "pipefil": 301, "moduleinfo": [302, 479], "module_find": 302, "ispkg": 302, "extend_path": 302, "pth": [302, 334, 352, 354, 455, 462, 479, 483], "find_load": [302, 423, 432, 472, 473, 474, 476, 477, 480, 483], "get_import": 302, "path_item": 302, "get_load": [302, 474, 483], "module_or_nam": 302, "iter_import": [302, 476], "iter_modul": [302, 476, 479, 483], "walk_packag": [302, 476, 479, 480, 483], "12915": [302, 483], "pyramid": 302, "is_64bit": 303, "system_alia": 303, "mac_ver": [303, 483], "amdk6": 303, "python_build": [303, 483], "buildno": 303, "builddat": [303, 483], "python_compil": 303, "python_branch": [303, 483], "scm": 303, "python_implement": 303, "python_revis": [303, 483], "python_vers": 303, "python_version_tupl": 303, "dega": 303, "java_v": 303, "vminfo": 303, "osinfo": 303, "vm_name": 303, "vm_releas": 303, "vm_vendor": 303, "os_nam": 303, "os_vers": 303, "os_arch": 303, "win32_ver": [303, 483], "csd": 303, "uniprocessor": 303, "win32_edit": [303, 483], "enterpris": [303, 483], "iotuap": 303, "serverstandard": 303, "nanoserv": 303, "win32_is_iot": [303, 483], "iot": [303, 483], "versioninfo": 303, "dev_stag": 303, "non_release_vers": 303, "libc_ver": [303, 483], "16384": 303, "freedesktop_os_releas": [303, 472, 483], "freedesktop": [303, 472, 476, 483], "pretty_nam": 303, "id_lik": 303, "version_id": 303, "variant_id": 303, "get_like_distro": 303, "ios": 304, "nskeyedarchiv": [304, 481], "nskeyedunarchiv": 304, "fmt_xml": [304, 477], "fmt_binari": [304, 477], "invalidfileexcept": [304, 483], "pl": 304, "astr": 304, "doodah": 304, "afloat": 304, "anint": 304, "adict": 304, "anotherstr": 304, "athirdstr": 304, "xe4ssig": 304, "ma": [304, 472, 473, 483], "atruevalu": 304, "afalsevalu": 304, "gunk": 304, "somemoredata": 304, "adat": 304, "1939": 305, "stls": [305, 477], "2595": 305, "pop3_ssl": [305, 475, 482, 483], "obsolesc": 305, "mailserv": 305, "pop3_port": 305, "pop3_ssl_port": 305, "995": [305, 479], "fetchmail": 305, "noncompli": 305, "capa": [305, 477], "2449": 305, "pass_": 305, "apop": 305, "rpop": 305, "mesg_num": 305, "dele": 305, "eudora": 305, "qpop": 305, "disconnect": [305, 335, 337, 340, 405, 481, 483], "rset": [305, 335, 483], "signoff": 305, "howmuch": 305, "uidl": 305, "mesgnum": 305, "6856": [305, 469, 475, 478, 483], "nummessag": 305, "off_t": 306, "getconf": 306, "lfs_cflag": 306, "d_largefile64_sourc": 306, "d_file_offset_bit": 306, "sort_dict": [307, 481, 483], "underscore_numb": [307, 472, 483], "pformat": [307, 477, 483], "isread": 307, "isrecurs": 307, "saferepr": 307, "tup": [307, 384, 386], "dead": [307, 402, 440, 441, 456, 465, 470, 475, 483], "sampleproject": 307, "project_info": 307, "author_email": [307, 483], "pypa": [307, 399], "googlegroup": 307, "bugtrack_url": 307, "osi": 307, "restructur": [307, 462, 463, 468, 483], "webpag": 307, "description_content_typ": 307, "docs_url": 307, "download_url": [307, 467], "last_day": 307, "last_month": 307, "last_week": 307, "home_pag": 307, "maintainer_email": [307, 483], "package_url": 307, "project_url": 307, "homepag": 307, "release_url": 307, "requires_dist": 307, "lsprof": 308, "rosen": 308, "ted": 308, "czotter": 308, "ncall": [308, 483], "tottim": 308, "percal": 308, "cumtim": [308, 483], "759": 308, "937": 308, "598": 308, "_code": 308, "435": [308, 477], "_parse_sub": 308, "induc": [308, 425], "subfunct": [308, 476], "restat": 308, "output_fil": 308, "sort_ord": 308, "sort_stat": 308, "sortkey": 308, "strip_dir": 308, "print_stat": 308, "cull": 308, "print_cal": 308, "print_calle": 308, "timeunit": 308, "subcal": 308, "pr": [308, 462, 483], "sortbi": 308, "create_stat": 308, "dump_stat": 308, "coalesc": 308, "printout": [308, 483], "pcall": 308, "nfl": 308, "reverse_ord": 308, "percentag": [308, 345, 446, 468, 483], "get_stats_profil": 308, "statsprofil": [308, 483], "functionprofil": [308, 483], "tick": [308, 322, 366], "lag": 308, "calibr": 308, "probabilist": 308, "god": 308, "alarm": [308, 333, 477, 483], "8ghz": 308, "i5": 308, "process_tim": [308, 366, 367, 476, 481, 483], "04e": 308, "your_computed_bia": 308, "your_time_func": 308, "lone": [308, 335, 430, 483], "cleanest": 308, "your_integer_time_func": 308, "_lsprof": [308, 483], "perf_count": [308, 366, 367, 476, 481, 483], "thorough": [309, 337, 344, 475, 483], "master_read": 309, "stdin_read": 309, "baffl": 309, "pseudotermin": 309, "typescript": 309, "use_python": 309, "pw_name": 310, "pw_passwd": 310, "pw_uid": [310, 348], "pw_gid": 310, "pw_geco": 310, "pw_dir": 310, "pw_shell": 310, "getpwal": 310, "pycompileerror": [311, 483], "dfile": 311, "dorais": 311, "checked_hash": 311, "unchecked_hash": 311, "filen": 311, "readmodul": [312, 472, 483], "readmodule_ex": [312, 472, 483], "pagin": 313, "pager": [313, 483], "pythondoc": [313, 483], "pyexpat": [314, 409, 426, 456, 462, 465, 467, 468, 469, 483], "unauthent": [314, 411, 412, 413, 414, 419, 420, 483], "xmlparsertyp": 314, "parsercr": 314, "errorstr": 314, "namespace_separ": 314, "repertoir": [314, 335, 375, 468], "startelementhandl": 314, "endelementhandl": 314, "xmlns": [314, 395, 413, 469, 483], "elem1": [314, 467], "elem2": [314, 467], "isfin": 314, "parsefil": 314, "setbas": 314, "externalentityrefhandl": 314, "notationdeclhandl": 314, "unparsedentitydeclhandl": 314, "getbas": 314, "getinputcontext": 314, "externalentityparsercr": 314, "ordered_attribut": 314, "specified_attribut": [314, 483], "setparamentitypars": 314, "xml_param_entity_parsing_nev": 314, "xml_param_entity_parsing_unless_standalon": 314, "xml_param_entity_parsing_alway": 314, "useforeigndtd": 314, "startdoctypedeclhandl": 314, "enddoctypedeclhandl": 314, "xml_error_cant_change_feature_once_pars": 314, "setreparsedeferralen": [314, 413, 483], "deferr": [314, 413, 483], "responsibl": 314, "getreparsedeferralen": [314, 483], "buffer_text": [314, 465], "characterdatahandl": 314, "buffer_us": 314, "errorbyteindex": 314, "errorcolumnnumb": 314, "errorlinenumb": 314, "currentbyteindex": 314, "currentcolumnnumb": 314, "currentlinenumb": 314, "handlernam": 314, "xmldeclhandl": 314, "doctypenam": 314, "systemid": [314, 410, 415], "publicid": [314, 410, 415], "has_internal_subset": 314, "elementdeclhandl": 314, "attlistdeclhandl": 314, "elnam": 314, "attnam": 314, "idref": 314, "processinginstructionhandl": 314, "startcdatasectionhandl": 314, "endcdatasectionhandl": 314, "entitynam": 314, "notationnam": 314, "ndata": [314, 415], "entitydeclhandl": 314, "is_parameter_ent": 314, "startnamespacedeclhandl": 314, "endnamespacedeclhandl": 314, "commenthandl": 314, "defaulthandl": 314, "defaulthandlerexpand": 314, "notstandalonehandl": 314, "xml_error_not_standalon": 314, "xml_error_external_entity_handl": 314, "some_xml_docu": 314, "start_el": [314, 412], "end_el": [314, 412], "char_data": 314, "child1": [314, 389], "child2": [314, 389], "xml_ctype_ani": 314, "xml_ctype_choic": 314, "xml_ctype_empti": 314, "xml_ctype_mix": 314, "xml_ctype_nam": 314, "xml_ctype_seq": 314, "xml_cquant_non": 314, "xml_cquant_opt": 314, "xml_cquant_plus": 314, "xml_cquant_rep": 314, "xml_error_": 314, "constant_nam": 314, "xml_error_async_ent": 314, "xml_error_attribute_external_entity_ref": 314, "xml_error_bad_char_ref": 314, "xml_error_binary_entity_ref": 314, "xml_error_duplicate_attribut": 314, "xml_error_incorrect_encod": 314, "xml_error_invalid_token": 314, "xml_error_junk_after_doc_el": 314, "xml_error_misplaced_xml_pi": 314, "xml_error_no_el": 314, "xml_error_no_memori": 314, "xml_error_param_entity_ref": 314, "xml_error_partial_char": 314, "xml_error_recursive_entity_ref": 314, "xml_error_syntax": 314, "xml_error_tag_mismatch": 314, "xml_error_unclosed_token": 314, "xml_error_undefined_ent": 314, "xml_error_unknown_encod": 314, "xml_error_unclosed_cdata_sect": 314, "xml_error_unexpected_st": 314, "xml_error_entity_declared_in_p": 314, "xml_error_feature_requires_xml_dtd": 314, "xml_error_unbound_prefix": 314, "undeclar": 314, "xml_error_undeclaring_prefix": 314, "xml_error_incomplete_p": 314, "xml_error_xml_decl": 314, "xml_error_text_decl": 314, "xml_error_publicid": 314, "xml_error_suspend": 314, "xml_error_not_suspend": 314, "xml_error_abort": 314, "xml_error_finish": 314, "xml_error_suspend_p": 314, "xml_error_reserved_prefix_xml": 314, "xml_error_reserved_prefix_xmln": 314, "xml_error_reserved_namespace_uri": 314, "xml_error_invalid_argu": 314, "xml_error_no_buff": 314, "xml_error_amplification_limit_breach": 314, "amplif": 314, "breach": [314, 426], "xml11": [314, 411, 413], "20060816": [314, 411, 413], "encodingdecl": [314, 411, 413], "decodestr": [317, 482, 483], "encodestr": [317, 482, 483], "mise": 318, "19937": 318, "matsumoto": [318, 426], "nishimura": [318, 426], "equidistribut": 318, "vol": 318, "randbyt": [318, 482, 483], "token_byt": [318, 326], "randint": [318, 475, 483], "getrandbit": [318, 466, 477, 483], "cum_weight": 318, "2080": 318, "10000000": 318, "binomialvari": [318, 343, 474, 483], "binomi": [318, 343, 483], "triangular": [318, 468], "betavari": 318, "expovari": [318, 474, 483], "lambd": [318, 474, 483], "gammavari": [318, 483], "gauss": [318, 483], "mu": [318, 343, 481, 483], "sigma": [318, 343, 481], "lognormvari": 318, "vonmisesvari": 318, "kappa": 318, "paretovari": [318, 483], "pareto": 318, "weibullvari": 318, "weibul": 318, "seeder": 318, "37444887175646646": 318, "1800146073117523": 318, "148957571865031": 318, "roulett": 318, "spin": [318, 483], "jack": [318, 319, 344, 397, 426, 442, 446, 464, 465, 467, 471, 483], "king": [318, 319, 462, 481, 483], "coin": 318, "settl": [318, 468], "10_000": [318, 343], "4169": 318, "quartil": [318, 343, 481], "2_500": 318, "7_500": 318, "7958": 318, "thoughtco": 318, "3126155": 318, "fmean": [318, 343, 481, 483], "73": [318, 382, 452, 466, 481, 482], "denni": [318, 472, 473, 474, 482, 483], "shasha": 318, "manda": 318, "wilson": [318, 465, 466, 478, 482, 483], "drug": 318, "placebo": 318, "observed_diff": 318, "new_diff": 318, "reshuffl": 318, "4f": 318, "hypothesi": [318, 483], "quantil": [318, 343, 481, 483], "average_arrival_interv": 318, "average_service_tim": 318, "stdev_service_tim": 318, "num_serv": 318, "arrival_tim": 318, "1_000_000": [318, 479, 483], "next_server_avail": 318, "service_dur": 318, "service_complet": 318, "jake": [318, 469, 471, 481, 483], "vanderpla": 318, "econom": 318, "norvig": 318, "random_product": 318, "random_permut": 318, "random_combin": 318, "random_combination_with_replac": 318, "05954861408025609": 318, "fullrandom": 318, "0x10_0000_0000_0000": 318, "87925541791544": 318, "allen": [318, 341, 475, 483], "downey": 318, "frie09": 319, "gentler": 319, "nfoo2": 319, "possess": [319, 344, 405, 473, 483], "aaaab": 319, "aaab": 319, "aaaaaa": 319, "ailmsux": 319, "imsx": 319, "x7f": 319, "isaac": 319, "asimov": 319, "lookbehind": [319, 478, 483], "theth": 319, "atlas": 319, "athen": 319, "attorney": 319, "typographi": 319, "noflag": [319, 483], "nicer": [319, 483], "fullmatch": [319, 477, 483], "0a3b9": 319, "foot": [319, 343, 451], "fell": [319, 441, 451, 463, 464, 465], "z_": [319, 435], "z_0": 319, "npy_": 319, "npy_myfunc": 319, "dashrepl": 319, "matchobj": 319, "pro": 319, "gram": [319, 431], "sand": 319, "unmatch": [319, 394, 478, 483], "new_str": 319, "number_of_subs_mad": 319, "legal_char": 319, "ascii_lowercas": [319, 345, 464], "abcdefghijklmnopqrstuvwxyz0123456789": 319, "digits_r": 319, "purg": 319, "endpo": 319, "ogr": 319, "doggi": 319, "og": [319, 362, 483], "groupindex": [319, 483], "groupn": 319, "physicist": 319, "reynold": 319, "a1b2c3": 319, "1632": 319, "cba": 319, "remove_thi": 319, "toni": [319, 468, 483], "tiremove_thisg": 319, "tiger": 319, "lastindex": 319, "lastgroup": 319, "displaymatch": 319, "poker": [319, 384], "9tjqk": 319, "akt5q": 319, "akt5": 319, "akt": 319, "727ak": 319, "717ak": 319, "7s": 319, "717": 319, "718ak": 319, "354aa": 319, "5c": 319, "ee": [319, 344, 471], "nb": [319, 470], "nx": 319, "ross": [319, 469, 471, 476, 482, 483], "mcfluff": 319, "834": 319, "345": [319, 466, 471], "elm": 319, "ronald": [319, 467, 468, 469, 475, 477, 481, 482], "heathmor": 319, "892": 319, "3428": 319, "finley": 319, "avenu": [319, 426, 464], "frank": [319, 483], "burger": 319, "925": 319, "541": 319, "7625": 319, "662": 319, "dogwood": 319, "heather": 319, "albrecht": 319, "548": 319, "326": 319, "4584": 319, "919": 319, "park": 319, "telephon": 319, "hous": [319, 479], "inner_word": 319, "professor": 319, "abdolmalek": 319, "poefsrosr": 319, "aealmlobdk": 319, "pslaee": 319, "reorpt": 319, "abnsec": 319, "plmrptoy": 319, "pofsros": 319, "aodlambelk": 319, "plase": 319, "reoprt": 319, "yuor": 319, "asnebc": 319, "potlmrpi": 319, "disguis": [319, 428], "polic": 319, "ly": 319, "02d": 319, "scanner": [319, 357, 378, 477, 483], "gosub": 319, "token_specif": 319, "tok_regex": 319, "line_start": 319, "inputrc": [320, 483], "libedit": [320, 483], "editlin": [320, 456, 483], "editrc": [320, 483], "rl_complet": 320, "parse_and_bind": [320, 323, 483], "rl_parse_and_bind": 320, "read_init_fil": [320, 323, 483], "rl_read_init_fil": 320, "get_line_buff": [320, 323], "rl_line_buff": 320, "insert_text": [320, 323], "rl_insert_text": 320, "rl_redisplay": 320, "read_history_fil": 320, "read_histori": 320, "write_history_fil": 320, "write_histori": [320, 483], "append_history_fil": [320, 478, 483], "nelement": 320, "append_histori": 320, "get_history_length": [320, 483], "set_history_length": 320, "history_truncate_fil": 320, "clear_histori": 320, "get_current_history_length": [320, 465], "get_history_item": [320, 465], "history_get": 320, "remove_history_item": 320, "remove_histori": 320, "replace_history_item": 320, "replace_history_entri": 320, "add_histori": 320, "set_auto_histori": [320, 479, 483], "set_startup_hook": 320, "rl_startup_hook": 320, "set_pre_input_hook": 320, "rl_pre_input_hook": 320, "set_complet": [320, 323], "entry_func": 320, "rl_completion_match": 320, "rl_attempted_completion_funct": 320, "get_complet": 320, "get_completion_typ": 320, "rl_completion_typ": 320, "get_begidx": [320, 483], "get_endidx": [320, 483], "libreadlin": [320, 483], "set_completer_delim": [320, 483], "get_completer_delim": 320, "rl_completer_word_break_charact": 320, "set_completion_display_matches_hook": 320, "rl_completion_display_matches_hook": 320, "longest_match_length": 320, "python_histori": [320, 334, 447], "histfil": 320, "unruli": 320, "h_len": 320, "prev_h_len": 320, "new_h_len": 320, "historyconsol": 320, "init_histori": 320, "save_histori": 320, "maxtupl": 321, "maxlist": 321, "maxarray": 321, "maxdict": 321, "maxset": 321, "maxfrozenset": 321, "maxdequ": 321, "maxstr": 321, "maxlong": 321, "maxoth": 321, "arepr": 321, "repr1": 321, "repr_typ": 321, "subobj": 321, "myrepr": 321, "repr_textiowrapp": 321, "getrlimit": [322, 483], "rlim_infin": 322, "rlimit_nofil": 322, "cap_sys_resourc": 322, "rlimit_cor": [322, 362], "rlimit_cpu": [322, 483], "sigxcpu": 322, "rlimit_fs": [322, 483], "rlimit_data": 322, "rlimit_stack": 322, "rlimit_rss": 322, "rlimit_nproc": 322, "rlimit_ofil": 322, "rlimit_memlock": 322, "rlimit_vmem": 322, "rlimit_a": 322, "rlimit_msgqueu": [322, 477], "rlimit_nic": [322, 477], "rlim_cur": 322, "rlimit_rtprio": [322, 477], "rlimit_rttim": [322, 477], "spend": [322, 462, 483], "rlimit_sigpend": [322, 477], "rlimit_sbs": [322, 477], "mbuf": 322, "rlimit_swap": [322, 477], "overcommit": 322, "sysctl": [322, 483], "rlimit_npt": [322, 477], "rlimit_kqueu": [322, 483], "rusage_": 322, "rusage_self": 322, "ru_utim": 322, "ru_stim": 322, "ru_maxrss": 322, "ru_ixrss": 322, "ru_idrss": 322, "ru_isrss": 322, "ru_minflt": 322, "ru_majflt": 322, "ru_nswap": 322, "ru_inblock": 322, "ru_oublock": 322, "ru_msgsnd": 322, "ru_msgrcv": 322, "ru_nsign": 322, "ru_nvcsw": 322, "voluntari": 322, "ru_nivcsw": 322, "involuntari": 322, "getpages": 322, "rusage_children": 322, "rusage_both": 322, "rusage_thread": 322, "mod_nam": 324, "init_glob": 324, "run_nam": 324, "alter_si": 324, "run_path": [324, 455, 469, 483], "path_nam": 324, "snow": [324, 473, 474, 476, 477, 478, 479, 480, 481], "timefunc": [325, 476], "delayfunc": 325, "print_tim": 325, "print_some_tim": 325, "enterab": [325, 476], "1_650_000_000": 325, "1652342830": 325, "3640375": 325, "3642538": 325, "3643398": 325, "1652342835": 325, "3694863": 325, "3696074": 325, "1652342840": 325, "369612": 325, "3697174": 325, "soonest": [325, 476], "randbelow": [326, 483], "randbit": 326, "xebr": 326, "x17d": 326, "xae": 326, "xd4": 326, "xe3": [326, 468], "xb6": 326, "xe2": [326, 468], "xebp1": 326, "x8b": 326, "token_hex": [326, 483], "f9bf78b9a18ce6d46a0cd2b0b86df9da": 326, "token_urlsaf": 326, "drmhze6epcv0fn_81bj": 326, "token_": 326, "xkcd": 326, "passphras": 326, "mktemp": [327, 360, 395, 483], "devpol": [328, 329, 476, 477, 478, 483], "epoll_create1": 328, "epoll_cloexec": 328, "kq_filter_read": 328, "kq_ev_add": 328, "fflag": 328, "udata": 328, "rlist": 328, "wlist": 328, "xlist": 328, "parameterless": 328, "winsock": [328, 337, 483], "pipe_buf": [328, 475, 483], "eventmask": [328, 468], "pollin": 328, "pollpri": 328, "pollout": 328, "epollin": 328, "epollout": 328, "epollpri": 328, "urgent": 328, "epollerr": 328, "assoc": 328, "epollhup": 328, "epollet": 328, "epolloneshot": 328, "epollexclus": [328, 483], "epollrdhup": [328, 483], "epollrdnorm": 328, "epollrdband": 328, "epollwrnorm": 328, "epollwrband": 328, "epollmsg": 328, "fromfd": [328, 337], "maxev": 328, "scalabl": [328, 462], "fds": [328, 337, 483], "pollerr": 328, "pollhup": 328, "hung": 328, "pollrdhup": [328, 483], "pollnval": 328, "changelist": 328, "max_ev": 328, "eventlist": 328, "sektion": 328, "kq_filter_writ": 328, "kq_filter_aio": 328, "aio": 328, "kq_filter_vnod": 328, "kq_filter_proc": 328, "kq_filter_netdev": 328, "kq_filter_sign": 328, "kq_filter_tim": 328, "kq_ev_delet": 328, "kq_ev_en": 328, "permitscontrol": 328, "kq_ev_dis": 328, "disablesev": 328, "kq_ev_oneshot": 328, "kq_ev_clear": 328, "kq_ev_sysflag": 328, "kq_ev_flag1": 328, "kq_ev_eof": 328, "kq_ev_error": 328, "kq_note_lowat": 328, "kq_note_delet": 328, "kq_note_writ": 328, "kq_note_extend": 328, "kq_note_attrib": 328, "kq_note_link": 328, "kq_note_renam": 328, "kq_note_revok": 328, "revok": 328, "kq_note_exit": 328, "kq_note_fork": 328, "kq_note_exec": 328, "kq_note_pctrlmask": 328, "kq_note_pdatamask": 328, "kq_note_track": 328, "kq_note_child": 328, "note_track": 328, "kq_note_trackerr": 328, "kq_note_linkup": 328, "kq_note_linkdown": 328, "kq_note_linkinv": 328, "baseselector": [329, 483], "epollselector": [329, 480, 483], "defaultselector": [329, 333, 483], "devpollselector": [329, 478, 480], "event_read": [329, 333], "event_writ": 329, "selectorkey": 329, "get_key": [329, 483], "get_map": 329, "sel": [329, 333], "shelf": [330, 344, 475, 477], "writeback": 330, "handier": 330, "keyencod": 330, "bsddbshelf": [330, 344], "set_loc": 330, "bsddb": [330, 465, 468, 469], "pybsddb": [330, 465, 468, 469, 470], "hashopen": 330, "btopen": 330, "rnopen": 330, "dbfilenameshelf": [330, 344], "klist": 330, "minilanguag": 331, "split_command": 331, "boom": [331, 389, 390], "plug": [331, 483], "remote_command": 331, "instream": 331, "punctuation_char": [331, 479, 483], "wordchar": 331, "get_token": 331, "push_token": 331, "read_token": 331, "pushback": 331, "sourcehook": 331, "push_sourc": 331, "pop_sourc": 331, "newstream": 331, "newfil": 331, "lexer": 331, "error_lead": 331, "whitespace_split": 331, "escapedquot": 331, "donotsepar": 331, "fsrc": 332, "fdst": 332, "uncontrol": 332, "samefileerror": [332, 477, 483], "ignore_pattern": [332, 468], "copy_funct": [332, 475, 478, 483], "ignore_dangling_symlink": [332, 475, 483], "dirs_exist_ok": [332, 481, 483], "onexc": [332, 474, 483], "suscept": [332, 461, 483], "avoids_symlink_attack": 332, "excinfo": 332, "mv": [332, 476, 483], "disk_usag": [332, 476, 483], "needcurrentdirectoryforexepathw": [332, 474], "nodefaultcurrentdirectoryinexepath": 332, "python33": 332, "srcname": 332, "33671": [332, 481, 483], "userspac": [332, 476, 481], "outfd": [332, 481], "infd": [332, 481], "fcopyfil": [332, 483], "_logpath": 332, "reattempt": 332, "remove_readon": 332, "xztar": [332, 478, 483], "dry_run": [332, 362, 483], "gztar": [332, 475, 479, 483], "bztar": [332, 475], "register_archive_format": [332, 475], "pax": [332, 358, 468, 481, 483], "get_archive_format": [332, 475], "extra_arg": [332, 475], "supports_root_dir": 332, "unregister_archive_format": 332, "register_unpack_format": 332, "get_unpack_format": 332, "unregister_unpack_format": 332, "archive_nam": 332, "myarchiv": [332, 452, 475], "tarek": [332, 355, 468, 469, 475, 478, 483], "tzvf": 332, "drwx": 332, "609": 332, "authorized_key": 332, "id_dsa": 332, "1675": 332, "id_rsa": 332, "37192": 332, "known_host": 332, "please_add": 332, "do_not_add": 332, "my_arch": 332, "uninterrupt": 333, "air": 333, "sigmask": 333, "sig_block": 333, "sig_unblock": 333, "sig_setmask": 333, "getsign": [333, 483], "pthread_sigmask": [333, 476], "sigpend": [333, 476], "sigwait": [333, 476], "ctrl_": 333, "sigprocmask": 333, "sigquit": [333, 348], "sigalrm": [333, 483], "sigbreak": 333, "bus": [333, 405], "sigcld": 333, "sighup": [333, 483], "hangup": 333, "death": [333, 476], "sigstkflt": [333, 483], "coprocessor": 333, "sigusr1": 333, "sigusr2": 333, "nsig": [333, 483], "valid_sign": [333, 483], "itimer_r": 333, "itimer_virtu": 333, "sigvtalrm": 333, "itimer_prof": 333, "sigprof": 333, "itimererror": 333, "setitim": [333, 468, 483], "getitim": [333, 468], "strsignal": [333, 483], "sigwaitinfo": [333, 476, 478, 483], "sigtimedwait": [333, 476, 478, 483], "pidfd_send_sign": [333, 482, 483], "siginfo": 333, "sigstop": 333, "warn_on_full_buff": [333, 480, 483], "wakeup": [333, 476, 480, 483], "siginterrupt": [333, 468, 476, 483], "sigset": [333, 483], "si_errno": 333, "si_band": [333, 483], "ttys0": 333, "spamcontext": 333, "exc_val": [333, 344], "interrupt_read": 333, "interrupt_writ": 333, "subsubdirectori": 334, "bletch": 334, "enable_user_sit": 334, "__interactivehook__": [334, 352, 450, 455, 477], "user_sit": [334, 355], "getusersitepackag": [334, 438, 469, 475], "appdata": [334, 461, 468], "user_bas": [334, 355, 469], "getuserbas": [334, 469, 475], "pythonuserbas": [334, 455, 468], "addsitedir": 334, "sitedir": 334, "known_path": 334, "getsitepackag": [334, 469, 475], "esmtp": 335, "821": 335, "1869": 335, "local_hostnam": 335, "fqdn": 335, "helo": 335, "ehlo": [335, 476], "getfqdn": [335, 337, 483], "smtpconnecterror": 335, "smtp_ssl": [335, 468, 476, 482, 483], "lmtp": [335, 468, 476, 482, 483], "lmtp_port": 335, "smtpexcept": [335, 477], "smtpserverdisconnect": [335, 483], "smtpresponseexcept": 335, "smtp_code": 335, "smtp_error": 335, "smtpsenderrefus": 335, "smtprecipientsrefus": 335, "smtpdataerror": 335, "smtpheloerror": 335, "smtpnotsupportederror": [335, 483], "smtpauthenticationerror": 335, "docmd": 335, "helo_resp": 335, "has_extn": 335, "ehlo_resp": 335, "does_esmtp": 335, "esmtp_featur": 335, "ehlo_or_helo_if_need": 335, "vrfi": 335, "foil": 335, "spammer": 335, "initial_response_ok": [335, 483], "4954": [335, 483], "auth_cram_md5": 335, "auth_plain": 335, "auth_login": [335, 483], "from_addr": [335, 475], "to_addr": [335, 475], "mail_opt": [335, 478, 483], "rcpt_option": 335, "8bitmim": [335, 478, 483], "dsn": 335, "rcpt": 335, "smtpnotsupport": 335, "hcom": 336, "sndr": 336, "sndt": 336, "voc": 336, "8svx": 336, "sb": [336, 359], "ub": 336, "ul": [336, 411, 464], "sampling_r": 336, "bits_per_sampl": 336, "whathdr": [336, 478, 483], "sndtool": 336, "lab": [336, 426, 440, 462, 464, 465], "waveform": [336, 406], "transliter": 337, "dare": 337, "inaddr_ani": 337, "inaddr_broadcast": 337, "flowinfo": 337, "sin6_flowinfo": 337, "sin6_scope_id": 337, "sockaddr_in6": 337, "af_netlink": [337, 467], "tipc": [337, 468], "af_tipc": 337, "addr_typ": 337, "v2": [337, 347, 426, 467, 468, 483], "tipc_addr_nameseq": 337, "tipc_addr_nam": 337, "tipc_addr_id": 337, "tipc_zone_scop": 337, "tipc_cluster_scop": 337, "tipc_node_scop": 337, "af_can": [337, 483], "can0": 337, "can_isotp": [337, 483], "rx_addr": 337, "tx_addr": 337, "can_j1939": [337, 482, 483], "pgn": 337, "ecu": 337, "sysproto_control": 337, "pf_system": [337, 476], "af_bluetooth": [337, 483], "btproto_l2cap": 337, "bdaddr": 337, "psm": 337, "bluetooth": [337, 483], "btproto_rfcomm": 337, "btproto_hci": 337, "device_id": 337, "btproto_sco": 337, "af_alg": [337, 479, 483], "feat": 337, "aead": [337, 341], "skcipher": 337, "rng": 337, "aes": [337, 341, 465], "drbg_nopr_ctr_aes256": 337, "32bit": [337, 464, 483], "af_vsock": [337, 480, 483], "vsock": 337, "af_packet": [337, 483], "ifnam": 337, "pkttype": 337, "hatyp": 337, "ethernet": 337, "eth_p_al": [337, 483], "ethertype_": [337, 483], "packet_host": 337, "packet_broadcast": 337, "packet_multicast": 337, "packet_otherhost": 337, "promiscu": 337, "packet_outgo": 337, "arp": [337, 483], "af_qipcrtr": [337, 483], "qualcomm": [337, 483], "ipproto_udplit": [337, 483], "setsockopt": [337, 341, 469, 479], "udplite_send_cscov": [337, 483], "udplite_recv_cscov": [337, 483], "af_hyperv": 337, "hyper": [337, 483], "vm_id": 337, "service_id": 337, "vmid": 337, "hv_guid_zero": 337, "hv_guid_broadcast": 337, "hv_guid_wildcard": 337, "hv_guid_children": 337, "hv_guid_loopback": 337, "hv_guid_par": 337, "v6": 337, "nondeterminist": 337, "settimeout": [337, 341, 395, 465, 483], "herror": 337, "h_errno": 337, "gethostbyname_ex": [337, 483], "hstrerror": 337, "gaierror": [337, 483], "gai_strerror": 337, "eai_": 337, "af_": [337, 477], "sock_": [337, 477, 483], "addressfamili": 337, "socketkind": 337, "sock_raw": 337, "sock_rdm": 337, "sock_seqpacket": 337, "sock_cloexec": [337, 480, 483], "sock_nonblock": [337, 480, 483], "so_": 337, "somaxconn": [337, 478], "msg_": 337, "sol_": 337, "scm_": 337, "ipproto_": 337, "ipport_": 337, "inaddr_": 337, "ip_": [337, 483], "ipv6_": 337, "ai_": 337, "ni_": 337, "tcp_": [337, 483], "so_domain": [337, 479], "so_protocol": [337, 479], "so_peersec": [337, 479], "so_passsec": [337, 479], "tcp_user_timeout": [337, 479, 480, 483], "tcp_congest": [337, 479, 480, 483], "tcp_fastopen": [337, 483], "tcp_keepcnt": [337, 483], "tcp_notsent_lowat": [337, 480, 483], "tcp_keepidl": [337, 483], "tcp_keepintvl": [337, 483], "ip_recvto": [337, 472, 483], "tcp_keepal": [337, 483], "tcp_connection_info": [337, 483], "tcp_info": 337, "so_rtabl": [337, 483], "so_user_cooki": [337, 483], "so_mark": 337, "tcp_md5sig": [337, 483], "tcp_thin_linear_timeout": [337, 483], "tcp_thin_dupack": [337, 483], "tcp_repair": [337, 483], "tcp_repair_queu": [337, 483], "tcp_queue_seq": [337, 483], "tcp_repair_opt": [337, 483], "tcp_timestamp": [337, 483], "tcp_cc_info": [337, 483], "tcp_save_syn": [337, 483], "tcp_saved_syn": [337, 483], "tcp_repair_window": [337, 483], "tcp_fastopen_connect": [337, 483], "tcp_ulp": [337, 483], "tcp_md5sig_ext": [337, 483], "tcp_fastopen_key": [337, 483], "tcp_fastopen_no_cooki": [337, 483], "tcp_zerocopy_rec": [337, 483], "tcp_inq": [337, 483], "tcp_tx_delay": [337, 483], "ip_pktinfo": [337, 483], "ip_unblock_sourc": 337, "ip_block_sourc": 337, "ip_add_source_membership": 337, "ip_drop_source_membership": 337, "pf_can": [337, 476], "sol_can_": 337, "can_": 337, "can_bcm": [337, 477], "can_bcm_": 337, "bcm": [337, 483], "can_bcm_can_fd_fram": 337, "can_raw_fd_fram": [337, 478, 483], "can_raw": 337, "can_raw_join_filt": [337, 482, 483], "15765": 337, "sae": 337, "j1939": [337, 483], "af_divert": 337, "pf_divert": 337, "divert": [337, 483], "pf_packet": 337, "packet_": 337, "af_rd": 337, "pf_rds": [337, 476], "sol_rd": 337, "rds_": 337, "sio_rcval": 337, "sio_keepalive_v": 337, "sio_loopback_fast_path": [337, 479, 483], "rcvall_": 337, "wsaioctl": [337, 468], "tipc_": 337, "sol_alg": [337, 479], "alg_": [337, 479], "ioctl_vm_sockets_get_local_cid": 337, "vmaddr": 337, "so_vm": 337, "af_link": [337, 477], "has_ipv6": 337, "bdaddr_ani": 337, "bdaddr_loc": 337, "hci_filt": 337, "hci_time_stamp": 337, "hci_data_dir": 337, "scm_creds2": [337, 483], "local_cr": [337, 483], "local_creds_persist": [337, 483], "so_passcr": 337, "so_incoming_cpu": [337, 483], "hv_protocol_raw": 337, "hvsocket_connect_timeout": 337, "hvsocket_connect_timeout_max": 337, "hvsocket_connected_suspend": 337, "hvsocket_address_flag_passthru": 337, "ethertype_arp": 337, "ethertype_ip": 337, "ethertype_ipv6": 337, "ethertype_vlan": 337, "802": 337, "overrul": 337, "ipproto_mptcp": [337, 472, 483], "global_default": 337, "getdefaulttimeout": 337, "dualstack_ipv6": 337, "has_dualstack_ipv6": [337, 481, 483], "fromshar": [337, 480], "sockettyp": 337, "ai_numerichost": 337, "canonnam": 337, "ai_canonnam": 337, "ipproto_tcp": 337, "2606": 337, "2800": 337, "220": [337, 341, 441], "248": 337, "1893": 337, "25c8": 337, "1946": 337, "93": [337, 481, 482], "184": 337, "216": [337, 446, 449], "aliaslist": 337, "ipaddrlist": 337, "getprotobynam": 337, "icmp": 337, "inet_aton": [337, 481, 482, 483], "ip_str": 337, "quad": [337, 464, 483], "in_addr": 337, "inet_ntoa": 337, "packed_ip": 337, "inet_ntop": [337, 477], "address_famili": [337, 338], "in6_addr": 337, "5aef": 337, "2b": [337, 479], "cmsg_len": [337, 483], "recvmsg": [337, 476, 478], "3542": [337, 483], "cmsg_space": [337, 483], "if_nameindex": [337, 481, 483], "fb605b73": 337, "aac2": 337, "49a6": 337, "9a2f": 337, "25416aea0573": 337, "ethernet_32770": 337, "vethernet": 337, "if_nametoindex": [337, 481, 483], "if_nam": 337, "if_indextonam": [337, 481, 483], "if_index": 337, "send_fd": [337, 482, 483], "scm_right": 337, "recv_fd": [337, 482], "maxfd": 337, "optnam": [337, 479], "getblock": [337, 480, 483], "gettimeout": [337, 341], "ancbufs": 337, "ancdata": 337, "msg_flag": 337, "cmsg_level": 337, "cmsg_type": 337, "cmsg_data": 337, "unconnect": [337, 468], "sol_socket": 337, "recvmsg_into": [337, 476], "scatter": [337, 464, 465, 469], "0123456789": [337, 344, 345], "b3": 337, "lamb": [337, 441], "sendmsg_afalg": [337, 479], "iv": 337, "assoclen": 337, "optlen": [337, 479], "optval": 337, "halv": [337, 466, 469], "shut_rd": 337, "shut_wr": 337, "shut_rdwr": [337, 341, 483], "50007": 337, "af": 337, "ipproto_ip": 337, "ip_hdrincl": 337, "rcvall_on": 337, "65565": 337, "rcvall_off": 337, "can_fram": 337, "can_frame_fmt": 337, "ib3x8": 337, "can_frame_s": 337, "build_can_fram": 337, "can_id": 337, "can_dlc": 337, "ljust": [337, 344, 446, 466, 476], "dissect_can_fram": 337, "vcan0": 337, "3bsd": 337, "stuart": 337, "sechrest": 337, "leffler": 337, "supplementari": 337, "3493": 337, "bind_and_activ": [338, 420, 468], "server_bind": [338, 420, 468], "server_activ": [338, 420, 468], "baseserv": [338, 476, 483], "unixstreamserv": [338, 483], "unixdatagramserv": 338, "infrequ": [338, 483], "forkingmixin": [338, 476, 480, 483], "baserequesthandl": 338, "server_clos": [338, 407, 480, 483], "abrupt": [338, 365, 483], "daemon_thread": 338, "autonom": [338, 426], "threadingudpserv": 338, "block_on_clos": [338, 480, 483], "forkingtcpserv": 338, "forkingudpserv": 338, "forkingunixstreamserv": [338, 483], "forkingunixdatagramserv": [338, 483], "threadingunixstreamserv": 338, "threadingunixdatagramserv": 338, "datagramrequesthandl": 338, "deaf": [338, 475], "get_request": 338, "verify_request": [338, 483], "handle_error": [338, 479, 483], "handle_timeout": [338, 468, 469], "poll_interv": 338, "service_act": [338, 476], "request_queue_s": 338, "socket_typ": 338, "finish_request": 338, "mytcphandl": 338, "tcpclient": 338, "myudphandl": 338, "threadedtcprequesthandl": 338, "cur_thread": 338, "threadedtcpserv": 338, "server_thread": 338, "sp_namp": 339, "sp_pwdp": 339, "sp_lstchg": 339, "sp_min": 339, "sp_max": 339, "sp_warn": 339, "sp_inact": 339, "sp_expir": 339, "sp_flag": 339, "getspnam": [339, 479, 483], "getspal": 339, "nonstandard": [340, 456, 467], "postgresql": [340, 467], "gerhard": [340, 464, 467, 468, 469], "ring": [340, 464, 467, 468, 469], "249": [340, 467, 474, 483], "w3school": 340, "sqlite_mast": 340, "executemani": [340, 483], "hollywood": 340, "bowl": 340, "1982": [340, 343, 366], "1983": [340, 343], "brian": [340, 434, 462, 465, 466, 468, 469, 475, 476, 477, 480, 483], "1979": [340, 343], "new_con": 340, "new_cur": 340, "detect_typ": 340, "check_same_thread": 340, "cached_stat": 340, "legacy_transaction_control": 340, "operationalerror": [340, 483], "register_convert": 340, "parse_decltyp": 340, "parse_colnam": [340, 483], "programmingerror": [340, 473, 474, 483], "threadsafeti": [340, 473, 483], "complete_stat": 340, "enable_callback_traceback": 340, "register_adapt": 340, "sqlite_ok": 340, "sqlite_deni": 340, "sqlite_ignor": 340, "authorizer_callback": 340, "set_author": [340, 473, 483], "apilevel": 340, "paramstyl": 340, "qmark": 340, "sqlite_vers": 340, "sqlite_version_info": 340, "sqlite_threadsaf": 340, "pysqlit": [340, 467, 469, 475], "sqlite_dbconfig_defens": 340, "sqlite_dbconfig_dqs_ddl": 340, "sqlite_dbconfig_dqs_dml": 340, "sqlite_dbconfig_enable_fkey": 340, "sqlite_dbconfig_enable_fts3_token": 340, "sqlite_dbconfig_enable_load_extens": 340, "sqlite_dbconfig_enable_qpsg": 340, "sqlite_dbconfig_enable_trigg": 340, "sqlite_dbconfig_enable_view": 340, "sqlite_dbconfig_legacy_alter_t": 340, "sqlite_dbconfig_legacy_file_format": 340, "sqlite_dbconfig_no_ckpt_on_clos": 340, "sqlite_dbconfig_reset_databas": 340, "sqlite_dbconfig_trigger_eqp": 340, "sqlite_dbconfig_trusted_schema": 340, "sqlite_dbconfig_writable_schema": 340, "setconfig": [340, 474, 483], "getconfig": [340, 474, 483], "c3ref": 340, "c_dbconfig_defens": 340, "blobopen": [340, 473, 483], "rowid": 340, "zeroblob": 340, "rollback": [340, 467, 468, 473, 483], "executescript": [340, 483], "sql_script": 340, "create_funct": [340, 483], "notsupportederror": [340, 483], "md5sum": [340, 483], "acbd18db4cc2f85cedef654fccc4a4d8": 340, "create_aggreg": [340, 483], "n_arg": 340, "aggregate_class": 340, "mysum": 340, "create_window_funct": [340, 473, 483], "num_param": 340, "windowfunct": 340, "udfwinfunc": 340, "windowsumint": 340, "sumint": 340, "sum_i": 340, "create_col": [340, 473, 483], "collate_revers": 340, "4th": 340, "5th": 340, "set_progress_handl": [340, 483], "progress_handl": 340, "databaseerror": 340, "set_trace_callback": [340, 476, 483], "trace_callback": 340, "fulltext": [340, 475], "fts3": 340, "ingredi": 340, "broccoli": 340, "stew": 340, "pepper": 340, "chees": [340, 441, 454], "pumpkin": 340, "onion": 340, "garlic": 340, "celeri": 340, "flour": 340, "butter": 340, "iterdump": [340, 483], "getlimit": [340, 473, 483], "1000000000": 340, "sqlite_limit_sql_length": [340, 483], "setlimit": [340, 473, 483], "sqlite_limit_attach": 340, "sqlite_dbconfig": 340, "in_transact": 340, "uncommit": [340, 475], "row_factori": 340, "text_factori": 340, "total_chang": 340, "dml": [340, 483], "row1": 340, "row2": 340, "fetchmani": 340, "arrays": 340, "setinputs": 340, "setoutputs": 340, "lastrowid": [340, 479, 483], "rowcount": [340, 483], "blob_col": 340, "246": [340, 468, 483], "sqlite_errorcod": [340, 473], "sqlite_errornam": [340, 473], "interfaceerror": [340, 473, 483], "dataerror": [340, 483], "integrityerror": 340, "internalerror": 340, "stock": [340, 467, 475, 483], "first_appear": 340, "1957": 340, "__conform__": [340, 483], "adapt_point": 340, "convert_point": 340, "adapt_date_iso": 340, "adapt_datetime_iso": 340, "adapt_datetime_epoch": 340, "convert_d": 340, "convert_datetim": 340, "convert_timestamp": 340, "1984": 340, "varchar": 340, "nosuchdb": 340, "mem1": 340, "con1": 340, "con2": 340, "6378": 340, "namedtuple_factori": 340, "czech": 340, "ddl": [340, 479, 483], "tlsv1": [341, 477, 483], "tsl": 341, "wrap_socket": [341, 468, 469, 472, 474, 475, 480, 483], "644": [341, 472, 474, 483], "ssock": 341, "protocol_tls_cli": [341, 472, 483], "cert": [341, 460, 469, 477, 483], "load_verify_loc": [341, 395, 477, 483], "cabundl": 341, "pem": [341, 460, 477, 483], "protocol_tls_serv": [341, 472, 483], "load_cert_chain": [341, 395, 476], "certchain": 341, "8443": 341, "server_auth": [341, 477], "cafil": [341, 395, 469, 477], "capath": [341, 395, 477], "cadata": [341, 477, 483], "op_no_sslv2": [341, 472, 475, 483], "op_no_sslv3": [341, 472, 483], "rc4": [341, 483], "verify_mod": [341, 483], "cert_requir": [341, 483], "load_default_cert": [341, 477, 483], "keylog_filenam": 341, "sslkeylogfil": [341, 483], "ssl3": 341, "client_auth": [341, 477], "chacha20": [341, 479, 483], "poly1305": [341, 479, 483], "protocol_tl": [341, 472, 483], "sslerror": [341, 475], "x509": [341, 395], "certificate_verify_fail": 341, "sslzeroreturnerror": 341, "sslwantreaderror": [341, 478, 483], "sslwantwriteerror": [341, 478, 483], "sslsyscallerror": 341, "ssleoferror": [341, 483], "sslcertverificationerror": [341, 480, 483], "verify_cod": 341, "verify_messag": 341, "certificateerror": 341, "rand_byt": [341, 474, 476, 483], "prng": 341, "rand_status": [341, 483], "rand_add": [341, 483], "csprng": [341, 483], "rand_egd": [341, 472, 483], "1750": 341, "cert_time_to_second": [341, 478, 483], "cert_tim": 341, "notbefor": 341, "notaft": 341, "2018": [341, 473, 480, 483], "1515144883": 341, "5280": [341, 478, 483], "get_server_certif": [341, 472, 476, 483], "ca_cert": 341, "protocol_sslv3": [341, 472, 483], "der_cert_to_pem_cert": 341, "der_cert_byt": 341, "der": [341, 398, 468, 477, 483], "pem_cert_to_der_cert": 341, "pem_cert_str": 341, "get_default_verify_path": [341, 477], "set_default_verify_path": [341, 477, 483], "defaultverifypath": 341, "openssl_cafile_env": 341, "openssl_cafil": 341, "openssl_capath_env": 341, "openssl_capath": 341, "enum_certif": [341, 477, 483], "cert_byt": 341, "encoding_typ": 341, "509": [341, 468, 477, 483], "asn": 341, "x509_asn": 341, "pkcs_7_asn": 341, "oid": [341, 398, 402, 483], "enum_crl": [341, 477, 483], "crls": [341, 477], "cert_non": [341, 483], "cert_opt": [341, 483], "verifymod": 341, "cert_": 341, "verify_default": [341, 477], "verify_flag": [341, 477], "verify_crl_check_leaf": [341, 477], "crl": [341, 477, 483], "verify_crl_check_chain": [341, 477], "verify_x509_strict": [341, 477], "verify_allow_proxy_cert": [341, 483], "verify_x509_trusted_first": 341, "verify_x509_partial_chain": [341, 472], "cas": 341, "verifyflag": 341, "verify_": 341, "minimum_vers": [341, 472, 480, 483], "maximum_vers": [341, 472, 480, 483], "protocol_tlsv1": [341, 472], "protocol_tlsv1_1": [341, 472, 477], "protocol_tlsv1_2": [341, 472, 477, 483], "op_al": 341, "ssl_op_al": 341, "sslv2": [341, 475], "sslv3": [341, 476, 478, 483], "op_no_tlsv1": [341, 472], "op_no_tlsv1_1": [341, 472], "op_no_tlsv1_2": [341, 472], "op_no_tlsv1_3": [341, 472, 483], "tsl1": 341, "op_no_renegoti": [341, 483], "renegoti": [341, 469], "hellorequest": 341, "clienthello": 341, "0h": [341, 483], "op_cipher_server_prefer": [341, 476, 483], "op_single_dh_us": [341, 483], "dh": [341, 472, 483], "op_single_ecdh_us": [341, 483], "ecdh": [341, 483], "op_enable_middlebox_compat": [341, 483], "op_no_compress": [341, 476, 483], "op_": 341, "op_no_ticket": 341, "op_ignore_unexpected_eof": [341, 472, 483], "op_enable_ktl": [341, 483], "op_legacy_server_connect": [341, 483], "unpatch": [341, 422, 483], "has_alpn": [341, 478], "7301": [341, 469, 475, 478], "has_never_check_common_nam": 341, "hostname_checks_common_nam": [341, 480, 483], "has_ecdh": 341, "ellipt": [341, 476, 483], "curv": [341, 384, 476, 483], "diffi": [341, 476], "hellman": [341, 476], "distributor": [341, 425, 479, 483], "6066": 341, "has_npn": 341, "set_npn_protocol": [341, 472, 476], "has_sslv2": 341, "has_sslv3": 341, "has_tlsv1": 341, "has_tlsv1_1": [341, 480], "has_tlsv1_2": 341, "has_tlsv1_3": 341, "channel_binding_typ": 341, "get_channel_bind": [341, 476], "openssl_vers": [341, 469, 475], "2k": [341, 483], "openssl_version_info": [341, 469, 475], "openssl_version_numb": [341, 469, 475], "268443839": 341, "0x100020bf": 341, "alert_description_handshake_failur": 341, "alert_description_internal_error": 341, "alert_description_": 341, "5246": 341, "set_servername_callback": [341, 477], "alertdescript": 341, "sslerrornumb": 341, "ssl_error_": 341, "tlsversion": [341, 483], "minimum_support": 341, "maximum_support": 341, "tlsv1_1": 341, "tlsv1_2": 341, "tlsv1_3": 341, "atop": [341, 467, 468], "diverg": [341, 464], "ssl_read_ex": [341, 483], "ssl_write_ex": [341, 483], "unencrypt": [341, 483], "do_handshak": [341, 477, 478], "match_hostnam": [341, 472, 474, 475, 477, 478, 480, 483], "binary_form": 341, "amongst": [341, 399], "issuer": 341, "3280": 341, "subjectaltnam": 341, "rdns": 341, "rdn": 341, "countrynam": 341, "organizationnam": 341, "startcom": 341, "organizationalunitnam": 341, "commonnam": 341, "serialnumb": 341, "95f0": 341, "571208": 341, "sle257ohy9fvq07z": 341, "stateorprovincenam": 341, "california": [341, 426], "localitynam": 341, "san": [341, 396], "francisco": [341, 396, 483], "frontier": 341, "eff": 341, "emailaddress": 341, "hostmast": 341, "x509v3": [341, 477], "crldistributionpoint": [341, 477], "caissuer": 341, "ocsp": [341, 477], "shared_ciph": [341, 478, 483], "cb_type": 341, "5929": 341, "selected_alpn_protocol": [341, 478], "selected_npn_protocol": [341, 472], "npn": [341, 472, 483], "verify_client_post_handshak": [341, 479, 480, 481, 483], "pha": 341, "certificaterequest": 341, "pythn": [341, 480], "pyth": [341, 480], "sslsession": [341, 479, 483], "session_reus": 341, "protocol_": 341, "sslv23": 341, "secreci": [341, 483], "ecc": [341, 472, 483], "224": [341, 467, 483], "cert_store_stat": [341, 477, 483], "revoc": [341, 477, 483], "x509_ca": 341, "get_ca_cert": [341, 477, 483], "get_ciph": [341, 479, 483], "set_ciph": 341, "aesgcm": 341, "ecdsa": [341, 475, 483], "alg_bit": 341, "aes256": [341, 483], "gcm": 341, "kx": 341, "50380848": 341, "kea": 341, "strength_bit": 341, "aes128": 341, "50380847": 341, "spdi": 341, "sni_callback": [341, 483], "openssl_no_tlsext": 341, "server_name_callback": 341, "load_dh_param": [341, 476, 483], "dhfile": 341, "set_ecdh_curv": [341, 476, 483], "curve_nam": 341, "prime256v1": [341, 483], "vincent": [341, 473, 478, 479, 483], "bernat": 341, "do_handshake_on_connect": 341, "suppress_ragged_eof": [341, 483], "sslsocket_class": 341, "wrap_bio": [341, 478, 480, 483], "sni": [341, 474, 477, 480, 483], "sslobject_class": 341, "session_stat": 341, "ssl_sock": 341, "verisign": 341, "keylog": [341, 483], "nss": 341, "wireshark": 341, "num_ticket": [341, 483], "ticket": [341, 483], "2197947391": 341, "op_no_ssl": [341, 483], "op_no_tl": 341, "security_level": [341, 483], "satisfact": 341, "1422": 341, "agenc": [341, 426], "keyout": 341, "dn": [341, 398, 483], "provinc": 341, "mystat": 341, "compani": [341, 461, 467, 468, 473, 483], "widgit": 341, "myserv": 341, "myorgan": 341, "digicert": 341, "cacert": 341, "digicertsha2extendedvalidationserverca": 341, "crl3": 341, "g1": [341, 384], "crl4": 341, "01bb6f00122b177f36cab49cea8b6b26": 341, "businesscategori": 341, "311": 341, "delawar": 341, "3359300": 341, "streetaddress": 341, "postalcod": 341, "03894": 341, "4801": 341, "nh": 341, "wolfeboro": 341, "testpypi": 341, "pythonhost": 341, "nhost": 341, "linuxfr": 341, "nginx": 341, "sameorigin": 341, "45679": [341, 483], "varnish": 341, "2188": 341, "lcy1134": 341, "lci": 341, "63072000": 341, "includesubdomain": 341, "mycertfil": 341, "mykeyfil": 341, "bindsocket": 341, "myaddr": 341, "10023": 341, "newsocket": 341, "connstream": 341, "deal_with_cli": 341, "memorybio": [341, 478, 483], "ticket_lifetime_hint": 341, "has_ticket": 341, "client_context": 341, "disjunct": [341, 431], "rekey": 341, "steve": [341, 463, 468, 474, 478, 479, 480, 481, 482, 483], "4086": 341, "schiller": 341, "dierk": 341, "eastlak": 341, "7525": [341, 483], "dtls": 341, "s_ischr": 342, "s_isblk": 342, "s_isreg": 342, "s_isfifo": 342, "s_islnk": 342, "s_issock": 342, "s_isdoor": [342, 483], "s_isport": [342, 483], "s_iswht": [342, 483], "whiteout": 342, "s_imod": 342, "s_ifmt": 342, "s_is": 342, "walktre": 342, "visitfil": 342, "rwxrwxrwx": [342, 476], "s_ifdoor": [342, 477, 483], "s_ifport": [342, 477, 483], "s_ifwht": [342, 477, 483], "s_ifsock": 342, "s_iflnk": [342, 481], "s_ifdir": 342, "v7": [342, 358], "file_attribute_compress": 342, "file_attribute_devic": 342, "file_attribute_directori": 342, "file_attribute_encrypt": 342, "file_attribute_hidden": 342, "file_attribute_integrity_stream": 342, "file_attribute_norm": 342, "file_attribute_not_content_index": 342, "file_attribute_no_scrub_data": 342, "file_attribute_offlin": 342, "file_attribute_readon": 342, "file_attribute_sparse_fil": 342, "file_attribute_system": 342, "file_attribute_temporari": 342, "file_attribute_virtu": 342, "io_reparse_tag_symlink": 342, "io_reparse_tag_mount_point": 342, "io_reparse_tag_appexeclink": [342, 483], "scipi": [343, 444, 451, 454, 461], "minitab": 343, "sas": 343, "matlab": 343, "input_data": 343, "median_low": 343, "median_high": 343, "median_group": [343, 483], "multimod": [343, 481], "geometric_mean": [343, 481, 483], "harmonic_mean": [343, 479, 483], "50th": 343, "percentil": [343, 481], "nomial": 343, "pstdev": [343, 483], "pvarianc": [343, 483], "varianc": [343, 386, 451, 473, 474, 477, 479, 481, 483], "covari": [343, 386, 472, 483], "pearson": [343, 472, 483], "spearman": [343, 474, 483], "linear_regress": [343, 472, 483], "statisticserror": 343, "625": [343, 444, 481], "5625": [343, 449], "outlier": 343, "tendenc": 343, "unbias": 343, "92": [343, 481, 482], "83": [343, 382, 451, 477], "reciproc": 343, "midpoint": 343, "demograph": 343, "536th": 343, "1071": 343, "cohort": 343, "everyon": [343, 477], "tricenarian": 343, "tenabl": 343, "aabbbbccddddeeffffgg": 343, "986893273527251": 343, "815": 343, "xbar": [343, 483], "0810874155219827": 343, "3720238095238095": [343, 451], "01875": 343, "108": [343, 382, 461], "bessel": 343, "decil": [343, 481], "empir": 343, "129": 343, "109": [343, 382, 461], "121": [343, 469], "107": [343, 461], "joint": [343, 426], "kepler": 343, "orbital_period": 343, "225": [343, 384, 462], "687": [343, 483], "4331": [343, 477], "10_756": 343, "30_687": 343, "60_190": 343, "dist_from_sun": 343, "150": [343, 384, 388, 465, 469], "228": 343, "778": 343, "1_400": 343, "2_900": 343, "4_500": 343, "imperfect": [343, 364], "9882": 343, "orbit": 343, "period_squar": 343, "dist_cub": 343, "slope": 343, "films_tot": 343, "pluto": 343, "eri": 343, "makemak": 343, "haumea": 343, "cere": 343, "90_560": 343, "204_199": 343, "111_845": 343, "103_410": 343, "1_680": 343, "predicted_dist": 343, "5912": 343, "10166": 343, "6806": 343, "6459": 343, "5_906": 343, "10_152": 343, "6_796": 343, "6_450": 343, "5906": 343, "10152": 343, "6796": 343, "6450": 343, "from_sampl": [343, 481], "cdf": [343, 481], "inv_cdf": [343, 483], "zscore": [343, 483], "temperature_februari": 343, "celsius": 343, "fahrenheit": [343, 481], "birth_weight": 343, "drug_effect": 343, "1060": [343, 481, 483], "195": [343, 479], "1100": [343, 471], "1200": [343, 456], "928": 343, "1192": 343, "810": 343, "958": 343, "1011": [343, 345], "1109": 343, "1162": 343, "1224": 343, "1310": 343, "analyt": 343, "3652260728": 343, "4582495471": 343, "6582483453": 343, "4591308524824727": 343, "8035946855390597": 343, "175091447274739": 343, "750": 343, "8402": [343, 477], "8675309": 343, "8406": 343, "height_mal": 343, "height_femal": 343, "weight_mal": 343, "170": [343, 384], "weight_femal": 343, "foot_size_mal": 343, "foot_size_femal": 343, "posterior": 343, "prior_mal": 343, "prior_femal": 343, "posterior_mal": 343, "posterior_femal": 343, "posteriori": 343, "male": 343, "kde_norm": 343, "smooth": 343, "kernel_h": 343, "x_i": 343, "f_hat": 343, "xarr": 343, "yarr": 343, "unadorn": 344, "widen": [344, 483], "0b100101": [344, 469, 471], "lstrip": [344, 465, 483], "100101": 344, "bit_count": [344, 472, 483], "0b10011": 344, "x04": [344, 398, 464], "xff": [344, 347, 476], "xfc": 344, "xe8": 344, "x10": [344, 464], "64512": 344, "16711680": 344, "little_ord": 344, "tohexstr": 344, "0x3": 344, "a7p10": 344, "3740": 344, "d380000000000p": 344, "hash_info": [344, 352, 428, 450, 475, 477], "invmod": 344, "hash_fract": 344, "hash_valu": 344, "fermat": 344, "hash_float": 344, "hash_complex": 344, "breadth": [344, 384, 452], "gg": 344, "haunt": 344, "economi": 344, "subrang": 344, "linspac": 344, "zoot": 344, "digraph": 344, "fillchar": 344, "expandtab": [344, 364], "t012": 344, "t0123": 344, "t01234": 344, "0123": 344, "01234": 344, "isdecim": [344, 345], "isnumer": 344, "ideograph": 344, "007f": [344, 435], "0660": [344, 462], "superscript": 344, "kharosthi": 344, "numeric_typ": 344, "isidentifi": [344, 483], "2155": 344, "vulgar": 344, "zs": 344, "ws": [344, 394, 419], "istitl": 344, "uncas": 344, "justifi": [344, 369, 376, 468], "spacious": 344, "cmowz": 344, "removeprefix": [344, 482, 483], "testhook": 344, "basetestcas": 344, "removesuffix": [344, 482, 483], "misctest": 344, "tmpdirmixin": 344, "rindex": [344, 469, 475, 476], "rjust": [344, 446, 466, 476], "rsplit": [344, 466, 469, 475, 483], "ipz": 344, "mississ": 344, "x1c": 344, "x1d": 344, "x85": 344, "u2028": 344, "u2029": 344, "nde": [344, 475], "rkl": 344, "kl": 344, "comment_str": 344, "swapcas": [344, 483], "apostroph": [344, 471], "capword": [344, 345, 483], "zfill": [344, 446, 465], "00042": 344, "0042": 344, "sprintf": [344, 462, 464], "parenthesis": [344, 483], "somenam": 344, "1e50": 344, "ieee754": 344, "emphasis": 344, "blind": [344, 477], "2ef0": 344, "f1f2": 344, "xf0": 344, "xf1": 344, "xf2": 344, "f0f1f2": 344, "f0": 344, "f0_f1f2": 344, "uuddlrlrab": 344, "55554444": 344, "4c524c52": 344, "4142": 344, "aeiou": 344, "ths": 344, "shrt": 344, "fillbyt": 344, "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz": [344, 469], "abcabc1": 344, "abc1": 344, "abcabc": 344, "abcdefghijklmnopqrstuvwxyz": [344, 345, 469], "subview": 344, "abcefg": 344, "0x7f3ddc9f4350": 344, "bce": 344, "22222222": 344, "33333333": 344, "44444444": 344, "zbcefg": 344, "z123fg": 344, "rvalu": 344, "z1spam": 344, "ce": [344, 461, 462, 483], "bepoint": 344, "616263": 344, "toreadon": [344, 483], "byte_length": 344, "new_items": 344, "1d": [344, 483], "zyz": 344, "ayz": 344, "3d": [344, 446], "2d": [344, 446, 483], "32000": 344, "32001": 344, "32002": [344, 483], "sjoerd": [344, 446, 462, 468], "cardin": [344, 483], "disjoint": 344, "issubset": [344, 465], "issuperset": [344, 465, 483], "symmetric_differ": [344, 465], "cbs": 344, "intersection_upd": [344, 465, 468], "difference_upd": [344, 468, 482, 483], "symmetric_difference_upd": [344, 465], "4098": [344, 442, 446], "4127": [344, 442, 446], "salad": 344, "juic": 344, "mappingproxi": 344, "synchronis": [344, 476], "send_post_request": 344, "weakkeydictionari": [344, 402, 467, 483], "weakmethod": [344, 402, 477, 483], "weakset": [344, 402, 469, 473, 483], "weakvaluedictionari": [344, 402, 452, 467, 483], "__unpacked__": [344, 483], "cleaner": [344, 462, 471, 476, 478, 483], "union_object": 344, "whoami": 344, "_namedintconst": 344, "10735": [344, 472, 473, 480, 481, 482], "set_int_max_str_digit": [344, 352, 362, 483], "5432": 344, "i_squar": 344, "7144": 344, "578966293710682886880994035146873798396722250538762761564": 344, "9252925514383915483333812743580549779436104706260696366600": 344, "571186405732": 344, "get_int_max_str_digit": [344, 352], "upper_bound": [344, 430], "68000": 344, "lower_bound": [344, 430], "4004": 344, "current_limit": 344, "ascii_uppercas": [345, 464], "0123456789abcdefabcdef": 345, "octdigit": [345, 435], "01234567": 345, "formfe": [345, 364, 435], "vformat": 345, "repack": 345, "literal_text": 345, "get_field": 345, "used_key": 345, "get_valu": [345, 389], "check_unused_arg": 345, "used_arg": 345, "format_field": 345, "convert_field": 345, "arg_nam": 345, "attribute_nam": 345, "element_index": 345, "index_str": 345, "thou": [345, 475], "shalt": [345, 475], "quest": [345, 442], "ton": 345, "grouping_opt": 345, "000000120": 345, "682": [345, 473], "insignific": [345, 483], "significand": [345, 352], "abra": 345, "cad": 345, "24n": 345, "81w": 345, "coord": [345, 474, 483], "5j": [345, 449], "test1": [345, 427], "test2": [345, 427], "2a": [345, 483], "101010": 345, "0o52": [345, 468], "0b101010": 345, "1234567890": [345, 468], "890": 345, "02x": 345, "c0a80001": 345, "dxob": 345, "1010": [345, 481], "flufl": 345, "noun": [345, 483], "ific": 345, "safe_substitut": [345, 452, 466], "is_valid": [345, 473, 483], "get_identifi": [345, 351, 473, 483], "kung": 345, "pao": 345, "idpattern": [345, 483], "_a": 345, "braceidpattern": [345, 483], "unbrac": 345, "3454": [346, 465, 483], "mkstringprep": [346, 465], "in_table_a1": 346, "tablea": 346, "in_table_b1": 346, "tableb": 346, "map_table_b2": 346, "map_table_b3": 346, "in_table_c11": 346, "tablec": 346, "in_table_c12": 346, "in_table_c11_c12": 346, "in_table_c21": 346, "in_table_c22": 346, "in_table_c21_c22": 346, "in_table_c3": 346, "in_table_c4": 346, "in_table_c5": 346, "in_table_c6": 346, "in_table_c7": 346, "in_table_c8": 346, "in_table_c9": 346, "in_table_d1": 346, "in_table_d2": 346, "iter_unpack": [347, 477], "1023": 347, "0x3ff": 347, "1700": 347, "10c": 347, "cccccccccc": 347, "0s": 347, "0c": 347, "hhhh": [347, 462], "bhl": 347, "99999": 347, "3s": 347, "x32": 347, "x12": [347, 398], "serialnum": 347, "gradelevel": 347, "10shhb": 347, "4658": 347, "ci": [347, 461, 480, 481, 483], "0x12131415": 347, "x14": 347, "x13": 347, "llh0l": 347, "lhl": 347, "llh": 347, "revisit": [347, 483], "qh6xq": 347, "qqh": 347, "qqh6x": 347, "capture_output": [348, 480, 483], "other_popen_kwarg": 348, "completedprocess": [348, 478, 483], "timeoutexpir": 348, "calledprocesserror": [348, 469, 478, 483], "crw": [348, 478], "systemroot": 348, "system32": [348, 461], "check_returncod": 348, "subprocesserror": [348, 483], "symmetri": [348, 462], "check_cal": 348, "preexec_fn": [348, 466, 481, 483], "startupinfo": [348, 466, 480, 483], "restore_sign": 348, "start_new_sess": [348, 481, 483], "pass_fd": [348, 481, 483], "extra_group": [348, 483], "pipes": [348, 483], "process_group": [348, 483], "lpapplicationnam": 348, "lpcommandlin": 348, "vike": 348, "seldom": 348, "handle_list": 348, "lpattributelist": [348, 480], "sigxfz": 348, "sigxfsz": 348, "create_new_consol": 348, "above_normal_priority_class": 348, "below_normal_priority_class": 348, "high_priority_class": 348, "idle_priority_class": 348, "normal_priority_class": 348, "realtime_priority_class": 348, "create_no_window": 348, "detached_process": 348, "create_default_error_mod": 348, "create_breakaway_from_job": 348, "ifconfig": [348, 483], "qemu": [348, 481, 483], "hadn": [348, 483], "dwflag": 348, "hstdinput": 348, "hstdoutput": 348, "hstderror": 348, "wshowwindow": 348, "startf_usestdhandl": 348, "startf_useshowwindow": 348, "ncmdshow": 348, "showwindow": 348, "sw_showdefault": 348, "sw_hide": 348, "startupinfoex": 348, "updateprocthreadattribut": 348, "error_invalid_paramet": 348, "std_input_handl": 348, "conin": 348, "std_output_handl": 348, "conout": 348, "std_error_handl": 348, "realtim": 348, "non_existent_fil": 348, "mycmd": 348, "myarg": 348, "dmesg": 348, "hda": 348, "retcod": 348, "child_stdin": 348, "child_stdout": 348, "child_stderr": 348, "child_stdout_and_stderr": 348, "popen4": 348, "somestr": 348, "capturestderr": 348, "getstatusoutput": [348, 477, 483], "getoutput": [348, 483], "_use_vfork": 348, "nnnnnn": 348, "_use_posix_spawn": 348, "knob": 348, "snd": 349, "audio_file_mag": 349, "audio_file_encoding_mulaw_8": 349, "audio_file_encoding_linear_8": 349, "audio_file_encoding_linear_16": 349, "audio_file_encoding_linear_24": 349, "audio_file_encoding_linear_32": 349, "audio_file_encoding_alaw_8": 349, "audio_file_encoding_float": 349, "audio_file_encoding_doubl": 349, "audio_file_encoding_adpcm_g721": 349, "audio_file_encoding_adpcm_g722": 349, "audio_file_encoding_adpcm_g723_3": 349, "audio_file_encoding_adpcm_g723_5": 349, "711": 349, "compile_typ": 351, "symbolt": [351, 482, 483], "get_typ": [351, 395, 477], "get_lineno": 351, "is_optim": 351, "is_nest": 351, "has_children": 351, "get_children": [351, 376], "get_symbol": 351, "get_paramet": 351, "get_loc": 351, "get_glob": 351, "get_nonloc": 351, "get_fre": 351, "get_method": [351, 395, 476], "is_referenc": 351, "is_import": 351, "is_paramet": 351, "is_nonloc": [351, 483], "is_declared_glob": [351, 469], "is_loc": 351, "is_annot": 351, "is_fre": 351, "is_assign": 351, "is_namespac": 351, "some_func": 351, "get_namespac": 351, "abiflag": [352, 450, 456, 475, 481, 483], "unobserv": 352, "__cantrace__": 352, "stdlib_module_nam": [352, 472, 483], "call_trac": [352, 450, 483], "_clear_type_cach": [352, 450], "nomenclatur": 352, "_debugmallocstat": [352, 450], "dllhandl": 352, "_emscripten_info": [352, 483], "emscripten_vers": 352, "js": [352, 456], "v14": 352, "__breakpointhook__": [352, 450, 483], "__displayhook__": [352, 450], "__excepthook__": [352, 365, 450, 472, 483], "__unraisablehook__": [352, 450], "dynload": [352, 354, 456, 483], "underdevelop": 352, "no_user_sit": [352, 475], "ignore_environ": [352, 475, 483], "hash_random": [352, 483], "division_warn": [352, 475, 476], "1999": [352, 366, 395, 426], "iec": 352, "dbl_epsilon": 352, "dig": 352, "dbl_dig": 352, "mant_dig": [352, 468], "dbl_mant_dig": 352, "dbl_max_exp": 352, "max_10_exp": 352, "dbl_max_10_exp": 352, "min_exp": 352, "dbl_min_exp": 352, "min_10_exp": 352, "dbl_min_10_exp": 352, "flt_radix": 352, "flt_round": 352, "character": 352, "14159265358979": 352, "15g": 352, "9876543211234567": 352, "16g": 352, "9876543211234568": 352, "float_repr_styl": [352, 450, 469], "getallocatedblock": [352, 450, 477], "getunicodeinterneds": [352, 474], "getandroidapilevel": [352, 480, 483], "getdefaultencod": [352, 450], "rtld_": [352, 483], "_enablelegacywindowsfsencod": [352, 455, 479], "getswitchinterv": [352, 450, 482, 483], "unidentifi": 352, "getprofil": [352, 365, 450, 468, 472, 483], "gettrac": [352, 365, 450, 468, 472, 483], "getwindowsvers": [352, 469, 479, 483], "service_pack": [352, 469], "service_pack_minor": [352, 469], "service_pack_major": [352, 469], "suite_mask": [352, 469], "product_typ": [352, 469], "platform_vers": [352, 479, 483], "ver_platform_win32_nt": 352, "ver_nt_workst": 352, "workstat": 352, "ver_nt_domain_control": 352, "ver_nt_serv": 352, "getversionex": [352, 483], "osversioninfoex": 352, "get_asyncgen_hook": [352, 450, 483], "asyncgen_hook": 352, "firstit": 352, "get_coroutine_origin_tracking_depth": [352, 450, 480, 483], "0x010502f0": 352, "bits_per_digit": [352, 456, 469, 471], "sizeof_digit": [352, 469, 471], "engag": 352, "maxunicod": [352, 450, 476], "0xffff": [352, 476, 483], "find_modul": [352, 423, 432, 465, 472, 473, 474, 476, 477, 480, 483], "freebsd8": 352, "linux2": [352, 476], "linux3": [352, 476], "aix5": 352, "aix7": [352, 481, 483], "coarser": 352, "suse": [352, 456, 482, 483], "profilefunc": 352, "timeslic": 352, "tracefunc": 352, "lnotab_not": [352, 479], "set_asyncgen_hook": [352, 430, 450, 483], "is_stack_trampoline_act": [352, 474, 483], "thread_info": [352, 450, 476, 483], "tracebacklimit": [352, 483], "api_vers": [352, 450, 465], "releaselevel": [352, 469, 471], "winver": 352, "xa": 352, "2a3": 352, "9899": 352, "jtc1": 352, "sc22": 352, "wg14": 352, "n1256": 352, "use_tool_id": 353, "tool_id": 353, "free_tool_id": 353, "get_tool": 353, "debugger_id": 353, "coverage_id": 353, "profiler_id": 353, "optimizer_id": 353, "oblig": [353, 426, 462], "c_rais": 353, "exception_handl": [353, 483], "py_resum": 353, "py_return": 353, "py_start": 353, "py_throw": [353, 483], "py_unwind": [353, 483], "py_yield": 353, "no_ev": 353, "explict": 353, "comparis": 353, "get_ev": 353, "set_ev": 353, "event_set": 353, "get_local_ev": 353, "codetyp": [353, 385, 481, 483], "set_local_ev": [353, 483], "restart_ev": 353, "register_callback": [353, 483], "instruction_offset": 353, "line_numb": 353, "destination_offset": 353, "untaken": 353, "nuanc": 354, "landmark": [354, 461, 479, 483], "majorvers": 354, "minorvers": 354, "python311": 354, "alongsid": [354, 375, 421, 426, 435, 461], "py_enable_shar": 355, "libdir": [355, 460], "ar": [355, 456, 483], "posix_venv": [355, 473, 483], "nt_venv": [355, 473, 483], "platstdlib": [355, 475], "platlib": [355, 475, 483], "purelib": [355, 399, 475], "platinclud": [355, 475], "userbas": [355, 475], "stash": 355, "trifl": 355, "mnt": 355, "get_scheme_nam": 355, "get_default_schem": [355, 483], "_get_default_schem": 355, "get_preferred_schem": [355, 473, 483], "get_path": [355, 469, 475, 483], "_get_preferred_schem": 355, "redistributor": [355, 469], "_install_schem": 355, "get_path_nam": 355, "get_python_vers": [355, 475], "get_platform": [355, 475, 483], "i586": [355, 475], "sun4u": 355, "64bit": [355, 474, 483], "intel64": [355, 483], "em64t": 355, "macosx": [355, 403, 459, 473, 474, 475, 483], "ppc": [355, 468, 475], "ppc64": [355, 483], "i386": [355, 460, 461, 478], "fat": [355, 405], "is_python_build": [355, 469], "parse_config_h": 355, "get_config_h_filenam": 355, "ac_apple_universal_build": 355, "aix_genuine_cplusplus": 355, "arflag": 355, "log_mask": 356, "pri": 356, "log_upto": 356, "log_pid": 356, "log_con": 356, "log_ndelay": 356, "log_odelay": 356, "log_nowait": 356, "log_perror": 356, "file_or_dir": 357, "filename_on": 357, "nannynag": 357, "process_token": 357, "ustar": [358, 468, 483], "longlink": 358, "10240": 358, "readerror": [358, 483], "compressionerror": 358, "tape": 358, "is_tarfil": [358, 483], "tarerror": 358, "streamerror": 358, "extracterror": 358, "errorlevel": 358, "headererror": 358, "frombuf": 358, "filtererror": 358, "absolutepatherror": 358, "outsidedestinationerror": 358, "specialfileerror": [358, 469], "absolutelinkerror": 358, "linkoutsidedestinationerror": [358, 483], "regtyp": 358, "aregtyp": 358, "lnktype": 358, "symtyp": 358, "chrtype": 358, "blktype": 358, "dirtyp": 358, "fifotyp": 358, "conttyp": 358, "gnutype_longnam": 358, "gnutype_longlink": 358, "gnutype_spars": 358, "ustar_format": 358, "gnu_format": 358, "pax_format": [358, 468], "default_format": [358, 479], "ignore_zero": [358, 483], "pax_head": 358, "extractal": [358, 422, 467, 468, 478, 483], "numeric_own": [358, 478, 483], "set_attr": 358, "extractfil": [358, 483], "extraction_filt": 358, "fully_trust": 358, "arcnam": [358, 422], "addfil": 358, "gettarinfo": 358, "fromtarfil": 358, "tobuf": 358, "linknam": 358, "gname": 358, "chksum": 358, "devmajor": [358, 483], "devminor": [358, 483], "offset_data": 358, "new_tarinfo": 358, "old_tarinfo": 358, "isreg": 358, "issym": 358, "islnk": 358, "ischr": 358, "isblk": 358, "isfifo": 358, "isdev": 358, "706": [358, 472, 473, 474, 481, 482], "tar_filt": 358, "data_filt": [358, 483], "fully_trusted_filt": 358, "crucial": [358, 432, 462], "abus": [358, 436, 475, 483], "my_tarfil": 358, "warn_the_us": 358, "statefulfilt": 358, "filter_func": 358, "file_count": 358, "brian_1979": [358, 422], "source1": [358, 422], "sourcen": [358, 422], "output_dir": [358, 422], "filternam": 358, "py_fil": 358, "quux": 358, "bsdtar": 358, "libarch": 358, "unmaintain": [358, 375, 475, 477, 479], "ancient": [358, 467, 483], "seventh": 358, "miscalcul": [358, 483], "nowaday": 358, "telopt_": 359, "iac": 359, "dont": 359, "wont": 359, "subnegoti": 359, "dm": 359, "brk": 359, "ao": 359, "ayt": 359, "ec": [359, 483], "ga": 359, "read_": 359, "tn": 359, "read_until": 359, "read_al": 359, "read_som": 359, "read_very_eag": 359, "midst": 359, "read_eag": 359, "read_lazi": 359, "read_very_lazi": 359, "read_sb_data": 359, "subopt": 359, "get_socket": 359, "mt_interact": 359, "uncompil": 359, "set_option_negotiation_callback": 359, "temporaryfil": [360, 483], "temporarydirectori": [360, 475, 483], "spooledtemporaryfil": [360, 468, 473, 476, 483], "delete_on_clos": [360, 474, 483], "max_siz": [360, 386], "spool": 360, "_file": 360, "ignore_cleanup_error": [360, 483], "gettempprefix": 360, "gettempprefixb": 360, "tmpdir": [360, 483], "gettempdir": [360, 483], "tempdir": [360, 402, 483], "gettempdirb": [360, 483], "tmpdirnam": [360, 475], "tmptjujjt": 360, "tcgetattr": [361, 383, 483], "iflag": 361, "oflag": 361, "lflag": 361, "ispe": 361, "ospe": 361, "vmin": 361, "vtime": 361, "tcsetattr": [361, 383, 483], "tcsanow": 361, "tcsadrain": 361, "tcsaflush": [361, 383], "tcsendbreak": 361, "tcdrain": 361, "tcflush": 361, "tciflush": 361, "tcoflush": 361, "tcioflush": 361, "tcflow": 361, "tcooff": 361, "tcoon": 361, "tcioff": 361, "tcion": 361, "tcgetwins": [361, 483], "ws_row": 361, "ws_col": 361, "tiocgwinsz": 361, "tiocgsiz": 361, "tcsetwins": [361, 483], "winsiz": [361, 483], "tiocswinsz": 361, "tiocssiz": 361, "test_": [362, 422, 483], "pyunit": [362, 463], "mytestcase1": 362, "test_feature_on": 362, "test_feature_two": 362, "mytestcase2": 362, "whitebox": 362, "blackbox": 362, "improp": [362, 394, 428, 462, 474, 477, 483], "crop": 362, "anomal": 362, "testfuncacceptssequencesmixin": 362, "mysuperwhammyfunct": 362, "test_func": 362, "acceptlist": 362, "acceptstr": 362, "accepttupl": 362, "beck": [362, 388, 463], "test_main": [362, 483], "testload": [362, 388, 389, 469, 473, 474, 478, 483], "loadtestsfrommodul": [362, 388, 473, 474, 478, 483], "test_spam": 362, "uall": [362, 465], "largefil": [362, 483], "pcbuild": [362, 461, 468, 483], "testfail": 362, "resourcedeni": 362, "skiptest": [362, 388, 469, 477, 483], "is_jython": 362, "is_android": [362, 483], "unix_shel": [362, 483], "loopback_timeout": [362, 483], "internet_timeout": [362, 483], "transient_internet": 362, "short_timeout": [362, 483], "buildbot": [362, 388, 456, 483], "long_timeout": [362, 483], "pipe_max_s": 362, "sock_max_s": 362, "test_support_dir": 362, "test_home_dir": 362, "test_data_dir": 362, "max_py_ssize_t": 362, "max_memus": 362, "set_memlimit": 362, "real_max_memus": 362, "missing_c_docstr": 362, "with_doc_str": [362, 456], "have_docstr": 362, "test_http_url": [362, 483], "always_eq": 362, "never_eq": 362, "busy_retri": 362, "sleeping_retri": 362, "init_delay": 362, "max_delay": 362, "backoff": [362, 483], "is_resource_en": 362, "python_is_optim": 362, "o0": [362, 483], "with_pymalloc": 362, "_testcapi": [362, 456, 483], "sortdict": 362, "findfil": [362, 483], "get_pages": 362, "check_impl_detail": 362, "record_original_stdout": 362, "get_original_stdout": 362, "args_from_interpreter_flag": 362, "optim_args_from_interpreter_flag": 362, "captured_stdin": 362, "captured_stdout": 362, "captured_stderr": [362, 483], "disable_faulthandl": 362, "gc_collect": 362, "disable_gc": 362, "swap_attr": [362, 483], "new_val": 362, "swap_item": [362, 483], "flush_std_stream": 362, "print_warn": 362, "wait_process": [362, 483], "calcobjs": [362, 483], "calcvobjs": 362, "checksizeof": 362, "anticipate_failur": 362, "system_must_validate_cert": 362, "run_with_local": 362, "catstr": 362, "run_with_tz": 362, "requires_freebsd_vers": 362, "min_vers": 362, "requires_linux_vers": 362, "requires_mac_vers": 362, "requires_ieee_754": 362, "requires_zlib": [362, 483], "requires_gzip": 362, "requires_bz2": 362, "requires_lzma": 362, "requires_resourc": 362, "requires_docstr": 362, "requires_limited_api": 362, "cpython_on": [362, 483], "impl_detail": 362, "no_trac": 362, "refcount_test": 362, "bigmemtest": 362, "memus": 362, "_4g": 362, "bigaddrspacetest": 362, "check_syntax_error": 362, "errtext": 362, "open_urlresourc": 362, "reap_children": 362, "hog": 362, "refleak": [362, 474, 483], "get_attribut": 362, "catch_unraisable_except": [362, 483], "load_package_test": [362, 483], "pkg_dir": 362, "standard_test": [362, 388], "detect_api_mismatch": 362, "ref_api": 362, "other_api": 362, "test_inst": 362, "object_to_patch": 362, "run_in_subinterp": 362, "check_free_after_iter": 362, "missing_compiler_execut": [362, 483], "cmd_name": 362, "check__all__": [362, 483], "test_cas": [362, 388], "name_of_modul": 362, "not_export": [362, 483], "_csv": [362, 483], "misctestcas": 362, "test__all__": 362, "othertestcas": 362, "bar_const": 362, "foo_const": 362, "_bar": 362, "skip_if_broken_multiprocessing_synchron": [362, 483], "check_disallow_instanti": 362, "adjust_int_max_str_digit": 362, "max_digit": 362, "suppresscrashreport": [362, 483], "seterrormod": 362, "coredump": [362, 483], "savesign": 362, "matcher": [362, 390], "match_valu": 362, "ipv6_en": 362, "find_unused_port": [362, 483], "elicit": 362, "ephemer": [362, 402], "bind_port": 362, "s_server": 362, "so_exclusiveaddrus": 362, "bind_unix_socket": 362, "skip_unless_bind_unix_socket": [362, 483], "resource_nam": 362, "interpreter_requires_environ": 362, "skipif": [362, 388], "assert_python": 362, "pythonusersit": 362, "run_python_until_end": [362, 483], "env_var": 362, "__isol": 362, "__cleanenv": 362, "__cwd": 362, "assert_python_ok": [362, 483], "assert_python_failur": [362, 483], "spawn_python": 362, "kill_python": 362, "make_script": 362, "script_dir": 362, "script_basenam": 362, "omit_suffix": 362, "make_zip_script": 362, "zip_dir": 362, "zip_basenam": 362, "script_nam": [362, 407], "name_in_zip": 362, "make_pkg": 362, "init_sourc": 362, "make_zip_pkg": 362, "bytecodetestcas": 362, "get_disassembly_as_str": 362, "assertinbytecod": 362, "_unspecifi": 362, "assertnotinbytecod": [362, 483], "reap_thread": 362, "threading_cleanup": [362, 483], "original_valu": 362, "threading_setup": [362, 483], "wait_threads_exit": 362, "catch_threading_except": [362, 483], "fs_nonascii": 362, "testfn": [362, 483], "testfn_nonascii": 362, "testfn_unencod": 362, "testfn_undecod": 362, "testfn_unicod": 362, "environmentvarguard": [362, 468], "fakepath": 362, "can_symlink": 362, "can_xattr": 362, "xattr": [362, 483], "change_cwd": 362, "create_empty_fil": 362, "fd_count": [362, 483], "fs_is_case_insensit": 362, "make_bad_fd": 362, "skip_unless_symlink": 362, "skip_unless_xattr": 362, "tempcwd": 362, "temp_dir": 362, "temp_umask": 362, "import_fresh_modul": [362, 483], "reinsert": [362, 376, 469, 471], "py_warn": 362, "_warn": [362, 472, 483], "c_warn": 362, "required_on": 362, "modules_setup": 362, "modules_cleanup": 362, "oldmodul": 362, "make_legacy_pyc": [362, 483], "cleanimport": [362, 483], "dirsonsyspath": 362, "ignore_warn": 362, "catch_warn": [362, 400, 468, 473, 474, 483], "simplefilt": [362, 400, 468, 469, 473, 483], "warning_help": 362, "test_suppress_warn": 362, "check_no_resource_warn": [362, 483], "check_syntax_warn": [362, 483], "check_warn": [362, 468], "regexp": [362, 475, 483], "warningcategori": 362, "warningrecord": 362, "hey": 362, "warningsrecord": 362, "textwrapp": [364, 465, 477, 483], "initial_ind": 364, "subsequent_ind": 364, "expand_tab": 364, "replace_whitespac": 364, "fix_sentence_end": 364, "break_long_word": [364, 483], "drop_whitespac": [364, 468], "break_on_hyphen": [364, 483], "max_lin": [364, 477], "thello": 364, "nworld": 364, "frankenstein": 364, "insec": 364, "camelcas": 365, "overcom": [365, 475, 483], "activecount": [365, 468, 472, 483], "main_thread": [365, 477], "settrace_all_thread": [365, 474, 483], "setprofile_all_thread": [365, 474, 483], "_threading_loc": 365, "threadgroup": 365, "setnam": [365, 472, 483], "native_id": [365, 481, 483], "isdaemon": [365, 468, 472, 483], "setdaemon": [365, 468, 472, 483], "awaken": 365, "cv": [365, 384], "an_item_is_avail": 365, "get_an_available_item": 365, "make_an_item_avail": 365, "notifyal": [365, 472, 483], "dutch": [365, 435], "scientist": 365, "edsger": 365, "dijkstra": 365, "awoken": 365, "maxconnect": 365, "pool_sema": 365, "connectdb": 365, "isset": [365, 472, 483], "begun": [365, 465, 466], "accept_connect": 365, "process_server_connect": 365, "make_connect": [365, 419], "process_client_connect": 365, "awri": 365, "some_lock": 365, "1969": 366, "acronym": 366, "compromis": 366, "wisdom": 366, "tm_gmtoff": [366, 479, 483], "tm_zone": [366, 479, 483], "tm": [366, 375], "1993": [366, 483], "pthread_getcpuclockid": [366, 480, 483], "clk_id": 366, "clock_getr": [366, 476], "clock_gettim": [366, 476, 482, 483], "clock_gettime_n": [366, 480, 483], "clock_settim": [366, 476], "clock_realtim": [366, 473, 483], "clock_settime_n": [366, 480, 483], "get_clock_info": [366, 476, 483], "thread_tim": [366, 480, 482, 483], "ntp": 366, "monotonic_n": [366, 480, 483], "perf_counter_n": [366, 367, 480, 483], "process_time_n": [366, 480, 483], "suspens": [366, 428, 430], "clock_nanosleep": [366, 473, 483], "nanosleep": [366, 473, 483], "tm_year": [366, 464], "tm_mon": 366, "tm_mday": 366, "tm_hour": 366, "tm_min": 366, "tm_sec": 366, "tm_wday": 366, "tm_yday": 366, "335": 366, "tm_day": 366, "time_n": [366, 480, 483], "thread_time_n": [366, 480, 483], "clock_thread_cputime_id": [366, 482, 483], "tzset": [366, 483], "meridian": 366, "julian": [366, 477, 478, 483], "05edt": 366, "m4": [366, 456, 483], "m10": 366, "aest": 366, "10aedt": 366, "tzfile": 366, "datafil": [366, 465], "australia": 366, "melbourn": 366, "egypt": 366, "eet": 366, "eest": 366, "clock_boottim": [366, 480, 483], "clock_monoton": [366, 473, 480, 483], "settimeofday": 366, "clock_highr": 366, "nonadjust": 366, "clock_monotonic_raw": 366, "clock_process_cputime_id": 366, "clock_prof": [366, 480, 483], "clock_tai": [366, 483], "ptp": 366, "clock_uptim": [366, 480, 483], "uptim": [366, 480, 483], "clock_uptime_raw": [366, 481, 483], "asleep": 366, "1123": [366, 471], "usec": [367, 478], "3018611848820001": 367, "2727368790656328": 367, "23702679807320237": 367, "19665591977536678": 367, "default_tim": 367, "autorang": [367, 479, 483], "time_taken": 367, "wallclock": 367, "nsec": 367, "5000000": 367, "0877": 367, "41440500499993504": 367, "7246671520006203": 367, "3955516149999312": 367, "40183617287970225": 367, "37027556854118704": 367, "38344867356679524": 367, "3712595970846668": 367, "37866875250654886": 367, "9138244460009446": 367, "5829014980008651": 367, "04215312199994514": 367, "08588060699912603": 367, "stupid": 367, "woefulli": 369, "tkdoc": [369, 483], "roseman": [369, 472, 482, 483], "978": 369, "1999149567": 369, "alan": [369, 467, 468, 474, 480, 483], "moor": [369, 464, 465, 468, 477, 478, 480, 483], "1788835886": 369, "lutz": 369, "0596158101": 369, "ousterhout": 369, "jone": [369, 465, 467, 477, 478], "0321336330": 369, "multitask": 369, "bridg": [369, 475], "xlib": 369, "cocoa": [369, 459, 475, 483], "gdi": 369, "screennam": [369, 375], "usetk": 369, "argv0": 369, "winfo_id": 369, "winfo_par": 369, "loadtk": 369, "frm": 369, "grid": [369, 374, 376], "lbl": 369, "btn": [369, 376, 384], "winfo_x": 369, "winfo_height": 369, "winfo_view": 369, "winfo": 369, "reenter": 369, "idiosyncrat": 369, "relief": [369, 376], "groov": 369, "placer": 369, "qualit": 369, "183": 369, "parcel": [369, 376], "ipadx": 369, "ipadi": 369, "padx": 369, "padi": 369, "textvari": [369, 376], "onvalu": 369, "offvalu": 369, "stringvar": [369, 376], "intvar": [369, 483], "doublevar": 369, "booleanvar": [369, 483], "entrythingi": 369, "print_cont": 369, "wm": 369, "icon": [369, 373, 461, 464, 465, 483], "_root": 369, "compass": 369, "sw": 369, "nw": 369, "gray25": 369, "gray50": 369, "hourglass": 369, "questhead": 369, "contrib": 369, "gumbi": 369, "print_it": 369, "rrggbb": 369, "rrrgggbbb": 369, "rrrrggggbbbb": 369, "160": [369, 382, 384, 426], "cursorfont": 369, "xc_": 369, "xc_hand2": 369, "hand2": 369, "179": 369, "centimetr": 369, "millimetr": 369, "5i": 369, "widthxheight": 369, "200x100": 369, "3i": 369, "2i": 369, "4c": 369, "43c": 369, "sunken": 369, "ridg": 369, "scrollcommand": [369, 376], "3tk": 369, "turn_r": 369, "activeforeground": 369, "send_ev": 369, "keysym": 369, "keysym_num": 369, "x_root": 369, "y_root": 369, "entryconfig": 369, "bitmapimag": 369, "photoimag": [369, 376, 481, 483], "pillow": [369, 450], "createfilehandl": [369, 483], "deletefilehandl": 369, "maxbytecount": 369, "chooser": 370, "askcolor": 370, "buttonpress": 371, "dnd_start": 371, "dnd_accept": 371, "old_target": 371, "dnd_leav": 371, "dnd_enter": 371, "dnd_commit": 371, "dnd_end": 371, "dndhandler": 371, "buttonreleas": 371, "on_mot": 371, "on_releas": 371, "slant": [372, 462], "overstrik": 372, "displayof": 372, "cget": [372, 376], "ascent": 372, "descent": 372, "linespac": 372, "nametofont": [372, 483], "showinfo": 373, "showwarn": [373, 400, 468, 483], "showerror": 373, "askquest": 373, "yesno": 373, "askokcancel": 373, "askretrycancel": 373, "askyesno": 373, "askyesnocancel": 373, "abortretryignor": 373, "okcancel": 373, "retrycancel": 373, "yesnocancel": 373, "vbar": [374, 377], "hlist": [375, 483], "fileentri": 375, "panedwindow": [375, 376, 483], "tixinspect": 375, "inspector": 375, "balloon": 375, "combo": [375, 376], "subwidget": 375, "labelentri": 375, "mega": 375, "labelfram": [375, 376], "optionmenu": [375, 483], "popupmenu": 375, "tk_popup": 375, "stdbuttonbox": 375, "motif": 375, "dirlist": 375, "dirtre": 375, "dirselectdialog": 375, "dirselectbox": 375, "exfileselectbox": 375, "tixexfileselectdialog": 375, "fileselectbox": 375, "checklist": 375, "checkbutton": [375, 376, 483], "tlist": 375, "listnotebook": 375, "tixnotebook": 375, "xpm": 375, "inputon": 375, "tixcommand": 375, "tix_configur": 375, "cnf": [375, 460], "tix_cget": 375, "tix_getbitmap": 375, "tix_addbitmapdir": 375, "tix_getimag": 375, "tix_librari": 375, "tix_filedialog": 375, "dlgclass": 375, "fileselectdialog": 375, "monochrom": 375, "tix_option_get": 375, "tix_resetopt": 375, "newschem": 375, "newfontset": 375, "newscmprio": 375, "fontset": 375, "resetopt": 375, "tix_config": 375, "anti": [376, 384, 390, 483], "menubutton": 376, "tile": [376, 384, 469], "monograph": 376, "bw": 376, "tlabel": 376, "ttkstyle": 376, "bindtag": 376, "viewabl": 376, "xscrollcommand": 376, "yscrollcommand": 376, "statespec": 376, "instat": 376, "inquir": [376, 478], "bbox": 376, "icursor": 376, "xview": 376, "exportselect": 376, "selection_get": 376, "postcommand": 376, "dropdown": 376, "comboboxselect": 376, "newindex": 376, "enable_travers": 376, "tab_id": 376, "notebooktabchang": 376, "unmanag": 376, "autoincr": [376, 483], "recur": 376, "grip": 376, "southeast": 376, "displaycolumn": 376, "yview": 376, "selectmod": 376, "treeviewselect": 376, "treeviewopen": 376, "treeviewclos": 376, "offscreen": 376, "set_children": 376, "newchildren": 376, "minwidth": 376, "imagenam": 376, "identify_row": 376, "identify_column": 376, "identify_region": 376, "identify_el": 376, "reattach": 376, "selection_set": [376, 481, 483], "selection_add": [376, 483], "selection_remov": [376, 483], "selection_toggl": [376, 483], "tag_bind": 376, "tag_configur": 376, "tag_ha": [376, 483], "winfo_class": 376, "somewidget": 376, "confer": [376, 463, 467], "query_opt": 376, "tbutton": 376, "colored_btn": 376, "layoutspec": 376, "tmenubutton": 376, "mbtn": 376, "element_cr": [376, 483], "elementnam": 376, "etyp": [376, 381, 472], "imagespec": 376, "interior": [376, 384, 463, 464], "img1": 376, "img2": 376, "img3": 376, "themenam": 376, "element_nam": 376, "element_opt": 376, "theme_cr": 376, "theme_set": 376, "tcombobox": 376, "green2": 376, "green4": 376, "fieldbackground": 376, "green3": 376, "olivedrab1": 376, "olivedrab2": 376, "theme_nam": 376, "theme_us": 376, "themechang": [376, 483], "caviti": 376, "whichsid": 376, "nswe": 376, "sublayout": 376, "tok_nam": [377, 483], "istermin": 377, "isnontermin": 377, "iseof": 377, "endmark": [377, 378, 431], "lpar": [377, 378, 483], "rpar": [377, 378], "lsqb": 377, "rsqb": 377, "amper": 377, "lbrace": 377, "rbrace": [377, 431], "eqequ": 377, "notequ": 377, "lessequ": 377, "greaterequ": 377, "leftshift": 377, "rightshift": 377, "doublestar": 377, "plusequ": 377, "minequ": 377, "starequ": 377, "slashequ": 377, "percentequ": 377, "amperequ": 377, "vbarequ": 377, "circumflexequ": 377, "leftshiftequ": 377, "rightshiftequ": 377, "doublestarequ": 377, "doubleslash": 377, "doubleslashequ": 377, "atequ": 377, "rarrow": 377, "colonequ": 377, "soft_keyword": [377, 431], "fstring_start": [377, 431, 474], "fstring_middl": [377, 431, 474], "fstring_end": [377, 431, 474], "errortoken": [377, 474], "n_token": 377, "nt_offset": 377, "exact_typ": 378, "srow": 378, "scol": 378, "erow": 378, "ecol": 378, "generate_token": [378, 470, 474, 483], "untoken": [378, 483], "tokenerror": [378, 474, 483], "decistmt": 378, "3e": 378, "007": 378, "13th": 378, "21716034272e": 378, "217160342717258261933904529e": 378, "toknum": 378, "tokval": 378, "say_hello": 378, "tomldecodeerror": 379, "toml_str": 379, "listfunc": 380, "coverdir": 380, "trackcal": 380, "countfunc": 380, "countcal": 380, "ignoremod": 380, "ignoredir": 380, "runfunc": [380, 481], "coverageresult": [380, 483], "write_result": 380, "show_miss": 380, "tracer": [380, 384, 468, 483], "print_last": 381, "extract_tb": 381, "extract_stack": [381, 483], "format_list": [381, 483], "extracted_list": 381, "format_except": [381, 472, 483], "format_exc": 381, "format_tb": [381, 382], "format_stack": [381, 483], "clear_fram": [381, 477], "walk_stack": [381, 478], "walk_tb": [381, 478], "lookup_lin": 381, "capture_loc": [381, 483], "max_group_width": [381, 483], "max_group_depth": [381, 483], "from_except": 381, "frame_gen": 381, "from_list": 381, "format_frame_summari": [381, 473, 483], "frame_summari": 381, "run_user_cod": 381, "envdir": 381, "bright_side_of_lif": 381, "formatted_lin": 381, "another_funct": 381, "lumberstack": 381, "an_error": 381, "take_snapshot": 382, "top_stat": 382, "716": 382, "4855": 382, "39328": 382, "284": 382, "521": 382, "3199": 382, "167": 382, "368": 382, "244": 382, "2315": 382, "381": 382, "185": [382, 471], "243": [382, 463], "133": 382, "347": [382, 467], "262": 382, "1446": 382, "1454": 382, "2131": 382, "148": 382, "344": 382, "snapshot1": 382, "snapshot2": 382, "compare_to": 382, "8173": 382, "4428": 382, "71332": 382, "39369": [382, 483], "117": [382, 463], "940": 382, "8106": 382, "571": 382, "298": 382, "589": [382, 386, 481, 483], "1005": 382, "166": [382, 386], "7423": 382, "1526": 382, "1334": 382, "848": 382, "1465": 382, "784": 382, "491": 382, "969": 382, "870": 382, "1036": 382, "934": 382, "1068": 382, "619": 382, "1581": 382, "1614": 382, "938": 382, "1728": 382, "test_pickletool": 382, "run_doctest": [382, 483], "1276": 382, "test_runn": 382, "976": 382, "display_failur": 382, "761": 382, "match_test": 382, "1563": 382, "main_in_temp_cwd": 382, "run_glob": 382, "display_top": 382, "key_typ": 382, "filter_trac": 382, "419": [382, 471], "_b85chars2": 382, "_b85char": 382, "306": 382, "_a85chars2": 382, "_a85char": 382, "class_definit": 382, "testmethod": 382, "_hexdig": 382, "_weakrefset": 382, "142": [382, 442, 446], "_b32tab2": 382, "_b32tab": 382, "6220": 382, "3602": 382, "5303": 382, "get_traced_memori": 382, "reset_peak": [382, 482], "large_sum": 382, "first_siz": 382, "first_peak": 382, "small_sum": 382, "second_s": 382, "second_peak": 382, "664": 382, "3592984": 382, "804": 382, "29704": [382, 483], "optimis": [382, 428, 483], "clear_trac": 382, "get_object_traceback": [382, 483], "get_traceback_limit": 382, "get_tracemalloc_memori": 382, "is_trac": 382, "total_nfram": [382, 483], "filename_pattern": 382, "all_fram": 382, "traceback_limit": [382, 407], "old_snapshot": 382, "size_diff": 382, "count_diff": 382, "most_recent_first": [382, 480, 483], "cfmakeraw": [383, 483], "cfmakecbreak": [383, 483], "icanon": 383, "icrnl": 383, "stti": [383, 483], "setcbreak": [383, 483], "setraw": [383, 483], "bsds": [383, 474], "walli": 384, "feurzeig": 384, "seymour": 384, "papert": 384, "cynthia": 384, "solomon": [384, 483], "learner": 384, "teacher": 384, "classroom": [384, 483], "clockwis": 384, "anew": [384, 432, 482, 483], "clearscreen": 384, "geometr": [384, 473], "fillcolor": 384, "begin_fil": 384, "end_fil": 384, "whom": [384, 426], "360": 384, "bgcolor": 384, "bk": 384, "setposit": 384, "teleport": [384, 483], "seti": 384, "sethead": 384, "seth": [384, 483], "clearstamp": 384, "xcor": 384, "ycor": 384, "pendown": 384, "pd": 384, "penup": 384, "pu": 384, "pensiz": 384, "isdown": 384, "pencolor": 384, "showturtl": 384, "st": [384, 465, 479, 480, 483], "hideturtl": 384, "isvis": 384, "resizemod": 384, "shapes": 384, "turtles": 384, "shearfactor": 384, "settiltangl": [384, 473, 474, 483], "tiltangl": [384, 473, 483], "tilt": 384, "shapetransform": 384, "get_shapepoli": 384, "onclick": 384, "onreleas": 384, "ondrag": 384, "begin_poli": 384, "end_poli": 384, "get_poli": 384, "getturtl": 384, "getpen": 384, "getscreen": 384, "setundobuff": 384, "undobufferentri": 384, "bgpic": 384, "resetscreen": 384, "screensiz": 384, "setworldcoordin": 384, "onkey": 384, "onkeyreleas": 384, "onkeypress": 384, "onscreenclick": 384, "ontim": 384, "colormod": 384, "getcanva": 384, "getshap": 384, "register_shap": 384, "addshap": 384, "window_height": 384, "window_width": 384, "textinput": [384, 483], "numinput": [384, 483], "exitonclick": 384, "337": 384, "vec2d": [384, 483], "fill_gap": 384, "polygon": 384, "travel": 384, "to_angl": 384, "counterclockwis": 384, "inscrib": 384, "semicircl": 384, "colorstr": 384, "diamet": 384, "canva": [384, 468, 474, 481, 483], "stamp_id": 384, "stampid": 384, "astamp": 384, "unused_stamp_id": 384, "undobuff": 384, "speedstr": 384, "speedvalu": 384, "440": 384, "27876": 384, "60254": 384, "fullcircl": 384, "grad": 384, "gon": [384, 476], "gradian": 384, "5707963267948966": 384, "thick": 384, "turtleshap": 384, "pendict": 384, "nores": 384, "stretchfactor": 384, "penstat": 384, "33cc8c": 384, "brown": [384, 468, 483], "5490196078431373": 384, "140": [384, 469, 483], "32c18f": 384, "colorstring1": 384, "colorstring2": 384, "g2": 384, "285078": 384, "a0c8f0": 384, "fillstat": 384, "arial": 384, "fontnam": 384, "fontsiz": 384, "fonttyp": 384, "shapenam": 384, "rmode": 384, "outlinewidth": 384, "stretch_wid": 384, "stretch_len": 384, "perpendicular": 384, "shear": 384, "t11": 384, "t12": 384, "t21": 384, "t22": 384, "myturtl": 384, "glow": 384, "unglow": 384, "handdraw": 384, "myfavouriteshap": 384, "mick": [384, 462, 465, 467], "pet": 384, "_screen": 384, "addcompon": 384, "poly1": 384, "poly2": 384, "shapelist": 384, "myshap": 384, "800080": 384, "picnam": 384, "nopic": 384, "backgroundimag": 384, "landscap": [384, 468], "canvwidth": 384, "canvheight": 384, "canvaswidth": 384, "canvasheight": 384, "1500": [384, 483], "llx": 384, "urx": 384, "distort": 384, "octagon": 384, "acceler": [384, 462, 463, 467, 470, 476, 477, 483], "xdummi": 384, "ydummi": 384, "nim": 384, "minval": 384, "maxval": 384, "stake": 384, "cmode": 384, "turtlegraphicserror": 384, "scrolledcanva": 384, "thusli": 384, "480": 384, "turtlegraph": 384, "using_idl": 384, "_cfg": 384, "startx": 384, "leftright": 384, "starti": 384, "topbottom": 384, "200x200": 384, "titlebar": 384, "zoo": [384, 427], "rawpen": 384, "playground": 384, "type_": 384, "poli": [384, 462], "tooltip": [384, 483], "backgroundcolor": 384, "write_docstringdict": 384, "turtle_docstringdict": 384, "turtle_docstringdict_german": 384, "glingl": 384, "aon": 384, "undobuffers": 384, "exampleturtl": 384, "examplescreen": 384, "docstringdict": 384, "turtle_docstringdict_italian": 384, "bytedesign": 384, "sourcecod": 384, "chao": 384, "verhulst": 384, "colormix": 384, "forest": 384, "fractalcurv": 384, "hilbert": 384, "koch": 384, "lindenmay": 384, "ethnomathemat": 384, "indian": 384, "kolam": 384, "minimal_hanoi": 384, "hanoi": 384, "disc": 384, "nimstick": 384, "minimalist": 384, "peac": 384, "penros": [384, 483], "aperiod": 384, "kite": 384, "dart": 384, "planet_and_moon": 384, "rosett": [384, 483], "round_danc": 384, "danc": [384, 442], "sorting_anim": 384, "two_canvas": 384, "canvas": 384, "yinyang": 384, "tdemo_nim": 384, "tdemo_round_d": 384, "new_class": [385, 476, 483], "exec_bodi": 385, "prepare_class": [385, 476], "__prepare__": [385, 389, 428, 477, 479, 483], "resolve_bas": [385, 428, 480, 483], "__mro_entries__": [385, 428, 480, 483], "get_original_bas": [385, 428, 474, 483], "laid": 385, "__orig_bases__": [385, 474, 483], "listiter": 385, "lambdatyp": 385, "generatortyp": 385, "coroutinetyp": [385, 478, 483], "asyncgeneratortyp": 385, "celltyp": [385, 483], "builtinfunctiontyp": 385, "builtinmethodtyp": [385, 483], "wrapperdescriptortyp": [385, 480, 483], "methoddescriptortyp": [385, 480, 483], "classmethoddescriptortyp": [385, 480, 483], "t_origin": 385, "t_arg": 385, "getsetdescriptortyp": 385, "memberdescriptortyp": [385, 483], "dynamicclassattribut": [385, 473, 477], "gen_func": [385, 483], "moon_weight": 386, "earth_weight": 386, "weigh": 386, "vocabulari": 386, "typing_extens": 386, "cheat": 386, "new_vector": 386, "connectionopt": 386, "broadcast_messag": 386, "some_id": [386, 479], "524313": [386, 479], "get_user_nam": 386, "user_id": 386, "user_a": 386, "42351": 386, "user_b": 386, "23413": 386, "54341": 386, "some_valu": 386, "adminuserid": 386, "prouserid": 386, "get_next_item": 386, "async_queri": 386, "on_success": 386, "on_upd": 386, "batch_proc": 386, "cb_result": 386, "good_cb": 386, "bad_cb": 386, "maxitem": 386, "paramspecvari": 386, "returntyp": 386, "arg1typ": 386, "arg2typ": 386, "notify_by_email": 386, "prouser": 386, "teamus": 386, "make_new_us": 386, "user_class": 386, "new_non_team_us": 386, "basicus": 386, "hierachi": 386, "loggedvar": 386, "zero_all_var": 386, "weirdtrio": 386, "oldt": 386, "contravari": 386, "oldb": 386, "oldweirdtrio": 386, "linkedlist": 386, "vec": [386, 442], "inproduct": 386, "type1": 386, "legacy_pars": 386, "hatch": [386, 469], "hash_a": 386, "hash_b": 386, "typesaf": 386, "bucket": [386, 428], "544": [386, 481, 483], "unconstrain": 386, "anystr": 386, "greet_bad": 386, "greet_prop": 386, "literalstr": [386, 473, 483], "run_queri": [386, 473], "arbitrary_str": [386, 473], "literal_str": 386, "never_call_m": 386, "int_or_str": 386, "noreturn": [386, 483], "reveal_typ": [386, 473, 483], "return_self": 386, "subclassoffoo": 386, "returns_egg": 386, "boxofstr": 386, "make_box_of_str": 386, "with_lock": 386, "my_lock": 386, "sum_threadsaf": 386, "validate_simpl": 386, "open_help": 386, "586": [386, 472, 481, 482, 483], "starship": [386, 467, 479], "enterprise_d": 386, "fastconnector": 386, "591": [386, 481, 483], "notrequir": [386, 473, 483], "__metadata__": 386, "no_type_check": [386, 473, 483], "valuerang": 386, "ann1": 386, "include_extra": [386, 482, 483], "593": [386, 482, 483], "typeguard": [386, 472, 483], "is_str": 386, "is_str_list": 386, "typea": 386, "typeb": 386, "kt": 386, "lookup_nam": 386, "infer_vari": 386, "strsequenc": 386, "strorbytessequ": 386, "print_capit": 386, "stringsubclass": 386, "print_ab": 386, "supportsab": 386, "__covariant__": 386, "__contravariant__": 386, "__infer_variance__": 386, "__bound__": [386, 427, 429], "__constraints__": [386, 427], "move_first_element_to_last": 386, "get_shap": 386, "happili": 386, "array2": 386, "float_array_1d": 386, "int_array_2d": 386, "yup": 386, "intfunc": [386, 474], "add_log": 386, "add_two": 386, "paramspecarg": [386, 472, 483], "paramspeckwarg": [386, 472, 483], "get_origin": [386, 481, 483], "listorset": [386, 427], "notgener": 386, "__value__": [386, 429, 436, 483], "_field_typ": [386, 481, 482, 483], "first_us": 386, "__supertype__": [386, 483], "runtime_check": [386, 472, 474, 481, 483], "genproto": 386, "poni": 386, "closabl": 386, "checkabl": [386, 474, 483], "__total__": 386, "__required_keys__": [386, 483], "__optional_keys__": [386, 483], "supportsbyt": [386, 473, 483], "supportscomplex": [386, 473, 483], "supportsfloat": 386, "supportsindex": [386, 481, 483], "supportsround": 386, "assert_typ": [386, 473, 483], "complex_funct": 386, "assert_nev": [386, 473, 483], "dataclass_transform": [386, 473, 474, 483], "eq_default": 386, "order_default": 386, "kw_only_default": 386, "frozen_default": [386, 474, 483], "field_specifi": 386, "create_model": [386, 473], "customermodel": [386, 473], "modelbas": 386, "modelmeta": 386, "__dataclass_transform__": 386, "meanwhil": 386, "get_overload": [386, 473, 483], "clear_overload": [386, 473, 483], "__final__": [386, 473, 483], "no_type_check_decor": 386, "log_status": 386, "__override__": 386, "type_check_on": [386, 483], "fetch_respons": 386, "globaln": [386, 483], "localn": [386, 483], "unsubscript": 386, "get_arg": [386, 472, 473, 481, 482, 483], "is_typeddict": [386, 472, 483], "forwardref": [386, 483], "expensive_mod": 386, "sometyp": [386, 478], "local_var": 386, "anothertyp": 386, "other_fun": 386, "count_word": 386, "keep_posit": 386, "abstractset": 386, "t_co": 386, "ct_co": 386, "add_unicode_checkmark": 386, "u2713": 386, "kt_co": 386, "vt_co": 386, "get_position_in_index": 386, "word_list": 386, "_vt_co": 386, "yieldtyp": 386, "sendtyp": 386, "echo_round": 386, "infinite_stream": 386, "38291": [386, 472, 483], "undecid": 386, "91896": [386, 474, 483], "92332": [386, 473, 474, 483], "94309": [386, 474, 483], "ucd": [387, 435, 476, 477, 483], "east_asian_width": [387, 483], "unistr": [387, 462], "00c7": [387, 430], "cedilla": [387, 430], "0043": [387, 430], "0327": [387, 430], "2160": 387, "0049": 387, "kd": 387, "kc": 387, "unidata_vers": 387, "ucd_3_2_0": [387, 467], "solidus": 387, "etter": 387, "ppercas": 387, "u0660": [387, 462], "rabic": 387, "umber": 387, "namealias": [387, 435], "namedsequ": 387, "junit": [388, 463, 483], "taxonomi": 388, "unittestgui": 388, "appveyor": 388, "teststringmethod": [388, 389], "test_upp": 388, "test_isupp": 388, "test_split": [388, 389], "000s": 388, "001s": 388, "test_module1": 388, "test_module2": 388, "test_modul": 388, "testclass": 388, "test_method": 388, "test_someth": [388, 389, 390, 480], "foo_test": [388, 480], "sometest": [388, 480], "bar_test": [388, 480], "test_foo": [388, 390, 480], "footest": [388, 480], "project_directori": 388, "_test": [388, 475, 483], "proj": [388, 483], "test_mypkg": 388, "functiontestcas": [388, 483], "defaultwidgetsizetestcas": 388, "test_default_widget_s": 388, "widgettestcas": 388, "test_widget_res": 388, "suffer": [388, 463, 464, 465], "texttestrunn": [388, 483], "test_widget": [388, 483], "testsometh": 388, "makesometh": 388, "makesomethingdb": 388, "deletesomethingdb": 388, "mytestcas": 388, "test_noth": 388, "test_format": 388, "skipunless": [388, 471], "test_windows_support": 388, "test_maybe_skip": 388, "external_resource_avail": 388, "005s": 388, "myskippedtestcas": 388, "test_not_run": 388, "expectedfailuretestcas": 388, "test_fail": 388, "skipunlesshasattr": 388, "numberstest": [388, 477], "test_even": [388, 477], "defaulttestresult": 388, "asserti": [388, 390, 469], "assertisnot": [388, 469], "assertisnon": [388, 469, 471], "assertisnotnon": [388, 469, 471], "assertin": [388, 469], "assertnotin": [388, 469], "assertisinst": [388, 469], "assertnotisinst": [388, 469], "assertraisesregex": [388, 473, 474, 476, 483], "assertwarn": [388, 475, 476, 483], "assertwarnsregex": [388, 475, 476, 483], "addtypeequalityfunc": [388, 469], "assertmultilineequ": [388, 469], "assertlog": [388, 472, 477, 483], "assertnolog": [388, 472, 483], "the_except": 388, "error_cod": 388, "assertraisesregexp": [388, 469, 471, 473, 474], "somewarn": 388, "legacy_funct": [388, 475], "frobnic": [388, 402], "assertgreat": [388, 469], "assertgreaterequ": [388, 469], "assertless": [388, 469], "assertlessequ": [388, 469], "assertregex": [388, 473, 474, 475, 483], "assertnotregex": [388, 473, 474], "assertcountequ": [388, 475], "assertregexpmatch": [388, 469, 473, 474, 475], "assertsequenceequ": [388, 469, 471, 483], "assertlistequ": [388, 469, 471, 483], "asserttupleequ": [388, 469, 471, 483], "assertsetequ": [388, 469, 471], "assertdictequ": [388, 469, 471], "seq_typ": 388, "assertxyy": 388, "maxdiff": [388, 475], "counttestcas": 388, "shortdescript": [388, 483], "texttestresult": [388, 474, 483], "addcleanup": [388, 389, 390, 469, 481, 483], "entercontext": [388, 473, 483], "docleanup": [388, 469, 483], "addclasscleanup": [388, 481, 483], "enterclasscontext": [388, 473, 483], "doclasscleanup": [388, 483], "isolatedasynciotestcas": [388, 473, 481, 483], "asyncsetup": [388, 481], "asyncteardown": [388, 481], "addasynccleanup": 388, "enterasynccontext": [388, 473, 483], "_async_connect": 388, "asyncconnect": [388, 481], "test_respons": 388, "status_cod": [388, 481], "on_cleanup": 388, "testfunc": 388, "_removetestatindex": [388, 477], "testrunn": 388, "defaulttestload": 388, "synthet": [388, 474, 483], "loadtestsfromtestcas": [388, 473, 483], "testcaseclass": 388, "gettestcasenam": [388, 473, 474, 483], "unoffici": [388, 478], "use_load_test": [388, 474, 478, 483], "loadtestsfromnam": [388, 469], "sampletest": 388, "sampletestcas": 388, "test_on": [388, 390], "test_two": [388, 390], "test_thre": 388, "start_dir": [388, 483], "top_level_dir": 388, "testmethodprefix": 388, "loadtestsfrom": 388, "sorttestmethodsus": 388, "suiteclass": [388, 469], "testnamepattern": 388, "collecteddur": [388, 483], "starttest": [388, 483], "stoptest": [388, 483], "tb_local": 388, "wassuccess": 388, "starttestrun": [388, 469, 483], "stoptestrun": [388, 469, 483], "adderror": [388, 483], "formatted_err": 388, "addfailur": [388, 483], "addsuccess": 388, "addskip": [388, 483], "addexpectedfailur": 388, "addunexpectedsuccess": 388, "addsubtest": [388, 483], "adddur": [388, 483], "resultclass": 388, "wd": [388, 400, 467, 469, 477, 479], "wa": 388, "_makeresult": 388, "defaulttest": [388, 477], "catchbreak": 388, "testprogram": [388, 473, 474], "testcase1": 388, "testcase2": 388, "testcase3": 388, "test_class": 388, "this_dir": 388, "package_test": 388, "basetestsuit": 388, "_errorhold": 388, "_connect": [388, 419], "createexpensiveconnectionobject": 388, "createconnect": 388, "closeconnect": 388, "addmodulecleanup": [388, 481, 483], "entermodulecontext": [388, 473, 483], "domodulecleanup": [388, 483], "installhandl": 388, "registerresult": 388, "removeresult": 388, "test_signal_handl": 388, "replay": 389, "productionclass": [389, 390], "assert_called_with": [389, 390, 483], "classname2": [389, 390], "classname1": [389, 390], "mockclass1": [389, 390], "mockclass2": [389, 390], "mock_method": [389, 390], "assert_called_once_with": [389, 390, 483], "newkey": [389, 390], "newvalu": [389, 390], "foobarbaz": 389, "wheeeeee": 389, "specc": 389, "autospec": [389, 390, 483], "mock_funct": 389, "fishi": 389, "noncallablemock": [389, 483], "noncallablemagicmock": 389, "new_cal": 389, "spec_set": [389, 390], "assret": [389, 483], "asert": [389, 483], "aseert": [389, 483], "assrt": [389, 483], "configure_mock": [389, 390, 483], "assert_cal": [389, 479, 483], "assert_called_onc": [389, 479, 483], "wow": 389, "assert_any_cal": 389, "assert_has_cal": [389, 390, 483], "any_ord": [389, 390], "mock_cal": [389, 390, 483], "assert_not_cal": [389, 478, 483], "reset_mock": [389, 479, 483], "mock_add_spec": 389, "attach_mock": [389, 390, 483], "method_cal": [389, 390], "some_mock": 389, "_get_child_mock": [389, 390], "call_count": [389, 390], "call_arg": [389, 390, 483], "w00t": 389, "call_args_list": [389, 390], "140161580456576": [389, 390], "propertymock": [389, 483], "mock_foo": [389, 390], "mockiti": 389, "this_foo": 389, "asyncmock": [389, 390, 481, 483], "async_func": 389, "asyncmockmixin": 389, "_mock_cal": 389, "exampleclass": 389, "sync_foo": 389, "async_foo": 389, "a_mock": 389, "assert_await": 389, "coroutine_mock": 389, "assert_awaited_onc": [389, 390], "assert_awaited_with": 389, "assert_awaited_once_with": 389, "assert_any_await": 389, "assert_has_await": [389, 483], "await_args_list": [389, 483], "assert_not_await": 389, "await_count": 389, "await_arg": 389, "bang": 389, "not_a_child": 389, "thing1": 389, "thing2": 389, "normal_argu": 389, "mock_class": 389, "mockclass": 389, "mock_th": 389, "mock_stdout": 389, "non_existing_attribut": 389, "class_method": 389, "in_dict": 389, "testsampl": 389, "test_sampl": 389, "patched_foo": 389, "first_patch": 389, "second_patch": 389, "test_funct": 389, "mock_exit": 389, "new_mock": [389, 390], "mytest": [389, 390], "patcher1": 389, "patcher2": 389, "stopal": [389, 483], "mock_ord": 389, "foo_on": 389, "foo_two": 389, "static_method": [389, 390], "mock1": 389, "mock2": 389, "foobl": [389, 390], "__getinitargs__": 389, "__getformat__": [389, 483], "call_list": [389, 390], "kall": [389, 466, 483], "assert_used_with": 389, "assert_used_once_with": 389, "abstracthttphandl": [389, 479, 483], "_noncallablemock__get_return_valu": 389, "_noncallablemock__get_side_effect": 389, "_noncallablemock__return_value_doc": 389, "_noncallablemock__set_return_valu": 389, "_noncallablemock__set_side_effect": 389, "my_mock": 389, "read_data": [389, 390, 446, 483], "bibbl": 389, "assret_called_once_with": 389, "assret_called_with": 389, "has_data": [389, 395, 477], "mock_request": 389, "somethingfortest": 389, "submock": 389, "attribute1": 389, "not_submock": 389, "sample_nam": 389, "new_attribut": 389, "attribute2": 389, "order_mock": 389, "order_mock_inst": 389, "mock_inst": 390, "some_method": [390, 419], "old_method": 390, "data_dict": 390, "open_side_effect": 390, "file3": 390, "file_handl": 390, "backendprovid": 390, "get_endpoint": 390, "create_cal": 390, "start_cal": 390, "mock_backend": 390, "mock_respons": 390, "mock_dat": 390, "mocksomeclass": 390, "not_a_test": 390, "grob": 390, "mock_frob": 390, "copy_call_arg": 390, "copyingmock": 390, "mock_bar": 390, "mock_spam": 390, "create_patch": 390, "my_dict": 390, "mymock": 390, "has_been_cal": 390, "adaptor": 390, "whilst": [390, 483], "blip": 390, "expected_cal": 390, "fifti": [390, 426], "some_obj": 390, "match_foo": 390, "match_wrong": 390, "pyhamcrest": 390, "hamcrest": 390, "match_equ": 390, "contenttooshorterror": [393, 395], "urlretriev": [393, 395, 399, 483], "gopher": 394, "hdl": [394, 426], "mailto": [394, 426], "mms": 394, "prospero": 394, "rsync": 394, "rtsp": 394, "rtsps": [394, 483], "rtspu": 394, "sftp": 394, "shttp": 394, "snew": 394, "wai": 394, "urlpars": [394, 399, 468, 469, 470, 475, 479, 483], "urlstr": 394, "allow_frag": 394, "netloc": [394, 469, 475], "parseresult": [394, 469, 475, 483], "1808": [394, 478, 483], "7eguido": 394, "max_num_field": [394, 483], "doseq": 394, "urlunpars": 394, "2396": [394, 469, 478, 480, 483], "c0": [394, 483], "urlunsplit": 394, "urljoin": [394, 478, 483], "urldefrag": [394, 475], "defens": [394, 483], "splitresult": [394, 483], "defragresult": [394, 475, 483], "defragresultbyt": [394, 483], "parseresultbyt": [394, 475, 483], "splitresultbyt": [394, 483], "unreserv": 394, "quote_from_byt": [394, 483], "20ni": 394, "b1o": 394, "quote_plus": [394, 475], "2fel": 394, "unquote_plus": 394, "unquote_to_byt": [394, 483], "quote_via": [394, 478, 483], "std66": 394, "2732": [394, 469, 475], "urn": [394, 398], "2368": 394, "1738": 394, "no_proxi": [395, 483], "cadefault": 395, "addinfourl": [395, 483], "fancyurlopen": [395, 483], "_proxi": [395, 483], "handler_ord": 395, "pathname2url": 395, "url2pathnam": 395, "firefox": [395, 403, 467, 474, 483], "i686": 395, "gecko": 395, "20071127": 395, "camel": [395, 468, 475], "request_host": 395, "cern": 395, "ncsa": 395, "uiuc": 395, "is_authent": [395, 483], "basicauth": 395, "passwd_mgr": 395, "update_authent": 395, "40x": 395, "unredirect": 395, "remove_head": [395, 477], "set_proxi": [395, 419, 477], "header_valu": 395, "get_host": [395, 477], "get_selector": [395, 477], "is_unverifi": [395, 477], "http_respons": 395, "http_error_404": 395, "_open": [395, 483], "http_error_": 395, "_error": 395, "_request": 395, "_respons": 395, "default_open": 395, "unknown_open": 395, "add_par": 395, "adopt": [395, 432, 463, 464, 465, 468, 482, 483], "http_error_default": 395, "redirect_request": 395, "newurl": 395, "http_error_30": 395, "http_error_301": 395, "http_error_302": 395, "http_error_303": 395, "http_error_307": 395, "http_error_308": 395, "find_user_password": [395, 483], "authuri": 395, "http_error_auth_req": 395, "authreq": 395, "http_error_401": 395, "http_error_407": 395, "http_open": 395, "https_open": 395, "file_open": 395, "data_open": 395, "2397": 395, "ftp_open": 395, "setmaxconn": 395, "https_respons": 395, "equiv": 395, "xhtm": 395, "ngot": 395, "auth_handl": 395, "pdq": 395, "mahler": 395, "8092": 395, "klem": 395, "kadidd": 395, "ehopp": 395, "proxy_handl": 395, "3128": 395, "proxy_auth_handl": 395, "contact": [395, 407, 483], "addhead": 395, "musi": [395, 396], "requestb": 395, "xrbl82xr": 395, "reporthook": 395, "local_filenam": 395, "urlcleanup": [395, 483], "open_unknown": 395, "30x": [395, 476], "maxtri": 395, "prompt_user_passwd": 395, "550": 395, "_urlopen": 395, "robotfilepars": [396, 479, 483], "robotstxt": 396, "set_url": 396, "can_fetch": [396, 483], "userag": 396, "crawl_delay": [396, 483], "crawl": [396, 479, 483], "request_r": [396, 483], "requestr": 396, "site_map": [396, 483], "sitemap": 396, "rp": 396, "rrate": 396, "lanc": [397, 426], "ellinghous": [397, 426], "jansen": [397, 426, 464, 465, 478, 483], "in_fil": 397, "out_fil": [397, 413, 483], "uuid1": [398, 467, 480, 483], "uuid3": [398, 467, 483], "uuid4": [398, 467, 483], "uuid5": [398, 467, 483], "is_saf": [398, 480, 483], "safeuuid": [398, 483], "bytes_l": 398, "time_low": 398, "time_mid": 398, "time_hi_vers": 398, "clock_seq_hi_vari": 398, "clock_seq_low": 398, "12345678": 398, "567812345678": 398, "12345678123456781234567812345678": 398, "x34": 398, "x56": [398, 462], "x78": 398, "0x12345678": 398, "0x1234": 398, "0x5678": 398, "0x12": 398, "0x34": 398, "0x567812345678": 398, "0x12345678123456781234567812345678": 398, "clock_seq": 398, "reserved_nc": 398, "rfc_4122": 398, "reserved_microsoft": 398, "reserved_futur": 398, "getnod": [398, 480, 483], "administ": [398, 462, 468, 480, 483], "namespace_dn": [398, 467], "namespace_url": 398, "namespace_oid": 398, "namespace_x500": 398, "ncs": 398, "x500": 398, "a8098c1a": [398, 467], "f86e": [398, 467], "11da": [398, 467], "bd1a": [398, 467], "00112444be1e": [398, 467], "6fa459ea": [398, 467], "ee8a": [398, 467], "3ca4": [398, 467], "894e": [398, 467], "db77e160355": [398, 467], "16fd2706": [398, 467], "8baf": [398, 467], "433b": [398, 467], "82eb": [398, 467], "8c7fada847da": [398, 467], "886313e1": [398, 467], "3b8a": [398, 467], "5372": [398, 467], "9b90": [398, 467], "0c9aee199e5d": [398, 467], "00010203": 398, "0405": 398, "0607": 398, "0809": 398, "0a0b0c0d0e0f": 398, "x05": 398, "x0e": 398, "x0f": 398, "movabl": 399, "copyabl": [399, 483], "python35": [399, 453], "myenv": 399, "dep": [399, 483], "env_dir": 399, "powershel": [399, 461, 481, 483], "executionpolici": 399, "remotesign": 399, "currentus": 399, "zsh": 399, "csh": [399, 453, 477], "tcsh": [399, 466], "virtual_env": [399, 478], "system_site_packag": 399, "with_pip": [399, 477], "upgrade_dep": 399, "builder": [399, 410, 411, 413], "ensure_directori": [399, 483], "create_configur": 399, "setup_python": 399, "setup_script": 399, "post_setup": 399, "__venv_dir__": 399, "install_script": 399, "env_nam": 399, "__venv_name__": [399, 482], "__venv_prompt__": [399, 482, 483], "inc_path": 399, "lib_path": 399, "bin_path": 399, "bin_nam": 399, "__venv_bin_name__": 399, "env_ex": 399, "__venv_python__": 399, "env_exec_cmd": 399, "upgrade_depend": [399, 483], "redirector": [399, 480, 483], "extendedenvbuild": 399, "easy_instal": [399, 474], "nodist": 399, "nopip": 399, "install_setuptool": 399, "install_pip": 399, "binpath": 399, "distpath": 399, "ez_setup": 399, "pred": 399, "system_sit": 399, "use_symlink": 399, "warrant": [400, 470], "filterwarn": [400, 455, 463, 465, 483], "resetwarn": [400, 475], "user_n": 400, "fxn": 400, "skip_file_prefix": [400, 483], "deprecated_api": 400, "_warn_skip": 400, "one_way": 400, "r_luxury_yacht": 400, "t_wobbler_mangrov": 400, "another_way": 400, "__warningregistry__": [400, 483], "wave_format_extens": [401, 483], "ksdataformat_subtype_pcm": 401, "__callback__": [402, 477], "callableproxytyp": [402, 483], "getweakrefcount": 402, "getweakref": 402, "keyref": [402, 467], "valueref": [402, 467], "0x7fc859830220": 402, "lifecycl": [402, 469, 477], "referencetyp": [402, 483], "do_something_us": 402, "extendedref": 402, "__counter": 402, "_id2obj_dict": 402, "id2obj": 402, "kenni": [402, 477], "newobj": [402, 483], "_final": 402, "unloading_modul": 402, "autorais": [403, 467], "open_new": [403, 467], "open_new_tab": [403, 467], "epiphani": 403, "kfmclient": 403, "konqueror": [403, 467, 483], "kfm": 403, "genericbrows": 403, "elink": [403, 467], "w3m": 403, "windowsdefault": 403, "macosxosascript": [403, 483], "safari": 403, "chrome": [403, 476, 483], "chromium": [403, 476], "kde": 403, "kdedir": 403, "mosaic": [403, 474, 483], "galeon": [403, 474, 483], "skipston": [403, 474, 483], "iceap": [403, 474, 483], "neglect": 405, "closekey": 405, "hkey": 405, "computernam": 405, "createkeyex": [405, 469], "key_writ": 405, "subkey": [405, 461], "deletekeyex": [405, 469], "key_wow64_64key": 405, "wow64": 405, "setvalueex": [405, 483], "reg_expand_sz": 405, "windir": 405, "flushkey": 405, "flusher": 405, "hkey_us": 405, "se_restore_privileg": 405, "regloadkey": 405, "key_read": 405, "openkeyex": 405, "1601": 405, "queryvalueex": [405, 483], "querykey": 405, "sebackupprivileg": 405, "security_attribut": 405, "reg_sz": 405, "key_set_valu": 405, "dsiablereflectionkey": 405, "hkey_classes_root": 405, "subordin": [405, 469], "hkey_performance_data": 405, "hkey_current_config": 405, "hkey_dyn_data": 405, "key_all_access": 405, "standard_rights_requir": 405, "key_query_valu": 405, "key_create_sub_key": 405, "key_enumerate_sub_key": 405, "key_notifi": 405, "key_create_link": 405, "standard_rights_writ": 405, "standard_rights_read": 405, "key_execut": 405, "key_wow64_32key": 405, "reg_binari": [405, 483], "reg_dword": 405, "reg_dword_little_endian": 405, "reg_dword_big_endian": 405, "reg_link": 405, "reg_multi_sz": [405, 483], "reg_non": 405, "reg_qword": [405, 479, 483], "reg_qword_little_endian": 405, "reg_resource_list": 405, "reg_full_resource_descriptor": 405, "reg_resource_requirements_list": 405, "speaker": 406, "hertz": 406, "playsound": [406, 479, 483], "messagebeep": [406, 479, 483], "mb_ok": 406, "mb_iconasterisk": 406, "mb_iconexclam": 406, "mb_iconhand": 406, "mb_iconquest": 406, "snd_filenam": 406, "snd_alia": 406, "snd_nodefault": 406, "systemasterisk": 406, "systemexclam": 406, "systemhand": 406, "systemquest": 406, "snd_loop": 406, "snd_async": 406, "snd_memori": [406, 483], "snd_purg": 406, "snd_nostop": 406, "snd_nowait": 406, "systemdefault": 406, "wsgienviron": 407, "guess_schem": 407, "url_schem": 407, "fastcgi": 407, "request_uri": 407, "include_queri": 407, "application_uri": 407, "path_info": 407, "query_str": [407, 473], "shift_path_info": 407, "setup_testing_default": 407, "http_host": 407, "make_serv": [407, 467], "simple_app": 407, "start_respons": [407, 475, 483], "ret": 407, "is_hop_by_hop": 407, "hop": 407, "filewrapp": [407, 473, 481, 483], "filelik": 407, "wsgiserv": [407, 483], "wsgirequesthandl": [407, 483], "demo_app": 407, "set_app": 407, "get_app": 407, "get_environ": 407, "base_environ": 407, "get_stderr": 407, "middlewar": 407, "lint": [407, 474, 483], "validator_app": 407, "cgihandl": 407, "basecgihandl": 407, "run_onc": 407, "iiscgihandl": 407, "allowpathinfo": 407, "metabas": 407, "allowpathinfoforscriptmap": 407, "path_transl": 407, "iis7": 407, "simplehandl": [407, 462], "scgi": 407, "get_stdin": 407, "add_cgi_var": 407, "_write": 407, "_flush": 407, "inputstream": [407, 483], "errorstream": 407, "wsgi_multithread": 407, "wsgi_multiprocess": 407, "wsgi_run_onc": 407, "os_environ": 407, "server_softwar": 407, "origin_serv": 407, "get_schem": 407, "setup_environ": 407, "wsgi_file_wrapp": 407, "log_except": 407, "error_output": 407, "error_status": 407, "error_head": 407, "error_bodi": 407, "file_wrapp": [407, 483], "http_version": 407, "read_environ": [407, 475], "startrespons": 407, "wsgiapplic": 407, "hello_world_app": 407, "mime_typ": 407, "1014": 408, "microsystem": [408, 426], "1832": 408, "pack_typ": 408, "pack_uint": 408, "pack_int": 408, "pack_enum": 408, "pack_bool": 408, "pack_uhyp": 408, "pack_hyp": 408, "pack_float": 408, "pack_doubl": 408, "pack_fstr": 408, "pack_fopaqu": 408, "pack_str": 408, "pack_opaqu": 408, "pack_byt": 408, "pack_list": 408, "pack_item": 408, "pack_farray": 408, "pack_array": 408, "get_posit": 408, "set_posit": 408, "unpack_typ": 408, "unpack_float": 408, "unpack_doubl": 408, "unpack_fstr": 408, "unpack_fopaqu": 408, "unpack_str": 408, "unpack_opaqu": 408, "unpack_byt": 408, "unpack_list": 408, "unpack_item": 408, "unpack_farray": 408, "unpack_array": 408, "conversionerror": [408, 483], "billion": [409, 483], "laugh": [409, 476, 483], "blowup": 409, "bomb": [409, 422, 483], "expat_vers": 409, "parseerror": [409, 413, 469, 475, 483], "52425": [409, 483], "luck": 410, "getdomimplement": [410, 411], "omg": [410, 411], "registerdomimplement": 410, "python_dom": 410, "hasfeatur": 410, "empty_namespac": 410, "namespaceuri": [410, 416], "xml_namespac": 410, "xmlns_namespac": 410, "xhtml_namespac": 410, "nodetyp": [410, 411], "createdocu": [410, 411], "qualifiednam": 410, "createdocumenttyp": 410, "element_nod": 410, "attribute_nod": 410, "text_nod": [410, 411], "cdata_section_nod": 410, "entity_nod": 410, "processing_instruction_nod": [410, 411], "comment_nod": 410, "document_nod": 410, "document_type_nod": 410, "notation_nod": 410, "parentnod": 410, "previouss": 410, "nextsibl": 410, "childnod": [410, 411, 462], "firstchild": 410, "lastchild": 410, "localnam": [410, 415, 416, 483], "nodevalu": 410, "hasattribut": 410, "haschildnod": 410, "issamenod": 410, "uncontroversi": 410, "appendchild": [410, 411, 462], "newchild": 410, "insertbefor": [410, 462], "refchild": 410, "removechild": [410, 462], "oldchild": 410, "replacechild": 410, "clonenod": [410, 483], "getelementsbytagnam": [410, 411, 462], "getelementsbytagnamen": 410, "internalsubset": 410, "documentel": [410, 411, 462], "createel": 410, "createelementn": 410, "createtextnod": [410, 411], "createcom": 410, "createprocessinginstruct": 410, "createattribut": 410, "setattributenod": 410, "createattributen": 410, "hasattributen": 410, "getattribut": [410, 412, 428], "getattributenod": 410, "getattributen": 410, "getattributenoden": 410, "removeattribut": 410, "notfounderr": 410, "removeattributenod": [410, 483], "oldattr": 410, "removeattributen": 410, "setattribut": 410, "newattr": [410, 464], "inuseattributeerr": 410, "setattributenoden": 410, "setattributen": 410, "domexcept": [410, 411], "domstringsizeerr": 410, "hierarchyrequesterr": 410, "indexsizeerr": 410, "invalidaccesserr": 410, "invalidcharactererr": 410, "invalidmodificationerr": 410, "invalidstateerr": 410, "namespaceerr": 410, "removenameditem": 410, "notsupportederr": 410, "nodataallowederr": 410, "nomodificationallowederr": 410, "syntaxerr": 410, "wrongdocumenterr": 410, "domstring_size_err": 410, "hierarchy_request_err": 410, "index_size_err": 410, "inuse_attribute_err": 410, "invalid_access_err": 410, "invalid_character_err": 410, "invalid_modification_err": 410, "invalid_state_err": 410, "namespace_err": 410, "not_found_err": 410, "not_supported_err": 410, "no_data_allowed_err": 410, "no_modification_allowed_err": 410, "syntax_err": 410, "wrong_document_err": 410, "domstr": [410, 411], "somevalu": 410, "anothervalu": 410, "_get_somevalu": 410, "_get_anothervalu": 410, "_set_anothervalu": 410, "corba": 410, "profici": 411, "dom1": 411, "datasourc": 411, "dom2": 411, "dom3": 411, "myxml": 411, "filename_or_fil": 411, "grasp": 411, "impl": [411, 483], "newdoc": 411, "some_tag": 411, "top_el": 411, "writexml": [411, 481], "addind": 411, "newl": 411, "subnod": 411, "prologu": 411, "toxml": [411, 412, 462, 465, 481], "toprettyxml": [411, 465, 481], "slideshow": 411, "handleslideshow": 411, "handleslideshowtitl": 411, "handletoc": 411, "handleslid": 411, "handleslidetitl": 411, "handlepoint": 411, "_get_foo": 411, "_set_foo": 411, "domtimestamp": 411, "entityrefer": 411, "make_pars": [412, 414, 416, 462, 483], "feature_external_g": [412, 414, 415], "setfeatur": [412, 414, 416], "sales_item": 412, "expandnod": 412, "start_docu": 412, "end_docu": 412, "processing_instruct": 412, "ignorable_whitespac": 412, "documentfactori": 412, "sax2dom": 412, "stream_or_str": 412, "default_bufs": 412, "getev": 412, "celementtre": [413, 467, 475, 476, 483], "fictiv": 413, "country_data": 413, "liechtenstein": 413, "gdppc": 413, "141100": 413, "austria": 413, "switzerland": 413, "singapor": 413, "59900": 413, "malaysia": 413, "panama": 413, "13600": 413, "costa": 413, "rica": 413, "colombia": 413, "getroot": [413, 467], "country_data_as_str": 413, "attrib": [413, 467, 483], "read_ev": 413, "mytag": 413, "sometext": 413, "0x7fa66db2be58": 413, "iterpars": [413, 477, 483], "new_rank": 413, "subel": [413, 475], "sometag": 413, "fiction": 413, "actor": [413, 441, 481], "lancelot": [413, 442], "archi": 413, "leach": 413, "sir": [413, 441, 471, 481], "gunther": 413, "clement": [413, 479, 483], "xml_text": 413, "real_person": 413, "countrydata": 413, "grand": 413, "dublin": 413, "purl": 413, "grandchildren": [413, 483], "canonic": [413, 481, 483], "xml_data": 413, "from_fil": [413, 422, 425, 479, 483], "normalis": [413, 483], "freedom": [413, 436], "c14n_output": 413, "inputfil": 413, "with_com": 413, "strip_text": 413, "rewrite_prefix": 413, "qname_aware_tag": 413, "qname_aware_attr": 413, "exclude_attr": 413, "exclude_tag": 413, "fromstringlist": [413, 475], "isel": 413, "register_namespac": [413, 469, 475], "xml_declar": [413, 469, 483], "default_namespac": [413, 469, 483], "short_empty_el": [413, 417, 477], "tostringlist": [413, 475, 477, 483], "xmlid": 413, "elementinclud": [413, 467], "xi": 413, "xpointer": 413, "para": 413, "default_load": 413, "base_url": 413, "max_depth": 413, "itertext": [413, 469, 475, 483], "unprefix": [413, 483], "findtext": [413, 483], "iterfind": [413, 475], "makeel": 413, "convey": 413, "perceptu": 413, "reorder_attribut": 413, "_setroot": 413, "0xb77e6fac": 413, "0xb77ec26c": 413, "0xb77ec2ac": 413, "0xb77ec1cc": 413, "text_or_uri": 413, "element_factori": 413, "comment_factori": 413, "pi_factori": 413, "insert_com": 413, "insert_pi": 413, "pis": 413, "pubid": 413, "start_n": [413, 481, 483], "end_n": [413, 481, 483], "c14nwritertarget": 413, "attrs_dict": 413, "maxdepth": 413, "examplexml": 413, "parser_list": [414, 483], "create_pars": [414, 416], "filename_or_stream": 414, "saxparseexcept": [414, 415], "saxnotrecognizedexcept": [414, 416], "confront": [414, 465], "saxnotsupportedexcept": [414, 416], "focal": 414, "getexcept": 414, "feature_namespac": 415, "feature_namespace_prefix": 415, "feature_string_intern": 415, "feature_valid": 415, "feature_external_p": 415, "all_featur": 415, "property_lexical_handl": 415, "property_declaration_handl": 415, "sax2lib": 415, "declhandl": 415, "property_dom_nod": 415, "property_xml_str": 415, "all_properti": 415, "setdocumentloc": 415, "documenthandl": [415, 416], "startdocu": 415, "enddocu": 415, "unrecover": [415, 483], "startprefixmap": 415, "endprefixmap": 415, "startel": [415, 416, 462], "endel": [415, 462], "startelementn": [415, 416], "endelementn": 415, "ignorablewhitespac": 415, "skippedent": 415, "notationdecl": 415, "unparsedentitydecl": 415, "resolveent": [415, 416], "fatalerror": 415, "startdtd": [415, 466], "public_id": 415, "system_id": [415, 416], "enddtd": 415, "startcdata": 415, "endcdata": 415, "attributesimpl": 416, "attributesnsimpl": 416, "getcontenthandl": 416, "setcontenthandl": [416, 462], "getdtdhandl": 416, "setdtdhandl": 416, "getentityresolv": 416, "setentityresolv": 416, "geterrorhandl": 416, "seterrorhandl": 416, "getfeatur": 416, "propertynam": 416, "formed": 416, "getcolumnnumb": 416, "getlinenumb": 416, "getpublicid": 416, "getsystemid": 416, "setpublicid": 416, "setsystemid": 416, "setencod": 416, "setbytestream": 416, "bytefil": 416, "getbytestream": 416, "setcharacterstream": 416, "charfil": 416, "getcharacterstream": 416, "getlength": 416, "gettyp": [416, 467], "getvaluebyqnam": 416, "getnamebyqnam": 416, "getqnamebynam": 416, "getqnam": 416, "amp": [417, 475], "quoteattr": 417, "xmlgener": 417, "xmlfilterbas": 417, "prepare_input_sourc": 417, "use_datetim": [419, 467], "use_builtin_typ": [419, 420, 482], "safetransport": [419, 483], "ontosi": 419, "i4": 419, "i8": [419, 468], "biginteg": 419, "2147483648": 419, "2147483647": [419, 435, 467], "nil": [419, 465], "bigdecim": 419, "listmethod": [419, 420], "methodsignatur": [419, 420], "methodhelp": [419, 420], "register_funct": [419, 420, 480, 483], "python_logo": 419, "fetched_python_logo": 419, "faultcod": [419, 483], "faultstr": 419, "errmsg": 419, "boxcar": 419, "register_multicall_funct": [419, 420], "methodrespons": 419, "betti": 419, "userland": 419, "getstatenam": 419, "proxiedtransport": 419, "proxy_head": 419, "requesthandl": 420, "simplexmlrpcrequesthandl": [420, 466, 469], "logrequest": 420, "register_inst": 420, "allow_dotted_nam": 420, "_dispatch": 420, "intrud": 420, "register_introspection_funct": 420, "rpc_path": [420, 467], "rpc2": [420, 467], "adder_funct": 420, "exampleservic": 420, "getdata": 420, "currenttim": 420, "getcurrenttim": 420, "nkeyboard": 420, "request_text": 420, "docxmlrpcrequesthandl": 420, "set_server_titl": 420, "server_titl": 420, "set_server_nam": 420, "set_server_document": 420, "server_document": 420, "pyz": [421, 478, 483], "mainfn": 421, "deflat": [421, 424, 483], "create_arch": [421, 480, 483], "get_interpret": 421, "old_arch": 421, "new_arch": 421, "pyzw": [421, 483], "pkzip": [422, 423, 462], "zip64": [422, 467, 483], "badzipfil": [422, 483], "largezipfil": 422, "getinfo": 422, "infolist": 422, "is_zipfil": [422, 469, 483], "zip_stor": [422, 483], "zip_defl": [422, 452], "zip_bzip2": 422, "zip_lzma": 422, "phil": [422, 423, 468, 483], "katz": [422, 423], "allowzip64": [422, 477, 483], "strict_timestamp": [422, 483], "metadata_encod": [422, 483], "2107": [422, 483], "myzip": 422, "namelist": 422, "force_zip64": [422, 483], "zipextfil": [422, 475, 483], "file_s": [422, 464], "appreci": [422, 426], "printdir": 422, "setpassword": 422, "testzip": 422, "compress_typ": [422, 469], "writestr": [422, 469], "zinfo_or_arcnam": 422, "zinfo_or_directori": 422, "grandchild": 422, "zipp": [422, 483], "writepi": [422, 477], "filterfunc": [422, 477], "zf": 422, "myprog": 422, "notest": 422, "testal": [422, 468], "bogus": [422, 469, 483], "create_system": 422, "create_vers": 422, "extract_vers": 422, "flag_bit": [422, 483], "internal_attr": 422, "external_attr": [422, 483], "header_offset": 422, "compress_s": 422, "ahlstrom": [423, 462, 465], "zipimporterror": 423, "archivepath": 423, "8467": [423, 465], "jwzthread": [423, 465], "adler": [424, 426], "max_wbit": 424, "z_best_spe": 424, "z_best_compress": 424, "z_no_compress": 424, "z_default_compress": 424, "compressobj": [424, 483], "memlevel": 424, "def_mem_level": 424, "z_default_strategi": 424, "zdict": [424, 483], "z_filter": 424, "z_huffman_on": 424, "z_rle": 424, "z_fix": 424, "def_buf_s": 424, "decompressobj": 424, "z_no_flush": 424, "z_partial_flush": 424, "z_sync_flush": 424, "z_full_flush": 424, "z_block": 424, "z_finish": 424, "unconsumed_tail": 424, "zlib_vers": 424, "zlib_runtime_vers": [424, 476, 483], "los_angel": [425, 482], "dt_add": 425, "dt_utc": 425, "zoneinfonotfounderror": 425, "tzpath": [425, 456, 483], "reset_tzpath": 425, "pythontzpath": 425, "invalidtzpathwarn": [425, 483], "fobj": [425, 438], "no_cach": 425, "only_key": 425, "new_york": 425, "asia": 425, "tokyo": 425, "cldr": 425, "kwajalein": 425, "01t03": 425, "europe_berlin_pkl": 425, "berlin": 425, "europe_berlin_pkl_nc": 425, "available_timezon": [425, 483], "posixrul": 425, "cautionari": [425, 466], "1990": 426, "reston": 426, "pythonlab": [426, 462, 464], "opensourc": 426, "agreement": [426, 462, 481], "license": 426, "herebi": 426, "nonexclus": 426, "royalti": 426, "herein": 426, "merchant": 426, "infring": 426, "consequenti": 426, "partnership": 426, "ventur": 426, "trademark": 426, "endors": [426, 483], "saratoga": 426, "santa": 426, "clara": 426, "95051": 426, "1895": 426, "preston": [426, 480], "20191": [426, 483], "1013": 426, "feder": 426, "intellectu": 426, "commonwealth": 426, "virginia": 426, "notwithstand": [426, 462], "netherland": 426, "profit": 426, "tortious": 426, "_random": [426, 483], "sci": 426, "hiroshima": 426, "mat": [426, 469, 482, 483], "mt": 426, "mt2002": 426, "emt19937ar": 426, "mt19937": 426, "takuji": 426, "makoto": [426, 483], "init_genrand": 426, "init_by_array": 426, "init_key": 426, "key_length": 426, "redistribut": [426, 483], "contributor": [426, 470, 483], "holder": [426, 469, 483], "exemplari": 426, "procur": 426, "tort": 426, "emt": 426, "1996": 426, "rush": [426, 462], "timothi": 426, "malley": [426, 465], "timo": [426, 483], "alum": 426, "industri": 426, "whielacronx": 426, "mojam": 426, "montanaro": [426, 462, 465, 466, 467, 468], "bioreason": 426, "automatrix": 426, "cathedr": 426, "republ": 426, "laboratori": 426, "sublicens": 426, "sell": [426, 467], "furnish": 426, "noninfring": 426, "doug": [426, 483], "marek": 426, "majkowski": 426, "dan": [426, 466, 467, 475, 476, 477, 478, 482, 483], "popcount": 426, "majek": 426, "csiphash": 426, "supercop": 426, "crypto_auth": 426, "djb": 426, "little2": 426, "131002": 426, "siphash": [426, 477, 483], "gay": [426, 469, 471, 472, 477, 479, 480, 483], "20220517033456": 426, "netlib": 426, "lucent": 426, "reproduct": 426, "licensor": 426, "authorship": 426, "editori": [426, 462], "verbal": 426, "conspicu": 426, "perpetu": [426, 477], "irrevoc": 426, "patent": 426, "institut": 426, "litig": 426, "counterclaim": 426, "lawsuit": 426, "alleg": 426, "contributori": 426, "promin": [426, 470, 483], "addendum": 426, "constru": 426, "grossli": 426, "goodwil": 426, "stoppag": 426, "malfunct": 426, "indemn": 426, "indemnifi": 426, "defend": [426, 483], "clark": [426, 476, 483], "loup": 426, "gailli": 426, "misrepres": 426, "jloup": 426, "madler": 426, "alumni": 426, "caltech": 426, "owen": 426, "_decim": [426, 456, 476, 483], "stefan": [426, 469, 473, 476, 477, 478, 479, 480, 481, 482, 483], "krah": [426, 469, 476, 479, 483], "xmltestdata": 426, "c14n2": 426, "ercim": 426, "keio": 426, "beihang": 426, "sox": 426, "g771": 426, "revenu": 426, "2550": 426, "garcia": [426, 473, 474, 483], "94043": 426, "uvloop": [426, 478, 479, 483], "magicstack": [426, 483], "incarn": 427, "if_stmt": [427, 431], "while_stmt": [427, 431], "for_stmt": [427, 431], "try_stmt": [427, 431], "with_stmt": [427, 431], "match_stmt": [427, 431], "funcdef": 427, "async_with_stmt": 427, "async_for_stmt": 427, "async_funcdef": 427, "stmt_list": [427, 437], "compound_stmt": [427, 431, 437], "simple_stmt": [427, 431], "assignment_express": [427, 430, 431], "target_list": [427, 430, 436], "starred_list": [427, 430], "try1_stmt": 427, "try2_stmt": 427, "try3_stmt": 427, "with_stmt_cont": 427, "with_item": [427, 431], "hit_except": 427, "subject_expr": [427, 431], "case_block": [427, 431], "star_named_express": [427, 431], "named_express": [427, 431], "subpattern": [427, 441, 483], "636": [427, 441, 472], "ebnf": [427, 431], "open_sequence_pattern": [427, 431], "as_pattern": [427, 431], "or_pattern": [427, 431], "literal_pattern": [427, 431], "capture_pattern": [427, 431], "wildcard_pattern": [427, 431], "value_pattern": [427, 431], "sequence_pattern": [427, 431], "mapping_pattern": [427, 431], "class_pattern": [427, 431], "closed_pattern": [427, 431], "signed_numb": [427, 431], "name_or_attr": [427, 431], "name1": [427, 467], "name2": [427, 467], "maybe_sequence_pattern": [427, 431], "maybe_star_pattern": [427, 431], "star_pattern": [427, 431], "p3": 427, "items_pattern": [427, 431], "key_value_pattern": [427, 431], "double_star_pattern": [427, 431], "pattern_argu": 427, "positional_pattern": [427, 431], "keyword_pattern": [427, 431], "parameter_list": [427, 430], "defparamet": 427, "parameter_list_no_poson": 427, "parameter_list_stararg": 427, "614": [427, 482, 483], "whats_on_the_telli": 427, "570": [427, 481, 483], "3107": [427, 441, 470, 478, 480], "param1": 427, "param2": 427, "do_stuff": 427, "some_coroutin": 427, "suite2": 427, "aenter": 427, "aexit": 427, "amax": 427, "overly_gener": 427, "simpletypevar": 427, "typevarwithbound": 427, "typevarwithconstraint": 427, "simpletypevartupl": 427, "simpleparamspec": 427, "type_params_of_func": 427, "liberti": 427, "some_default": 427, "default_of_arg": 427, "bound_of_t": 427, "type_params_of_bag": 427, "type_params_of_listorset": 427, "value_of_listorset": 427, "neumann": 428, "illus": [428, 475], "affix": [428, 483], "cell_cont": 428, "codeobject": [428, 473, 483], "0x2000": 428, "0x10": 428, "0x1000": 428, "co_posit": [428, 473], "precari": 428, "parentclass": 428, "ocert": [428, 455], "asymmetri": 428, "verbosemodul": 428, "__objclass__": 428, "unlist": 428, "philosoph": 428, "australianphilosoph": 428, "bruce": [428, 483], "mysubclass": 428, "__classcell__": [428, 479, 481, 483], "3135": [428, 469, 470], "boundless": 428, "class_of_obj": 428, "breakfast": 428, "__rtruediv__": 428, "__rfloordiv__": [428, 472, 483], "a_tupl": 428, "__release_buffer__": [428, 483], "unbind": [429, 483], "simpleexpr": 429, "repair": [429, 461, 483], "offend": [429, 443, 463], "bnf": [430, 434, 463], "othernam": [430, 462], "enclosur": 430, "parenth_form": 430, "list_display": 430, "dict_display": 430, "set_display": 430, "generator_express": 430, "yield_atom": 430, "__spam": [430, 440], "_ham__spam": 430, "stringliter": 430, "bytesliter": 430, "imagnumb": 430, "starred_express": [430, 431, 436], "unparenthes": [430, 482, 483], "comp_for": 430, "or_test": 430, "comp_it": 430, "comp_if": 430, "dict_item_list": 430, "dict_comprehens": 430, "dict_item": 430, "or_expr": [430, 435], "prevail": [430, 483], "yield_express": [430, 435, 436], "expression_list": [430, 436, 437], "yield_from": [430, 473, 483], "subiter": [430, 476], "attributeref": [430, 436], "slice_list": 430, "slice_item": 430, "proper_slic": 430, "positional_argu": 430, "starred_and_keyword": 430, "keywords_argu": 430, "positional_item": 430, "keyword_item": 430, "x1": [430, 441, 472, 474, 483], "x3": 430, "x4": 430, "ym": 430, "await_expr": 430, "u_expr": 430, "m_expr": 430, "a_expr": 430, "shift_expr": [430, 431], "and_expr": 430, "xor_expr": 430, "comp_oper": 430, "op1": 430, "op2": 430, "opn": 430, "reflex": 430, "and_test": 430, "not_test": 430, "walrus": [430, 481, 483], "conditional_express": [430, 435], "lambda_expr": 430, "starred_item": 430, "expr4": 430, "expr5": 430, "roundoff": 430, "0041": 430, "precompos": 430, "u00c7": 430, "u0043": 430, "u0327": 430, "_pypegen_pars": 431, "reserved_keyword": 431, "n_keyword_list": 431, "start_rul": 431, "file_rul": 431, "interactive_rul": 431, "eval_rul": 431, "py_func_type_input": 431, "func_type_rul": 431, "grammat": [431, 483], "invalid_": 431, "rule_nam": 431, "return_typ": 431, "e1": [431, 475], "e2": 431, "first_alt": 431, "second_alt": 431, "mod_ti": [431, 472, 483], "_pypegen_make_modul": 431, "statement_newlin": 431, "_pyast_interact": 431, "_pyast_express": 431, "type_express": 431, "_pyast_functiontyp": 431, "asdl_stmt_seq": 431, "_pypegen_seq_flatten": 431, "_pypegen_singleton_seq": 431, "stmt_ti": 431, "_pyast_pass": 431, "_pypegen_interactive_exit": 431, "type_alia": 431, "star_express": 431, "_pyast_expr": 431, "return_stmt": [431, 436], "import_stmt": [431, 436], "raise_stmt": [431, 436], "del_stmt": [431, 436], "yield_stmt": [431, 436], "assert_stmt": [431, 436], "_pyast_break": 431, "_pyast_continu": 431, "global_stmt": [431, 436], "nonlocal_stmt": [431, 436], "function_def": 431, "class_def": 431, "annotated_rh": 431, "yield_expr": 431, "check_vers": 431, "_pyast_annassign": 431, "expr_ti": 431, "_pypegen_set_expr_context": 431, "single_target": 431, "single_subscript_attribute_target": 431, "asdl_expr_seq": 431, "star_target": 431, "tc": 431, "_pyast_assign": 431, "new_type_com": 431, "_pyast_augassign": 431, "invalid_assign": 431, "augoper": 431, "_pypegen_augoper": 431, "_pyast_return": 431, "_pyast_rais": 431, "_pyast_glob": 431, "asdl_identifier_seq": 431, "_pypegen_map_names_to_id": 431, "_pyast_nonloc": 431, "del_target": 431, "_pyast_delet": 431, "invalid_del_stmt": 431, "_pyast_assert": 431, "invalid_import": 431, "dotted_as_nam": 431, "_pyast_import": 431, "dotted_nam": 431, "import_from_target": 431, "_pyast_importfrom": 431, "_pypegen_seq_count_dot": 431, "asdl_alias_seq": 431, "import_from_as_nam": 431, "alias_ti": 431, "_pypegen_alias_for_star": 431, "invalid_import_from_target": 431, "_pyast_alia": 431, "_pypegen_join_names_with_dot": 431, "invalid_block": 431, "class_def_raw": 431, "_pypegen_class_def_decor": 431, "invalid_class_def_raw": 431, "_pyast_classdef": 431, "function_def_raw": 431, "_pypegen_function_def_decor": 431, "invalid_def_raw": 431, "func_type_com": 431, "_pyast_functiondef": 431, "arguments_ti": 431, "_pypegen_empty_argu": 431, "_pyast_asyncfunctiondef": 431, "invalid_paramet": 431, "slash_no_default": 431, "asdl_arg_seq": 431, "param_no_default": 431, "param_with_default": 431, "star_etc": 431, "_pypegen_make_argu": 431, "slash_with_default": 431, "slashwithdefault": 431, "_pypegen_slash_with_default": 431, "staretc": 431, "invalid_star_etc": 431, "param_maybe_default": 431, "_pypegen_star_etc": 431, "param_no_default_star_annot": 431, "arg_ti": 431, "invalid_kwd": 431, "_pypegen_add_type_comment_to_arg": 431, "param_star_annot": 431, "namedefaultpair": 431, "_pypegen_name_default_pair": 431, "_pyast_arg": 431, "star_annot": 431, "invalid_default": 431, "invalid_if_stmt": 431, "elif_stmt": 431, "_pyast_if": 431, "else_block": 431, "invalid_elif_stmt": 431, "invalid_else_stmt": 431, "invalid_while_stmt": 431, "_pyast_whil": 431, "invalid_for_stmt": 431, "_pyast_for": 431, "_pyast_asyncfor": 431, "invalid_for_target": 431, "invalid_with_stmt_ind": 431, "asdl_withitem_seq": 431, "_pyast_with": 431, "_pyast_asyncwith": 431, "invalid_with_stmt": 431, "withitem_ti": 431, "_pyast_withitem": 431, "invalid_with_item": 431, "invalid_try_stmt": 431, "finally_block": 431, "_pyast_tri": 431, "asdl_excepthandler_seq": 431, "except_block": 431, "except_star_block": 431, "_pyast_trystar": 431, "excepthandler_ti": 431, "invalid_except_stmt_ind": 431, "_pyast_excepthandl": 431, "invalid_except_stmt": 431, "invalid_except_star_stmt_ind": 431, "invalid_finally_stmt": 431, "asdl_match_case_seq": 431, "_pyast_match": 431, "invalid_match_stmt": 431, "_pyast_tupl": 431, "_pypegen_seq_insert_in_front": 431, "match_case_ti": 431, "invalid_case_block": 431, "_pyast_match_cas": 431, "pattern_ti": 431, "asdl_pattern_seq": 431, "_pyast_matchsequ": 431, "pattern_capture_target": 431, "_pyast_matcha": 431, "invalid_as_pattern": 431, "asdl_seq_len": 431, "asdl_seq_get": 431, "_pyast_matchor": 431, "_pyast_matchvalu": 431, "complex_numb": 431, "_pyast_matchsingleton": 431, "literal_expr": 431, "_pyast_const": 431, "signed_real_numb": 431, "imaginary_numb": 431, "_pyast_binop": 431, "_pyast_unaryop": 431, "real_numb": 431, "_pypegen_ensure_r": 431, "_pypegen_ensure_imaginari": 431, "_pyast_attribut": 431, "asdl_seq": 431, "_pyast_matchstar": 431, "_pyast_matchmap": 431, "_pypegen_get_pattern_key": 431, "_pypegen_get_pattern": 431, "keypatternpair": 431, "_pypegen_key_pattern_pair": 431, "_pyast_matchclass": 431, "invalid_class_pattern": 431, "_pyast_typealia": 431, "asdl_type_param_seq": 431, "type_param_seq": 431, "type_param_ti": 431, "type_param_bound": 431, "_pyast_typevar": 431, "raise_syntax_error_starting_from": 431, "tuple_kind": 431, "_pyast_typevartupl": 431, "_pyast_paramspec": 431, "invalid_express": 431, "invalid_legacy_express": 431, "_pyast_ifexp": 431, "lambdef": 431, "_pyast_yieldfrom": 431, "_pyast_yield": 431, "bitwise_or": 431, "_pyast_star": 431, "_pyast_namedexpr": 431, "invalid_named_express": 431, "_pyast_boolop": 431, "compare_op_bitwise_or_pair": 431, "_pyast_compar": 431, "asdl_int_seq": 431, "_pypegen_get_cmpop": 431, "_pypegen_get_expr": 431, "cmpopexprpair": 431, "eq_bitwise_or": 431, "noteq_bitwise_or": 431, "lte_bitwise_or": 431, "lt_bitwise_or": 431, "gte_bitwise_or": 431, "gt_bitwise_or": 431, "notin_bitwise_or": 431, "in_bitwise_or": 431, "isnot_bitwise_or": 431, "is_bitwise_or": 431, "_pypegen_cmpop_expr_pair": 431, "tok": 431, "_pypegen_check_barry_as_flufl": 431, "bitwise_xor": 431, "bitwise_and": 431, "await_primari": 431, "_pyast_await": 431, "_pyast_cal": 431, "_pyast_subscript": 431, "_pyast_slic": 431, "invalid_group": 431, "lambda_param": 431, "_pyast_lambda": 431, "invalid_lambda_paramet": 431, "lambda_paramet": 431, "lambda_slash_no_default": 431, "lambda_param_no_default": 431, "lambda_param_with_default": 431, "lambda_star_etc": 431, "lambda_slash_with_default": 431, "invalid_lambda_star_etc": 431, "lambda_param_maybe_default": 431, "lambda_kwd": 431, "invalid_lambda_kwd": 431, "fstring_replacement_field": 431, "_pypegen_constant_from_token": 431, "debug_expr": 431, "fstring_convers": 431, "fstring_full_format_spec": 431, "_pypegen_formatted_valu": 431, "invalid_replacement_field": 431, "resulttokenwithmetadata": 431, "conv_token": 431, "conv": [431, 452, 478], "_pypegen_check_fstring_convers": 431, "fstring_format_spec": 431, "_pypegen_setup_full_format_spec": 431, "_pypegen_decoded_constant_from_token": 431, "fstring": [431, 483], "_pypegen_joined_str": 431, "_pypegen_constant_from_str": 431, "_pypegen_concatenate_str": 431, "_pyast_list": 431, "_pyast_set": 431, "double_starred_kvpair": 431, "_pyast_dict": 431, "_pypegen_get_key": 431, "_pypegen_get_valu": 431, "invalid_double_starred_kvpair": 431, "keyvaluepair": 431, "_pypegen_key_value_pair": 431, "kvpair": 431, "for_if_claus": 431, "asdl_comprehension_seq": 431, "comprehension_ti": 431, "_pyast_comprehens": 431, "_pyast_listcomp": 431, "invalid_comprehens": 431, "_pyast_setcomp": 431, "_pyast_generatorexp": 431, "_pyast_dictcomp": 431, "invalid_dict_comprehens": 431, "invalid_argu": 431, "_pypegen_collect_call_seq": 431, "_pypegen_dummy_nam": 431, "check_null_allow": 431, "_pypegen_seq_extract_starred_expr": 431, "asdl_keyword_seq": 431, "_pypegen_seq_delete_starred_expr": 431, "kwarg_or_star": 431, "kwarg_or_double_star": 431, "_pypegen_join_sequ": 431, "invalid_starred_express": 431, "raise_syntax_error": 431, "keywordorstar": 431, "invalid_kwarg": 431, "_pypegen_keyword_or_star": 431, "keyword_ti": 431, "_pyast_keyword": 431, "star_targets_list_seq": 431, "star_targets_tuple_seq": 431, "target_with_star_atom": 431, "t_primari": 431, "t_lookahead": 431, "star_atom": 431, "del_t_atom": 431, "_pypegen_seq_append_to_end": 431, "invalid_double_type_com": 431, "raise_syntax_error_known_rang": 431, "_pypegen_get_last_comprehension_item": 431, "pypegen_last_item": 431, "_pypegen_nonparen_genexp_in_cal": 431, "_pypegen_arguments_parsing_error": 431, "_without_invalid": 431, "expression_without_invalid": 431, "_pypegen_check_legacy_stmt": 431, "kf": 431, "dsfsdf": 431, "forgot": [431, 472, 474], "raise_syntax_error_known_loc": 431, "_pypegen_get_expr_nam": 431, "invalid_ann_assign_target": 431, "raise_syntax_error_invalid_target": 431, "raise_indentation_error": 431, "invalid_parameters_help": 431, "invalid_lambda_parameters_help": 431, "for_target": 431, "invalid_class_argument_pattern": 431, "pypegen_first_item": 431, "invalid_kvpair": 431, "raise_error_known_loc": 431, "raise_syntax_error_on_next_token": 431, "invalid_conversion_charact": 431, "immateri": 432, "reinitialis": 432, "rerun": [432, 470, 483], "mpf": 432, "_init_module_attr": 432, "atyp": 432, "module_repr": [432, 472, 473, 474, 477, 483], "searchabl": [432, 483], "subpackage1": 432, "modulex": 432, "moduley": 432, "subpackage2": 432, "modulez": 432, "modulea": 432, "volunt": [434, 468], "lloyd": 434, "hugunin": 434, "backus": 434, "naur": 434, "lc_letter": 434, "vim": [435, 459, 477], "fileencod": 435, "bram": [435, 464], "moolenaar": 435, "xefxbbxbf": 435, "2100": 435, "maart": 435, "mei": 435, "juni": 435, "augustus": 435, "oktob": 435, "unwis": 435, "uax": 435, "3131": [435, 470, 483], "xid_start": 435, "xid_continu": 435, "other_id_start": 435, "id_start": 435, "mc": [435, 483], "other_id_continu": 435, "id_continu": 435, "connector": 435, "proplist": 435, "normat": 435, "derivedcoreproperti": 435, "breakag": [435, 462, 463, 465, 474, 480, 483], "stringprefix": 435, "shortstr": 435, "longstr": 435, "shortstringitem": 435, "longstringitem": 435, "shortstringchar": 435, "stringescapeseq": 435, "longstringchar": 435, "bytesprefix": 435, "shortbyt": 435, "longbyt": 435, "shortbytesitem": 435, "longbytesitem": 435, "shortbyteschar": 435, "bytesescapeseq": 435, "longbyteschar": 435, "ur": [435, 470, 483], "reintroduc": [435, 483], "codebas": [435, 477, 478, 483], "0o377": [435, 473, 474, 483], "mistyp": 435, "literal_char": 435, "replacement_field": 435, "f_express": 435, "abc5": 435, "34567": [435, 479], "0x400": 435, "mill": 435, "decinteg": 435, "bininteg": 435, "octinteg": 435, "hexinteg": 435, "nonzerodigit": 435, "bindigit": 435, "0o177": 435, "0b100110111": 435, "79228162514264337593543950336": 435, "0xdeadbeef": 435, "100_000_000_000": 435, "0b_1110_0101": 435, "pointfloat": 435, "exponentfloat": 435, "077e010": 435, "77e10": 435, "14e": 435, "0e0": 435, "14_15_93": 435, "14j": 435, "10j": 435, "001j": 435, "1e100j": 435, "14_15_93j": 435, "expression_stmt": 436, "assignment_stmt": 436, "augmented_assignment_stmt": 436, "annotated_assignment_stmt": 436, "pass_stmt": 436, "break_stmt": 436, "continue_stmt": 436, "future_stmt": 436, "type_stmt": 436, "3132": [436, 470], "augtarget": 436, "augop": 436, "expression1": 436, "expression2": 436, "tracebackobj": 436, "relative_modul": 436, "fbb": 436, "subpkg2": 436, "subpkg1": 436, "3104": [436, 470], "value_of_point": 436, "pythonrc": 438, "startup_fil": 438, "awk": [439, 462], "smalltak": 440, "pyhon": [440, 450], "the_answ": 440, "scope_test": 440, "do_loc": 440, "do_nonloc": 440, "do_glob": 440, "realpart": 440, "imagpart": 440, "canin": 440, "fido": 440, "buddi": 440, "add_trick": 440, "warehous": [440, 475], "w2": 440, "addtwic": 440, "derivedclassnam": 440, "baseclassnam": 440, "base3": 440, "bottommost": 440, "_spam": 440, "items_list": 440, "__updat": 440, "mappingsubclass": 440, "_mapping__upd": 440, "_mappingsubclass__upd": 440, "str_iter": 440, "0x10c90e650": 440, "rev": 440, "0x00a1db50": 440, "golf": 440, "xvec": 440, "yvec": 440, "260": [440, 461, 469, 479], "unique_word": 440, "valedictorian": 440, "gpa": 440, "graduat": [440, 478, 481], "defenestr": 441, "han": [441, 465, 472, 483], "onor": 441, "active_us": 441, "myemptyclass": 441, "initlog": 441, "rust": 441, "http_error": [441, 472], "teapot": [441, 472, 483], "where_i": 441, "grass": [441, 472], "987": [441, 449, 450], "1597": 441, "10042ed0": 441, "fib2": [441, 450], "f100": 441, "ask_ok": 441, "ye": [441, 473, 483], "vooooom": 441, "bereft": 441, "daisi": 441, "cheeseshop": 441, "sorri": 441, "limburg": 441, "runni": 441, "shopkeep": 441, "palin": 441, "shop": [441, 454], "pos1": 441, "pos2": 441, "pos_or_kwd": 441, "kwd1": 441, "kwd2": 441, "standard_arg": 441, "pos_only_arg": 441, "kwd_only_arg": 441, "combined_exampl": 441, "pos_on": 441, "kwd_on": 441, "write_multiple_item": 441, "bleedin": 441, "demis": 441, "make_incrementor": 441, "uppercamelcas": 441, "lowercase_with_underscor": 441, "kiwi": 442, "tangerin": 442, "grape": 442, "7j": 442, "freshfruit": 442, "loganberri": 442, "passion": 442, "weapon": 442, "14159": [442, 444], "comprehes": 442, "3x4": 442, "transposed_row": 442, "88888": 442, "basket": 442, "crabgrass": 442, "alacazam": [442, 466], "tel": 442, "sape": 442, "4139": 442, "brave": 442, "tic": 442, "tac": 442, "toe": 442, "raw_data": 442, "filtered_data": 442, "string3": 442, "trondheim": 442, "hammer": [442, 462], "non_nul": 442, "this_fail": 443, "hither": 443, "flew": 443, "bool_return": 443, "0001100110011001100110011001100110011001100110011": 444, "3602879701896397": 444, "10000000000000001": 444, "12g": [444, 462], "3537115888337719": 444, "1125899906842624": 444, "921f9f01b866ep": 444, "10430216751806065": 444, "266310978": 444, "67179024": 444, "143401161448607": 444, "143401161400469": 444, "266262841": 444, "31058735": 444, "003244936839808227": 444, "042173697819788e": 444, "042178034628478e": 444, "0051575902860057365": 444, "7205759403792794": 444, "17f": 444, "36028797018963968": 444, "referendum": 446, "yes_vot": 446, "42_572_654": 446, "no_vot": 446, "43_132_495": 446, "vote": [446, 462, 467, 475], "42572654": 446, "40000": [446, 483], "dcab": 446, "7678": 446, "phone": [446, 475], "10d": 446, "eel": 446, "hovercraft": 446, "roach": [446, 479, 481, 483], "horribl": 446, "manfr": 446, "8637678": 446, "4d": 446, "729": 446, "00012": 446, "workfil": 446, "0123456789abcdef": 446, "6th": [446, 483], "korn": 447, "ipython": [447, 468, 472], "bpython": 447, "the_world_is_flat": 448, "666666666666667": 449, "rabbit": 449, "ame": [449, 479], "thingi": 449, "ium": 449, "unununium": 449, "tho": 449, "supercalifragilisticexpialidoci": [449, 452], "rgba": 449, "alph": 449, "correct_rgba": 449, "fibo": 450, "itemnam": 450, "ufs": 450, "_framework": 450, "_git": [450, 483], "_home": 450, "callstat": [450, 480, 482, 483], "wavread": 450, "wavwrit": 450, "aiffread": 450, "aiffwrit": 450, "auread": 450, "auwrit": 450, "vocod": 450, "karaok": 450, "echofilt": 450, "atten": 450, "subitem": 450, "subsubitem": 450, "specific_submodul": 450, "urround": 450, "python312": [451, 452], "accesslog": 451, "installdir": [451, 456], "tea": 451, "70710678118654757": 451, "17970987693706186": 451, "6071428571428572": 451, "worldtimeapi": 451, "01t01": 451, "689215": 451, "soothsay": 451, "jcaesar": 451, "1964": 451, "14368": 451, "witch": 451, "wrist": 451, "226805979": 451, "57535828626024577": 451, "54962537085770791": 451, "teststatisticalfunct": 451, "test_averag": 451, "batteri": 451, "sqllite3": 451, "english_unit": 452, "villag": 452, "nottingham": 452, "ditch": 452, "fund": [452, 462, 467], "nottinghamfolk": 452, "unladen": [452, 475], "photofil": 452, "img_1074": 452, "img_1076": 452, "img_1077": 452, "batchrenam": 452, "seqnum": 452, "ashley_": 452, "ashley_0": 452, "ashley_1": 452, "ashley_2": 452, "iiihh": 452, "comp_siz": 452, "uncomp_s": 452, "filenames": 452, "decoupl": [452, 478, 480], "asynczip": 452, "4000": 452, "700": 452, "22222": 452, "26932": [452, 483], "task3": 452, "task4": 452, "unsearch": 452, "starting_nod": 452, "breadth_first_search": 452, "gen_mov": 452, "is_goal": 452, "lua": 452, "rearrang": [452, 462, 465, 467, 469, 482, 483], "09999999999999995": 452, "142857142857142857142857142857142857": 452, "nova": 453, "136kb": 453, "py2": [453, 475, 483], "whl": 453, "kenneth": 453, "reitz": 453, "kennethreitz": 453, "akuchl": 453, "596": [454, 482], "00797": 454, "pyvideo": 454, "bbdehiioqssuvvwx": 455, "0b2": [455, 483], "0c076caaa8": 455, "20161005": 455, "wdefault": [455, 469, 475, 483], "werror": [455, 456, 483], "walway": [455, 465], "wmodul": 455, "wonc": 455, "wignor": 455, "wi": 455, "frozen_modul": [455, 483], "importlib_bootstrap": 455, "importlib_bootstrap_extern": 455, "showalloccount": [455, 479, 482, 483], "oldpars": [455, 482, 483], "qualif": [455, 477], "selftest": 455, "4294967295": [455, 479], "encodingnam": 455, "pythondumprefsfil": [455, 483], "c11": [456, 473, 476, 483], "stdint": [456, 483], "acloc": [456, 474, 483], "autoreconf": 456, "ivf": 456, "autoconf": [456, 474, 483], "_sqlite": [456, 483], "pylong_bits_in_digit": [456, 473, 483], "dbmlibord": [456, 469], "py_coerce_c_local": 456, "freelist": [456, 473, 483], "_bundl": [456, 472, 483], "pystat": [456, 483], "py_stat": 456, "summarize_stat": 456, "memf": 456, "noderawf": 456, "eprefix": 456, "bolt": [456, 474, 483], "profile_task": [456, 482, 483], "clang": [456, 474, 477, 479, 483], "llvm": [456, 479, 483], "profdata": [456, 483], "interposit": [456, 472, 483], "testtimeout": [456, 483], "gold": 456, "thinlto": [456, 473, 474, 483], "fdata": 456, "bolt_instrument_flag": [456, 483], "bolt_apply_flag": [456, 483], "gprof": [456, 466], "fstrict": 456, "gettotalrefcount": [456, 483], "_pyobject_assert": 456, "ndebug": 456, "py_safe_downcast": 456, "valgrind": [456, 469, 475, 479, 483], "addresssanit": [456, 483], "asan": [456, 483], "memorysanit": 456, "msan": [456, 483], "undefinedbehaviorsanit": 456, "ubsan": [456, 483], "libpythonmajor": [456, 472, 483], "mpdec": 456, "with_editlin": 456, "have_libreadlin": 456, "rpath": [456, 460, 472, 483], "fnv": [456, 477], "siphash13": [456, 473, 483], "universalsdk": [456, 467, 482, 483], "sdkdir": 456, "arch": [456, 468, 483], "universal2": [456, 459, 481, 482, 483], "config_sit": [456, 483], "aarch64": [456, 483], "ac_cv_buggy_getaddrinfo": 456, "ac_cv_file__dev_ptmx": 456, "ac_cv_file__dev_ptc": 456, "makesetup": [456, 473, 483], "buildbottest": 456, "distclean": [456, 483], "py_build_core_builtin": 456, "_asyncio": [456, 483], "py_build_core_modul": [456, 483], "pyapi_data": [456, 465, 483], "py_exported_symbol": 456, "py_imported_symbol": 456, "configure_cppflag": 456, "cppflag": [456, 465, 483], "include_dir": [456, 462], "basecppflag": 456, "py_cppflag": 456, "srcdir": [456, 475, 483], "cflags_nodist": [456, 483], "65320": 456, "harden": [456, 483], "heighten": 456, "compileall_opt": [456, 474, 483], "j0": [456, 474, 483], "extra_cflag": 456, "configure_cflag": 456, "configure_cflags_nodist": 456, "basecflag": 456, "cflags_alias": 456, "ccshare": 456, "fpic": [456, 483], "cflagsforshar": 456, "py_cflag": [456, 483], "py_cflags_nodist": [456, 483], "py_stdmodule_cflag": [456, 483], "py_core_cflag": 456, "dpy_build_cor": [456, 483], "py_builtin_module_cflag": 456, "dpy_build_core_builtin": 456, "_testemb": [456, 483], "configure_ldflag": 456, "stomp": 456, "ldflags_nodist": 456, "configure_ldflags_nodist": 456, "lib_dir": 456, "lrt": 456, "ldshare": [456, 483], "py_ldflag": 456, "bldshare": 456, "py_core_ldflag": 456, "py_ldflags_nodist": 456, "savag": 459, "bobsavag": 459, "nano": 459, "barebon": 459, "textmat": [459, 477], "macrom": 459, "macvim": 459, "aquamac": 459, "qa1067": 459, "hashcollis": 459, "hkn": 459, "idle_intro": 459, "pyobjc": 459, "pysid": 459, "kivi": 459, "mobil": [459, 475], "toga": 459, "beewar": 459, "wxpython": 459, "briefcas": 459, "notar": 459, "pythonmac": 459, "macpython": [459, 464], "maint": 460, "opensus": 460, "portal": 460, "fedoraproject": 460, "packaging_tutorial_gnu_hello": 460, "slackbook": 460, "slackwar": 460, "pkg_add": 460, "1p2": 460, "pki": 460, "install_sw": 460, "xzf": 460, "pushd": 460, "openssldir": 460, "j8": 460, "popd": 460, "team": [461, 462, 463, 464, 469, 477, 482, 483], "longpathsen": 461, "currentcontrolset": 461, "installallus": 461, "targetdir": [461, 483], "defaultalluserstargetdir": 461, "programfil": 461, "defaultjustformetargetdir": 461, "localappdata": 461, "defaultcustomtargetdir": 461, "associatefil": 461, "prependpath": [461, 473], "appendpath": [461, 473], "include_doc": 461, "include_debug": 461, "include_dev": 461, "include_ex": 461, "include_launch": 461, "installlauncherallus": 461, "include_lib": 461, "include_pip": 461, "include_symbol": 461, "include_tcltk": 461, "include_test": 461, "include_tool": 461, "launcheron": 461, "simpleinstal": 461, "simpleinstalldescript": 461, "elev": [461, 483], "unattend": [461, 483], "pythonsoftwarefound": 461, "8_qbz5n2kfra8p0": 461, "localcach": 461, "windowsapp": 461, "package_nam": 461, "vfs": 461, "systemx86": 461, "test_fil": 461, "hklm": 461, "msix": 461, "uwp": 461, "nugetclidl": 461, "excludevers": 461, "outputdirectori": 461, "pythonx86": 461, "msbuild": [461, 483], "python37": 461, "ucrtbas": [461, 483], "profession": [461, 471], "anaconda": 461, "panda": 461, "conda": 461, "canopi": 461, "winpython": 461, "prebuilt": 461, "my_python_lib": 461, "procthread": 461, "set_1": 461, "wsl": [461, 483], "pythoncor": [461, 473, 483], "insenit": 461, "oneith": 461, "pylauncher_no_search_path": 461, "xpython": 461, "py_python": 461, "py_python3": 461, "pylauncher_debug": 461, "pylauncher_dryrun": 461, "pylauncher_allow_instal": [461, 483], "pylauncher_always_instal": 461, "rc_bad_venv_cfg": 461, "rc_create_process": 461, "rc_instal": 461, "rc_internal_error": 461, "rc_no_commandlin": 461, "rc_no_python": 461, "rc_no_venv_cfg": 461, "hive": 461, "hkcu": 461, "apploc": 461, "mfc": 461, "golden": [461, 477], "ongo": [461, 480], "mosh": [462, 463, 464, 466], "zadka": [462, 463, 464, 466], "steadi": 462, "paid": 462, "contractu": 462, "evolut": [462, 463], "6final": 462, "0beta1": 462, "fourfold": 462, "schneider": [462, 483], "kamp": 462, "checkin": 462, "submitt": 462, "ka": [462, 463, 464, 467], "yee": [462, 463, 464, 467], "scraper": 462, "indiffer": 462, "him": 462, "consensus": 462, "dissent": 462, "lockstep": 462, "elementwis": [462, 463], "objectwis": 462, "536": 462, "countless": 462, "stormi": 462, "01ff": 462, "777": [462, 478], "setdefaultencod": 462, "unichr": [462, 464, 467], "encode_func": 462, "decode_func": 462, "stream_read": 462, "stream_writ": 462, "ustr": 462, "file_obj": [462, 465], "u2000ab": 462, "utf8_encod": 462, "utf8_decod": 462, "utf8_streamread": 462, "utf8_streamwrit": 462, "sre": [462, 464], "workhors": 462, "ewe": [462, 476], "lengthier": [462, 463], "thoma": [462, 463, 466, 467, 468, 469, 472, 473, 474, 477, 478, 479, 480, 483], "wouter": [462, 463, 466, 467, 468, 469, 478, 481, 483], "strop": 462, "hlinuxtnam": 462, "joke": [462, 483], "jpython": 462, "realis": 462, "myself": 462, "afford": 462, "tobi": [462, 483], "kelsey": 462, "tiedemann": 462, "neil": [462, 463, 464, 465, 467, 469, 475, 478, 479, 480, 481, 483], "schemenau": [462, 463, 464, 465, 467, 469, 478, 481], "overrod": [462, 483], "tismer": [462, 477], "rewrot": [462, 465, 483], "jeremi": [462, 463, 464, 465, 466, 467, 468, 469, 483], "hylton": [462, 463, 464, 465, 466, 467, 468, 469], "isomorph": 462, "trashcan": [462, 473, 482, 483], "__cmp__": [462, 463, 465, 468, 469, 470], "itanium": [462, 478], "trent": [462, 465, 467, 477], "pythonc": 462, "dyld": [462, 483], "wart": [462, 470], "291": 462, "1beta1": 462, "runaway": 462, "gpf": 462, "find_recursionlimit": 462, "listobject": 462, "no_strict_list_append": 462, "0alpha1": 462, "gvr": [462, 464, 465, 466, 469, 479], "reaction": [462, 463], "x123456": 462, "3l": 462, "abcabcabc": 462, "4l": 462, "18446744073709551616": [462, 469], "subtlest": 462, "longval": 462, "17g": [462, 471], "0999999999999996": 462, "fulton": [462, 466, 479, 483], "extensionclass": 462, "myextensionclass": 462, "importdl": 462, "reorganis": 462, "dynload_": 462, "pyport": [462, 483], "vladimir": [462, 463, 465, 472, 474, 481, 483], "marangozov": [462, 463, 465], "pymem": [462, 467], "objimpl": 462, "gusi": 462, "unthread": 462, "yakov": 462, "markovitch": 462, "charl": [462, 469, 474, 476, 477, 478, 479, 480, 483], "waldman": 462, "affair": 462, "arduous": 462, "ritual": 462, "shepherd": [462, 465], "ward": [462, 464, 465, 466, 467, 478, 483], "tarbal": [462, 483], "py_modul": 462, "module1": 462, "module2": 462, "expat_extens": 462, "define_macro": 462, "xml_ns": 462, "xmltok": 462, "xmlpars": 462, "xmlrole": 462, "sdist": [462, 463, 467, 469, 479, 480, 483], "bdist_rpm": [462, 483], "bdist_wininst": [462, 472, 481, 482, 483], "xmllib": 462, "mullend": [462, 468], "tag1": 462, "perslist": 462, "persona": 462, "claudius": 462, "denmark": 462, "son": 462, "nephew": 462, "20th": 462, "4dom": 462, "fourthought": 462, "xmlproc": 462, "lar": [462, 465, 466, 467, 468, 469, 475, 476], "garshol": 462, "sgmlop": 462, "gallew": 462, "httplib": [462, 465, 466, 468, 469, 470, 483], "create_lin": 462, "create_polygon": 462, "oliv": [462, 483], "andrich": 462, "hewlett": 462, "packard": 462, "cmpcach": 462, "macmillan": 462, "twin": 462, "sunaudiodev": [462, 468], "bosch": 462, "prescod": [462, 463, 464, 467], "spider": 462, "fetchabl": 462, "browsercontrol": 462, "_winreg": [462, 468, 469, 470], "tutt": 462, "imputil": [462, 465, 469], "ihook": [462, 465, 468, 469], "vanilla": [462, 483], "stdwin": 462, "packmail": 462, "whatsound": 462, "zmod": 462, "bolen": [462, 464], "gregg": 462, "hauser": 462, "detlef": [462, 465], "lannert": [462, 465], "aahz": [462, 466, 467], "maruch": 462, "tobia": 462, "polzin": 462, "russ": 462, "schmidt": 462, "sizabl": [463, 464], "pace": [463, 468], "clumsier": [463, 464], "list_attribut": [463, 464], "unknow": [463, 464], "gradual": [463, 464], "conserv": [463, 466], "compulsori": [463, 464, 465], "crunch": 463, "tp_richcmp": 463, "ascher": 463, "spare": 463, "toolbox": [463, 464, 465], "aycock": 463, "spark": [463, 483], "135143996": 463, "py_tpflags_checktyp": 463, "complaint": 463, "middleton": 463, "vault": 463, "parnassus": 463, "retir": [463, 483], "wayback": 463, "catalogu": 463, "bdist_": 463, "sean": [463, 465, 466, 467, 469, 483], "reifschneid": [463, 465, 466, 467, 469], "bonus": 463, "addict": 463, "purcel": 463, "gellekum": 463, "ninth": 463, "edward": [463, 464, 466, 467], "136": 463, "underestim": [463, 464, 465, 466, 467, 468], "afoul": [463, 465], "getc": 463, "jeff": [463, 465, 477, 479, 483], "epler": 463, "fuller": 463, "preliminari": [463, 480, 483], "ben": [463, 467, 473, 478, 483], "wolfson": 463, "vestigi": [463, 483], "ancestri": 463, "shrunk": [463, 483], "340k": 463, "majewski": 463, "jason": [463, 465, 468, 474, 477, 481, 482, 483], "tishler": [463, 465, 483], "risco": [463, 470], "dietmar": 463, "schwertberg": 463, "unixwar": 463, "billi": 463, "alli": 463, "graem": 463, "grave": 463, "hudson": [463, 464, 465, 467, 483], "irregular": 464, "dark": [464, 483], "safeguard": 464, "esoter": [464, 467], "lockablefil": 464, "posixfil": [464, 468], "__methods__": [464, 470, 483], "inaccur": [464, 466, 483], "defstat": 464, "novel": [464, 465, 467], "eiffel": 464, "postcondit": 464, "eiffelmethod": 464, "pre_f": 464, "post_f": 464, "zodb": 464, "get_par": 464, "__coerce__": [464, 469], "get_siz": 464, "set_siz": 464, "new_attr": 464, "whet": 464, "appetit": 464, "corp": 464, "0x8116870": 464, "0x8117f90": [464, 465], "www2": [464, 465], "cs": [464, 465], "arizona": [464, 465], "ipd266": [464, 465], "harbor": [464, 465], "magnus": [464, 465], "hetland": [464, 465], "crew": [464, 465, 467], "1234567890123": 464, "1234567890123l": 464, "18446744073709551616l": 464, "herald": 464, "erupt": 464, "storm": 464, "sarcast": 464, "110000": 464, "261": [464, 483], "x9c": 464, "xc9": 464, "xc1": 464, "nand": 464, "666": 464, "5r92": 464, "qe": 464, "ee8v4": 464, "v8": 464, "f5d": 464, "6yd86yt": 464, "f5r": 464, "f5r8f": 464, "s92p": 464, "86yd": 464, "5t": 464, "71i": 464, "5x": [464, 474, 479, 480, 483], "sheesh": 464, "furrfu": 464, "__unicode__": [464, 469], "headlin": 464, "oreillynet": 464, "meerkat": 464, "getchannel": 464, "freshmeat": 464, "4549": 464, "3dgamer": 464, "52719": 464, "xsl": 464, "html2fo": 464, "2104": 464, "memberst_mtim": 464, "mathewson": 464, "ichiro": 464, "itojun": 464, "hagino": 464, "bigcharset": 464, "2487": 464, "pier": [464, 465], "lauder": [464, 465], "anthoni": [464, 466, 467, 480, 481, 482, 483], "baxter": [464, 466, 467], "pelleti": 464, "rfc2822": [464, 483], "grunt": 464, "generator": 464, "itamar": [464, 474], "shtull": 464, "traur": 464, "implementor": [464, 469, 479], "py_tpflags_gc": 464, "pyobject_gc_init": 464, "pyobject_gc_fini": 464, "pygc_head_s": 464, "pyobject_as_gc": 464, "pyobject_from_gc": 464, "untyp": 464, "vsprintf": 464, "overrun": [464, 469, 483], "527": 464, "683": [464, 474, 483], "blown": 464, "osa": 464, "quicktim": 464, "cleanfutur": 464, "gpled": 464, "ftpmirror": 464, "romberg": 464, "pyrange_new": [464, 467], "sneakili": 464, "rhythm": 464, "borland": [464, 483], "stephen": [464, 473, 483], "hansen": [464, 482, 483], "generous": 464, "installermast": 464, "0a": 464, "stolk": 464, "bremmer": 464, "keith": 464, "brigg": 464, "carel": [464, 483], "felling": 464, "mclay": 464, "donnel": 464, "joona": 464, "paalasma": 464, "jen": [464, 483], "reinhardt": 464, "welbourn": 464, "polish": [465, 483], "berkeleydb": [465, 468, 469, 483], "immutableset": [465, 466], "union_upd": 465, "ungain": 465, "martelli": [465, 468], "suzuki": 465, "hisao": 465, "nyman": 465, "inadequ": 465, "hodgson": 465, "irrit": 465, "__builtin__": [465, 470, 471], "walter": [465, 466, 467, 468, 481], "rwald": [465, 466, 467, 481], "heart": [465, 474], "trove": 465, "quixot": 465, "richard": [465, 467, 468, 476, 477, 483], "toss": 465, "sundri": 465, "kevin": [465, 466, 468, 469, 474, 475, 483], "alti": 465, "cole": [465, 466, 475, 483], "mcnamara": [465, 467], "cliff": [465, 469], "cpickl": [465, 467, 469, 470], "fanciest": 465, "__safe_for_unpickling__": 465, "rip": 465, "dcba": 465, "welter": 465, "fakeseq": 465, "calc_item": 465, "underw": [465, 466, 467, 468], "setcheckinterv": [465, 482, 483], "getcheckinterv": [465, 482, 483], "_socket": [465, 483], "u4000": 465, "u4001abc": 465, "simon": [465, 483], "brun": 465, "0045": 465, "goofi": 465, "0goofi": 465, "oren": [465, 474, 476, 480, 483], "tirosh": [465, 476], "christoph": [465, 478, 483], "craig": [465, 483], "set_lineno": 465, "idiosyncrasi": [465, 483], "hotspot": 465, "pyston": [465, 466, 467, 470, 483], "orendorff": [465, 468], "bsddb185": 465, "db2pickl": 465, "pickle2db": 465, "bsddb3": [465, 470], "sampmodul": 465, "samp": 465, "cpp": [465, 483], "robert": [465, 467, 468, 469, 478, 480, 483], "weber": [465, 478, 483], "strand": [465, 466], "xlinux": 465, "dad": 465, "priorityqu": 465, "connor": [465, 477, 479, 483], "idlefork": 465, "tino": 465, "deg": 465, "loadavg": 465, "geert": [465, 478, 483], "otkidach": 465, "stat_float_tim": [465, 467, 476, 480, 483], "1034791200": 465, "6335014": 465, "fitzroy": 465, "dale": [465, 476], "sn": 465, "nos": 465, "3407": 465, "3805": 465, "1505": 465, "7023": 465, "2401": 465, "2267": 465, "9733": 465, "8083": 465, "9195": 465, "rexec": 465, "bastion": 465, "rotor": [465, 466], "gilfix": 465, "collabor": 465, "exc_clear": [465, 470], "gust": [465, 466, 467, 468, 469, 475, 476], "whit": 465, "defi": 465, "auguri": 465, "sparrow": 465, "tis": [465, 466, 483], "companion": 465, "dummy_thread": [465, 480, 482, 483], "timer1": 465, "timer2": 465, "laptop": 465, "36831796169281006": 465, "37441694736480713": 465, "35304892063140869": 465, "17574405670166016": 465, "18193507194519043": 465, "17565798759460449": 465, "031107": 465, "tcl_obj": [465, 483], "wantobject": [465, 483], "tkapp": [465, 483], "dictmixin": 465, "seqdict": 465, "lookalik": 465, "keylist": [465, 466], "valuelist": 465, "quinlan": [465, 466, 469, 475], "3491": [465, 483], "30t21": 465, "994956": 465, "827738": 465, "optik": [465, 466, 467], "0x400cad4c": 465, "0x400cad2c": 465, "iinput": 465, "llength": 465, "undistinguish": 465, "pymemcompat": 465, "libpython2": 465, "ondrej": 465, "palkovski": 465, "dl_export": 465, "dl_import": 465, "pyarg_noarg": 465, "pystring_new": 465, "test_bufio": 465, "emx": 465, "macintyr": [465, 467], "weaklink": [465, 481, 482, 483], "atheo": [465, 483], "hurd": [465, 483], "openvm": 465, "mist": 465, "nifti": 465, "richi": 465, "hindl": 465, "0xffffffff": [465, 479, 483], "0xffffffffl": 465, "get_distutil_opt": 465, "bauer": 465, "chermsid": 465, "fraser": 465, "kelli": [465, 476, 477], "gerber": 465, "chris": [465, 467, 468, 476, 478, 479, 483], "lambert": [465, 477], "lalo": 465, "netzer": 465, "nowak": 465, "francesco": 465, "ricciardi": 465, "suzi": 465, "radic": 466, "481": 466, "arbcd": 466, "wxi": 466, "unif": 466, "8589934592": 466, "svensson": 466, "get_all_link": 466, "jiwon": [466, 476], "seo": [466, 476], "hye": [466, 467], "shik": [466, 467], "untrain": 466, "deco": 466, "0x402ef0d4": 466, "require_int": 466, "_deco": 466, "bend": 466, "func_nam": [466, 470], "smith": [466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "979728": 466, "russel": 466, "pythondecoratorlibrari": 466, "dpkg": 466, "deb": 466, "unawar": 466, "0001100110011": 466, "inaccuraci": [466, 469], "1000000000000001": [466, 471], "magnifi": 466, "dodg": 466, "12f": 466, "100000000000": 466, "7956": 466, "64739884393063583815028902": 466, "1275": 466, "9184": 466, "123456789012": 466, "351364": 466, "18288201344": 466, "18288201344j": 466, "1828820134592177245001": 466, "facundo": [466, 468], "batista": [466, 468], "lahey": 466, "speleotrov": 466, "cowlishaw": 466, "rexx": 466, "resolve_dotted_attribut": 466, "dima": 466, "dorfman": 466, "pyos_ascii_strtod": [466, 469, 471], "pyos_ascii_atof": [466, 469, 471], "pyos_ascii_formatd": 466, "buf_len": 466, "glib": 466, "relicens": 466, "rei": 466, "carneiro": 466, "colormap": 466, "overflowwarn": 466, "method_descriptor": 466, "armin": [466, 467, 468, 469, 471, 475, 476, 477, 483], "rigo": [466, 467, 468, 483], "vasiliev": 466, "cjkcodec": [466, 483], "prc": 466, "roc": 466, "roman8": [466, 483], "iso_8859": 466, "pctp": 466, "cope": [466, 483], "belmont": [466, 472, 473, 483], "rg": 466, "lehmann": 466, "gass": 466, "tenfold": 466, "eland": 466, "yves": [466, 473], "dionn": 466, "arnaud": [466, 476], "mazin": 466, "key_val": 466, "0x402c2080": 466, "0x402c2090": 466, "bookmark": 466, "rgen": [466, 483], "erhard": 466, "extractor": 466, "cryptoapi": 466, "trevor": 466, "perrin": [466, 472], "beni": 466, "cherniavski": 466, "raynor": 466, "hector": 466, "urtubia": 466, "30000": 466, "sidestep": 466, "unlucki": [466, 483], "mpz": 466, "jar": 466, "loper": 466, "ambiti": 466, "objn": 466, "py_is_nan": 466, "tsc": 466, "pentium": 466, "misnam": [466, 475], "tracebackobject": 466, "pytracebackobject": 466, "dircach": [466, 468], "koray": 466, "dyck": 466, "hurt": 466, "hamish": 466, "lawson": 466, "sadruddin": 466, "rejeb": 466, "356": 467, "458": 467, "true_valu": 467, "false_valu": 467, "voter": 467, "true_v": 467, "false_v": 467, "rarer": 467, "pygtk": 467, "open_item": 467, "open_func": 467, "item_path": 467, "popup_menu": 467, "pypackag": 467, "numarray": 467, "oldpackag": 467, "gpg": 467, "unclean": [467, 483], "holger": 467, "krekel": 467, "tidier": 467, "pylib": 467, "pycheck": 467, "exception1": 467, "exception2": 467, "hackish": 467, "trivia": 467, "phillip": [467, 468, 471, 475, 479, 483], "ebi": [467, 468, 471, 475], "288": 467, "20160321211320": 467, "sidh": 467, "000178": 467, "sugalski": 467, "db_connect": [467, 468], "databaseconnect": [467, 468], "flawless": [467, 468], "db_transact": [467, 468], "mgr1": [467, 468], "mgr2": [467, 468], "version2": 467, "whatsnew": [467, 483], "lp64_wp": 467, "unreason": [467, 483], "travi": [467, 468, 469, 483], "oliph": [467, 468, 469], "zerodict": 467, "is_image_fil": 467, "lynn": 467, "bethard": [467, 469, 475, 478, 483], "needforspe": 467, "sprint": [467, 468], "reykjavik": 467, "ewt": 467, "llc": 467, "ccp": 467, "mcintyr": [467, 468], "ippolito": [467, 468, 469, 471], "diederich": [467, 471], "immisch": 467, "nel": 467, "mezzo": 467, "cammin": 467, "nostra": 467, "vita": 467, "ritrovai": 467, "una": 467, "selva": 467, "oscura": 467, "che": 467, "diritta": 467, "smarrita": 467, "init_lett": 467, "hotshot": 467, "josh": [467, 468, 478, 479, 481, 482, 483], "spoerri": 467, "bjorn": [467, 483], "tillenius": 467, "sweep": 467, "gregori": [467, 468, 469, 471, 472, 473, 474, 477, 479, 480, 481, 483], "schroeder": [467, 483], "antti": 467, "louko": 467, "diego": [467, 481, 483], "petten": 467, "goir": 467, "pybench": [467, 483], "regsub": 467, "statcach": 467, "tzpars": 467, "whrandom": 467, "kiendl": 467, "biondi": 467, "netlink": 467, "linuxjourn": 467, "7356": 467, "group_mask": 467, "getfamili": 467, "getproto": 467, "ih3": 467, "187": 467, "blai": 467, "subvers": [467, 468, 469, 475, 480, 483], "trunk": [467, 468], "45313": 467, "45315": 467, "45355": 467, "45356m": 467, "iterkeyref": 467, "itervalueref": 467, "oleg": [467, 474, 483], "broytmann": 467, "oussoren": [467, 468, 469, 475, 477, 481, 482], "atle": [467, 483], "heller": [467, 468, 469], "dl": [467, 468, 483], "strfri": 467, "71828": 467, "1783957616": 467, "20180410025338": 467, "theller": 467, "elementpath": [467, 480], "20201124024954": 467, "effbot": [467, 469], "textnod": 467, "rss10": 467, "svg": 467, "10px": 467, "320px": 467, "tran": 467, "qti": 467, "rhat": 467, "msoft": 467, "140000000000001": 467, "wsgi_app": 467, "20160331090247": 467, "supervis": 467, "market": 467, "for_loop": 467, "339": 467, "pyparser_astfromstr": [467, 472, 483], "pyparser_astfromfil": [467, 472, 483], "pyast_compil": [467, 472, 483], "ehresman": [467, 483], "kurt": 467, "kaiser": [467, 483], "evan": [467, 482, 483], "256k": 467, "py_loc": 467, "py_local_inlin": 467, "py_local_aggress": 467, "pyerr_warn": 467, "lll": [467, 483], "2573": 467, "pymem_": 467, "_malloc": 467, "_free": 467, "ralf": [467, 468], "gross": [467, 483], "kunstlev": 467, "iain": 467, "pryor": 467, "rovner": 467, "weikart": 467, "361": 468, "redesign": [468, 469, 477], "259": [468, 483], "py3kwarn": 468, "py_py3kwarningflag": 468, "3100": 468, "committe": 468, "jira": 468, "launchpad": 468, "trac": 468, "upfront": 468, "stellenbosch": 468, "africa": 468, "1980s": 468, "1990s": [468, 483], "ream": 468, "toolchain": [468, 479, 483], "dozen": [468, 475, 483], "python26": 468, "39916800": 468, "51090942171709440000": 468, "8222838654177922817725562880000000": 468, "33452526613163807108170062053440751665152000000000": 468, "mgr": 468, "15511187532873822802242430164693032110632597200169861120000": 468, "jess": [468, 471, 478, 479, 480, 483], "noller": [468, 471], "oudkerk": [468, 476, 477, 483], "last_login": 468, "npython": 468, "6a1": 468, "61261m": 468, "5367": 468, "mp4": 468, "banquet": 468, "invoic": 468, "750000e": 468, "6564": 468, "talin": 468, "u751f": 468, "u3080": 468, "u304": 468, "u3000": 468, "u3054": 468, "u3081": 468, "u305f": 468, "u307": 468, "pystringobject": 468, "u21ef": 468, "u3244": 468, "x87": 468, "x89": 468, "u31ef": 468, "ttys": 468, "stutzbach": [468, 469, 475], "verdon": 468, "doerwald": 468, "lownd": 468, "pybuf_lock": 468, "carl": [468, 469, 474, 475, 476, 481, 482, 483], "bank": 468, "vagu": 468, "printabletyp": 468, "drawabl": 468, "draw_doubl": 468, "aranguren": 468, "0o21": 468, "0b101111": 468, "052": 468, "173": 468, "0b10101101": 468, "1101": 468, "0b1101": 468, "patrick": [468, 472, 483], "maupin": 468, "undergo": 468, "yasskin": [468, 469, 475], "guil": 468, "r5rs": 468, "66666666666666663": 468, "40000000000000002": 468, "7074029114692207l": 468, "2251799813685248l": 468, "6004799503160661l": 468, "18014398509481984l": 468, "andi": [468, 471, 483], "chu": [468, 471], "1739468": [468, 471, 478], "2196": 468, "ud": 468, "1686487": 468, "amauri": [468, 469, 471, 475, 483], "forgeot": [468, 469, 471, 475, 483], "3473": 468, "2719": 468, "abc123": 468, "cdf246": 468, "1635": 468, "1640": 468, "3008": 468, "e000000000000p": 468, "5555555555555p": 468, "niceti": 468, "dickinson": [468, 469, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "2235": 468, "austin": 468, "1537": 468, "1473257": 468, "1444529": 468, "cplx": 468, "1491866": 468, "bengt": 468, "richter": 468, "1193128": 468, "1591665": 468, "im_self": 468, "1631171": 468, "jacob": [468, 473, 474, 483], "1700288": 468, "py_tpflags_have_version_tag": [468, 483], "1878": 468, "pitrou": [468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "1819": 468, "jvm": 468, "josiah": [468, 476], "carlson": [468, 476], "1736190": 468, "jes": [468, 469, 476, 479, 480, 483], "cea": [468, 469, 476, 479, 480, 483], "avi": [468, 469, 476, 479, 480, 483], "jcea": [468, 469, 470], "programacion": [468, 470], "dbshelv": 468, "barn": [468, 480, 483], "fiori": 468, "nubi": 468, "1817": 468, "600362": 468, "1381": 468, "var_typ": 468, "amplitud": 468, "dq": 468, "arvin": 468, "schnell": 468, "1638033": 468, "fabian": 468, "kreutz": 468, "insert_mod": 468, "1158": 468, "7182818": 468, "9999999895305022877376682436": 468, "1221598": 468, "1739906": 468, "1001604": 468, "iter1": 468, "iter2": 468, "getmoduleinfo": [468, 479, 483], "getarg": [468, 483], "izip_longest": 468, "2n": [468, 483], "2138": 468, "brouwer": 468, "2819": 468, "711019": 468, "lenton": 468, "wine": [468, 483], "petrosyan": 468, "inst_nam": 468, "_helper": 468, "levinson": 468, "1663329": 468, "horcicka": 468, "1181": 468, "1273829": 468, "1115886": 468, "barran": 468, "1339796": 468, "957650": 468, "1393667": 468, "1106316": 468, "exception_hierarchi": 468, "2439": 468, "achim": 468, "gaedk": 468, "1137": 468, "shawn": 468, "ligocki": 468, "1727780": 468, "wladmir": 468, "laan": 468, "1681432": 468, "hoyt": [468, 478, 483], "schmitt": 468, "846388": 468, "3487": 468, "lorenz": [468, 483], "2250": 468, "1861": 468, "pollobj": 468, "1657": 468, "ziad": [468, 469, 475, 478, 483], "2663": 468, "woken": 468, "1583": 468, "guilherm": [468, 469, 471, 477, 479, 480, 483], "polo": [468, 469, 471, 477, 479, 480, 483], "2240": 468, "2033": 468, "leif": 468, "hedstrom": 468, "957003": 468, "3207": 468, "fenner": 468, "829951": 468, "alberto": [468, 476], "bertog": 468, "1646": 468, "pomran": 468, "pedro": 468, "werneck": 468, "742598": 468, "1193577": 468, "remahl": 468, "1534": 468, "schuppeni": 468, "2898": 468, "1648": 468, "damien": [468, 477], "miller": [468, 477], "1537850": 468, "dustin": [468, 483], "mitchel": [468, 473, 483], "transientresourc": 468, "sf": 468, "3781": 468, "wrec": 468, "dwayn": 468, "bailey": 468, "1581073": 468, "2871": 468, "erik": [468, 473, 474, 480, 483], "demain": 468, "1533909": 468, "2906": 468, "gregor": 468, "lingl": 468, "1513695": 468, "ftpwrapper": [468, 483], "3811": 468, "1599845": 468, "_send_traceback_head": 468, "1330538": 468, "riku": 468, "lindblad": 468, "2985": 468, "251": 468, "sysmodul": 468, "467924": 468, "horler": 468, "1775025": 468, "alexey": [468, 477, 478, 483], "borzenkov": 468, "1734346": 468, "ronach": [468, 469, 471, 475, 476, 477], "abcdefghijklm": 468, "stararg": [468, 483], "iterable1": 468, "__hex__": [468, 470], "__oct__": [468, 470], "in_json": 468, "simplejson": [468, 469], "data_struct": 468, "lastaccess": 468, "plist_str": 468, "writeplisttostr": 468, "new_struct": 468, "readplistfromstr": 468, "writeplist": [468, 477], "readplist": [468, 477, 480, 483], "1649190": 468, "outset": 468, "1798": 468, "janssen": 468, "bgenloc": 468, "buildtool": 468, "bundlebuild": [468, 483], "fpformat": 468, "gensuitemodul": 468, "imageop": 468, "imgfil": 468, "mhlib": 468, "mimetool": 468, "multifil": 468, "toaiff": 468, "gopherlib": [468, 470], "mimewrit": 468, "mimifi": 468, "rgbimg": 468, "trojan": [468, 469], "hors": [468, 469], "50003": 468, "duncan": 468, "grisbi": 468, "pyfile_incusecount": 468, "pyfile_decusecount": 468, "1675423": 468, "1629": 468, "1530959": 468, "free_list": [468, 483], "numfre": 468, "_maxfreelist": 468, "patchcheck": [468, 483], "nt4": 468, "sp4": 468, "1753245": 468, "flori": 468, "bruynoogh": 468, "2125": 468, "macf": 468, "macostool": 468, "1490190": 468, "_builtinsuit": 468, "aepack": 468, "aetool": 468, "aetyp": 468, "applesingl": 468, "appletrawmain": 468, "appletrunn": 468, "argvemul": 468, "audio_mac": 468, "autogil": 468, "carbon": [468, 475], "cfmfile": 468, "codewarrior": 468, "colorpick": 468, "easydialog": 468, "findertool": 468, "icglu": 468, "icopen": 468, "macerror": 468, "macresourc": 468, "miniaefram": 468, "nav": [468, 483], "osaterminolog": 468, "pimp": 468, "pixmapwrapp": 468, "stdsuit": 468, "systemev": 468, "terminalcommand": 468, "cddb": 468, "cdplayer": 468, "fl": 468, "flp": 468, "fm": 468, "glws": 468, "gl": 468, "panelpars": 468, "readcd": 468, "sv": 468, "torgb": 468, "videoread": 468, "1683368": 468, "conversionsyntax": 468, "1706815": 468, "dict1": 468, "dict2": 468, "ralph": 468, "corderoy": 468, "lambach": 468, "michlmayr": 468, "warner": 468, "7319": 469, "reenabl": 469, "qwarn": 469, "744": 469, "073": [469, 483], "616": [469, 482, 483], "is_verbos": 469, "bore": 469, "1mb": 469, "configdict": 469, "netlog": 469, "netlogg": 469, "vk": 469, "revamp": [469, 475], "vassalotti": [469, 471, 475, 477, 483], "0x37f850": 469, "0x37f080": 469, "122": [469, 479], "mb": [469, 483], "2335": 469, "aaa": 469, "aaaaa": 469, "2333": 469, "codereview": 469, "appspot": [469, 471, 475], "53094": [469, 471, 475], "icc": [469, 471, 483], "suncc": 469, "7117": 469, "295147905179352891391": 469, "9514790517935283e": 469, "65535l": 469, "9514790517935289e": 469, "3166": 469, "1811": 469, "meador": [469, 476, 483], "5211": 469, "5237": [469, 471], "1588": 469, "7988": 469, "3382": 469, "7994": [469, 477], "124": [469, 471, 475, 477], "johansson": [469, 471], "victor": [469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "stinner": [469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "3439": [469, 471], "7902": 469, "1583863": 469, "4759": 469, "5982": 469, "7604": 469, "belchenko": 469, "1616979": [469, 475], "8016": 469, "kaliszewski": 469, "4764": 469, "5677": 469, "lingard": 469, "7362": 469, "8268": 469, "7140": 469, "curtin": [469, 475, 476, 477, 480], "survivor": 469, "4074": 469, "4688": [469, 471], "long_info": 469, "4258": [469, 471, 481], "5260": 469, "5512": 469, "1087418": 469, "5176": 469, "4715": 469, "gawain": [469, 475], "bolton": [469, 475], "6713": [469, 475], "florent": [469, 475], "xicluna": [469, 475], "7462": [469, 475], "7622": [469, 475], "mcguir": [469, 471], "5084": [469, 471], "5670": 469, "maru": 469, "senthil": [469, 472, 475, 477, 478, 479, 480, 481, 482, 483], "kumaran": [469, 472, 475, 477, 478, 479, 480, 481, 482, 483], "5142": 469, "7703": 469, "2devel9": 469, "8156": 469, "hagen": [469, 483], "rstenau": [469, 483], "3860": 469, "1696199": [469, 471], "field1": 469, "field2": 469, "_2": [469, 471], "1818": [469, 471], "8729": 469, "kindahl": 469, "7005": 469, "3924": 469, "1515": 469, "4606": 469, "klose": [469, 476, 479], "8142": 469, "5788": 469, "strive": 469, "4796": 469, "8257": [469, 475], "6595": 469, "jos": [469, 483], "conti": 469, "7633": 469, "6857": 469, "7279": 469, "anatoli": [469, 483], "techtonik": [469, 483], "7585": 469, "8688": 469, "lennart": [469, 483], "regebro": [469, 483], "7490": 469, "murray": [469, 475, 477, 478, 479, 483], "1368247": 469, "5812": 469, "8294": [469, 475], "oversight": [469, 476, 478, 480, 483], "giampaolo": [469, 474, 475, 476, 478, 480, 481, 483], "rodola": [469, 474, 475, 478, 480, 481, 483], "2054": 469, "mouzo": 469, "6845": 469, "5479": 469, "nir": [469, 475, 476, 480, 483], "7471": [469, 475], "jacqu": 469, "frechet": 469, "4272": 469, "tadek": 469, "pietraszek": 469, "2846": [469, 475], "chenet": [469, 475], "7418": [469, 475], "kristj": [469, 475, 477], "valur": [469, 475, 477], "nsson": [469, 475, 477], "4879": 469, "eldon": 469, "ziegler": 469, "derek": [469, 471], "morr": [469, 471], "1655": [469, 471], "_pyio": [469, 471, 474, 483], "4991": 469, "chambon": 469, "6939": 469, "5032": 469, "4816": 469, "4136": [469, 471], "5381": 469, "1607951": 469, "6896": 469, "nirina": 469, "raseliarison": 469, "3366": 469, "lekma": 469, "5585": 469, "cazabon": 469, "6963": 469, "1664": [469, 471], "6508": 469, "calderon": [469, 476], "7333": 469, "zsolt": [469, 483], "cserna": [469, 483], "7242": 469, "matt": [469, 477, 478, 483], "giuca": 469, "5827": 469, "3426": [469, 483], "laban": [469, 471], "4739": [469, 471], "6816": 469, "3002": 469, "francoi": 469, "natali": [469, 476, 477, 478], "8354": 469, "6693": [469, 475], "8104": 469, "nagl": [469, 483], "disable_nagle_algorithm": 469, "6192": 469, "6267": 469, "7133": 469, "ssl_mode_auto_retri": 469, "8222": 469, "8322": [469, 475], "beda": 469, "kosata": 469, "8484": [469, 475], "8321": [469, 475], "bbhhiillqq": 469, "1523": 469, "8300": 469, "disk0s2": 469, "52g": 469, "49g": 469, "0g": [469, 483], "1068268": 469, "8451": 469, "4285": [469, 471], "7766": 469, "unnot": 469, "7357": 469, "lesher": [469, 483], "1674032": 469, "unihan": 469, "ander": [469, 472, 480, 483], "chrigstr": 469, "1571184": 469, "8024": 469, "2987": [469, 475], "1080": 469, "200c": 469, "417a": 469, "ampersand": 469, "stylesheet": [469, 483], "style1": 469, "muller": 469, "2746": 469, "encode_threshold": 469, "5511": 469, "kuba": 469, "wieczorek": 469, "4710": 469, "7610": [469, 475], "gabriel": [469, 473, 483], "genellina": 469, "4756": 469, "6003": 469, "anydbm": [469, 470], "file_util": [469, 483], "distutils2": 469, "tck": 469, "tcl8": 469, "tkcmd": 469, "ttk_intro": 469, "screenshot": 469, "2983": [469, 471], "franklin": 469, "walzer": [469, 475, 483], "2618": 469, "unittest2": 469, "nose": 469, "6001": 469, "dyer": 469, "8074": 469, "1034053": 469, "5663": 469, "4444": 469, "5679": 469, "2578": 469, "7031": 469, "assertnotregexpmatch": [469, 473, 474], "8038": 469, "assertitemsequ": 469, "assertdictcontainssubset": [469, 471, 474, 475, 483], "roddi": 469, "6866": 469, "fern": 469, "ndez": 469, "3379": 469, "5728": 469, "20210619163128": 469, "shtml": 469, "getiter": [469, 475, 481, 482, 483], "childless": 469, "20200703234532": 469, "6472": [469, 475], "8032": 469, "3632": 469, "4293": 469, "7033": [469, 475], "horsen": 469, "7528": 469, "7767": [469, 475], "5753": [469, 475], "py_isalnum": 469, "py_isalpha": 469, "py_isdigit": 469, "py_islow": 469, "py_isspac": 469, "py_isupp": 469, "py_isxdigit": 469, "py_toupp": 469, "5793": 469, "pyeval_callobject": [469, 475, 482, 483], "8276": [469, 475], "pystring_fromformat": 469, "pystring_fromformatv": 469, "7228": 469, "1590864": 469, "_shutdown": [469, 483], "1722344": 469, "t_string_inplac": 469, "3102": [469, 470], "arfrev": [469, 475, 483], "freht": [469, 475, 483], "taifersar": [469, 475, 483], "arahesi": [469, 475, 483], "7609": 469, "2422": [469, 475], "6491": 469, "x87_double_round": 469, "2937": 469, "ldcxxshare": 469, "1222585": 469, "clinton": 469, "roy": [469, 483], "3585": 469, "6094": 469, "ucnhash_capi": [469, 472, 483], "pycobject": [469, 471, 475], "vtabl": 469, "pycobject_asvoidptr": 469, "5630": [469, 471], "cournapeau": 469, "4365": 469, "7347": 469, "_beginthreadex": 469, "3582": 469, "miki": [469, 475], "tebeka": [469, 475], "1220212": 469, "hirokazu": [469, 476, 483], "yamamoto": [469, 476, 480, 483], "5913": 469, "4969": 469, "4865": 469, "28440": [469, 483], "so_setfib": 469, "kyle": [469, 472, 479, 480, 481, 482, 483], "vanderbeek": 469, "8235": 469, "iobench": 469, "ccbench": 469, "throughput": [469, 480, 483], "5464": 469, "ziga": 469, "seilnacht": 469, "1180193": 469, "randse": 469, "6152": [469, 478], "7312": 469, "piotr": 469, "arowski": 469, "8233": 469, "1533": 469, "5920": 469, "6101": 469, "7853": 469, "leander": 469, "anand": [469, 475], "pillai": [469, 475], "7150": 469, "7348": 469, "5080": 469, "exempt": 469, "pythonshowrefcount": 469, "31733": 469, "count_alloc": [469, 479, 482, 483], "pythonshowalloccount": 469, "31692": 469, "gaynor": [469, 472, 478, 483], "21306": 469, "1g": [469, 483], "zachari": [469, 477, 478, 480, 483], "ware": [469, 477, 478, 480, 483], "21462": 469, "21304": 469, "21671": 469, "0224": 469, "tls1": 469, "reid": [469, 475], "21308": 469, "21305": 469, "21307": 469, "stufft": [469, 477], "deili": [469, 475, 477, 481, 482], "pythonhttpsverifi": 469, "_https_verify_certif": 469, "autotool": [469, 478, 479], "pregener": [469, 478, 479, 483], "23404": [469, 478, 479, 483], "philip": [469, 474, 475, 479, 483], "jenvey": [469, 475], "ryan": [469, 476, 477, 479, 480, 483], "lovett": 469, "hugh": 469, "secker": 469, "walker": 469, "cruft": 470, "wealth": 470, "softspac": [470, 483], "retrain": 470, "corollari": 470, "incompar": 470, "0720": 470, "0o720": 470, "loud": 470, "unixi": 470, "3138": 470, "some_sequ": 470, "274": 470, "vindic": 470, "3109": 470, "crutch": 470, "item1": 470, "item2": 470, "3113": 470, "b_c": 470, "3108": 470, "beo": 470, "instabl": 470, "copy_reg": 470, "markupbas": 470, "_markupbas": [470, 472, 483], "dbhash": 470, "htmlentitydef": 470, "basehttpserv": 470, "cgihttpserv": [470, 483], "simplehttpserv": [470, 483], "acquire_lock": [470, 474], "release_lock": [470, 474], "jumpahead": 470, "tmpnam": 470, "tempnam": 470, "tmpfile": 470, "scoop": 470, "secondaryexcept": 470, "primary_except": 470, "__getslice__": 470, "__setslice__": 470, "__delslice__": 470, "3114": 470, "func_x": 470, "__x__": 470, "wit": [470, 483], "func_cod": 470, "func_default": 470, "func_dict": 470, "func_doc": 470, "func_glob": 470, "3111": 470, "tru64": 470, "3123": 470, "pynumber_coerc": 470, "pynumber_coerceex": 470, "pymember_get": 470, "pymember_set": 470, "nb_nonzero": 470, "with_cycle_gc": 470, "contort": 470, "unsort": [471, 483], "8901234": 471, "12j": 471, "600000": 471, "120000j": 471, "underway": 471, "camelot": 471, "5675": [471, 475], "mattia": [471, 475], "ndstr": [471, 475], "4707": 471, "199999999999ap": 471, "smarter": [471, 475, 483], "1580": 471, "dickinso": 471, "namesak": 471, "lv": 471, "ov": 471, "oe": 471, "_0": 471, "query_field": 471, "userqueri": 471, "sale": [471, 475], "4384": 471, "vajda": 471, "4195": 471, "4201": 471, "5228": 471, "testgizmo": 471, "test_gizmo_on_window": 471, "test_gimzo_without_required_librari": 471, "builtout": 471, "test_division_by_zero": 471, "confound": 471, "remap": 471, "c__builtin__": 471, "nset": 471, "np0": 471, "lp1": 471, "nl1l": 471, "nal2l": 471, "nal3l": 471, "natp2": 471, "nrp3": 471, "6137": 471, "sunpro": 471, "4753": 471, "4868": 471, "roger": [471, 482, 483], "serwi": [471, 483], "5150": [471, 475], "lisandro": 471, "dalcrin": 471, "5175": 471, "pynumber_int": 471, "4910": 471, "5914": 471, "7182818284590451": 471, "718281828459045": 471, "salgado": [472, 473, 478, 481, 482, 483], "635": 472, "12782": 472, "632": [472, 474, 483], "624": [472, 473, 483], "ctxmanag": 472, "ctxmanager1": 472, "ctxmanager2": 472, "example1": 472, "example2": 472, "ctxmanager3": 472, "example3": 472, "lysandro": [472, 474, 482, 483], "nikolaou": [472, 474, 482, 483], "40334": [472, 482, 483], "some_other_cod": 472, "eol": [472, 483], "42864": [472, 483], "batuhan": [472, 473, 474, 481, 482, 483], "taskaya": [472, 473, 474, 481, 482, 483], "40176": [472, 483], "43914": [472, 483], "rocket": 472, "event_horizon": 472, "42997": [472, 483], "43017": [472, 483], "43822": [472, 483], "build_dyson_spher": 472, "notenoughscienceerror": 472, "notenoughresourceserror": 472, "43149": [472, 483], "43823": [472, 483], "44305": [472, 483], "43797": [472, 483], "all_black_hol": 472, "revel": 472, "41064": [472, 483], "lel": 472, "namedtoplo": 472, "38530": [472, 483], "schwarzschild_black_hol": 472, "schwarschild_black_hol": 472, "pattern_1": 472, "action_1": 472, "pattern_2": 472, "action_2": 472, "pattern_3": 472, "action_3": 472, "action_wildcard": 472, "scala": 472, "elixir": 472, "imper": 472, "test_vari": 472, "maggi": [472, 481], "moss": 472, "prado": 472, "41428": [472, 483], "yurii": [472, 473, 482, 483], "karaba": [472, 473, 482, 483], "44490": [472, 483], "jin": [472, 473, 474, 479, 480, 481, 482, 483], "41559": [472, 483], "jell": [472, 473, 474, 479, 480, 483], "zijlstra": [472, 473, 474, 479, 480, 483], "43783": 472, "mendoza": [472, 473], "unannot": 472, "strcach": 472, "log_prefix": 472, "mikhail": 472, "golubev": 472, "41923": [472, 483], "43766": [472, 483], "traut": [472, 473, 474, 483], "nikla": [472, 473, 483], "fieka": [472, 483], "29882": [472, 483], "sweeney": [472, 473, 474, 482, 483], "40890": [472, 483], "37999": [472, 483], "shkop": [472, 483], "38302": [472, 483], "shannon": [472, 473, 474, 476, 480, 481, 482, 483], "42990": [472, 483], "joshua": [472, 478, 483], "bronson": [472, 481, 483], "pope": [472, 483], "justin": [472, 476, 483], "wang": [472, 474, 480, 483], "31861": [472, 483], "43682": [472, 483], "42737": [472, 483], "43901": [472, 483], "42725": [472, 483], "43475": [472, 483], "donghe": [472, 473, 474, 481, 482, 483], "45000": [472, 483], "nholm": [472, 473, 481], "41332": [472, 483], "9694": [472, 483], "lorentsen": [472, 480, 483], "zackeri": [472, 473, 481, 482, 483], "spytz": [472, 473, 481, 482, 483], "31956": [472, 483], "clearbreakpoint": 472, "irit": [472, 473, 474, 483], "katriel": [472, 473, 474, 483], "24160": [472, 483], "4356": [472, 483], "hai": [472, 473], "shi": [472, 473], "41842": [472, 483], "42195": [472, 482, 483], "joongi": [472, 483], "kim": [472, 483], "41229": [472, 483], "gringauz": 472, "41543": [472, 483], "kintscher": [472, 483], "petter": [472, 481, 483], "jansson": 472, "36982": [472, 483], "39273": [472, 483], "42269": [472, 483], "43532": [472, 483], "bdist_wheel": [472, 473, 481, 482, 483], "42802": [472, 483], "42133": [472, 483], "normalize_encod": [472, 482, 483], "39337": [472, 483], "enum_nam": 472, "ethan": [472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483], "furman": [472, 474, 476, 477, 478, 479, 480, 483], "40066": [472, 483], "41816": [472, 483], "inada": [472, 473, 474, 478, 479, 480, 481, 482, 483], "naoki": [472, 473, 474, 478, 479, 480, 481, 482, 483], "43712": [472, 483], "5758": 472, "44466": [472, 483], "43439": [472, 483], "38144": [472, 483], "43669": [472, 483], "38820": [472, 483], "43880": [472, 483], "40645": [472, 483], "hilton": [472, 473, 474, 482, 483], "43008": [472, 482, 483], "40468": [472, 482, 483], "33962": [472, 482, 483], "tal": [472, 478, 479, 480, 481, 483], "einat": [472, 478, 479, 480, 481, 483], "37903": [472, 483], "37892": [472, 483], "44010": [472, 483], "pyi": [472, 473, 482, 483], "waygood": [472, 473, 474, 482, 483], "45447": [472, 473, 482, 483], "95191": [472, 473, 483], "from_funct": [472, 473, 478, 483], "43817": [472, 483], "38200": [472, 483], "rtos": [472, 483], "peix": [472, 483], "xin": [472, 483], "41440": [472, 483], "eventfd2": 472, "41001": [472, 483], "41625": [472, 483], "43106": [472, 483], "barney": [472, 474, 483], "gale": [472, 474, 483], "43757": 472, "35498": [472, 483], "yaroslav": [472, 483], "pankovych": [472, 483], "21041": [472, 483], "link_to": [472, 473, 481, 483], "39950": [472, 483], "39906": [472, 483], "28468": [472, 483], "sblondon": 472, "42914": [472, 483], "lewi": [472, 483], "gaul": [472, 483], "43080": [472, 483], "schevchenko": [472, 483], "38731": [472, 483], "avir": [472, 483], "srivastava": [472, 483], "38307": [472, 483], "34204": [472, 483], "tymoteusz": [472, 483], "wo": [472, 483], "ko": [472, 479, 480, 483], "38490": [472, 483], "42413": [472, 483], "mptcp": [472, 483], "rui": 472, "cunha": 472, "43571": [472, 483], "dscp": [472, 483], "ecn": [472, 483], "sauthoff": 472, "44077": [472, 483], "43794": [472, 483], "43788": [472, 483], "43791": [472, 483], "43799": [472, 483], "43920": [472, 483], "43789": [472, 483], "43811": [472, 483], "hynek": [472, 476, 477, 483], "schlawack": [472, 476, 477, 483], "43998": [472, 483], "31870": [472, 483], "42333": [472, 483], "l0x": 472, "40849": [472, 483], "erlend": [472, 473, 474, 483], "aasland": [472, 473, 474, 483], "43762": [472, 483], "23427": [472, 483], "42955": [472, 483], "43356": [472, 483], "mario": [472, 480, 483], "corchero": [472, 480, 483], "42251": [472, 483], "42308": [472, 483], "bussonni": [472, 480, 481, 483], "26389": [472, 483], "bas": 472, "beek": 472, "41810": [472, 483], "42345": [472, 482, 483], "41792": [472, 483], "38908": [472, 483], "sebastian": [472, 473, 483], "rittau": [472, 473], "kit": [472, 483], "yan": [472, 483], "choi": [472, 483], "39385": [472, 483], "goldschmidt": [472, 479, 480, 481, 482, 483], "42967": [472, 479, 480, 481, 482, 483], "_unsafe_url_bytes_to_remov": [472, 479, 480, 481, 482], "88048": [472, 479, 480, 482], "jonathan": [472, 476, 478, 481, 483], "gossag": 472, "35018": [472, 483], "42131": [472, 483], "desmond": [472, 483], "cheong": [472, 483], "14678": [472, 483], "41334": [472, 483], "41006": [472, 483], "41718": 472, "yuri": [472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483], "selivanov": [472, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483], "42093": [472, 483], "42927": [472, 483], "micropython": [472, 483], "38980": [472, 483], "_compress": [472, 483], "decompressread": [472, 483], "09x": 472, "20x": [472, 474], "32x": 472, "11x": 472, "18x": 472, "lin": [472, 473, 483], "41486": [472, 483], "42202": [472, 483], "str1": [472, 483], "str2": [472, 483], "crochemor": 472, "41972": [472, 483], "dino": [472, 479, 482, 483], "viehland": [472, 479, 482, 483], "43452": [472, 483], "jeroen": [472, 479, 481, 482, 483], "demey": [472, 479, 481, 482, 483], "43575": [472, 483], "43287": [472, 483], "41922": [472, 483], "41873": [472, 483], "41870": [472, 483], "43785": [472, 483], "0in": [472, 474], "1or": [472, 474], "0if": [472, 474], "1els": [472, 474], "0x1for": [472, 474], "43833": [472, 483], "37319": 472, "26131": [472, 483], "zimport": 472, "42134": [472, 483], "43672": [472, 483], "42135": [472, 483], "set_package_wrapp": [472, 473], "set_loader_wrapp": [472, 473], "module_for_load": [472, 473, 474, 477, 483], "impimport": [472, 473, 474, 483], "impload": [472, 473, 474, 483], "43720": [472, 483], "42137": [472, 483], "frozenload": [472, 473], "builtinload": [472, 473], "42136": [472, 483], "optimizedunicod": [472, 473, 474, 483], "42264": [472, 483], "enable_shared_cach": [472, 473, 474, 483], "24464": [472, 483], "87889": 472, "41139": [472, 483], "sslsslcontext": 472, "protocol_sslv2": 472, "rand_pseudo_byt": [472, 474, 476, 483], "pythonthreaddebug": [472, 473, 483], "44584": [472, 483], "41974": [472, 483], "parserbas": [472, 483], "berker": [472, 477, 478, 479, 480, 481, 483], "peksag": [472, 477, 478, 479, 480, 481, 483], "31844": [472, 483], "_pyunicode_name_capi": [472, 483], "42157": [472, 483], "graminit": 472, "pyparser_simpleparsestringflag": [472, 482], "pyparser_simpleparsestringflagsfilenam": [472, 482], "pyparser_simpleparsefileflag": [472, 482], "pynode_compil": [472, 482], "42299": [472, 483], "pymodule_getwarningsmodul": 472, "42599": 472, "37324": [472, 483], "svetlov": [472, 473, 477, 480, 481, 482, 483], "stanley": [472, 479, 480, 481, 482, 483], "42392": [472, 483], "42639": [472, 483], "42393": [472, 483], "_node": [472, 483], "io_modul": 472, "import_importmodul": 472, "source_bytes_object": 472, "source_buf": 472, "wordcod": [472, 479, 483], "36020": [472, 483], "sergey": [472, 473, 482, 483], "fedoseev": [472, 482, 483], "40744": [472, 483], "40810": [472, 483], "xavier": [472, 477, 479, 480, 483], "petazzoni": [472, 483], "27640": [472, 483], "42856": [472, 483], "43103": [472, 483], "tcltk": [472, 473, 475, 482, 483], "manoli": 472, "stamatogiannaki": 472, "42603": [472, 483], "43466": [472, 483], "petr": [472, 473, 474, 478, 480, 481, 482, 483], "viktorin": [472, 473, 474, 478, 481, 482, 483], "43795": [472, 483], "40792": [472, 483], "30155": [472, 483], "matveev": [472, 474, 481, 483], "41756": [472, 483], "41784": [472, 483], "1635741": [472, 483], "42262": [472, 483], "42423": [472, 483], "41832": [472, 483], "41073": [472, 483], "43277": [472, 483], "36465": [472, 481, 483], "43688": [472, 483], "43753": [472, 483], "43916": [472, 483], "43908": [472, 473, 483], "40943": [472, 483], "new_refcnt": 472, "0x030900a4": [472, 473], "39573": [472, 473, 483], "40839": [472, 483], "pyunicode_fromunicod": [472, 473, 474, 476, 482, 483], "36346": [472, 482, 483], "42260": [472, 483], "30459": [472, 483], "odictobject": [472, 483], "parser_interfac": [472, 483], "picklebufobject": [472, 483], "pyarena": [472, 483], "pyfp": [472, 482, 483], "pytim": [472, 483], "sim": 472, "35134": [472, 473, 481, 483], "py_frozenmain": [472, 483], "26241": 472, "pyunicode_internimmort": [472, 473, 474, 483], "41692": [472, 483], "py_unicode_str": [472, 483], "41123": [472, 473, 483], "py_unicode_strlen": [472, 476], "py_unicode_strcat": [472, 476], "py_unicode_strcpi": [472, 476], "py_unicode_strncpi": [472, 476], "py_unicode_strcmp": [472, 476], "py_unicode_strncmp": [472, 476], "py_unicode_strchr": [472, 476], "py_unicode_strrchr": [472, 476], "pyunicode_getmax": [472, 476, 483], "41103": [472, 483], "pylong_fromunicod": [472, 483], "pyunicode_asunicodecopi": [472, 476, 483], "_py_checkrecursionlimit": [472, 482, 483], "recursion_limit": [472, 473, 483], "41834": [472, 483], "py_allow_recurs": [472, 483], "py_end_allow_recurs": [472, 483], "recursion_rit": 472, "41936": [472, 483], "pyos_initinterrupt": [472, 483], "41713": [472, 483], "pyast_valid": [472, 483], "43244": [472, 483], "pyst_getscop": [472, 483], "pysymtable_build": [472, 483], "pysymtable_buildobject": [472, 483], "pysymtable_fre": [472, 483], "py_symtablestr": [472, 483], "py_symtablestringobject": [472, 483], "43868": [472, 483], "winbas": [472, 483], "_mod": [472, 483], "pyast_compileex": [472, 483], "pyast_compileobject": [472, 483], "pyfuture_fromast": [472, 483], "pyfuture_fromastobject": [472, 483], "pyparser_astfromfileobject": [472, 483], "pyparser_astfromfilenam": [472, 483], "pyparser_astfromstringobject": [472, 483], "pyarena_new": [472, 483], "pyarena_fre": [472, 483], "pyarena_malloc": [472, 483], "pyarena_addpyobject": [472, 483], "use_trac": [472, 473], "43760": [472, 473, 483], "98966": 472, "25x": 473, "680": [473, 483], "manhattan_dist": 473, "point_1": 473, "point_2": 473, "magic_arithmet": 473, "add_count": 473, "query_us": 473, "query_count": 473, "ammar": [473, 479, 480, 481, 483], "askar": [473, 479, 480, 481, 483], "43950": [473, 483], "45292": [473, 483], "45607": [473, 483], "zac": [473, 483], "hatfield": [473, 483], "dodd": [473, 483], "otherpython": 473, "tensorflow": 473, "rahtz": 473, "43224": [473, 483], "pradeep": 473, "kumar": [473, 474, 483], "srinivasan": 473, "sile": 473, "panther": 473, "foster": [473, 483], "47087": [473, 483], "mylock": 473, "myint": 473, "balf": [473, 474, 483], "46534": [473, 483], "table_nam": 473, "47088": [473, 483], "bleaney": 473, "91860": [473, 483], "bont": [473, 474], "counsil": 473, "46725": 473, "33346": [473, 483], "12022": [473, 483], "44471": [473, 483], "70766": 473, "26579": [473, 483], "57684": [473, 483], "90153": 473, "grainger": [473, 483], "91181": 473, "24234": [473, 483], "29410": [473, 483], "45711": [473, 483], "_pyerr_stackitem": [473, 483], "bastian": 473, "neuburg": 473, "44934": [473, 483], "46142": [473, 483], "tane": 473, "hukkinen": 473, "40059": [473, 483], "42012": [473, 483], "90908": 473, "90927": 473, "91218": 473, "duprat": 473, "87518": 473, "34975": [473, 483], "46805": [473, 483], "filip": [473, 476, 477, 481, 483], "25625": [473, 483], "44674": [473, 483], "kabir": [473, 483], "kwatra": [473, 483], "91973": 473, "ganssl": [473, 474, 480, 481, 482, 483], "80010": [473, 483], "aflag": 473, "kirpichev": [473, 483], "44258": [473, 483], "some_fract": 473, "44547": [473, 483], "46014": [473, 483], "libb2": [473, 483], "47095": [473, 483], "_sha3": [473, 483], "tiny_sha3": [473, 483], "47098": [473, 483], "89313": 473, "weipeng": [473, 481, 483], "hong": [473, 481, 483], "30533": [473, 483], "hakan": [473, 483], "elik": [473, 483], "29418": [473, 483], "88116": [473, 483], "andrei": [473, 483], "kulakovin": 473, "88024": 473, "kiril": 473, "pinchuk": 473, "88457": 473, "gideon": 473, "45917": [473, 483], "ajith": 473, "ramachandran": 473, "44357": [473, 483], "44339": [473, 483], "46917": [473, 483], "antoni": [473, 483], "44019": [473, 483], "44611": [473, 483], "eisuk": [473, 483], "kawasima": 473, "22276": [473, 483], "33392": 473, "433030": [473, 483], "46245": [473, 483], "klausner": 473, "30512": [473, 483], "29980": 473, "44491": [473, 483], "44688": [473, 483], "aviv": [473, 479, 481, 483], "palivoda": [473, 479, 481, 483], "shahaf": [473, 478, 483], "16379": [473, 483], "24139": [473, 483], "45243": [473, 483], "45613": [473, 483], "45828": [473, 483], "44092": [473, 483], "41930": [473, 483], "34916": 473, "24905": [473, 483], "keho": 473, "90465": 473, "46328": [473, 483], "miro": [473, 483], "hron": [473, 483], "45413": [473, 483], "carey": [473, 483], "metcalf": [473, 483], "70363": 473, "sem_clockwait": [473, 483], "41710": [473, 483], "sz": [473, 483], "ke": [473, 483], "21302": [473, 483], "45429": [473, 483], "info_patchlevel": [473, 483], "91827": [473, 483], "44569": [473, 483], "33809": [473, 483], "90633": [473, 483], "90572": 473, "90638": 473, "samodya": 473, "abeysiriwardan": 473, "89026": 473, "43923": 473, "shantanu": [473, 474, 483], "jain": [473, 474, 483], "91154": 473, "90500": 473, "89263": 473, "adrian": [473, 474, 480, 483], "badarasco": 473, "88970": 473, "91137": 473, "_type_check": 473, "beauregard": [473, 483], "90802": 473, "rosenstein": 473, "85542": 473, "nikita": [473, 474, 483], "sobolev": [473, 474, 483], "90353": 473, "90711": 473, "90729": 473, "45190": [473, 483], "45046": [473, 483], "47074": 473, "turnbul": [473, 483], "28080": [473, 483], "ezeh": 473, "49083": 473, "miguel": [473, 483], "brito": [473, 483], "88261": 473, "28307": [473, 483], "90564": 473, "behnel": [473, 477, 478, 480, 481, 483], "68264": 473, "91165": 473, "272": [473, 483], "46845": [473, 483], "msoxzw": 473, "91487": [473, 483], "37295": [473, 483], "90415": 473, "44987": [473, 483], "pyperform": [473, 483], "aditya": [473, 474, 483], "44590": [473, 483], "45256": [473, 483], "superinstruct": [473, 483], "brunthal": 473, "brandt": [473, 474, 482, 483], "bucher": [473, 474, 482, 483], "45947": [473, 483], "45340": [473, 483], "40116": [473, 483], "40222": [473, 483], "91404": [473, 483], "bloomberg": 473, "async_gen_wrap": [473, 483], "prep_reraise_star": [473, 483], "binary_": [473, 483], "inplace_": [473, 483], "call_function_kw": [473, 479, 483], "call_method": [473, 480, 483], "precal": [473, 474, 483], "dup_top": [473, 483], "dup_top_two": [473, 483], "rot_two": [473, 483], "rot_thre": [473, 483], "rot_four": [473, 481, 483], "rot_n": [473, 483], "jump_if_not_exc_match": [473, 482, 483], "jump_absolut": [473, 483], "pop_jump_backward_if_": 473, "pop_jump_forward_if_": 473, "not_non": 473, "setup_async_with": 473, "jump_if_true_or_pop": [473, 474, 483], "jump_if_false_or_pop": [473, 474, 483], "89874": [473, 474], "copy_dict_without_key": 473, "gen_start": [473, 483], "19072": [473, 483], "89519": [473, 474, 483], "81548": [473, 483], "44977": [473, 483], "47061": [473, 483], "68966": [473, 483], "hugo": [473, 474, 477, 482, 483], "kemenad": [473, 474, 482, 483], "47022": [473, 483], "40360": [473, 482, 483], "sre_compil": [473, 483], "sre_const": [473, 478, 483], "sre_pars": [473, 483], "47152": [473, 483], "safeconfigpars": [473, 474, 475, 483], "45173": [473, 483], "legacyinterpol": [473, 474, 483], "46607": [473, 483], "90817": [473, 474, 483], "91760": [473, 474, 483], "92728": [473, 483], "45837": [473, 483], "jingchen": [473, 483], "90224": 473, "42255": [473, 483], "findtestcas": [473, 474, 483], "makesuit": [473, 474, 483], "5846": [473, 483], "usageexit": [473, 474, 483], "dam": 473, "zio": 473, "67048": [473, 474], "illia": [473, 483], "volochii": [473, 483], "43216": [473, 483], "corowrapp": [473, 483], "45129": [473, 483], "binhex": [473, 482, 483], "a2b_hqx": [473, 482, 483], "b2a_hqx": [473, 482, 483], "rlecode_hqx": [473, 482, 483], "rldecode_hqx": 473, "45085": [473, 483], "bdist_msi": [473, 482, 483], "45124": [473, 483], "45132": [473, 483], "lgettext": [473, 481, 483], "ldgettext": [473, 481], "lngettext": [473, 481], "ldngettext": [473, 481], "set_output_charset": [473, 481], "44235": [473, 483], "formatargspec": [473, 478, 483], "from_builtin": [473, 478, 483], "45320": [473, 483], "46483": [473, 483], "mailmanproxi": [473, 482, 483], "35800": [473, 482, 483], "tkapptyp": [473, 482, 483], "38371": [473, 482, 483], "23882": [473, 483], "__set_format__": [473, 483], "__setformat__": [473, 483], "46852": [473, 483], "experimental_isolated_subinterpret": [473, 483], "pynch": [473, 483], "37330": [473, 483], "93351": [473, 483], "43234": [473, 483], "46659": [473, 483], "sriniva": [473, 480, 483], "reddi": [473, 480, 483], "thatiparthi": [473, 480, 483], "41137": [473, 483], "40465": [473, 482, 483], "47066": [473, 483], "35859": [473, 483], "84461": [473, 483], "90473": [473, 483], "95085": [473, 483], "46656": [473, 483], "45440": [473, 483], "46640": [473, 483], "py_no_nan": [473, 483], "46996": [473, 483], "libnsl": [473, 483], "libsqlite3": 473, "libcrypt": [473, 483], "egeberg": 473, "45847": [473, 483], "45747": [473, 483], "45763": [473, 483], "gilbert": 473, "45433": [473, 483], "holman": [473, 483], "44340": [473, 483], "45522": [473, 483], "45548": [473, 483], "45570": [473, 483], "45571": [473, 483], "43974": [473, 483], "tcltk_cflag": 473, "tcltk_lib": 473, "rhel": [473, 480, 483], "ltk8": 473, "ltkstub8": 473, "ltcl8": 473, "rhel7": 473, "sizeof_void_p": 473, "45569": [473, 483], "42035": [473, 483], "tornetta": [473, 483], "43931": [473, 483], "45459": [473, 483], "46613": [473, 483], "46906": [473, 483], "46343": [473, 483], "89653": 473, "46608": [473, 483], "exception_t": 473, "46841": [473, 483], "92154": [473, 483], "94936": [473, 483], "py_trashcan_safe_begin": [473, 482, 483], "py_trashcan_safe_end": [473, 482, 483], "py_trashcan_begin": [473, 482, 483], "py_trashcan_end": [473, 482, 483], "mytype_dealloc": 473, "0x03080000": [473, 481], "cpy_trashcan_begin": 473, "cpy_trashcan_end": 473, "44263": [473, 483], "new_typ": 473, "_py_set_typ": 473, "_py_set_s": 473, "0x030b0000": [473, 483], "45434": [473, 483], "cellobject": [473, 483], "genobject": [473, 483], "longintrepr": [473, 483], "pyunicode_check_intern": [473, 483], "46007": [473, 483], "93937": [473, 483], "f_blockstack": 473, "f_gen": 473, "f_iblock": 473, "f_stackdepth": 473, "f_state": [473, 483], "f_frame": 473, "f_localsplus": 473, "localsplus": 473, "f_valuestack": 473, "pyframe_fasttolocalswitherror": [473, 483], "pyframe_localstofast": [473, 483], "0x030900b1": 473, "pythoncap_compat": 473, "40429": [473, 483], "recursion_depth": [473, 482, 483], "recursion_remain": 473, "stackcheck_count": 473, "0x030b00a2": 473, "0x030a00a1": 473, "cframe": 473, "c_tracefunc": 473, "c_profilefunc": 473, "pythoncap": 473, "_py_setprogramfullpath": [473, 483], "88279": [473, 483], "ob_shash": [473, 474, 483], "46864": [473, 483], "pyunicode_as_data": [473, 474, 476, 483], "pyunicode_as_unicod": [473, 474, 476, 483], "pyunicode_asunicodeands": [473, 474, 476, 482, 483], "pyunicode_asunicod": [473, 474, 476, 482, 483], "pyunicode_get_data_s": [473, 474, 476, 483], "pyunicode_get_s": [473, 474, 476, 483], "pyunicode_gets": [473, 474, 476], "pyunicode_is_compact": 473, "pyunicode_is_readi": 473, "pyunicode_wstr_length": [473, 482, 483], "_pyunicode_asunicod": [473, 482], "pyframe_blocksetup": 473, "pyframe_blockpop": 473, "py_adjust_erange1": [473, 483], "py_adjust_erange2": [473, 483], "py_overflow": [473, 483], "py_set_erange_if_overflow": [473, 483], "py_set_errno_on_math_error": [473, 483], "45412": [473, 483], "py_unicode_copi": [473, 476, 482, 483], "py_unicode_fil": [473, 476, 482, 483], "pystrhex": [473, 483], "py_force_doubl": [473, 483], "py_is_infin": [473, 483], "45474": [473, 483], "pyheaptype_get_memb": [473, 483], "40170": [473, 482, 483], "have_py_set_53bit_precis": [473, 483], "pyunicode_encod": [473, 476, 483], "pyunicode_encodeascii": [473, 476], "pyunicode_encodelatin1": [473, 476, 483], "pyunicode_encodeutf7": [473, 476, 483], "pyunicode_encodeutf8": [473, 476, 483], "pyunicode_encodeutf16": [473, 476, 483], "pyunicode_encodeutf32": [473, 476, 483], "pyunicode_encodeunicodeescap": [473, 476, 483], "pyunicode_encoderawunicodeescap": [473, 476, 483], "pyunicode_encodecharmap": [473, 476, 483], "pyunicode_translatecharmap": [473, 476, 483], "pyunicode_encodedecim": [473, 476, 483], "pyunicode_transformdecimaltoascii": [473, 476, 483], "44029": [473, 483], "turner": [474, 483], "693": 474, "ergonom": 474, "95299": [474, 483], "labeledtupl": 474, "hashablesequ": 474, "intorstrsequ": 474, "103764": 474, "eden": 474, "alkalin": 474, "ascension": 474, "playlist": 474, "sky": 474, "cristi": 474, "maureira": 474, "frede": 474, "marta": [474, 483], "mez": [474, 483], "102856": [474, 483], "anticip": [474, 479, 483], "_xxsubinterpretersmodul": 474, "104210": 474, "103082": [474, 483], "102500": [474, 483], "meyer": [474, 476, 481, 482, 483], "98254": [474, 483], "99139": [474, 483], "blech": 474, "somethin": 474, "98931": [474, 483], "91058": [474, 483], "franek": 474, "magiera": 474, "103629": [474, 483], "get_color": 474, "goodchild": 474, "badchild": 474, "get_colour": 474, "troxler": [474, 483], "101561": [474, 483], "96670": [474, 483], "98401": [474, 483], "some_it": [474, 483], "100581": 474, "77757": [474, 483], "103590": [474, 483], "breaker": [474, 483], "97922": [474, 483], "60203": 474, "90751": [474, 483], "bradshaw": [474, 483], "furkan": [474, 483], "onder": [474, 483], "101264": 474, "neumaier": 474, "100425": [474, 483], "87995": [474, 483], "96123": 474, "98658": [474, 483], "91166": [474, 483], "2x": [474, 476, 479, 483], "bower": [474, 483], "102853": 474, "104140": 474, "104138": 474, "98024": 474, "94597": [474, 483], "99388": [474, 483], "6x": [474, 483], "pranav": 474, "thulasiram": 474, "bhat": 474, "100344": [474, 483], "102748": [474, 483], "78530": [474, 483], "princ": 474, "roshan": 474, "103636": [474, 483], "94216": [474, 483], "100161": 474, "coomb": [474, 477, 481, 482], "97930": [474, 483], "100598": 474, "carlton": 474, "gibson": 474, "99247": 474, "krennwalln": [474, 483], "79940": [474, 483], "103193": [474, 483], "98363": [474, 483], "100485": [474, 483], "goergen": 474, "94906": [474, 483], "93312": [474, 483], "machalow": 474, "99547": [474, 483], "dower": [474, 478, 479, 480, 481, 482], "102519": [474, 483], "99726": [474, 483], "triad": 474, "101000": [474, 483], "stanislav": 474, "zmiev": 474, "90385": [474, 483], "domenico": 474, "ragusa": 474, "84538": 474, "tian": [474, 483], "gao": [474, 483], "103693": [474, 483], "81620": [474, 483], "100234": [474, 483], "74696": [474, 483], "triplet": [474, 483], "102828": [474, 483], "103179": 474, "77617": [474, 483], "83638": [474, 483], "103015": [474, 483], "103489": [474, 483], "95861": [474, 483], "102778": [474, 483], "103176": [474, 483], "evgeni": [474, 482, 483], "zorin": 474, "58451": 474, "93503": [474, 483], "create_": 474, "94473": [474, 483], "101827": 474, "102433": [474, 483], "hasx": 474, "fourteen": 474, "74690": [474, 483], "badaracco": [474, 483], "103699": [474, 483], "99957": [474, 483], "96734": [474, 483], "test_thread": [474, 483], "210s": 474, "test_timeout": [474, 483], "barriertest": 474, "003s": 474, "test_default_timeout": 474, "518s": 474, "eventtest": 474, "158": 474, "869s": 474, "48330": [474, 483], "chhina": 474, "88597": [474, 483], "wstr_length": 474, "92536": [474, 483], "modzelewski": 474, "90536": [474, 483], "101525": 474, "91524": [474, 483], "103793": [474, 483], "103497": 474, "93429": [474, 483], "102859": [474, 483], "92925": 474, "94163": [474, 483], "99005": [474, 483], "101799": [474, 483], "90997": [474, 483], "101441": 474, "93143": [474, 483], "wenyang": 474, "101632": [474, 483], "97681": [474, 483], "97669": [474, 483], "92248": [474, 483], "90953": 474, "100160": [474, 483], "103857": [474, 483], "william": [474, 477, 483], "72346": [474, 483], "93963": [474, 483], "101588": [474, 483], "84559": 474, "97850": [474, 483], "master_open": [474, 483], "slave_open": [474, 483], "soumendra": [474, 483], "ganguli": [474, 483], "85984": [474, 483], "90016": [474, 483], "101698": 474, "83122": 474, "ofey": [474, 483], "chan": [474, 483], "65961": [474, 483], "ceas": [474, 483], "hoffmann": [474, 483], "103487": 474, "101866": 474, "84540": 474, "90765": 474, "50096": 474, "86421": 474, "106531": 474, "57281": 474, "87999": [474, 483], "96580": 474, "89336": [474, 483], "92584": [474, 483], "pradyun": 474, "gedam": 474, "95083": 474, "94172": [474, 483], "94196": [474, 483], "94199": [474, 483], "set_packag": [474, 477, 483], "set_load": [474, 477, 483], "98040": [474, 483], "nullimport": [474, 476], "get_mag": [474, 477], "get_suffix": 474, "new_modul": 474, "load_sourc": 474, "init_builtin": 474, "load_compil": 474, "load_dynam": [474, 483], "load_packag": [474, 483], "lock_held": 474, "search_error": 474, "py_sourc": 474, "c_extens": 474, "py_resourc": 474, "pkg_directori": 474, "c_builtin": 474, "py_frozen": 474, "py_coderesourc": 474, "imp_hook": 474, "openwrapp": [474, 483], "94169": [474, 483], "94226": [474, 483], "aiosmtpd": [474, 483], "iarygin": [474, 483], "93243": [474, 483], "92548": 474, "cwe": [474, 483], "isident": 474, "teyit": 474, "modernis": 474, "_texttestresult": [474, 483], "89325": [474, 483], "firebird": [474, 483], "102871": [474, 483], "94383": [474, 483], "94379": [474, 483], "suspici": [474, 483], "rstlint": [474, 483], "julien": [474, 480], "palard": [474, 480], "98179": 474, "99482": [474, 483], "_use_broken_old_ctypes_structure_semantics_": [474, 483], "99285": 474, "1e25": 474, "86388": [474, 483], "94352": [474, 483], "98393": [474, 483], "99127": [474, 483], "_is_main_interpret": 474, "112826": 474, "93939": [474, 483], "va_start": [474, 483], "93207": [474, 483], "89536": 474, "99289": [474, 483], "loongarch": [474, 483], "loongarch64": [474, 483], "gnusf": [474, 483], "gnuf32": [474, 483], "zhang": [474, 479, 480, 481, 483], "90656": [474, 483], "python_for_regen": [474, 483], "89886": [474, 483], "pyunstable_": 474, "101101": 474, "103509": [474, 483], "wenzel": 474, "jakob": 474, "93012": [474, 483], "93274": [474, 483], "98586": [474, 483], "frost": 474, "92257": 474, "91052": [474, 483], "91051": [474, 483], "91054": [474, 483], "91248": [474, 483], "101578": [474, 483], "_pyerr_chainexceptions1": [474, 483], "_pyerr_chainexcept": [474, 483], "102755": [474, 483], "_py_immortal_refcnt": 474, "_py_isimmort": [474, 483], "py_build_cor": [474, 483], "sstate_interned_immort": [474, 483], "sstate_interned_immortal_stat": 474, "eddi": [474, 481], "elizondo": [474, 481], "84436": [474, 483], "104110": 474, "105387": [474, 483], "98836": [474, 483], "95781": [474, 483], "georgi": [474, 483], "95504": [474, 483], "95589": [474, 483], "_pyobject_visitmanageddict": [474, 483], "_pyobject_clearmanageddict": [474, 483], "98724": [474, 483], "_py_reftot": 474, "_py_getglobalreftot": 474, "104668": [474, 483], "pylong_": 474, "ericsnowcurr": 474, "699": [474, 483], "ma_version_tag": [474, 483], "ramvikram": 474, "101193": 474, "77782": [474, 483], "95388": [474, 483], "t_doubl": 474, "47146": [474, 483], "braun": [474, 483], "102192": [474, 483], "py_unicode_wid": 474, "92651": [474, 483], "85858": [474, 483], "392": 475, "sneezi": 475, "sleepi": 475, "skycaptain": 475, "manage_cloud": 475, "helm": 475, "parser_l": 475, "missil": 475, "torpedo": 475, "parser_m": 475, "vessel": 475, "console_prior": 475, "694": 475, "compet": 475, "pronounc": 475, "commonplac": 475, "unladen10": 475, "py32": 475, "pyload": [475, 477], "pypycload": [475, 477], "pyshar": 475, "32m": 475, "33md": 475, "soabi": [475, 483], "32mu": 475, "ext_suffix": [475, 477, 483], "salient": 475, "pathway": [475, 483], "0o24": 475, "7094": 475, "shl": 475, "project_nam": 475, "lowercaseddict": 475, "lcd": 475, "placeholderdict": 475, "6081": 475, "marcin": 475, "wojdyr": 475, "1772833": 475, "9666": 475, "9337": 475, "abcdefgh": [475, 477], "9757": 475, "4617": 475, "8413": 475, "10093": 475, "477863": 475, "9213": 475, "2690": 475, "10889": 475, "10518": 475, "aggrav": 475, "9425": 475, "undergon": 475, "4661": 475, "10321": 475, "get_phone_numb": 475, "phonenumb": 475, "phonelist": 475, "user_request": 475, "4805": 475, "980": 475, "baker": 475, "498245": 475, "577479": 475, "10586": 475, "10593": 475, "terrenc": 475, "9567": 475, "3445": 475, "8814": 475, "prob_dist": 475, "satur": 475, "renew": 475, "resequenc": 475, "simsalabim": 475, "get_vot": 475, "ballot": 475, "conduct_elect": 475, "all_polls_clos": 475, "lockbox": 475, "seal_ballot": 475, "elect": 475, "deposit": 475, "8777": 475, "923754": 475, "accept2dyear": [475, 476], "guesswork": 475, "1289118": 475, "5094": 475, "6641": 475, "2706": 475, "1777412": 475, "8013": 475, "10827": 475, "013671875": 475, "013765762467652909": 475, "gaussian": 475, "682689492137086": 475, "31731050786291404": 475, "gamma_funct": 475, "801": 475, "4551": 475, "950730698041": 475, "temperatur": 475, "from_fahrenheit": 475, "from_celsius": 475, "urban": [475, 477, 483], "5867": 475, "rec_len": 475, "loc_start": 475, "loc_len": 475, "change_loc": 475, "record_numb": 475, "byte_stream": 475, "g3805": 475, "storeroom": 475, "chassi": 475, "x7899": 475, "cog": 475, "l6988": 475, "sprocket": 475, "showroom": 475, "5506": 475, "9826": 475, "9840": 475, "susan": [475, 483], "salesl": 475, "talbot": 475, "5975": 475, "abraham": [475, 483], "1537721": 475, "duti": 475, "9110": 475, "8188": 475, "2305843009213693951": 475, "314159": 475, "1000003": 475, "8540": [475, 476], "log1": 475, "rodol": [475, 476, 481], "4972": [475, 478], "8046": 475, "1286": 475, "8806": 475, "7461": 475, "10554": 475, "bastien": [475, 477], "sabl": 475, "9862": 475, "3488": 475, "9962": 475, "1675951": 475, "redact": 475, "general_quest": 475, "3514": 475, "prion": 475, "py_todo": 475, "1399": 475, "semaphore_not": 475, "md2": 475, "dsawithsha": 475, "mdc2": 475, "md4": 475, "ripemd160": 475, "dsa": 475, "dsaencrypt": 475, "0x101739a10": 475, "sehensw": 475, "rdigkeiten": 475, "xc3": 475, "xbcrdigkeiten": 475, "bzip": 475, "in_transit": 475, "shashwat": 475, "8845": 475, "8524": 475, "9794": 475, "2818": 475, "8850": 475, "1589": 475, "5639": 475, "4870": 475, "dysfunct": 475, "9360": 475, "vant": 475, "1926": 475, "9003": 475, "lorenzo": [475, 477], "catucci": [475, 477], "4471": 475, "10980": 475, "10620": 475, "my_proj_dir": 475, "9754": 475, "test_anagram": 475, "volumin": 475, "ups": [475, 483], "9424": 475, "misimpl": 475, "optic": 475, "9025": 475, "8807": 475, "handle_accept": 475, "6706": 475, "schedulenau": 475, "5178": 475, "rodolfo": 475, "eckhardt": 475, "10220": 475, "0x1022bd788": 475, "pydoc3": 475, "ron": 475, "newloc": 475, "nofre": 475, "_randbelow": 475, "binary_modulo": 475, "binary_multipli": [475, 483], "binary_add": [475, 477, 483], "binary_floor_divid": 475, "9147": 475, "ray": [475, 477, 483], "9523": 475, "raymondhetting": 475, "os2": 475, "os2_hom": 475, "python32": 475, "bindir": 475, "binlibdest": 475, "includepi": 475, "libdest": 475, "platbas": 475, "projectbas": 475, "py_version_nodot": 475, "py_version_short": 475, "antonio": 475, "cuni": 475, "ilya": [475, 480, 483], "sandler": 475, "pluggabl": [475, 477, 479], "ambv": 475, "zope9": 475, "plone": 475, "zope9instal": 475, "zope9inst": 475, "beef": 475, "cafe": 475, "5417": 475, "aff": 475, "8fa3": 475, "telenovela": 475, "elisa": 475, "bfd": 475, "f3nde": 475, "mahn": 475, "5468": 475, "9873": 475, "concert": 475, "steffen": 475, "daod": 475, "nurpmeso": 475, "9124": 475, "10199": 475, "7316": 475, "torsten": [475, 476, 483], "landschoff": [475, 476, 483], "850728": 475, "kleckner": 475, "8844": 475, "6690": 475, "9410": 475, "3873": 475, "9915": 475, "7451": 475, "10314": 475, "10x": [475, 476, 477, 480, 483], "15x": [475, 482, 483], "3001": 475, "stringlib": 475, "differenc": [475, 483], "andress": 475, "bennett": 475, "8685": 475, "1569291": 475, "3709": [475, 476], "schaaf": [475, 476], "sped": [475, 478, 481, 482, 483], "10160": 475, "christo": 475, "georgiou": 475, "7113": 475, "kannada": 475, "0cf1": 475, "0cf2": 475, "tai": 475, "lue": 475, "19da": 475, "disqualifi": 475, "cheatsheet": 475, "jog": 475, "adjunct": 475, "9528": 475, "7962": 475, "aquatk": 475, "6075": 475, "changeset": [475, 477, 483], "385": 475, "workflow": [475, 483], "10679": 475, "bupjo": 475, "5127": 475, "9203": 475, "wctype": 475, "9210": 475, "9778": 475, "py_va_copi": 475, "va_copi": 475, "2443": 475, "8837": 475, "buildscript": [475, 483], "8990": 475, "setfilesystemencod": 475, "6shhbbb": 475, "gif87a": 475, "10783": 475, "10711": 475, "10272": 475, "398": 476, "segreg": 476, "13411": 476, "10181": 476, "u0010ffff": 476, "udbff": 476, "udfff": 476, "13054": 476, "becker": 476, "3561": 476, "gather_t": 476, "acc": [476, 483], "renaud": [476, 483], "blanch": [476, 483], "zbigniew": [476, 483], "drzejewski": [476, 483], "szmek": [476, 483], "_extra_attribut": 476, "0x7f46b9fe31e0": 476, "amend": [476, 483], "2377": 476, "13959": 476, "14605": 476, "14646": 476, "growth": [476, 483], "delin": 476, "12753": 476, "13201": 476, "petri": [476, 483], "lehtinen": 476, "12170": 476, "12380": 476, "10516": 476, "11388": 476, "13748": 476, "gruszczi": [476, 477, 481, 483], "ski": [476, 477, 481, 483], "13521": 476, "clumsi": 476, "9260": 476, "4966": 476, "3144": 476, "nadeem": [476, 477], "vawda": [476, 477], "yvind": 476, "karlsen": [476, 483], "6715": 476, "darren": 476, "11610": 476, "10868": 476, "1172711": 476, "ywjj": 476, "catalin": [476, 483], "iacob": [476, 483], "13641": 476, "13637": 476, "5863": 476, "pbzip2": 476, "1625": 476, "13216": 476, "65001": [476, 483], "cp_utf8": [476, 483], "chcp": [476, 483], "cjk": [476, 483], "12016": 476, "u52ff": 476, "u65bd": 476, "u65bc": 476, "u4eba": 476, "u3002": 476, "npj": 476, "l6hk": 476, "hk": 476, "12100": 476, "11089": 476, "11297": 476, "11085": 476, "13121": 476, "13585": 476, "10924": 476, "ncursesw": [476, 483], "waddwstr": 476, "igo": 476, "serna": 476, "6755": 476, "15006": 476, "7652": 476, "100x": 476, "bytereef": 476, "mpdecim": [476, 483], "quickstart": 476, "02s": 476, "345s": 476, "120x": 476, "telco": 476, "19s": 476, "68s": 476, "psycopg": 476, "57s": 476, "29s": 476, "12x": 476, "watchexp": [476, 483], "465484": 476, "72000": 476, "89ric": 476, "pal": 476, "salli": 476, "bonzo": 476, "bonz": 476, "ought": 476, "8594": 476, "12139": 476, "11072": 476, "13227": 476, "15061": 476, "13295": 476, "kuhn": 476, "13464": 476, "htmlparseerror": 476, "15114": [476, 477, 478, 483], "14538": 476, "13993": 476, "13960": 476, "13358": 476, "1745761": 476, "755670": 476, "13357": 476, "12629": 476, "1200313": 476, "670664": 476, "13273": 476, "12888": 476, "7311": 476, "11113": 476, "15156": 476, "sijin": 476, "joseph": [476, 479, 483], "8808": 476, "13062": 476, "15153": 476, "townshend": 476, "12760": 476, "11888": 476, "12021": 476, "12328": 476, "4892": 476, "6064": 476, "12708": 476, "9795": 476, "lagerwal": 476, "10882": 476, "4761": 476, "10755": 476, "14626": 476, "supports_follows_symlink": 476, "10784": 476, "8828": 476, "14127": 476, "13609": 476, "12720": 476, "9344": 476, "dlfcn": [476, 479, 483], "13226": 476, "14210": 476, "14166": 476, "3665": 476, "13449": 476, "8684": 476, "delayfunct": 476, "13245": 476, "6397": 476, "12442": 476, "sandro": 476, "tosi": 476, "12191": 476, "15238": 476, "12715": 476, "niehof": 476, "9993": 476, "4489": 476, "8407": 476, "1870": 476, "elho": 476, "trevino": 476, "juhana": 476, "jauhiainen": 476, "orr": [476, 477, 481, 482, 483], "boswel": 476, "8739": 476, "paulo": [476, 483], "scardin": 476, "11281": 476, "11289": 476, "kasun": 476, "herath": 476, "8809": 476, "watson": 476, "6560": 476, "heiko": 476, "wundram": 476, "lwn": 476, "253425": 476, "socketcan": [476, 483], "10141": 476, "fuch": [476, 481, 483], "tiago": 476, "alv": 476, "reliable_datagram_socket": 476, "rds": [476, 483], "goderbau": 476, "13777": 476, "10866": 476, "warkentin": 476, "11109": 476, "11688": 476, "12049": 476, "11183": 476, "simpkin": 476, "12803": 476, "13626": 476, "13627": 476, "scram": 476, "jacek": [476, 479, 483], "konieczni": 476, "12551": 476, "13634": 476, "colin": [476, 483], "14204": 476, "14837": 476, "11811": 476, "13635": 476, "14807": 476, "3163": 476, "8513": 476, "5870": 476, "11223": 476, "5689": 476, "9957": 476, "13857": 476, "10968": 476, "clock_": 476, "10278": 476, "14386": 476, "14588": 476, "winston": 476, "ewert": 476, "10775": 476, "1673007": 476, "xdg": [476, 483], "gvfs": [476, 483], "calmett": 476, "13620": 476, "14493": 476, "12646": 476, "12306": 476, "14624": 476, "14738": 476, "15026": 476, "osf": 476, "9856": 476, "11377": 476, "13374": 476, "13988": 476, "py_unicode_match": [476, 482, 483], "pyunicode_encodembc": [476, 483], "12326": 476, "13847": 476, "14180": 476, "1079": 476, "1690608": 476, "11291": 476, "assertsameel": 476, "_clamp": 476, "sslfakefil": 476, "13550": 476, "smalltabl": 476, "pymemoryviewobject": [476, 478], "memoryobject": [476, 478], "xxxmodul": 476, "14040": 476, "10998": 476, "11591": 476, "rdmurray": 477, "bitdanc": 477, "16499": 477, "16475": 477, "3156": 477, "450": 477, "454": 477, "8713": 477, "18891": 477, "18214": 477, "unvers": 477, "pip3": 477, "hex_decod": 477, "bz2_encod": 477, "68656c6c6f": 477, "7475": 477, "17827": 477, "17828": 477, "19619": 477, "stone": 477, "berman": 477, "18111": 477, "18416": 477, "kang": [477, 483], "hao": 477, "12892": 477, "bierenfeld": 477, "1097797": 477, "ukrainian": [477, 480], "19668": 477, "15958": 477, "16772": 477, "17934": 477, "claudiu": [477, 478, 483], "popa": [477, 478, 483], "18690": 477, "19078": 477, "16148": 477, "declin": 477, "eli": [477, 479, 481, 483], "benderski": 477, "aprano": [477, 479, 481], "16832": 477, "bruno": [477, 478, 483], "dupui": 477, "16049": 477, "17818": 477, "storchacha": 477, "16486": 477, "8311": 477, "maystr": 477, "11175": 477, "12866": 477, "19641": 477, "16685": 477, "17839": 477, "a85": 477, "17618": 477, "16613": 477, "fcc": 477, "ntsc": 477, "lander": [477, 480], "14323": 477, "15806": 477, "piraeus": 477, "19266": 477, "inflex": [477, 478], "15805": 477, "19282": 477, "kluyver": [477, 478, 479, 483], "11816": 477, "17916": 477, "19722": 477, "16522": 477, "11390": 477, "3158": 477, "18600": 477, "email6": 477, "levitt": 477, "18149": 477, "15442": 477, "horev": 477, "kati": [477, 483], "10042": 477, "thorn": 477, "12428": 477, "16351": 477, "18582": 477, "18532": 477, "jona": [477, 480, 483], "borgstr": 477, "18240": 477, "17276": 477, "247": 477, "18775": 477, "2927": 477, "invit": 477, "13633": 477, "karl": [477, 482, 483], "cow": 477, "12921": 477, "malt": 477, "swart": 477, "17764": 477, "15627": 477, "18072": 477, "18193": 477, "18192": 477, "18194": 477, "18058": 477, "19152": 477, "18626": 477, "unravel": 477, "aaron": [477, 483], "ile": 477, "13266": 477, "18929": 477, "19030": 477, "broader": 477, "17481": 477, "17159": 477, "routeabl": 477, "17400": 477, "9556": 477, "ce46195b56a9": 477, "16110": 477, "15452": 477, "bump": [477, 483], "19219": 477, "valeri": 477, "4885": 477, "18999": 477, "19946": 477, "16694": 477, "nelson": 477, "yogesh": 477, "chaudhari": 477, "17914": 477, "11939": 477, "9035": 477, "uapi": 477, "18673": 477, "16596": 477, "osborn": 477, "18764": 477, "14455": 477, "4473": 477, "19132": 477, "17150": 477, "19674": 477, "20710": 477, "barnett": [477, 483], "16203": 477, "lope": 477, "tavar": 477, "13592": 477, "17087": 477, "16595": 477, "19324": 477, "19343": 477, "16488": 477, "18794": 477, "13896": 477, "atsuo": 477, "ishimoto": 477, "1492704": 477, "smtpserver": [477, 478, 479, 483], "smtpchannel": [477, 478, 479, 483], "async_chat": [477, 483], "11959": 477, "2118": 477, "15359": 477, "7171": 477, "poq": 477, "13773": 477, "16692": 477, "19689": 477, "18138": 477, "18143": 477, "18147": 477, "christien": 477, "8813": 477, "19292": 477, "17134": 477, "8109": 477, "calissu": 477, "18379": 477, "_stat": [477, 483], "11016": 477, "hiem": 477, "17804": 477, "zack": 477, "weinberg": 477, "16624": 477, "getstatus": 477, "10197": 477, "18901": 477, "18878": 477, "19261": 477, "13390": 477, "5845": 477, "13477": 477, "18585": 477, "18725": 477, "18882": 477, "1565525": 477, "mathia": 477, "panzenb": 477, "ck": 477, "16423": 477, "18978": 477, "kachayev": [477, 478, 483], "16464": 477, "wozniak": 477, "17485": 477, "brecht": [477, 478, 479, 483], "17272": 477, "15701": 477, "16997": 477, "jyrki": 477, "pulliainen": 477, "15132": 477, "zach": [477, 483], "16935": 477, "melin": 477, "ramnani": 477, "16709": 477, "wardil": 477, "mcclure": 477, "11798": 477, "18937": 477, "17457": 477, "17015": 477, "toshio": 477, "kuratomi": 477, "17467": 477, "15417": 477, "19552": 477, "17487": 477, "17616": 477, "5202": 477, "14631": 477, "15528": 477, "17643": 477, "17741": 477, "ariel": 477, "poliak": 477, "14377": 477, "19274": 477, "mallard": 477, "17201": 477, "14621": 477, "dsl": [477, 483], "17162": 477, "montagn": 477, "16129": 477, "1772673": 477, "ysj": [477, 483], "7330": 477, "dhiru": 477, "kholia": 477, "18596": 477, "16632": 477, "18338": 477, "18920": 477, "18922": 477, "18569": 477, "gcov": 477, "lcov": 477, "clav": 477, "milauer": 477, "16421": 477, "17853": 477, "pyfailmalloc": 477, "18408": 477, "18520": 477, "18807": [477, 483], "18818": 477, "heaney": [477, 478], "vajraski": [477, 478, 483], "kok": [477, 478, 483], "19201": 477, "19222": [477, 478], "19223": 477, "14625": 477, "linear_prob": 477, "18771": 477, "19218": 477, "19209": 477, "19205": 477, "9548": 477, "16034": 477, "16674": 477, "15596": 477, "15758": 477, "bryant": 477, "18020": 477, "18756": 477, "endtim": [477, 483], "readplistfrombyt": [477, 480, 483], "writeplisttobyt": 477, "18823": 477, "19375": 477, "16135": 477, "e52df05b496a": 477, "14470": 477, "16136": 477, "shlib_suffix": 477, "16754": 477, "tick_count": 477, "19199": 477, "tara": 477, "lyapun": 477, "15641": 477, "type_int64": [477, 483], "riti": 477, "15480": 477, "isbjunk": 477, "isbpopular": 477, "sm": 477, "13248": [477, 479, 483], "_gestalt": 477, "_mac_ver_lookup": 477, "_mac_ver_gstalt": 477, "_bcd2str": 477, "18393": 477, "17323": 477, "17115": 477, "module_to_load": 477, "19413": 477, "18065": 477, "is_frozen": 477, "felt": [477, 481, 483], "interstiti": 477, "17434": 477, "b32": 477, "18011": 477, "9177": 477, "14794": 477, "16290": 477, "16967": 477, "17094": 477, "20625": 477, "19555": 477, "15204": 477, "16333": 477, "20784": 477, "16742": 477, "f_tstate": 477, "14432": 477, "elvi": [478, 479, 480, 481, 482, 483], "pranskevichus": [478, 479, 480, 481, 482, 483], "478": 478, "441": [478, 483], "arnon": [478, 483], "yaari": [478, 483], "9951": [478, 483], "23632": [478, 483], "benno": [478, 483], "lesli": [478, 483], "24450": [478, 483], "19235": [478, 483], "lc_type": [478, 483], "19977": [478, 483], "streamlin": [478, 483], "22638": [478, 483], "22796": [478, 483], "rudimentari": 478, "http_get": 478, "nathaniel": [478, 480, 483], "landau": 478, "girdhar": [478, 479, 483], "detract": 478, "500000": 478, "evid": 478, "lehtosalo": 478, "intermitt": [478, 483], "conceal": 478, "unguard": 478, "pernici": 478, "angelico": [478, 479, 483], "99998": 478, "00003": 478, "00001": 478, "barker": [478, 483], "unoptim": 478, "19676": [478, 483], "22286": [478, 483], "23681": [478, 483], "22682": [478, 483], "22681": [478, 483], "24064": [478, 483], "17636": [478, 483], "23491": [478, 483], "paugh": [478, 483], "j3": [478, 480, 483], "eriksson": [478, 483], "14910": [478, 483], "proactor": [478, 483], "22560": 478, "21326": [478, 483], "yann": [478, 479, 483], "sionneau": [478, 479], "korenberg": [478, 479], "jiryu": [478, 479, 483], "davi": [478, 479, 483], "nikolaus": [478, 483], "rath": [478, 483], "15955": [478, 483], "20289": [478, 483], "24270": [478, 483], "17442": [478, 483], "16991": [478, 483], "19505": [478, 483], "23704": [478, 483], "abscissa": 478, "jevnik": [478, 481, 483], "22189": [478, 483], "devin": [478, 483], "jeanpierr": [478, 483], "23086": [478, 483], "24018": [478, 483], "24184": [478, 483], "16104": 478, "19628": [478, 483], "21338": [478, 483], "11271": [478, 483], "21527": [478, 483], "18159": 478, "22389": [478, 483], "23171": [478, 483], "4254": [478, 483], "18039": [478, 483], "2052": [478, 483], "17445": [478, 483], "build_ext": [478, 483], "5309": [478, 483], "bdist": 478, "16314": [478, 483], "glenn": 478, "15916": [478, 483], "milan": [478, 480, 483], "oberkirch": [478, 480, 483], "20098": [478, 483], "abhilash": [478, 483], "raj": [478, 483], "21083": 478, "24211": [478, 483], "claud": [478, 483], "paroz": [478, 483], "16324": [478, 483], "21706": 478, "wei": [478, 483], "wu": [478, 483], "23566": [478, 483], "14373": [478, 483], "13968": [478, 483], "55555": 478, "6666": 478, "13742": [478, 483], "demian": [478, 479, 483], "21793": [478, 483], "panter": [478, 479, 483], "3566": 478, "maciej": [478, 483], "szulik": 478, "21800": [478, 483], "vignali": 478, "20295": [478, 483], "fabric": [478, 483], "anech": [478, 483], "20197": [478, 483], "17621": [478, 483], "21156": [478, 483], "20383": [478, 483], "20726": [478, 483], "20334": [478, 483], "24190": [478, 483], "17373": [478, 483], "20691": [478, 483], "24017": [478, 483], "24400": [478, 483], "16808": [478, 483], "20578": 478, "16531": [478, 483], "leon": [478, 483], "20480": [478, 483], "21650": [478, 483], "19361": [478, 483], "17911": [478, 483], "dric": [478, 481, 483], "krier": [478, 481, 483], "13918": [478, 483], "20537": [478, 483], "22788": [478, 483], "23185": [478, 483], "22486": [478, 482, 483], "21565": 478, "rosenberg": [478, 482, 483], "22955": [478, 483], "21176": [478, 483], "22524": [478, 483], "21719": [478, 483], "22181": [478, 483], "22054": [478, 483], "23668": [478, 483], "rafik": [478, 483], "draoui": [478, 483], "10395": [478, 483], "19775": [478, 483], "21539": [478, 483], "19776": [478, 483], "mayank": [478, 483], "tripathi": [478, 483], "19777": [478, 483], "spam42": 478, "welborn": 478, "20218": [478, 483], "23611": [478, 483], "21804": [478, 483], "aac": [478, 483], "sre_match": 478, "9179": [478, 483], "22437": [478, 483], "1519638": [478, 483], "22578": [478, 483], "cauet": [478, 483], "22940": [478, 483], "18931": [478, 483], "19840": 478, "5411": [478, 483], "22018": [478, 483], "21076": [478, 483], "decode_data": [478, 479, 483], "process_messag": [478, 479], "19662": 478, "21795": [478, 483], "21725": [478, 483], "14758": 478, "15014": [478, 483], "gavin": 478, "chappel": 478, "16914": [478, 483], "22027": [478, 483], "18615": [478, 483], "22043": [478, 483], "17552": [478, 483], "23853": [478, 483], "21455": [478, 483], "21965": [478, 483], "suboptim": 478, "20188": [478, 483], "20421": [478, 483], "20951": [478, 483], "akira": [478, 483], "19940": [478, 483], "23186": [478, 483], "23239": [478, 483], "10203": [478, 483], "sinclair": 478, "jessica": [478, 483], "mckellar": 478, "13583": [478, 483], "23342": [478, 483], "set_coroutine_wrapp": [478, 480, 481, 483], "get_coroutine_wrapp": [478, 480, 481, 483], "22696": [478, 483], "23437": [478, 483], "21717": [478, 483], "vogt": [478, 483], "23193": [478, 483], "21549": [478, 483], "gindi": [478, 483], "18983": [478, 483], "2527": [478, 483], "_fix": [478, 483], "20035": [478, 483], "kazakov": [478, 483], "22619": [478, 483], "16662": [478, 483], "19746": [478, 483], "22936": [478, 483], "kushal": [478, 479, 483], "das": [478, 479, 483], "21238": [478, 483], "21262": [478, 483], "johann": [478, 483], "baiter": [478, 483], "20968": [478, 483], "kan": [478, 483], "vdahl": [478, 483], "23581": [478, 483], "23568": [478, 483], "17660": 478, "matej": [478, 483], "cepl": [478, 482, 483], "19494": [478, 483], "akshit": 478, "khurana": [478, 480, 483], "samwys": 478, "13866": [478, 483], "22366": [478, 483], "22118": [478, 483], "torr": [478, 483], "navarret": [478, 483], "silentghost": [478, 479, 483], "5800": [478, 483], "20627": [478, 483], "22960": [478, 483], "2175": [478, 483], "10590": [478, 483], "23252": [478, 483], "23001": [478, 483], "findfirstfil": 478, "findnextfil": 478, "23605": [478, 483], "21233": [478, 483], "albert": [478, 480, 483], "markus": [478, 483], "21486": [478, 483], "21487": [478, 483], "20826": [478, 483], "23266": [478, 483], "23133": [478, 483], "15381": [478, 483], "22003": [478, 483], "20416": [478, 483], "23344": [478, 483], "15027": [478, 483], "19380": [478, 483], "23206": [478, 483], "22540": [478, 483], "22847": [478, 483], "23488": [478, 483], "23910": [478, 483], "22464": 478, "23573": [478, 483], "_py_char2wchar": [478, 483], "_py_wchar2char": [478, 483], "18395": [478, 483], "18711": [478, 483], "24268": [478, 483], "amd": 478, "gnu32": 478, "win_amd64": [478, 483], "win_ia64": 478, "win_arm": 478, "_d": 478, "legalchar": 478, "23671": [478, 483], "linux_distribut": [478, 483], "1322": [478, 483], "24248": [478, 483], "20438": 478, "22407": [478, 483], "23622": [478, 483], "chaput": [478, 483], "6623": [478, 483], "23464": [478, 483], "21205": [478, 483], "htmlparsererror": [478, 483], "21047": [478, 483], "16518": [478, 483], "22834": [478, 483], "23014": 478, "22818": [478, 483], "2211": [478, 483], "nnnn": [478, 483], "pot": [478, 483], "24284": [478, 483], "15582": [478, 483], "7830": [478, 483], "22453": [478, 483], "20204": [478, 483], "python36": 479, "gonzalez": [479, 480], "ivan": [479, 480, 481, 483], "levkivskyi": [479, 480, 481, 483], "lisa": [479, 481, 483], "1_000_000_000_000_000": 479, "1000000000000000": 479, "0x_ff_ff_ff_ff": 479, "ffff_ffff": 479, "ticker": 479, "pluginbas": 479, "plugin1": 479, "plugin2": 479, "teichmann": [479, 483], "intfield": 479, "int_field": 479, "some_fil": 479, "dusti": [479, 483], "koo": 479, "zevenhoven": 479, "27350": [479, 483], "0x7fbcd41666f8": 479, "forbiddenbyt": [479, 483], "0x7fbcd41666fc": 479, "ouch": 479, "1233329": 479, "test_byt": 479, "648": 479, "0x00007fbcdbd32700": 479, "test_hex": 479, "26516": [479, 483], "26564": [479, 483], "21590": [479, 483], "nikhil": 479, "benesch": 479, "barnert": [479, 483], "25958": [479, 483], "emanuel": [479, 483], "26823": [479, 483], "15767": 479, "23722": [479, 481, 483], "26492": [479, 483], "26146": [479, 483], "28613": [479, 483], "27041": [479, 483], "27040": [479, 483], "28370": [479, 483], "25593": [479, 483], "26221": 479, "27392": [479, 483], "27456": [479, 480, 483], "28003": [479, 483], "26081": [479, 483], "28544": [479, 483], "25357": [479, 483], "628": [479, 483], "23229": [479, 483], "27598": [479, 483], "25987": 479, "28720": [479, 483], "17941": [479, 483], "25628": [479, 483], "26482": [479, 483], "27664": [479, 483], "25609": [479, 483], "24773": [479, 483], "ashley": 479, "anderson": 479, "12006": 479, "alessandro": 479, "cucci": 479, "19475": [479, 483], "27661": [479, 483], "25928": [479, 483], "27819": [479, 483], "24277": [479, 483], "27331": [479, 483], "20476": 479, "27959": [479, 483], "23591": [479, 483], "23848": [479, 483], "hackman": [479, 483], "25788": [479, 483], "26470": [479, 483], "26798": [479, 483], "16113": [479, 483], "bertoni": 479, "joan": 479, "daemen": 479, "micha": [479, 483], "peeter": 479, "gill": 479, "assch": 479, "ronni": 479, "keer": 479, "27928": [479, 483], "rolf": [479, 483], "krahl": 479, "12319": [479, 483], "tkfont": 479, "swiegart": 479, "24225": [479, 483], "autocomplet": [479, 480, 483], "louie": [479, 480, 483], "15786": [479, 480, 483], "cheryl": [479, 480, 481, 483], "sabella": [479, 480, 481, 483], "1612262": [479, 480, 483], "wohlgang": [479, 480, 483], "27099": [479, 480, 483], "13802": [479, 480, 483], "31860": [479, 480, 483], "maxlin": [479, 480, 483], "33642": [479, 480, 483], "33768": [479, 480, 483], "33679": [479, 480, 483], "dpi": [479, 480, 483], "sharper": [479, 480, 483], "33656": [479, 480, 483], "1529353": [479, 480, 481, 483], "19611": [479, 483], "churn": 479, "richer": 479, "27172": [479, 483], "17909": [479, 483], "marian": [479, 483], "horban": 479, "24884": 479, "davin": [479, 481, 483], "pott": [479, 481, 483], "6766": [479, 483], "25994": [479, 483], "27186": [479, 483], "24164": [479, 483], "25382": [479, 483], "8637": [479, 483], "24879": [479, 483], "18844": [479, 483], "ython": 479, "433028": [479, 483], "24454": [479, 483], "xiang": [479, 480, 481, 483], "27177": [479, 483], "tyler": [479, 483], "crompton": [479, 483], "26870": [479, 483], "25011": [479, 483], "25209": [479, 483], "1521950": 479, "wolfgang": [479, 483], "langner": 479, "26587": [479, 483], "lordthorsen": [479, 483], "16864": [479, 483], "stoke": [479, 483], "26536": [479, 483], "26907": 479, "27744": [479, 483], "crypto": [479, 483], "omar": [479, 480, 483], "sandov": [479, 480, 483], "26273": [479, 480, 483], "26404": [479, 483], "26721": [479, 483], "27850": [479, 483], "27766": [479, 483], "28043": [479, 483], "19500": [479, 483], "warhawk": 479, "28025": [479, 483], "28085": 479, "78851": [479, 480], "27181": [479, 481, 483], "11734": [479, 483], "26741": [479, 483], "6135": [479, 483], "27781": [479, 483], "27932": [479, 483], "phane": [479, 480, 483], "wirtel": [479, 480, 483], "25485": [479, 483], "6422": [479, 483], "23552": [479, 483], "trace_add": [479, 483], "trace_remov": [479, 483], "trace_info": [479, 483], "trace_vari": [479, 483], "trace_vdelet": [479, 483], "trace_vinfo": [479, 483], "22115": [479, 483], "26588": [479, 483], "280": 479, "189": 479, "amit": [479, 483], "saha": [479, 483], "26323": [479, 483], "21271": [479, 483], "nikolay": [479, 483], "bogoychev": [479, 483], "16099": [479, 483], "balcerzak": 479, "22829": 479, "26568": 479, "26567": [479, 483], "rouault": [479, 483], "23026": [479, 483], "27982": [479, 483], "26885": [479, 483], "26039": [479, 483], "26243": [479, 483], "16764": [479, 483], "demur": [479, 483], "rume": [479, 483], "26647": [479, 483], "28050": 479, "24870": 479, "25227": [479, 483], "25267": [479, 483], "25301": [479, 483], "25349": [479, 483], "25399": [479, 483], "25401": [479, 483], "snider": [479, 483], "26574": [479, 483], "26249": [479, 483], "27056": [479, 483], "27574": [479, 483], "25596": [479, 483], "26032": [479, 483], "25638": [479, 483], "25873": [479, 483], "25869": [479, 483], "25971": [479, 483], "py_long_long": 479, "17884": [479, 483], "ndk": [479, 483], "lollipop": 479, "26865": 479, "alecsandru": [479, 483], "patrascu": [479, 483], "26359": [479, 483], "5319": [479, 483], "26282": [479, 483], "0b4": [479, 483], "223967b49e49": 479, "27243": [479, 483], "27364": [479, 483], "25791": [479, 483], "mariatta": [479, 483], "25002": 479, "21708": [479, 483], "extra_path": [479, 483], "27919": [479, 483], "26129": [479, 483], "26754": [479, 483], "22493": [479, 483], "28022": [479, 483], "25154": [479, 483], "61441": [479, 480], "ffi": [479, 483], "fullmodnam": 479, "find_lines_from_cod": 479, "find_lin": 479, "find_str": 479, "find_executable_lin": 479, "tk_menubar": [479, 483], "tk_bindfortravers": [479, 483], "cdrom": [479, 483], "cdio": [479, 483], "stropt": [479, 483], "chronic": 479, "h2pi": [479, 483], "show_track_count": [479, 483], "23034": [479, 483], "balogh": [479, 483], "2091": [479, 483], "25768": [479, 483], "20059": [479, 483], "taddei": [479, 483], "odziej": [479, 483], "23883": [479, 483], "18018": [479, 483], "23430": [479, 483], "26685": [479, 483], "18726": [479, 483], "holden": [479, 483], "27842": [479, 483], "25287": [479, 483], "lita": [479, 483], "cho": [479, 483], "21815": [479, 483], "jakub": [479, 483], "stasiak": [479, 483], "26335": [479, 483], "ramchandra": [479, 483], "17211": 479, "25953": [479, 483], "plugin": 479, "25483": 479, "27078": [479, 483], "27140": [479, 483], "build_map_unpack_with_cal": [479, 483], "build_tuple_unpack_with_cal": [479, 483], "call_function_var": 479, "call_function_var_kw": 479, "make_closur": [479, 483], "27095": [479, 483], "27213": [479, 483], "28257": [479, 483], "store_annot": [479, 480, 483], "27985": [479, 483], "pyexc_recursionerrorinst": [479, 480, 483], "22898": [479, 480, 483], "30697": [479, 480, 483], "31900": [479, 480, 483], "33899": [479, 480, 481, 483], "37228": [479, 480, 481, 482, 483], "trust_server_pasv_ipv4_address": [479, 480, 481, 482, 483], "87451": [479, 480, 481, 482], "advent": 480, "uncov": [480, 483], "glare": 480, "advers": 480, "from_str": 480, "validate_b": 480, "bray": [480, 483], "masayuki": [480, 483], "coars": 480, "ja": 480, "12844": [480, 483], "18896": [480, 483], "xiao": [480, 483], "28927": [480, 483], "32677": [480, 483], "29546": [480, 483], "30024": [480, 483], "28974": [480, 483], "30579": [480, 483], "33053": [480, 483], "31415": [480, 483], "32248": [480, 483], "14191": [480, 483], "32314": [480, 481, 483], "32436": [480, 483], "32311": [480, 483], "23749": [480, 483], "31819": [480, 483], "32250": [480, 483], "32251": [480, 483], "32269": [480, 483], "32391": [480, 483], "32410": [480, 483], "32415": [480, 483], "32418": [480, 483], "32662": [480, 483], "32741": [480, 483], "quentin": [480, 483], "dawan": 480, "31245": [480, 483], "create_accepted_socket": 480, "aspinal": 480, "29970": [480, 483], "marat": [480, 483], "sharafutdinov": [480, 483], "31943": [480, 483], "32193": [480, 483], "32356": [480, 483], "32066": [480, 483], "30508": [480, 483], "33792": [480, 483], "30103": [480, 483], "oz": 480, "tiram": 480, "30095": 480, "32320": [480, 483], "31650": [480, 483], "21423": [480, 483], "moreau": 480, "31540": [480, 483], "bakker": [480, 483], "10049": [480, 483], "29679": 480, "30241": [480, 483], "mohr": [480, 483], "kulakov": [480, 483], "29302": [480, 483], "sanyam": [480, 483], "21862": [480, 483], "31664": [480, 483], "31702": [480, 483], "15873": [480, 483], "5288": [480, 483], "32630": [480, 483], "11822": [480, 483], "11913": [480, 483], "31801": [480, 483], "33217": [480, 483], "32227": [480, 483], "zekun": 480, "31558": [480, 483], "32433": [480, 483], "soffer": [480, 483], "31945": [480, 483], "pierr": [480, 481, 483], "quentel": [480, 483], "29654": [480, 483], "28707": 480, "31639": [480, 483], "5680": [480, 481, 483], "37627": [480, 481, 483], "saimadhav": [480, 481, 483], "heblikar": [480, 481, 483], "17535": [480, 481, 483], "garvit": [480, 483], "khatri": [480, 483], "29851": [480, 483], "30436": [480, 483], "30526": [480, 483], "15216": [480, 483], "20825": [480, 483], "30537": [480, 483], "10379": [480, 483], "30520": [480, 483], "30522": [480, 483], "31080": [480, 483], "29962": [480, 483], "nitish": [480, 483], "chandra": [480, 483], "22589": [480, 483], "20486": [480, 483], "30596": [480, 483], "vitor": [480, 483], "pereira": [480, 483], "30794": [480, 483], "18966": [480, 483], "28682": [480, 483], "25996": [480, 483], "16500": [480, 483], "31368": [480, 483], "19930": [480, 483], "32441": [480, 483], "32659": [480, 483], "ry": [480, 483], "30897": [480, 483], "31389": [480, 483], "32206": [480, 483], "bernhard": 480, "wiedemann": 480, "29708": [480, 483], "feanil": 480, "patel": 480, "31128": [480, 483], "14976": [480, 483], "31690": [480, 483], "25054": [480, 483], "30215": [480, 483], "30349": [480, 483], "10076": [480, 483], "30050": [480, 483], "32373": [480, 483], "32454": [480, 483], "29728": [480, 483], "cathi": 480, "averi": 480, "27584": [480, 483], "28134": [480, 483], "lele": [480, 483], "gaifax": [480, 483], "27645": [480, 483], "31843": [480, 483], "31399": [480, 483], "libssl": 480, "libressl": [480, 483], "32185": [480, 483], "mandeep": [480, 483], "singh": [480, 483], "23033": [480, 483], "blacklist": [480, 483], "whitelist": [480, 483], "31429": [480, 483], "28414": [480, 483], "32947": [480, 483], "20995": [480, 483], "29136": [480, 483], "30622": [480, 483], "33618": [480, 483], "32951": [480, 483], "32609": 480, "1198569": [480, 483], "bo": [480, 481, 483], "bayl": [480, 481, 483], "32102": [480, 481, 483], "clegg": [480, 483], "31756": [480, 483], "segev": [480, 483], "19764": [480, 483], "25942": [480, 483], "31353": [480, 483], "28740": [480, 483], "32591": [480, 483], "32025": [480, 483], "32585": [480, 483], "32121": [480, 483], "manuel": [480, 481, 483], "krebber": [480, 483], "29377": [480, 483], "32265": [480, 483], "32717": 480, "haag": 480, "32071": [480, 483], "20804": [480, 483], "30541": [480, 483], "theun": [480, 483], "ratnadeep": [480, 483], "debnath": [480, 483], "16285": [480, 483], "relay": [480, 483], "22807": [480, 483], "32107": [480, 483], "20361": [480, 483], "32043": [480, 483], "32230": [480, 483], "31975": [480, 483], "31648": [480, 483], "simplexmlrpcdispatch": [480, 483], "7769": [480, 483], "irmen": 480, "jong": 480, "31072": [480, 483], "zhime": 480, "31638": [480, 483], "21417": [480, 483], "30693": [480, 483], "25658": [480, 483], "28411": [480, 483], "victorin": 480, "23699": [480, 483], "31338": [480, 483], "30054": 480, "31574": [480, 483], "28761": [480, 483], "28769": [480, 483], "milman": [480, 483], "28280": [480, 483], "27867": [480, 483], "10381": [480, 483], "30708": [480, 483], "abid": 480, "29102": [480, 483], "29240": [480, 483], "28822": [480, 483], "31370": [480, 483], "27979": [480, 483], "30450": [480, 483], "29300": 480, "29507": 480, "29452": 480, "29286": 480, "29585": [480, 483], "31333": [480, 483], "26110": [480, 483], "32296": [480, 483], "32348": [480, 483], "32355": [480, 483], "32351": [480, 483], "31970": [480, 483], "32226": [480, 483], "elliot": [480, 483], "gorokhovski": [480, 483], "28685": [480, 483], "31179": [480, 483], "32544": [480, 483], "24821": [480, 483], "28638": [480, 483], "32403": [480, 483], "28564": [480, 483], "30285": [480, 483], "31671": [480, 483], "30014": [480, 483], "eugen": [480, 483], "toder": [480, 483], "29469": [480, 483], "11549": 480, "70x": [480, 483], "wielgosik": [480, 483], "24700": [480, 483], "26121": [480, 483], "31344": [480, 483], "32305": [480, 483], "32303": [480, 483], "32690": [480, 483], "32304": [480, 483], "10544": [480, 481, 483], "28894": 480, "openfp": [480, 482, 483], "31985": [480, 483], "32253": [480, 483], "25988": [480, 483], "28847": [480, 483], "28692": [480, 483], "29576": [480, 483], "chi": [480, 483], "hsuan": [480, 483], "yen": [480, 483], "9850": [480, 483], "_dummy_thread": [480, 482, 483], "28332": [480, 483], "28124": [480, 483], "28799": [480, 483], "nix": 480, "jessi": 480, "trusti": 480, "lts": 480, "xenial": 480, "sles": 480, "sp3": 480, "splitunc": [480, 483], "_internaldict": [480, 483], "_overlap": [480, 483], "install_misc": [480, 483], "vander": [480, 483], "weel": [480, 483], "29218": [480, 483], "fpectl": [480, 483], "29137": [480, 483], "30291": [480, 483], "0p": [480, 483], "30362": [480, 483], "30406": [480, 483], "32670": [480, 483], "31709": [480, 483], "32012": [480, 483], "32023": [480, 483], "31233": [480, 483], "33540": [480, 483], "31151": [480, 483], "24744": [480, 483], "29193": [480, 483], "29192": [480, 483], "21071": [480, 483], "29979": [480, 483], "30399": [480, 483], "utkarsh": 480, "upadhyay": 480, "30302": [480, 483], "32308": [480, 483], "29995": [480, 483], "32331": [480, 483], "33169": [480, 483], "32327": [480, 483], "sottil": [480, 481, 482, 483], "26510": [480, 483], "31778": [480, 483], "28292": [480, 483], "32792": [480, 483], "nemec": 480, "33097": [480, 483], "tocknel": [480, 483], "23835": [480, 483], "32550": [480, 483], "28137": [480, 483], "latent": 480, "22257": [480, 483], "25612": [480, 483], "34247": 480, "affection": 481, "tusk": 481, "discount": 481, "clean_nam": 481, "allowed_nam": 481, "emili": [481, 483], "morehous": [481, 483], "35224": [481, 483], "impair": 481, "36540": [481, 483], "33499": [481, 483], "21536": [481, 483], "36722": [481, 483], "36721": [481, 483], "eric_idl": 481, "member_sinc": 481, "075": 481, "theta": 481, "36817": [481, 483], "_pyruntimest": [481, 483], "36763": [481, 483], "36974": [481, 482, 483], "36785": [481, 483], "32489": [481, 483], "33073": [481, 483], "37819": [481, 483], "20092": [481, 483], "copyright_year_pattern": 481, "eunic": [481, 483], "30688": [481, 483], "lapeyr": [481, 482, 483], "33462": [481, 483], "34641": [481, 483], "simpson": 481, "homer": 481, "marg": 481, "bart": 481, "cuthbert": [481, 483], "jordan": [481, 483], "32117": [481, 483], "15248": [481, 483], "32417": [481, 483], "1054041": [481, 483], "37032": [481, 483], "137": 481, "diophantin": 481, "equat": 481, "369": 481, "36027": [481, 483], "heissler": 481, "glaser": [481, 483], "olivi": [481, 483], "grisel": [481, 483], "35900": [481, 483], "chardet": 481, "34632": [481, 483], "33416": [481, 483], "35766": [481, 483], "37028": [481, 483], "32528": [481, 483], "34687": [481, 483], "meili": [481, 483], "29883": [481, 483], "23057": [481, 483], "36999": [481, 483], "34270": [481, 483], "twisteroid": 481, "ambassador": 481, "33530": [481, 483], "34616": [481, 483], "remedi": 481, "35864": [481, 483], "sanderson": [481, 483], "29235": [481, 483], "selik": [481, 483], "34003": [481, 483], "31680": [481, 483], "36085": [481, 483], "36004": [481, 483], "36772": [481, 483], "21145": [481, 483], "taskmanag": 481, "32380": [481, 483], "36016": [481, 483], "franz": [481, 483], "glasner": 481, "2504": [481, 483], "guo": [481, 483], "teo": [481, 483], "34898": [481, 483], "6584": [481, 483], "13153": [481, 483], "4603": [481, 482], "johnni": [481, 482, 483], "najera": [481, 482, 483], "38944": [481, 482, 483], "37765": [481, 482, 483], "audioclip": 481, "bit_rat": 481, "kilohertz": 481, "36326": [481, 483], "1015": 481, "1045": 481, "34659": [481, 483], "31553": [481, 483], "jupyt": 481, "33897": [481, 483], "33089": [481, 483], "35606": [481, 483], "yash": [481, 483], "aggarw": [481, 483], "keller": [481, 483], "37128": [481, 483], "37178": [481, 483], "35431": [481, 483], "650320427": 481, "650320426": 481, "36887": [481, 483], "33083": [481, 483], "32941": [481, 483], "35813": [481, 483], "26836": [481, 483], "37834": [481, 483], "unrepresent": [481, 483], "33721": [481, 483], "36264": [481, 483], "joannah": [481, 482, 483], "nanjeky": [481, 482, 483], "26978": [481, 483], "jon": [481, 482, 483], "janzen": [481, 482], "26707": [481, 483], "30670": [481, 483], "22640": [481, 483], "20849": [481, 483], "gerlach": [481, 483], "30661": 481, "17561": [481, 483], "37007": [481, 483], "34670": [481, 483], "35904": [481, 483], "35892": 481, "equiprob": 481, "36546": [481, 483], "36018": [481, 483], "temperature_feb": 481, "356099432828281": 481, "3184678262814532": 481, "2039930378537762": 481, "el_ni": 481, "climat": 481, "830080526611674": 481, "294144947901014": 481, "672102882379219": 481, "000027119750287": 481, "647488369766392": 481, "36829": [481, 483], "36268": [481, 483], "1230540": [481, 483], "tesler": 481, "36084": [481, 483], "selection_from": [481, 483], "selection_pres": [481, 483], "selection_rang": [481, 483], "selection_to": [481, 483], "juliett": [481, 483], "monsel": [481, 483], "34829": [481, 483], "moveto": [481, 483], "23831": [481, 483], "transparency_get": 481, "transparency_set": 481, "25451": [481, 483], "35702": [481, 483], "lat_long": 481, "grid_squar": 481, "xy_coordin": 481, "get_status": 481, "1415926536": 481, "belang": 481, "euresti": 481, "32285": [481, 483], "37966": [481, 483], "26467": [481, 483], "24412": [481, 483], "strandmark": [481, 483], "35047": [481, 483], "32972": [481, 483], "testrequest": 481, "test_get": 481, "32718": [481, 483], "36669": [481, 483], "17239": [481, 483], "28238": [481, 483], "13611": [481, 483], "36676": [481, 483], "36673": [481, 483], "35153": [481, 483], "35537": [481, 483], "smb": [481, 483], "33695": [481, 483], "pygc_head": [481, 482, 483], "33597": [481, 483], "bolsterle": [481, 483], "30977": [481, 483], "35664": [481, 483], "32492": [481, 483], "33234": [481, 483], "36012": [481, 483], "23867": 481, "35582": 481, "36127": 481, "26219": [481, 483], "36707": [481, 483], "8m": 481, "37m": 481, "35081": [481, 483], "pyobject_init_var": [481, 482, 483], "_py_dealloc": 481, "35059": [481, 483], "pybytearray_init": [481, 483], "pybytearray_fini": [481, 483], "35713": [481, 483], "33818": [481, 483], "dualiti": 481, "32430": [481, 483], "36048": [481, 483], "35810": [481, 482, 483], "37221": [481, 483], "38234": [481, 483], "37481": [481, 483], "29209": [481, 483], "34075": [481, 483], "9372": [481, 483], "36320": [481, 483], "32892": [481, 483], "36917": [481, 483], "36921": [481, 483], "34790": [481, 482, 483], "33710": [481, 483], "isal": [481, 482, 483], "35283": [481, 483], "sharedmemoryserv": 481, "36492": [481, 483], "36952": [481, 483], "35471": [481, 483], "35345": [481, 483], "36895": [481, 483], "25427": [481, 483], "36297": [481, 483], "30262": [481, 483], "36933": [481, 483], "34850": [481, 483], "35459": 481, "36793": [481, 483], "aix3": [481, 483], "36588": [481, 483], "36475": [481, 483], "37412": [481, 483], "34651": [481, 483], "37951": [481, 483], "36348": [481, 483], "31508": [481, 483], "roja": 481, "34160": [481, 483], "32749": [481, 483], "pycore_pyst": [481, 483], "35886": [481, 483], "2122": [481, 483], "33106": [481, 483], "32751": [481, 482, 483], "37027": [481, 483], "kb2533623": 481, "pgen": [481, 483], "36623": [481, 483], "pyeval_reinitthread": [481, 483], "36728": [481, 483], "36381": [481, 483], "foo_struct": [481, 482], "foo_new": 481, "33407": [481, 483], "32388": [481, 483], "pynode_addchild": 481, "pyparser_addtoken": 481, "libpython38": [481, 483], "mingw": [481, 483], "python38": 481, "gendef": 481, "dlltool": 481, "binutil": 481, "37351": [481, 483], "unrol": [481, 483], "break_loop": [481, 483], "continue_loop": [481, 483], "setup_loop": [481, 483], "setup_except": [481, 483], "begin_fin": [481, 483], "call_fin": [481, 483], "pop_fin": [481, 483], "end_fin": [481, 483], "with_cleanup_start": [481, 483], "17611": [481, 483], "33041": [481, 483], "var_access_benchmark": [481, 482, 483], "35884": [481, 483], "read_loc": [481, 482], "read_nonloc": [481, 482], "read_glob": [481, 482], "read_builtin": [481, 482], "read_classvar_from_class": [481, 482], "read_classvar_from_inst": [481, 482], "read_instancevar": [481, 482], "read_instancevar_slot": [481, 482], "read_namedtupl": [481, 482], "read_boundmethod": [481, 482], "write_loc": [481, 482], "write_nonloc": [481, 482], "write_glob": [481, 482], "write_classvar": [481, 482], "write_instancevar": [481, 482], "write_instancevar_slot": [481, 482], "read_list": [481, 482], "read_dequ": [481, 482], "read_strdict": [481, 482], "write_list": [481, 482], "write_dequ": [481, 482], "write_dict": [481, 482], "write_strdict": [481, 482], "list_append_pop": [481, 482], "deque_append_pop": [481, 482], "deque_append_popleft": [481, 482], "loop_overhead": [481, 482], "i7": [481, 482], "4960hq": [481, 482], "barkhau": 481, "83571": 481, "83743": 481, "lawrenc": [481, 482, 483], "anna": [481, 482], "85272": 481, "fx": 481, "coudert": 481, "rykoff": 481, "langer": 481, "43882": [481, 483], "36384": [481, 482, 483], "achraf": 481, "merzouki": 481, "573": [482, 483], "_abc": [482, 483], "_bz2": [482, 483], "_codec": [482, 483], "_contextvar": [482, 483], "_crypt": [482, 483], "_functool": [482, 483], "_json": [482, 483], "multiphas": [482, 483], "_hashlib": [482, 483], "_posixsubprocess": [482, 483], "36144": [482, 483], "39939": [482, 483], "greet_al": 482, "ta": [482, 483], "kaya": [482, 483], "39481": [482, 483], "pythonoldpars": [482, 483], "ngalim": [482, 483], "siregar": [482, 483], "37444": [482, 483], "20443": [482, 483], "37388": [482, 483], "28029": [482, 483], "39702": [482, 483], "40257": [482, 483], "30773": [482, 483], "40824": [482, 483], "41848": 482, "43755": [482, 483], "17005": [482, 483], "37995": [482, 483], "38870": [482, 483], "39638": [482, 483], "34037": [482, 483], "38692": [482, 483], "32309": [482, 483], "typererror": [482, 483], "ido": [482, 483], "37404": [482, 483], "lum": 482, "frenzi": 482, "balhar": 482, "40495": [482, 483], "38112": [482, 483], "39349": [482, 483], "39812": [482, 483], "39207": [482, 483], "38312": [482, 483], "24416": [482, 483], "40698": [482, 483], "38602": [482, 483], "39259": [482, 483], "38379": [482, 483], "39322": [482, 483], "xof": [482, 483], "37630": [482, 483], "40479": [482, 483], "39509": [482, 483], "rhode": [482, 483], "39507": [482, 483], "38615": [482, 483], "40375": [482, 483], "39336": [482, 483], "39791": [482, 483], "36350": [482, 483], "39775": [482, 483], "oleksandr": [482, 483], "pavliuk": [482, 483], "34788": [482, 483], "39648": [482, 483], "ananthakrishnan": 482, "39479": [482, 483], "39288": [482, 483], "39310": [482, 483], "30966": [482, 483], "38493": [482, 483], "38713": [482, 483], "39413": [482, 483], "39395": [482, 483], "40094": [482, 483], "girt": [482, 483], "folkmani": [482, 483], "30618": [482, 483], "hopper": [482, 483], "lidral": [482, 483], "porter": [482, 483], "20523": [482, 483], "bordum": [482, 483], "37376": [482, 483], "40286": [482, 483], "38712": [482, 483], "39329": [482, 483], "tatschner": 482, "25780": [482, 483], "40291": [482, 483], "shinya": [482, 483], "okano": [482, 483], "28724": [482, 483], "thread_cputim": [482, 483], "40192": [482, 483], "jek": [482, 483], "charalampo": [482, 483], "strataki": [482, 483], "1294959": [482, 483], "jendrik": [482, 483], "seipp": [482, 483], "13601": [482, 483], "huon": 482, "40630": 482, "varoquaux": [482, 483], "konstantin": [482, 483], "kashin": [482, 483], "39926": [482, 483], "37663": [482, 483], "eoln": 482, "mefistot": 482, "39011": [482, 483], "32856": [482, 483], "40010": [482, 483], "closefrom": [482, 483], "mast": [482, 483], "conrad": [482, 483], "kubilay": [482, 483], "kocak": [482, 483], "38061": [482, 483], "87x": 482, "37986": [482, 483], "37207": [482, 483], "kapun": [482, 483], "8425": [482, 483], "thrash": [482, 483], "37257": [482, 483], "39434": [482, 483], "37348": [482, 483], "39586": [482, 483], "37315": [482, 483], "35712": [482, 483], "28286": [482, 483], "splitlist": [482, 483], "hexbin4": [482, 483], "rledecode_hqx": [482, 483], "39353": [482, 483], "34822": [482, 483], "augload": [482, 483], "augstor": [482, 483], "39639": [482, 483], "39969": [482, 483], "39988": [482, 483], "39877": [482, 483], "33262": [482, 483], "colvin": [482, 483], "xgtitl": [482, 483], "39366": [482, 483], "38916": [482, 483], "call_profil": [482, 483], "37414": [482, 483], "37392": [482, 483], "pyimport_cleanup": 482, "36710": 482, "37312": [482, 483], "37320": [482, 483], "37804": [482, 483], "36543": [482, 483], "36409": [482, 483], "pygen_needsfin": [482, 483], "15088": [482, 483], "39351": [482, 483], "39350": [482, 483], "39357": [482, 483], "39377": [482, 483], "34793": [482, 483], "39489": [482, 483], "40182": [482, 483], "has_exec": [482, 483], "40208": [482, 483], "40967": [482, 483], "39239": [482, 483], "39562": [482, 483], "34538": 482, "37742": [482, 483], "aiudi": [482, 483], "34775": [482, 483], "latex_latin1": 482, "jordon": 482, "xu": [482, 483], "37751": [482, 483], "foo_travers": 482, "29548": [482, 483], "34880": [482, 483], "39156": [482, 483], "setenv": [482, 483], "10945": [482, 483], "isysroot": [482, 483], "34956": [482, 483], "33125": [482, 483], "36044": [482, 483], "37707": [482, 483], "marcel": [482, 483], "plch": [482, 483], "38787": [482, 483], "40421": [482, 483], "39947": [482, 483], "37194": [482, 483], "38644": [482, 483], "39542": [482, 483], "40024": [482, 483], "40241": [482, 483], "_pyobject_functionstr": [482, 483], "37645": [482, 483], "37483": [482, 483], "38500": [482, 483], "39984": [482, 483], "38650": [482, 483], "pycore_gc": 482, "39882": [482, 483], "37540": [482, 483], "pyobject_new_var": [482, 483], "pyobject_get_weakrefs_listptr": [482, 483], "pyfpe_start_protect": [482, 483], "pyfpe_end_protect": [482, 483], "38835": [482, 483], "37878": [482, 483], "_py_newrefer": [482, 483], "_py_forgetrefer": [482, 483], "_pytracemalloc_newrefer": [482, 483], "_py_getreftot": [482, 483], "pytrash_unwind_level": [482, 483], "py_trashcan_begin_condit": [482, 483], "_pydebug_printtotalref": 482, "_py_printrefer": 482, "_py_printreferenceaddress": 482, "_py_tracemalloc_config": 482, "_py_addtoallobject": 482, "getfram": [482, 483], "_pythreadstate_getfram": [482, 483], "pythreadframegett": [482, 483], "39946": [482, 483], "37340": [482, 483], "38896": [482, 483], "40428": [482, 483], "pyasyncgen_clearfreelist": [482, 483], "pycontext_clearfreelist": [482, 483], "pydict_clearfreelist": [482, 483], "pyfloat_clearfreelist": [482, 483], "pyframe_clearfreelist": [482, 483], "pylist_clearfreelist": [482, 483], "pymethod_clearfreelist": [482, 483], "pycfunction_clearfreelist": [482, 483], "pyset_clearfreelist": [482, 483], "pytuple_clearfreelist": [482, 483], "pyunicode_clearfreelist": [482, 483], "_pyunicode_clearstaticstr": [482, 483], "39465": [482, 483], "_pybytes_insertthousandsgroupinglocal": [482, 483], "_pybytes_insertthousandsgroup": [482, 483], "_py_initializefromarg": [482, 483], "_py_initializefromwidearg": [482, 483], "_pyfloat_repr": [482, 483], "_pyfloat_digit": [482, 483], "_pyfloat_digitsinit": [482, 483], "pyframe_extendstack": [482, 483], "_pyaiterwrapper_typ": [482, 483], "pynullimporter_typ": [482, 483], "pycmpwrapper_typ": [482, 483], "pysortwrapper_typ": [482, 483], "pynoargsfunct": [482, 483], "39372": [482, 483], "41100": [482, 483], "117233": 483, "ish": 483, "libcrypto": 483, "117692": 483, "builtin_function_or_method": 483, "117534": 483, "vlad": 483, "efanov": 483, "2024": 483, "115398": 483, "expatread": 483, "expatpars": 483, "115399": 483, "libexpat": 483, "115243": 483, "114572": 483, "109120": 483, "grigoryev": 483, "semyon": 483, "99108": 483, "116735": 483, "instrumented_call_function_ex": 483, "113964": 483, "116604": 483, "116626": 483, "116296": 483, "116034": 483, "115823": 483, "112087": 483, "115154": 483, "114828": 483, "115011": 483, "112215": 483, "96497": 483, "117467": 483, "mountifield": 483, "117310": 483, "_ssl": 483, "_sslcontext": 483, "implaus": 483, "ssl_ctx_set_cipher_list": 483, "117178": 483, "114781": 483, "117084": 483, "117110": 483, "90872": 483, "116957": 483, "90095": 483, "116764": 483, "116811": 483, "metadatapathfind": 483, "116600": 483, "116484": 483, "116401": 483, "116143": 483, "_start_serv": 483, "docserv": 483, "116325": 483, "90535": 483, "wx": 483, "115978": 483, "test_posix": 483, "bytecodealli": 483, "88352": 483, "computerollov": 483, "87115": 483, "76511": 483, "116040": 483, "falsey": 483, "75988": 483, "115881": 483, "94949": 483, "115886": 483, "115809": 483, "74668": 483, "67044": 483, "115712": 483, "112364": 483, "111358": 483, "115618": 483, "115570": 483, "112006": 483, "__wrapper__": 483, "101293": 483, "115392": 483, "114563": 483, "115197": 483, "115165": 483, "__orig_class__": 483, "shawley": 483, "115133": 483, "115059": 483, "79382": 483, "114071": 483, "114763": 483, "97959": 483, "112281": 483, "111775": 483, "resourcehandl": 483, "107155": 483, "105866": 483, "_get_slot": 483, "60346": 483, "100985": 483, "100884": 483, "misfold": 483, "95782": 483, "96310": 483, "93205": 483, "44865": 483, "43952": 483, "42125": 483, "66543": 483, "hee": 483, "33775": 483, "115233": 483, "83434": 483, "117187": 483, "116333": 483, "lenient": 483, "boringssl": 483, "115979": 483, "test_importlib": 483, "112536": 483, "tsan": 483, "116307": 483, "isolated_modul": 483, "imped": 483, "115720": 483, "huntrleak": 483, "115122": 483, "bisect_cmd": 483, "115596": 483, "programprioritytest": 483, "test_o": 483, "116313": 483, "preview2": 483, "116117": 483, "115167": 483, "vcruntime140_thread": 483, "117267": 483, "116773": 483, "0xxxx": 483, "91227": 483, "115554": 483, "115543": 483, "115049": 483, "115009": 483, "88516": 483, "113516": 483, "117021": 483, "pylong_aspid": 483, "116869": 483, "113659": 483, "114887": 483, "114388": 483, "t_uint": 483, "t_ulong": 483, "113703": 483, "89811": 483, "113602": 483, "113297": 483, "106905": 483, "112943": 483, "112716": 483, "94606": 483, "sidney": 483, "markowitz": 483, "114965": 483, "114959": 483, "109475": 483, "110190": 483, "max_struct_s": 483, "stgdict": 483, "russo": 483, "113280": 483, "77749": 483, "114492": 483, "alpin": 483, "113267": 483, "106584": 483, "unbalanc": 483, "75128": 483, "114257": 483, "filenotfound": 483, "114328": 483, "icrlf": 483, "101438": 483, "104522": 483, "114149": 483, "109534": 483, "selector_ev": 483, "baseselectoreventloop": 483, "jami": 483, "114077": 483, "114014": 483, "jeremiah": 483, "pascual": 483, "113951": 483, "tag_unbind": 483, "funcid": 483, "113877": 483, "winfo_pathnam": 483, "113661": 483, "113781": 483, "112932": 483, "113594": 483, "113538": 483, "streamreaderprotocol": 483, "85567": 483, "101225": 483, "resource_shar": 483, "113543": 483, "113028": 483, "113421": 483, "111784": 483, "_elementtre": 483, "113407": 483, "113320": 483, "113358": 483, "113214": 483, "113246": 483, "113199": 483, "113188": 483, "differen": 483, "61648": 483, "112559": 483, "yilei": 483, "yang": 483, "ppc64le": 483, "79429": 483, "81194": 483, "uint_max": 483, "112343": 483, "111615": 483, "93162": 483, "111049": 483, "110345": 483, "109858": 483, "zipbomb": 483, "114440": 483, "38807": 483, "75705": 483, "106233": 483, "105102": 483, "104282": 483, "_decode_filter_properti": 483, "radislav": 483, "chugunov": 483, "102512": 483, "_dummythread": 483, "_mainthread": 483, "35928": 483, "26791": 483, "36959": 483, "hemsley": 483, "18060": 483, "110746": 483, "95649": 483, "v0": 483, "109980": 483, "test_tarfile_vs_tar": 483, "test_shutil": 483, "105089": 483, "test_zipfil": 483, "test_cor": 483, "testwithdirectori": 483, "test_create_directory_with_writ": 483, "zinfo": 483, "40648": 483, "112305": 483, "errant": 483, "112867": 483, "with_pymalloc_radix_tre": 483, "11102": 483, "ux": 483, "36351": 483, "ipv6typ": 483, "109991": 483, "111239": 483, "100107": 483, "114096": 483, "111877": 483, "113009": 483, "getexitcodeprocess": 483, "still_act": 483, "87868": 483, "37308": 483, "mojibak": 483, "110459": 483, "74573": 483, "fb8919203": 483, "65701": 483, "108269": 483, "cfbundleallowmixedloc": 483, "102362": 483, "get_plaform": 483, "110017": 483, "stress": 483, "fb13453490": 483, "110820": 483, "alignof_max_align_t": 483, "sizeof_long_doubl": 483, "have_gcc_asm_for_x64": 483, "96905": 483, "72284": 483, "bing": 483, "113903": 483, "test_idl": 483, "test_configdialog": 483, "113729": 483, "113269": 483, "test_editor": 483, "catalina": 483, "112898": 483, "103820": 483, "13586": 483, "multissltest": 483, "1w": 483, "115015": 483, "112125": 483, "112625": 483, "105967": 483, "112356": 483, "load_nul": 483, "111058": 483, "112388": 483, "112387": 483, "112367": 483, "112243": 483, "112266": 483, "111654": 483, "109181": 483, "102388": 483, "111366": 483, "111380": 483, "94438": 483, "savannah": 483, "ostrowski": 483, "110938": 483, "109894": 483, "110782": 483, "110696": 483, "110543": 483, "110514": 483, "110455": 483, "have_pthread_stub": 483, "110259": 483, "110237": 483, "_pyeval_matchclass": 483, "109889": 483, "109853": 483, "105716": 483, "109793": 483, "109596": 483, "109351": 483, "109216": 483, "109207": 483, "109179": 483, "109052": 483, "88943": 483, "106931": 483, "79325": 483, "112645": 483, "112618": 483, "112334": 483, "6507": 483, "112578": 483, "112509": 483, "112414": 483, "112358": 483, "broke": 483, "94722": 483, "112105": 483, "111942": 483, "109538": 483, "111460": 483, "103791": 483, "111804": 483, "falloc": 483, "111841": 483, "111541": 483, "110894": 483, "111531": 483, "bind_class": 483, "bind_al": 483, "111356": 483, "111342": 483, "68166": 483, "vsapi": 483, "75666": 483, "79033": 483, "111295": 483, "111253": 483, "111251": 483, "_blake2": 483, "111174": 483, "111187": 483, "111159": 483, "110910": 483, "111092": 483, "110488": 483, "110392": 483, "110590": 483, "65052": 483, "110519": 483, "alwai": 483, "110395": 483, "110378": 483, "110365": 483, "109653": 483, "110196": 483, "110036": 483, "110038": 483, "109631": 483, "109747": 483, "109818": 483, "109047": 483, "terminate_broken": 483, "109782": 483, "amin": 483, "alae": 483, "109590": 483, "109786": 483, "109593": 483, "semlock": 483, "109613": 483, "109375": 483, "107219": 483, "50644": 483, "108987": 483, "108791": 483, "105829": 483, "egor": 483, "eliseev": 483, "102956": 483, "84867": 483, "91133": 483, "73561": 483, "86826": 483, "8536": 483, "43153": 483, "35332": 483, "41422": 483, "40262": 483, "111699": 483, "108826": 483, "112769": 483, "ng": 483, "110367": 483, "verbose3": 483, "jn": 483, "111165": 483, "run_unittest": 483, "110932": 483, "110995": 483, "test_gdb": 483, "110918": 483, "matchfil": 483, "ignorefil": 483, "110647": 483, "test_stress_modifying_handl": 483, "test_sign": 483, "103053": 483, "test_tool": 483, "test_freez": 483, "110167": 483, "test_socket": 483, "110388": 483, "81002": 483, "110267": 483, "pystructsequ": 483, "xuehai": 483, "110031": 483, "110088": 483, "test_asyncio": 483, "clock_r": 483, "109974": 483, "110033": 483, "test_interprocess_sign": 483, "109594": 483, "test_concurrent_futur": 483, "test_wait": 483, "ot": 483, "109972": 483, "test_freeze_simple_script": 483, "cis": 483, "109580": 483, "test_perf_profil": 483, "104736": 483, "108927": 483, "test_unittest": 483, "test_compileal": 483, "112088": 483, "quay": 483, "tiran": 483, "cpython_autoconf": 483, "271": 483, "111046": 483, "109191": 483, "111856": 483, "exfat": 483, "111293": 483, "110913": 483, "windowsconsoleio": 483, "110437": 483, "109286": 483, "109981": 483, "110950": 483, "sonoma": 483, "111015": 483, "71383": 483, "92603": 483, "35668": 483, "idb": 483, "in_rpc_cod": 483, "prev_fram": 483, "test_debugg": 483, "106560": 483, "112438": 483, "109521": 483, "109823": 483, "109719": 483, "cold": 483, "warm": 483, "109627": 483, "110045": 483, "109209": 483, "109496": 483, "_py_negativerefcount": 483, "109371": 483, "deopt": 483, "105658": 483, "109219": 483, "109341": 483, "109195": 483, "load_": 483, "encompass": 483, "109118": 483, "109114": 483, "108976": 483, "108732": 483, "108959": 483, "108682": 483, "108843": 483, "102823": 483, "109396": 483, "test_hmac_sha1": 483, "109237": 483, "test_sit": 483, "test_underpth_bas": 483, "109230": 483, "test_pyexpat": 483, "test_except": 483, "109015": 483, "test_imaplib": 483, "blackhol": 483, "gcp": 483, "91960": 483, "retriv": 483, "py_bt": 483, "clueless": 483, "108962": 483, "test_tempfil": 483, "test_flag": 483, "108851": 483, "test_tomllib": 483, "get_recursion_avail": 483, "get_recursion_depth": 483, "108834": 483, "verbose2": 483, "103186": 483, "test_sys_settrac": 483, "108740": 483, "deepfreez": 483, "108310": 483, "aapo": 483, "oksman": 483, "107774": 483, "108520": 483, "_is_fork_ctx": 483, "accross": 483, "is_fork_ctx": 483, "108654": 483, "108487": 483, "devious": 483, "deoptim": 483, "106176": 483, "107901": 483, "108390": 483, "107724": 483, "rc1": 483, "107080": 483, "77377": 483, "108469": 483, "reselect": 483, "108295": 483, "64662": 483, "108111": 483, "101251": 483, "105736": 483, "harmon": 483, "108083": 483, "107963": 483, "106242": 483, "107913": 483, "107845": 483, "107805": 483, "107715": 483, "gertjan": 483, "zwieten": 483, "100814": 483, "tclerror": 483, "106684": 483, "107396": 483, "106052": 483, "100061": 483, "99203": 483, "105052": 483, "89392": 483, "108388": 483, "test_multiprocessing_fork": 483, "test_multiprocessing_forkserv": 483, "test_multiprocessing_spawn": 483, "105776": 483, "test_cppext": 483, "107178": 483, "63760": 483, "kul": 483, "107814": 483, "find_python": 483, "107565": 483, "106844": 483, "lcmapstringex": 483, "1v": 483, "95065": 483, "text_signatur": 483, "107916": 483, "107915": 483, "107810": 483, "102988": 483, "12beta4": 483, "106669": 483, "102509": 483, "107263": 483, "104432": 483, "unalign": 483, "fsanizit": 483, "chavez": 483, "106898": 483, "py_unind": 483, "hanld": 483, "106895": 483, "funtion": 483, "106897": 483, "104621": 483, "106917": 483, "105699": 483, "initialz": 483, "106092": 483, "frame_dealloc": 483, "106719": 483, "106723": 483, "105235": 483, "107077": 483, "ssl_error_syscal": 483, "ssl_error_ssl": 483, "err_lib_ssl": 483, "ssl_r_certificate_verify_fail": 483, "appropi": 483, "107576": 483, "46376": 483, "62519": 483, "83006": 483, "106186": 483, "105002": 483, "106831": 483, "d2i_ssl_sess": 483, "106774": 483, "106752": 483, "106602": 483, "106530": 483, "106403": 483, "106350": 483, "libtommath": 483, "mp_init": 483, "106263": 483, "signaldict": 483, "charli": 483, "zhao": 483, "105626": 483, "18319": 483, "107305": 483, "nearbi": 483, "107008": 483, "106948": 483, "nitpick_ignor": 483, "54738": 483, "107237": 483, "test_log": 483, "test_udp_reconnect": 483, "106714": 483, "test_capi": 483, "test_no_fatalerror_infinite_loop": 483, "104090": 483, "_path": 483, "106881": 483, "posixmodul": 483, "106962": 483, "mpi": 483, "101538": 483, "takashi": 483, "99079": 483, "106970": 483, "config_arg": 483, "ijtaba": 483, "hussain": 483, "107226": 483, "27043": 483, "_parseaddr": 483, "addresslist": 483, "106396": 483, "106145": 483, "105979": 483, "_imp": 483, "get_frozen_object": 483, "105908": 483, "99111": 483, "barry_as_flufl": 483, "105340": 483, "105486": 483, "101006": 483, "106524": 483, "106510": 483, "106503": 483, "_selectorsockettransport": 483, "_write_readi": 483, "105497": 483, "90876": 483, "106292": 483, "106330": 483, "102541": 483, "106152": 483, "106075": 483, "105987": 483, "105974": 483, "96145": 483, "104554": 483, "94777": 483, "106232": 483, "101634": 483, "testn": 483, "106118": 483, "12b1": 483, "103295": 483, "104692": 483, "commoninstal": 483, "bininstal": 483, "106359": 483, "splat": 483, "105227": 483, "105840": 483, "105831": 483, "105800": 483, "105587": 483, "_pystaticobject_checkrefcnt": 483, "105564": 483, "artificil": 483, "105549": 483, "105588": 483, "105375": 483, "105435": 483, "105390": 483, "104812": 483, "ergo": 483, "105808": 483, "zip_mod": 483, "104799": 483, "105745": 483, "_unpickler_setinputstream": 483, "105605": 483, "_datetim": 483, "105332": 483, "104310": 483, "allowing_all_extens": 483, "104996": 483, "105084": 483, "wheel_pkg_dir": 483, "105436": 483, "105603": 483, "own_gil": 483, "103968": 483, "103142": 483, "1u": 483, "cves": 483, "105259": 483, "105324": 483, "98963": 483, "12beta1": 483, "105194": 483, "105162": 483, "105164": 483, "105035": 483, "105017": 483, "105013": 483, "104976": 483, "tokeninfo": 483, "104972": 483, "104955": 483, "104690": 483, "104879": 483, "104825": 483, "105280": 483, "105239": 483, "105080": 483, "105144": 483, "105113": 483, "103631": 483, "104947": 483, "104935": 483, "104874": 483, "104797": 483, "104372": 483, "104399": 483, "mp_to_unsigned_bin_n": 483, "mp_unsigned_bin_s": 483, "102024": 483, "_idle_semaphor": 483, "_worker": 483, "89455": 483, "89412": 483, "104943": 483, "90005": 483, "libbsd": 483, "105146": 483, "103646": 483, "unwrit": 483, "88745": 483, "copyfile2": 483, "104820": 483, "104803": 483, "104719": 483, "105115": 483, "beta1": 483, "105071": 483, "99889": 483, "104049": 483, "102153": 483, "24329": 483, "104615": 483, "104572": 483, "104482": 483, "102818": 483, "104405": 483, "104263": 483, "mip": 483, "py_infin": 483, "berg": 483, "99113": 483, "104108": 483, "104142": 483, "104078": 483, "104066": 483, "104028": 483, "104018": 483, "102213": 483, "103895": 483, "103907": 483, "103899": 483, "103845": 483, "103763": 483, "load_classdict_or_glob": 483, "load_classdict_or_deref": 483, "103801": 483, "ruff": 483, "102310": 483, "103650": 483, "sunmy2019": 483, "100530": 483, "101517": 483, "103492": 483, "87729": 483, "103488": 483, "82012": 483, "103333": 483, "103242": 483, "103323": 483, "tstate_curr": 483, "102700": 483, "88691": 483, "97933": 483, "99184": 483, "98003": 483, "39610": 483, "mem_0d": 483, "31821": 483, "104600": 483, "104340": 483, "104555": 483, "104484": 483, "75367": 483, "104536": 483, "stracktrac": 483, "101520": 483, "104392": 483, "_paramspec_tvar": 483, "102613": 483, "103000": 483, "elli": 483, "104301": 483, "104139": 483, "unsplit": 483, "itm": 483, "104307": 483, "87695": 483, "104265": 483, "0a4": 483, "23224": 483, "14935": 483, "65772": 483, "90208": 483, "104144": 483, "fututr": 483, "104114": 483, "104104": 483, "104102": 483, "103822": 483, "103963": 483, "call_intrinsic_": 483, "104035": 483, "103987": 483, "103977": 483, "88773": 483, "liam": 483, "gersten": 483, "103935": 483, "68968": 483, "100370": 483, "102628": 483, "103583": 483, "_multibytecodec": 483, "103848": 483, "ipvfutur": 483, "103872": 483, "99944": 483, "74940": 483, "103861": 483, "103839": 483, "tommath": 483, "90750": 483, "103685": 483, "81403": 483, "endtransf": 483, "voidresp": 483, "89415": 483, "rees": 483, "hyde": 483, "103673": 483, "berri": 483, "84976": 483, "_pydatetim": 483, "103596": 483, "103584": 483, "stipul": 483, "typesh": 483, "9620": 483, "103578": 483, "103556": 483, "103559": 483, "103548": 483, "103538": 483, "tk_aqua": 483, "103533": 483, "103525": 483, "103365": 483, "103472": 483, "103462": 483, "103449": 483, "103092": 483, "_collect": 483, "103357": 483, "harel": 483, "_protocolmeta": 483, "_is_callable_members_on": 483, "_get_protocol_attr": 483, "103256": 483, "103285": 483, "103225": 483, "93910": 483, "memmber": 483, "102978": 483, "100479": 483, "103220": 483, "103204": 483, "75586": 483, "103143": 483, "102953": 483, "97696": 483, "81079": 483, "101819": 483, "101362": 483, "102114": 483, "62432": 483, "78079": 483, "101688": 483, "101640": 483, "83861": 483, "89550": 483, "99353": 483, "96522": 483, "96534": 483, "87474": 483, "gorgen": 483, "51574": 483, "94518": 483, "fork_exec": 483, "92184": 483, "46797": 483, "44844": 483, "45606": 483, "23041": 483, "24964": 483, "17258": 483, "39744": 483, "22708": 483, "67056": 483, "48241": 483, "86094": 483, "yeojin": 483, "andrea": 483, "giudiceandrea": 483, "99202": 483, "104494": 483, "test_pack_configure_in": 483, "test_place_configure_in": 483, "104461": 483, "test_configure_screen": 483, "86275": 483, "103329": 483, "102795": 483, "test_control_and_wait": 483, "75729": 483, "101282": 483, "99017": 483, "104490": 483, "phoni": 483, "104106": 483, "mkfifoat": 483, "mknodat": 483, "103532": 483, "tkinter_protect_loadtk": 483, "91152": 483, "99069": 483, "static_assert": 483, "100220": 483, "104623": 483, "82814": 483, "103088": 483, "102997": 483, "88013": 483, "99834": 483, "103545": 483, "104180": 483, "schott": 483, "60436": 483, "104499": 483, "104496": 483, "someday": 483, "88496": 483, "104389": 483, "101291": 483, "104109": 483, "103743": 483, "103091": 483, "101408": 483, "prehead": 483, "96803": 483, "89987": 483, "101975": 483, "stacktop": 483, "100982": 483, "compare_and_branch": 483, "102701": 483, "102594": 483, "102491": 483, "ironlanguag": 483, "ironpython3": 483, "1667": 483, "rearrag": 483, "2s": 483, "102397": 483, "102406": 483, "102281": 483, "nullptr": 483, "fileutil": 483, "bachmann": 483, "102300": 483, "102255": 483, "xbox": 483, "102027": 483, "sse2": 483, "sse3": 483, "101865": 483, "_pickl": 483, "moham": 483, "koubaa": 483, "103085": 483, "103068": 483, "102549": 483, "103056": 483, "103046": 483, "103023": 483, "102947": 483, "102780": 483, "102839": 483, "88965": 483, "76846": 483, "102670": 483, "102615": 483, "100112": 483, "102578": 483, "74468": 483, "102378": 483, "_signature_strip_non_python_syntax": 483, "102103": 483, "102069": 483, "102038": 483, "98886": 483, "101673": 483, "101313": 483, "100372": 483, "89727": 483, "100131": 483, "98169": 483, "96931": 483, "95495": 483, "close_notifi": 483, "94684": 483, "94440": 483, "36305": 483, "103112": 483, "102980": 483, "102537": 483, "test_zoneinfo": 483, "tzpathtest": 483, "python_tzpath_context": 483, "101377": 483, "test_locale_calendar_formatweekday": 483, "102973": 483, "dockerfil": 483, "102711": 483, "wstrict": 483, "102690": 483, "102809": 483, "102013": 483, "pyunstable_visitobject": 483, "101727": 483, "1t": 483, "0286": 483, "4303": 483, "libtomcrypt": 483, "101283": 483, "102493": 483, "102416": 483, "102356": 483, "102336": 483, "102250": 483, "102126": 483, "getcurrentprocessid": 483, "102056": 483, "for_iter_rang": 483, "101967": 483, "positional_only_passed_as_keyword": 483, "101952": 483, "74895": 483, "sai_servic": 483, "101857": 483, "musl": 483, "84783": 483, "87849": 483, "101765": 483, "101430": 483, "presiz": 483, "101696": 483, "_pystatictype_dealloc": 483, "100719": 483, "98627": 483, "102302": 483, "101979": 483, "91038": 483, "81652": 483, "102179": 483, "101961": 483, "hookcompress": 483, "gihwan": 483, "101936": 483, "vo": 483, "101566": 483, "multiplexedpath": 483, "265": 483, "101997": 483, "_sha2": 483, "_sha256": 483, "_sha512": 483, "101892": 483, "87634": 483, "97786": 483, "101773": 483, "_normal": 483, "101693": 483, "101446": 483, "63301": 483, "101360": 483, "101277": 483, "100809": 483, "99138": 483, "96764": 483, "88233": 483, "leakag": 483, "85417": 483, "97725": 483, "102019": 483, "test_current_": 483, "89792": 483, "99942": 483, "100221": 483, "sharedinstal": 483, "96821": 483, "102344": 483, "101881": 483, "101849": 483, "101763": 483, "101759": 483, "101614": 483, "python3_d": 483, "101196": 483, "101907": 483, "99293": 483, "91744": 483, "689": 483, "92173": 483, "59956": 483, "101400": 483, "101372": 483, "101266": 483, "pylongvalu": 483, "101046": 483, "101037": 483, "underalloc": 483, "100762": 483, "100942": 483, "100923": 483, "100892": 483, "91351": 483, "100726": 483, "100712": 483, "enable_speci": 483, "32780": 483, "pep3118": 483, "101541": 483, "psuedo": 483, "101570": 483, "101323": 483, "_zlibdecompressor": 483, "101317": 483, "101326": 483, "futureit": 483, "92123": 483, "100795": 483, "freeaddrinfo": 483, "brester": 483, "101143": 483, "_add_callback": 483, "101144": 483, "supplimentari": 483, "101015": 483, "100573": 483, "39615": 483, "100750": 483, "96290": 483, "99952": 483, "undercount": 483, "67790": 483, "99266": 483, "86682": 483, "60580": 483, "38941": 483, "40077": 483, "29847": 483, "77772": 483, "hoelzl": 483, "88324": 483, "reword": 483, "101334": 483, "test_tarfil": 483, "configr": 483, "depreact": 483, "101522": 483, "77532": 483, "platformtoolset": 483, "clangcl": 483, "101152": 483, "100340": 483, "wno": 483, "101060": 483, "98705": 483, "98636": 483, "gdbm_compat": 483, "_gdbm": 483, "96305": 483, "_aix_support": 483, "_bootsubprocess": 483, "101543": 483, "101467": 483, "101135": 483, "82052": 483, "32k": 483, "100320": 483, "100247": 483, "100776": 483, "__text_signature__": 483, "unary_posit": 483, "list_to_tupl": 483, "import_star": 483, "print_expr": 483, "stopiteration_error": 483, "100288": 483, "load_attr_method_with_dict": 483, "100720": 483, "_pyframe_numslotsforcodeobject": 483, "co_nplaincellvar": 483, "100637": 483, "100649": 483, "native_thread_id": 483, "100126": 483, "torn": 483, "87447": 483, "100268": 483, "100374": 483, "socular": 483, "100357": 483, "100117": 483, "90043": 483, "100222": 483, "_py_codeunit": 483, "pun": 483, "99955": 483, "100188": 483, "binary_subscr_list_int": 483, "binary_subscr_tuple_int": 483, "99110": 483, "pyframe_new": 483, "94155": 483, "99540": 483, "100143": 483, "xpystat": 483, "100146": 483, "_pylist_fromarrayst": 483, "100110": 483, "100050": 483, "92216": 483, "99582": 483, "_bootstrap_python": 483, "99554": 483, "98522": 483, "94603": 483, "89051": 483, "32782": 483, "100833": 483, "100805": 483, "100813": 483, "100792": 483, "91851": 483, "microoptim": 483, "90104": 483, "100689": 483, "pyexpat_capi": 483, "100740": 483, "91219": 483, "100690": 483, "called_onc": 483, "86508": 483, "shim": 483, "100585": 483, "100562": 483, "100519": 483, "eff_request_host": 483, "100287": 483, "100488": 483, "100474": 483, "100363": 483, "78878": 483, "cfield": 483, "100348": 483, "_read_ready_cb": 483, "100272": 483, "83076": 483, "100228": 483, "100039": 483, "100133": 483, "44592": 483, "100098": 483, "85432": 483, "98778": 483, "99925": 483, "94943": 483, "83035": 483, "99576": 483, "94912": 483, "99509": 483, "99433": 483, "85267": 483, "__text_signatur": 483, "98030": 483, "88500": 483, "96127": 483, "95882": 483, "78707": 483, "92122": 483, "24132": 483, "40447": 483, "36880": 483, "100616": 483, "100472": 483, "25377": 483, "100454": 483, "100086": 483, "libregrtest": 483, "93018": 483, "100540": 483, "dusing_apple_os_libffi": 483, "88267": 483, "41916": 483, "ac_cv_cxx_thread": 483, "100180": 483, "99191": 483, "_msvc_lang": 483, "202002l": 483, "_msc_ver": 483, "1929": 483, "_wmimodul": 483, "79218": 483, "ms_win64": 483, "w64": 483, "99941": 483, "43984": 483, "34816": 483, "100342": 483, "99947": 483, "99240": 483, "100001": 483, "87604": 483, "99891": 483, "99729": 483, "99708": 483, "99578": 483, "create_builtin": 483, "99581": 483, "caract": 483, "99553": 483, "99370": 483, "99377": 483, "98686": 483, "binary_op_gener": 483, "compare_op_gener": 483, "99298": 483, "91053": 483, "90994": 483, "45026": 483, "31718": 483, "38031": 483, "xhh": 483, "ambigui": 483, "51524": 483, "99645": 483, "99508": 483, "_bootstrap_extern": 483, "66285": 483, "wakeupfd": 483, "97001": 483, "92647": 483, "99341": 483, "99382": 483, "99379": 483, "99344": 483, "99284": 483, "untest": 483, "99201": 483, "have_dynamic_load": 483, "str_convert": 483, "post_pars": 483, "64490": 483, "99029": 483, "nake": 483, "98253": 483, "resili": 483, "exacerb": 483, "98458": 483, "93453": 483, "basedefaulteventlooppolici": 483, "97966": 483, "uname_result": 483, "98248": 483, "98108": 483, "98098": 483, "82836": 483, "96828": 483, "ktls": 483, "88863": 483, "91078": 483, "47220": 483, "ogam": 483, "44817": 483, "error_bad_netpath": 483, "error_network_access_deni": 483, "161": 483, "error_bad_pathnam": 483, "41260": 483, "15999": 483, "99931": 483, "sphinxext": 483, "opengraph": 483, "89682": 483, "88330": 483, "92892": 483, "41825": 483, "99892": 483, "test_norm": 483, "test_unicodedata": 483, "normalizationtest": 483, "pythontest": 483, "99934": 483, "test_marsh": 483, "test_determinist": 483, "99741": 483, "630": 483, "_xxsubinterpret": 483, "99659": 483, "test_sqlite3": 483, "99593": 483, "96002": 483, "99086": 483, "wimplicit": 483, "99337": 483, "98872": 483, "88226": 483, "target_": 483, "use_computed_goto": 483, "99345": 483, "98629": 483, "99442": 483, "40882": 483, "87235": 483, "98940": 483, "_pyarg_unpackkeywordswithvararg": 483, "noptarg": 483, "98680": 483, "pybuf_": 483, "99612": 483, "98433": 483, "5894": 483, "98739": 483, "81057": 483, "99254": 483, "99205": 483, "99181": 483, "99204": 483, "96055": 483, "99153": 483, "unquicken": 483, "extended_arg_quick": 483, "warmup": 483, "99103": 483, "96793": 483, "98852": 483, "98925": 483, "98783": 483, "98811": 483, "98762": 483, "unbox": 483, "99257": 483, "96421": 483, "frame_owned_by_cstack": 483, "98415": 483, "chaim": 483, "sander": 483, "92119": 483, "90716": 483, "_pylong": 483, "asymptot": 483, "longobject": 483, "95389": 483, "noam": 483, "cohen": 483, "93696": 483, "99418": 483, "99305": 483, "74044": 483, "99275": 483, "__initsubclass__": 483, "99277": 483, "_sslprotocoltransport": 483, "sslproto": 483, "99248": 483, "99155": 483, "93464": 483, "99134": 483, "98999": 483, "83004": 483, "_zoneinfo": 483, "98897": 483, "98878": 483, "98139": 483, "90352": 483, "_selectordatagramtransport": 483, "98793": 483, "wsaconnect": 483, "wsasendto": 483, "98744": 483, "98740": 483, "98703": 483, "98624": 483, "98284": 483, "96151": 483, "98086": 483, "72719": 483, "96192": 483, "92452": 483, "91803": 483, "38523": 483, "40358": 483, "36267": 483, "98832": 483, "98903": 483, "98713": 483, "87390": 483, "96853": 483, "34272": 483, "pthread_scope_system": 483, "99016": 483, "97731": 483, "docclean": 483, "98949": 483, "98989": 483, "98831": 483, "cases_gener": 483, "generated_cas": 483, "98817": 483, "pyproj": 483, "98776": 483, "levenshtein": 483, "98707": 483, "98689": 483, "37434": 483, "inflategethead": 483, "98790": 483, "98745": 483, "98692": 483, "94328": 483, "98978": 483, "benedikt": 483, "reinartz": 483, "98410": 483, "98610": 483, "_py_newinterpreterfromconfig": 483, "98608": 483, "_pyinterpreterconfig": 483, "_py_newinterpret": 483, "isolated_subinterpret": 483, "97616": 483, "limor": 483, "97514": 483, "escal": 483, "42919": 483, "87389": 483, "hamza": 483, "avvan": 483, "79096": 483, "92888": 483, "98374": 483, "98461": 483, "98354": 483, "98398": 483, "98390": 483, "97997": 483, "97973": 483, "96078": 483, "97955": 483, "97912": 483, "97002": 483, "97943": 483, "erad": 483, "86298": 483, "97779": 483, "97752": 483, "97591": 483, "97670": 483, "getdxp": 483, "analyze_dxp": 483, "dxp": 483, "dynamic_execution_profil": 483, "dxpair": 483, "94526": 483, "96975": 483, "96848": 483, "95921": 483, "_testcapimodul": 483, "95778": 483, "96387": 483, "mingliang": 483, "96864": 483, "96678": 483, "96754": 483, "96751": 483, "64373": 483, "96641": 483, "keywrapp": 483, "96636": 483, "setrac": 483, "96572": 483, "96611": 483, "96612": 483, "90230": 483, "96587": 483, "96569": 483, "behavoir": 483, "96582": 483, "_pythread_currentfram": 483, "91079": 483, "93911": 483, "96348": 483, "95196": 483, "96364": 483, "96352": 483, "93554": 483, "backward_target": 483, "next_block": 483, "pop_jump_forward_if_tru": 483, "pop_jump_backward_if_tru": 483, "pop_jump_forward_if_fals": 483, "pop_jump_backward_if_fals": 483, "pop_jump_forward_if_non": 483, "pop_jump_backward_if_non": 483, "pop_jump_forward_if_not_non": 483, "pop_jump_backward_if_not_non": 483, "96268": 483, "96237": 483, "f_func": 483, "f_funcobj": 483, "96187": 483, "96143": 483, "96071": 483, "96046": 483, "ht_cached_key": 483, "96005": 483, "pyenv": 483, "93678": 483, "_testinternalcapi": 483, "optimize_cfg": 483, "cfgoptimizationtestcas": 483, "95245": 483, "weakreflist": 483, "95977": 483, "91210": 483, "95922": 483, "eliminate_empty_basic_block": 483, "95818": 483, "95876": 483, "_pypegen_raise_error_known_loc": 483, "95605": 483, "95150": 483, "dedupl": 483, "91146": 483, "87092": 483, "codegen": 483, "95355": 483, "_pypegen_parser_new": 483, "honglin": 483, "zhu": 483, "90081": 483, "slowdown": 483, "95324": 483, "cfg_builder": 483, "95185": 483, "absurd": 483, "95060": 483, "addrq": 483, "95113": 483, "91409": 483, "95023": 483, "94036": 483, "94938": 483, "94996": 483, "94739": 483, "94947": 483, "91256": 483, "94869": 483, "94893": 483, "94822": 483, "91153": 483, "90699": 483, "94694": 483, "93252": 483, "94215": 483, "92228": 483, "94485": 483, "91719": 483, "94329": 483, "1000s": 483, "94360": 483, "int_min": 483, "94262": 483, "94192": 483, "93883": 483, "94021": 483, "93955": 483, "93841": 483, "_stats_on": 483, "_stats_off": 483, "_stats_clear": 483, "_stats_dump": 483, "93516": 483, "traceabl": 483, "89828": 483, "93671": 483, "93662": 483, "93461": 483, "93621": 483, "93533": 483, "93444": 483, "basicblock": 483, "b_nofallthrough": 483, "b_exit": 483, "b_return": 483, "93418": 483, "93382": 483, "93359": 483, "93356": 483, "93354": 483, "93283": 483, "93345": 483, "93223": 483, "84694": 483, "91924": 483, "93040": 483, "93061": 483, "93065": 483, "hamt": 483, "libman": 483, "93021": 483, "89914": 483, "92955": 483, "92930": 483, "90690": 483, "92914": 483, "92858": 483, "92804": 483, "92777": 483, "92658": 483, "92236": 483, "91102": 483, "92619": 483, "88750": 483, "92261": 483, "91432": 483, "91399": 483, "unicodetype_db": 483, "91578": 483, "47091": 483, "42316": 483, "89237": 483, "97928": 483, "98331": 483, "98307": 483, "96035": 483, "98257": 483, "98251": 483, "98178": 483, "44098": 483, "87730": 483, "98023": 483, "90985": 483, "harsh": 483, "undeprec": 483, "97646": 483, "9239": 483, "97837": 483, "97825": 483, "97008": 483, "82711": 483, "friedrich": 483, "bolz": 483, "tereick": 483, "97799": 483, "97781": 483, "mutablil": 483, "96827": 483, "95534": 483, "97592": 483, "97639": 483, "97545": 483, "73588": 483, "96865": 483, "97005": 483, "85760": 483, "96704": 483, "96819": 483, "resource_track": 483, "95865": 483, "96741": 483, "96735": 483, "46412": 483, "ndb": 483, "96652": 483, "68163": 483, "96538": 483, "96465": 483, "96079": 483, "_annotatedalia": 483, "96415": 483, "_cell_factori": 483, "95987": 483, "96388": 483, "96385": 483, "__typing_prepare_subst__": 483, "96142": 483, "_dataclassparam": 483, "96073": 483, "overeag": 483, "89258": 483, "96346": 483, "96349": 483, "90467": 483, "96172": 483, "96159": 483, "96175": 483, "96052": 483, "96125": 483, "96019": 483, "makeunicodedata": 483, "95463": 483, "69142": 483, "tzoffset": 483, "95899": 483, "95736": 483, "95804": 483, "95704": 483, "95149": 483, "95609": 483, "95289": 483, "manger": 483, "94909": 483, "95385": 483, "83901": 483, "95339": 483, "95045": 483, "95231": 483, "95097": 483, "95087": 483, "95199": 483, "95194": 483, "93899": 483, "95166": 483, "95132": 483, "11a1": 483, "24421": 483, "85128": 483, "93157": 483, "91212": 483, "shin": 483, "myoung": 483, "serp": 483, "95077": 483, "95109": 483, "95105": 483, "95066": 483, "95005": 483, "_pyaccu": 483, "_pyunicodewrit": 483, "90085": 483, "94857": 483, "94821": 483, "94736": 483, "_multiprocess": 483, "74116": 483, "87822": 483, "priorit": 483, "88050": 483, "94637": 483, "ssl_ctx_set_default_verify_path": 483, "92546": 483, "94607": 483, "94619": 483, "93896": 483, "94343": 483, "94382": 483, "78724": 483, "94510": 483, "92336": 483, "94398": 483, "94318": 483, "89988": 483, "94254": 483, "93259": 483, "from_nam": 483, "93096": 483, "test_codec": 483, "encodedfiletest": 483, "94207": 483, "_struct": 483, "test_base64": 483, "legacybase64testcas": 483, "test_encodebyt": 483, "94214": 483, "94182": 483, "91742": 483, "94101": 483, "84753": 483, "mehdi": 483, "abaakouk": 483, "94028": 483, "27884": 483, "93973": 483, "93858": 483, "93820": 483, "93847": 483, "83499": 483, "79512": 483, "91389": 483, "93626": 483, "90494": 483, "90549": 483, "93521": 483, "79579": 483, "93421": 483, "93475": 483, "93370": 483, "91810": 483, "91162": 483, "93353": 483, "83658": 483, "88123": 483, "93297": 483, "gced": 483, "85308": 483, "93156": 483, "92886": 483, "90155": 483, "91513": 483, "93033": 483, "0x0100": 483, "0x00010000": 483, "89973": 483, "93044": 483, "93010": 483, "invalidheadererror": 483, "invalidheaderdefect": 483, "92986": 483, "92932": 483, "92675": 483, "87901": 483, "11b1": 483, "91922": 483, "92869": 483, "92839": 483, "92734": 483, "92671": 483, "91581": 483, "92550": 483, "92591": 483, "92445": 483, "92547": 483, "92530": 483, "92531": 483, "84131": 483, "92391": 483, "mueller": 483, "91968": 483, "81790": 483, "90622": 483, "91577": 483, "91539": 483, "getproxies_environ": 483, "91447": 483, "91456": 483, "47231": 483, "39064": 483, "41287": 483, "32547": 483, "35540": 483, "47063": 483, "47025": 483, "46951": 483, "42777": 483, "46755": 483, "45393": 483, "46642": 483, "46364": 483, "28249": 483, "46197": 483, "45924": 483, "44173": 483, "42627": 483, "42047": 483, "dragonfli": 483, "carlier": 483, "14243": 483, "41246": 483, "iocpproactor": 483, "39264": 483, "38693": 483, "38267": 483, "34828": 483, "32990": 483, "26253": 483, "85525": 483, "86404": 483, "spinx": 483, "97741": 483, "96432": 483, "96098": 483, "95957": 483, "95588": 483, "unfix": 483, "91207": 483, "chm": 483, "htmlhelp": 483, "95454": 483, "documenti": 483, "shea": 483, "95451": 483, "95415": 483, "94321": 483, "86128": 483, "61162": 483, "87260": 483, "86986": 483, "88831": 483, "86438": 483, "93031": 483, "92240": 483, "47161": 483, "40838": 483, "43689": 483, "38056": 483, "overhaul": 483, "13553": 483, "95027": 483, "96624": 483, "test_dotted_but_module_not_load": 483, "95243": 483, "testsocknam": 483, "burton": 483, "95573": 483, "test_ssl": 483, "fb11063974": 483, "fantix": 483, "95280": 483, "test_get_ciph": 483, "pfs": 483, "95212": 483, "test_shared_memory_recr": 483, "95218": 483, "94675": 483, "exponent": 483, "rjsmin": 483, "91330": 483, "94208": 483, "94315": 483, "dac": 483, "54781": 483, "test_tk": 483, "test_tkint": 483, "test_ttk_guion": 483, "test_ttk": 483, "93839": 483, "test_ctyp": 483, "93951": 483, "test_bdb": 483, "statetestcas": 483, "test_skip": 483, "93957": 483, "test_venv": 483, "ensurepiptest": 483, "test_with_pip": 483, "93884": 483, "93852": 483, "test_socketserv": 483, "run_test": 483, "hostrunn": 483, "93616": 483, "test_modulefind": 483, "modulefindertest": 483, "93575": 483, "test_unicod": 483, "test_raisememerror": 483, "57539": 483, "openat2": 483, "resolve_beneath": 483, "89858": 483, "test_emb": 483, "test_zipimport": 483, "test_py_compil": 483, "_test_multiprocess": 483, "92670": 483, "testcopi": 483, "test_copyfile_nonexistent_dir": 483, "92514": 483, "basictestrunn": 483, "47016": 483, "96761": 483, "96883": 483, "85936": 483, "96729": 483, "buildreleas": 483, "96269": 483, "module_dep": 483, "exportsym": 483, "95973": 483, "dsymutil": 483, "93744": 483, "maincc": 483, "94801": 483, "94802": 483, "95145": 483, "wasix": 483, "95174": 483, "netdb": 483, "94847": 483, "94841": 483, "1932": 483, "zlib_cflag": 483, "zlib_lib": 483, "94773": 483, "94682": 483, "1q": 483, "termcap": 483, "tinfo": 483, "_dbm": 483, "94404": 483, "94280": 483, "pegen": 483, "93584": 483, "93491": 483, "69093": 483, "_sqlite3": 483, "93202": 483, "34449": 483, "osipov": 483, "98360": 483, "98414": 483, "97728": 483, "90989": 483, "97649": 483, "96965": 483, "96577": 483, "96559": 483, "94781": 483, "89545": 483, "wmi": 483, "95733": 483, "95656": 483, "95587": 483, "94399": 483, "95445": 483, "95359": 483, "95285": 483, "90844": 483, "94772": 483, "94018": 483, "93824": 483, "43414": 483, "92817": 483, "92984": 483, "92841": 483, "46907": 483, "91061": 483, "42658": 483, "38704": 483, "97897": 483, "97527": 483, "2288": 483, "65802": 483, "95511": 483, "95471": 483, "95411": 483, "89610": 483, "68686": 483, "ptag": 483, "eptag": 483, "95853": 483, "wasm_build": 483, "emsdk": 483, "95731": 483, "check_modul": 483, "94538": 483, "94430": 483, "86087": 483, "parseent": 483, "95756": 483, "96512": 483, "92678": 483, "94930": 483, "94731": 483, "wold": 483, "wzero": 483, "91321": 483, "91731": 483, "89546": 483, "93442": 483, "_py_cast_impl": 483, "_py_cast": 483, "93466": 483, "92898": 483, "serg": 483, "guelton": 483, "93103": 483, "92913": 483, "92781": 483, "c90": 483, "92193": 483, "59121": 483, "45383": 483, "92345": 483, "43857": 483, "92245": 483, "11a7": 483, "92203": 483, "91173": 483, "92114": 483, "92112": 483, "92063": 483, "precall_method_descriptor_fast_with_keyword": 483, "92031": 483, "_pycode_quicken": 483, "92036": 483, "92032": 483, "91869": 483, "91603": 483, "89373": 483, "91632": 483, "generic_alias_iter": 483, "encodingmap": 483, "91636": 483, "91625": 483, "78607": 483, "lltrace": 483, "__ltrace__": 483, "91576": 483, "89279": 483, "91502": 483, "_pyframe_isentryfram": 483, "91266": 483, "91479": 483, "__note__": 483, "46055": 483, "xinhang": 483, "91462": 483, "91421": 483, "_py_decodeutf8ex": 483, "91428": 483, "_pyopcode_opnam": 483, "47120": 483, "45317": 483, "47197": 483, "mishandl": 483, "47177": 483, "prev_instr": 483, "46961": 483, "46962": 483, "testcapi": 483, "recursinginfinitelyerror": 483, "46942": 483, "46764": 483, "43464": 483, "46721": 483, "46509": 483, "chase": 483, "46045": 483, "36819": 483, "34093": 483, "flag_ref": 483, "92356": 483, "92301": 483, "close_rang": 483, "67248": 483, "92210": 483, "cinder": 483, "92118": 483, "90887": 483, "copyfile_stat": 483, "copyfile_acl": 483, "copyfile_xattr": 483, "91215": 483, "92128": 483, "92049": 483, "92062": 483, "88089": 483, "91996": 483, "91984": 483, "test_argpars": 483, "91952": 483, "91954": 483, "47029": 483, "91928": 483, "91401": 483, "64783": 483, "sigrtmin": 483, "sigrtmax": 483, "91910": 483, "91832": 483, "91821": 483, "test_from_tupl": 483, "test_decim": 483, "91217": 483, "90623": 483, "91734": 483, "91700": 483, "91231": 483, "91621": 483, "90568": 483, "91670": 483, "91616": 483, "47256": 483, "823": 483, "91595": 483, "write_repr": 483, "yu": 483, "liu": 483, "74166": 483, "91575": 483, "89022": 483, "sqlite_misus": 483, "91526": 483, "91276": 483, "47000": 483, "91230": 483, "47260": 483, "seccomp": 483, "47227": 483, "47211": 483, "47135": 483, "43323": 483, "46681": 483, "45100": 483, "44807": 483, "46787": 483, "46720": 483, "par": 483, "46696": 483, "46053": 483, "45639": 483, "avif": 483, "46285": 483, "44791": 483, "46547": 483, "46415": 483, "46075": 483, "45995": 483, "26175": 483, "45138": 483, "40318": 483, "44863": 483, "44587": 483, "43827": 483, "43218": 483, "rodrigu": 483, "38435": 483, "42066": 483, "iman": 483, "kermani": 483, "40617": 483, "40676": 483, "39716": 483, "36073": 483, "kawashima": 483, "91888": 483, "91783": 483, "91547": 483, "91298": 483, "44347": 483, "36329": 483, "htmlview": 483, "47189": 483, "38668": 483, "47115": 483, "26792": 483, "brezovski": 483, "92169": 483, "import_deprec": 483, "91904": 483, "pythonregrtest_unicode_guard": 483, "91752": 483, "testfreez": 483, "91607": 483, "40280": 483, "47109": 483, "macholib": 483, "29890": 483, "louisom": 483, "89452": 483, "47103": 483, "pginstrument": 483, "47239": 483, "46785": 483, "win32_xstat_impl": 483, "40859": 483, "91583": 483, "generate_re_casefix": 483, "91551": 483, "gitlab": 483, "91320": 483, "reinterpret_cast": 483, "static_cast": 483, "80527": 483, "91768": 483, "91020": 483, "47169": 483, "47212": 483, "matthieu": 483, "dartiailh": 483, "47186": 483, "jump_if_not_eg_match": 483, "47176": 483, "py_emscriptensignalbuff": 483, "sharedarraybuff": 483, "py_emscripten_signal_handl": 483, "47182": 483, "47162": 483, "py_call_trampolin": 483, "46775": 483, "47129": 483, "47117": 483, "47127": 483, "42197": 483, "47070": 483, "array_inplace_repeat": 483, "_pybytes_repeat": 483, "47053": 483, "binary_op_inplace_add_unicod": 483, "47045": 483, "46968": 483, "auxv": 483, "46329": 483, "47012": 483, "47009": 483, "47005": 483, "bytearray_repeat": 483, "bytearray_irepeat": 483, "46829": 483, "46993": 483, "39829": 483, "46944": 483, "46881": 483, "46838": 483, "43721": 483, "47208": 483, "ctypes_max_argcount": 483, "23689": 483, "47167": 483, "47151": 483, "4833": 483, "27929": 483, "14265": 483, "39622": 483, "47101": 483, "ossl": 483, "47099": 483, "open_ftp": 483, "42885": 483, "23691": 483, "47067": 483, "42369": 483, "_sharedfil": 483, "38256": 483, "4gib": 483, "odditi": 483, "39394": 483, "47062": 483, "46382": 483, "ari": 483, "bovenberg": 483, "47057": 483, "fastcal": 483, "47039": 483, "2604": 483, "45150": 483, "34861": 483, "45997": 483, "aquir": 483, "43253": 483, "fdset": 483, "47004": 483, "46998": 483, "46995": 483, "46994": 483, "46981": 483, "46985": 483, "getauxv": 483, "at_minsigstksz": 483, "amx_til": 483, "sapphir": 483, "xeon": 483, "isa": 483, "46955": 483, "zabka": 483, "23325": 483, "46932": 483, "46933": 483, "464471": 483, "tvrtkovi": 483, "46644": 483, "typeform": 483, "46581": 483, "46557": 483, "41370": 483, "26120": 483, "46480": 483, "46421": 483, "22859": 483, "46170": 483, "40296": 483, "20392": 483, "46030": 483, "44439": 483, "45171": 483, "24959": 483, "44859": 483, "44493": 483, "sockaddr_un": 483, "33178": 483, "43352": 483, "45099": 483, "47126": 483, "676": 483, "47040": 483, "compatibl": 483, "46033": 483, "45790": 483, "42340": 483, "41233": 483, "yyyyyyyan": 483, "orest": 483, "47205": 483, "46126": 483, "47104": 483, "47037": 483, "4y": 483, "46587": 483, "47015": 483, "main_modul": 483, "side_modul": 483, "46023": 483, "wasm64": 483, "47032": 483, "47024": 483, "1n": 483, "46973": 483, "45774": 483, "47194": 483, "25032": 483, "47171": 483, "46566": 483, "47086": 483, "44549": 483, "3189": 483, "12900": 483, "46948": 483, "26488": 483, "46890": 483, "46850": 483, "_pyeval_calltrac": 483, "_pyeval_getcoroutineorigintrackingdepth": 483, "_pyeval_getasyncgenfirstit": 483, "_pyeval_getasyncgenfin": 483, "_pyeval_setasyncgenfirstit": 483, "_pyeval_setasyncgenfin": 483, "46987": 483, "_pysys_getobjectid": 483, "_pysys_setobjectid": 483, "46940": 483, "46927": 483, "46921": 483, "46903": 483, "11alpha": 483, "46891": 483, "test_float": 483, "46712": 483, "46430": 483, "45107": 483, "44337": 483, "46729": 483, "45885": 483, "46794": 483, "46823": 483, "load_fast__load_attr_instance_valu": 483, "46820": 483, "1not": 483, "46808": 483, "precall_funct": 483, "precall_method": 483, "46762": 483, "46730": 483, "46724": 483, "46732": 483, "46072": 483, "46707": 483, "46323": 483, "45923": 483, "46702": 483, "46675": 483, "va_end": 483, "_hashopenssl": 483, "46615": 483, "setobject": 483, "30496": 483, "25707": 483, "46877": 483, "46848": 483, "46736": 483, "44886": 483, "46827": 483, "46811": 483, "46252": 483, "46784": 483, "46786": 483, "wbr": 483, "39327": 483, "virtualbox": 483, "45390": 483, "46756": 483, "46737": 483, "46752": 483, "trio": 483, "nurseri": 483, "46333": 483, "46643": 483, "45863": 483, "unarchiv": 483, "46066": 483, "46676": 483, "_argtypes_": 483, "46672": 483, "46655": 483, "45948": 483, "discrep": 483, "46626": 483, "ip_bind_address_no_port": 483, "46521": 483, "46571": 483, "46400": 483, "46556": 483, "46522": 483, "46475": 483, "46246": 483, "deprecatedlist": 483, "46232": 483, "46195": 483, "31369": 483, "45898": 483, "ffi_type_": 483, "decad": 483, "44953": 483, "44289": 483, "44011": 483, "41086": 483, "methodwrapp": 483, "14156": 483, "42238": 483, "46913": 483, "test_faulthandl": 483, "test_sigfp": 483, "faulthandler_sigfp": 483, "46760": 483, "test_di": 483, "46708": 483, "46678": 483, "46623": 483, "test_pair": 483, "test_speech128": 483, "test_zlib": 483, "s390x": 483, "46860": 483, "__builtin_nan": 483, "kb": 483, "setr": 483, "gu": 483, "cound": 483, "46744": 483, "46567": 483, "46638": 483, "46630": 483, "46748": 483, "stdbool": 483, "46836": 483, "pycore_fram": 483, "pybuff": 483, "conflit": 483, "accesss": 483, "45773": 483, "46564": 483, "46458": 483, "46527": 483, "46528": 483, "precall_funt": 483, "46503": 483, "46431": 483, "46476": 483, "46481": 483, "46417": 483, "add_subclass": 483, "43683": 483, "46407": 483, "vivian": 483, "46409": 483, "46406": 483, "46383": 483, "module_fre": 483, "46361": 483, "46161": 483, "46028": 483, "46091": 483, "44024": 483, "46624": 483, "46591": 483, "clickabl": 483, "46565": 483, "46553": 483, "46544": 483, "uspac": 483, "46487": 483, "45162": 483, "46539": 483, "46510": 483, "46491": 483, "46436": 483, "41403": 483, "46474": 483, "46470": 483, "_remove_dups_flatten": 483, "46469": 483, "41906": 483, "46422": 483, "46434": 483, "43869": 483, "46414": 483, "46316": 483, "29688": 483, "43012": 483, "_accessor": 483, "terrain": 483, "46258": 483, "46242": 483, "_member_names_": 483, "43118": 483, "26552": 483, "21987": 483, "46124": 483, "46103": 483, "46080": 483, "fontein": 483, "46463": 483, "escape4chm": 483, "43478": 483, "46616": 483, "test_window": 483, "44359": 483, "test_ftplib": 483, "46600": 483, "test_pycfunct": 483, "46542": 483, "test_lib2to3": 483, "46576": 483, "test_peg_gener": 483, "test_json": 483, "infinite_recurs": 483, "13886": 483, "test_builtin": 483, "requires_fork": 483, "requires_subprocess": 483, "46602": 483, "conftest": 483, "38472": 483, "46513": 483, "ac_c_char_unsign": 483, "__char_unsigned__": 483, "46471": 483, "46443": 483, "46429": 483, "45925": 483, "43112": 483, "46362": 483, "com1": 483, "lpt1": 483, "45296": 483, "_py_getallocatedblock": 483, "_pyobject_debugmallocstat": 483, "46433": 483, "_pytype_getmodulebydef": 483, "14916": 483, "46070": 483, "46347": 483, "46339": 483, "46331": 483, "46314": 483, "11a4": 483, "46289": 483, "46297": 483, "bootup": 483, "derzsi": 483, "niel": 483, "46237": 483, "46263": 483, "use_frozen_modul": 483, "46006": 483, "_pyunicode_equaltoasciiid": 483, "update_slot": 483, "46208": 483, "46240": 483, "46009": 483, "46235": 483, "46221": 483, "46202": 483, "pop_except_and_rerais": 483, "46085": 483, "pylong_bas": 483, "46110": 483, "46107": 483, "44525": 483, "call_method_kw": 483, "call_no_kw": 483, "call_kw": 483, "46039": 483, "45635": 483, "_pyerr_display": 483, "46054": 483, "46042": 483, "46049": 483, "46048": 483, "37971": 483, "46031": 483, "45654": 483, "46025": 483, "46000": 483, "42918": 483, "45953": 483, "43413": 483, "46342": 483, "46307": 483, "46306": 483, "46244": 483, "46278": 483, "call_": 483, "46269": 483, "46266": 483, "46257": 483, "41011": 483, "46239": 483, "46238": 483, "46222": 483, "46176": 483, "43424": 483, "45321": 483, "46125": 483, "46118": 483, "37578": 483, "20369": 483, "46105": 483, "44893": 483, "22815": 483, "22047": 483, "26952": 483, "45615": 483, "16594": 483, "allow_reuse_port": 483, "27718": 483, "46032": 483, "27062": 483, "46018": 483, "46016": 483, "45755": 483, "45874": 483, "25066": 483, "45643": 483, "46196": 483, "46120": 483, "46109": 483, "19737": 483, "46296": 483, "_use_args_": 483, "_member_type_": 483, "46205": 483, "runtest_mp": 483, "jemalloc": 483, "46262": 483, "46150": 483, "fakenam": 483, "posixpathtest": 483, "test_expandus": 483, "46129": 483, "23819": 483, "46114": 483, "0xmnn00pp0l": 483, "44133": 483, "46315": 483, "have_featur": 483, "45723": 483, "multiarch": 483, "46106": 483, "1m": 483, "46088": 483, "asset": 483, "45949": 483, "freeze_modul": 483, "46217": 483, "40477": 483, "46236": 483, "46140": 483, "45855": 483, "46004": 483, "_pyerr_chainstackitem": 483, "45915": 483, "is_valid_fd": 483, "f_getfd": 483, "44530": 483, "42268": 483, "45727": 483, "45786": 483, "45614": 483, "45813": 483, "45811": 483, "45848": 483, "45709": 483, "45829": 483, "45826": 483, "45822": 483, "45820": 483, "45636": 483, "42540": 483, "45738": 483, "45753": 483, "45764": 483, "45609": 483, "45582": 483, "45450": 483, "27946": 483, "13236": 483, "37658": 483, "45876": 483, "44649": 483, "45803": 483, "45831": 483, "41735": 483, "45235": 483, "45754": 483, "11a2": 483, "sqlite_limit_length": 483, "45766": 483, "45765": 483, "45757": 483, "45644": 483, "wessel": 483, "45703": 483, "45535": 483, "45664": 483, "45663": 483, "45662": 483, "43137": 483, "gio": 483, "45514": 483, "45507": 483, "45359": 483, "44733": 483, "28806": 483, "43498": 483, "42158": 483, "notation3": 483, "trig": 483, "45840": 483, "45640": 483, "milchior": 483, "45788": 483, "45772": 483, "45392": 483, "45250": 483, "25381": 483, "43905": 483, "45695": 483, "19460": 483, "45835": 483, "test_queu": 483, "45783": 483, "45745": 483, "findleak": 483, "45701": 483, "test_functool": 483, "44035": 483, "45950": 483, "45881": 483, "sys_shutdown": 483, "ac_cv_func_shutdown": 483, "fork1": 483, "33393": 483, "45866": 483, "pygen": 483, "41498": 483, "sigset_t": 483, "yurchak": 483, "45886": 483, "45873": 483, "py_stdlib_mod": 483, "addext": 483, "save_env": 483, "restore_env": 483, "with_save_env": 483, "45573": 483, "45816": 483, "v143": 483, "45800": 483, "45798": 483, "45743": 483, "search_paths_first": 483, "xcode": 483, "stdc_header": 483, "ac_header_tim": 483, "45731": 483, "py_sqlite_enable_load_extens": 483, "ac_cache_check": 483, "45696": 483, "45561": 483, "smelli": 483, "45901": 483, "45616": 483, "45850": 483, "45732": 483, "45720": 483, "shlwapi": 483, "39026": 483, "45716": 483, "45688": 483, "_scproxi": 483, "45379": 483, "keyowrd": 483, "45530": 483, "45526": 483, "address_bit": 483, "30570": 483, "45521": 483, "45494": 483, "45445": 483, "45408": 483, "45385": 483, "descr_check": 483, "45367": 483, "binary_multiply_int": 483, "binary_multiply_float": 483, "21736": 483, "unfrozen": 483, "45020": 483, "orignam": 483, "45324": 483, "44050": 483, "call_function_builtin_o": 483, "call_function_builtin_fast": 483, "call_function_len": 483, "call_function_isinst": 483, "44511": 483, "43706": 483, "42064": 483, "45438": 483, "45574": 483, "print_escap": 483, "45581": 483, "45557": 483, "kreusada": 483, "42174": 483, "35673": 483, "_namespaceload": 483, "45515": 483, "45475": 483, "43787": 483, "45489": 483, "42222": 483, "45428": 483, "45467": 483, "45461": 483, "45239": 483, "45417": 483, "45249": 483, "45416": 483, "20028": 483, "44904": 483, "45406": 483, "getabsfil": 483, "45411": 483, "subtitl": 483, "srt": 483, "vtt": 483, "10716": 483, "serverhtmldoc": 483, "27580": 483, "45262": 483, "45386": 483, "45343": 483, "45328": 483, "45192": 483, "_infer_return_typ": 483, "kyungmin": 483, "45160": 483, "24444": 483, "40321": 483, "7538": 483, "jochem": 483, "schulenklopp": 483, "41374": 483, "35970": 483, "kuska": 483, "45726": 483, "45680": 483, "45618": 483, "olko": 483, "45655": 483, "45604": 483, "45516": 483, "45464": 483, "45449": 483, "20692": 483, "45678": 483, "45578": 483, "45668": 483, "45577": 483, "45566": 483, "test_frozen_pickl": 483, "test_dataclass": 483, "43592": 483, "39679": 483, "45410": 483, "45402": 483, "test_sundri": 483, "45403": 483, "test_si": 483, "test_stdlib_dir": 483, "45400": 483, "test_name_error_suggestions_do_not_trigger_for_too_many_loc": 483, "10572": 483, "test_sqlit": 483, "43158": 483, "_uuid": 483, "libuuid": 483, "45666": 483, "swprintf": 483, "45595": 483, "have_expat_config_h": 483, "use_pyexpat_capi": 483, "xml_poor_entropi": 483, "expat_config": 483, "45532": 483, "jeong": 483, "yunwon": 483, "45536": 483, "45221": 483, "45405": 483, "bohman": 483, "43652": 483, "45337": 483, "43851": 483, "sqlite_omit_autoinit": 483, "44828": 483, "culler": 483, "45495": 483, "29103": 483, "interpreteridobject": 483, "45395": 483, "44220": 483, "42278": 483, "44600": 483, "burkland": 483, "41180": 483, "44394": 483, "0340": 483, "43124": 483, "putcmd": 483, "44022": 483, "45061": 483, "24076": 483, "45167": 483, "45155": 483, "44219": 483, "44959": 483, "45121": 483, "44348": 483, "45123": 483, "1514420": 483, "41031": 483, "45083": 483, "34561": 483, "munro": 483, "powersort": 483, "45056": 483, "45012": 483, "fstatat": 483, "stani": 483, "skonieczni": 483, "45018": 483, "44963": 483, "anext_await": 483, "44962": 483, "44954": 483, "8p": 483, "1074": 483, "44947": 483, "44945": 483, "binary_add_adapt": 483, "binary_add_float": 483, "binary_add_int": 483, "binary_add_unicod": 483, "binary_add_unicode_inplace_fast": 483, "44929": 483, "44914": 483, "44698": 483, "44895": 483, "44900": 483, "44889": 483, "load_method_cach": 483, "load_method_modul": 483, "load_method_class": 483, "44890": 483, "44885": 483, "44878": 483, "44874": 483, "44872": 483, "33930": 483, "augusto": 483, "goulart": 483, "25782": 483, "44856": 483, "update_bas": 483, "44826": 483, "store_attr_slot": 483, "store_attr_split_key": 483, "store_attr_with_hint": 483, "44838": 483, "44821": 483, "44792": 483, "34013": 483, "44732": 483, "44725": 483, "_opcod": 483, "get_specialization_stat": 483, "44717": 483, "44653": 483, "44676": 483, "44633": 483, "44661": 483, "property_descr_set": 483, "44662": 483, "44655": 483, "44646": 483, "44636": 483, "44635": 483, "26280": 483, "binary_subscr_dict": 483, "44589": 483, "44606": 483, "42073": 483, "fastsearch": 483, "43895": 483, "dynload_shlib": 483, "levarag": 483, "44562": 483, "44553": 483, "44523": 483, "44483": 483, "44486": 483, "44472": 483, "ltrace": 483, "44297": 483, "44456": 483, "44409": 483, "44396": 483, "44376": 483, "44313": 483, "44338": 483, "load_global_modul": 483, "load_global_builtin": 483, "44368": 483, "44349": 483, "load_attr_slot": 483, "load_attr_split_key": 483, "load_attr_with_hint": 483, "load_attr_modul": 483, "44335": 483, "43693": 483, "44317": 483, "44304": 483, "43667": 483, "44232": 483, "winner": 483, "44201": 483, "co_fastlocalkind": 483, "44184": 483, "44187": 483, "44180": 483, "44168": 483, "44156": 483, "44143": 483, "44032": 483, "datastack": 483, "44114": 483, "dictkeys_revers": 483, "dictitems_revers": 483, "44110": 483, "branchless": 483, "43918": 483, "43879": 483, "17792": 483, "28146": 483, "11105": 483, "39091": 483, "noah": 483, "oxer": 483, "45371": 483, "unixccompil": 483, "45329": 483, "1596321": 483, "45274": 483, "45238": 483, "36674": 483, "45183": 483, "45234": 483, "45228": 483, "45225": 483, "genexpr": 483, "25169": 483, "20524": 483, "45168": 483, "35474": 483, "45166": 483, "20499": 483, "30856": 483, "45034": 483, "25894": 483, "45081": 483, "45075": 483, "format_fram": 483, "31299": 483, "41620": 483, "45021": 483, "43913": 483, "lesser": 483, "45030": 483, "45001": 483, "45010": 483, "__div__": 483, "39218": 483, "43613": 483, "37596": 483, "44955": 483, "39039": 483, "44935": 483, "44911": 483, "41322": 483, "44524": 483, "38956": 483, "44860": 483, "unicodencodeerror": 483, "44581": 483, "44849": 483, "44605": 483, "wherein": 483, "specialform": 483, "44839": 483, "44822": 483, "44801": 483, "44806": 483, "27275": 483, "44793": 483, "44784": 483, "44667": 483, "44771": 483, "pariti": 483, "44752": 483, "rcomplet": 483, "44747": 483, "44720": 483, "44704": 483, "44666": 483, "lzl": 483, "44690": 483, "binacii": 483, "42854": 483, "_sslsocket": 483, "44686": 483, "_import": 483, "44353": 483, "44682": 483, "44678": 483, "40897": 483, "44638": 483, "44648": 483, "44608": 483, "_flatten": 483, "44594": 483, "flight": 483, "42799": 483, "41928": 483, "44566": 483, "44558": 483, "41249": 483, "44554": 483, "34798": 483, "44539": 483, "44461": 483, "43625": 483, "44516": 483, "42892": 483, "44468": 483, "43977": 483, "44482": 483, "44404": 483, "41546": 483, "44458": 483, "buffer_block_s": 483, "lmza": 483, "44464": 483, "flake8": 483, "44446": 483, "44434": 483, "pthread_exit": 483, "libgcc_": 483, "42972": 483, "44422": 483, "37880": 483, "44389": 483, "27827": 483, "44395": 483, "34266": 483, "44362": 483, "44342": 483, "44356": 483, "44351": 483, "parse_makefil": 483, "44242": 483, "44246": 483, "43858": 483, "44260": 483, "44254": 483, "33693": 483, "44241": 483, "simplepath": 483, "44210": 483, "_meta": 483, "43643": 483, "27334": 483, "4928": 483, "44154": 483, "33433": 483, "44150": 483, "44142": 483, "44145": 483, "hmac_upd": 483, "44095": 483, "ds": 483, "congest": 483, "37788": 483, "44089": 483, "44081": 483, "44061": 483, "44059": 483, "serenityo": 483, "36515": 483, "44018": 483, "38352": 483, "44002": 483, "90s": 483, "43972": 483, "28528": 483, "checklin": 483, "43853": 483, "43666": 483, "wpar": 483, "fileset": 483, "bos": 483, "rte": 483, "mp64": 483, "odm": 483, "9988": 483, "43650": 483, "_unpack_zipfil": 483, "igor": 483, "bolshakov": 483, "43612": 483, "43392": 483, "_find_and_load": 483, "43318": 483, "43232": 483, "30077": 483, "sowt": 483, "42971": 483, "43086": 483, "scrict_mod": 483, "43024": 483, "42862": 483, "41818": 483, "40497": 483, "37449": 483, "40956": 483, "41730": 483, "20684": 483, "_signature_get_bound_param": 483, "41402": 483, "32695": 483, "24391": 483, "40563": 483, "henri": 483, "aud": 483, "oud": 483, "34990": 483, "y2k38": 483, "39549": 483, "37022": 483, "38840": 483, "test___all__": 483, "39359": 483, "38741": 483, "38415": 483, "30256": 483, "manager_own": 483, "autoproxi": 483, "27513": 483, "26228": 483, "33349": 483, "29298": 483, "45216": 483, "45024": 483, "44957": 483, "16580": 483, "44903": 483, "othergui": 483, "33479": 483, "36700": 483, "44740": 483, "44693": 483, "35183": 483, "30511": 483, "relianc": 483, "44561": 483, "44651": 483, "42958": 483, "44631": 483, "_environ": 483, "44613": 483, "44544": 483, "38062": 483, "40620": 483, "controlflow": 483, "43066": 483, "39452": 483, "broaden": 483, "13814": 483, "27752": 483, "44453": 483, "44392": 483, "44322": 483, "44195": 483, "traversableread": 483, "41963": 483, "44072": 483, "43558": 483, "44025": 483, "41706": 483, "41621": 483, "41576": 483, "21760": 483, "39498": 483, "40173": 483, "45280": 483, "45269": 483, "c_make_encod": 483, "45128": 483, "45209": 483, "_testsharedmemori": 483, "test_shared_memory_cleaned_after_process_termin": 483, "45185": 483, "testenumer": 483, "45195": 483, "test_readlin": 483, "test_nonascii": 483, "45156": 483, "45125": 483, "sharablelist": 483, "test_sysconfig": 483, "test_user_similar": 483, "45052": 483, "withprocessestestsharedmemori": 483, "test_shared_memory_bas": 483, "sms": 483, "sms2": 483, "unskip": 483, "45042": 483, "hashlib_help": 483, "requires_hashdigest": 483, "25130": 483, "45011": 483, "44949": 483, "44891": 483, "44852": 483, "wholesal": 483, "40928": 483, "spew": 483, "44734": 483, "44708": 483, "42095": 483, "interop": 483, "plutil": 483, "44647": 483, "44515": 483, "44287": 483, "test_popen": 483, "test_windows_util": 483, "militari": 483, "battl": 483, "44451": 483, "test_metadata_api": 483, "apitest": 483, "test_entry_points_by_index": 483, "44363": 483, "44364": 483, "43921": 483, "test_wrong_cert_tls13": 483, "test_pha_required_nocert": 483, "44131": 483, "test_frozenmain": 483, "31904": 483, "test_file_not_exist": 483, "42083": 483, "35753": 483, "unwrapp": 483, "dictproxi": 483, "45220": 483, "defaultwindowssdkvers": 483, "commandlin": 483, "45188": 483, "45163": 483, "haiku": 483, "45067": 483, "extended_color_cont": 483, "island": 483, "t20170401": 483, "20170401": 483, "45019": 483, "44535": 483, "43298": 483, "44381": 483, "enablecontrolflowguard": 483, "41282": 483, "45375": 483, "unnormalis": 483, "45022": 483, "45007": 483, "44848": 483, "44572": 483, "44582": 483, "41299": 483, "jitter": 483, "42686": 483, "40263": 483, "issue26903": 483, "34602": 483, "quadrupl": 483, "44689": 483, "43109": 483, "34932": 483, "shane": 483, "harvey": 483, "45193": 483, "40128": 483, "update_idletask": 483, "41611": 483, "autocompletewindow": 483, "winconfig_ev": 483, "44026": 483, "44786": 483, "44967": 483, "44978": 483, "43425": 483, "test2to3": 483, "44074": 483, "20291": 483, "44687": 483, "45116": 483, "45094": 483, "44751": 483, "42747": 483, "py_tpflags_have_am_send": 483, "44441": 483, "_pytrash_deposit_object": 483, "_pytrash_destroy_chain": 483, "_pytrash_thread_deposit_object": 483, "_pytrash_thread_destroy_chain": 483, "_tstate": 483, "trash_delete_nest": 483, "40939": 483, "pyparser_": 483, "44378": 483, "44113": 483, "44094": 483, "pyerr_setfromerrnowithunicodefilenam": 483, "pyerr_setfromwindowserrwithunicodefilenam": 483, "pyerr_setexcfromwindowserrwithunicodefilenam": 483, "pyunicodeencodeerror_cr": 483, "pyunicodetranslateerror_cr": 483, "43434": 483, "43472": 483, "43362": 483, "43756": 483, "43075": 483, "42800": 483, "37363": 483, "43892": 483, "43933": 483, "kweyword": 483, "43963": 483, "_signal": 483, "42739": 483, "pylinetable_initaddressrang": 483, "43754": 483, "consistut": 483, "38605": 483, "clvxxpq2t2lq5mp2y53vvqfcxywqjhkz": 483, "pile": 483, "43859": 483, "41323": 483, "43846": 483, "43798": 483, "43751": 483, "ait": 483, "42128": 483, "43105": 483, "42609": 483, "44015": 483, "25478": 483, "43733": 483, "43979": 483, "zwerschk": 483, "43993": 483, "43957": 483, "42904": 483, "43945": 483, "43937": 483, "43930": 483, "43907": 483, "43926": 483, "43607": 483, "43284": 483, "_syscmd_ver": 483, "43867": 483, "serve_cli": 483, "40443": 483, "43820": 483, "43680": 483, "41515": 483, "43776": 483, "42248": 483, "_missing__": 483, "43744": 483, "43772": 483, "43764": 483, "openssl_api_compat": 483, "make_ssl_data": 483, "25264": 483, "43780": 483, "43731": 483, "38659": 483, "simple_enum": 483, "test_simple_enum": 483, "43752": 483, "24723": 483, "43655": 483, "43723": 483, "2135": 483, "43534": 483, "43522": 483, "hostflag": 483, "ssl_ctx": 483, "8978": 483, "43296": 483, "sqlite3_value_blob": 483, "sqlite_nomem": 483, "43312": 483, "43265": 483, "43176": 483, "39529": 483, "18369": 483, "privatekey": 483, "36470": 483, "x509_v_flag_partial_chain": 483, "35114": 483, "39899": 483, "36076": 483, "33731": 483, "32745": 483, "43987": 483, "43959": 483, "43938": 483, "43778": 483, "glossary_search": 483, "43739": 483, "43961": 483, "test_namer_rotator_inherit": 483, "43842": 483, "43843": 483, "env_chang": 483, "ccach": 483, "tlsv1_alert_internal_error": 483, "43567": 483, "35306": 483, "43538": 483, "38822": 483, "26227": 483, "40432": 483, "43745": 483, "1k": 483, "mislabel": 483, "1i": 483, "43492": 483, "30555": 483, "42119": 483, "sdks": 483, "iossupport": 483, "43568": 483, "44009": 483, "rosetta": 483, "42235": 483, "sidebar": 483, "43981": 483, "test_sidebar": 483, "test_squeez": 483, "43774": 483, "43962": 483, "_pyinterpreterstate_idincref": 483, "_pyinterpreterstate_idinitref": 483, "id_refcount": 483, "get_curr": 483, "interpreterid": 483, "28254": 483, "42988": 483, "schw": 483, "rer": 483, "43285": 483, "27129": 483, "43660": 483, "43555": 483, "43517": 483, "misdetect": 483, "43497": 483, "39316": 483, "35883": 483, "43410": 483, "43406": 483, "43390": 483, "sa_onstack": 483, "friendlier": 483, "golang": 483, "cgo": 483, "37448": 483, "address_in_rang": 483, "ultra": 483, "unsanitari": 483, "_py_no_sanitize_address": 483, "_py_no_sanitize_thread": 483, "_py_no_sanitize_memori": 483, "dwith_pymalloc_radix_tre": 483, "29988": 483, "43433": 483, "35930": 483, "41369": 483, "43422": 483, "41324": 483, "43577": 483, "43542": 483, "heic": 483, "heif": 483, "43510": 483, "43521": 483, "41361": 483, "43423": 483, "27820": 483, "_always_": 483, "43445": 483, "43245": 483, "29982": 483, "43428": 483, "43332": 483, "43420": 483, "43399": 483, "43369": 483, "sqlite3_column_text": 483, "sqlite3_column_blob": 483, "43368": 483, "24562": 483, "mariusz": 483, "felisiak": 483, "42129": 483, "43295": 483, "43125": 483, "base64mim": 483, "43084": 483, "42994": 483, "opus": 483, "3gpp": 483, "3gpp2": 483, "42782": 483, "membernam": 483, "26053": 483, "40701": 483, "39342": 483, "x509_v_flag_allow_proxy_cert": 483, "man1": 483, "man7": 483, "jab": 483, "lordmauv": 483, "justin39": 483, "43199": 483, "43407": 483, "43354": 483, "41933": 483, "37945": 483, "test_getsetlocale_issue1813": 483, "test_local": 483, "41561": 483, "43179": 483, "alignof_x": 483, "sizeof_x": 483, "43631": 483, "43617": 483, "43372": 483, "_freeze_importlib": 483, "42246": 483, "877df851": 483, "test_frozent": 483, "43440": 483, "42225": 483, "43541": 483, "poison": 483, "43321": 483, "43121": 483, "42819": 483, "x1b": 483, "2004h": 483, "42808": 483, "42217": 483, "co_linet": 483, "40692": 483, "43316": 483, "43317": 483, "43146": 483, "43260": 483, "43258": 483, "needless": 483, "43251": 483, "sqlite3_column_nam": 483, "23838": 483, "43172": 483, "irreconcil": 483, "43163": 483, "43162": 483, "43102": 483, "42960": 483, "42151": 483, "_elementre": 483, "29753": 483, "shrank": 483, "27646": 483, "43288": 483, "43174": 483, "13501": 483, "39448": 483, "43155": 483, "41837": 483, "43283": 483, "43278": 483, "43270": 483, "_pyerr_occur": 483, "43239": 483, "fvisibl": 483, "43181": 483, "42938": 483, "pyeval_": 483, "_pyeval_evalcodewithnam": 483, "38631": 483, "42986": 483, "42924": 483, "42882": 483, "_pyunicode_fromid": 483, "_py_identifi": 483, "unicode_id": 483, "next_index": 483, "42827": 483, "42823": 483, "41994": 483, "27772": 483, "43108": 483, "43077": 483, "43014": 483, "42323": 483, "42944": 483, "42934": 483, "42931": 483, "38250": 483, "42877": 483, "42923": 483, "42848": 483, "42901": 483, "_proto_memb": 483, "42780": 483, "42866": 483, "getcodec": 483, "42846": 483, "_codecs_cn": 483, "_codecs_hk": 483, "_codecs_iso2022": 483, "_codecs_jp": 483, "_codecs_kr": 483, "_codecs_tw": 483, "42851": 483, "42834": 483, "41748": 483, "dubost": 483, "42384": 483, "42383": 483, "42005": 483, "41604": 483, "user_ptr": 483, "set_panel_userptr": 483, "41149": 483, "stratford": 483, "33289": 483, "40304": 483, "bori": 483, "verkhovskiy": 483, "42811": 483, "yair": 483, "frid": 483, "40823": 483, "checktracecallbackcont": 483, "43031": 483, "36143": 483, "42874": 483, "add_cross_compiling_path": 483, "42584": 483, "42504": 483, "33065": 483, "23544": 483, "32631": 483, "42979": 483, "43030": 483, "42814": 483, "genericaliasobject": 483, "42806": 483, "40631": 483, "27794": 483, "42745": 483, "32381": 483, "30858": 483, "42615": 483, "resulttyp": 483, "40137": 483, "42008": 483, "40521": 483, "42257": 483, "42772": 483, "42759": 483, "42756": 483, "23328": 483, "envar": 483, "42740": 483, "42655": 483, "42727": 483, "38308": 483, "42721": 483, "nodefaultroot": 483, "tempor": 483, "25246": 483, "35728": 483, "15303": 483, "42681": 483, "42685": 483, "37961": 483, "42630": 483, "_run_exitfunc": 483, "42644": 483, "loge": 483, "36541": 483, "pgen2": 483, "42382": 483, "41877": 483, "autospect": 483, "auto_spec": 483, "set_spec": 483, "39717": 483, "42385": 483, "thread_stack_s": 483, "34750": 483, "_enumdict": 483, "42517": 483, "42678": 483, "28964": 483, "42470": 483, "42388": 483, "34463": 483, "42163": 483, "42090": 483, "42059": 483, "41960": 483, "41907": 483, "41891": 483, "24792": 483, "41462": 483, "40219": 483, "labeledscal": 483, "37193": 483, "39068": 483, "brandon": 483, "stansburi": 483, "17140": 483, "34398": 483, "42794": 483, "test_nntplib": 483, "aioe": 483, "42641": 483, "test_select": 483, "_test_all_chown_common": 483, "42199": 483, "41443": 483, "41439": 483, "test_uuid": 483, "42692": 483, "__builtin_avail": 483, "42604": 483, "310d": 483, "42598": 483, "29076": 483, "42361": 483, "rc2": 483, "42726": 483, "42613": 483, "prope": 483, "42591": 483, "_py_fopen": 483, "_py_wfopen": 483, "_py_fopen_obj": 483, "42111": 483, "40052": 483, "40791": 483, "42576": 483, "42536": 483, "42500": 483, "42435": 483, "bytarray": 483, "41686": 483, "_pyos_sigintev": 483, "42381": 483, "42374": 483, "42349": 483, "42296": 483, "42332": 483, "42282": 483, "42266": 483, "42233": 483, "5054": 483, "run_cgi": 483, "http_accept": 483, "getallmatchinghead": 483, "42562": 483, "17735": 483, "findsourc": 483, "co_lineno": 483, "42116": 483, "42532": 483, "spec_arg": 483, "test_master_read": 483, "42487": 483, "42482": 483, "test_openpti": 483, "test_bas": 483, "15450": 483, "42406": 483, "whichmodul": 483, "42403": 483, "42375": 483, "37205": 483, "42328": 483, "42318": 483, "42350": 483, "42014": 483, "42237": 483, "illumo": 483, "42249": 483, "42236": 483, "41754": 483, "42183": 483, "42140": 483, "39825": 483, "platform_tag": 483, "cp38": 483, "41889": 483, "41861": 483, "40624": 483, "28850": 483, "_safe_repr": 483, "34215": 483, "12800": 483, "40968": 483, "40816": 483, "40550": 483, "39411": 483, "tentat": 483, "42153": 483, "41028": 483, "switcher": 483, "docsbuild": 483, "41473": 483, "bugzilla": 483, "redhat": 483, "show_bug": 483, "1866884": 483, "42553": 483, "test_call_lat": 483, "test_netrc": 483, "test_getaddrinfo_ipv6_scopeid_symbol": 483, "test_getnameinfo_ipv6_scopeid_symbol": 483, "test_test": 483, "test_mailcap": 483, "test_pip": 483, "40754": 483, "test_min_max_version_mismatch": 483, "libnet": 483, "detect_socket": 483, "42398": 483, "moveov": 483, "41617": 483, "pycore_bitutil": 483, "__builtin_bswap16": 483, "38823": 483, "ctypes_unicod": 483, "42087": 483, "40680": 483, "40998": 483, "42120": 483, "_copysign": 483, "38506": 483, "41116": 483, "unixxcompil": 483, "find_library_fil": 483, "42232": 483, "38443": 483, "42508": 483, "42426": 483, "searchengin": 483, "42415": 483, "42212": 483, "36310": 483, "_posixshmem": 483, "_queue": 483, "_pytrash_cond": 483, "42171": 483, "42085": 483, "42103": 483, "42051": 483, "42218": 483, "42214": 483, "42206": 483, "41796": 483, "42143": 483, "yonatan": 483, "41659": 483, "42150": 483, "42123": 483, "42030": 483, "41984": 483, "41993": 483, "41979": 483, "41902": 483, "41894": 483, "41435": 483, "35455": 483, "gethrvtim": 483, "kulik": 483, "26789": 483, "42146": 483, "uid_t": 483, "gid_t": 483, "41490": 483, "certifi": 483, "41052": 483, "42089": 483, "packagenotfounderror": 483, "41491": 483, "42065": 483, "charmap_decod": 483, "41966": 483, "dean": 483, "inwood": 483, "19270": 483, "28660": 483, "35823": 483, "42043": 483, "42021": 483, "39101": 483, "41976": 483, "triy": 483, "41943": 483, "41905": 483, "23706": 483, "41876": 483, "41831": 483, "41747": 483, "30681": 483, "toth": 483, "41586": 483, "16396": 483, "40592": 483, "40492": 483, "27321": 483, "38976": 483, "42061": 483, "41910": 483, "42010": 483, "41805": 483, "39693": 483, "39416": 483, "41739": 483, "test_race_between_set_target_and_flush": 483, "41970": 483, "41944": 483, "41306": 483, "scaletest": 483, "38439": 483, "38252": 483, "39107": 483, "41557": 483, "38324": 483, "41471": 483, "33987": 483, "40511": 483, "clover": 483, "42015": 483, "40423": 483, "41845": 483, "40422": 483, "_py_closerang": 483, "41986": 483, "41304": 483, "python3x": 483, "29778": 483, "15801": 483, "41162": 483, "15523": 483, "41004": 483, "39603": 483, "41909": 483, "_bisect": 483, "39934": 483, "41780": 483, "41690": 483, "_curses_panel": 483, "41681": 483, "41675": 483, "41670": 483, "41654": 483, "41631": 483, "_oper": 483, "1653741": 483, "41533": 483, "va_build_stack": 483, "do_mkstack": 483, "small_stack": 483, "41531": 483, "41525": 483, "_sha1": 483, "_md5": 483, "41431": 483, "41340": 483, "strdup": 483, "38156": 483, "pyos_stdioreadlin": 483, "41342": 483, "41295": 483, "41247": 483, "set_running_loop": 483, "41252": 483, "_servername_callback": 483, "41215": 483, "xlc": 483, "41218": 483, "41175": 483, "bytearrayobject": 483, "41094": 483, "39960": 483, "hackcheck": 483, "sneak": 483, "41084": 483, "41076": 483, "41056": 483, "41061": 483, "hashtabl": 483, "pypegen": 483, "pypars": 483, "35975": 483, "40636": 483, "40985": 483, "40958": 483, "40957": 483, "40950": 483, "40947": 483, "40847": 483, "threw": 483, "40889": 483, "40904": 483, "40903": 483, "40880": 483, "40883": 483, "40870": 483, "40854": 483, "40826": 483, "pyos_readlin": 483, "19468": 483, "nder": 483, "40780": 483, "38964": 483, "40750": 483, "40696": 483, "40679": 483, "29590": 483, "4022": 483, "_lzma": 483, "19569": 483, "_py_comp_diag_push": 483, "_py_comp_diag_ignore_depr_decl": 483, "_py_comp_diag_pop": 483, "26680": 483, "41900": 483, "41887": 483, "41773": 483, "41840": 483, "40564": 483, "40670": 483, "misindent": 483, "41833": 483, "41817": 483, "eventtyp": 483, "41815": 483, "mccormick": 483, "41517": 483, "39587": 483, "41789": 483, "32218": 483, "39651": 483, "mashal": 483, "_string": 483, "41732": 483, "41720": 483, "41696": 483, "41687": 483, "41662": 483, "39010": 483, "41638": 483, "41513": 483, "41609": 483, "39994": 483, "40782": 483, "41520": 483, "41528": 483, "41503": 483, "41497": 483, "41467": 483, "41425": 483, "41421": 483, "41316": 483, "41384": 483, "41317": 483, "41364": 483, "35328": 483, "virtual_env_prompt": 483, "41341": 483, "41344": 483, "41333": 483, "41288": 483, "newobj_ex": 483, "39017": 483, "20907": 483, "41273": 483, "_proactorreadpipetransport": 483, "41235": 483, "41207": 483, "distutilsexecerror": 483, "29727": 483, "39168": 483, "41194": 483, "41195": 483, "41193": 483, "41182": 483, "41161": 483, "40874": 483, "41138": 483, "31082": 483, "31938": 483, "41068": 483, "41058": 483, "find_funct": 483, "41048": 483, "41043": 483, "41025": 483, "41002": 483, "merri": 483, "40448": 483, "krzysztof": 483, "konopko": 483, "40924": 483, "devis": 483, "40955": 483, "40855": 483, "33689": 483, "40884": 483, "asaf": 483, "40876": 483, "40807": 483, "_maybe_compil": 483, "32604": 483, "39314": 483, "40834": 483, "with_xxsubinterpret": 483, "channel_send": 483, "40755": 483, "26407": 483, "39384": 483, "40777": 483, "pydatetime_isocalendardatetyp": 483, "38488": 483, "40767": 483, "wayland": 483, "wayland_display": 483, "attali": 483, "40795": 483, "16995": 483, "30008": 483, "30064": 483, "40759": 483, "40756": 483, "37129": 483, "40737": 483, "40726": 483, "40695": 483, "9216": 483, "evp": 483, "test_hashlib": 483, "test_smtplib": 483, "40614": 483, "40626": 483, "h5": 483, "hdf5": 483, "hdf": 483, "schwab": 483, "25920": 483, "201311": 483, "40671": 483, "40611": 483, "39881": 483, "13097": 483, "23082": 483, "40105": 483, "mazur": 483, "40084": 483, "31122": 483, "39728": 483, "39244": 483, "39040": 483, "35714": 483, "26543": 483, "12178": 483, "itay": 483, "elbirt": 483, "36290": 483, "33944": 483, "35078": 483, "29620": 483, "runtimeexcept": 483, "kernc": 483, "34226": 483, "content_length": 483, "duran": 483, "33660": 483, "28557": 483, "rawio": 483, "41774": 483, "35293": 483, "removedinsphinx40warn": 483, "37149": 483, "shipman": 483, "nmt": 483, "41726": 483, "41624": 483, "40204": 483, "c_allow_pre_v3": 483, "c_warn_on_allowed_pre_v3": 483, "41045": 483, "41314": 483, "40979": 483, "40552": 483, "39883": 483, "bsd0": 483, "37703": 483, "41939": 483, "test_license_exists_at_url": 483, "41731": 483, "test_cmd_line_script": 483, "41602": 483, "41521": 483, "41477": 483, "test_genericalia": 483, "41085": 483, "41069": 483, "38377": 483, "41009": 483, "require_": 483, "_version": 483, "41003": 483, "test_copyreg": 483, "pickletest": 483, "40964": 483, "cmu": 483, "40927": 483, "test_binhex": 483, "38169": 483, "34401": 483, "38249": 483, "pin": 483, "40684": 483, "40683": 483, "41744": 483, "41627": 483, "41526": 483, "41492": 483, "uac": 483, "40948": 483, "41412": 483, "ucrt": 483, "40741": 483, "41142": 483, "41074": 483, "41039": 483, "40164": 483, "39631": 483, "40677": 483, "37556": 483, "39580": 483, "rick": 483, "heil": 483, "41005": 483, "41775": 483, "35764": 483, "40181": 483, "41468": 483, "41373": 483, "41300": 483, "41152": 483, "41144": 483, "39885": 483, "40723": 483, "recursion_crit": 483, "41689": 483, "41524": 483, "40989": 483, "pyerror": 483, "40910": 483, "40724": 483, "_pyeval_evalcod": 483, "40703": 483, "py_tp_getset": 483, "39583": 483, "40501": 483, "rpcrt4": 483, "40663": 483, "40596": 483, "40593": 483, "40585": 483, "40566": 483, "40502": 483, "n_col_offset": 483, "40527": 483, "40523": 483, "40246": 483, "d00": 483, "fca": 483, "40417": 483, "rouhani": 483, "40408": 483, "29587": 483, "40328": 483, "40228": 483, "38880": 483, "40662": 483, "40665": 483, "40536": 483, "40637": 483, "blake1": 483, "alpha2": 483, "40607": 483, "skurikhin": 483, "40612": 483, "40597": 483, "40571": 483, "40503": 483, "40397": 483, "40549": 483, "31033": 483, "40541": 483, "40515": 483, "40504": 483, "40559": 483, "40480": 483, "futil": 483, "40457": 483, "40355": 483, "curti": 483, "40459": 483, "39435": 483, "39305": 483, "_nntpbase": 483, "32494": 483, "gdbm_count": 483, "40453": 483, "40394": 483, "39995": 483, "_threadwakeup": 483, "39966": 483, "25597": 483, "40389": 483, "40273": 483, "39075": 483, "40025": 483, "onstott": 483, "39058": 483, "40561": 483, "40499": 483, "39705": 483, "40055": 483, "40436": 483, "pythoninfo": 483, "40653": 483, "_dirnamew": 483, "have_symlink": 483, "40514": 483, "40650": 483, "winsock2": 483, "40458": 483, "39148": 483, "35569": 483, "40431": 483, "40163": 483, "pycfunction_checkexact": 483, "pycmethod_checkexact": 483, "pycmethod_check": 483, "40545": 483, "_pyerr_gettopmostexcept": 483, "40412": 483, "nullifi": 483, "inittab_copi": 483, "szorc": 483, "40121": 483, "39073": 483, "39503": 483, "8492": 483, "schwager": 483, "40313": 483, "40267": 483, "39522": 483, "40082": 483, "pyscannerobject": 483, "40141": 483, "40067": 483, "henriqu": 483, "silva": 483, "20526": 483, "40020": 483, "parsetok": 483, "codepath": 483, "32894": 483, "40398": 483, "40396": 483, "_sc_open_max": 483, "fdescf": 483, "emast": 483, "cem": 483, "kevan": 483, "koob": 483, "242274": 483, "40138": 483, "39942": 483, "40275": 483, "40330": 483, "40148": 483, "40325": 483, "40287": 483, "40290": 483, "40282": 483, "40277": 483, "40270": 483, "json_object": 483, "29255": 483, "40260": 483, "40234": 483, "40091": 483, "_at_fork_reinit": 483, "40149": 483, "_abc_data": 483, "40196": 483, "40190": 483, "_sc_aix_realmem": 483, "36517": 483, "40126": 483, "40108": 483, "incorr": 483, "40089": 483, "_after_fork": 483, "_main_thread": 483, "_reset_internal_lock": 483, "_register_atexit": 483, "40050": 483, "40014": 483, "ngroup": 483, "40017": 483, "40016": 483, "39953": 483, "38891": 483, "39682": 483, "38410": 483, "35967": 483, "35113": 483, "karthikeyan": 483, "singaravelan": 483, "31758": 483, "27635": 483, "39879": 483, "sami": 483, "lahfa": 483, "38387": 483, "13743": 483, "test_c_locale_coercion": 483, "40162": 483, "40146": 483, "azur": 483, "40003": 483, "39380": 483, "39793": 483, "1812": 483, "doni": 483, "38360": 483, "40158": 483, "38527": 483, "38329": 483, "icn": 483, "38689": 483, "40385": 483, "checkpyc": 483, "40179": 483, "38576": 483, "18348": 483, "_heapq": 483, "tracing_poss": 483, "_statist": 483, "39968": 483, "get_module_st": 483, "39965": 483, "38373": 483, "19466": 483, "38894": 483, "wozniski": 483, "39871": 483, "39776": 483, "39778": 483, "38091": 483, "39087": 483, "39520": 483, "39220": 483, "22490": 483, "39830": 483, "39999": 483, "39991": 483, "39656": 483, "39360": 483, "experienc": 483, "35370": 483, "39936": 483, "aix_platform": 483, "39652": 483, "39915": 483, "38662": 483, "38075": 483, "39916": 483, "39850": 483, "36287": 483, "39889": 483, "39828": 483, "13487": 483, "39674": 483, "28577": 483, "39826": 483, "getconnect": 483, "39763": 483, "39794": 483, "39517": 483, "39678": 483, "queue_manag": 483, "39764": 483, "pyasyncgenobject": 483, "39769": 483, "38691": 483, "39719": 483, "39667": 483, "39609": 483, "39548": 483, "qop": 483, "39495": 483, "38971": 483, "38641": 483, "emelianov": 483, "37534": 483, "prolog": 483, "39868": 483, "13790": 483, "17422": 483, "39530": 483, "39718": 483, "39677": 483, "40019": 483, "27807": 483, "test_startup_import": 483, "26067": 483, "test_chown": 483, "39855": 483, "test_subprocess": 483, "test_us": 483, "39761": 483, "dflag": 483, "39930": 483, "vcruntime140": 483, "39847": 483, "hibern": 483, "38597": 483, "38380": 483, "39789": 483, "34803": 483, "27115": 483, "39852": 483, "39781": 483, "36184": 483, "take_gil": 483, "pthread_cond_timedwait": 483, "38080": 483, "fix_urllib": 483, "roberto": 483, "meza": 483, "cabrera": 483, "_pyarg_nokwnam": 483, "_pytrash_begin": 483, "_pytrash_end": 483, "39884": 483, "38643": 483, "39824": 483, "38913": 483, "whwn": 483, "39184": 483, "39401": 483, "39382": 483, "39619": 483, "39606": 483, "39386": 483, "39579": 483, "ast_for_dotted_nam": 483, "39510": 483, "39502": 483, "1902": 483, "39492": 483, "39453": 483, "39320": 483, "build_map_unpack": 483, "39219": 483, "36051": 483, "38960": 483, "30566": 483, "39649": 483, "39681": 483, "35950": 483, "39104": 483, "processpoolexcutor": 483, "39627": 483, "39474": 483, "21016": 483, "39590": 483, "39595": 483, "39567": 483, "39559": 483, "38149": 483, "39546": 483, "39450": 483, "stripe": 483, "39493": 483, "39491": 483, "39485": 483, "38932": 483, "vegard": 483, "stikbakk": 483, "39082": 483, "39432": 483, "18819": 483, "39274": 483, "35727": 483, "32173": 483, "39572": 483, "39654": 483, "39153": 483, "39392": 483, "impress": 483, "9056": 483, "38325": 483, "test_winconsoleio": 483, "test_add_file_after_2107": 483, "39553": 483, "sxs": 483, "39439": 483, "39393": 483, "unresolv": 483, "38883": 483, "39185": 483, "39663": 483, "find_good_parse_start": 483, "39600": 483, "30780": 483, "configdialog": 483, "39388": 483, "38792": 483, "bytes_method": 483, "pycore_bytes_method": 483, "pydoc_strvar_shar": 483, "pycore_dtoa": 483, "39500": 483, "39511": 483, "38076": 483, "39245": 483, "pyobject_fastcalldict": 483, "39427": 483, "39421": 483, "build_list_unpack": 483, "build_tuple_unpack": 483, "build_set_unpack": 483, "39048": 483, "39235": 483, "39209": 483, "39216": 483, "39215": 483, "39200": 483, "39166": 483, "39114": 483, "38588": 483, "38610": 483, "32021": 483, "brot": 483, "39430": 483, "39390": 483, "39406": 483, "39396": 483, "29435": 483, "woodruff": 483, "39389": 483, "39313": 483, "exec_funct": 483, "refactoringtool": 483, "39297": 483, "38901": 483, "39242": 483, "35292": 483, "38907": 483, "39152": 483, "giovanni": 483, "lombardo": 483, "39198": 483, "stopit": 483, "39191": 483, "38871": 483, "39142": 483, "convertingtupl": 483, "39158": 483, "39129": 483, "39057": 483, "proxy_bypass_environ": 483, "39056": 483, "39055": 483, "21600": 483, "39019": 483, "38914": 483, "juergen": 483, "gmach": 483, "38878": 483, "35182": 483, "andriy": 483, "maletski": 483, "38630": 483, "38536": 483, "eur": 483, "38473": 483, "38361": 483, "38293": 483, "37958": 483, "get_profile_dict": 483, "28367": 483, "b500000": 483, "b576000": 483, "b921600": 483, "b1000000": 483, "b1152000": 483, "b1500000": 483, "b2000000": 483, "b2500000": 483, "b3000000": 483, "b3500000": 483, "b4000000": 483, "andrey": 483, "smirnov": 483, "39381": 483, "38918": 483, "3530": 483, "39160": 483, "39144": 483, "ctag": 483, "etag": 483, "39050": 483, "34118": 483, "etcetera": 483, "32989": 483, "newline_and_indent_ev": 483, "39164": 483, "_pyerr_getexcinfo": 483, "38945": 483, "38804": 483, "39028": 483, "39080": 483, "39031": 483, "39008": 483, "38673": 483, "38922": 483, "38920": 483, "38892": 483, "38852": 483, "38858": 483, "257": 483, "nsmallnegint": 483, "nsmallposint": 483, "36854": 483, "38328": 483, "38707": 483, "38629": 483, "27145": 483, "hongweipeng": 483, "38021": 483, "pep425": 483, "35409": 483, "33387": 483, "with_cleanup_finish": 483, "39033": 483, "39022": 483, "39006": 483, "38708": 483, "38698": 483, "invalidmessageid": 483, "38994": 483, "38979": 483, "38978": 483, "38986": 483, "taskwakeupmethwrapp": 483, "38982": 483, "38529": 483, "27413": 483, "38634": 483, "33684": 483, "parse_message_id": 483, "38927": 483, "26730": 483, "38881": 483, "38876": 483, "binget": 483, "long_binget": 483, "38688": 483, "kinoshita": 483, "38863": 483, "is_cgi": 483, "37838": 483, "38859": 483, "38857": 483, "38834": 483, "38821": 483, "federico": 483, "bond": 483, "38811": 483, "toke": 483, "iland": 483, "rgensen": 483, "38686": 483, "38348": 483, "37523": 483, "38045": 483, "_decompos": 483, "36820": 483, "36406": 483, "34776": 483, "20928": 483, "29636": 483, "38928": 483, "38899": 483, "fishshel": 483, "cmds": 483, "22377": 483, "38546": 483, "test_ressources_gced_in_work": 483, "38614": 483, "38547": 483, "test_pti": 483, "38992": 483, "38991": 483, "strip_python_stderr": 483, "38965": 483, "_stack_overflow": 483, "38875": 483, "38841": 483, "test_create_datagram_endpoint_existing_sock_unix": 483, "test_pidfd_open": 483, "38839": 483, "38669": 483, "37957": 483, "36500": 483, "39007": 483, "37931": 483, "beno": 483, "38943": 483, "38862": 483, "38636": 483, "38722": 483, "killen": 483, "38622": 483, "38418": 483, "38243": 483, "38174": 483, "15903": 483, "37764": 483, "_header_value_pars": 483, "get_unstructur": 483, "ashwin": 483, "ramaswami": 483, "37461": 483, "37463": 483, "37364": 483, "34631": 483, "1c": 483, "34155": 483, "maxk": 483, "jpic": 483, "38639": 483, "38640": 483, "38613": 483, "38535": 483, "38525": 483, "38465": 483, "38469": 483, "38437": 483, "gc_debug": 483, "38392": 483, "38210": 483, "38402": 483, "crypt_r": 483, "37474": 483, "fedisableexcept": 483, "38006": 483, "38317": 483, "38310": 483, "36871": 483, "11410": 483, "minimis": 483, "38219": 483, "38236": 483, "38013": 483, "async_generator_athrow": 483, "38124": 483, "38116": 483, "38113": 483, "38074": 483, "38073": 483, "38072": 483, "38069": 483, "38071": 483, "38005": 483, "channelid": 483, "36946": 483, "37994": 483, "37947": 483, "37812": 483, "check_small_int": 483, "37830": 483, "20490": 483, "37840": 483, "37802": 483, "37409": 483, "32912": 483, "37757": 483, "targetscopeerror": 483, "36279": 483, "36311": 483, "2gib": 483, "37648": 483, "needl": 483, "37619": 483, "37593": 483, "37543": 483, "37537": 483, "_pyobject_fre": 483, "37467": 483, "37433": 483, "37417": 483, "check_interv": 483, "24214": 483, "37316": 483, "37300": 483, "37269": 483, "37231": 483, "37213": 483, "37219": 483, "15913": 483, "36922": 483, "37160": 483, "37077": 483, "36781": 483, "34556": 483, "35551": 483, "tis260": 483, "tacti": 483, "dumpleton": 483, "27575": 483, "ag": 483, "36589": 483, "38724": 483, "doroschenko": 483, "38786": 483, "python273": 483, "38785": 483, "38723": 483, "27805": 483, "38438": 483, "38761": 483, "38716": 483, "rotatinghandl": 483, "eponym": 483, "38334": 483, "38586": 483, "38565": 483, "34679": 483, "asynci": 483, "31202": 483, "36321": 483, "38521": 483, "38478": 483, "33604": 483, "38378": 483, "38417": 483, "38449": 483, "15522": 483, "38431": 483, "38109": 483, "38422": 483, "38405": 483, "38332": 483, "_encoded_word": 483, "38341": 483, "38319": 483, "38242": 483, "38019": 483, "38163": 483, "38161": 483, "_awaitev": 483, "38216": 483, "30458": 483, "38108": 483, "38265": 483, "38248": 483, "38237": 483, "34002": 483, "38191": 483, "_typenam": 483, "38155": 483, "tahia": 483, "khan": 483, "38185": 483, "38136": 483, "37828": 483, "toriz": 483, "cruz": 483, "38175": 483, "33936": 483, "34706": 483, "38153": 483, "blake2b512": 483, "38115": 483, "38148": 483, "38142": 483, "36991": 483, "38134": 483, "pbkdf2_hmac_fast": 483, "38132": 483, "38008": 483, "37405": 483, "38121": 483, "38110": 483, "closewalk": 483, "fdwalk": 483, "38093": 483, "37488": 483, "35640": 483, "38086": 483, "37251": 483, "38037": 483, "38066": 483, "feed_data": 483, "set_transport": 483, "38059": 483, "38049": 483, "37953": 483, "forwardrefer": 483, "38026": 483, "35923": 483, "_origin": 483, "38010": 483, "34410": 483, "37140": 483, "37587": 483, "scanstr": 483, "10978": 483, "37972": 483, "blhsing": 483, "37965": 483, "ccompil": 483, "has_funct": 483, "37964": 483, "37960": 483, "36205": 483, "rusag": 483, "37950": 483, "37798": 483, "test_statist": 483, "26589": 483, "37915": 483, "32554": 483, "9938": 483, "37851": 483, "32793": 483, "37885": 483, "37868": 483, "__dataclass_fields__": 483, "37811": 483, "37863": 483, "21131": 483, "sigstksz": 483, "fastpath": 483, "14465": 483, "37810": 483, "37772": 483, "ancestr": 483, "18578": 483, "37785": 483, "34488": 483, "18049": 483, "thread_pthread": 483, "37738": 483, "setcchar": 483, "37723": 483, "vaginay": 483, "35943": 483, "32178": 483, "37268": 483, "11953": 483, "wsa": 483, "37685": 483, "37697": 483, "37695": 483, "37689": 483, "29553": 483, "nester": 483, "37691": 483, "37354": 483, "37664": 483, "37642": 483, "36161": 483, "ttyname_r": 483, "36324": 483, "37555": 483, "_call_match": 483, "_call": 483, "_spec_signatur": 483, "elizabeth": 483, "uselton": 483, "29446": 483, "16970": 483, "leender": 483, "34443": 483, "__qualnam": 483, "37491": 483, "marco": 483, "paolini": 483, "18378": 483, "_parse_localenam": 483, "37579": 483, "21478": 483, "37531": 483, "37482": 483, "36993": 483, "hillier": 483, "37502": 483, "37520": 483, "18374": 483, "37424": 483, "37421": 483, "get_temp_dir": 483, "37479": 483, "37440": 483, "37437": 483, "37428": 483, "ssl_verify_post_handshak": 483, "37420": 483, "37406": 483, "29412": 483, "37394": 483, "26967": 483, "37212": 483, "37372": 483, "blanchard": 483, "37345": 483, "udplit": 483, "gabe": 483, "appleton": 483, "37358": 483, "37347": 483, "aleksandr": 483, "balezin": 483, "37163": 483, "37085": 483, "37328": 483, "37305": 483, "webmanifest": 483, "33972": 483, "37280": 483, "37279": 483, "19865": 483, "37266": 483, "37210": 483, "21872": 483, "35922": 483, "36607": 483, "36402": 483, "37206": 483, "37111": 483, "12144": 483, "34886": 483, "37173": 483, "37165": 483, "_count_el": 483, "34767": 483, "37158": 483, "34282": 483, "_convert": 483, "37150": 483, "_actionscontain": 483, "35621": 483, "36520": 483, "30835": 483, "donnellan": 483, "31163": 483, "25068": 483, "26185": 483, "micka": 483, "schoentgen": 483, "21315": 483, "rfc2047": 483, "test_datetim": 483, "35805": 483, "35070": 483, "ngroups_max": 483, "31783": 483, "36582": 483, "32424": 483, "36564": 483, "36302": 483, "36250": 483, "36046": 483, "mclean": 483, "32627": 483, "35168": 483, "8538": 483, "20504": 483, "11122": 483, "rpmbuild": 483, "34749": 483, "34519": 483, "28009": 483, "32498": 483, "33348": 483, "32689": 483, "maxwel": 483, "13b": 483, "mckinnon": 483, "32820": 483, "27657": 483, "4963": 483, "21767": 483, "38816": 483, "38351": 483, "38778": 483, "38592": 483, "brazilian": 483, "38294": 483, "38053": 483, "26868": 483, "36797": 483, "37977": 483, "37979": 483, "isopars": 483, "12707": 483, "37937": 483, "37759": 483, "37726": 483, "32910": 483, "37256": 483, "37284": 483, "30088": 483, "sviatoslav": 483, "sydorenko": 483, "37521": 483, "mintz": 483, "37456": 483, "37487": 483, "mexico": 483, "tech": 483, "37478": 483, "34903": 483, "gleen": 483, "36260": 483, "37004": 483, "36960": 483, "brad": 483, "36487": 483, "23460": 483, "tuoma": 483, "suutari": 483, "35803": 483, "34293": 483, "25237": 483, "test_commun": 483, "38502": 483, "35998": 483, "test_start_tls_server_1": 483, "serverproto": 483, "38470": 483, "test_compile_dir_maxlevel": 483, "38239": 483, "38275": 483, "38271": 483, "38270": 483, "37123": 483, "test_mymanag": 483, "_finalize_manag": 483, "38212": 483, "test_queue_feeder_donot_stop_onexc": 483, "38117": 483, "38018": 483, "37805": 483, "37876": 483, "36833": 483, "pydatetime_": 483, "_get_": 483, "37558": 483, "37526": 483, "test_distutil": 483, "test_build_ext": 483, "_run_fin": 483, "37472": 483, "outstanding_bug": 483, "37199": 483, "19696": 483, "test_pkg_import": 483, "37335": 483, "37411": 483, "test_wsgiref": 483, "testenviron": 483, "37400": 483, "test_chown_gid": 483, "37359": 483, "test_python_": 483, "cleantest": 483, "37362": 483, "37278": 483, "proactorloopctrlc": 483, "37261": 483, "37069": 483, "37252": 483, "test_clos": 483, "test_events_mask_overflow": 483, "37169": 483, "_pyobject_isfre": 483, "37153": 483, "test_multiprocess": 483, "34001": 483, "36919": 483, "test_source_encod": 483, "test_issue2301": 483, "30202": 483, "test_abc": 483, "macaddr": 483, "34596": 483, "uncal": 483, "naitre": 483, "38809": 483, "38684": 483, "38468": 483, "getvar": 483, "37415": 483, "stdatom": 483, "atomic_uintptr_t": 483, "38301": 483, "d_reentrant": 483, "36002": 483, "ac_path_tool": 483, "ac_path_target_tool": 483, "37936": 483, "gitignor": 483, "repo": 483, "37760": 483, "37725": 483, "37468": 483, "wininst": 483, "37189": 483, "pyrun_": 483, "25361": 483, "36210": 483, "asi": 483, "libcurs": 483, "38589": 483, "38453": 483, "38519": 483, "38492": 483, "38344": 483, "38359": 483, "38355": 483, "38092": 483, "38133": 483, "38114": 483, "32592": 483, "36634": 483, "38081": 483, "38087": 483, "test_ntpath": 483, "38088": 483, "v142": 483, "37283": 483, "38030": 483, "38020": 483, "37705": 483, "winerror_to_errno": 483, "37549": 483, "1311": 483, "9949": 483, "36266": 483, "_pyimport_findsharedfuncptrwindow": 483, "nyayapati": 483, "25172": 483, "37778": 483, "37734": 483, "37702": 483, "37672": 483, "pip_us": 483, "37445": 483, "format_message_ignore_insert": 483, "formatmessagew": 483, "37369": 483, "37380": 483, "_activ": 483, "ruslan": 483, "kuprieiev": 483, "35360": 483, "37267": 483, "36779": 483, "cp_utf7": 483, "32587": 483, "28269": 483, "strcasecmp": 483, "_stricmp": 483, "minmin": 483, "gong": 483, "36590": 483, "rfcomm": 483, "38089": 483, "5mb": 483, "16mb": 483, "26353": 483, "4630": 483, "38598": 483, "36698": 483, "35379": 483, "editorwindow": 483, "38183": 483, "38077": 483, "38041": 483, "35771": 483, "hover_delay": 483, "test_tooltip": 483, "37824": 483, "37929": 483, "37902": 483, "37849": 483, "36419": 483, "37748": 483, "37692": 483, "37628": 483, "33610": 483, "37530": 483, "27452": 483, "removefil": 483, "createconfighandl": 483, "37325": 483, "37321": 483, "26806": 483, "37177": 483, "37039": 483, "35763": 483, "obtrus": 483, "36390": 483, "38118": 483, "38347": 483, "pathfix": 483, "37803": 483, "37942": 483, "argumentclin": 483, "37704": 483, "37675": 483, "37034": 483, "37064": 483, "pathscript": 483, "37633": 483, "38540": 483, "38395": 483, "36389": 483, "_pyobject_checkconsist": 483, "visit_decref": 483, "38266": 483, "38303": 483, "kieft": 483, "38205": 483, "38140": 483, "37926": 483, "37879": 483, "subtype_dealloc": 483, "37151": 483, "21120": 483, "37337": 483, "28805": 483, "positon": 483, "37215": 483, "36842": 483, "37170": 483, "35381": 483, "direntrytyp": 483, "scandiriteratortyp": 483, "34331": 483, "35907": 483, "9948": 483, "local_fil": 483, "33529": 483, "33164": 483, "35814": 483, "37126": 483, "37122": 483, "37087": 483, "37072": 483, "pyast_fromnodeobject": 483, "37029": 483, "26423": 483, "wrap_lenfunc": 483, "37050": 483, "expr_text": 483, "22385": 483, "36878": 483, "e1000": 483, "2180": 483, "36907": 483, "36826": 483, "namedexpress": 483, "ast_unpars": 483, "1875": 483, "36861": 483, "28866": 483, "36851": 483, "27639": 483, "blahay": 483, "erick": 483, "cervant": 483, "vaultah": 483, "36737": 483, "pyruntimest": 483, "24048": 483, "remove_modul": 483, "27987": 483, "36601": 483, "main_pid": 483, "36594": 483, "36045": 483, "36035": 483, "35983": 483, "20602": 483, "26826": 483, "31862": 483, "37120": 483, "12202": 483, "26835": 483, "29262": 483, "12639": 483, "35246": 483, "35279": 483, "37076": 483, "37054": 483, "_buffer": 483, "37058": 483, "37047": 483, "37049": 483, "37046": 483, "37045": 483, "37035": 483, "pollut": 483, "37001": 483, "36996": 483, "37008": 483, "27737": 483, "36969": 483, "36983": 483, "36972": 483, "36949": 483, "36948": 483, "33524": 483, "licht": 483, "takeuchi": 483, "24564": 483, "ying": 483, "36888": 483, "25652": 483, "36916": 483, "36889": 483, "writeon": 483, "readwrit": 483, "connect_unix": 483, "streamserv": 483, "flowcontrolmix": 483, "36845": 483, "23378": 483, "36867": 483, "23896": 483, "pygram": 483, "35545": 483, "36778": 483, "semaphore_track": 483, "24538": 483, "36832": 483, "36814": 483, "33110": 483, "26903": 483, "36813": 483, "36806": 483, "36802": 483, "36801": 483, "36748": 483, "8138": 483, "simpleserv": 483, "29183": 483, "36548": 483, "36542": 483, "36533": 483, "35252": 483, "36368": 483, "27497": 483, "ashish": 483, "nitin": 483, "patil": 483, "36239": 483, "keyedarch": 483, "35125": 483, "35721": 483, "31855": 483, "26660": 483, "34271": 483, "33569": 483, "34424": 483, "troeger": 483, "34303": 483, "33361": 483, "22454": 483, "31922": 483, "24882": 483, "31961": 483, "33123": 483, "buchholz": 483, "22102": 483, "facioni": 483, "32515": 483, "32299": 483, "vadim": 483, "tsander": 483, "27141": 483, "31829": 483, "x1a": 483, "23395": 483, "36896": 483, "36686": 483, "36984": 483, "36868": 483, "host_flag": 483, "35924": 483, "36783": 483, "time_fromtimeandfold": 483, "edison": 483, "abahurir": 483, "22865": 483, "35397": 483, "32995": 483, "33519": 483, "33482": 483, "25735": 483, "20285": 483, "test_coroutin": 483, "test_cprofil": 483, "test_rais": 483, "test_yield_from": 483, "37098": 483, "test_memfd_cr": 483, "37081": 483, "36915": 483, "36719": 483, "child_error": 483, "36816": 483, "selfsigned_pythontestdotnet": 483, "35925": 483, "36782": 483, "36342": 483, "sem_open": 483, "36786": 483, "36965": 483, "status_control_c_exit": 483, "35926": 483, "1b": 483, "36231": 483, "35610": 483, "context_use_ps1": 483, "prompt_last_lin": 483, "31858": 483, "37038": 483, "36958": 483, "36807": 483, "usb": 483, "32411": 483, "37053": 483, "chih": 483, "36379": 483, "37107": 483, "_pyobject_callmethodidobjarg": 483, "_pyobject_getmethod": 483, "sullivan": 483, "36742": 483, "9740": 483, "35755": 483, "cs_path": 483, "32849": 483, "20180": 483, "36611": 483, "serialno": 483, "36549": 483, "36504": 483, "pycarraytype_new": 483, "20844": 483, "36452": 483, "36459": 483, "tok_nextc": 483, "36433": 483, "classmethoddescr_cal": 483, "36430": 483, "36440": 483, "parsererror": 483, "skrobov": 483, "18372": 483, "35952": 483, "1613500": 483, "36734": 483, "stack_t": 483, "current_stack": 483, "36650": 483, "28552": 483, "project_bas": 483, "find_execut": 483, "25430": 483, "ipnetwork": 483, "30485": 483, "36613": 483, "36598": 483, "36575": 483, "33461": 483, "36559": 483, "lean": 483, "34373": 483, "36232": 483, "rougeth": 483, "36050": 483, "36522": 483, "houglum": 483, "30427": 483, "maier": 483, "36385": 483, "36434": 483, "36407": 483, "surjaninov": 483, "36366": 483, "unstart": 483, "test_tim": 483, "faiur": 483, "36227": 483, "35936": 483, "35376": 483, "17396": 483, "35934": 483, "23078": 483, "felip": 483, "ochoa": 483, "35416": 483, "35082": 483, "34547": 483, "31658": 483, "34139": 483, "33291": 483, "31310": 483, "31292": 483, "36625": 483, "30840": 483, "36523": 483, "36425": 483, "36345": 483, "literalinclud": 483, "36157": 483, "33043": 483, "35581": 483, "33832": 483, "32913": 483, "36725": 483, "36454": 483, "test_monoton": 483, "test_cyclic_gc": 483, "36635": 483, "36629": 483, "test_imap4_host_default_valu": 483, "test_getallocatedblock": 483, "36560": 483, "36565": 483, "test_resourc": 483, "test_tabnanni": 483, "36436": 483, "pymem_buffer_overflow": 483, "test_utf8_mod": 483, "36341": 483, "36747": 483, "scriptsinstal": 483, "36618": 483, "fmax": 483, "movap": 483, "movup": 483, "36605": 483, "36577": 483, "36544": 483, "36146": 483, "36508": 483, "36503": 483, "aix4": 483, "35920": 483, "arm32": 483, "36649": 483, "34144": 483, "mend": 483, "36509": 483, "35941": 483, "36441": 483, "36010": 483, "29515": 483, "ipproto_ah": 483, "ipproto_cbt": 483, "ipproto_dstopt": 483, "ipproto_egp": 483, "ipproto_esp": 483, "ipproto_frag": 483, "ipproto_ggp": 483, "ipproto_hopopt": 483, "ipproto_iclfxbm": 483, "ipproto_icmpv6": 483, "ipproto_idp": 483, "ipproto_igmp": 483, "ipproto_igp": 483, "ipproto_ipv4": 483, "ipproto_ipv6": 483, "ipproto_l2tp": 483, "ipproto_max": 483, "ipproto_nd": 483, "ipproto_non": 483, "ipproto_pgm": 483, "ipproto_pim": 483, "ipproto_pup": 483, "ipproto_rdp": 483, "ipproto_rout": 483, "ipproto_sctp": 483, "ipproto_st": 483, "35947": 483, "34060": 483, "kloth": 483, "31512": 483, "18075": 483, "36429": 483, "14546": 483, "36641": 483, "pydoc_var": 483, "cleanbyt": 483, "deaddyt": 483, "36443": 483, "_py_preiniti": 483, "_pypreconfig": 483, "36025": 483, "36216": 483, "35121": 483, "36421": 483, "36412": 483, "36398": 483, "structseq_repr": 483, "36256": 483, "parsermodul": 483, "dfa": 483, "36365": 483, "36374": 483, "merge_consts_recurs": 483, "36236": 483, "36352": 483, "36301": 483, "36333": 483, "_pyruntimestate_fini": 483, "36332": 483, "36282": 483, "30040": 483, "36262": 483, "_py_dg_strtod": 483, "36252": 483, "36218": 483, "36188": 483, "vestig": 483, "martijn": 483, "pieter": 483, "36124": 483, "35808": 483, "36401": 483, "34745": 483, "_fields_default": 483, "36298": 483, "mental": 483, "36285": 483, "stephan": 483, "hohe": 483, "36272": 483, "36280": 483, "35931": 483, "36251": 483, "stderrprint": 483, "36235": 483, "customize_compil": 483, "35807": 483, "36139": 483, "36179": 483, "36169": 483, "36103": 483, "36130": 483, "35652": 483, "35178": 483, "tashrif": 483, "billah": 483, "36106": 483, "sinpi": 483, "dmitrii": 483, "pasechnik": 483, "36091": 483, "chen": 483, "36043": 483, "35899": 483, "21269": 483, "akshay": 483, "35843": 483, "_namespacepath": 483, "35802": 483, "35715": 483, "librat": 483, "_process_work": 483, "35493": 483, "35661": 483, "35198": 483, "36138": 483, "21314": 483, "36234": 483, "posixuidgidtest": 483, "test_r": 483, "test_locale_flag": 483, "36123": 483, "36356": 483, "test_extens": 483, "36312": 483, "50220": 483, "50221": 483, "50222": 483, "50225": 483, "50227": 483, "50229": 483, "57002": 483, "57011": 483, "65000": 483, "24643": 483, "_timezon": 483, "36405": 483, "36396": 483, "fgbg": 483, "gethighlight": 483, "36176": 483, "darken": 483, "23205": 483, "23216": 483, "36152": 483, "colordeleg": 483, "close_when_don": 483, "32129": 483, "blurri": 483, "36096": 483, "30348": 483, "35132": 483, "gdb7": 483, "32217": 483, "36142": 483, "coreconfig": 483, "pycore_coreconfig": 483, "36052": 483, "35942": 483, "35992": 483, "35993": 483, "35991": 483, "_randommodul": 483, "35961": 483, "slice_richcompar": 483, "35911": 483, "12822": 483, "pthread_condattr_setclock": 483, "31506": 483, "35724": 483, "33608": 483, "_py_addpendingcal": 483, "33989": 483, "35512": 483, "35918": 483, "18283": 483, "35960": 483, "35500": 483, "24209": 483, "35321": 483, "nina": 483, "zakharenko": 483, "35378": 483, "34294": 483, "35615": 483, "34572": 483, "burgess": 483, "36083": 483, "36007": 483, "22062": 483, "27313": 483, "comboboxtest": 483, "36019": 483, "36037": 483, "rhel8": 483, "35798": 483, "35505": 483, "35917": 483, "shareabl": 483, "35704": 483, "test_unpack_archive_xztar": 483, "maxdata": 483, "0x20000000": 483, "aixtool": 483, "34720": 483, "m_state": 483, "35976": 483, "35692": 483, "35872": 483, "35873": 483, "35299": 483, "24310": 483, "35833": 483, "35689": 483, "35746": 483, "5010": 483, "deref": 483, "talo": 483, "0758": 483, "nicola": 483, "edet": 483, "34812": 483, "34791": 483, "domreg": 483, "34623": 483, "14647": 483, "_py_hashsecret": 483, "34405": 483, "0i": 483, "33871": 483, "32533": 483, "33136": 483, "8970": 483, "x509_verify_param_set1_host": 483, "namelen": 483, "33001": 483, "32981": 483, "1061": 483, "35877": 483, "typed_ast": 483, "35720": 483, "pymain_parse_cmdline_impl": 483, "35634": 483, "35623": 483, "35214": 483, "test_io": 483, "35560": 483, "35552": 483, "35504": 483, "35494": 483, "35444": 483, "35436": 483, "35423": 483, "35357": 483, "magicproxi": 483, "from_kal": 483, "_mock_": 483, "35372": 483, "35336": 483, "31241": 483, "33954": 483, "35269": 483, "35193": 483, "35169": 483, "34022": 483, "28401": 483, "stefano": 483, "rivera": 483, "29341": 483, "35050": 483, "29743": 483, "16806": 483, "35029": 483, "34983": 483, "34974": 483, "34939": 483, "34973": 483, "34876": 483, "34879": 483, "bytesobject": 483, "34784": 483, "structsequ": 483, "34854": 483, "34824": 483, "30156": 483, "property_descr_get": 483, "34751": 483, "xxhash": 483, "34735": 483, "timemodul": 483, "34683": 483, "34653": 483, "pyparser_simpleparsestringfilenam": 483, "32236": 483, "34637": 483, "1621": 483, "34588": 483, "34485": 483, "_bootlocal": 483, "34527": 483, "34403": 483, "34523": 483, "12458": 483, "34408": 483, "34400": 483, "34377": 483, "_pyobject_realloc": 483, "34353": 483, "34320": 483, "34113": 483, "constantin": 483, "petrisor": 483, "34100": 483, "34151": 483, "34170": 483, "33237": 483, "34149": 483, "34125": 483, "34141": 483, "34126": 483, "24618": 483, "34068": 483, "34087": 483, "34080": 483, "34066": 483, "34042": 483, "33418": 483, "33985": 483, "33956": 483, "24596": 483, "33451": 483, "1617161": 483, "33824": 483, "33803": 483, "33738": 483, "33786": 483, "30167": 483, "33706": 483, "gohlk": 483, "30654": 483, "kerl": 483, "33622": 483, "25711": 483, "33509": 483, "31849": 483, "33475": 483, "20104": 483, "33391": 483, "set_symmetric_differ": 483, "33363": 483, "28055": 483, "eik": 483, "33128": 483, "33331": 483, "33312": 483, "_dictkeysobject": 483, "33305": 483, "33306": 483, "33270": 483, "30455": 483, "33176": 483, "33231": 483, "normalizestr": 483, "33205": 483, "round_up_to_power_2": 483, "hashtable_s": 483, "29922": 483, "33199": 483, "33138": 483, "33018": 483, "25750": 483, "33026": 483, "33005": 483, "_pygilstate_reinit": 483, "_pyinterpreterstate_en": 483, "32911": 483, "29463": 483, "7a1": 483, "17288": 483, "32946": 483, "32932": 483, "32925": 483, "32889": 483, "py_address_in_rang": 483, "32836": 483, "31356": 483, "ensure_dis": 483, "32711": 483, "32583": 483, "31902": 483, "25862": 483, "21983": 483, "31577": 483, "29832": 483, "getsockaddrarg": 483, "35845": 483, "35847": 483, "ctypes_pass_by_ref_hack": 483, "test_pass_by_valu": 483, "35780": 483, "misord": 483, "23846": 483, "34323": 483, "35674": 483, "35733": 483, "35726": 483, "35719": 483, "35717": 483, "35699": 483, "32710": 483, "readfil": 483, "wsasend": 483, "35682": 483, "35643": 483, "35619": 483, "28503": 483, "35614": 483, "35568": 483, "35588": 483, "35585": 483, "30561": 483, "35526": 483, "35523": 483, "selinux": 483, "31784": 483, "1e9": 483, "35513": 483, "35502": 483, "35348": 483, "35491": 483, "baseprocess": 483, "35477": 483, "31446": 483, "createprocessw": 483, "35052": 483, "20239": 483, "17185": 483, "35445": 483, "35415": 483, "35424": 483, "35330": 483, "35346": 483, "rhapsodi": 483, "10496": 483, "check_environ": 483, "35389": 483, "cs_gnu_libc_vers": 483, "35394": 483, "35310": 483, "oran": 483, "avraham": 483, "35380": 483, "35341": 483, "ismo": 483, "toijala": 483, "35371": 483, "ver": 483, "35066": 483, "35344": 483, "35312": 483, "35308": 483, "24746": 483, "jairo": 483, "trad": 483, "28604": 483, "35277": 483, "35226": 483, "35189": 483, "fnctl": 483, "calcel": 483, "35186": 483, "bdist_dumb": 483, "35152": 483, "35062": 483, "35065": 483, "_untrack_read": 483, "35079": 483, "sequencemanag": 483, "35017": 483, "35024": 483, "agren": 483, "31047": 483, "35053": 483, "34794": 483, "34909": 483, "35022": 483, "35008": 483, "23420": 483, "33947": 483, "34890": 483, "34521": 483, "recvfd": 483, "31522": 483, "34970": 483, "34969": 483, "16965": 483, "34966": 483, "34926": 483, "asthana": 483, "34941": 483, "32680": 483, "34769": 483, "34936": 483, "selection_el": 483, "34911": 483, "34922": 483, "34925": 483, "34900": 483, "oliveira": 483, "34844": 483, "strformatstyl": 483, "percentstyl": 483, "stringtemplatestyl": 483, "34897": 483, "34871": 483, "28441": 483, "34866": 483, "34711": 483, "34872": 483, "34849": 483, "34819": 483, "34758": 483, "34789": 483, "delfino": 483, "34334": 483, "5950": 483, "34728": 483, "34738": 483, "29577": 483, "31177": 483, "34672": 483, "34666": 483, "awrit": 483, "6721": 483, "34658": 483, "after_par": 483, "34652": 483, "34638": 483, "34536": 483, "34636": 483, "34630": 483, "32490": 483, "34363": 483, "34625": 483, "32270": 483, "34622": 483, "34610": 483, "34421": 483, "34604": 483, "grzybowski": 483, "34574": 483, "8110": 483, "34530": 483, "34563": 483, "peeknamedpip": 483, "34558": 483, "_aix": 483, "22872": 483, "34515": 483, "13312": 483, "34472": 483, "sila": 483, "sewel": 483, "34454": 483, "izbyshev": 483, "6700": 483, "34171": 483, "34441": 483, "34427": 483, "34412": 483, "31715": 483, "mjs": 483, "34384": 483, "22602": 483, "2152": 483, "34341": 483, "34333": 483, "18540": 483, "26502": 483, "34318": 483, "33613": 483, "34248": 483, "34246": 483, "blum": 483, "aguiar": 483, "woellert": 483, "32321": 483, "wright": 483, "34263": 483, "34035": 483, "32215": 483, "34251": 483, "19891": 483, "homedir": 483, "34228": 483, "13041": 483, "zbyszek": 483, "34213": 483, "34052": 483, "34197": 483, "32788": 483, "__adapt__": 483, "21446": 483, "940286": 483, "showtop": 483, "34164": 483, "33729": 483, "34097": 483, "34108": 483, "34070": 483, "27494": 483, "33967": 483, "34041": 483, "34056": 483, "34054": 483, "34043": 483, "34044": 483, "34010": 483, "34019": 483, "bumsik": 483, "33978": 483, "14117": 483, "33974": 483, "27500": 483, "24567": 483, "25007": 483, "33929": 483, "popen_spawn_win32": 483, "33916": 483, "32568": 483, "33833": 483, "proactorsockettransport": 483, "33663": 483, "26544": 483, "33843": 483, "33842": 483, "33805": 483, "33687": 483, "furrer": 483, "33812": 483, "32108": 483, "27397": 483, "33578": 483, "30805": 483, "33476": 483, "enriqu": 483, "perez": 483, "terron": 483, "33694": 483, "32493": 483, "uuid_enc_b": 483, "33274": 483, "33778": 483, "33165": 483, "33770": 483, "33769": 483, "ssltransport": 483, "33767": 483, "33734": 483, "31014": 483, "33197": 483, "_parameterkind": 483, "32684": 483, "33654": 483, "33674": 483, "512mib": 483, "sslprotocol": 483, "31647": 483, "32610": 483, "33469": 483, "33672": 483, "33652": 483, "33238": 483, "haydaman": 483, "33625": 483, "33623": 483, "sigsgv": 483, "11874": 483, "wrappabl": 483, "30877": 483, "fos": 483, "7062": 483, "33582": 483, "33570": 483, "pre6": 483, "28556": 483, "12486": 483, "33548": 483, "_candidate_tempdir_list": 483, "33109": 483, "33541": 483, "_strptime": 483, "localetim": 483, "__pad": 483, "_localetime__pad": 483, "33536": 483, "33542": 483, "get_nod": 483, "duid": 483, "zvi": 483, "effron": 483, "26819": 483, "33516": 483, "28612": 483, "ladi": 483, "wirtz": 483, "28167": 483, "33504": 483, "33505": 483, "33497": 483, "amber": 483, "33495": 483, "26103": 483, "hall": 483, "33453": 483, "prs": 483, "paulius": 483, "arka": 483, "dombrova": 483, "33365": 483, "strigl": 483, "20087": 483, "33422": 483, "33281": 483, "33311": 483, "blondon": 483, "27300": 483, "32933": 483, "fluri": 483, "33383": 483, "33375": 483, "33336": 483, "6851": 483, "32455": 483, "27485": 483, "33332": 483, "sigfillset": 483, "33251": 483, "33329": 483, "33334": 483, "991266": 483, "33131": 483, "33308": 483, "line_info": 483, "col_info": 483, "23403": 483, "33266": 483, "11594": 483, "33254": 483, "33265": 483, "33263": 483, "starostin": 483, "33256": 483, "33144": 483, "33185": 483, "0b3": 483, "29613": 483, "33203": 483, "33224": 483, "mdiff": 483, "33209": 483, "32861": 483, "lazar": 483, "33175": 483, "33141": 483, "33096": 483, "32873": 483, "33134": 483, "33127": 483, "32505": 483, "33078": 483, "33116": 483, "32896": 483, "33100": 483, "32953": 483, "32968": 483, "33061": 483, "33064": 483, "33056": 483, "33021": 483, "31804": 483, "33034": 483, "eaton": 483, "30249": 483, "33037": 483, "27683": 483, "22674": 483, "32999": 483, "33009": 483, "32969": 483, "32056": 483, "32970": 483, "32844": 483, "32960": 483, "32713": 483, "joffrey": 483, "fuhrer": 483, "32257": 483, "32929": 483, "32146": 483, "32922": 483, "32759": 483, "32859": 483, "dup3": 483, "32556": 483, "_getfinalpathnam": 483, "_getvolumepathnam": 483, "_getdiskusag": 483, "21060": 483, "32857": 483, "after_cancel": 483, "32852": 483, "_abc_registri": 483, "_abc_cach": 483, "_abc_negative_cach": 483, "_dump_registri": 483, "_abc_registry_clear": 483, "_abc_caches_clear": 483, "32841": 483, "32819": 483, "19675": 483, "32394": 483, "31787": 483, "30157": 483, "32775": 483, "32622": 483, "32777": 483, "32647": 483, "libdl": 483, "32691": 483, "mod_spec": 483, "32734": 483, "32727": 483, "31453": 483, "20180309043602": 483, "ssl_ctx_set_min_proto_vers": 483, "24334": 483, "31848": 483, "aifc_read": 483, "initfp": 483, "ssnd": 483, "32512": 483, "8525": 483, "29877": 483, "32221": 483, "scopeid": 483, "32147": 483, "31908": 483, "31608": 483, "31425": 483, "gps": 483, "andersson": 483, "22005": 483, "16865": 483, "29456": 483, "hangul": 483, "u1176": 483, "u11a7": 483, "u11c3": 483, "21257": 483, "34764": 483, "35564": 483, "master_doc": 483, "35511": 483, "10536": 483, "35089": 483, "35038": 483, "unexist": 483, "f_restrict": 483, "35042": 483, "35044": 483, "35035": 483, "34967": 483, "add_object_typ": 483, "description_unit": 483, "34913": 483, "32174": 483, "charat": 483, "11233": 483, "34552": 483, "28617": 483, "stdtype": 483, "20177": 483, "34065": 483, "33460": 483, "33847": 483, "33409": 483, "versionad": 483, "parameterkind": 483, "17045": 483, "33736": 483, "23859": 483, "33594": 483, "33503": 483, "33421": 483, "33487": 483, "33378": 483, "33276": 483, "33201": 483, "33195": 483, "33126": 483, "27212": 483, "28247": 483, "18802": 483, "27428": 483, "himanshu": 483, "lakhara": 483, "17232": 483, "32800": 483, "11015": 483, "32613": 483, "8722": 483, "32614": 483, "20709": 483, "gehrck": 483, "32722": 483, "31972": 483, "30607": 483, "8243": 483, "32337": 483, "25041": 483, "31432": 483, "35772": 483, "tmpfs": 483, "punch": 483, "35045": 483, "unbreak": 483, "test_min_max_vers": 483, "test_sendfil": 483, "33717": 483, "35488": 483, "31731": 483, "check_interrupted_writ": 483, "test_multiprocessing_main_handl": 483, "35519": 483, "test_xmlrpc": 483, "34279": 483, "testdidnotrun": 483, "35412": 483, "test_future4": 483, "26704": 483, "35352": 483, "35317": 483, "test_email": 483, "test_localtime_daylight_true_dst_tru": 483, "test_localtime_daylight_false_dst_tru": 483, "21263": 483, "34962": 483, "docstest": 483, "23596": 483, "34537": 483, "test_str": 483, "34587": 483, "rdstest": 483, "testcongest": 483, "34661": 483, "34200": 483, "flaki": 483, "test_pkg": 483, "scari": 483, "module_cleanup": 483, "34569": 483, "34594": 483, "34579": 483, "34542": 483, "3072": 483, "11193": 483, "test_undecodable_env": 483, "34347": 483, "test_cmd_lin": 483, "34490": 483, "34391": 483, "11192": 483, "inet_pton6_zon": 483, "34399": 483, "test_mktim": 483, "test_pthread_getcpuclickid": 483, "_pytime_localtim": 483, "11191": 483, "test_search_cpp": 483, "33746": 483, "33901": 483, "test_dbm_gnu": 483, "33873": 483, "33562": 483, "33655": 483, "test_posix_falloc": 483, "zfs": 483, "32962": 483, "mcet": 483, "fcf": 483, "33358": 483, "test_pre_initialization_sys_opt": 483, "32872": 483, "32517": 483, "32663": 483, "smtputf8simtest": 483, "27643": 483, "test_c": 483, "19417": 483, "31809": 483, "secp": 483, "34691": 483, "35683": 483, "35642": 483, "asynciomodul": 483, "vcxproj": 483, "35550": 483, "__sun": 483, "__svr4": 483, "35499": 483, "35257": 483, "35351": 483, "35139": 483, "inlinefunctionexpans": 483, "onlyexplicitinlin": 483, "ob1": 483, "35011": 483, "pyexpatn": 483, "28015": 483, "34765": 483, "automak": 483, "34585": 483, "34710": 483, "pedant": 483, "34582": 483, "devop": 483, "34081": 483, "34555": 483, "have_linux_vm_sockets_h": 483, "have_sockaddr_alg": 483, "33015": 483, "34245": 483, "34121": 483, "30345": 483, "5755": 483, "33614": 483, "33648": 483, "33522": 483, "visualstudio": 483, "33512": 483, "33483": 483, "33394": 483, "33377": 483, "r6": 483, "riscv": 483, "32232": 483, "33182": 483, "33163": 483, "v39": 483, "33012": 483, "32898": 483, "29442": 483, "35890": 483, "wcstok": 483, "32560": 483, "35854": 483, "35811": 483, "35797": 483, "35758": 483, "29734": 483, "35596": 483, "35402": 483, "35401": 483, "34977": 483, "35067": 483, "_distutils_findv": 483, "vswhere": 483, "32557": 483, "34770": 483, "pyshellext": 483, "34603": 483, "34581": 483, "socketmodul": 483, "34532": 483, "34062": 483, "34225": 483, "34011": 483, "34006": 483, "31546": 483, "matplotlib": 483, "30237": 483, "readconsol": 483, "cancelsynchronousio": 483, "33895": 483, "29097": 483, "86400": 483, "33316": 483, "33184": 483, "32890": 483, "33016": 483, "32903": 483, "32901": 483, "31966": 483, "32409": 483, "32457": 483, "32370": 483, "ipconfig": 483, "29248": 483, "printnameoffset": 483, "holmquist": 483, "sse4": 483, "1104": 483, "summaryinfo": 483, "35025": 483, "24658": 483, "33635": 483, "_recursivewildcardselector": 483, "_iterate_directori": 483, "13631": 483, "32726": 483, "activetcl": 483, "31903": 483, "systemconfigur": 483, "35770": 483, "35769": 483, "untitl": 483, "35660": 483, "35641": 483, "34055": 483, "35591": 483, "35196": 483, "squeezer": 483, "35598": 483, "config_key": 483, "28097": 483, "35208": 483, "35555": 483, "gray": 483, "35521": 483, "22703": 483, "35213": 483, "34864": 483, "35202": 483, "33000": 483, "overfil": 483, "23220": 483, "35099": 483, "35097": 483, "35093": 483, "35088": 483, "copy_str": 483, "35087": 483, "34548": 483, "unsqueez": 483, "34047": 483, "34275": 483, "34120": 483, "unrespons": 483, "33975": 483, "htest": 483, "33905": 483, "stackview": 483, "stackbrows": 483, "33924": 483, "mainmenu": 483, "menudef": 483, "33906": 483, "33917": 483, "idle_test": 483, "33904": 483, "rstripextens": 483, "33907": 483, "calltip_w": 483, "calltipwindow": 483, "33856": 483, "33839": 483, "33855": 483, "33763": 483, "33664": 483, "slider": 483, "33628": 483, "codecontext": 483, "33564": 483, "21474": 483, "33204": 483, "32984": 483, "32940": 483, "stringtranslatepseudomap": 483, "32916": 483, "32905": 483, "32874": 483, "32837": 483, "32826": 483, "test_help_about": 483, "test_file_button": 483, "32831": 483, "32765": 483, "34989": 483, "20260": 483, "read_var": 483, "33189": 483, "31920": 483, "krasnikov": 483, "29673": 483, "pystackv": 483, "pystack": 483, "32885": 483, "32222": 483, "harradin": 483, "31583": 483, "33817": 483, "35322": 483, "35296": 483, "pycore_": 483, "35259": 483, "neufeld": 483, "34725": 483, "34910": 483, "34193": 483, "34127": 483, "23927": 483, "pycompile_opcodestackeffectwithjump": 483, "34008": 483, "32500": 483, "33042": 483, "32374": 483, "30863": 483, "33851": 483, "33932": 483, "7b1": 483, "threadedhttpserv": 483, "32703": 483, "32650": 483, "32685": 483, "32697": 483, "26163": 483, "0rc1": 483, "24340": 483, "18533": 483, "20891": 483, "32028": 483, "31113": 483, "30306": 483, "32513": 483, "32660": 483, "fionread": 483, "fionclex": 483, "fioclex": 483, "fioasync": 483, "fionbio": 483, "27931": 483, "32643": 483, "_step": 483, "_wakeup": 483, "_schedule_callback": 483, "32502": 483, "32596": 483, "32576": 483, "32574": 483, "melero": 483, "32521": 483, "32467": 483, "32473": 483, "libtirpc": 483, "32503": 483, "29237": 483, "32404": 483, "32228": 483, "22908": 483, "31853": 483, "x509_verify_param_set1_ip": 483, "32724": 483, "32649": 483, "17799": 483, "32721": 483, "32602": 483, "32549": 483, "32635": 483, "libxcrypt": 483, "32598": 483, "ax_check_openssl": 483, "32593": 483, "32588": 483, "29911": 483, "32507": 483, "32681": 483, "timzon": 483, "32399": 483, "rfc4122": 483, "uuid_creat": 483, "32390": 483, "32143": 483, "32379": 483, "32259": 483, "27169": 483, "22091": 483, "32329": 483, "30416": 483, "32282": 483, "versionhelp": 483, "32260": 483, "32225": 483, "31901": 483, "32506": 483, "32279": 483, "32278": 483, "32499": 483, "32468": 483, "32422": 483, "31721": 483, "_log_traceback": 483, "26133": 483, "32363": 483, "32357": 483, "python_coroutin": 483, "cython_coroutin": 483, "32323": 483, "32302": 483, "v140": 483, "29711": 483, "stop_serv": 483, "17852": 483, "misunderstand": 483, "_py_pyatexit": 483, "_get_running_loop": 483, "32255": 483, "32277": 483, "32273": 483, "test_util": 483, "32272": 483, "classify_class_attr": 483, "ouput": 483, "32199": 483, "26439": 483, "31993": 483, "31802": 483, "31699": 483, "abstractserv": 483, "32252": 483, "faulthandler_suppress_crash_report": 483, "24960": 483, "32030": 483, "29084": 483, "32264": 483, "pygetopt": 483, "32241": 483, "wchar": 483, "32176": 483, "co_nofre": 483, "32137": 483, "32096": 483, "_pyruntime_initi": 483, "28180": 483, "_py_setlocalefromenv": 483, "31949": 483, "30696": 483, "20047": 483, "21720": 483, "31845": 483, "28936": 483, "31825": 483, "escape_decod": 483, "31618": 483, "28603": 483, "zane": 483, "bitter": 483, "31786": 483, "31781": 483, "31626": 483, "30817": 483, "32214": 483, "27240": 483, "30788": 483, "31831": 483, "32182": 483, "rfc2231": 483, "32186": 483, "32101": 483, "32154": 483, "32089": 483, "preferenti": 483, "12239": 483, "vt_empti": 483, "mahon": 483, "28334": 483, "dimitri": 483, "merejkowski": 483, "31325": 483, "wellner": 483, "12382": 483, "ter": 483, "19610": 483, "28684": 483, "32110": 483, "27535": 483, "32088": 483, "1647489": 483, "32072": 483, "32069": 483, "32046": 483, "32018": 483, "32037": 483, "32034": 483, "32015": 483, "32011": 483, "28369": 483, "31976": 483, "7bc817d5ba917528e8bd07ec461c635291e7b06a": 483, "9678": 483, "takayuki": 483, "shimizukawa": 483, "30057": 483, "31933": 483, "poolexecutor": 483, "31927": 483, "27666": 483, "chtype": 483, "mmask_t": 483, "fink": 483, "31917": 483, "31897": 483, "25720": 483, "31893": 483, "kqueue_ev": 483, "31891": 483, "31884": 483, "28281": 483, "gollahon": 483, "30639": 483, "30768": 483, "intr_flag": 483, "31854": 483, "31834": 483, "ssse3": 483, "28416": 483, "31653": 483, "28326": 483, "superset_of": 483, "31827": 483, "31457": 483, "31806": 483, "31803": 483, "31800": 483, "30143": 483, "31770": 483, "31752": 483, "31620": 483, "poller": 483, "31632": 483, "15037": 483, "31307": 483, "31334": 483, "riccardo": 483, "coccioli": 483, "31308": 483, "immun": 483, "30553": 483, "misdirect": 483, "32105": 483, "31380": 483, "test_httpserv": 483, "test_undecodable_fil": 483, "apf": 483, "31705": 483, "test_sha256": 483, "enokey": 483, "32138": 483, "requires_android_level": 483, "32136": 483, "28668": 483, "requires_multiprocessing_queu": 483, "32126": 483, "test_get_event_loop_new_process": 483, "test_ev": 483, "31174": 483, "test_unpars": 483, "directorytestcas": 483, "28538": 483, "28762": 483, "29040": 483, "r14": 483, "32059": 483, "detect_modul": 483, "sysroot": 483, "31957": 483, "31609": 483, "31934": 483, "31926": 483, "28791": 483, "28643": 483, "31866": 483, "1102": 483, "error_no_more_item": 483, "tuininga": 483, "31944": 483, "31857": 483, "31392": 483, "2m": 483, "32207": 483, "32164": 483, "tabbedpag": 483, "tabbedpageset": 483, "32100": 483, "pathbrows": 483, "31836": 483, "test_code_modul": 483, "ditto": 483, "32159": 483, "svneol": 483, "treesync": 483, "30722": 483, "redemo": 483, "sarnowski": 483, "32125": 483, "py_useclassexceptionsflag": 483, "31642": 483, "31708": 483, "30404": 483, "31619": 483, "31602": 483, "31592": 483, "31588": 483, "31566": 483, "31505": 483, "make_encod": 483, "31492": 483, "31478": 483, "31336": 483, "31410": 483, "31315": 483, "create_dynam": 483, "31311": 483, "31293": 483, "31285": 483, "30058": 483, "31672": 483, "31701": 483, "31728": 483, "bm_regex_compil": 483, "30397": 483, "31675": 483, "31673": 483, "adderrorinfo": 483, "30806": 483, "25351": 483, "20519": 483, "28293": 483, "31596": 483, "30347": 483, "30346": 483, "31556": 483, "31516": 483, "31525": 483, "sqlite3_prepare_v2": 483, "27541": 483, "31351": 483, "31537": 483, "30085": 483, "31696": 483, "31625": 483, "ranlib": 483, "31624": 483, "22140": 483, "31569": 483, "31536": 483, "31460": 483, "flist": 483, "31649": 483, "_htest": 483, "_utest": 483, "31559": 483, "test_brows": 483, "31459": 483, "yesterday": 483, "31500": 483, "hidpi": 483, "31532": 483, "29781": 483, "29505": 483, "fuzz": 483, "30947": 483, "30730": 483, "30694": 483, "9233": 483, "9063": 483, "0718": 483, "0876": 483, "flood": 483, "5300": 483, "xml_sethashsalt": 483, "30500": 483, "splithost": 483, "29591": 483, "4472": 483, "537": 483, "31490": 483, "31471": 483, "31418": 483, "31416": 483, "defaultact": 483, "31411": 483, "onceregistri": 483, "31373": 483, "demot": 483, "30465": 483, "30860": 483, "31347": 483, "_pyobject_fastcall_prepend": 483, "31343": 483, "sysmacro": 483, "libray": 483, "31291": 483, "31271": 483, "31243": 483, "30721": 483, "31070": 483, "_get_module_lock": 483, "30747": 483, "_py_atomic_stor": 483, "_py_atomic_load": 483, "31095": 483, "31071": 483, "30978": 483, "30808": 483, "_py_atom": 483, "30876": 483, "reimport": 483, "30703": 483, "30765": 483, "pthread_mutex_lock": 483, "31161": 483, "30814": 483, "30736": 483, "30604": 483, "co_extra_freefunc": 483, "30597": 483, "30682": 483, "30501": 483, "30486": 483, "25324": 483, "29104": 483, "27945": 483, "duan": 483, "griffin": 483, "25794": 483, "30039": 483, "12414": 483, "29839": 483, "29914": 483, "29949": 483, "29935": 483, "29816": 483, "29894": 483, "29859": 483, "pthread_": 483, "29849": 483, "28856": 483, "29723": 483, "29139": 483, "29714": 483, "29695": 483, "28893": 483, "28876": 483, "29683": 483, "coleman": 483, "29684": 483, "segv": 483, "28598": 483, "29607": 483, "29602": 483, "29347": 483, "29438": 483, "29478": 483, "mircea": 483, "cosbuc": 483, "29319": 483, "runmainfromimport": 483, "29337": 483, "29327": 483, "29034": 483, "path_convert": 483, "29159": 483, "29049": 483, "28932": 483, "25677": 483, "layzel": 483, "28596": 483, "26919": 483, "28991": 483, "28147": 483, "28739": 483, "28512": 483, "28918": 483, "28797": 483, "pyeval_getcallstat": 483, "28782": 483, "28774": 483, "28731": 483, "_pydict_newpres": 483, "28532": 483, "27100": 483, "ellington": 483, "28746": 483, "26920": 483, "langinfo": 483, "28648": 483, "astral": 483, "28665": 483, "19398": 483, "28621": 483, "28580": 483, "28583": 483, "28128": 483, "28509": 483, "28426": 483, "28517": 483, "28214": 483, "23782": 483, "_pytraceback_add": 483, "28183": 483, "28379": 483, "28376": 483, "range_iter": 483, "26906": 483, "18287": 483, "koep": 483, "24098": 483, "28201": 483, "28350": 483, "26617": 483, "27942": 483, "28289": 483, "21578": 483, "28203": 483, "soumya": 483, "sharma": 483, "28086": 483, "unscath": 483, "27955": 483, "28192": 483, "27441": 483, "27222": 483, "long_rshift": 483, "28131": 483, "compile_sourc": 483, "28126": 483, "py_memcpi": 483, "28120": 483, "26182": 483, "28721": 483, "31499": 483, "31482": 483, "mitar": 483, "31544": 483, "31234": 483, "31431": 483, "approx": 483, "31400": 483, "27629": 483, "28958": 483, "28182": 483, "27340": 483, "31178": 483, "31350": 483, "31170": 483, "31326": 483, "27144": 483, "31281": 483, "10746": 483, "22536": 483, "29741": 483, "31249": 483, "workitem": 483, "31247": 483, "31238": 483, "serverthread": 483, "serve_until_quit": 483, "5001": 483, "31109": 483, "30102": 483, "openssl_add_all_algorithms_noconf": 483, "power8": 483, "serra": 483, "scalet": 483, "31183": 483, "diagnosi": 483, "luciano": 483, "ramalho": 483, "uninform": 483, "convert_to_error": 483, "31169": 483, "drallensmith": 483, "31185": 483, "include_fil": 483, "31135": 483, "31107": 483, "31061": 483, "30987": 483, "30502": 483, "30919": 483, "26732": 483, "29403": 483, "gallagh": 483, "30961": 483, "19896": 483, "30946": 483, "25684": 483, "30886": 483, "29854": 483, "30319": 483, "30828": 483, "cfutur": 483, "30807": 483, "30441": 483, "29293": 483, "sleeper": 483, "30532": 483, "9146": 483, "29169": 483, "30119": 483, "30879": 483, "30746": 483, "30664": 483, "29212": 483, "y_n": 483, "29755": 483, "30616": 483, "30038": 483, "23894": 483, "24484": 483, "30589": 483, "28994": 483, "30645": 483, "alexandru": 483, "ardelean": 483, "30624": 483, "30595": 483, "30605": 483, "misplac": 483, "29870": 483, "sgha": 483, "er": 483, "27585": 483, "mathieu": 483, "sornay": 483, "30418": 483, "30463": 483, "30557": 483, "30245": 483, "yuan": 483, "30378": 483, "30470": 483, "wijaya": 483, "30414": 483, "_feed": 483, "30003": 483, "30149": 483, "30301": 483, "30375": 483, "30329": 483, "wsaeinval": 483, "10022": 483, "29196": 483, "30299": 483, "30048": 483, "30266": 483, "30340": 483, "30298": 483, "weaken": 483, "subsequenti": 483, "29990": 483, "30243": 483, "30185": 483, "fasaraki": 483, "hilliard": 483, "30205": 483, "30228": 483, "30190": 483, "30101": 483, "29822": 483, "nate": 483, "soar": 483, "29960": 483, "bryan": 483, "30070": 483, "22352": 483, "30061": 483, "sizeabl": 483, "30218": 483, "30068": 483, "_iobas": 483, "29694": 483, "29692": 483, "unchain": 483, "siddharth": 483, "velankar": 483, "26187": 483, "9303": 483, "30017": 483, "29998": 483, "29649": 483, "29931": 483, "sanjay": 483, "sundaresan": 483, "29953": 483, "29942": 483, "10030": 483, "29204": 483, "27863": 483, "28699": 483, "23890": 483, "29901": 483, "25803": 483, "29861": 483, "29884": 483, "zeitouni": 483, "25455": 483, "29800": 483, "seifert": 483, "8256": 483, "29619": 483, "28298": 483, "intabl": 483, "29645": 483, "28231": 483, "26915": 483, "29623": 483, "_v2": 483, "28963": 483, "subprocessstreamprotocol": 483, "29271": 483, "29703": 483, "29615": 483, "motejlek": 483, "29376": 483, "28624": 483, "sayan": 483, "chowdhuri": 483, "28518": 483, "29742": 483, "29532": 483, "29110": 483, "29534": 483, "_pydecim": 483, "29100": 483, "29416": 483, "29444": 483, "wgh": 483, "29368": 483, "29338": 483, "29335": 483, "29290": 483, "28735": 483, "magickmock": 483, "29197": 483, "29210": 483, "29219": 483, "29195": 483, "28969": 483, "29142": 483, "28961": 483, "jiajun": 483, "huang": 483, "15812": 483, "brees": 483, "28985": 483, "dingyuan": 483, "29079": 483, "13051": 483, "tycho": 483, "andersen": 483, "9770": 483, "28427": 483, "28923": 483, "28871": 483, "19542": 483, "16255": 483, "28779": 483, "26937": 483, "27030": 483, "28835": 483, "28752": 483, "28727": 483, "sre_pattern": 483, "18383": 483, "20572": 483, "25659": 483, "28548": 483, "19717": 483, "28563": 483, "28387": 483, "cufr": 483, "27517": 483, "fogl": 483, "28549": 483, "ncurses6": 483, "28449": 483, "23262": 483, "broytman": 483, "24241": 483, "27939": 483, "28255": 483, "prweek": 483, "20491": 483, "kaarl": 483, "ritvanen": 483, "28353": 483, "28430": 483, "27025": 483, "25464": 483, "header_exist": 483, "addin": 483, "28488": 483, "28469": 483, "28115": 483, "18219": 483, "28448": 483, "23214": 483, "28480": 483, "28240": 483, "24452": 483, "20766": 483, "27998": 483, "28317": 483, "28380": 483, "28229": 483, "28321": 483, "28225": 483, "28227": 483, "27358": 483, "28322": 483, "leitch": 483, "28228": 483, "28226": 483, "28314": 483, "28148": 483, "localtime_r": 483, "schouten": 483, "28253": 483, "28275": 483, "27897": 483, "18893": 483, "madison": 483, "27611": 483, "displaystyl": 483, "27348": 483, "5a2": 483, "25651": 483, "27778": 483, "28200": 483, "25400": 483, "_sendfile_use_sendfil": 483, "28075": 483, "error_access_deni": 483, "25270": 483, "escape_encod": 483, "28181": 483, "antigrav": 483, "kaartic": 483, "sivaraam": 483, "25895": 483, "gerg": 483, "imreh": 483, "holtermann": 483, "28114": 483, "parse_envlist": 483, "27599": 483, "27906": 483, "conway": 483, "28174": 483, "larson": 483, "26654": 483, "iceboy": 483, "26909": 483, "28176": 483, "selectorloop": 483, "27759": 483, "28325": 483, "macurl2path": 483, "28368": 483, "28371": 483, "28372": 483, "28399": 483, "27972": 483, "24142": 483, "florian": 483, "29581": 483, "25532": 483, "30177": 483, "pietri": 483, "31294": 483, "21649": 483, "30803": 483, "thomassen": 483, "30176": 483, "30052": 483, "26985": 483, "19824": 483, "20314": 483, "12518": 483, "28929": 483, "25008": 483, "26355": 483, "29349": 483, "28513": 483, "29639": 483, "hostv4": 483, "hostv6": 483, "31320": 483, "31346": 483, "25674": 483, "tbs": 483, "30715": 483, "30822": 483, "extralargefil": 483, "test_zipfile64": 483, "30695": 483, "set_nomemori": 483, "remove_mem_hook": 483, "30357": 483, "grzegorz": 483, "grzywacz": 483, "30197": 483, "24932": 483, "28950": 483, "28683": 483, "26936": 483, "28666": 483, "23839": 483, "26944": 483, "28409": 483, "28217": 483, "_testconsol": 483, "26939": 483, "armv7": 483, "31354": 483, "21st": 483, "31341": 483, "30854": 483, "30687": 483, "vcvarsal": 483, "20210": 483, "29941": 483, "28787": 483, "29243": 483, "29643": 483, "27593": 483, "29572": 483, "27659": 483, "29384": 483, "26851": 483, "28768": 483, "_setmod": 483, "29080": 483, "23903": 483, "r13": 483, "20211": 483, "28849": 483, "_multiarch": 483, "10656": 483, "tristan": 483, "haubenwalln": 483, "optimi": 483, "28444": 483, "28208": 483, "28248": 483, "21124": 483, "13756": 483, "roumen": 483, "petrov": 483, "21085": 483, "rebas": 483, "28258": 483, "estonian": 483, "26661": 483, "15819": 483, "28676": 483, "gareth": 483, "ree": 483, "30389": 483, "31358": 483, "31340": 483, "v141": 483, "30581": 483, "30916": 483, "30731": 483, "gadget": 483, "23451": 483, "29579": 483, "25778": 483, "28896": 483, "28522": 483, "getpathp": 483, "28402": 483, "28333": 483, "28251": 483, "28110": 483, "28161": 483, "28162": 483, "28163": 483, "_open_osfhandl": 483, "28164": 483, "_pyio_get_console_typ": 483, "28138": 483, "31493": 483, "31488": 483, "parenmatch": 483, "31477": 483, "31480": 483, "31421": 483, "31414": 483, "31051": 483, "genpag": 483, "30617": 483, "outwin": 483, "31287": 483, "keyset": 483, "31206": 483, "highpag": 483, "31001": 483, "31205": 483, "keyspag": 483, "31130": 483, "31002": 483, "19903": 483, "31083": 483, "tabpag": 483, "31050": 483, "31004": 483, "fontpag": 483, "30781": 483, "31060": 483, "30853": 483, "vartrac": 483, "31003": 483, "30993": 483, "causal": 483, "create_font_tab": 483, "set_sampl": 483, "var_changed_font": 483, "test_font_set": 483, "test_indent_scal": 483, "30981": 483, "28523": 483, "30917": 483, "idleconf": 483, "30934": 483, "30913": 483, "30899": 483, "30881": 483, "30851": 483, "30870": 483, "8231": 483, "getusercfgdir": 483, "30779": 483, "configchang": 483, "changes_class_v4": 483, "test_config": 483, "changestest": 483, "configdialog_tests_v1": 483, "msg297804": 483, "30777": 483, "30495": 483, "textview": 483, "pep8": 483, "30723": 483, "30674": 483, "21519": 483, "29910": 483, "30728": 483, "6739": 483, "25514": 483, "subsubsect": 483, "30642": 483, "30290": 483, "30303": 483, "29071": 483, "28572": 483, "30983": 483, "polaco": 483, "penteado": 483, "29748": 483, "24037": 483, "29367": 483, "wrapperobject": 483, "28023": 483, "15369": 483, "microbenchmark": 483, "28102": 483, "30832": 483, "py_have_native_tl": 483, "29083": 483, "29058": 483, "28808": 483, "28748": 483, "_py_packagecontext": 483, "2o": 483, "29706": 483, "30353": 483, "32555": 483, "31518": 483, "sslv23_method": 483, "4rc1": 483, "31852": 483, "31641": 483, "3rc1": 483, "31662": 483, "uploadreleas": 483, "31423": 483, "29600": 483, "2159": 483, "26293": 483, "29094": 483, "29519": 483, "29316": 483, "29011": 483, "29203": 483, "29085": 483, "29061": 483, "brendan": 483, "donegan": 483, "29119": 483, "andra": 483, "bogildea": 483, "29055": 483, "neaten": 483, "29326": 483, "29409": 483, "29392": 483, "28087": 483, "test_asyncor": 483, "test_eintr": 483, "28990": 483, "hoho": 483, "28770": 483, "28898": 483, "have_long_long": 483, "28843": 483, "28600": 483, "28634": 483, "28639": 483, "mayfield": 483, "28652": 483, "28653": 483, "28703": 483, "28704": 483, "28471": 483, "28492": 483, "28500": 483, "26923": 483, "ebk": 483, "26796": 483, "lawrenz": 483, "25221": 483, "27080": 483, "27199": 483, "27948": 483, "x7b": 483, "x7d": 483, "28046": 483, "28071": 483, "25758": 483, "25856": 483, "26331": 483, "27999": 483, "26058": 483, "27911": 483, "exec_builtin_or_dynam": 483, "27961": 483, "27355": 483, "27870": 483, "25402": 483, "27214": 483, "long_invert": 483, "long_add": 483, "27506": 483, "27812": 483, "27811": 483, "27587": 483, "pvs": 483, "_pystate_addmodul": 483, "27792": 483, "26984": 483, "25604": 483, "24254": 483, "27662": 483, "list_new": 483, "py_size_max": 483, "27782": 483, "py_create_mod": 483, "27936": 483, "27487": 483, "27157": 483, "27558": 483, "28008": 483, "28732": 483, "28485": 483, "28037": 483, "sqlite3_get_autocommit": 483, "intransact": 483, "25283": 483, "10740": 483, "28070": 483, "24693": 483, "27137": 483, "1703178": 483, "28019": 483, "18401": 483, "matusiak": 483, "kimbrel": 483, "25969": 483, "14977": 483, "1542": 483, "28082": 483, "24594": 483, "17582": 483, "28047": 483, "27576": 483, "28027": 483, "27445": 483, "22450": 483, "pgen3": 483, "load_grammar": 483, "28005": 483, "26667": 483, "27570": 483, "22233": 483, "27988": 483, "tautolog": 483, "27776": 483, "27691": 483, "gen_rid": 483, "25761": 483, "sweet32": 483, "25387": 483, "27866": 483, "11620": 483, "12885": 483, "27881": 483, "27861": 483, "19884": 483, "27706": 483, "nofar": 483, "schnider": 483, "10513": 483, "_get_type_var": 483, "_eval_typ": 483, "27832": 483, "27539": 483, "21718": 483, "ctes": 483, "2466": 483, "27573": 483, "27930": 483, "andrad": 483, "21201": 483, "wojciech": 483, "walczak": 483, "15308": 483, "bayard": 483, "randel": 483, "27922": 483, "27891": 483, "17642": 483, "25564": 483, "27821": 483, "26900": 483, "26027": 483, "27427": 483, "couzo": 483, "27953": 483, "26040": 483, "test_math": 483, "test_cmath": 483, "rigour": 483, "27787": 483, "27566": 483, "27705": 483, "validate_ucrtbas": 483, "27976": 483, "27983": 483, "26307": 483, "27917": 483, "25825": 483, "libpl": 483, "2a4": 483, "21122": 483, "17128": 483, "27952": 483, "fixcid": 483, "28065": 483, "25144": 483, "1602": 483, "27731": 483, "aliasmbc": 483, "20366": 483, "27756": 483, "cherri": 483, "27883": 483, "27704": 483, "22557": 483, "17596": 483, "wincrypt": 483, "gw": 483, "17599": 483, "reparse_data_buff": 483, "27507": 483, "27581": 483, "27419": 483, "27083": 483, "27514": 483, "27366": 483, "27524": 483, "27736": 483, "27038": 483, "27773": 483, "26750": 483, "descriptortyp": 483, "26800": 483, "26981": 483, "27783": 483, "27774": 483, "27760": 483, "27758": 483, "27568": 483, "httpoxi": 483, "1000110": 483, "7063": 483, "chuck": 483, "27656": 483, "sched_": 483, "27130": 483, "27567": 483, "27533": 483, "_isdir": 483, "17711": 483, "27522": 483, "27512": 483, "27714": 483, "text_textview": 483, "test_autocomplet": 483, "27621": 483, "27620": 483, "27609": 483, "25507": 483, "27173": 483, "confighandl": 483, "25805": 483, "test_pkgutil": 483, "27472": 483, "27369": 483, "27594": 483, "test_ast": 483, "27647": 483, "27610": 483, "27469": 483, "27309": 483, "27713": 483, "27453": 483, "27641": 483, "26662": 483, "python_for_gen": 483, "10910": 483, "freedbsd": 483, "27278": 483, "22636": 483, "27473": 483, "27443": 483, "27007": 483, "26844": 483, "lev": 483, "maximov": 483, "23804": 483, "27466": 483, "time2netscap": 483, "27319": 483, "27079": 483, "27294": 483, "27048": 483, "27330": 483, "27238": 483, "27122": 483, "issue25782": 483, "26386": 483, "16182": 483, "27477": 483, "test_help": 483, "27380": 483, "sectionnam": 483, "helpsourc": 483, "itw": 483, "27372": 483, "27365": 483, "27245": 483, "24137": 483, "27310": 483, "28066": 483, "27442": 483, "android_api_level": 483, "27434": 483, "26930": 483, "2h": 483, "23968": 483, "machdep": 483, "platform_triplet": 483, "ldversion": 483, "_sysconfigdata": 483, "27332": 483, "27418": 483, "importbench": 483, "19489": 483, "27285": 483, "pierci": 483, "27027": 483, "26556": 483, "1283": 483, "0772": 483, "oststrom": 483, "26839": 483, "colm": 483, "buckley": 483, "27190": 483, "sawyer": 483, "27286": 483, "27066": 483, "26983": 483, "27097": 483, "23275": 483, "20508": 483, "21386": 483, "07a5610bae9d": 483, "luethi": 483, "27029": 483, "20900": 483, "ingrid": 483, "25738": 483, "susumu": 483, "koshiba": 483, "21313": 483, "27164": 483, "24291": 483, "serverhandl": 483, "21272": 483, "26809": 483, "26373": 483, "flip": 483, "sigiot": 483, "27167": 483, "25931": 483, "21776": 483, "26526": 483, "27114": 483, "_load_windows_store_cert": 483, "5124": 483, "24750": 483, "24759": 483, "27239": 483, "isxyztk": 483, "27262": 483, "27196": 483, "20567": 483, "27156": 483, "27117": 483, "26673": 483, "21939": 483, "percol": 483, "21676": 483, "18410": 483, "westley": 483, "mart": 483, "nez": 483, "21703": 483, "27044": 483, "remove_var_callback": 483, "23977": 483, "test_deleg": 483, "16484": 483, "rodman": 483, "kaushik": 483, "nadikud": 483, "24136": 483, "22558": 483, "yoni": 483, "lavi": 483, "25285": 483, "27064": 483, "17500": 483, "pythondotorg": 483, "945": 483, "27229": 483, "26657": 483, "hagemeist": 483, "26313": 483, "baji": 483, "25939": 483, "20041": 483, "26168": 483, "26991": 483, "27039": 483, "23640": 483, "27005": 483, "18531": 483, "26811": 483, "20120": 483, "pypirc": 483, "26802": 483, "26659": 483, "26718": 483, "27138": 483, "27147": 483, "25339": 483, "26494": 483, "26581": 483, "19711": 483, "21099": 483, "26563": 483, "26558": 483, "26464": 483, "22836": 483, "26302": 483, "26136": 483, "anish": 483, "shah": 483, "26204": 483, "4806": 483, "23601": 483, "25843": 483, "26107": 483, "26154": 483, "_pythreadstate_uncheckedget": 483, "_pythreadstate_curr": 483, "22995": 483, "_pyobject_getst": 483, "25961": 483, "25973": 483, "20440": 483, "25766": 483, "25421": 483, "25709": 483, "24097": 483, "24731": 483, "25630": 483, "23564": 483, "fds_to_pass": 483, "25388": 483, "25462": 483, "24802": 483, "overread": 483, "25555": 483, "24726": 483, "25449": 483, "25395": 483, "_pybyteswrit": 483, "25274": 483, "24402": 483, "24806": 483, "24848": 483, "misform": 483, "25280": 483, "25003": 483, "9232": 483, "24965": 483, "26478": 483, "26171": 483, "25660": 483, "26288": 483, "26289": 483, "26315": 483, "25887": 483, "27057": 483, "eaccess": 483, "bednarski": 483, "27014": 483, "tuur": 483, "27031": 483, "14132": 483, "janech": 483, "17214": 483, "27033": 483, "27034": 483, "26892": 483, "22274": 483, "26807": 483, "yolanda": 483, "robla": 483, "25745": 483, "26977": 483, "26002": 483, "upendra": 483, "kuma": 483, "25974": 483, "26996": 483, "26881": 483, "23815": 483, "17765": 483, "26873": 483, "responseerror": 483, "26711": 483, "24114": 483, "crle": 483, "kee": 483, "26864": 483, "24902": 483, "26634": 483, "26804": 483, "lower_cas": 483, "mixed_cas": 483, "26837": 483, "26041": 483, "kumaripaba": 483, "miyurusara": 483, "athukorala": 483, "26822": 483, "26733": 483, "26801": 483, "24838": 483, "26717": 483, "ize": 483, "26782": 483, "26735": 483, "024": 483, "26585": 483, "_quote_html": 483, "16329": 483, "webm": 483, "13952": 483, "26709": 483, "y2038": 483, "23735": 483, "25951": 483, "26586": 483, "26676": 483, "22854": 483, "26641": 483, "docfiletest": 483, "25195": 483, "3603bae63c13": 483, "plummer": 483, "26644": 483, "26616": 483, "26637": 483, "21925": 483, "26530": 483, "_pytracemalloc_track": 483, "_pytracemalloc_untrack": 483, "_pytracemalloc_gettraceback": 483, "_tracemalloc": 483, "24266": 483, "26590": 483, "18787": 483, "26560": 483, "inglesbi": 483, "_showwarnmsg": 483, "26569": 483, "26499": 483, "ghost": 483, "25320": 483, "den": 483, "elzen": 483, "16181": 483, "http2time": 483, "26513": 483, "23718": 483, "tam": 483, "benc": 483, "gedai": 483, "20589": 483, "26177": 483, "15068": 483, "2202": 483, "get_algorithm_impl": 483, "dupuy": 483, "26167": 483, "25718": 483, "26475": 483, "26457": 483, "26385": 483, "26402": 483, "25913": 483, "swati": 483, "jaiswal": 483, "26186": 483, "26367": 483, "26309": 483, "25995": 483, "23992": 483, "mapresult": 483, "26117": 483, "25949": 483, "25911": 483, "26045": 483, "12923": 483, "brazil": 483, "rocco": 483, "25945": 483, "26202": 483, "23076": 483, "nyberg": 483, "19883": 483, "26099": 483, "26147": 483, "25935": 483, "16620": 483, "26013": 483, "25850": 483, "25822": 483, "22642": 483, "24705": 483, "_parse_makefil": 483, "26069": 483, "22138": 483, "mcculli": 483, "25672": 483, "ssl_mode_release_buff": 483, "26012": 483, "24120": 483, "ulrich": 483, "25447": 483, "25802": 483, "24103": 483, "25860": 483, "samson": 483, "25914": 483, "25902": 483, "22227": 483, "25717": 483, "5a1": 483, "24903": 483, "25764": 483, "25771": 483, "6478": 483, "14285": 483, "19771": 483, "25177": 483, "10131": 483, "ganisin": 483, "7990": 483, "santoso": 483, "25725": 483, "25663": 483, "25688": 483, "23914": 483, "25691": 483, "25624": 483, "25626": 483, "25583": 483, "6973": 483, "mauro": 483, "25590": 483, "25498": 483, "eryksun": 483, "25584": 483, "25446": 483, "18010": 483, "25554": 483, "18973": 483, "25510": 483, "ryosuk": 483, "ito": 483, "25503": 483, "vandenberg": 483, "25515": 483, "21827": 483, "25390": 483, "25441": 483, "25410": 483, "25411": 483, "simon04": 483, "25407": 483, "25406": 483, "25364": 483, "25328": 483, "enable_smtputf8": 483, "25316": 483, "distutilsplatformerror": 483, "25380": 483, "stack_glob": 483, "23972": 483, "reuseport": 483, "reuseaddr": 483, "25304": 483, "25232": 483, "cgirequesthandl": 483, "24657": 483, "23600": 483, "25203": 483, "22241": 483, "23517": 483, "24633": 483, "24874": 483, "24360": 483, "23426": 483, "run_setup": 483, "13938": 483, "stringtyp": 483, "8585": 483, "zipimporter2": 483, "18622": 483, "palumbo": 483, "laurent": 483, "buyst": 483, "24426": 483, "23661": 483, "ignacio": 483, "rossi": 483, "25578": 483, "getpeerc": 483, "25530": 483, "25569": 483, "25471": 483, "25319": 483, "26050": 483, "25924": 483, "26406": 483, "26848": 483, "20640": 483, "confighelpsourceedit": 483, "iobind": 483, "25905": 483, "15348": 483, "24455": 483, "15347": 483, "vwait": 483, "25313": 483, "currentthem": 483, "24782": 483, "22726": 483, "24820": 483, "cobalt": 483, "25224": 483, "24972": 483, "24570": 483, "24988": 483, "scrolledlist": 483, "24801": 483, "25173": 483, "25198": 483, "pitch": 483, "blueish": 483, "25225": 483, "21995": 483, "22820": 483, "25219": 483, "24861": 483, "idleib": 483, "25199": 483, "16893": 483, "helpdialog": 483, "helt": 483, "24199": 483, "idlev": 483, "24790": 483, "26736": 483, "6953": 483, "23606": 483, "24952": 483, "mattip": 483, "26014": 483, "21916": 483, "loys": 483, "26295": 483, "testdir": 483, "26523": 483, "26015": 483, "26325": 483, "25940": 483, "25616": 483, "test_collect": 483, "test_ordered_dict": 483, "25188": 483, "22806": 483, "18174": 483, "25260": 483, "26583": 483, "test_timestamp_overflow": 483, "test_import": 483, "21277": 483, "ffi_conveni": 483, "26884": 483, "22359": 483, "21668": 483, "_ctypes_test": 483, "25702": 483, "26624": 483, "17603": 483, "fileblock": 483, "26079": 483, "bjoern": 483, "thiel": 483, "26465": 483, "2g": 483, "25348": 483, "build_pgo": 483, "25827": 483, "25696": 483, "j9": 483, "24986": 483, "_math": 483, "26268": 483, "25136": 483, "24324": 483, "27053": 483, "make_zip": 483, "prepare_ssl": 483, "26071": 483, "26073": 483, "26065": 483, "25022": 483, "example_nt": 483, "26799": 483, "ilsch": 483, "26271": 483, "shaulov": 483, "26489": 483, "26316": 483, "25440": 483, "26312": 483, "26198": 483, "32551": 483, "6rc1": 483, "30657": 483, "1000158": 483, "bosamiya": 483, "29537": 483, "30383": 483, "30523": 483, "30540": 483, "30675": 483, "29073": 483, "28189": 483, "dictitems_contain": 483, "26020": 483, "19003": 483, "26664": 483, "ld_so_aix": 483, "26867": 483, "26194": 483, "17633": 483, "27223": 483, "_read_readi": 483, "_conn_lost": 483, "22970": 483, "25500": 483, "25715": 483, "25182": 483, "stdprinter": 483, "25131": 483, "25150": 483, "_py_atomic_": 483, "openmp": 483, "24483": 483, "22958": 483, "22609": 483, "25111": 483, "25262": 483, "binbytes8": 483, "binunicode8": 483, "25034": 483, "anthon": 483, "neut": 483, "25233": 483, "23329": 483, "_unpickler_read": 483, "25047": 483, "25135": 483, "deque_clear": 483, "19143": 483, "25092": 483, "25155": 483, "25108": 483, "25118": 483, "24684": 483, "25060": 483, "24857": 483, "kaptur": 483, "23144": 483, "24982": 483, "25019": 483, "16180": 483, "24891": 483, "24992": 483, "24881": 483, "21112": 483, "24764": 483, "read_multi": 483, "landri": 483, "24913": 483, "bryce": 483, "darl": 483, "24774": 483, "chiu": 483, "hsiang": 483, "hsu": 483, "21159": 483, "20362": 483, "honour": 483, "ilia": 483, "kurenkov": 483, "23572": 483, "12067": 483, "23725": 483, "24808": 483, "weston": 483, "22812": 483, "mca": 483, "nulti": 483, "25099": 483, "23919": 483, "24915": 483, "24910": 483, "msis": 483, "25450": 483, "25164": 483, "25143": 483, "25163": 483, "25089": 483, "25165": 483, "25112": 483, "25102": 483, "25081": 483, "25091": 483, "25126": 483, "25213": 483, "requestedexecutionlevel": 483, "25071": 483, "25029": 483, "test_strptim": 483, "25027": 483, "24305": 483, "24912": 483, "24975": 483, "24917": 483, "time_strftim": 483, "24748": 483, "24635": 483, "24989": 483, "24769": 483, "21167": 483, "24492": 483, "24847": 483, "24839": 483, "24867": 483, "24667": 483, "odict": 483, "24824": 483, "24634": 483, "24798": 483, "_msvccompil": 483, "4395": 483, "23973": 483, "23004": 483, "hill": 483, "23888": 483, "23652": 483, "22932": 483, "shachnev": 483, "23779": 483, "23319": 483, "gautier": 483, "23254": 483, "19450": 483, "17527": 483, "sbardella": 483, "24791": 483, "23672": 483, "mohd": 483, "sanad": 483, "zaki": 483, "rizvi": 483, "24745": 483, "tkfixedfont": 483, "21192": 483, "adnan": 483, "umer": 483, "13884": 483, "tearoff": 483, "24129": 483, "20769": 483, "dorian": 483, "pula": 483, "23589": 483, "yongzhi": 483, "24729": 483, "24751": 483, "24569": 483, "24583": 483, "24407": 483, "24619": 483, "24687": 483, "15944": 483, "23441": 483, "sekera": 483, "24683": 483, "21697": 483, "eduardo": 483, "seabra": 483, "24695": 483, "24620": 483, "22485": 483, "22153": 483, "evilzero": 483, "24580": 483, "24206": 483, "24631": 483, "24608": 483, "18684": 483, "24259": 483, "24669": 483, "kai": 483, "groner": 483, "24688": 483, "24603": 483, "24467": 483, "24345": 483, "py_tp_fin": 483, "21750": 483, "24552": 483, "24514": 483, "19176": 483, "20387": 483, "24456": 483, "24336": 483, "24522": 483, "24489": 483, "24408": 483, "24347": 483, "24348": 483, "24359": 483, "24368": 483, "24362": 483, "24377": 483, "24369": 483, "24373": 483, "_testmultiphas": 483, "16690": 483, "24458": 483, "24351": 483, "24432": 483, "24115": 483, "_pydict_contain": 483, "24328": 483, "11205": 483, "24285": 483, "23247": 483, "5633": 483, "24326": 483, "23934": 483, "24276": 483, "23955": 483, "24257": 483, "22939": 483, "23985": 483, "24102": 483, "7x": 483, "23290": 483, "set_merg": 483, "2292": 483, "24096": 483, "23996": 483, "23911": 483, "24192": 483, "24022": 483, "22906": 483, "24230": 483, "24244": 483, "15836": 483, "wagner": 483, "9858": 483, "laura": 483, "rupprecht": 483, "22107": 483, "23780": 483, "6598": 483, "24091": 483, "21931": 483, "fci": 483, "armstrong": 483, "mangle_from": 483, "18682": 483, "23796": 483, "hergenroed": 483, "24155": 483, "20274": 483, "24134": 483, "23880": 483, "getdoubl": 483, "24094": 483, "9246": 483, "1025": 483, "23917": 483, "23008": 483, "23908": 483, "23728": 483, "23887": 483, "24178": 483, "24179": 483, "22547": 483, "23898": 483, "bayer": 483, "24298": 483, "23184": 483, "sweigart": 483, "21520": 483, "9517": 483, "christi": 483, "22155": 483, "24029": 483, "24077": 483, "24000": 483, "24001": 483, "23330": 483, "24031": 483, "22980": 483, "kfreebsd": 483, "22631": 483, "courtesi": 483, "23731": 483, "23726": 483, "23309": 483, "22977": 483, "23466": 483, "24044": 483, "21354": 483, "23840": 483, "23703": 483, "901e4e52b20a": 483, "_curs": 483, "19933": 483, "calledprocess": 483, "21217": 483, "balling": 483, "allison": 483, "24521": 483, "22931": 483, "23811": 483, "21116": 483, "boquien": 483, "22982": 483, "23529": 483, "21859": 483, "23865": 483, "23400": 483, "10838": 483, "23411": 483, "23881": 483, "22721": 483, "15133": 483, "23338": 483, "kato": 483, "16840": 483, "23834": 483, "23618": 483, "21526": 483, "23836": 483, "18473": 483, "3to2": 483, "23485": 483, "23752": 483, "23745": 483, "22117": 483, "23310": 483, "kasia": 483, "jachim": 483, "23817": 483, "sovers": 483, "23501": 483, "23799": 483, "22390": 483, "18128": 483, "23935": 483, "23944": 483, "20586": 483, "23492": 483, "23500": 483, "methoddef": 483, "23998": 483, "pyimport_reinitlock": 483, "23753": 483, "23192": 483, "23629": 483, "14260": 483, "23792": 483, "pipepag": 483, "23775": 483, "23765": 483, "isbadstringptr": 483, "22364": 483, "23742": 483, "21802": 483, "23502": 483, "17530": 483, "22687": 483, "tetxtwrap": 483, "4727": 483, "23657": 483, "23688": 483, "23647": 483, "23539": 483, "22351": 483, "23715": 483, "23646": 483, "23136": 483, "carrol": 483, "23700": 483, "bohuslav": 483, "kabrda": 483, "22903": 483, "23631": 483, "rdivmod": 483, "23138": 483, "23051": 483, "diamant": 483, "22928": 483, "23615": 483, "23585": 483, "23583": 483, "22289": 483, "test_urllib2net": 483, "22826": 483, "bkfile": 483, "23571": 483, "23103": 483, "23476": 483, "x509_v_flag_trusted_first": 483, "23576": 483, "stall": 483, "23504": 483, "23563": 483, "19980": 483, "23521": 483, "21619": 483, "6639": 483, "814253": 483, "23215": 483, "aleksi": 483, "torhamo": 483, "5700": 483, "23374": 483, "23481": 483, "21548": 483, "apropo": 483, "22885": 483, "23146": 483, "23096": 483, "19105": 483, "23421": 483, "wdv4758h": 483, "23367": 483, "23361": 483, "19705": 483, "yeo": 483, "23801": 483, "23445": 483, "23686": 483, "23465": 483, "23285": 483, "22735": 483, "22896": 483, "21295": 483, "16795": 483, "22986": 483, "15859": 483, "campbel": 483, "barton": 483, "21408": 483, "23321": 483, "23253": 483, "22038": 483, "pyatom": 483, "lima": 483, "templ": 483, "20284": 483, "23048": 483, "20335": 483, "22869": 483, "pylifecycl": 483, "22335": 483, "0x7fffffff": 483, "22653": 483, "22643": 483, "22604": 483, "21052": 483, "22470": 483, "22520": 483, "22519": 483, "22518": 483, "1764286": 483, "18554": 483, "21391": 483, "11471": 483, "22215": 483, "22258": 483, "f_setfd": 483, "21389": 483, "22206": 483, "20184": 483, "22116": 483, "22077": 483, "20179": 483, "22082": 483, "slotdef": 483, "21897": 483, "21669": 483, "21642": 483, "42els": 483, "21523": 483, "pessimist": 483, "21418": 483, "21425": 483, "21435": 483, "21377": 483, "20355": 483, "21274": 483, "path_max": 483, "20904": 483, "fpu": 483, "m68k": 483, "21209": 483, "21193": 483, "21134": 483, "19537": 483, "20929": 483, "20731": 483, "20637": 483, "ingebretson": 483, "19995": 483, "19655": 483, "12546": 483, "13598": 483, "elson": 483, "8931": 483, "23165": 483, "23399": 483, "13128": 483, "23099": 483, "23326": 483, "23363": 483, "23364": 483, "23366": 483, "23369": 483, "encode_basestring_ascii": 483, "23353": 483, "why_yield": 483, "why_return": 483, "14099": 483, "tellabl": 483, "18518": 483, "23094": 483, "23268": 483, "19996": 483, "23248": 483, "23098": 483, "dev_t": 483, "21817": 483, "23250": 483, "23063": 483, "23209": 483, "23225": 483, "23143": 483, "23132": 483, "23112": 483, "23093": 483, "23111": 483, "22585": 483, "19104": 483, "23071": 483, "22783": 483, "15513": 483, "19858": 483, "22095": 483, "23016": 483, "21775": 483, "vfat": 483, "1218234": 483, "21740": 483, "23009": 483, "22959": 483, "16043": 483, "gzip_decod": 483, "1753": 483, "22966": 483, "pyc_compil": 483, "21971": 483, "21032": 483, "22902": 483, "pach": 483, "21356": 483, "bernard": 483, "spil": 483, "22915": 483, "22921": 483, "22894": 483, "22370": 483, "22841": 483, "ludov": 483, "gasc": 483, "httpbasicpriorauthhandl": 483, "22849": 483, "12728": 483, "22821": 483, "22824": 483, "22406": 483, "17293": 483, "netstat": 483, "aivar": 483, "kalv": 483, "22769": 483, "22417": 483, "22775": 483, "22776": 483, "22665": 483, "17381": 483, "22410": 483, "22759": 483, "8876": 483, "22217": 483, "22457": 483, "18216": 483, "22676": 483, "18853": 483, "__nain__": 483, "9351": 483, "7559": 483, "21991": 483, "22641": 483, "17401": 483, "compile_": 483, "20152": 483, "18643": 483, "22435": 483, "13096": 483, "11694": 483, "22462": 483, "21173": 483, "11866": 483, "21905": 483, "21883": 483, "22219": 483, "22449": 483, "ssl_cert_dir": 483, "ssl_cert_fil": 483, "22508": 483, "20076": 483, "20079": 483, "22396": 483, "22517": 483, "23392": 483, "10510": 483, "oshmyan": 483, "22448": 483, "oliva": 483, "22427": 483, "22362": 483, "20912": 483, "21866": 483, "22278": 483, "issue22118": 483, "22415": 483, "groupref_exist": 483, "22423": 483, "21332": 483, "21091": 483, "21079": 483, "22247": 483, "22419": 483, "bobrov": 483, "22384": 483, "22168": 483, "21147": 483, "21951": 483, "22338": 483, "12410": 483, "21270": 483, "22226": 483, "19524": 483, "19546": 483, "22051": 483, "21933": 483, "21597": 483, "kani": 483, "18132": 483, "22216": 483, "22098": 483, "22185": 483, "zongker": 483, "22287": 483, "_pytime_gettimeofday": 483, "librt": 483, "22182": 483, "move_fil": 483, "22042": 483, "22236": 483, "15696": 483, "22068": 483, "22165": 483, "8797": 483, "bull": 483, "20729": 483, "21448": 483, "22184": 483, "17923": 483, "delhallt": 483, "22176": 483, "elf": 483, "abiv2": 483, "21121": 483, "21975": 483, "20170": 483, "exists_ok": 483, "22127": 483, "22085": 483, "21580": 483, "17172": 483, "21704": 483, "20173": 483, "22033": 483, "21947": 483, "16133": 483, "handle_read": 483, "22044": 483, "call_tzinfo_method": 483, "flanagan": 483, "1034h": 483, "4350": 483, "6167": 483, "15275": 483, "21888": 483, "22032": 483, "22031": 483, "21044": 483, "21966": 483, "19076": 483, "16382": 483, "21932": 483, "21942": 483, "11259": 483, "set_termin": 483, "12523": 483, "21707": 483, "replace_paths_in_cod": 483, "20639": 483, "tikhonov": 483, "21714": 483, "21151": 483, "21090": 483, "21781": 483, "21679": 483, "21863": 483, "11453": 483, "21858": 483, "21476": 483, "21729": 483, "21491": 483, "21832": 483, "21722": 483, "dengler": 483, "21723": 483, "21711": 483, "21766": 483, "21310": 483, "21256": 483, "21677": 483, "nonnorm": 483, "11709": 483, "21515": 483, "13223": 483, "writedoc": 483, "21463": 483, "21618": 483, "21552": 483, "14315": 483, "sapin": 483, "21402": 483, "3015": 483, "21513": 483, "21137": 483, "21538": 483, "21525": 483, "22166": 483, "_forget_codec": 483, "10744": 483, "nontrivi": 483, "13916": 483, "20998": 483, "21075": 483, "21226": 483, "21398": 483, "21424": 483, "heaqp": 483, "nmsmallest": 483, "21396": 483, "18314": 483, "sman": 483, "21088": 483, "21407": 483, "10650": 483, "21469": 483, "19414": 483, "21421": 483, "21101": 483, "21321": 483, "anton": 483, "afanasyev": 483, "21057": 483, "9815": 483, "13204": 483, "19385": 483, "21207": 483, "21291": 483, "21127": 483, "str_": 483, "15002": 483, "_temporaryfilewrapp": 483, "_temporaryfileclos": 483, "12220": 483, "mindom": 483, "21068": 483, "21276": 483, "use_xattr": 483, "incas": 483, "20896": 483, "21239": 483, "21203": 483, "jure": 483, "koren": 483, "21222": 483, "21197": 483, "17498": 483, "17826": 483, "7776": 483, "21529": 483, "vranken": 483, "4616": 483, "21169": 483, "21171": 483, "20539": 483, "21172": 483, "21155": 483, "21136": 483, "20636": 483, "21149": 483, "21058": 483, "21200": 483, "21013": 483, "20145": 483, "20633": 483, "20980": 483, "20990": 483, "21015": 483, "21000": 483, "20884": 483, "21499": 483, "test_api": 483, "19165": 483, "20574": 483, "20879": 483, "19157": 483, "usuabl": 483, "11599": 483, "distutils_debug": 483, "4931": 483, "grok_environment_error": 483, "20875": 483, "11558": 483, "20283": 483, "20778": 483, "20791": 483, "otten": 483, "19748": 483, "outsiz": 483, "2037": 483, "19573": 483, "20378": 483, "20816": 483, "lowin": 483, "20817": 483, "6676": 483, "gutteridg": 483, "21117": 483, "gi_": 483, "163": 483, "21311": 483, "_osx_support": 483, "szakmeist": 483, "11571": 483, "21801": 483, "21923": 483, "_config_var": 483, "21323": 483, "19435": 483, "byrn": 483, "22733": 483, "ffi_prep_arg": 483, "23302": 483, "mss": 483, "20577": 483, "formatparagraph": 483, "3068": 483, "16233": 483, "4832": 483, "21986": 483, "17390": 483, "14105": 483, "21765": 483, "hyperpars": 483, "21940": 483, "widgetredirector": 483, "18592": 483, "searchdialogbas": 483, "webster": 483, "21694": 483, "21686": 483, "12387": 483, "21695": 483, "18910": 483, "18292": 483, "autoexpand": 483, "saihadhav": 483, "18409": 483, "21477": 483, "18104": 483, "21139": 483, "21284": 483, "17654": 483, "23180": 483, "15506": 483, "pkg_prog_pkg_config": 483, "22935": 483, "22592": 483, "22591": 483, "djgpp": 483, "16537": 483, "hosmer": 483, "21958": 483, "have_round": 483, "18093": 483, "15759": 483, "linkcheck": 483, "21141": 483, "build_ssl": 483, "21037": 483, "19962": 483, "21285": 483, "15234": 483, "17861": 483, "generate_opcode_h": 483, "20644": 483, "20022": 483, "15968": 483, "17095": 483, "21811": 483, "21166": 483, "18096": 483, "17219": 483, "22919": 483, "21236": 483, "_msi": 483, "14203": 483, "bytearray_getbuff": 483, "bytesiobuf_getbuff": 483, "array_buffer_getbuf": 483, "22445": 483, "npy_relaxed_strides_check": 483, "22079": 483, "_pyobject_gc_calloc": 483, "20942": 483, "init_frozen": 483, "19548": 483, "22394": 483, "21514": 483, "21777": 483, "6916": 483, "17386": 483, "21312": 483, "thread_foobar": 483, "mccracken": 483, "21043": 483, "20765": 483, "19407": 483, "19697": 483, "18982": 483, "22838": 483, "22173": 483, "16000": 483, "test_curs": 483, "21456": 483, "remi": 483, "pointel": 483, "20746": 483, "test_pdb": 483, "22060": 483, "22104": 483, "22111": 483, "22002": 483, "21976": 483, "21918": 483, "9554": 483, "coneybear": 483, "radu": 483, "voicila": 483, "20155": 483, "19493": 483, "18492": 483, "21634": 483, "21605": 483, "21493": 483, "19925": 483, "21522": 483, "itemconfigur": 483, "paneconfigur": 483, "entryconfigur": 483, "17756": 483, "test_cod": 483, "17752": 483, "18604": 483, "21275": 483, "21223": 483, "20635": 483, "20743": 483, "test_tcl": 483, "21097": 483, "test_namespace_pkg": 483, "21503": 483, "test_both": 483, "20939": 483, "20668": 483, "21093": 483, "test_macholib": 483, "libz": 483, "22770": 483, "23211": 483, "23345": 483, "8zc": 483, "22314": 483, "22615": 483, "makelocalealia": 483, "22201": 483, "22120": 483, "18974": 483, "21906": 483, "21629": 483, "16047": 483, "11824": 483, "20535": 483, "23260": 483, "17896": 483, "17717": 483, "nasm": 483, "21907": 483, "22644": 483, "10747": 483, "kilburn": 483, "cp35": 483}, "objects": {"": [[66, 0, 1, "c.CO_FUTURE_DIVISION", "CO_FUTURE_DIVISION"], [58, 1, 1, "c.METH_CLASS", "METH_CLASS"], [58, 1, 1, "c.METH_COEXIST", "METH_COEXIST"], [58, 1, 1, "c.METH_FASTCALL", "METH_FASTCALL"], [58, 1, 1, "c.METH_KEYWORDS", "METH_KEYWORDS"], [58, 1, 1, "c.METH_METHOD", "METH_METHOD"], [58, 1, 1, "c.METH_NOARGS", "METH_NOARGS"], [58, 1, 1, "c.METH_O", "METH_O"], [58, 1, 1, "c.METH_STATIC", "METH_STATIC"], [58, 1, 1, "c.METH_VARARGS", "METH_VARARGS"], [42, 1, 1, "c.PYMEM_DOMAIN_MEM", "PYMEM_DOMAIN_MEM"], [42, 1, 1, "c.PYMEM_DOMAIN_OBJ", "PYMEM_DOMAIN_OBJ"], [42, 1, 1, "c.PYMEM_DOMAIN_RAW", "PYMEM_DOMAIN_RAW"], [4, 1, 1, "c.PY_MAJOR_VERSION", "PY_MAJOR_VERSION"], [4, 1, 1, "c.PY_MICRO_VERSION", "PY_MICRO_VERSION"], [4, 1, 1, "c.PY_MINOR_VERSION", "PY_MINOR_VERSION"], [4, 1, 1, "c.PY_RELEASE_LEVEL", "PY_RELEASE_LEVEL"], [4, 1, 1, "c.PY_RELEASE_SERIAL", "PY_RELEASE_SERIAL"], [10, 1, 1, "c.PY_VECTORCALL_ARGUMENTS_OFFSET", "PY_VECTORCALL_ARGUMENTS_OFFSET"], [4, 1, 1, "c.PY_VERSION_HEX", "PY_VERSION_HEX"], [36, 2, 1, "c.PyAIter_Check", "PyAIter_Check"], [64, 4, 1, "c.PyASCIIObject", "PyASCIIObject"], [55, 2, 1, "c.PyAnySet_Check", "PyAnySet_Check"], [55, 2, 1, "c.PyAnySet_CheckExact", "PyAnySet_CheckExact"], [5, 2, 1, "c.PyArg_Parse", "PyArg_Parse"], [5, 2, 1, "c.PyArg_ParseTuple", "PyArg_ParseTuple"], [5, 2, 1, "c.PyArg_ParseTupleAndKeywords", "PyArg_ParseTupleAndKeywords"], [5, 2, 1, "c.PyArg_UnpackTuple", "PyArg_UnpackTuple"], [5, 2, 1, "c.PyArg_VaParse", "PyArg_VaParse"], [5, 2, 1, "c.PyArg_VaParseTupleAndKeywords", "PyArg_VaParseTupleAndKeywords"], [5, 2, 1, "c.PyArg_ValidateKeywordArguments", "PyArg_ValidateKeywordArguments"], [63, 4, 1, "c.PyAsyncMethods", "PyAsyncMethods"], [7, 1, 1, "c.PyBUF_ANY_CONTIGUOUS", "PyBUF_ANY_CONTIGUOUS"], [7, 1, 1, "c.PyBUF_CONTIG", "PyBUF_CONTIG"], [7, 1, 1, "c.PyBUF_CONTIG_RO", "PyBUF_CONTIG_RO"], [7, 1, 1, "c.PyBUF_C_CONTIGUOUS", "PyBUF_C_CONTIGUOUS"], [7, 1, 1, "c.PyBUF_FORMAT", "PyBUF_FORMAT"], [7, 1, 1, "c.PyBUF_FULL", "PyBUF_FULL"], [7, 1, 1, "c.PyBUF_FULL_RO", "PyBUF_FULL_RO"], [7, 1, 1, "c.PyBUF_F_CONTIGUOUS", "PyBUF_F_CONTIGUOUS"], [7, 1, 1, "c.PyBUF_INDIRECT", "PyBUF_INDIRECT"], [7, 1, 1, "c.PyBUF_MAX_NDIM", "PyBUF_MAX_NDIM"], [7, 1, 1, "c.PyBUF_ND", "PyBUF_ND"], [43, 1, 1, "c.PyBUF_READ", "PyBUF_READ"], [7, 1, 1, "c.PyBUF_RECORDS", "PyBUF_RECORDS"], [7, 1, 1, "c.PyBUF_RECORDS_RO", "PyBUF_RECORDS_RO"], [7, 1, 1, "c.PyBUF_SIMPLE", "PyBUF_SIMPLE"], [7, 1, 1, "c.PyBUF_STRIDED", "PyBUF_STRIDED"], [7, 1, 1, "c.PyBUF_STRIDED_RO", "PyBUF_STRIDED_RO"], [7, 1, 1, "c.PyBUF_STRIDES", "PyBUF_STRIDES"], [7, 1, 1, "c.PyBUF_WRITABLE", "PyBUF_WRITABLE"], [43, 1, 1, "c.PyBUF_WRITE", "PyBUF_WRITE"], [6, 2, 1, "c.PyBool_Check", "PyBool_Check"], [6, 2, 1, "c.PyBool_FromLong", "PyBool_FromLong"], [6, 0, 1, "c.PyBool_Type", "PyBool_Type"], [63, 4, 1, "c.PyBufferProcs", "PyBufferProcs"], [7, 2, 1, "c.PyBuffer_FillContiguousStrides", "PyBuffer_FillContiguousStrides"], [7, 2, 1, "c.PyBuffer_FillInfo", "PyBuffer_FillInfo"], [7, 2, 1, "c.PyBuffer_FromContiguous", "PyBuffer_FromContiguous"], [7, 2, 1, "c.PyBuffer_GetPointer", "PyBuffer_GetPointer"], [7, 2, 1, "c.PyBuffer_IsContiguous", "PyBuffer_IsContiguous"], [7, 2, 1, "c.PyBuffer_Release", "PyBuffer_Release"], [7, 2, 1, "c.PyBuffer_SizeFromFormat", "PyBuffer_SizeFromFormat"], [7, 2, 1, "c.PyBuffer_ToContiguous", "PyBuffer_ToContiguous"], [8, 4, 1, "c.PyByteArrayObject", "PyByteArrayObject"], [8, 2, 1, "c.PyByteArray_AS_STRING", "PyByteArray_AS_STRING"], [8, 2, 1, "c.PyByteArray_AsString", "PyByteArray_AsString"], [8, 2, 1, "c.PyByteArray_Check", "PyByteArray_Check"], [8, 2, 1, "c.PyByteArray_CheckExact", "PyByteArray_CheckExact"], [8, 2, 1, "c.PyByteArray_Concat", "PyByteArray_Concat"], [8, 2, 1, "c.PyByteArray_FromObject", "PyByteArray_FromObject"], [8, 2, 1, "c.PyByteArray_FromStringAndSize", "PyByteArray_FromStringAndSize"], [8, 2, 1, "c.PyByteArray_GET_SIZE", "PyByteArray_GET_SIZE"], [8, 2, 1, "c.PyByteArray_Resize", "PyByteArray_Resize"], [8, 2, 1, "c.PyByteArray_Size", "PyByteArray_Size"], [8, 0, 1, "c.PyByteArray_Type", "PyByteArray_Type"], [9, 4, 1, "c.PyBytesObject", "PyBytesObject"], [9, 2, 1, "c.PyBytes_AS_STRING", "PyBytes_AS_STRING"], [9, 2, 1, "c.PyBytes_AsString", "PyBytes_AsString"], [9, 2, 1, "c.PyBytes_AsStringAndSize", "PyBytes_AsStringAndSize"], [9, 2, 1, "c.PyBytes_Check", "PyBytes_Check"], [9, 2, 1, "c.PyBytes_CheckExact", "PyBytes_CheckExact"], [9, 2, 1, "c.PyBytes_Concat", "PyBytes_Concat"], [9, 2, 1, "c.PyBytes_ConcatAndDel", "PyBytes_ConcatAndDel"], [9, 2, 1, "c.PyBytes_FromFormat", "PyBytes_FromFormat"], [9, 2, 1, "c.PyBytes_FromFormatV", "PyBytes_FromFormatV"], [9, 2, 1, "c.PyBytes_FromObject", "PyBytes_FromObject"], [9, 2, 1, "c.PyBytes_FromString", "PyBytes_FromString"], [9, 2, 1, "c.PyBytes_FromStringAndSize", "PyBytes_FromStringAndSize"], [9, 2, 1, "c.PyBytes_GET_SIZE", "PyBytes_GET_SIZE"], [9, 2, 1, "c.PyBytes_Size", "PyBytes_Size"], [9, 0, 1, "c.PyBytes_Type", "PyBytes_Type"], [58, 4, 1, "c.PyCFunction", "PyCFunction"], [58, 4, 1, "c.PyCFunctionWithKeywords", "PyCFunctionWithKeywords"], [58, 2, 1, "c.PyCFunction_New", "PyCFunction_New"], [58, 2, 1, "c.PyCFunction_NewEx", "PyCFunction_NewEx"], [58, 4, 1, "c.PyCMethod", "PyCMethod"], [58, 2, 1, "c.PyCMethod_New", "PyCMethod_New"], [37, 2, 1, "c.PyCallIter_Check", "PyCallIter_Check"], [37, 2, 1, "c.PyCallIter_New", "PyCallIter_New"], [37, 0, 1, "c.PyCallIter_Type", "PyCallIter_Type"], [10, 2, 1, "c.PyCallable_Check", "PyCallable_Check"], [11, 4, 1, "c.PyCapsule", "PyCapsule"], [11, 2, 1, "c.PyCapsule_CheckExact", "PyCapsule_CheckExact"], [11, 4, 1, "c.PyCapsule_Destructor", "PyCapsule_Destructor"], [11, 2, 1, "c.PyCapsule_GetContext", "PyCapsule_GetContext"], [11, 2, 1, "c.PyCapsule_GetDestructor", "PyCapsule_GetDestructor"], [11, 2, 1, "c.PyCapsule_GetName", "PyCapsule_GetName"], [11, 2, 1, "c.PyCapsule_GetPointer", "PyCapsule_GetPointer"], [11, 2, 1, "c.PyCapsule_Import", "PyCapsule_Import"], [11, 2, 1, "c.PyCapsule_IsValid", "PyCapsule_IsValid"], [11, 2, 1, "c.PyCapsule_New", "PyCapsule_New"], [11, 2, 1, "c.PyCapsule_SetContext", "PyCapsule_SetContext"], [11, 2, 1, "c.PyCapsule_SetDestructor", "PyCapsule_SetDestructor"], [11, 2, 1, "c.PyCapsule_SetName", "PyCapsule_SetName"], [11, 2, 1, "c.PyCapsule_SetPointer", "PyCapsule_SetPointer"], [12, 4, 1, "c.PyCellObject", "PyCellObject"], [12, 2, 1, "c.PyCell_Check", "PyCell_Check"], [12, 2, 1, "c.PyCell_GET", "PyCell_GET"], [12, 2, 1, "c.PyCell_Get", "PyCell_Get"], [12, 2, 1, "c.PyCell_New", "PyCell_New"], [12, 2, 1, "c.PyCell_SET", "PyCell_SET"], [12, 2, 1, "c.PyCell_Set", "PyCell_Set"], [12, 0, 1, "c.PyCell_Type", "PyCell_Type"], [13, 4, 1, "c.PyCodeEvent", "PyCodeEvent"], [13, 4, 1, "c.PyCodeObject", "PyCodeObject"], [13, 2, 1, "c.PyCode_AddWatcher", "PyCode_AddWatcher"], [13, 2, 1, "c.PyCode_Addr2Line", "PyCode_Addr2Line"], [13, 2, 1, "c.PyCode_Addr2Location", "PyCode_Addr2Location"], [13, 2, 1, "c.PyCode_Check", "PyCode_Check"], [13, 2, 1, "c.PyCode_ClearWatcher", "PyCode_ClearWatcher"], [13, 2, 1, "c.PyCode_GetCellvars", "PyCode_GetCellvars"], [13, 2, 1, "c.PyCode_GetCode", "PyCode_GetCode"], [13, 2, 1, "c.PyCode_GetFirstFree", "PyCode_GetFirstFree"], [13, 2, 1, "c.PyCode_GetFreevars", "PyCode_GetFreevars"], [13, 2, 1, "c.PyCode_GetNumFree", "PyCode_GetNumFree"], [13, 2, 1, "c.PyCode_GetVarnames", "PyCode_GetVarnames"], [13, 2, 1, "c.PyCode_NewEmpty", "PyCode_NewEmpty"], [13, 0, 1, "c.PyCode_Type", "PyCode_Type"], [13, 4, 1, "c.PyCode_WatchCallback", "PyCode_WatchCallback"], [14, 2, 1, "c.PyCodec_BackslashReplaceErrors", "PyCodec_BackslashReplaceErrors"], [14, 2, 1, "c.PyCodec_Decode", "PyCodec_Decode"], [14, 2, 1, "c.PyCodec_Decoder", "PyCodec_Decoder"], [14, 2, 1, "c.PyCodec_Encode", "PyCodec_Encode"], [14, 2, 1, "c.PyCodec_Encoder", "PyCodec_Encoder"], [14, 2, 1, "c.PyCodec_IgnoreErrors", "PyCodec_IgnoreErrors"], [14, 2, 1, "c.PyCodec_IncrementalDecoder", "PyCodec_IncrementalDecoder"], [14, 2, 1, "c.PyCodec_IncrementalEncoder", "PyCodec_IncrementalEncoder"], [14, 2, 1, "c.PyCodec_KnownEncoding", "PyCodec_KnownEncoding"], [14, 2, 1, "c.PyCodec_LookupError", "PyCodec_LookupError"], [14, 2, 1, "c.PyCodec_NameReplaceErrors", "PyCodec_NameReplaceErrors"], [14, 2, 1, "c.PyCodec_Register", "PyCodec_Register"], [14, 2, 1, "c.PyCodec_RegisterError", "PyCodec_RegisterError"], [14, 2, 1, "c.PyCodec_ReplaceErrors", "PyCodec_ReplaceErrors"], [14, 2, 1, "c.PyCodec_StreamReader", "PyCodec_StreamReader"], [14, 2, 1, "c.PyCodec_StreamWriter", "PyCodec_StreamWriter"], [14, 2, 1, "c.PyCodec_StrictErrors", "PyCodec_StrictErrors"], [14, 2, 1, "c.PyCodec_Unregister", "PyCodec_Unregister"], [14, 2, 1, "c.PyCodec_XMLCharRefReplaceErrors", "PyCodec_XMLCharRefReplaceErrors"], [64, 4, 1, "c.PyCompactUnicodeObject", "PyCompactUnicodeObject"], [66, 5, 1, "c.PyCompilerFlags", "PyCompilerFlags"], [15, 4, 1, "c.PyComplexObject", "PyComplexObject"], [15, 2, 1, "c.PyComplex_AsCComplex", "PyComplex_AsCComplex"], [15, 2, 1, "c.PyComplex_Check", "PyComplex_Check"], [15, 2, 1, "c.PyComplex_CheckExact", "PyComplex_CheckExact"], [15, 2, 1, "c.PyComplex_FromCComplex", "PyComplex_FromCComplex"], [15, 2, 1, "c.PyComplex_FromDoubles", "PyComplex_FromDoubles"], [15, 2, 1, "c.PyComplex_ImagAsDouble", "PyComplex_ImagAsDouble"], [15, 2, 1, "c.PyComplex_RealAsDouble", "PyComplex_RealAsDouble"], [15, 0, 1, "c.PyComplex_Type", "PyComplex_Type"], [34, 4, 1, "c.PyConfig", "PyConfig"], [34, 2, 1, "c.PyConfig_Clear", "PyConfig_Clear"], [34, 2, 1, "c.PyConfig_InitIsolatedConfig", "PyConfig_InitIsolatedConfig"], [34, 2, 1, "c.PyConfig_InitPythonConfig", "PyConfig_InitPythonConfig"], [34, 2, 1, "c.PyConfig_Read", "PyConfig_Read"], [34, 2, 1, "c.PyConfig_SetArgv", "PyConfig_SetArgv"], [34, 2, 1, "c.PyConfig_SetBytesArgv", "PyConfig_SetBytesArgv"], [34, 2, 1, "c.PyConfig_SetBytesString", "PyConfig_SetBytesString"], [34, 2, 1, "c.PyConfig_SetString", "PyConfig_SetString"], [34, 2, 1, "c.PyConfig_SetWideStringList", "PyConfig_SetWideStringList"], [17, 4, 1, "c.PyContext", "PyContext"], [17, 4, 1, "c.PyContextToken", "PyContextToken"], [17, 2, 1, "c.PyContextToken_CheckExact", "PyContextToken_CheckExact"], [17, 0, 1, "c.PyContextToken_Type", "PyContextToken_Type"], [17, 4, 1, "c.PyContextVar", "PyContextVar"], [17, 2, 1, "c.PyContextVar_CheckExact", "PyContextVar_CheckExact"], [17, 2, 1, "c.PyContextVar_Get", "PyContextVar_Get"], [17, 2, 1, "c.PyContextVar_New", "PyContextVar_New"], [17, 2, 1, "c.PyContextVar_Reset", "PyContextVar_Reset"], [17, 2, 1, "c.PyContextVar_Set", "PyContextVar_Set"], [17, 0, 1, "c.PyContextVar_Type", "PyContextVar_Type"], [17, 2, 1, "c.PyContext_CheckExact", "PyContext_CheckExact"], [17, 2, 1, "c.PyContext_Copy", "PyContext_Copy"], [17, 2, 1, "c.PyContext_CopyCurrent", "PyContext_CopyCurrent"], [17, 2, 1, "c.PyContext_Enter", "PyContext_Enter"], [17, 2, 1, "c.PyContext_Exit", "PyContext_Exit"], [17, 2, 1, "c.PyContext_New", "PyContext_New"], [17, 0, 1, "c.PyContext_Type", "PyContext_Type"], [19, 4, 1, "c.PyCoroObject", "PyCoroObject"], [19, 2, 1, "c.PyCoro_CheckExact", "PyCoro_CheckExact"], [19, 2, 1, "c.PyCoro_New", "PyCoro_New"], [19, 0, 1, "c.PyCoro_Type", "PyCoro_Type"], [20, 2, 1, "c.PyDateTime_Check", "PyDateTime_Check"], [20, 2, 1, "c.PyDateTime_CheckExact", "PyDateTime_CheckExact"], [20, 2, 1, "c.PyDateTime_DATE_GET_FOLD", "PyDateTime_DATE_GET_FOLD"], [20, 2, 1, "c.PyDateTime_DATE_GET_HOUR", "PyDateTime_DATE_GET_HOUR"], [20, 2, 1, "c.PyDateTime_DATE_GET_MICROSECOND", "PyDateTime_DATE_GET_MICROSECOND"], [20, 2, 1, "c.PyDateTime_DATE_GET_MINUTE", "PyDateTime_DATE_GET_MINUTE"], [20, 2, 1, "c.PyDateTime_DATE_GET_SECOND", "PyDateTime_DATE_GET_SECOND"], [20, 2, 1, "c.PyDateTime_DATE_GET_TZINFO", "PyDateTime_DATE_GET_TZINFO"], [20, 2, 1, "c.PyDateTime_DELTA_GET_DAYS", "PyDateTime_DELTA_GET_DAYS"], [20, 2, 1, "c.PyDateTime_DELTA_GET_MICROSECONDS", "PyDateTime_DELTA_GET_MICROSECONDS"], [20, 2, 1, "c.PyDateTime_DELTA_GET_SECONDS", "PyDateTime_DELTA_GET_SECONDS"], [20, 4, 1, "c.PyDateTime_Date", "PyDateTime_Date"], [20, 4, 1, "c.PyDateTime_DateTime", "PyDateTime_DateTime"], [20, 0, 1, "c.PyDateTime_DateTimeType", "PyDateTime_DateTimeType"], [20, 0, 1, "c.PyDateTime_DateType", "PyDateTime_DateType"], [20, 4, 1, "c.PyDateTime_Delta", "PyDateTime_Delta"], [20, 0, 1, "c.PyDateTime_DeltaType", "PyDateTime_DeltaType"], [20, 2, 1, "c.PyDateTime_FromDateAndTime", "PyDateTime_FromDateAndTime"], [20, 2, 1, "c.PyDateTime_FromDateAndTimeAndFold", "PyDateTime_FromDateAndTimeAndFold"], [20, 2, 1, "c.PyDateTime_FromTimestamp", "PyDateTime_FromTimestamp"], [20, 2, 1, "c.PyDateTime_GET_DAY", "PyDateTime_GET_DAY"], [20, 2, 1, "c.PyDateTime_GET_MONTH", "PyDateTime_GET_MONTH"], [20, 2, 1, "c.PyDateTime_GET_YEAR", "PyDateTime_GET_YEAR"], [20, 2, 1, "c.PyDateTime_TIME_GET_FOLD", "PyDateTime_TIME_GET_FOLD"], [20, 2, 1, "c.PyDateTime_TIME_GET_HOUR", "PyDateTime_TIME_GET_HOUR"], [20, 2, 1, "c.PyDateTime_TIME_GET_MICROSECOND", "PyDateTime_TIME_GET_MICROSECOND"], [20, 2, 1, "c.PyDateTime_TIME_GET_MINUTE", "PyDateTime_TIME_GET_MINUTE"], [20, 2, 1, "c.PyDateTime_TIME_GET_SECOND", "PyDateTime_TIME_GET_SECOND"], [20, 2, 1, "c.PyDateTime_TIME_GET_TZINFO", "PyDateTime_TIME_GET_TZINFO"], [20, 0, 1, "c.PyDateTime_TZInfoType", "PyDateTime_TZInfoType"], [20, 4, 1, "c.PyDateTime_Time", "PyDateTime_Time"], [20, 0, 1, "c.PyDateTime_TimeType", "PyDateTime_TimeType"], [20, 0, 1, "c.PyDateTime_TimeZone_UTC", "PyDateTime_TimeZone_UTC"], [20, 2, 1, "c.PyDate_Check", "PyDate_Check"], [20, 2, 1, "c.PyDate_CheckExact", "PyDate_CheckExact"], [20, 2, 1, "c.PyDate_FromDate", "PyDate_FromDate"], [20, 2, 1, "c.PyDate_FromTimestamp", "PyDate_FromTimestamp"], [20, 2, 1, "c.PyDelta_Check", "PyDelta_Check"], [20, 2, 1, "c.PyDelta_CheckExact", "PyDelta_CheckExact"], [20, 2, 1, "c.PyDelta_FromDSU", "PyDelta_FromDSU"], [21, 2, 1, "c.PyDescr_IsData", "PyDescr_IsData"], [21, 2, 1, "c.PyDescr_NewClassMethod", "PyDescr_NewClassMethod"], [21, 2, 1, "c.PyDescr_NewGetSet", "PyDescr_NewGetSet"], [21, 2, 1, "c.PyDescr_NewMember", "PyDescr_NewMember"], [21, 2, 1, "c.PyDescr_NewMethod", "PyDescr_NewMethod"], [21, 2, 1, "c.PyDescr_NewWrapper", "PyDescr_NewWrapper"], [22, 4, 1, "c.PyDictObject", "PyDictObject"], [22, 2, 1, "c.PyDictProxy_New", "PyDictProxy_New"], [22, 2, 1, "c.PyDict_AddWatcher", "PyDict_AddWatcher"], [22, 2, 1, "c.PyDict_Check", "PyDict_Check"], [22, 2, 1, "c.PyDict_CheckExact", "PyDict_CheckExact"], [22, 2, 1, "c.PyDict_Clear", "PyDict_Clear"], [22, 2, 1, "c.PyDict_ClearWatcher", "PyDict_ClearWatcher"], [22, 2, 1, "c.PyDict_Contains", "PyDict_Contains"], [22, 2, 1, "c.PyDict_Copy", "PyDict_Copy"], [22, 2, 1, "c.PyDict_DelItem", "PyDict_DelItem"], [22, 2, 1, "c.PyDict_DelItemString", "PyDict_DelItemString"], [22, 2, 1, "c.PyDict_GetItem", "PyDict_GetItem"], [22, 2, 1, "c.PyDict_GetItemString", "PyDict_GetItemString"], [22, 2, 1, "c.PyDict_GetItemWithError", "PyDict_GetItemWithError"], [22, 2, 1, "c.PyDict_Items", "PyDict_Items"], [22, 2, 1, "c.PyDict_Keys", "PyDict_Keys"], [22, 2, 1, "c.PyDict_Merge", "PyDict_Merge"], [22, 2, 1, "c.PyDict_MergeFromSeq2", "PyDict_MergeFromSeq2"], [22, 2, 1, "c.PyDict_New", "PyDict_New"], [22, 2, 1, "c.PyDict_Next", "PyDict_Next"], [22, 2, 1, "c.PyDict_SetDefault", "PyDict_SetDefault"], [22, 2, 1, "c.PyDict_SetItem", "PyDict_SetItem"], [22, 2, 1, "c.PyDict_SetItemString", "PyDict_SetItemString"], [22, 2, 1, "c.PyDict_Size", "PyDict_Size"], [22, 0, 1, "c.PyDict_Type", "PyDict_Type"], [22, 2, 1, "c.PyDict_Unwatch", "PyDict_Unwatch"], [22, 2, 1, "c.PyDict_Update", "PyDict_Update"], [22, 2, 1, "c.PyDict_Values", "PyDict_Values"], [22, 2, 1, "c.PyDict_Watch", "PyDict_Watch"], [22, 4, 1, "c.PyDict_WatchCallback", "PyDict_WatchCallback"], [22, 4, 1, "c.PyDict_WatchEvent", "PyDict_WatchEvent"], [35, 1, 1, "c.PyDoc_STR", "PyDoc_STR"], [35, 1, 1, "c.PyDoc_STRVAR", "PyDoc_STRVAR"], [23, 2, 1, "c.PyErr_BadArgument", "PyErr_BadArgument"], [23, 2, 1, "c.PyErr_BadInternalCall", "PyErr_BadInternalCall"], [23, 2, 1, "c.PyErr_CheckSignals", "PyErr_CheckSignals"], [23, 2, 1, "c.PyErr_Clear", "PyErr_Clear"], [23, 2, 1, "c.PyErr_DisplayException", "PyErr_DisplayException"], [23, 2, 1, "c.PyErr_ExceptionMatches", "PyErr_ExceptionMatches"], [23, 2, 1, "c.PyErr_Fetch", "PyErr_Fetch"], [23, 2, 1, "c.PyErr_Format", "PyErr_Format"], [23, 2, 1, "c.PyErr_FormatV", "PyErr_FormatV"], [23, 2, 1, "c.PyErr_GetExcInfo", "PyErr_GetExcInfo"], [23, 2, 1, "c.PyErr_GetHandledException", "PyErr_GetHandledException"], [23, 2, 1, "c.PyErr_GetRaisedException", "PyErr_GetRaisedException"], [23, 2, 1, "c.PyErr_GivenExceptionMatches", "PyErr_GivenExceptionMatches"], [23, 2, 1, "c.PyErr_NewException", "PyErr_NewException"], [23, 2, 1, "c.PyErr_NewExceptionWithDoc", "PyErr_NewExceptionWithDoc"], [23, 2, 1, "c.PyErr_NoMemory", "PyErr_NoMemory"], [23, 2, 1, "c.PyErr_NormalizeException", "PyErr_NormalizeException"], [23, 2, 1, "c.PyErr_Occurred", "PyErr_Occurred"], [23, 2, 1, "c.PyErr_Print", "PyErr_Print"], [23, 2, 1, "c.PyErr_PrintEx", "PyErr_PrintEx"], [23, 2, 1, "c.PyErr_ResourceWarning", "PyErr_ResourceWarning"], [23, 2, 1, "c.PyErr_Restore", "PyErr_Restore"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErr", "PyErr_SetExcFromWindowsErr"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "PyErr_SetExcFromWindowsErrWithFilename"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "PyErr_SetExcFromWindowsErrWithFilenameObject"], [23, 2, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "PyErr_SetExcFromWindowsErrWithFilenameObjects"], [23, 2, 1, "c.PyErr_SetExcInfo", "PyErr_SetExcInfo"], [23, 2, 1, "c.PyErr_SetFromErrno", "PyErr_SetFromErrno"], [23, 2, 1, "c.PyErr_SetFromErrnoWithFilename", "PyErr_SetFromErrnoWithFilename"], [23, 2, 1, "c.PyErr_SetFromErrnoWithFilenameObject", "PyErr_SetFromErrnoWithFilenameObject"], [23, 2, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "PyErr_SetFromErrnoWithFilenameObjects"], [23, 2, 1, "c.PyErr_SetFromWindowsErr", "PyErr_SetFromWindowsErr"], [23, 2, 1, "c.PyErr_SetFromWindowsErrWithFilename", "PyErr_SetFromWindowsErrWithFilename"], [23, 2, 1, "c.PyErr_SetHandledException", "PyErr_SetHandledException"], [23, 2, 1, "c.PyErr_SetImportError", "PyErr_SetImportError"], [23, 2, 1, "c.PyErr_SetImportErrorSubclass", "PyErr_SetImportErrorSubclass"], [23, 2, 1, "c.PyErr_SetInterrupt", "PyErr_SetInterrupt"], [23, 2, 1, "c.PyErr_SetInterruptEx", "PyErr_SetInterruptEx"], [23, 2, 1, "c.PyErr_SetNone", "PyErr_SetNone"], [23, 2, 1, "c.PyErr_SetObject", "PyErr_SetObject"], [23, 2, 1, "c.PyErr_SetRaisedException", "PyErr_SetRaisedException"], [23, 2, 1, "c.PyErr_SetString", "PyErr_SetString"], [23, 2, 1, "c.PyErr_SyntaxLocation", "PyErr_SyntaxLocation"], [23, 2, 1, "c.PyErr_SyntaxLocationEx", "PyErr_SyntaxLocationEx"], [23, 2, 1, "c.PyErr_SyntaxLocationObject", "PyErr_SyntaxLocationObject"], [23, 2, 1, "c.PyErr_WarnEx", "PyErr_WarnEx"], [23, 2, 1, "c.PyErr_WarnExplicit", "PyErr_WarnExplicit"], [23, 2, 1, "c.PyErr_WarnExplicitObject", "PyErr_WarnExplicitObject"], [23, 2, 1, "c.PyErr_WarnFormat", "PyErr_WarnFormat"], [23, 2, 1, "c.PyErr_WriteUnraisable", "PyErr_WriteUnraisable"], [33, 2, 1, "c.PyEval_AcquireLock", "PyEval_AcquireLock"], [33, 2, 1, "c.PyEval_AcquireThread", "PyEval_AcquireThread"], [66, 2, 1, "c.PyEval_EvalCode", "PyEval_EvalCode"], [66, 2, 1, "c.PyEval_EvalCodeEx", "PyEval_EvalCodeEx"], [66, 2, 1, "c.PyEval_EvalFrame", "PyEval_EvalFrame"], [66, 2, 1, "c.PyEval_EvalFrameEx", "PyEval_EvalFrameEx"], [53, 2, 1, "c.PyEval_GetBuiltins", "PyEval_GetBuiltins"], [53, 2, 1, "c.PyEval_GetFrame", "PyEval_GetFrame"], [53, 2, 1, "c.PyEval_GetFuncDesc", "PyEval_GetFuncDesc"], [53, 2, 1, "c.PyEval_GetFuncName", "PyEval_GetFuncName"], [53, 2, 1, "c.PyEval_GetGlobals", "PyEval_GetGlobals"], [53, 2, 1, "c.PyEval_GetLocals", "PyEval_GetLocals"], [33, 2, 1, "c.PyEval_InitThreads", "PyEval_InitThreads"], [66, 2, 1, "c.PyEval_MergeCompilerFlags", "PyEval_MergeCompilerFlags"], [33, 2, 1, "c.PyEval_ReleaseLock", "PyEval_ReleaseLock"], [33, 2, 1, "c.PyEval_ReleaseThread", "PyEval_ReleaseThread"], [33, 2, 1, "c.PyEval_RestoreThread", "PyEval_RestoreThread"], [33, 2, 1, "c.PyEval_SaveThread", "PyEval_SaveThread"], [33, 2, 1, "c.PyEval_SetProfile", "PyEval_SetProfile"], [33, 2, 1, "c.PyEval_SetProfileAllThreads", "PyEval_SetProfileAllThreads"], [33, 2, 1, "c.PyEval_SetTrace", "PyEval_SetTrace"], [33, 2, 1, "c.PyEval_SetTraceAllThreads", "PyEval_SetTraceAllThreads"], [33, 2, 1, "c.PyEval_ThreadsInitialized", "PyEval_ThreadsInitialized"], [23, 2, 1, "c.PyException_GetArgs", "PyException_GetArgs"], [23, 2, 1, "c.PyException_GetCause", "PyException_GetCause"], [23, 2, 1, "c.PyException_GetContext", "PyException_GetContext"], [23, 2, 1, "c.PyException_GetTraceback", "PyException_GetTraceback"], [23, 2, 1, "c.PyException_SetArgs", "PyException_SetArgs"], [23, 2, 1, "c.PyException_SetCause", "PyException_SetCause"], [23, 2, 1, "c.PyException_SetContext", "PyException_SetContext"], [23, 2, 1, "c.PyException_SetTraceback", "PyException_SetTraceback"], [24, 2, 1, "c.PyFile_FromFd", "PyFile_FromFd"], [24, 2, 1, "c.PyFile_GetLine", "PyFile_GetLine"], [24, 2, 1, "c.PyFile_SetOpenCodeHook", "PyFile_SetOpenCodeHook"], [24, 2, 1, "c.PyFile_WriteObject", "PyFile_WriteObject"], [24, 2, 1, "c.PyFile_WriteString", "PyFile_WriteString"], [25, 4, 1, "c.PyFloatObject", "PyFloatObject"], [25, 2, 1, "c.PyFloat_AS_DOUBLE", "PyFloat_AS_DOUBLE"], [25, 2, 1, "c.PyFloat_AsDouble", "PyFloat_AsDouble"], [25, 2, 1, "c.PyFloat_Check", "PyFloat_Check"], [25, 2, 1, "c.PyFloat_CheckExact", "PyFloat_CheckExact"], [25, 2, 1, "c.PyFloat_FromDouble", "PyFloat_FromDouble"], [25, 2, 1, "c.PyFloat_FromString", "PyFloat_FromString"], [25, 2, 1, "c.PyFloat_GetInfo", "PyFloat_GetInfo"], [25, 2, 1, "c.PyFloat_GetMax", "PyFloat_GetMax"], [25, 2, 1, "c.PyFloat_GetMin", "PyFloat_GetMin"], [25, 2, 1, "c.PyFloat_Pack2", "PyFloat_Pack2"], [25, 2, 1, "c.PyFloat_Pack4", "PyFloat_Pack4"], [25, 2, 1, "c.PyFloat_Pack8", "PyFloat_Pack8"], [25, 0, 1, "c.PyFloat_Type", "PyFloat_Type"], [25, 2, 1, "c.PyFloat_Unpack2", "PyFloat_Unpack2"], [25, 2, 1, "c.PyFloat_Unpack4", "PyFloat_Unpack4"], [25, 2, 1, "c.PyFloat_Unpack8", "PyFloat_Unpack8"], [26, 4, 1, "c.PyFrameObject", "PyFrameObject"], [26, 2, 1, "c.PyFrame_Check", "PyFrame_Check"], [26, 2, 1, "c.PyFrame_GetBack", "PyFrame_GetBack"], [26, 2, 1, "c.PyFrame_GetBuiltins", "PyFrame_GetBuiltins"], [26, 2, 1, "c.PyFrame_GetCode", "PyFrame_GetCode"], [26, 2, 1, "c.PyFrame_GetGenerator", "PyFrame_GetGenerator"], [26, 2, 1, "c.PyFrame_GetGlobals", "PyFrame_GetGlobals"], [26, 2, 1, "c.PyFrame_GetLasti", "PyFrame_GetLasti"], [26, 2, 1, "c.PyFrame_GetLineNumber", "PyFrame_GetLineNumber"], [26, 2, 1, "c.PyFrame_GetLocals", "PyFrame_GetLocals"], [26, 2, 1, "c.PyFrame_GetVar", "PyFrame_GetVar"], [26, 2, 1, "c.PyFrame_GetVarString", "PyFrame_GetVarString"], [26, 0, 1, "c.PyFrame_Type", "PyFrame_Type"], [55, 2, 1, "c.PyFrozenSet_Check", "PyFrozenSet_Check"], [55, 2, 1, "c.PyFrozenSet_CheckExact", "PyFrozenSet_CheckExact"], [55, 2, 1, "c.PyFrozenSet_New", "PyFrozenSet_New"], [55, 0, 1, "c.PyFrozenSet_Type", "PyFrozenSet_Type"], [27, 4, 1, "c.PyFunctionObject", "PyFunctionObject"], [27, 2, 1, "c.PyFunction_AddWatcher", "PyFunction_AddWatcher"], [27, 2, 1, "c.PyFunction_Check", "PyFunction_Check"], [27, 2, 1, "c.PyFunction_ClearWatcher", "PyFunction_ClearWatcher"], [27, 2, 1, "c.PyFunction_GetAnnotations", "PyFunction_GetAnnotations"], [27, 2, 1, "c.PyFunction_GetClosure", "PyFunction_GetClosure"], [27, 2, 1, "c.PyFunction_GetCode", "PyFunction_GetCode"], [27, 2, 1, "c.PyFunction_GetDefaults", "PyFunction_GetDefaults"], [27, 2, 1, "c.PyFunction_GetGlobals", "PyFunction_GetGlobals"], [27, 2, 1, "c.PyFunction_GetModule", "PyFunction_GetModule"], [27, 2, 1, "c.PyFunction_New", "PyFunction_New"], [27, 2, 1, "c.PyFunction_NewWithQualName", "PyFunction_NewWithQualName"], [27, 2, 1, "c.PyFunction_SetAnnotations", "PyFunction_SetAnnotations"], [27, 2, 1, "c.PyFunction_SetClosure", "PyFunction_SetClosure"], [27, 2, 1, "c.PyFunction_SetDefaults", "PyFunction_SetDefaults"], [27, 2, 1, "c.PyFunction_SetVectorcall", "PyFunction_SetVectorcall"], [27, 0, 1, "c.PyFunction_Type", "PyFunction_Type"], [27, 4, 1, "c.PyFunction_WatchCallback", "PyFunction_WatchCallback"], [27, 4, 1, "c.PyFunction_WatchEvent", "PyFunction_WatchEvent"], [28, 2, 1, "c.PyGC_Collect", "PyGC_Collect"], [28, 2, 1, "c.PyGC_Disable", "PyGC_Disable"], [28, 2, 1, "c.PyGC_Enable", "PyGC_Enable"], [28, 2, 1, "c.PyGC_IsEnabled", "PyGC_IsEnabled"], [33, 2, 1, "c.PyGILState_Check", "PyGILState_Check"], [33, 2, 1, "c.PyGILState_Ensure", "PyGILState_Ensure"], [33, 2, 1, "c.PyGILState_GetThisThreadState", "PyGILState_GetThisThreadState"], [33, 2, 1, "c.PyGILState_Release", "PyGILState_Release"], [29, 4, 1, "c.PyGenObject", "PyGenObject"], [29, 2, 1, "c.PyGen_Check", "PyGen_Check"], [29, 2, 1, "c.PyGen_CheckExact", "PyGen_CheckExact"], [29, 2, 1, "c.PyGen_New", "PyGen_New"], [29, 2, 1, "c.PyGen_NewWithQualName", "PyGen_NewWithQualName"], [29, 0, 1, "c.PyGen_Type", "PyGen_Type"], [58, 4, 1, "c.PyGetSetDef", "PyGetSetDef"], [30, 4, 1, "c.PyHash_FuncDef", "PyHash_FuncDef"], [30, 2, 1, "c.PyHash_GetFuncDef", "PyHash_GetFuncDef"], [31, 2, 1, "c.PyImport_AddModule", "PyImport_AddModule"], [31, 2, 1, "c.PyImport_AddModuleObject", "PyImport_AddModuleObject"], [31, 2, 1, "c.PyImport_AppendInittab", "PyImport_AppendInittab"], [31, 2, 1, "c.PyImport_ExecCodeModule", "PyImport_ExecCodeModule"], [31, 2, 1, "c.PyImport_ExecCodeModuleEx", "PyImport_ExecCodeModuleEx"], [31, 2, 1, "c.PyImport_ExecCodeModuleObject", "PyImport_ExecCodeModuleObject"], [31, 2, 1, "c.PyImport_ExecCodeModuleWithPathnames", "PyImport_ExecCodeModuleWithPathnames"], [31, 2, 1, "c.PyImport_ExtendInittab", "PyImport_ExtendInittab"], [31, 0, 1, "c.PyImport_FrozenModules", "PyImport_FrozenModules"], [31, 2, 1, "c.PyImport_GetImporter", "PyImport_GetImporter"], [31, 2, 1, "c.PyImport_GetMagicNumber", "PyImport_GetMagicNumber"], [31, 2, 1, "c.PyImport_GetMagicTag", "PyImport_GetMagicTag"], [31, 2, 1, "c.PyImport_GetModule", "PyImport_GetModule"], [31, 2, 1, "c.PyImport_GetModuleDict", "PyImport_GetModuleDict"], [31, 2, 1, "c.PyImport_Import", "PyImport_Import"], [31, 2, 1, "c.PyImport_ImportFrozenModule", "PyImport_ImportFrozenModule"], [31, 2, 1, "c.PyImport_ImportFrozenModuleObject", "PyImport_ImportFrozenModuleObject"], [31, 2, 1, "c.PyImport_ImportModule", "PyImport_ImportModule"], [31, 2, 1, "c.PyImport_ImportModuleEx", "PyImport_ImportModuleEx"], [31, 2, 1, "c.PyImport_ImportModuleLevel", "PyImport_ImportModuleLevel"], [31, 2, 1, "c.PyImport_ImportModuleLevelObject", "PyImport_ImportModuleLevelObject"], [31, 2, 1, "c.PyImport_ImportModuleNoBlock", "PyImport_ImportModuleNoBlock"], [31, 2, 1, "c.PyImport_ReloadModule", "PyImport_ReloadModule"], [47, 2, 1, "c.PyIndex_Check", "PyIndex_Check"], [71, 2, 1, "c.PyInit_modulename", "PyInit_modulename"], [44, 2, 1, "c.PyInstanceMethod_Check", "PyInstanceMethod_Check"], [44, 2, 1, "c.PyInstanceMethod_Function", "PyInstanceMethod_Function"], [44, 2, 1, "c.PyInstanceMethod_GET_FUNCTION", "PyInstanceMethod_GET_FUNCTION"], [44, 2, 1, "c.PyInstanceMethod_New", "PyInstanceMethod_New"], [44, 0, 1, "c.PyInstanceMethod_Type", "PyInstanceMethod_Type"], [33, 4, 1, "c.PyInterpreterConfig", "PyInterpreterConfig"], [33, 1, 1, "c.PyInterpreterConfig_DEFAULT_GIL", "PyInterpreterConfig_DEFAULT_GIL"], [33, 1, 1, "c.PyInterpreterConfig_OWN_GIL", "PyInterpreterConfig_OWN_GIL"], [33, 1, 1, "c.PyInterpreterConfig_SHARED_GIL", "PyInterpreterConfig_SHARED_GIL"], [33, 4, 1, "c.PyInterpreterState", "PyInterpreterState"], [33, 2, 1, "c.PyInterpreterState_Clear", "PyInterpreterState_Clear"], [33, 2, 1, "c.PyInterpreterState_Delete", "PyInterpreterState_Delete"], [33, 2, 1, "c.PyInterpreterState_Get", "PyInterpreterState_Get"], [33, 2, 1, "c.PyInterpreterState_GetDict", "PyInterpreterState_GetDict"], [33, 2, 1, "c.PyInterpreterState_GetID", "PyInterpreterState_GetID"], [33, 2, 1, "c.PyInterpreterState_Head", "PyInterpreterState_Head"], [33, 2, 1, "c.PyInterpreterState_Main", "PyInterpreterState_Main"], [33, 2, 1, "c.PyInterpreterState_New", "PyInterpreterState_New"], [33, 2, 1, "c.PyInterpreterState_Next", "PyInterpreterState_Next"], [33, 2, 1, "c.PyInterpreterState_ThreadHead", "PyInterpreterState_ThreadHead"], [36, 2, 1, "c.PyIter_Check", "PyIter_Check"], [36, 2, 1, "c.PyIter_Next", "PyIter_Next"], [36, 2, 1, "c.PyIter_Send", "PyIter_Send"], [38, 4, 1, "c.PyListObject", "PyListObject"], [38, 2, 1, "c.PyList_Append", "PyList_Append"], [38, 2, 1, "c.PyList_AsTuple", "PyList_AsTuple"], [38, 2, 1, "c.PyList_Check", "PyList_Check"], [38, 2, 1, "c.PyList_CheckExact", "PyList_CheckExact"], [38, 2, 1, "c.PyList_GET_ITEM", "PyList_GET_ITEM"], [38, 2, 1, "c.PyList_GET_SIZE", "PyList_GET_SIZE"], [38, 2, 1, "c.PyList_GetItem", "PyList_GetItem"], [38, 2, 1, "c.PyList_GetSlice", "PyList_GetSlice"], [38, 2, 1, "c.PyList_Insert", "PyList_Insert"], [38, 2, 1, "c.PyList_New", "PyList_New"], [38, 2, 1, "c.PyList_Reverse", "PyList_Reverse"], [38, 2, 1, "c.PyList_SET_ITEM", "PyList_SET_ITEM"], [38, 2, 1, "c.PyList_SetItem", "PyList_SetItem"], [38, 2, 1, "c.PyList_SetSlice", "PyList_SetSlice"], [38, 2, 1, "c.PyList_Size", "PyList_Size"], [38, 2, 1, "c.PyList_Sort", "PyList_Sort"], [38, 0, 1, "c.PyList_Type", "PyList_Type"], [39, 4, 1, "c.PyLongObject", "PyLongObject"], [39, 2, 1, "c.PyLong_AsDouble", "PyLong_AsDouble"], [39, 2, 1, "c.PyLong_AsLong", "PyLong_AsLong"], [39, 2, 1, "c.PyLong_AsLongAndOverflow", "PyLong_AsLongAndOverflow"], [39, 2, 1, "c.PyLong_AsLongLong", "PyLong_AsLongLong"], [39, 2, 1, "c.PyLong_AsLongLongAndOverflow", "PyLong_AsLongLongAndOverflow"], [39, 2, 1, "c.PyLong_AsSize_t", "PyLong_AsSize_t"], [39, 2, 1, "c.PyLong_AsSsize_t", "PyLong_AsSsize_t"], [39, 2, 1, "c.PyLong_AsUnsignedLong", "PyLong_AsUnsignedLong"], [39, 2, 1, "c.PyLong_AsUnsignedLongLong", "PyLong_AsUnsignedLongLong"], [39, 2, 1, "c.PyLong_AsUnsignedLongLongMask", "PyLong_AsUnsignedLongLongMask"], [39, 2, 1, "c.PyLong_AsUnsignedLongMask", "PyLong_AsUnsignedLongMask"], [39, 2, 1, "c.PyLong_AsVoidPtr", "PyLong_AsVoidPtr"], [39, 2, 1, "c.PyLong_Check", "PyLong_Check"], [39, 2, 1, "c.PyLong_CheckExact", "PyLong_CheckExact"], [39, 2, 1, "c.PyLong_FromDouble", "PyLong_FromDouble"], [39, 2, 1, "c.PyLong_FromLong", "PyLong_FromLong"], [39, 2, 1, "c.PyLong_FromLongLong", "PyLong_FromLongLong"], [39, 2, 1, "c.PyLong_FromSize_t", "PyLong_FromSize_t"], [39, 2, 1, "c.PyLong_FromSsize_t", "PyLong_FromSsize_t"], [39, 2, 1, "c.PyLong_FromString", "PyLong_FromString"], [39, 2, 1, "c.PyLong_FromUnicodeObject", "PyLong_FromUnicodeObject"], [39, 2, 1, "c.PyLong_FromUnsignedLong", "PyLong_FromUnsignedLong"], [39, 2, 1, "c.PyLong_FromUnsignedLongLong", "PyLong_FromUnsignedLongLong"], [39, 2, 1, "c.PyLong_FromVoidPtr", "PyLong_FromVoidPtr"], [39, 0, 1, "c.PyLong_Type", "PyLong_Type"], [35, 1, 1, "c.PyMODINIT_FUNC", "PyMODINIT_FUNC"], [63, 4, 1, "c.PyMappingMethods", "PyMappingMethods"], [40, 2, 1, "c.PyMapping_Check", "PyMapping_Check"], [40, 2, 1, "c.PyMapping_DelItem", "PyMapping_DelItem"], [40, 2, 1, "c.PyMapping_DelItemString", "PyMapping_DelItemString"], [40, 2, 1, "c.PyMapping_GetItemString", "PyMapping_GetItemString"], [40, 2, 1, "c.PyMapping_HasKey", "PyMapping_HasKey"], [40, 2, 1, "c.PyMapping_HasKeyString", "PyMapping_HasKeyString"], [40, 2, 1, "c.PyMapping_Items", "PyMapping_Items"], [40, 2, 1, "c.PyMapping_Keys", "PyMapping_Keys"], [40, 2, 1, "c.PyMapping_Length", "PyMapping_Length"], [40, 2, 1, "c.PyMapping_SetItemString", "PyMapping_SetItemString"], [40, 2, 1, "c.PyMapping_Size", "PyMapping_Size"], [40, 2, 1, "c.PyMapping_Values", "PyMapping_Values"], [41, 2, 1, "c.PyMarshal_ReadLastObjectFromFile", "PyMarshal_ReadLastObjectFromFile"], [41, 2, 1, "c.PyMarshal_ReadLongFromFile", "PyMarshal_ReadLongFromFile"], [41, 2, 1, "c.PyMarshal_ReadObjectFromFile", "PyMarshal_ReadObjectFromFile"], [41, 2, 1, "c.PyMarshal_ReadObjectFromString", "PyMarshal_ReadObjectFromString"], [41, 2, 1, "c.PyMarshal_ReadShortFromFile", "PyMarshal_ReadShortFromFile"], [41, 2, 1, "c.PyMarshal_WriteLongToFile", "PyMarshal_WriteLongToFile"], [41, 2, 1, "c.PyMarshal_WriteObjectToFile", "PyMarshal_WriteObjectToFile"], [41, 2, 1, "c.PyMarshal_WriteObjectToString", "PyMarshal_WriteObjectToString"], [42, 4, 1, "c.PyMemAllocatorDomain", "PyMemAllocatorDomain"], [42, 4, 1, "c.PyMemAllocatorEx", "PyMemAllocatorEx"], [42, 2, 1, "c.PyMem_Calloc", "PyMem_Calloc"], [42, 2, 1, "c.PyMem_Del", "PyMem_Del"], [42, 2, 1, "c.PyMem_Free", "PyMem_Free"], [42, 2, 1, "c.PyMem_GetAllocator", "PyMem_GetAllocator"], [42, 2, 1, "c.PyMem_Malloc", "PyMem_Malloc"], [42, 1, 1, "c.PyMem_New", "PyMem_New"], [42, 2, 1, "c.PyMem_RawCalloc", "PyMem_RawCalloc"], [42, 2, 1, "c.PyMem_RawFree", "PyMem_RawFree"], [42, 2, 1, "c.PyMem_RawMalloc", "PyMem_RawMalloc"], [42, 2, 1, "c.PyMem_RawRealloc", "PyMem_RawRealloc"], [42, 2, 1, "c.PyMem_Realloc", "PyMem_Realloc"], [42, 1, 1, "c.PyMem_Resize", "PyMem_Resize"], [42, 2, 1, "c.PyMem_SetAllocator", "PyMem_SetAllocator"], [42, 2, 1, "c.PyMem_SetupDebugHooks", "PyMem_SetupDebugHooks"], [58, 4, 1, "c.PyMemberDef", "PyMemberDef"], [58, 2, 1, "c.PyMember_GetOne", "PyMember_GetOne"], [58, 2, 1, "c.PyMember_SetOne", "PyMember_SetOne"], [43, 2, 1, "c.PyMemoryView_Check", "PyMemoryView_Check"], [43, 2, 1, "c.PyMemoryView_FromBuffer", "PyMemoryView_FromBuffer"], [43, 2, 1, "c.PyMemoryView_FromMemory", "PyMemoryView_FromMemory"], [43, 2, 1, "c.PyMemoryView_FromObject", "PyMemoryView_FromObject"], [43, 2, 1, "c.PyMemoryView_GET_BASE", "PyMemoryView_GET_BASE"], [43, 2, 1, "c.PyMemoryView_GET_BUFFER", "PyMemoryView_GET_BUFFER"], [43, 2, 1, "c.PyMemoryView_GetContiguous", "PyMemoryView_GetContiguous"], [58, 4, 1, "c.PyMethodDef", "PyMethodDef"], [44, 2, 1, "c.PyMethod_Check", "PyMethod_Check"], [44, 2, 1, "c.PyMethod_Function", "PyMethod_Function"], [44, 2, 1, "c.PyMethod_GET_FUNCTION", "PyMethod_GET_FUNCTION"], [44, 2, 1, "c.PyMethod_GET_SELF", "PyMethod_GET_SELF"], [44, 2, 1, "c.PyMethod_New", "PyMethod_New"], [44, 2, 1, "c.PyMethod_Self", "PyMethod_Self"], [44, 0, 1, "c.PyMethod_Type", "PyMethod_Type"], [45, 4, 1, "c.PyModuleDef", "PyModuleDef"], [45, 2, 1, "c.PyModuleDef_Init", "PyModuleDef_Init"], [45, 4, 1, "c.PyModuleDef_Slot", "PyModuleDef_Slot"], [45, 2, 1, "c.PyModule_AddFunctions", "PyModule_AddFunctions"], [45, 2, 1, "c.PyModule_AddIntConstant", "PyModule_AddIntConstant"], [45, 1, 1, "c.PyModule_AddIntMacro", "PyModule_AddIntMacro"], [45, 2, 1, "c.PyModule_AddObject", "PyModule_AddObject"], [45, 2, 1, "c.PyModule_AddObjectRef", "PyModule_AddObjectRef"], [45, 2, 1, "c.PyModule_AddStringConstant", "PyModule_AddStringConstant"], [45, 1, 1, "c.PyModule_AddStringMacro", "PyModule_AddStringMacro"], [45, 2, 1, "c.PyModule_AddType", "PyModule_AddType"], [45, 2, 1, "c.PyModule_Check", "PyModule_Check"], [45, 2, 1, "c.PyModule_CheckExact", "PyModule_CheckExact"], [45, 2, 1, "c.PyModule_Create", "PyModule_Create"], [45, 2, 1, "c.PyModule_Create2", "PyModule_Create2"], [45, 2, 1, "c.PyModule_ExecDef", "PyModule_ExecDef"], [45, 2, 1, "c.PyModule_FromDefAndSpec", "PyModule_FromDefAndSpec"], [45, 2, 1, "c.PyModule_FromDefAndSpec2", "PyModule_FromDefAndSpec2"], [45, 2, 1, "c.PyModule_GetDef", "PyModule_GetDef"], [45, 2, 1, "c.PyModule_GetDict", "PyModule_GetDict"], [45, 2, 1, "c.PyModule_GetFilename", "PyModule_GetFilename"], [45, 2, 1, "c.PyModule_GetFilenameObject", "PyModule_GetFilenameObject"], [45, 2, 1, "c.PyModule_GetName", "PyModule_GetName"], [45, 2, 1, "c.PyModule_GetNameObject", "PyModule_GetNameObject"], [45, 2, 1, "c.PyModule_GetState", "PyModule_GetState"], [45, 2, 1, "c.PyModule_New", "PyModule_New"], [45, 2, 1, "c.PyModule_NewObject", "PyModule_NewObject"], [45, 2, 1, "c.PyModule_SetDocString", "PyModule_SetDocString"], [45, 0, 1, "c.PyModule_Type", "PyModule_Type"], [63, 4, 1, "c.PyNumberMethods", "PyNumberMethods"], [47, 2, 1, "c.PyNumber_Absolute", "PyNumber_Absolute"], [47, 2, 1, "c.PyNumber_Add", "PyNumber_Add"], [47, 2, 1, "c.PyNumber_And", "PyNumber_And"], [47, 2, 1, "c.PyNumber_AsSsize_t", "PyNumber_AsSsize_t"], [47, 2, 1, "c.PyNumber_Check", "PyNumber_Check"], [47, 2, 1, "c.PyNumber_Divmod", "PyNumber_Divmod"], [47, 2, 1, "c.PyNumber_Float", "PyNumber_Float"], [47, 2, 1, "c.PyNumber_FloorDivide", "PyNumber_FloorDivide"], [47, 2, 1, "c.PyNumber_InPlaceAdd", "PyNumber_InPlaceAdd"], [47, 2, 1, "c.PyNumber_InPlaceAnd", "PyNumber_InPlaceAnd"], [47, 2, 1, "c.PyNumber_InPlaceFloorDivide", "PyNumber_InPlaceFloorDivide"], [47, 2, 1, "c.PyNumber_InPlaceLshift", "PyNumber_InPlaceLshift"], [47, 2, 1, "c.PyNumber_InPlaceMatrixMultiply", "PyNumber_InPlaceMatrixMultiply"], [47, 2, 1, "c.PyNumber_InPlaceMultiply", "PyNumber_InPlaceMultiply"], [47, 2, 1, "c.PyNumber_InPlaceOr", "PyNumber_InPlaceOr"], [47, 2, 1, "c.PyNumber_InPlacePower", "PyNumber_InPlacePower"], [47, 2, 1, "c.PyNumber_InPlaceRemainder", "PyNumber_InPlaceRemainder"], [47, 2, 1, "c.PyNumber_InPlaceRshift", "PyNumber_InPlaceRshift"], [47, 2, 1, "c.PyNumber_InPlaceSubtract", "PyNumber_InPlaceSubtract"], [47, 2, 1, "c.PyNumber_InPlaceTrueDivide", "PyNumber_InPlaceTrueDivide"], [47, 2, 1, "c.PyNumber_InPlaceXor", "PyNumber_InPlaceXor"], [47, 2, 1, "c.PyNumber_Index", "PyNumber_Index"], [47, 2, 1, "c.PyNumber_Invert", "PyNumber_Invert"], [47, 2, 1, "c.PyNumber_Long", "PyNumber_Long"], [47, 2, 1, "c.PyNumber_Lshift", "PyNumber_Lshift"], [47, 2, 1, "c.PyNumber_MatrixMultiply", "PyNumber_MatrixMultiply"], [47, 2, 1, "c.PyNumber_Multiply", "PyNumber_Multiply"], [47, 2, 1, "c.PyNumber_Negative", "PyNumber_Negative"], [47, 2, 1, "c.PyNumber_Or", "PyNumber_Or"], [47, 2, 1, "c.PyNumber_Positive", "PyNumber_Positive"], [47, 2, 1, "c.PyNumber_Power", "PyNumber_Power"], [47, 2, 1, "c.PyNumber_Remainder", "PyNumber_Remainder"], [47, 2, 1, "c.PyNumber_Rshift", "PyNumber_Rshift"], [47, 2, 1, "c.PyNumber_Subtract", "PyNumber_Subtract"], [47, 2, 1, "c.PyNumber_ToBase", "PyNumber_ToBase"], [47, 2, 1, "c.PyNumber_TrueDivide", "PyNumber_TrueDivide"], [47, 2, 1, "c.PyNumber_Xor", "PyNumber_Xor"], [59, 2, 1, "c.PyOS_AfterFork", "PyOS_AfterFork"], [59, 2, 1, "c.PyOS_AfterFork_Child", "PyOS_AfterFork_Child"], [59, 2, 1, "c.PyOS_AfterFork_Parent", "PyOS_AfterFork_Parent"], [59, 2, 1, "c.PyOS_BeforeFork", "PyOS_BeforeFork"], [59, 2, 1, "c.PyOS_CheckStack", "PyOS_CheckStack"], [59, 2, 1, "c.PyOS_FSPath", "PyOS_FSPath"], [66, 0, 1, "c.PyOS_InputHook", "PyOS_InputHook"], [66, 0, 1, "c.PyOS_ReadlineFunctionPointer", "PyOS_ReadlineFunctionPointer"], [18, 2, 1, "c.PyOS_double_to_string", "PyOS_double_to_string"], [59, 2, 1, "c.PyOS_getsig", "PyOS_getsig"], [59, 2, 1, "c.PyOS_setsig", "PyOS_setsig"], [59, 4, 1, "c.PyOS_sighandler_t", "PyOS_sighandler_t"], [18, 2, 1, "c.PyOS_snprintf", "PyOS_snprintf"], [18, 2, 1, "c.PyOS_stricmp", "PyOS_stricmp"], [18, 2, 1, "c.PyOS_string_to_double", "PyOS_string_to_double"], [18, 2, 1, "c.PyOS_strnicmp", "PyOS_strnicmp"], [18, 2, 1, "c.PyOS_strtol", "PyOS_strtol"], [18, 2, 1, "c.PyOS_strtoul", "PyOS_strtoul"], [18, 2, 1, "c.PyOS_vsnprintf", "PyOS_vsnprintf"], [58, 4, 1, "c.PyObject", "PyObject"], [42, 4, 1, "c.PyObjectArenaAllocator", "PyObjectArenaAllocator"], [49, 2, 1, "c.PyObject_ASCII", "PyObject_ASCII"], [48, 2, 1, "c.PyObject_AsCharBuffer", "PyObject_AsCharBuffer"], [24, 2, 1, "c.PyObject_AsFileDescriptor", "PyObject_AsFileDescriptor"], [48, 2, 1, "c.PyObject_AsReadBuffer", "PyObject_AsReadBuffer"], [48, 2, 1, "c.PyObject_AsWriteBuffer", "PyObject_AsWriteBuffer"], [49, 2, 1, "c.PyObject_Bytes", "PyObject_Bytes"], [10, 2, 1, "c.PyObject_Call", "PyObject_Call"], [10, 2, 1, "c.PyObject_CallFunction", "PyObject_CallFunction"], [10, 2, 1, "c.PyObject_CallFunctionObjArgs", "PyObject_CallFunctionObjArgs"], [10, 2, 1, "c.PyObject_CallMethod", "PyObject_CallMethod"], [10, 2, 1, "c.PyObject_CallMethodNoArgs", "PyObject_CallMethodNoArgs"], [10, 2, 1, "c.PyObject_CallMethodObjArgs", "PyObject_CallMethodObjArgs"], [10, 2, 1, "c.PyObject_CallMethodOneArg", "PyObject_CallMethodOneArg"], [10, 2, 1, "c.PyObject_CallNoArgs", "PyObject_CallNoArgs"], [10, 2, 1, "c.PyObject_CallObject", "PyObject_CallObject"], [10, 2, 1, "c.PyObject_CallOneArg", "PyObject_CallOneArg"], [42, 2, 1, "c.PyObject_Calloc", "PyObject_Calloc"], [7, 2, 1, "c.PyObject_CheckBuffer", "PyObject_CheckBuffer"], [48, 2, 1, "c.PyObject_CheckReadBuffer", "PyObject_CheckReadBuffer"], [67, 2, 1, "c.PyObject_ClearWeakRefs", "PyObject_ClearWeakRefs"], [7, 2, 1, "c.PyObject_CopyData", "PyObject_CopyData"], [3, 2, 1, "c.PyObject_Del", "PyObject_Del"], [49, 2, 1, "c.PyObject_DelAttr", "PyObject_DelAttr"], [49, 2, 1, "c.PyObject_DelAttrString", "PyObject_DelAttrString"], [49, 2, 1, "c.PyObject_DelItem", "PyObject_DelItem"], [49, 2, 1, "c.PyObject_Dir", "PyObject_Dir"], [49, 2, 1, "c.PyObject_Format", "PyObject_Format"], [42, 2, 1, "c.PyObject_Free", "PyObject_Free"], [28, 2, 1, "c.PyObject_GC_Del", "PyObject_GC_Del"], [28, 2, 1, "c.PyObject_GC_IsFinalized", "PyObject_GC_IsFinalized"], [28, 2, 1, "c.PyObject_GC_IsTracked", "PyObject_GC_IsTracked"], [28, 1, 1, "c.PyObject_GC_New", "PyObject_GC_New"], [28, 1, 1, "c.PyObject_GC_NewVar", "PyObject_GC_NewVar"], [28, 1, 1, "c.PyObject_GC_Resize", "PyObject_GC_Resize"], [28, 2, 1, "c.PyObject_GC_Track", "PyObject_GC_Track"], [28, 2, 1, "c.PyObject_GC_UnTrack", "PyObject_GC_UnTrack"], [49, 2, 1, "c.PyObject_GenericGetAttr", "PyObject_GenericGetAttr"], [49, 2, 1, "c.PyObject_GenericGetDict", "PyObject_GenericGetDict"], [49, 2, 1, "c.PyObject_GenericSetAttr", "PyObject_GenericSetAttr"], [49, 2, 1, "c.PyObject_GenericSetDict", "PyObject_GenericSetDict"], [49, 2, 1, "c.PyObject_GetAIter", "PyObject_GetAIter"], [42, 2, 1, "c.PyObject_GetArenaAllocator", "PyObject_GetArenaAllocator"], [49, 2, 1, "c.PyObject_GetAttr", "PyObject_GetAttr"], [49, 2, 1, "c.PyObject_GetAttrString", "PyObject_GetAttrString"], [7, 2, 1, "c.PyObject_GetBuffer", "PyObject_GetBuffer"], [49, 2, 1, "c.PyObject_GetItem", "PyObject_GetItem"], [49, 2, 1, "c.PyObject_GetItemData", "PyObject_GetItemData"], [49, 2, 1, "c.PyObject_GetIter", "PyObject_GetIter"], [49, 2, 1, "c.PyObject_GetTypeData", "PyObject_GetTypeData"], [58, 1, 1, "c.PyObject_HEAD", "PyObject_HEAD"], [58, 1, 1, "c.PyObject_HEAD_INIT", "PyObject_HEAD_INIT"], [49, 2, 1, "c.PyObject_HasAttr", "PyObject_HasAttr"], [49, 2, 1, "c.PyObject_HasAttrString", "PyObject_HasAttrString"], [49, 2, 1, "c.PyObject_Hash", "PyObject_Hash"], [49, 2, 1, "c.PyObject_HashNotImplemented", "PyObject_HashNotImplemented"], [28, 2, 1, "c.PyObject_IS_GC", "PyObject_IS_GC"], [3, 2, 1, "c.PyObject_Init", "PyObject_Init"], [3, 2, 1, "c.PyObject_InitVar", "PyObject_InitVar"], [49, 2, 1, "c.PyObject_IsInstance", "PyObject_IsInstance"], [49, 2, 1, "c.PyObject_IsSubclass", "PyObject_IsSubclass"], [49, 2, 1, "c.PyObject_IsTrue", "PyObject_IsTrue"], [49, 2, 1, "c.PyObject_Length", "PyObject_Length"], [49, 2, 1, "c.PyObject_LengthHint", "PyObject_LengthHint"], [42, 2, 1, "c.PyObject_Malloc", "PyObject_Malloc"], [3, 1, 1, "c.PyObject_New", "PyObject_New"], [3, 1, 1, "c.PyObject_NewVar", "PyObject_NewVar"], [49, 2, 1, "c.PyObject_Not", "PyObject_Not"], [49, 2, 1, "c.PyObject_Print", "PyObject_Print"], [42, 2, 1, "c.PyObject_Realloc", "PyObject_Realloc"], [49, 2, 1, "c.PyObject_Repr", "PyObject_Repr"], [49, 2, 1, "c.PyObject_RichCompare", "PyObject_RichCompare"], [49, 2, 1, "c.PyObject_RichCompareBool", "PyObject_RichCompareBool"], [42, 2, 1, "c.PyObject_SetArenaAllocator", "PyObject_SetArenaAllocator"], [49, 2, 1, "c.PyObject_SetAttr", "PyObject_SetAttr"], [49, 2, 1, "c.PyObject_SetAttrString", "PyObject_SetAttrString"], [49, 2, 1, "c.PyObject_SetItem", "PyObject_SetItem"], [49, 2, 1, "c.PyObject_Size", "PyObject_Size"], [49, 2, 1, "c.PyObject_Str", "PyObject_Str"], [49, 2, 1, "c.PyObject_Type", "PyObject_Type"], [49, 2, 1, "c.PyObject_TypeCheck", "PyObject_TypeCheck"], [58, 1, 1, "c.PyObject_VAR_HEAD", "PyObject_VAR_HEAD"], [10, 2, 1, "c.PyObject_Vectorcall", "PyObject_Vectorcall"], [10, 2, 1, "c.PyObject_VectorcallDict", "PyObject_VectorcallDict"], [10, 2, 1, "c.PyObject_VectorcallMethod", "PyObject_VectorcallMethod"], [34, 4, 1, "c.PyPreConfig", "PyPreConfig"], [34, 2, 1, "c.PyPreConfig_InitIsolatedConfig", "PyPreConfig_InitIsolatedConfig"], [34, 2, 1, "c.PyPreConfig_InitPythonConfig", "PyPreConfig_InitPythonConfig"], [21, 0, 1, "c.PyProperty_Type", "PyProperty_Type"], [66, 2, 1, "c.PyRun_AnyFile", "PyRun_AnyFile"], [66, 2, 1, "c.PyRun_AnyFileEx", "PyRun_AnyFileEx"], [66, 2, 1, "c.PyRun_AnyFileExFlags", "PyRun_AnyFileExFlags"], [66, 2, 1, "c.PyRun_AnyFileFlags", "PyRun_AnyFileFlags"], [66, 2, 1, "c.PyRun_File", "PyRun_File"], [66, 2, 1, "c.PyRun_FileEx", "PyRun_FileEx"], [66, 2, 1, "c.PyRun_FileExFlags", "PyRun_FileExFlags"], [66, 2, 1, "c.PyRun_FileFlags", "PyRun_FileFlags"], [66, 2, 1, "c.PyRun_InteractiveLoop", "PyRun_InteractiveLoop"], [66, 2, 1, "c.PyRun_InteractiveLoopFlags", "PyRun_InteractiveLoopFlags"], [66, 2, 1, "c.PyRun_InteractiveOne", "PyRun_InteractiveOne"], [66, 2, 1, "c.PyRun_InteractiveOneFlags", "PyRun_InteractiveOneFlags"], [66, 2, 1, "c.PyRun_SimpleFile", "PyRun_SimpleFile"], [66, 2, 1, "c.PyRun_SimpleFileEx", "PyRun_SimpleFileEx"], [66, 2, 1, "c.PyRun_SimpleFileExFlags", "PyRun_SimpleFileExFlags"], [66, 2, 1, "c.PyRun_SimpleString", "PyRun_SimpleString"], [66, 2, 1, "c.PyRun_SimpleStringFlags", "PyRun_SimpleStringFlags"], [66, 2, 1, "c.PyRun_String", "PyRun_String"], [66, 2, 1, "c.PyRun_StringFlags", "PyRun_StringFlags"], [36, 4, 1, "c.PySendResult", "PySendResult"], [37, 2, 1, "c.PySeqIter_Check", "PySeqIter_Check"], [37, 2, 1, "c.PySeqIter_New", "PySeqIter_New"], [37, 0, 1, "c.PySeqIter_Type", "PySeqIter_Type"], [63, 4, 1, "c.PySequenceMethods", "PySequenceMethods"], [54, 2, 1, "c.PySequence_Check", "PySequence_Check"], [54, 2, 1, "c.PySequence_Concat", "PySequence_Concat"], [54, 2, 1, "c.PySequence_Contains", "PySequence_Contains"], [54, 2, 1, "c.PySequence_Count", "PySequence_Count"], [54, 2, 1, "c.PySequence_DelItem", "PySequence_DelItem"], [54, 2, 1, "c.PySequence_DelSlice", "PySequence_DelSlice"], [54, 2, 1, "c.PySequence_Fast", "PySequence_Fast"], [54, 2, 1, "c.PySequence_Fast_GET_ITEM", "PySequence_Fast_GET_ITEM"], [54, 2, 1, "c.PySequence_Fast_GET_SIZE", "PySequence_Fast_GET_SIZE"], [54, 2, 1, "c.PySequence_Fast_ITEMS", "PySequence_Fast_ITEMS"], [54, 2, 1, "c.PySequence_GetItem", "PySequence_GetItem"], [54, 2, 1, "c.PySequence_GetSlice", "PySequence_GetSlice"], [54, 2, 1, "c.PySequence_ITEM", "PySequence_ITEM"], [54, 2, 1, "c.PySequence_InPlaceConcat", "PySequence_InPlaceConcat"], [54, 2, 1, "c.PySequence_InPlaceRepeat", "PySequence_InPlaceRepeat"], [54, 2, 1, "c.PySequence_Index", "PySequence_Index"], [54, 2, 1, "c.PySequence_Length", "PySequence_Length"], [54, 2, 1, "c.PySequence_List", "PySequence_List"], [54, 2, 1, "c.PySequence_Repeat", "PySequence_Repeat"], [54, 2, 1, "c.PySequence_SetItem", "PySequence_SetItem"], [54, 2, 1, "c.PySequence_SetSlice", "PySequence_SetSlice"], [54, 2, 1, "c.PySequence_Size", "PySequence_Size"], [54, 2, 1, "c.PySequence_Tuple", "PySequence_Tuple"], [55, 4, 1, "c.PySetObject", "PySetObject"], [55, 2, 1, "c.PySet_Add", "PySet_Add"], [55, 2, 1, "c.PySet_Check", "PySet_Check"], [55, 2, 1, "c.PySet_CheckExact", "PySet_CheckExact"], [55, 2, 1, "c.PySet_Clear", "PySet_Clear"], [55, 2, 1, "c.PySet_Contains", "PySet_Contains"], [55, 2, 1, "c.PySet_Discard", "PySet_Discard"], [55, 2, 1, "c.PySet_GET_SIZE", "PySet_GET_SIZE"], [55, 2, 1, "c.PySet_New", "PySet_New"], [55, 2, 1, "c.PySet_Pop", "PySet_Pop"], [55, 2, 1, "c.PySet_Size", "PySet_Size"], [55, 0, 1, "c.PySet_Type", "PySet_Type"], [23, 2, 1, "c.PySignal_SetWakeupFd", "PySignal_SetWakeupFd"], [56, 2, 1, "c.PySlice_AdjustIndices", "PySlice_AdjustIndices"], [56, 2, 1, "c.PySlice_Check", "PySlice_Check"], [56, 2, 1, "c.PySlice_GetIndices", "PySlice_GetIndices"], [56, 2, 1, "c.PySlice_GetIndicesEx", "PySlice_GetIndicesEx"], [56, 2, 1, "c.PySlice_New", "PySlice_New"], [56, 0, 1, "c.PySlice_Type", "PySlice_Type"], [56, 2, 1, "c.PySlice_Unpack", "PySlice_Unpack"], [45, 2, 1, "c.PyState_AddModule", "PyState_AddModule"], [45, 2, 1, "c.PyState_FindModule", "PyState_FindModule"], [45, 2, 1, "c.PyState_RemoveModule", "PyState_RemoveModule"], [34, 4, 1, "c.PyStatus", "PyStatus"], [34, 2, 1, "c.PyStatus_Error", "PyStatus_Error"], [34, 2, 1, "c.PyStatus_Exception", "PyStatus_Exception"], [34, 2, 1, "c.PyStatus_Exit", "PyStatus_Exit"], [34, 2, 1, "c.PyStatus_IsError", "PyStatus_IsError"], [34, 2, 1, "c.PyStatus_IsExit", "PyStatus_IsExit"], [34, 2, 1, "c.PyStatus_NoMemory", "PyStatus_NoMemory"], [34, 2, 1, "c.PyStatus_Ok", "PyStatus_Ok"], [60, 4, 1, "c.PyStructSequence_Desc", "PyStructSequence_Desc"], [60, 4, 1, "c.PyStructSequence_Field", "PyStructSequence_Field"], [60, 2, 1, "c.PyStructSequence_GET_ITEM", "PyStructSequence_GET_ITEM"], [60, 2, 1, "c.PyStructSequence_GetItem", "PyStructSequence_GetItem"], [60, 2, 1, "c.PyStructSequence_InitType", "PyStructSequence_InitType"], [60, 2, 1, "c.PyStructSequence_InitType2", "PyStructSequence_InitType2"], [60, 2, 1, "c.PyStructSequence_New", "PyStructSequence_New"], [60, 2, 1, "c.PyStructSequence_NewType", "PyStructSequence_NewType"], [60, 2, 1, "c.PyStructSequence_SET_ITEM", "PyStructSequence_SET_ITEM"], [60, 2, 1, "c.PyStructSequence_SetItem", "PyStructSequence_SetItem"], [60, 0, 1, "c.PyStructSequence_UnnamedField", "PyStructSequence_UnnamedField"], [59, 2, 1, "c.PySys_AddAuditHook", "PySys_AddAuditHook"], [59, 2, 1, "c.PySys_AddWarnOption", "PySys_AddWarnOption"], [59, 2, 1, "c.PySys_AddWarnOptionUnicode", "PySys_AddWarnOptionUnicode"], [59, 2, 1, "c.PySys_AddXOption", "PySys_AddXOption"], [59, 2, 1, "c.PySys_Audit", "PySys_Audit"], [59, 2, 1, "c.PySys_FormatStderr", "PySys_FormatStderr"], [59, 2, 1, "c.PySys_FormatStdout", "PySys_FormatStdout"], [59, 2, 1, "c.PySys_GetObject", "PySys_GetObject"], [59, 2, 1, "c.PySys_GetXOptions", "PySys_GetXOptions"], [59, 2, 1, "c.PySys_ResetWarnOptions", "PySys_ResetWarnOptions"], [33, 2, 1, "c.PySys_SetArgv", "PySys_SetArgv"], [33, 2, 1, "c.PySys_SetArgvEx", "PySys_SetArgvEx"], [59, 2, 1, "c.PySys_SetObject", "PySys_SetObject"], [59, 2, 1, "c.PySys_SetPath", "PySys_SetPath"], [59, 2, 1, "c.PySys_WriteStderr", "PySys_WriteStderr"], [59, 2, 1, "c.PySys_WriteStdout", "PySys_WriteStdout"], [20, 2, 1, "c.PyTZInfo_Check", "PyTZInfo_Check"], [20, 2, 1, "c.PyTZInfo_CheckExact", "PyTZInfo_CheckExact"], [33, 4, 1, "c.PyThreadState", "PyThreadState"], [33, 2, 1, "c.PyThreadState_Clear", "PyThreadState_Clear"], [33, 2, 1, "c.PyThreadState_Delete", "PyThreadState_Delete"], [33, 2, 1, "c.PyThreadState_DeleteCurrent", "PyThreadState_DeleteCurrent"], [33, 2, 1, "c.PyThreadState_EnterTracing", "PyThreadState_EnterTracing"], [33, 2, 1, "c.PyThreadState_Get", "PyThreadState_Get"], [33, 2, 1, "c.PyThreadState_GetDict", "PyThreadState_GetDict"], [33, 2, 1, "c.PyThreadState_GetFrame", "PyThreadState_GetFrame"], [33, 2, 1, "c.PyThreadState_GetID", "PyThreadState_GetID"], [33, 2, 1, "c.PyThreadState_GetInterpreter", "PyThreadState_GetInterpreter"], [33, 2, 1, "c.PyThreadState_LeaveTracing", "PyThreadState_LeaveTracing"], [33, 2, 1, "c.PyThreadState_New", "PyThreadState_New"], [33, 2, 1, "c.PyThreadState_Next", "PyThreadState_Next"], [33, 2, 1, "c.PyThreadState_SetAsyncExc", "PyThreadState_SetAsyncExc"], [33, 2, 1, "c.PyThreadState_Swap", "PyThreadState_Swap"], [33, 2, 1, "c.PyThread_ReInitTLS", "PyThread_ReInitTLS"], [33, 2, 1, "c.PyThread_create_key", "PyThread_create_key"], [33, 2, 1, "c.PyThread_delete_key", "PyThread_delete_key"], [33, 2, 1, "c.PyThread_delete_key_value", "PyThread_delete_key_value"], [33, 2, 1, "c.PyThread_get_key_value", "PyThread_get_key_value"], [33, 2, 1, "c.PyThread_set_key_value", "PyThread_set_key_value"], [33, 2, 1, "c.PyThread_tss_alloc", "PyThread_tss_alloc"], [33, 2, 1, "c.PyThread_tss_create", "PyThread_tss_create"], [33, 2, 1, "c.PyThread_tss_delete", "PyThread_tss_delete"], [33, 2, 1, "c.PyThread_tss_free", "PyThread_tss_free"], [33, 2, 1, "c.PyThread_tss_get", "PyThread_tss_get"], [33, 2, 1, "c.PyThread_tss_is_created", "PyThread_tss_is_created"], [33, 2, 1, "c.PyThread_tss_set", "PyThread_tss_set"], [20, 2, 1, "c.PyTimeZone_FromOffset", "PyTimeZone_FromOffset"], [20, 2, 1, "c.PyTimeZone_FromOffsetAndName", "PyTimeZone_FromOffsetAndName"], [20, 2, 1, "c.PyTime_Check", "PyTime_Check"], [20, 2, 1, "c.PyTime_CheckExact", "PyTime_CheckExact"], [20, 2, 1, "c.PyTime_FromTime", "PyTime_FromTime"], [20, 2, 1, "c.PyTime_FromTimeAndFold", "PyTime_FromTimeAndFold"], [42, 2, 1, "c.PyTraceMalloc_Track", "PyTraceMalloc_Track"], [42, 2, 1, "c.PyTraceMalloc_Untrack", "PyTraceMalloc_Untrack"], [33, 0, 1, "c.PyTrace_CALL", "PyTrace_CALL"], [33, 0, 1, "c.PyTrace_C_CALL", "PyTrace_C_CALL"], [33, 0, 1, "c.PyTrace_C_EXCEPTION", "PyTrace_C_EXCEPTION"], [33, 0, 1, "c.PyTrace_C_RETURN", "PyTrace_C_RETURN"], [33, 0, 1, "c.PyTrace_EXCEPTION", "PyTrace_EXCEPTION"], [33, 0, 1, "c.PyTrace_LINE", "PyTrace_LINE"], [33, 0, 1, "c.PyTrace_OPCODE", "PyTrace_OPCODE"], [33, 0, 1, "c.PyTrace_RETURN", "PyTrace_RETURN"], [60, 4, 1, "c.PyTupleObject", "PyTupleObject"], [60, 2, 1, "c.PyTuple_Check", "PyTuple_Check"], [60, 2, 1, "c.PyTuple_CheckExact", "PyTuple_CheckExact"], [60, 2, 1, "c.PyTuple_GET_ITEM", "PyTuple_GET_ITEM"], [60, 2, 1, "c.PyTuple_GET_SIZE", "PyTuple_GET_SIZE"], [60, 2, 1, "c.PyTuple_GetItem", "PyTuple_GetItem"], [60, 2, 1, "c.PyTuple_GetSlice", "PyTuple_GetSlice"], [60, 2, 1, "c.PyTuple_New", "PyTuple_New"], [60, 2, 1, "c.PyTuple_Pack", "PyTuple_Pack"], [60, 2, 1, "c.PyTuple_SET_ITEM", "PyTuple_SET_ITEM"], [60, 2, 1, "c.PyTuple_SetItem", "PyTuple_SetItem"], [60, 2, 1, "c.PyTuple_Size", "PyTuple_Size"], [60, 0, 1, "c.PyTuple_Type", "PyTuple_Type"], [61, 4, 1, "c.PyTypeObject", "PyTypeObject"], [61, 2, 1, "c.PyType_AddWatcher", "PyType_AddWatcher"], [61, 2, 1, "c.PyType_Check", "PyType_Check"], [61, 2, 1, "c.PyType_CheckExact", "PyType_CheckExact"], [61, 2, 1, "c.PyType_ClearCache", "PyType_ClearCache"], [61, 2, 1, "c.PyType_ClearWatcher", "PyType_ClearWatcher"], [61, 2, 1, "c.PyType_FromMetaclass", "PyType_FromMetaclass"], [61, 2, 1, "c.PyType_FromModuleAndSpec", "PyType_FromModuleAndSpec"], [61, 2, 1, "c.PyType_FromSpec", "PyType_FromSpec"], [61, 2, 1, "c.PyType_FromSpecWithBases", "PyType_FromSpecWithBases"], [61, 2, 1, "c.PyType_GenericAlloc", "PyType_GenericAlloc"], [61, 2, 1, "c.PyType_GenericNew", "PyType_GenericNew"], [61, 2, 1, "c.PyType_GetDict", "PyType_GetDict"], [61, 2, 1, "c.PyType_GetFlags", "PyType_GetFlags"], [61, 2, 1, "c.PyType_GetModule", "PyType_GetModule"], [61, 2, 1, "c.PyType_GetModuleByDef", "PyType_GetModuleByDef"], [61, 2, 1, "c.PyType_GetModuleState", "PyType_GetModuleState"], [61, 2, 1, "c.PyType_GetName", "PyType_GetName"], [61, 2, 1, "c.PyType_GetQualName", "PyType_GetQualName"], [61, 2, 1, "c.PyType_GetSlot", "PyType_GetSlot"], [49, 2, 1, "c.PyType_GetTypeDataSize", "PyType_GetTypeDataSize"], [61, 2, 1, "c.PyType_HasFeature", "PyType_HasFeature"], [61, 2, 1, "c.PyType_IS_GC", "PyType_IS_GC"], [61, 2, 1, "c.PyType_IsSubtype", "PyType_IsSubtype"], [61, 2, 1, "c.PyType_Modified", "PyType_Modified"], [61, 2, 1, "c.PyType_Ready", "PyType_Ready"], [61, 4, 1, "c.PyType_Slot", "PyType_Slot"], [61, 4, 1, "c.PyType_Spec", "PyType_Spec"], [61, 0, 1, "c.PyType_Type", "PyType_Type"], [61, 2, 1, "c.PyType_Watch", "PyType_Watch"], [61, 4, 1, "c.PyType_WatchCallback", "PyType_WatchCallback"], [23, 2, 1, "c.PyUnicodeDecodeError_Create", "PyUnicodeDecodeError_Create"], [23, 2, 1, "c.PyUnicodeDecodeError_GetEncoding", "PyUnicodeDecodeError_GetEncoding"], [23, 2, 1, "c.PyUnicodeDecodeError_GetEnd", "PyUnicodeDecodeError_GetEnd"], [23, 2, 1, "c.PyUnicodeDecodeError_GetObject", "PyUnicodeDecodeError_GetObject"], [23, 2, 1, "c.PyUnicodeDecodeError_GetReason", "PyUnicodeDecodeError_GetReason"], [23, 2, 1, "c.PyUnicodeDecodeError_GetStart", "PyUnicodeDecodeError_GetStart"], [23, 2, 1, "c.PyUnicodeDecodeError_SetEnd", "PyUnicodeDecodeError_SetEnd"], [23, 2, 1, "c.PyUnicodeDecodeError_SetReason", "PyUnicodeDecodeError_SetReason"], [23, 2, 1, "c.PyUnicodeDecodeError_SetStart", "PyUnicodeDecodeError_SetStart"], [23, 2, 1, "c.PyUnicodeEncodeError_GetEncoding", "PyUnicodeEncodeError_GetEncoding"], [23, 2, 1, "c.PyUnicodeEncodeError_GetEnd", "PyUnicodeEncodeError_GetEnd"], [23, 2, 1, "c.PyUnicodeEncodeError_GetObject", "PyUnicodeEncodeError_GetObject"], [23, 2, 1, "c.PyUnicodeEncodeError_GetReason", "PyUnicodeEncodeError_GetReason"], [23, 2, 1, "c.PyUnicodeEncodeError_GetStart", "PyUnicodeEncodeError_GetStart"], [23, 2, 1, "c.PyUnicodeEncodeError_SetEnd", "PyUnicodeEncodeError_SetEnd"], [23, 2, 1, "c.PyUnicodeEncodeError_SetReason", "PyUnicodeEncodeError_SetReason"], [23, 2, 1, "c.PyUnicodeEncodeError_SetStart", "PyUnicodeEncodeError_SetStart"], [64, 4, 1, "c.PyUnicodeObject", "PyUnicodeObject"], [23, 2, 1, "c.PyUnicodeTranslateError_GetEnd", "PyUnicodeTranslateError_GetEnd"], [23, 2, 1, "c.PyUnicodeTranslateError_GetObject", "PyUnicodeTranslateError_GetObject"], [23, 2, 1, "c.PyUnicodeTranslateError_GetReason", "PyUnicodeTranslateError_GetReason"], [23, 2, 1, "c.PyUnicodeTranslateError_GetStart", "PyUnicodeTranslateError_GetStart"], [23, 2, 1, "c.PyUnicodeTranslateError_SetEnd", "PyUnicodeTranslateError_SetEnd"], [23, 2, 1, "c.PyUnicodeTranslateError_SetReason", "PyUnicodeTranslateError_SetReason"], [23, 2, 1, "c.PyUnicodeTranslateError_SetStart", "PyUnicodeTranslateError_SetStart"], [64, 2, 1, "c.PyUnicode_1BYTE_DATA", "PyUnicode_1BYTE_DATA"], [64, 1, 1, "c.PyUnicode_1BYTE_KIND", "PyUnicode_1BYTE_KIND"], [64, 2, 1, "c.PyUnicode_2BYTE_DATA", "PyUnicode_2BYTE_DATA"], [64, 1, 1, "c.PyUnicode_2BYTE_KIND", "PyUnicode_2BYTE_KIND"], [64, 2, 1, "c.PyUnicode_4BYTE_DATA", "PyUnicode_4BYTE_DATA"], [64, 1, 1, "c.PyUnicode_4BYTE_KIND", "PyUnicode_4BYTE_KIND"], [64, 2, 1, "c.PyUnicode_AsASCIIString", "PyUnicode_AsASCIIString"], [64, 2, 1, "c.PyUnicode_AsCharmapString", "PyUnicode_AsCharmapString"], [64, 2, 1, "c.PyUnicode_AsEncodedString", "PyUnicode_AsEncodedString"], [64, 2, 1, "c.PyUnicode_AsLatin1String", "PyUnicode_AsLatin1String"], [64, 2, 1, "c.PyUnicode_AsMBCSString", "PyUnicode_AsMBCSString"], [64, 2, 1, "c.PyUnicode_AsRawUnicodeEscapeString", "PyUnicode_AsRawUnicodeEscapeString"], [64, 2, 1, "c.PyUnicode_AsUCS4", "PyUnicode_AsUCS4"], [64, 2, 1, "c.PyUnicode_AsUCS4Copy", "PyUnicode_AsUCS4Copy"], [64, 2, 1, "c.PyUnicode_AsUTF16String", "PyUnicode_AsUTF16String"], [64, 2, 1, "c.PyUnicode_AsUTF32String", "PyUnicode_AsUTF32String"], [64, 2, 1, "c.PyUnicode_AsUTF8", "PyUnicode_AsUTF8"], [64, 2, 1, "c.PyUnicode_AsUTF8AndSize", "PyUnicode_AsUTF8AndSize"], [64, 2, 1, "c.PyUnicode_AsUTF8String", "PyUnicode_AsUTF8String"], [64, 2, 1, "c.PyUnicode_AsUnicodeEscapeString", "PyUnicode_AsUnicodeEscapeString"], [64, 2, 1, "c.PyUnicode_AsWideChar", "PyUnicode_AsWideChar"], [64, 2, 1, "c.PyUnicode_AsWideCharString", "PyUnicode_AsWideCharString"], [64, 2, 1, "c.PyUnicode_Check", "PyUnicode_Check"], [64, 2, 1, "c.PyUnicode_CheckExact", "PyUnicode_CheckExact"], [64, 2, 1, "c.PyUnicode_Compare", "PyUnicode_Compare"], [64, 2, 1, "c.PyUnicode_CompareWithASCIIString", "PyUnicode_CompareWithASCIIString"], [64, 2, 1, "c.PyUnicode_Concat", "PyUnicode_Concat"], [64, 2, 1, "c.PyUnicode_Contains", "PyUnicode_Contains"], [64, 2, 1, "c.PyUnicode_CopyCharacters", "PyUnicode_CopyCharacters"], [64, 2, 1, "c.PyUnicode_Count", "PyUnicode_Count"], [64, 2, 1, "c.PyUnicode_DATA", "PyUnicode_DATA"], [64, 2, 1, "c.PyUnicode_Decode", "PyUnicode_Decode"], [64, 2, 1, "c.PyUnicode_DecodeASCII", "PyUnicode_DecodeASCII"], [64, 2, 1, "c.PyUnicode_DecodeCharmap", "PyUnicode_DecodeCharmap"], [64, 2, 1, "c.PyUnicode_DecodeFSDefault", "PyUnicode_DecodeFSDefault"], [64, 2, 1, "c.PyUnicode_DecodeFSDefaultAndSize", "PyUnicode_DecodeFSDefaultAndSize"], [64, 2, 1, "c.PyUnicode_DecodeLatin1", "PyUnicode_DecodeLatin1"], [64, 2, 1, "c.PyUnicode_DecodeLocale", "PyUnicode_DecodeLocale"], [64, 2, 1, "c.PyUnicode_DecodeLocaleAndSize", "PyUnicode_DecodeLocaleAndSize"], [64, 2, 1, "c.PyUnicode_DecodeMBCS", "PyUnicode_DecodeMBCS"], [64, 2, 1, "c.PyUnicode_DecodeMBCSStateful", "PyUnicode_DecodeMBCSStateful"], [64, 2, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "PyUnicode_DecodeRawUnicodeEscape"], [64, 2, 1, "c.PyUnicode_DecodeUTF16", "PyUnicode_DecodeUTF16"], [64, 2, 1, "c.PyUnicode_DecodeUTF16Stateful", "PyUnicode_DecodeUTF16Stateful"], [64, 2, 1, "c.PyUnicode_DecodeUTF32", "PyUnicode_DecodeUTF32"], [64, 2, 1, "c.PyUnicode_DecodeUTF32Stateful", "PyUnicode_DecodeUTF32Stateful"], [64, 2, 1, "c.PyUnicode_DecodeUTF7", "PyUnicode_DecodeUTF7"], [64, 2, 1, "c.PyUnicode_DecodeUTF7Stateful", "PyUnicode_DecodeUTF7Stateful"], [64, 2, 1, "c.PyUnicode_DecodeUTF8", "PyUnicode_DecodeUTF8"], [64, 2, 1, "c.PyUnicode_DecodeUTF8Stateful", "PyUnicode_DecodeUTF8Stateful"], [64, 2, 1, "c.PyUnicode_DecodeUnicodeEscape", "PyUnicode_DecodeUnicodeEscape"], [64, 2, 1, "c.PyUnicode_EncodeCodePage", "PyUnicode_EncodeCodePage"], [64, 2, 1, "c.PyUnicode_EncodeFSDefault", "PyUnicode_EncodeFSDefault"], [64, 2, 1, "c.PyUnicode_EncodeLocale", "PyUnicode_EncodeLocale"], [64, 2, 1, "c.PyUnicode_FSConverter", "PyUnicode_FSConverter"], [64, 2, 1, "c.PyUnicode_FSDecoder", "PyUnicode_FSDecoder"], [64, 2, 1, "c.PyUnicode_Fill", "PyUnicode_Fill"], [64, 2, 1, "c.PyUnicode_Find", "PyUnicode_Find"], [64, 2, 1, "c.PyUnicode_FindChar", "PyUnicode_FindChar"], [64, 2, 1, "c.PyUnicode_Format", "PyUnicode_Format"], [64, 2, 1, "c.PyUnicode_FromEncodedObject", "PyUnicode_FromEncodedObject"], [64, 2, 1, "c.PyUnicode_FromFormat", "PyUnicode_FromFormat"], [64, 2, 1, "c.PyUnicode_FromFormatV", "PyUnicode_FromFormatV"], [64, 2, 1, "c.PyUnicode_FromKindAndData", "PyUnicode_FromKindAndData"], [64, 2, 1, "c.PyUnicode_FromObject", "PyUnicode_FromObject"], [64, 2, 1, "c.PyUnicode_FromString", "PyUnicode_FromString"], [64, 2, 1, "c.PyUnicode_FromStringAndSize", "PyUnicode_FromStringAndSize"], [64, 2, 1, "c.PyUnicode_FromWideChar", "PyUnicode_FromWideChar"], [64, 2, 1, "c.PyUnicode_GET_LENGTH", "PyUnicode_GET_LENGTH"], [64, 2, 1, "c.PyUnicode_GetLength", "PyUnicode_GetLength"], [64, 2, 1, "c.PyUnicode_InternFromString", "PyUnicode_InternFromString"], [64, 2, 1, "c.PyUnicode_InternInPlace", "PyUnicode_InternInPlace"], [64, 2, 1, "c.PyUnicode_IsIdentifier", "PyUnicode_IsIdentifier"], [64, 2, 1, "c.PyUnicode_Join", "PyUnicode_Join"], [64, 2, 1, "c.PyUnicode_KIND", "PyUnicode_KIND"], [64, 2, 1, "c.PyUnicode_MAX_CHAR_VALUE", "PyUnicode_MAX_CHAR_VALUE"], [64, 2, 1, "c.PyUnicode_New", "PyUnicode_New"], [64, 2, 1, "c.PyUnicode_READ", "PyUnicode_READ"], [64, 2, 1, "c.PyUnicode_READY", "PyUnicode_READY"], [64, 2, 1, "c.PyUnicode_READ_CHAR", "PyUnicode_READ_CHAR"], [64, 2, 1, "c.PyUnicode_ReadChar", "PyUnicode_ReadChar"], [64, 2, 1, "c.PyUnicode_Replace", "PyUnicode_Replace"], [64, 2, 1, "c.PyUnicode_RichCompare", "PyUnicode_RichCompare"], [64, 2, 1, "c.PyUnicode_Split", "PyUnicode_Split"], [64, 2, 1, "c.PyUnicode_Splitlines", "PyUnicode_Splitlines"], [64, 2, 1, "c.PyUnicode_Substring", "PyUnicode_Substring"], [64, 2, 1, "c.PyUnicode_Tailmatch", "PyUnicode_Tailmatch"], [64, 2, 1, "c.PyUnicode_Translate", "PyUnicode_Translate"], [64, 0, 1, "c.PyUnicode_Type", "PyUnicode_Type"], [64, 2, 1, "c.PyUnicode_WRITE", "PyUnicode_WRITE"], [64, 2, 1, "c.PyUnicode_WriteChar", "PyUnicode_WriteChar"], [13, 2, 1, "c.PyUnstable_Code_GetExtra", "PyUnstable_Code_GetExtra"], [13, 2, 1, "c.PyUnstable_Code_New", "PyUnstable_Code_New"], [13, 2, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "PyUnstable_Code_NewWithPosOnlyArgs"], [13, 2, 1, "c.PyUnstable_Code_SetExtra", "PyUnstable_Code_SetExtra"], [13, 2, 1, "c.PyUnstable_Eval_RequestCodeExtraIndex", "PyUnstable_Eval_RequestCodeExtraIndex"], [23, 2, 1, "c.PyUnstable_Exc_PrepReraiseStar", "PyUnstable_Exc_PrepReraiseStar"], [28, 2, 1, "c.PyUnstable_GC_VisitObjects", "PyUnstable_GC_VisitObjects"], [26, 2, 1, "c.PyUnstable_InterpreterFrame_GetCode", "PyUnstable_InterpreterFrame_GetCode"], [26, 2, 1, "c.PyUnstable_InterpreterFrame_GetLasti", "PyUnstable_InterpreterFrame_GetLasti"], [26, 2, 1, "c.PyUnstable_InterpreterFrame_GetLine", "PyUnstable_InterpreterFrame_GetLine"], [39, 2, 1, "c.PyUnstable_Long_CompactValue", "PyUnstable_Long_CompactValue"], [39, 2, 1, "c.PyUnstable_Long_IsCompact", "PyUnstable_Long_IsCompact"], [28, 2, 1, "c.PyUnstable_Object_GC_NewWithExtraData", "PyUnstable_Object_GC_NewWithExtraData"], [51, 2, 1, "c.PyUnstable_PerfMapState_Fini", "PyUnstable_PerfMapState_Fini"], [51, 2, 1, "c.PyUnstable_PerfMapState_Init", "PyUnstable_PerfMapState_Init"], [61, 2, 1, "c.PyUnstable_Type_AssignVersionTag", "PyUnstable_Type_AssignVersionTag"], [51, 2, 1, "c.PyUnstable_WritePerfMapEntry", "PyUnstable_WritePerfMapEntry"], [58, 4, 1, "c.PyVarObject", "PyVarObject"], [58, 1, 1, "c.PyVarObject_HEAD_INIT", "PyVarObject_HEAD_INIT"], [10, 2, 1, "c.PyVectorcall_Call", "PyVectorcall_Call"], [10, 2, 1, "c.PyVectorcall_Function", "PyVectorcall_Function"], [10, 2, 1, "c.PyVectorcall_NARGS", "PyVectorcall_NARGS"], [67, 2, 1, "c.PyWeakref_Check", "PyWeakref_Check"], [67, 2, 1, "c.PyWeakref_CheckProxy", "PyWeakref_CheckProxy"], [67, 2, 1, "c.PyWeakref_CheckRef", "PyWeakref_CheckRef"], [67, 2, 1, "c.PyWeakref_GET_OBJECT", "PyWeakref_GET_OBJECT"], [67, 2, 1, "c.PyWeakref_GetObject", "PyWeakref_GetObject"], [67, 2, 1, "c.PyWeakref_NewProxy", "PyWeakref_NewProxy"], [67, 2, 1, "c.PyWeakref_NewRef", "PyWeakref_NewRef"], [34, 4, 1, "c.PyWideStringList", "PyWideStringList"], [34, 2, 1, "c.PyWideStringList_Append", "PyWideStringList_Append"], [34, 2, 1, "c.PyWideStringList_Insert", "PyWideStringList_Insert"], [21, 2, 1, "c.PyWrapper_New", "PyWrapper_New"], [35, 1, 1, "c.Py_ABS", "Py_ABS"], [35, 1, 1, "c.Py_ALWAYS_INLINE", "Py_ALWAYS_INLINE"], [58, 1, 1, "c.Py_AUDIT_READ", "Py_AUDIT_READ"], [33, 2, 1, "c.Py_AddPendingCall", "Py_AddPendingCall"], [59, 2, 1, "c.Py_AtExit", "Py_AtExit"], [59, 4, 1, "c.Py_AuditHookFunction", "Py_AuditHookFunction"], [33, 1, 1, "c.Py_BEGIN_ALLOW_THREADS", "Py_BEGIN_ALLOW_THREADS"], [33, 1, 1, "c.Py_BLOCK_THREADS", "Py_BLOCK_THREADS"], [5, 2, 1, "c.Py_BuildValue", "Py_BuildValue"], [66, 2, 1, "c.Py_BytesMain", "Py_BytesMain"], [33, 0, 1, "c.Py_BytesWarningFlag", "Py_BytesWarningFlag"], [35, 1, 1, "c.Py_CHARMASK", "Py_CHARMASK"], [52, 2, 1, "c.Py_CLEAR", "Py_CLEAR"], [66, 2, 1, "c.Py_CompileString", "Py_CompileString"], [66, 2, 1, "c.Py_CompileStringExFlags", "Py_CompileStringExFlags"], [66, 2, 1, "c.Py_CompileStringFlags", "Py_CompileStringFlags"], [66, 2, 1, "c.Py_CompileStringObject", "Py_CompileStringObject"], [35, 1, 1, "c.Py_DEBUG", "Py_DEBUG"], [52, 2, 1, "c.Py_DECREF", "Py_DECREF"], [35, 1, 1, "c.Py_DEPRECATED", "Py_DEPRECATED"], [33, 0, 1, "c.Py_DebugFlag", "Py_DebugFlag"], [52, 2, 1, "c.Py_DecRef", "Py_DecRef"], [59, 2, 1, "c.Py_DecodeLocale", "Py_DecodeLocale"], [33, 0, 1, "c.Py_DontWriteBytecodeFlag", "Py_DontWriteBytecodeFlag"], [33, 1, 1, "c.Py_END_ALLOW_THREADS", "Py_END_ALLOW_THREADS"], [63, 1, 1, "c.Py_EQ", "Py_EQ"], [56, 0, 1, "c.Py_Ellipsis", "Py_Ellipsis"], [59, 2, 1, "c.Py_EncodeLocale", "Py_EncodeLocale"], [33, 2, 1, "c.Py_EndInterpreter", "Py_EndInterpreter"], [23, 2, 1, "c.Py_EnterRecursiveCall", "Py_EnterRecursiveCall"], [59, 2, 1, "c.Py_Exit", "Py_Exit"], [34, 2, 1, "c.Py_ExitStatusException", "Py_ExitStatusException"], [6, 0, 1, "c.Py_False", "Py_False"], [59, 2, 1, "c.Py_FatalError", "Py_FatalError"], [59, 2, 1, "c.Py_FdIsInteractive", "Py_FdIsInteractive"], [33, 2, 1, "c.Py_Finalize", "Py_Finalize"], [33, 2, 1, "c.Py_FinalizeEx", "Py_FinalizeEx"], [33, 0, 1, "c.Py_FrozenFlag", "Py_FrozenFlag"], [63, 1, 1, "c.Py_GE", "Py_GE"], [35, 1, 1, "c.Py_GETENV", "Py_GETENV"], [63, 1, 1, "c.Py_GT", "Py_GT"], [62, 2, 1, "c.Py_GenericAlias", "Py_GenericAlias"], [62, 0, 1, "c.Py_GenericAliasType", "Py_GenericAliasType"], [34, 2, 1, "c.Py_GetArgcArgv", "Py_GetArgcArgv"], [33, 2, 1, "c.Py_GetBuildInfo", "Py_GetBuildInfo"], [33, 2, 1, "c.Py_GetCompiler", "Py_GetCompiler"], [33, 2, 1, "c.Py_GetCopyright", "Py_GetCopyright"], [33, 2, 1, "c.Py_GetExecPrefix", "Py_GetExecPrefix"], [33, 2, 1, "c.Py_GetPath", "Py_GetPath"], [33, 2, 1, "c.Py_GetPlatform", "Py_GetPlatform"], [33, 2, 1, "c.Py_GetPrefix", "Py_GetPrefix"], [33, 2, 1, "c.Py_GetProgramFullPath", "Py_GetProgramFullPath"], [33, 2, 1, "c.Py_GetProgramName", "Py_GetProgramName"], [33, 2, 1, "c.Py_GetPythonHome", "Py_GetPythonHome"], [33, 2, 1, "c.Py_GetVersion", "Py_GetVersion"], [33, 0, 1, "c.Py_HashRandomizationFlag", "Py_HashRandomizationFlag"], [52, 2, 1, "c.Py_INCREF", "Py_INCREF"], [58, 2, 1, "c.Py_IS_TYPE", "Py_IS_TYPE"], [33, 0, 1, "c.Py_IgnoreEnvironmentFlag", "Py_IgnoreEnvironmentFlag"], [52, 2, 1, "c.Py_IncRef", "Py_IncRef"], [33, 2, 1, "c.Py_Initialize", "Py_Initialize"], [33, 2, 1, "c.Py_InitializeEx", "Py_InitializeEx"], [34, 2, 1, "c.Py_InitializeFromConfig", "Py_InitializeFromConfig"], [33, 0, 1, "c.Py_InspectFlag", "Py_InspectFlag"], [33, 0, 1, "c.Py_InteractiveFlag", "Py_InteractiveFlag"], [58, 2, 1, "c.Py_Is", "Py_Is"], [58, 2, 1, "c.Py_IsFalse", "Py_IsFalse"], [33, 2, 1, "c.Py_IsInitialized", "Py_IsInitialized"], [58, 2, 1, "c.Py_IsNone", "Py_IsNone"], [58, 2, 1, "c.Py_IsTrue", "Py_IsTrue"], [33, 0, 1, "c.Py_IsolatedFlag", "Py_IsolatedFlag"], [63, 1, 1, "c.Py_LE", "Py_LE"], [57, 1, 1, "c.Py_LIMITED_API", "Py_LIMITED_API"], [63, 1, 1, "c.Py_LT", "Py_LT"], [23, 2, 1, "c.Py_LeaveRecursiveCall", "Py_LeaveRecursiveCall"], [33, 0, 1, "c.Py_LegacyWindowsFSEncodingFlag", "Py_LegacyWindowsFSEncodingFlag"], [33, 0, 1, "c.Py_LegacyWindowsStdioFlag", "Py_LegacyWindowsStdioFlag"], [35, 1, 1, "c.Py_MAX", "Py_MAX"], [35, 1, 1, "c.Py_MEMBER_SIZE", "Py_MEMBER_SIZE"], [35, 1, 1, "c.Py_MIN", "Py_MIN"], [45, 1, 1, "c.Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED", "Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED"], [45, 1, 1, "c.Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED", "Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED"], [45, 1, 1, "c.Py_MOD_PER_INTERPRETER_GIL_SUPPORTED", "Py_MOD_PER_INTERPRETER_GIL_SUPPORTED"], [66, 2, 1, "c.Py_Main", "Py_Main"], [63, 1, 1, "c.Py_NE", "Py_NE"], [35, 1, 1, "c.Py_NO_INLINE", "Py_NO_INLINE"], [33, 2, 1, "c.Py_NewInterpreter", "Py_NewInterpreter"], [33, 2, 1, "c.Py_NewInterpreterFromConfig", "Py_NewInterpreterFromConfig"], [52, 2, 1, "c.Py_NewRef", "Py_NewRef"], [33, 0, 1, "c.Py_NoSiteFlag", "Py_NoSiteFlag"], [33, 0, 1, "c.Py_NoUserSiteDirectory", "Py_NoUserSiteDirectory"], [46, 0, 1, "c.Py_None", "Py_None"], [49, 0, 1, "c.Py_NotImplemented", "Py_NotImplemented"], [33, 0, 1, "c.Py_OptimizeFlag", "Py_OptimizeFlag"], [49, 1, 1, "c.Py_PRINT_RAW", "Py_PRINT_RAW"], [34, 2, 1, "c.Py_PreInitialize", "Py_PreInitialize"], [34, 2, 1, "c.Py_PreInitializeFromArgs", "Py_PreInitializeFromArgs"], [34, 2, 1, "c.Py_PreInitializeFromBytesArgs", "Py_PreInitializeFromBytesArgs"], [33, 0, 1, "c.Py_QuietFlag", "Py_QuietFlag"], [58, 1, 1, "c.Py_READONLY", "Py_READONLY"], [52, 2, 1, "c.Py_REFCNT", "Py_REFCNT"], [58, 1, 1, "c.Py_RELATIVE_OFFSET", "Py_RELATIVE_OFFSET"], [6, 1, 1, "c.Py_RETURN_FALSE", "Py_RETURN_FALSE"], [46, 1, 1, "c.Py_RETURN_NONE", "Py_RETURN_NONE"], [49, 1, 1, "c.Py_RETURN_NOTIMPLEMENTED", "Py_RETURN_NOTIMPLEMENTED"], [63, 1, 1, "c.Py_RETURN_RICHCOMPARE", "Py_RETURN_RICHCOMPARE"], [6, 1, 1, "c.Py_RETURN_TRUE", "Py_RETURN_TRUE"], [23, 2, 1, "c.Py_ReprEnter", "Py_ReprEnter"], [23, 2, 1, "c.Py_ReprLeave", "Py_ReprLeave"], [34, 2, 1, "c.Py_RunMain", "Py_RunMain"], [52, 1, 1, "c.Py_SETREF", "Py_SETREF"], [52, 2, 1, "c.Py_SET_REFCNT", "Py_SET_REFCNT"], [58, 2, 1, "c.Py_SET_SIZE", "Py_SET_SIZE"], [58, 2, 1, "c.Py_SET_TYPE", "Py_SET_TYPE"], [58, 2, 1, "c.Py_SIZE", "Py_SIZE"], [35, 1, 1, "c.Py_STRINGIFY", "Py_STRINGIFY"], [33, 2, 1, "c.Py_SetPath", "Py_SetPath"], [33, 2, 1, "c.Py_SetProgramName", "Py_SetProgramName"], [33, 2, 1, "c.Py_SetPythonHome", "Py_SetPythonHome"], [33, 2, 1, "c.Py_SetStandardStreamEncoding", "Py_SetStandardStreamEncoding"], [63, 1, 1, "c.Py_TPFLAGS_BASETYPE", "Py_TPFLAGS_BASETYPE"], [63, 1, 1, "c.Py_TPFLAGS_BASE_EXC_SUBCLASS", "Py_TPFLAGS_BASE_EXC_SUBCLASS"], [63, 1, 1, "c.Py_TPFLAGS_BYTES_SUBCLASS", "Py_TPFLAGS_BYTES_SUBCLASS"], [63, 1, 1, "c.Py_TPFLAGS_DEFAULT", "Py_TPFLAGS_DEFAULT"], [63, 1, 1, "c.Py_TPFLAGS_DICT_SUBCLASS", "Py_TPFLAGS_DICT_SUBCLASS"], [63, 1, 1, "c.Py_TPFLAGS_DISALLOW_INSTANTIATION", "Py_TPFLAGS_DISALLOW_INSTANTIATION"], [63, 1, 1, "c.Py_TPFLAGS_HAVE_FINALIZE", "Py_TPFLAGS_HAVE_FINALIZE"], [63, 1, 1, "c.Py_TPFLAGS_HAVE_GC", "Py_TPFLAGS_HAVE_GC"], [63, 1, 1, "c.Py_TPFLAGS_HAVE_VECTORCALL", "Py_TPFLAGS_HAVE_VECTORCALL"], [63, 1, 1, "c.Py_TPFLAGS_HEAPTYPE", "Py_TPFLAGS_HEAPTYPE"], [63, 1, 1, "c.Py_TPFLAGS_IMMUTABLETYPE", "Py_TPFLAGS_IMMUTABLETYPE"], [63, 1, 1, "c.Py_TPFLAGS_ITEMS_AT_END", "Py_TPFLAGS_ITEMS_AT_END"], [63, 1, 1, "c.Py_TPFLAGS_LIST_SUBCLASS", "Py_TPFLAGS_LIST_SUBCLASS"], [63, 1, 1, "c.Py_TPFLAGS_LONG_SUBCLASS", "Py_TPFLAGS_LONG_SUBCLASS"], [63, 1, 1, "c.Py_TPFLAGS_MANAGED_DICT", "Py_TPFLAGS_MANAGED_DICT"], [63, 1, 1, "c.Py_TPFLAGS_MANAGED_WEAKREF", "Py_TPFLAGS_MANAGED_WEAKREF"], [63, 1, 1, "c.Py_TPFLAGS_MAPPING", "Py_TPFLAGS_MAPPING"], [63, 1, 1, "c.Py_TPFLAGS_METHOD_DESCRIPTOR", "Py_TPFLAGS_METHOD_DESCRIPTOR"], [63, 1, 1, "c.Py_TPFLAGS_READY", "Py_TPFLAGS_READY"], [63, 1, 1, "c.Py_TPFLAGS_READYING", "Py_TPFLAGS_READYING"], [63, 1, 1, "c.Py_TPFLAGS_SEQUENCE", "Py_TPFLAGS_SEQUENCE"], [63, 1, 1, "c.Py_TPFLAGS_TUPLE_SUBCLASS", "Py_TPFLAGS_TUPLE_SUBCLASS"], [63, 1, 1, "c.Py_TPFLAGS_TYPE_SUBCLASS", "Py_TPFLAGS_TYPE_SUBCLASS"], [63, 1, 1, "c.Py_TPFLAGS_UNICODE_SUBCLASS", "Py_TPFLAGS_UNICODE_SUBCLASS"], [63, 1, 1, "c.Py_TPFLAGS_VALID_VERSION_TAG", "Py_TPFLAGS_VALID_VERSION_TAG"], [58, 2, 1, "c.Py_TYPE", "Py_TYPE"], [58, 1, 1, "c.Py_T_BOOL", "Py_T_BOOL"], [58, 1, 1, "c.Py_T_BYTE", "Py_T_BYTE"], [58, 1, 1, "c.Py_T_CHAR", "Py_T_CHAR"], [58, 1, 1, "c.Py_T_DOUBLE", "Py_T_DOUBLE"], [58, 1, 1, "c.Py_T_FLOAT", "Py_T_FLOAT"], [58, 1, 1, "c.Py_T_INT", "Py_T_INT"], [58, 1, 1, "c.Py_T_LONG", "Py_T_LONG"], [58, 1, 1, "c.Py_T_LONGLONG", "Py_T_LONGLONG"], [58, 1, 1, "c.Py_T_OBJECT_EX", "Py_T_OBJECT_EX"], [58, 1, 1, "c.Py_T_PYSSIZET", "Py_T_PYSSIZET"], [58, 1, 1, "c.Py_T_SHORT", "Py_T_SHORT"], [58, 1, 1, "c.Py_T_STRING", "Py_T_STRING"], [58, 1, 1, "c.Py_T_STRING_INPLACE", "Py_T_STRING_INPLACE"], [58, 1, 1, "c.Py_T_UBYTE", "Py_T_UBYTE"], [58, 1, 1, "c.Py_T_UINT", "Py_T_UINT"], [58, 1, 1, "c.Py_T_ULONG", "Py_T_ULONG"], [58, 1, 1, "c.Py_T_ULONGLONG", "Py_T_ULONGLONG"], [58, 1, 1, "c.Py_T_USHORT", "Py_T_USHORT"], [6, 0, 1, "c.Py_True", "Py_True"], [64, 4, 1, "c.Py_UCS1", "Py_UCS1"], [64, 4, 1, "c.Py_UCS2", "Py_UCS2"], [64, 4, 1, "c.Py_UCS4", "Py_UCS4"], [33, 1, 1, "c.Py_UNBLOCK_THREADS", "Py_UNBLOCK_THREADS"], [64, 4, 1, "c.Py_UNICODE", "Py_UNICODE"], [64, 2, 1, "c.Py_UNICODE_ISALNUM", "Py_UNICODE_ISALNUM"], [64, 2, 1, "c.Py_UNICODE_ISALPHA", "Py_UNICODE_ISALPHA"], [64, 2, 1, "c.Py_UNICODE_ISDECIMAL", "Py_UNICODE_ISDECIMAL"], [64, 2, 1, "c.Py_UNICODE_ISDIGIT", "Py_UNICODE_ISDIGIT"], [64, 2, 1, "c.Py_UNICODE_ISLINEBREAK", "Py_UNICODE_ISLINEBREAK"], [64, 2, 1, "c.Py_UNICODE_ISLOWER", "Py_UNICODE_ISLOWER"], [64, 2, 1, "c.Py_UNICODE_ISNUMERIC", "Py_UNICODE_ISNUMERIC"], [64, 2, 1, "c.Py_UNICODE_ISPRINTABLE", "Py_UNICODE_ISPRINTABLE"], [64, 2, 1, "c.Py_UNICODE_ISSPACE", "Py_UNICODE_ISSPACE"], [64, 2, 1, "c.Py_UNICODE_ISTITLE", "Py_UNICODE_ISTITLE"], [64, 2, 1, "c.Py_UNICODE_ISUPPER", "Py_UNICODE_ISUPPER"], [64, 2, 1, "c.Py_UNICODE_IS_HIGH_SURROGATE", "Py_UNICODE_IS_HIGH_SURROGATE"], [64, 2, 1, "c.Py_UNICODE_IS_LOW_SURROGATE", "Py_UNICODE_IS_LOW_SURROGATE"], [64, 2, 1, "c.Py_UNICODE_IS_SURROGATE", "Py_UNICODE_IS_SURROGATE"], [64, 2, 1, "c.Py_UNICODE_JOIN_SURROGATES", "Py_UNICODE_JOIN_SURROGATES"], [64, 2, 1, "c.Py_UNICODE_TODECIMAL", "Py_UNICODE_TODECIMAL"], [64, 2, 1, "c.Py_UNICODE_TODIGIT", "Py_UNICODE_TODIGIT"], [64, 2, 1, "c.Py_UNICODE_TOLOWER", "Py_UNICODE_TOLOWER"], [64, 2, 1, "c.Py_UNICODE_TONUMERIC", "Py_UNICODE_TONUMERIC"], [64, 2, 1, "c.Py_UNICODE_TOTITLE", "Py_UNICODE_TOTITLE"], [64, 2, 1, "c.Py_UNICODE_TOUPPER", "Py_UNICODE_TOUPPER"], [35, 1, 1, "c.Py_UNREACHABLE", "Py_UNREACHABLE"], [35, 1, 1, "c.Py_UNUSED", "Py_UNUSED"], [33, 0, 1, "c.Py_UnbufferedStdioFlag", "Py_UnbufferedStdioFlag"], [28, 2, 1, "c.Py_VISIT", "Py_VISIT"], [5, 2, 1, "c.Py_VaBuildValue", "Py_VaBuildValue"], [33, 0, 1, "c.Py_VerboseFlag", "Py_VerboseFlag"], [4, 0, 1, "c.Py_Version", "Py_Version"], [52, 2, 1, "c.Py_XDECREF", "Py_XDECREF"], [52, 2, 1, "c.Py_XINCREF", "Py_XINCREF"], [52, 2, 1, "c.Py_XNewRef", "Py_XNewRef"], [52, 1, 1, "c.Py_XSETREF", "Py_XSETREF"], [7, 4, 1, "c.Py_buffer", "Py_buffer"], [15, 4, 1, "c.Py_complex", "Py_complex"], [66, 0, 1, "c.Py_eval_input", "Py_eval_input"], [66, 0, 1, "c.Py_file_input", "Py_file_input"], [30, 4, 1, "c.Py_hash_t", "Py_hash_t"], [45, 1, 1, "c.Py_mod_create", "Py_mod_create"], [45, 1, 1, "c.Py_mod_exec", "Py_mod_exec"], [45, 1, 1, "c.Py_mod_multiple_interpreters", "Py_mod_multiple_interpreters"], [66, 0, 1, "c.Py_single_input", "Py_single_input"], [35, 4, 1, "c.Py_ssize_t", "Py_ssize_t"], [33, 4, 1, "c.Py_tracefunc", "Py_tracefunc"], [33, 1, 1, "c.Py_tss_NEEDS_INIT", "Py_tss_NEEDS_INIT"], [33, 4, 1, "c.Py_tss_t", "Py_tss_t"], [30, 4, 1, "c.Py_uhash_t", "Py_uhash_t"], [58, 1, 1, "c.T_NONE", "T_NONE"], [58, 1, 1, "c.T_OBJECT", "T_OBJECT"], [9, 2, 1, "c._PyBytes_Resize", "_PyBytes_Resize"], [58, 4, 1, "c._PyCFunctionFast", "_PyCFunctionFast"], [58, 4, 1, "c._PyCFunctionFastWithKeywords", "_PyCFunctionFastWithKeywords"], [33, 4, 1, "c._PyFrameEvalFunction", "_PyFrameEvalFunction"], [26, 5, 1, "c._PyInterpreterFrame", "_PyInterpreterFrame"], [33, 2, 1, "c._PyInterpreterState_GetEvalFrameFunc", "_PyInterpreterState_GetEvalFrameFunc"], [33, 2, 1, "c._PyInterpreterState_SetEvalFrameFunc", "_PyInterpreterState_SetEvalFrameFunc"], [49, 2, 1, "c._PyObject_GetDictPtr", "_PyObject_GetDictPtr"], [3, 2, 1, "c._PyObject_New", "_PyObject_New"], [3, 2, 1, "c._PyObject_NewVar", "_PyObject_NewVar"], [60, 2, 1, "c._PyTuple_Resize", "_PyTuple_Resize"], [34, 2, 1, "c._Py_InitializeMain", "_Py_InitializeMain"], [3, 0, 1, "c._Py_NoneStruct", "_Py_NoneStruct"], [15, 2, 1, "c._Py_c_diff", "_Py_c_diff"], [15, 2, 1, "c._Py_c_neg", "_Py_c_neg"], [15, 2, 1, "c._Py_c_pow", "_Py_c_pow"], [15, 2, 1, "c._Py_c_prod", "_Py_c_prod"], [15, 2, 1, "c._Py_c_quot", "_Py_c_quot"], [15, 2, 1, "c._Py_c_sum", "_Py_c_sum"], [31, 5, 1, "c._frozen", "_frozen"], [31, 5, 1, "c._inittab", "_inittab"], [63, 4, 1, "c.allocfunc", "allocfunc"], [63, 4, 1, "c.binaryfunc", "binaryfunc"], [63, 4, 1, "c.descrgetfunc", "descrgetfunc"], [63, 4, 1, "c.descrsetfunc", "descrsetfunc"], [63, 4, 1, "c.destructor", "destructor"], [63, 4, 1, "c.freefunc", "freefunc"], [28, 4, 1, "c.gcvisitobjects_t", "gcvisitobjects_t"], [63, 4, 1, "c.getattrfunc", "getattrfunc"], [63, 4, 1, "c.getattrofunc", "getattrofunc"], [63, 4, 1, "c.getbufferproc", "getbufferproc"], [63, 4, 1, "c.getiterfunc", "getiterfunc"], [58, 4, 1, "c.getter", "getter"], [63, 4, 1, "c.hashfunc", "hashfunc"], [63, 4, 1, "c.initproc", "initproc"], [28, 4, 1, "c.inquiry", "inquiry"], [63, 4, 1, "c.iternextfunc", "iternextfunc"], [63, 4, 1, "c.lenfunc", "lenfunc"], [63, 4, 1, "c.newfunc", "newfunc"], [63, 4, 1, "c.objobjargproc", "objobjargproc"], [63, 4, 1, "c.objobjproc", "objobjproc"], [63, 4, 1, "c.releasebufferproc", "releasebufferproc"], [63, 4, 1, "c.reprfunc", "reprfunc"], [63, 4, 1, "c.richcmpfunc", "richcmpfunc"], [63, 4, 1, "c.sendfunc", "sendfunc"], [63, 4, 1, "c.setattrfunc", "setattrfunc"], [63, 4, 1, "c.setattrofunc", "setattrofunc"], [58, 4, 1, "c.setter", "setter"], [63, 4, 1, "c.ssizeargfunc", "ssizeargfunc"], [63, 4, 1, "c.ssizeobjargproc", "ssizeobjargproc"], [63, 4, 1, "c.ternaryfunc", "ternaryfunc"], [28, 4, 1, "c.traverseproc", "traverseproc"], [63, 4, 1, "c.unaryfunc", "unaryfunc"], [10, 4, 1, "c.vectorcallfunc", "vectorcallfunc"], [28, 4, 1, "c.visitproc", "visitproc"], [213, 6, 1, "", "ArithmeticError"], [213, 6, 1, "", "AssertionError"], [213, 6, 1, "", "AttributeError"], [213, 6, 1, "", "BaseException"], [213, 6, 1, "", "BaseExceptionGroup"], [213, 6, 1, "", "BlockingIOError"], [213, 6, 1, "", "BrokenPipeError"], [213, 6, 1, "", "BufferError"], [213, 6, 1, "", "BytesWarning"], [213, 6, 1, "", "ChildProcessError"], [213, 6, 1, "", "ConnectionAbortedError"], [213, 6, 1, "", "ConnectionError"], [213, 6, 1, "", "ConnectionRefusedError"], [213, 6, 1, "", "ConnectionResetError"], [213, 6, 1, "", "DeprecationWarning"], [213, 6, 1, "", "EOFError"], [168, 9, 1, "", "Ellipsis"], [213, 6, 1, "", "EncodingWarning"], [213, 6, 1, "", "EnvironmentError"], [213, 6, 1, "", "Exception"], [213, 6, 1, "", "ExceptionGroup"], [168, 9, 1, "", "False"], [213, 6, 1, "", "FileExistsError"], [213, 6, 1, "", "FileNotFoundError"], [213, 6, 1, "", "FloatingPointError"], [213, 6, 1, "", "FutureWarning"], [213, 6, 1, "", "GeneratorExit"], [213, 6, 1, "", "IOError"], [213, 6, 1, "", "ImportError"], [213, 6, 1, "", "ImportWarning"], [213, 6, 1, "", "IndentationError"], [213, 6, 1, "", "IndexError"], [213, 6, 1, "", "InterruptedError"], [213, 6, 1, "", "IsADirectoryError"], [213, 6, 1, "", "KeyError"], [213, 6, 1, "", "KeyboardInterrupt"], [213, 6, 1, "", "LookupError"], [213, 6, 1, "", "MemoryError"], [213, 6, 1, "", "ModuleNotFoundError"], [213, 6, 1, "", "NameError"], [168, 9, 1, "", "None"], [213, 6, 1, "", "NotADirectoryError"], [168, 9, 1, "", "NotImplemented"], [213, 6, 1, "", "NotImplementedError"], [213, 6, 1, "", "OSError"], [213, 6, 1, "", "OverflowError"], [213, 6, 1, "", "PendingDeprecationWarning"], [213, 6, 1, "", "PermissionError"], [213, 6, 1, "", "ProcessLookupError"], [213, 6, 1, "", "RecursionError"], [213, 6, 1, "", "ReferenceError"], [213, 6, 1, "", "ResourceWarning"], [213, 6, 1, "", "RuntimeError"], [213, 6, 1, "", "RuntimeWarning"], [213, 6, 1, "", "StopAsyncIteration"], [213, 6, 1, "", "StopIteration"], [213, 6, 1, "", "SyntaxError"], [213, 6, 1, "", "SyntaxWarning"], [213, 6, 1, "", "SystemError"], [213, 6, 1, "", "SystemExit"], [213, 6, 1, "", "TabError"], [213, 6, 1, "", "TimeoutError"], [168, 9, 1, "", "True"], [213, 6, 1, "", "TypeError"], [213, 6, 1, "", "UnboundLocalError"], [213, 6, 1, "", "UnicodeDecodeError"], [213, 6, 1, "", "UnicodeEncodeError"], [213, 6, 1, "", "UnicodeError"], [213, 6, 1, "", "UnicodeTranslateError"], [213, 6, 1, "", "UnicodeWarning"], [213, 6, 1, "", "UserWarning"], [213, 6, 1, "", "ValueError"], [213, 6, 1, "", "Warning"], [213, 6, 1, "", "WindowsError"], [213, 6, 1, "", "ZeroDivisionError"], [432, 7, 1, "cached__", "__cached__"], [168, 9, 1, "debug__", "__debug__"], [432, 7, 1, "file__", "__file__"], [113, 10, 0, "-", "__future__"], [225, 12, 1, "import__", "__import__"], [432, 7, 1, "loader__", "__loader__"], [114, 10, 0, "-", "__main__"], [432, 7, 1, "name__", "__name__"], [432, 7, 1, "package__", "__package__"], [432, 7, 1, "path__", "__path__"], [432, 7, 1, "spec__", "__spec__"], [115, 10, 0, "-", "_thread"], [369, 10, 0, "-", "_tkinter"], [116, 10, 0, "-", "abc"], [225, 12, 1, "", "abs"], [117, 10, 0, "-", "aifc"], [225, 12, 1, "", "aiter"], [225, 12, 1, "", "all"], [225, 12, 1, "", "anext"], [225, 12, 1, "", "any"], [120, 10, 0, "-", "argparse"], [121, 10, 0, "-", "array"], [225, 12, 1, "", "ascii"], [122, 10, 0, "-", "ast"], [123, 10, 0, "-", "asyncio"], [140, 10, 0, "-", "atexit"], [141, 10, 0, "-", "audioop"], [143, 10, 0, "-", "base64"], [144, 10, 0, "-", "bdb"], [225, 12, 1, "", "bin"], [146, 10, 0, "-", "binascii"], [147, 10, 0, "-", "bisect"], [225, 11, 1, "", "bool"], [225, 12, 1, "", "breakpoint"], [148, 10, 0, "-", "builtins"], [344, 11, 1, "", "bytearray"], [344, 11, 1, "", "bytes"], [149, 10, 0, "-", "bz2"], [308, 10, 0, "-", "cProfile"], [150, 10, 0, "-", "calendar"], [225, 12, 1, "", "callable"], [151, 10, 0, "-", "cgi"], [152, 10, 0, "-", "cgitb"], [225, 12, 1, "", "chr"], [153, 10, 0, "-", "chunk"], [225, 12, 1, "", "classmethod"], [154, 10, 0, "-", "cmath"], [155, 10, 0, "-", "cmd"], [157, 10, 0, "-", "code"], [158, 10, 0, "-", "codecs"], [159, 10, 0, "-", "codeop"], [160, 10, 0, "-", "collections"], [162, 10, 0, "-", "colorsys"], [225, 12, 1, "", "compile"], [163, 10, 0, "-", "compileall"], [225, 11, 1, "", "complex"], [167, 10, 0, "-", "configparser"], [169, 10, 0, "-", "contextlib"], [170, 10, 0, "-", "contextvars"], [171, 10, 0, "-", "copy"], [172, 10, 0, "-", "copyreg"], [168, 9, 1, "", "copyright"], [168, 9, 1, "", "credits"], [173, 10, 0, "-", "crypt"], [175, 10, 0, "-", "csv"], [176, 10, 0, "-", "ctypes"], [177, 10, 0, "-", "curses"], [181, 10, 0, "-", "dataclasses"], [183, 10, 0, "-", "datetime"], [184, 10, 0, "-", "dbm"], [186, 10, 0, "-", "decimal"], [225, 12, 1, "", "delattr"], [344, 11, 1, "", "dict"], [190, 10, 0, "-", "difflib"], [225, 12, 1, "", "dir"], [191, 10, 0, "-", "dis"], [225, 12, 1, "", "divmod"], [193, 10, 0, "-", "doctest"], [194, 10, 0, "-", "email"], [210, 10, 0, "-", "ensurepip"], [211, 10, 0, "-", "enum"], [225, 12, 1, "", "enumerate"], [212, 10, 0, "-", "errno"], [225, 12, 1, "", "eval"], [225, 12, 1, "", "exec"], [168, 9, 1, "", "exit"], [214, 10, 0, "-", "faulthandler"], [215, 10, 0, "-", "fcntl"], [216, 10, 0, "-", "filecmp"], [218, 10, 0, "-", "fileinput"], [225, 12, 1, "", "filter"], [225, 11, 1, "", "float"], [220, 10, 0, "-", "fnmatch"], [225, 12, 1, "", "format"], [221, 10, 0, "-", "fractions"], [344, 11, 1, "", "frozenset"], [223, 10, 0, "-", "ftplib"], [226, 10, 0, "-", "functools"], [227, 10, 0, "-", "gc"], [225, 12, 1, "", "getattr"], [228, 10, 0, "-", "getopt"], [229, 10, 0, "-", "getpass"], [230, 10, 0, "-", "gettext"], [231, 10, 0, "-", "glob"], [225, 12, 1, "", "globals"], [232, 10, 0, "-", "graphlib"], [233, 10, 0, "-", "grp"], [234, 10, 0, "-", "gzip"], [225, 12, 1, "", "hasattr"], [225, 12, 1, "", "hash"], [235, 10, 0, "-", "hashlib"], [236, 10, 0, "-", "heapq"], [225, 12, 1, "", "help"], [225, 12, 1, "", "hex"], [237, 10, 0, "-", "hmac"], [238, 10, 0, "-", "html"], [241, 10, 0, "-", "http"], [225, 12, 1, "", "id"], [247, 10, 0, "-", "idlelib"], [248, 10, 0, "-", "imaplib"], [249, 10, 0, "-", "imghdr"], [250, 10, 0, "-", "importlib"], [225, 12, 1, "", "input"], [255, 10, 0, "-", "inspect"], [225, 11, 1, "", "int"], [258, 10, 0, "-", "io"], [259, 10, 0, "-", "ipaddress"], [225, 12, 1, "", "isinstance"], [225, 12, 1, "", "issubclass"], [225, 12, 1, "", "iter"], [261, 10, 0, "-", "itertools"], [262, 10, 0, "-", "json"], [263, 10, 0, "-", "keyword"], [225, 12, 1, "", "len"], [112, 10, 0, "-", "lib2to3"], [168, 9, 1, "", "license"], [265, 10, 0, "-", "linecache"], [344, 11, 1, "", "list"], [266, 10, 0, "-", "locale"], [225, 12, 1, "", "locals"], [267, 10, 0, "-", "logging"], [270, 10, 0, "-", "lzma"], [271, 10, 0, "-", "mailbox"], [272, 10, 0, "-", "mailcap"], [225, 12, 1, "", "map"], [274, 10, 0, "-", "marshal"], [275, 10, 0, "-", "math"], [225, 12, 1, "", "max"], [344, 11, 1, "", "memoryview"], [276, 10, 0, "-", "mimetypes"], [225, 12, 1, "", "min"], [278, 10, 0, "-", "mmap"], [279, 10, 0, "-", "modulefinder"], [281, 10, 0, "-", "msilib"], [282, 10, 0, "-", "msvcrt"], [283, 10, 0, "-", "multiprocessing"], [286, 10, 0, "-", "netrc"], [225, 12, 1, "", "next"], [287, 10, 0, "-", "nis"], [288, 10, 0, "-", "nntplib"], [289, 10, 0, "-", "numbers"], [225, 11, 1, "", "object"], [225, 12, 1, "", "oct"], [225, 12, 1, "", "open"], [291, 10, 0, "-", "operator"], [292, 10, 0, "-", "optparse"], [225, 12, 1, "", "ord"], [293, 10, 0, "-", "os"], [295, 10, 0, "-", "ossaudiodev"], [296, 10, 0, "-", "pathlib"], [297, 10, 0, "-", "pdb"], [299, 10, 0, "-", "pickle"], [300, 10, 0, "-", "pickletools"], [301, 10, 0, "-", "pipes"], [302, 10, 0, "-", "pkgutil"], [303, 10, 0, "-", "platform"], [304, 10, 0, "-", "plistlib"], [305, 10, 0, "-", "poplib"], [306, 10, 0, "-", "posix"], [225, 12, 1, "", "pow"], [307, 10, 0, "-", "pprint"], [225, 12, 1, "", "print"], [308, 10, 0, "-", "profile"], [225, 11, 1, "", "property"], [308, 10, 0, "-", "pstats"], [309, 10, 0, "-", "pty"], [310, 10, 0, "-", "pwd"], [311, 10, 0, "-", "py_compile"], [312, 10, 0, "-", "pyclbr"], [313, 10, 0, "-", "pydoc"], [316, 10, 0, "-", "queue"], [168, 9, 1, "", "quit"], [317, 10, 0, "-", "quopri"], [318, 10, 0, "-", "random"], [344, 11, 1, "", "range"], [319, 10, 0, "-", "re"], [320, 10, 0, "-", "readline"], [225, 12, 1, "", "repr"], [321, 10, 0, "-", "reprlib"], [322, 10, 0, "-", "resource"], [225, 12, 1, "", "reversed"], [323, 10, 0, "-", "rlcompleter"], [225, 12, 1, "", "round"], [324, 10, 0, "-", "runpy"], [325, 10, 0, "-", "sched"], [326, 10, 0, "-", "secrets"], [328, 10, 0, "-", "select"], [329, 10, 0, "-", "selectors"], [344, 11, 1, "", "set"], [225, 12, 1, "", "setattr"], [330, 10, 0, "-", "shelve"], [331, 10, 0, "-", "shlex"], [332, 10, 0, "-", "shutil"], [333, 10, 0, "-", "signal"], [334, 10, 0, "-", "site"], [334, 10, 0, "-", "sitecustomize"], [225, 11, 1, "", "slice"], [335, 10, 0, "-", "smtplib"], [336, 10, 0, "-", "sndhdr"], [337, 10, 0, "-", "socket"], [338, 10, 0, "-", "socketserver"], [225, 12, 1, "", "sorted"], [339, 10, 0, "-", "spwd"], [340, 10, 0, "-", "sqlite3"], [341, 10, 0, "-", "ssl"], [342, 10, 0, "-", "stat"], [225, 12, 1, "", "staticmethod"], [343, 10, 0, "-", "statistics"], [344, 11, 1, "", "str"], [345, 10, 0, "-", "string"], [346, 10, 0, "-", "stringprep"], [347, 10, 0, "-", "struct"], [348, 10, 0, "-", "subprocess"], [225, 12, 1, "", "sum"], [349, 10, 0, "-", "sunau"], [225, 11, 1, "", "super"], [351, 10, 0, "-", "symtable"], [352, 10, 0, "-", "sys"], [355, 10, 0, "-", "sysconfig"], [356, 10, 0, "-", "syslog"], [357, 10, 0, "-", "tabnanny"], [358, 10, 0, "-", "tarfile"], [359, 10, 0, "-", "telnetlib"], [360, 10, 0, "-", "tempfile"], [361, 10, 0, "-", "termios"], [362, 10, 0, "-", "test"], [364, 10, 0, "-", "textwrap"], [365, 10, 0, "-", "threading"], [366, 10, 0, "-", "time"], [367, 10, 0, "-", "timeit"], [369, 10, 0, "-", "tkinter"], [377, 10, 0, "-", "token"], [378, 10, 0, "-", "tokenize"], [379, 10, 0, "-", "tomllib"], [380, 10, 0, "-", "trace"], [381, 10, 0, "-", "traceback"], [382, 10, 0, "-", "tracemalloc"], [383, 10, 0, "-", "tty"], [344, 11, 1, "", "tuple"], [384, 10, 0, "-", "turtle"], [384, 10, 0, "-", "turtledemo"], [225, 11, 1, "", "type"], [385, 10, 0, "-", "types"], [386, 10, 0, "-", "typing"], [387, 10, 0, "-", "unicodedata"], [388, 10, 0, "-", "unittest"], [392, 10, 0, "-", "urllib"], [334, 10, 0, "-", "usercustomize"], [397, 10, 0, "-", "uu"], [398, 10, 0, "-", "uuid"], [225, 12, 1, "", "vars"], [399, 10, 0, "-", "venv"], [400, 10, 0, "-", "warnings"], [401, 10, 0, "-", "wave"], [402, 10, 0, "-", "weakref"], [403, 10, 0, "-", "webbrowser"], [405, 10, 0, "-", "winreg"], [406, 10, 0, "-", "winsound"], [407, 10, 0, "-", "wsgiref"], [408, 10, 0, "-", "xdrlib"], [409, 10, 0, "-", "xml"], [225, 12, 1, "", "zip"], [421, 10, 0, "-", "zipapp"], [422, 10, 0, "-", "zipfile"], [423, 10, 0, "-", "zipimport"], [424, 10, 0, "-", "zlib"], [425, 10, 0, "-", "zoneinfo"], [297, 13, 1, "pdbcommand-0", "!"], [456, 14, 1, "cmdoption-build", "--build"], [455, 14, 1, "cmdoption-check-hash-based-pycs", "--check-hash-based-pycs"], [456, 14, 1, "cmdoption-disable-ipv6", "--disable-ipv6"], [456, 14, 1, "cmdoption-disable-test-modules", "--disable-test-modules"], [456, 14, 1, "cmdoption-enable-big-digits", "--enable-big-digits"], [456, 14, 1, "cmdoption-enable-bolt", "--enable-bolt"], [456, 14, 1, "cmdoption-enable-framework", "--enable-framework"], [456, 14, 1, "cmdoption-enable-loadable-sqlite-extensions", "--enable-loadable-sqlite-extensions"], [456, 14, 1, "cmdoption-enable-optimizations", "--enable-optimizations"], [456, 14, 1, "cmdoption-enable-profiling", "--enable-profiling"], [456, 14, 1, "cmdoption-enable-pystats", "--enable-pystats"], [456, 14, 1, "cmdoption-enable-shared", "--enable-shared"], [456, 14, 1, "cmdoption-enable-universalsdk", "--enable-universalsdk"], [456, 14, 1, "cmdoption-enable-wasm-dynamic-linking", "--enable-wasm-dynamic-linking"], [456, 14, 1, "cmdoption-enable-wasm-pthreads", "--enable-wasm-pthreads"], [456, 14, 1, "cmdoption-exec-prefix", "--exec-prefix"], [455, 14, 1, "cmdoption-help", "--help"], [455, 14, 1, "cmdoption-help-all", "--help-all"], [455, 14, 1, "cmdoption-help-env", "--help-env"], [455, 14, 1, "cmdoption-help-xoptions", "--help-xoptions"], [456, 14, 1, "cmdoption-host", "--host"], [456, 14, 1, "cmdoption-prefix", "--prefix"], [455, 14, 1, "cmdoption-version", "--version"], [456, 14, 1, "cmdoption-with-address-sanitizer", "--with-address-sanitizer"], [456, 14, 1, "cmdoption-with-assertions", "--with-assertions"], [456, 14, 1, "cmdoption-with-build-python", "--with-build-python"], [456, 14, 1, "cmdoption-with-builtin-hashlib-hashes", "--with-builtin-hashlib-hashes"], [456, 14, 1, "cmdoption-with-computed-gotos", "--with-computed-gotos"], [456, 14, 1, "cmdoption-with-dbmliborder", "--with-dbmliborder"], [456, 14, 1, "cmdoption-with-dtrace", "--with-dtrace"], [456, 14, 1, "cmdoption-with-emscripten-target", "--with-emscripten-target"], [456, 14, 1, "cmdoption-with-ensurepip", "--with-ensurepip"], [456, 14, 1, "cmdoption-with-framework-name", "--with-framework-name"], [456, 14, 1, "cmdoption-with-hash-algorithm", "--with-hash-algorithm"], [456, 14, 1, "cmdoption-with-libc", "--with-libc"], [456, 14, 1, "cmdoption-with-libm", "--with-libm"], [456, 14, 1, "cmdoption-with-libs", "--with-libs"], [456, 14, 1, "cmdoption-with-lto", "--with-lto"], [456, 14, 1, "cmdoption-with-memory-sanitizer", "--with-memory-sanitizer"], [456, 14, 1, "cmdoption-with-openssl", "--with-openssl"], [456, 14, 1, "cmdoption-with-openssl-rpath", "--with-openssl-rpath"], [456, 14, 1, "cmdoption-with-pkg-config", "--with-pkg-config"], [456, 14, 1, "cmdoption-with-platlibdir", "--with-platlibdir"], [456, 14, 1, "cmdoption-with-pydebug", "--with-pydebug"], [456, 14, 1, "cmdoption-with-readline", "--with-readline"], [456, 14, 1, "cmdoption-with-ssl-default-suites", "--with-ssl-default-suites"], [456, 14, 1, "cmdoption-with-strict-overflow", "--with-strict-overflow"], [456, 14, 1, "cmdoption-with-suffix", "--with-suffix"], [456, 14, 1, "cmdoption-with-system-expat", "--with-system-expat"], [456, 14, 1, "cmdoption-with-system-libmpdec", "--with-system-libmpdec"], [456, 14, 1, "cmdoption-with-trace-refs", "--with-trace-refs"], [456, 14, 1, "cmdoption-with-tzpath", "--with-tzpath"], [456, 14, 1, "cmdoption-with-undefined-behavior-sanitizer", "--with-undefined-behavior-sanitizer"], [456, 14, 1, "cmdoption-with-universal-archs", "--with-universal-archs"], [456, 14, 1, "cmdoption-with-valgrind", "--with-valgrind"], [456, 14, 1, "cmdoption-with-wheel-pkg-dir", "--with-wheel-pkg-dir"], [456, 14, 1, "cmdoption-without-c-locale-coercion", "--without-c-locale-coercion"], [456, 14, 1, "cmdoption-without-decimal-contextvar", "--without-decimal-contextvar"], [456, 14, 1, "cmdoption-without-doc-strings", "--without-doc-strings"], [456, 14, 1, "cmdoption-without-freelists", "--without-freelists"], [456, 14, 1, "cmdoption-without-pymalloc", "--without-pymalloc"], [456, 14, 1, "cmdoption-without-readline", "--without-readline"], [456, 14, 1, "cmdoption-without-static-libpython", "--without-static-libpython"], [455, 14, 1, "cmdoption-0", "-?"], [455, 14, 1, "cmdoption-B", "-B"], [455, 14, 1, "cmdoption-E", "-E"], [455, 14, 1, "cmdoption-I", "-I"], [455, 14, 1, "cmdoption-J", "-J"], [455, 14, 1, "cmdoption-O", "-O"], [455, 14, 1, "cmdoption-OO", "-OO"], [455, 14, 1, "cmdoption-P", "-P"], [455, 14, 1, "cmdoption-R", "-R"], [455, 14, 1, "cmdoption-S", "-S"], [455, 14, 1, "cmdoption-V", "-V"], [455, 14, 1, "cmdoption-W", "-W"], [455, 14, 1, "cmdoption-X", "-X"], [455, 14, 1, "cmdoption-b", "-b"], [455, 14, 1, "cmdoption-c", "-c"], [455, 14, 1, "cmdoption-d", "-d"], [455, 14, 1, "cmdoption-h", "-h"], [455, 14, 1, "cmdoption-i", "-i"], [455, 14, 1, "cmdoption-m", "-m"], [455, 14, 1, "cmdoption-q", "-q"], [455, 14, 1, "cmdoption-s", "-s"], [455, 14, 1, "cmdoption-u", "-u"], [455, 14, 1, "cmdoption-v", "-v"], [455, 14, 1, "cmdoption-x", "-x"], [456, 15, 1, "-", "BASECFLAGS"], [456, 15, 1, "-", "BASECPPFLAGS"], [191, 16, 1, "-", "BEFORE_ASYNC_WITH"], [191, 16, 1, "-", "BEFORE_WITH"], [191, 16, 1, "-", "BINARY_OP"], [191, 16, 1, "-", "BINARY_SLICE"], [191, 16, 1, "-", "BINARY_SUBSCR"], [456, 15, 1, "-", "BLDSHARED"], [353, 17, 1, "-", "BRANCH"], [191, 16, 1, "-", "BUILD_CONST_KEY_MAP"], [191, 16, 1, "-", "BUILD_LIST"], [191, 16, 1, "-", "BUILD_MAP"], [191, 16, 1, "-", "BUILD_SET"], [191, 16, 1, "-", "BUILD_SLICE"], [191, 16, 1, "-", "BUILD_STRING"], [191, 16, 1, "-", "BUILD_TUPLE"], [191, 16, 1, "-", "CACHE"], [353, 17, 1, "-", "CALL"], [191, 16, 1, "-", "CALL"], [191, 16, 1, "-", "CALL_FUNCTION_EX"], [191, 16, 1, "-", "CALL_INTRINSIC_1"], [191, 16, 1, "-", "CALL_INTRINSIC_2"], [456, 15, 1, "-", "CC"], [456, 15, 1, "-", "CCSHARED"], [456, 15, 1, "-", "CFLAGS"], [456, 15, 1, "-", "CFLAGSFORSHARED"], [456, 15, 1, "-", "CFLAGS_ALIASING"], [456, 15, 1, "-", "CFLAGS_NODIST"], [191, 16, 1, "-", "CHECK_EG_MATCH"], [191, 16, 1, "-", "CHECK_EXC_MATCH"], [191, 16, 1, "-", "CLEANUP_THROW"], [191, 16, 1, "-", "COMPARE_OP"], [456, 15, 1, "-", "COMPILEALL_OPTS"], [456, 15, 1, "-", "CONFIGURE_CFLAGS"], [456, 15, 1, "-", "CONFIGURE_CFLAGS_NODIST"], [456, 15, 1, "-", "CONFIGURE_CPPFLAGS"], [456, 15, 1, "-", "CONFIGURE_LDFLAGS"], [456, 15, 1, "-", "CONFIGURE_LDFLAGS_NODIST"], [456, 14, 1, "cmdoption-arg-CONFIG_SITE", "CONFIG_SITE"], [191, 16, 1, "-", "CONTAINS_OP"], [191, 16, 1, "-", "COPY"], [191, 16, 1, "-", "COPY_FREE_VARS"], [456, 15, 1, "-", "CPPFLAGS"], [456, 15, 1, "-", "CXX"], [353, 17, 1, "-", "C_RAISE"], [353, 17, 1, "-", "C_RETURN"], [191, 16, 1, "-", "DELETE_ATTR"], [191, 16, 1, "-", "DELETE_DEREF"], [191, 16, 1, "-", "DELETE_FAST"], [191, 16, 1, "-", "DELETE_GLOBAL"], [191, 16, 1, "-", "DELETE_NAME"], [191, 16, 1, "-", "DELETE_SUBSCR"], [191, 16, 1, "-", "DICT_MERGE"], [191, 16, 1, "-", "DICT_UPDATE"], [191, 16, 1, "-", "END_ASYNC_FOR"], [191, 16, 1, "-", "END_FOR"], [191, 16, 1, "-", "END_SEND"], [353, 17, 1, "-", "EXCEPTION_HANDLED"], [191, 16, 1, "-", "EXTENDED_ARG"], [456, 15, 1, "-", "EXTRA_CFLAGS"], [191, 16, 1, "-", "FORMAT_VALUE"], [191, 16, 1, "-", "FOR_ITER"], [191, 16, 1, "-", "GET_AITER"], [191, 16, 1, "-", "GET_ANEXT"], [191, 16, 1, "-", "GET_AWAITABLE"], [191, 16, 1, "-", "GET_ITER"], [191, 16, 1, "-", "GET_LEN"], [191, 16, 1, "-", "GET_YIELD_FROM_ITER"], [191, 16, 1, "-", "HAVE_ARGUMENT"], [191, 16, 1, "-", "IMPORT_FROM"], [191, 16, 1, "-", "IMPORT_NAME"], [353, 17, 1, "-", "INSTRUCTION"], [191, 16, 1, "-", "IS_OP"], [353, 17, 1, "-", "JUMP"], [191, 16, 1, "-", "JUMP"], [191, 16, 1, "-", "JUMP_BACKWARD"], [191, 16, 1, "-", "JUMP_BACKWARD_NO_INTERRUPT"], [191, 16, 1, "-", "JUMP_FORWARD"], [191, 16, 1, "-", "JUMP_NO_INTERRUPT"], [191, 16, 1, "-", "KW_NAMES"], [456, 15, 1, "-", "LDFLAGS"], [456, 15, 1, "-", "LDFLAGS_NODIST"], [456, 15, 1, "-", "LDSHARED"], [456, 15, 1, "-", "LIBS"], [353, 17, 1, "-", "LINE"], [456, 15, 1, "-", "LINKCC"], [191, 16, 1, "-", "LIST_APPEND"], [191, 16, 1, "-", "LIST_EXTEND"], [191, 16, 1, "-", "LOAD_ASSERTION_ERROR"], [191, 16, 1, "-", "LOAD_ATTR"], [191, 16, 1, "-", "LOAD_BUILD_CLASS"], [191, 16, 1, "-", "LOAD_CLOSURE"], [191, 16, 1, "-", "LOAD_CONST"], [191, 16, 1, "-", "LOAD_DEREF"], [191, 16, 1, "-", "LOAD_FAST"], [191, 16, 1, "-", "LOAD_FAST_AND_CLEAR"], [191, 16, 1, "-", "LOAD_FAST_CHECK"], [191, 16, 1, "-", "LOAD_FROM_DICT_OR_DEREF"], [191, 16, 1, "-", "LOAD_FROM_DICT_OR_GLOBALS"], [191, 16, 1, "-", "LOAD_GLOBAL"], [191, 16, 1, "-", "LOAD_LOCALS"], [191, 16, 1, "-", "LOAD_METHOD"], [191, 16, 1, "-", "LOAD_NAME"], [191, 16, 1, "-", "LOAD_SUPER_ATTR"], [191, 16, 1, "-", "MAKE_CELL"], [191, 16, 1, "-", "MAKE_FUNCTION"], [191, 16, 1, "-", "MAP_ADD"], [191, 16, 1, "-", "MATCH_CLASS"], [191, 16, 1, "-", "MATCH_KEYS"], [191, 16, 1, "-", "MATCH_MAPPING"], [191, 16, 1, "-", "MATCH_SEQUENCE"], [191, 16, 1, "-", "NOP"], [353, 17, 1, "-", "NO_EVENTS"], [456, 15, 1, "-", "OPT"], [191, 16, 1, "-", "POP_BLOCK"], [191, 16, 1, "-", "POP_EXCEPT"], [191, 16, 1, "-", "POP_JUMP_IF_FALSE"], [191, 16, 1, "-", "POP_JUMP_IF_NONE"], [191, 16, 1, "-", "POP_JUMP_IF_NOT_NONE"], [191, 16, 1, "-", "POP_JUMP_IF_TRUE"], [191, 16, 1, "-", "POP_TOP"], [456, 15, 1, "-", "PROFILE_TASK"], [456, 15, 1, "-", "PURIFY"], [191, 16, 1, "-", "PUSH_EXC_INFO"], [191, 16, 1, "-", "PUSH_NULL"], [455, 15, 1, "-", "PYTHONASYNCIODEBUG"], [455, 15, 1, "-", "PYTHONBREAKPOINT"], [455, 15, 1, "-", "PYTHONCASEOK"], [455, 15, 1, "-", "PYTHONCOERCECLOCALE"], [455, 15, 1, "-", "PYTHONDEBUG"], [455, 15, 1, "-", "PYTHONDEVMODE"], [455, 15, 1, "-", "PYTHONDONTWRITEBYTECODE"], [455, 15, 1, "-", "PYTHONDUMPREFS"], [455, 15, 1, "envvar-PYTHONDUMPREFSFILE-FILENAME", "PYTHONDUMPREFSFILE=FILENAME"], [455, 15, 1, "-", "PYTHONEXECUTABLE"], [455, 15, 1, "-", "PYTHONFAULTHANDLER"], [455, 15, 1, "-", "PYTHONHASHSEED"], [455, 15, 1, "-", "PYTHONHOME"], [455, 15, 1, "-", "PYTHONINSPECT"], [455, 15, 1, "-", "PYTHONINTMAXSTRDIGITS"], [455, 15, 1, "-", "PYTHONIOENCODING"], [455, 15, 1, "-", "PYTHONLEGACYWINDOWSFSENCODING"], [455, 15, 1, "-", "PYTHONLEGACYWINDOWSSTDIO"], [455, 15, 1, "-", "PYTHONMALLOC"], [455, 15, 1, "-", "PYTHONMALLOCSTATS"], [455, 15, 1, "-", "PYTHONNODEBUGRANGES"], [455, 15, 1, "-", "PYTHONNOUSERSITE"], [455, 15, 1, "-", "PYTHONOPTIMIZE"], [455, 15, 1, "-", "PYTHONPATH"], [455, 15, 1, "-", "PYTHONPERFSUPPORT"], [455, 15, 1, "-", "PYTHONPLATLIBDIR"], [455, 15, 1, "-", "PYTHONPROFILEIMPORTTIME"], [455, 15, 1, "-", "PYTHONPYCACHEPREFIX"], [455, 15, 1, "-", "PYTHONSAFEPATH"], [455, 15, 1, "-", "PYTHONSTARTUP"], [455, 15, 1, "-", "PYTHONTRACEMALLOC"], [425, 15, 1, "-", "PYTHONTZPATH"], [455, 15, 1, "-", "PYTHONUNBUFFERED"], [455, 15, 1, "-", "PYTHONUSERBASE"], [455, 15, 1, "-", "PYTHONUTF8"], [455, 15, 1, "-", "PYTHONVERBOSE"], [455, 15, 1, "-", "PYTHONWARNDEFAULTENCODING"], [455, 15, 1, "-", "PYTHONWARNINGS"], [456, 15, 1, "-", "PY_BUILTIN_MODULE_CFLAGS"], [456, 15, 1, "-", "PY_CFLAGS"], [456, 15, 1, "-", "PY_CFLAGS_NODIST"], [456, 15, 1, "-", "PY_CORE_CFLAGS"], [456, 15, 1, "-", "PY_CORE_LDFLAGS"], [456, 15, 1, "-", "PY_CPPFLAGS"], [456, 15, 1, "-", "PY_LDFLAGS"], [456, 15, 1, "-", "PY_LDFLAGS_NODIST"], [353, 17, 1, "-", "PY_RESUME"], [353, 17, 1, "-", "PY_RETURN"], [353, 17, 1, "-", "PY_START"], [456, 15, 1, "-", "PY_STDMODULE_CFLAGS"], [353, 17, 1, "-", "PY_THROW"], [353, 17, 1, "-", "PY_UNWIND"], [353, 17, 1, "-", "PY_YIELD"], [353, 17, 1, "-", "RAISE"], [191, 16, 1, "-", "RAISE_VARARGS"], [353, 17, 1, "-", "RERAISE"], [191, 16, 1, "-", "RERAISE"], [191, 16, 1, "-", "RESUME"], [191, 16, 1, "-", "RETURN_CONST"], [191, 16, 1, "-", "RETURN_GENERATOR"], [191, 16, 1, "-", "RETURN_VALUE"], [191, 16, 1, "-", "SEND"], [191, 16, 1, "-", "SETUP_ANNOTATIONS"], [191, 16, 1, "-", "SETUP_CLEANUP"], [191, 16, 1, "-", "SETUP_FINALLY"], [191, 16, 1, "-", "SETUP_WITH"], [191, 16, 1, "-", "SET_ADD"], [191, 16, 1, "-", "SET_UPDATE"], [353, 17, 1, "-", "STOP_ITERATION"], [191, 16, 1, "-", "STORE_ATTR"], [191, 16, 1, "-", "STORE_DEREF"], [191, 16, 1, "-", "STORE_FAST"], [191, 16, 1, "-", "STORE_GLOBAL"], [191, 16, 1, "-", "STORE_NAME"], [191, 16, 1, "-", "STORE_SLICE"], [191, 16, 1, "-", "STORE_SUBSCR"], [191, 16, 1, "-", "SWAP"], [191, 16, 1, "-", "UNARY_INVERT"], [191, 16, 1, "-", "UNARY_NEGATIVE"], [191, 16, 1, "-", "UNARY_NOT"], [191, 16, 1, "-", "UNPACK_EX"], [191, 16, 1, "-", "UNPACK_SEQUENCE"], [191, 16, 1, "-", "WITH_EXCEPT_START"], [191, 16, 1, "-", "YIELD_VALUE"], [297, 13, 1, "-", "alias"], [112, 18, 1, "to3fixer-apply", "apply"], [297, 13, 1, "-", "args"], [112, 18, 1, "to3fixer-asserts", "asserts"], [112, 18, 1, "to3fixer-basestring", "basestring"], [297, 13, 1, "-", "break"], [112, 18, 1, "to3fixer-buffer", "buffer"], [297, 13, 1, "-", "clear"], [297, 13, 1, "-", "commands"], [297, 13, 1, "-", "condition"], [297, 13, 1, "-", "continue"], [297, 13, 1, "-", "debug"], [112, 18, 1, "to3fixer-dict", "dict"], [297, 13, 1, "-", "disable"], [297, 13, 1, "-", "display"], [297, 13, 1, "-", "down"], [297, 13, 1, "-", "enable"], [112, 18, 1, "to3fixer-except", "except"], [112, 18, 1, "to3fixer-exec", "exec"], [112, 18, 1, "to3fixer-execfile", "execfile"], [112, 18, 1, "to3fixer-exitfunc", "exitfunc"], [112, 18, 1, "to3fixer-filter", "filter"], [112, 18, 1, "to3fixer-funcattrs", "funcattrs"], [112, 18, 1, "to3fixer-future", "future"], [112, 18, 1, "to3fixer-getcwdu", "getcwdu"], [112, 18, 1, "to3fixer-has_key", "has_key"], [297, 13, 1, "-", "help"], [112, 18, 1, "to3fixer-idioms", "idioms"], [297, 13, 1, "-", "ignore"], [112, 18, 1, "to3fixer-import", "import"], [112, 18, 1, "to3fixer-imports", "imports"], [112, 18, 1, "to3fixer-imports2", "imports2"], [112, 18, 1, "to3fixer-input", "input"], [297, 13, 1, "-", "interact"], [112, 18, 1, "to3fixer-intern", "intern"], [112, 18, 1, "to3fixer-isinstance", "isinstance"], [112, 18, 1, "to3fixer-itertools", "itertools"], [112, 18, 1, "to3fixer-itertools_imports", "itertools_imports"], [297, 13, 1, "-", "jump"], [297, 13, 1, "-", "list"], [297, 13, 1, "-", "ll"], [112, 18, 1, "to3fixer-long", "long"], [112, 18, 1, "to3fixer-map", "map"], [112, 18, 1, "to3fixer-metaclass", "metaclass"], [112, 18, 1, "to3fixer-methodattrs", "methodattrs"], [112, 18, 1, "to3fixer-ne", "ne"], [112, 18, 1, "to3fixer-next", "next"], [297, 13, 1, "-", "next"], [112, 18, 1, "to3fixer-nonzero", "nonzero"], [112, 18, 1, "to3fixer-numliterals", "numliterals"], [112, 18, 1, "to3fixer-operator", "operator"], [297, 13, 1, "-", "p"], [112, 18, 1, "to3fixer-paren", "paren"], [297, 13, 1, "-", "pp"], [112, 18, 1, "to3fixer-print", "print"], [297, 13, 1, "-", "quit"], [112, 18, 1, "to3fixer-raise", "raise"], [112, 18, 1, "to3fixer-raw_input", "raw_input"], [112, 18, 1, "to3fixer-reduce", "reduce"], [112, 18, 1, "to3fixer-reload", "reload"], [112, 18, 1, "to3fixer-renames", "renames"], [112, 18, 1, "to3fixer-repr", "repr"], [297, 13, 1, "-", "restart"], [297, 13, 1, "-", "return"], [297, 13, 1, "-", "retval"], [297, 13, 1, "-", "run"], [112, 18, 1, "to3fixer-set_literal", "set_literal"], [297, 13, 1, "-", "source"], [112, 18, 1, "to3fixer-standarderror", "standarderror"], [297, 13, 1, "-", "step"], [112, 18, 1, "to3fixer-sys_exc", "sys_exc"], [297, 13, 1, "-", "tbreak"], [112, 18, 1, "to3fixer-throw", "throw"], [112, 18, 1, "to3fixer-tuple_params", "tuple_params"], [112, 18, 1, "to3fixer-types", "types"], [297, 13, 1, "-", "unalias"], [297, 13, 1, "-", "undisplay"], [112, 18, 1, "to3fixer-unicode", "unicode"], [297, 13, 1, "-", "until"], [297, 13, 1, "-", "up"], [112, 18, 1, "to3fixer-urllib", "urllib"], [297, 13, 1, "-", "whatis"], [297, 13, 1, "-", "where"], [112, 18, 1, "to3fixer-ws_comma", "ws_comma"], [112, 18, 1, "to3fixer-xrange", "xrange"], [112, 18, 1, "to3fixer-xreadlines", "xreadlines"], [112, 18, 1, "to3fixer-zip", "zip"]], "PyAIter_Check": [[36, 3, 1, "c.PyAIter_Check", "o"]], "PyAnySet_Check": [[55, 3, 1, "c.PyAnySet_Check", "p"]], "PyAnySet_CheckExact": [[55, 3, 1, "c.PyAnySet_CheckExact", "p"]], "PyArg_Parse": [[5, 3, 1, "c.PyArg_Parse", "args"], [5, 3, 1, "c.PyArg_Parse", "format"]], "PyArg_ParseTuple": [[5, 3, 1, "c.PyArg_ParseTuple", "args"], [5, 3, 1, "c.PyArg_ParseTuple", "format"]], "PyArg_ParseTupleAndKeywords": [[5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "args"], [5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "format"], [5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "keywords"], [5, 3, 1, "c.PyArg_ParseTupleAndKeywords", "kw"]], "PyArg_UnpackTuple": [[5, 3, 1, "c.PyArg_UnpackTuple", "args"], [5, 3, 1, "c.PyArg_UnpackTuple", "max"], [5, 3, 1, "c.PyArg_UnpackTuple", "min"], [5, 3, 1, "c.PyArg_UnpackTuple", "name"]], "PyArg_VaParse": [[5, 3, 1, "c.PyArg_VaParse", "args"], [5, 3, 1, "c.PyArg_VaParse", "format"], [5, 3, 1, "c.PyArg_VaParse", "vargs"]], "PyArg_VaParseTupleAndKeywords": [[5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "args"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "format"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "keywords"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "kw"], [5, 3, 1, "c.PyArg_VaParseTupleAndKeywords", "vargs"]], "PyAsyncMethods": [[63, 0, 1, "c.PyAsyncMethods.am_aiter", "am_aiter"], [63, 0, 1, "c.PyAsyncMethods.am_anext", "am_anext"], [63, 0, 1, "c.PyAsyncMethods.am_await", "am_await"], [63, 0, 1, "c.PyAsyncMethods.am_send", "am_send"]], "PyBool_Check": [[6, 3, 1, "c.PyBool_Check", "o"]], "PyBool_FromLong": [[6, 3, 1, "c.PyBool_FromLong", "v"]], "PyBufferProcs": [[63, 0, 1, "c.PyBufferProcs.bf_getbuffer", "bf_getbuffer"], [63, 0, 1, "c.PyBufferProcs.bf_releasebuffer", "bf_releasebuffer"]], "PyBuffer_FillContiguousStrides": [[7, 3, 1, "c.PyBuffer_FillContiguousStrides", "itemsize"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "ndims"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "order"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "shape"], [7, 3, 1, "c.PyBuffer_FillContiguousStrides", "strides"]], "PyBuffer_FillInfo": [[7, 3, 1, "c.PyBuffer_FillInfo", "buf"], [7, 3, 1, "c.PyBuffer_FillInfo", "exporter"], [7, 3, 1, "c.PyBuffer_FillInfo", "flags"], [7, 3, 1, "c.PyBuffer_FillInfo", "len"], [7, 3, 1, "c.PyBuffer_FillInfo", "readonly"], [7, 3, 1, "c.PyBuffer_FillInfo", "view"]], "PyBuffer_FromContiguous": [[7, 3, 1, "c.PyBuffer_FromContiguous", "buf"], [7, 3, 1, "c.PyBuffer_FromContiguous", "fort"], [7, 3, 1, "c.PyBuffer_FromContiguous", "len"], [7, 3, 1, "c.PyBuffer_FromContiguous", "view"]], "PyBuffer_GetPointer": [[7, 3, 1, "c.PyBuffer_GetPointer", "indices"], [7, 3, 1, "c.PyBuffer_GetPointer", "view"]], "PyBuffer_IsContiguous": [[7, 3, 1, "c.PyBuffer_IsContiguous", "order"], [7, 3, 1, "c.PyBuffer_IsContiguous", "view"]], "PyBuffer_Release": [[7, 3, 1, "c.PyBuffer_Release", "view"]], "PyBuffer_SizeFromFormat": [[7, 3, 1, "c.PyBuffer_SizeFromFormat", "format"]], "PyBuffer_ToContiguous": [[7, 3, 1, "c.PyBuffer_ToContiguous", "buf"], [7, 3, 1, "c.PyBuffer_ToContiguous", "len"], [7, 3, 1, "c.PyBuffer_ToContiguous", "order"], [7, 3, 1, "c.PyBuffer_ToContiguous", "src"]], "PyByteArray_AS_STRING": [[8, 3, 1, "c.PyByteArray_AS_STRING", "bytearray"]], "PyByteArray_AsString": [[8, 3, 1, "c.PyByteArray_AsString", "bytearray"]], "PyByteArray_Check": [[8, 3, 1, "c.PyByteArray_Check", "o"]], "PyByteArray_CheckExact": [[8, 3, 1, "c.PyByteArray_CheckExact", "o"]], "PyByteArray_Concat": [[8, 3, 1, "c.PyByteArray_Concat", "a"], [8, 3, 1, "c.PyByteArray_Concat", "b"]], "PyByteArray_FromObject": [[8, 3, 1, "c.PyByteArray_FromObject", "o"]], "PyByteArray_FromStringAndSize": [[8, 3, 1, "c.PyByteArray_FromStringAndSize", "len"], [8, 3, 1, "c.PyByteArray_FromStringAndSize", "string"]], "PyByteArray_GET_SIZE": [[8, 3, 1, "c.PyByteArray_GET_SIZE", "bytearray"]], "PyByteArray_Resize": [[8, 3, 1, "c.PyByteArray_Resize", "bytearray"], [8, 3, 1, "c.PyByteArray_Resize", "len"]], "PyByteArray_Size": [[8, 3, 1, "c.PyByteArray_Size", "bytearray"]], "PyBytes_AS_STRING": [[9, 3, 1, "c.PyBytes_AS_STRING", "string"]], "PyBytes_AsString": [[9, 3, 1, "c.PyBytes_AsString", "o"]], "PyBytes_AsStringAndSize": [[9, 3, 1, "c.PyBytes_AsStringAndSize", "buffer"], [9, 3, 1, "c.PyBytes_AsStringAndSize", "length"], [9, 3, 1, "c.PyBytes_AsStringAndSize", "obj"]], "PyBytes_Check": [[9, 3, 1, "c.PyBytes_Check", "o"]], "PyBytes_CheckExact": [[9, 3, 1, "c.PyBytes_CheckExact", "o"]], "PyBytes_Concat": [[9, 3, 1, "c.PyBytes_Concat", "bytes"], [9, 3, 1, "c.PyBytes_Concat", "newpart"]], "PyBytes_ConcatAndDel": [[9, 3, 1, "c.PyBytes_ConcatAndDel", "bytes"], [9, 3, 1, "c.PyBytes_ConcatAndDel", "newpart"]], "PyBytes_FromFormat": [[9, 3, 1, "c.PyBytes_FromFormat", "format"]], "PyBytes_FromFormatV": [[9, 3, 1, "c.PyBytes_FromFormatV", "format"], [9, 3, 1, "c.PyBytes_FromFormatV", "vargs"]], "PyBytes_FromObject": [[9, 3, 1, "c.PyBytes_FromObject", "o"]], "PyBytes_FromString": [[9, 3, 1, "c.PyBytes_FromString", "v"]], "PyBytes_FromStringAndSize": [[9, 3, 1, "c.PyBytes_FromStringAndSize", "len"], [9, 3, 1, "c.PyBytes_FromStringAndSize", "v"]], "PyBytes_GET_SIZE": [[9, 3, 1, "c.PyBytes_GET_SIZE", "o"]], "PyBytes_Size": [[9, 3, 1, "c.PyBytes_Size", "o"]], "PyCFunction_New": [[58, 3, 1, "c.PyCFunction_New", "ml"], [58, 3, 1, "c.PyCFunction_New", "self"]], "PyCFunction_NewEx": [[58, 3, 1, "c.PyCFunction_NewEx", "ml"], [58, 3, 1, "c.PyCFunction_NewEx", "module"], [58, 3, 1, "c.PyCFunction_NewEx", "self"]], "PyCMethod_New": [[58, 3, 1, "c.PyCMethod_New", "cls"], [58, 3, 1, "c.PyCMethod_New", "ml"], [58, 3, 1, "c.PyCMethod_New", "module"], [58, 3, 1, "c.PyCMethod_New", "self"]], "PyCallIter_Check": [[37, 3, 1, "c.PyCallIter_Check", "op"]], "PyCallIter_New": [[37, 3, 1, "c.PyCallIter_New", "callable"], [37, 3, 1, "c.PyCallIter_New", "sentinel"]], "PyCallable_Check": [[10, 3, 1, "c.PyCallable_Check", "o"]], "PyCapsule_CheckExact": [[11, 3, 1, "c.PyCapsule_CheckExact", "p"]], "PyCapsule_GetContext": [[11, 3, 1, "c.PyCapsule_GetContext", "capsule"]], "PyCapsule_GetDestructor": [[11, 3, 1, "c.PyCapsule_GetDestructor", "capsule"]], "PyCapsule_GetName": [[11, 3, 1, "c.PyCapsule_GetName", "capsule"]], "PyCapsule_GetPointer": [[11, 3, 1, "c.PyCapsule_GetPointer", "capsule"], [11, 3, 1, "c.PyCapsule_GetPointer", "name"]], "PyCapsule_Import": [[11, 3, 1, "c.PyCapsule_Import", "name"], [11, 3, 1, "c.PyCapsule_Import", "no_block"]], "PyCapsule_IsValid": [[11, 3, 1, "c.PyCapsule_IsValid", "capsule"], [11, 3, 1, "c.PyCapsule_IsValid", "name"]], "PyCapsule_New": [[11, 3, 1, "c.PyCapsule_New", "destructor"], [11, 3, 1, "c.PyCapsule_New", "name"], [11, 3, 1, "c.PyCapsule_New", "pointer"]], "PyCapsule_SetContext": [[11, 3, 1, "c.PyCapsule_SetContext", "capsule"], [11, 3, 1, "c.PyCapsule_SetContext", "context"]], "PyCapsule_SetDestructor": [[11, 3, 1, "c.PyCapsule_SetDestructor", "capsule"], [11, 3, 1, "c.PyCapsule_SetDestructor", "destructor"]], "PyCapsule_SetName": [[11, 3, 1, "c.PyCapsule_SetName", "capsule"], [11, 3, 1, "c.PyCapsule_SetName", "name"]], "PyCapsule_SetPointer": [[11, 3, 1, "c.PyCapsule_SetPointer", "capsule"], [11, 3, 1, "c.PyCapsule_SetPointer", "pointer"]], "PyCell_Check": [[12, 3, 1, "c.PyCell_Check", "ob"]], "PyCell_GET": [[12, 3, 1, "c.PyCell_GET", "cell"]], "PyCell_Get": [[12, 3, 1, "c.PyCell_Get", "cell"]], "PyCell_New": [[12, 3, 1, "c.PyCell_New", "ob"]], "PyCell_SET": [[12, 3, 1, "c.PyCell_SET", "cell"], [12, 3, 1, "c.PyCell_SET", "value"]], "PyCell_Set": [[12, 3, 1, "c.PyCell_Set", "cell"], [12, 3, 1, "c.PyCell_Set", "value"]], "PyCode_AddWatcher": [[13, 3, 1, "c.PyCode_AddWatcher", "callback"]], "PyCode_Addr2Line": [[13, 3, 1, "c.PyCode_Addr2Line", "byte_offset"], [13, 3, 1, "c.PyCode_Addr2Line", "co"]], "PyCode_Addr2Location": [[13, 3, 1, "c.PyCode_Addr2Location", "byte_offset"], [13, 3, 1, "c.PyCode_Addr2Location", "co"], [13, 3, 1, "c.PyCode_Addr2Location", "end_column"], [13, 3, 1, "c.PyCode_Addr2Location", "end_line"], [13, 3, 1, "c.PyCode_Addr2Location", "start_column"], [13, 3, 1, "c.PyCode_Addr2Location", "start_line"]], "PyCode_Check": [[13, 3, 1, "c.PyCode_Check", "co"]], "PyCode_ClearWatcher": [[13, 3, 1, "c.PyCode_ClearWatcher", "watcher_id"]], "PyCode_GetCellvars": [[13, 3, 1, "c.PyCode_GetCellvars", "co"]], "PyCode_GetCode": [[13, 3, 1, "c.PyCode_GetCode", "co"]], "PyCode_GetFirstFree": [[13, 3, 1, "c.PyCode_GetFirstFree", "co"]], "PyCode_GetFreevars": [[13, 3, 1, "c.PyCode_GetFreevars", "co"]], "PyCode_GetNumFree": [[13, 3, 1, "c.PyCode_GetNumFree", "co"]], "PyCode_GetVarnames": [[13, 3, 1, "c.PyCode_GetVarnames", "co"]], "PyCode_NewEmpty": [[13, 3, 1, "c.PyCode_NewEmpty", "filename"], [13, 3, 1, "c.PyCode_NewEmpty", "firstlineno"], [13, 3, 1, "c.PyCode_NewEmpty", "funcname"]], "PyCodec_BackslashReplaceErrors": [[14, 3, 1, "c.PyCodec_BackslashReplaceErrors", "exc"]], "PyCodec_Decode": [[14, 3, 1, "c.PyCodec_Decode", "encoding"], [14, 3, 1, "c.PyCodec_Decode", "errors"], [14, 3, 1, "c.PyCodec_Decode", "object"]], "PyCodec_Decoder": [[14, 3, 1, "c.PyCodec_Decoder", "encoding"]], "PyCodec_Encode": [[14, 3, 1, "c.PyCodec_Encode", "encoding"], [14, 3, 1, "c.PyCodec_Encode", "errors"], [14, 3, 1, "c.PyCodec_Encode", "object"]], "PyCodec_Encoder": [[14, 3, 1, "c.PyCodec_Encoder", "encoding"]], "PyCodec_IgnoreErrors": [[14, 3, 1, "c.PyCodec_IgnoreErrors", "exc"]], "PyCodec_IncrementalDecoder": [[14, 3, 1, "c.PyCodec_IncrementalDecoder", "encoding"], [14, 3, 1, "c.PyCodec_IncrementalDecoder", "errors"]], "PyCodec_IncrementalEncoder": [[14, 3, 1, "c.PyCodec_IncrementalEncoder", "encoding"], [14, 3, 1, "c.PyCodec_IncrementalEncoder", "errors"]], "PyCodec_KnownEncoding": [[14, 3, 1, "c.PyCodec_KnownEncoding", "encoding"]], "PyCodec_LookupError": [[14, 3, 1, "c.PyCodec_LookupError", "name"]], "PyCodec_NameReplaceErrors": [[14, 3, 1, "c.PyCodec_NameReplaceErrors", "exc"]], "PyCodec_Register": [[14, 3, 1, "c.PyCodec_Register", "search_function"]], "PyCodec_RegisterError": [[14, 3, 1, "c.PyCodec_RegisterError", "error"], [14, 3, 1, "c.PyCodec_RegisterError", "name"]], "PyCodec_ReplaceErrors": [[14, 3, 1, "c.PyCodec_ReplaceErrors", "exc"]], "PyCodec_StreamReader": [[14, 3, 1, "c.PyCodec_StreamReader", "encoding"], [14, 3, 1, "c.PyCodec_StreamReader", "errors"], [14, 3, 1, "c.PyCodec_StreamReader", "stream"]], "PyCodec_StreamWriter": [[14, 3, 1, "c.PyCodec_StreamWriter", "encoding"], [14, 3, 1, "c.PyCodec_StreamWriter", "errors"], [14, 3, 1, "c.PyCodec_StreamWriter", "stream"]], "PyCodec_StrictErrors": [[14, 3, 1, "c.PyCodec_StrictErrors", "exc"]], "PyCodec_Unregister": [[14, 3, 1, "c.PyCodec_Unregister", "search_function"]], "PyCodec_XMLCharRefReplaceErrors": [[14, 3, 1, "c.PyCodec_XMLCharRefReplaceErrors", "exc"]], "PyCompilerFlags": [[66, 0, 1, "c.PyCompilerFlags.cf_feature_version", "cf_feature_version"], [66, 0, 1, "c.PyCompilerFlags.cf_flags", "cf_flags"]], "PyComplex_AsCComplex": [[15, 3, 1, "c.PyComplex_AsCComplex", "op"]], "PyComplex_Check": [[15, 3, 1, "c.PyComplex_Check", "p"]], "PyComplex_CheckExact": [[15, 3, 1, "c.PyComplex_CheckExact", "p"]], "PyComplex_FromCComplex": [[15, 3, 1, "c.PyComplex_FromCComplex", "v"]], "PyComplex_FromDoubles": [[15, 3, 1, "c.PyComplex_FromDoubles", "imag"], [15, 3, 1, "c.PyComplex_FromDoubles", "real"]], "PyComplex_ImagAsDouble": [[15, 3, 1, "c.PyComplex_ImagAsDouble", "op"]], "PyComplex_RealAsDouble": [[15, 3, 1, "c.PyComplex_RealAsDouble", "op"]], "PyConfig": [[34, 0, 1, "c.PyConfig.argv", "argv"], [34, 0, 1, "c.PyConfig.base_exec_prefix", "base_exec_prefix"], [34, 0, 1, "c.PyConfig.base_executable", "base_executable"], [34, 0, 1, "c.PyConfig.base_prefix", "base_prefix"], [34, 0, 1, "c.PyConfig.buffered_stdio", "buffered_stdio"], [34, 0, 1, "c.PyConfig.bytes_warning", "bytes_warning"], [34, 0, 1, "c.PyConfig.check_hash_pycs_mode", "check_hash_pycs_mode"], [34, 0, 1, "c.PyConfig.code_debug_ranges", "code_debug_ranges"], [34, 0, 1, "c.PyConfig.configure_c_stdio", "configure_c_stdio"], [34, 0, 1, "c.PyConfig.dev_mode", "dev_mode"], [34, 0, 1, "c.PyConfig.dump_refs", "dump_refs"], [34, 0, 1, "c.PyConfig.exec_prefix", "exec_prefix"], [34, 0, 1, "c.PyConfig.executable", "executable"], [34, 0, 1, "c.PyConfig.faulthandler", "faulthandler"], [34, 0, 1, "c.PyConfig.filesystem_encoding", "filesystem_encoding"], [34, 0, 1, "c.PyConfig.filesystem_errors", "filesystem_errors"], [34, 0, 1, "c.PyConfig.hash_seed", "hash_seed"], [34, 0, 1, "c.PyConfig.home", "home"], [34, 0, 1, "c.PyConfig.import_time", "import_time"], [34, 0, 1, "c.PyConfig.inspect", "inspect"], [34, 0, 1, "c.PyConfig.install_signal_handlers", "install_signal_handlers"], [34, 0, 1, "c.PyConfig.int_max_str_digits", "int_max_str_digits"], [34, 0, 1, "c.PyConfig.interactive", "interactive"], [34, 0, 1, "c.PyConfig.isolated", "isolated"], [34, 0, 1, "c.PyConfig.legacy_windows_stdio", "legacy_windows_stdio"], [34, 0, 1, "c.PyConfig.malloc_stats", "malloc_stats"], [34, 0, 1, "c.PyConfig.module_search_paths", "module_search_paths"], [34, 0, 1, "c.PyConfig.module_search_paths_set", "module_search_paths_set"], [34, 0, 1, "c.PyConfig.optimization_level", "optimization_level"], [34, 0, 1, "c.PyConfig.orig_argv", "orig_argv"], [34, 0, 1, "c.PyConfig.parse_argv", "parse_argv"], [34, 0, 1, "c.PyConfig.parser_debug", "parser_debug"], [34, 0, 1, "c.PyConfig.pathconfig_warnings", "pathconfig_warnings"], [34, 0, 1, "c.PyConfig.perf_profiling", "perf_profiling"], [34, 0, 1, "c.PyConfig.platlibdir", "platlibdir"], [34, 0, 1, "c.PyConfig.prefix", "prefix"], [34, 0, 1, "c.PyConfig.program_name", "program_name"], [34, 0, 1, "c.PyConfig.pycache_prefix", "pycache_prefix"], [34, 0, 1, "c.PyConfig.pythonpath_env", "pythonpath_env"], [34, 0, 1, "c.PyConfig.quiet", "quiet"], [34, 0, 1, "c.PyConfig.run_command", "run_command"], [34, 0, 1, "c.PyConfig.run_filename", "run_filename"], [34, 0, 1, "c.PyConfig.run_module", "run_module"], [34, 0, 1, "c.PyConfig.safe_path", "safe_path"], [34, 0, 1, "c.PyConfig.show_ref_count", "show_ref_count"], [34, 0, 1, "c.PyConfig.site_import", "site_import"], [34, 0, 1, "c.PyConfig.skip_source_first_line", "skip_source_first_line"], [34, 0, 1, "c.PyConfig.stdio_encoding", "stdio_encoding"], [34, 0, 1, "c.PyConfig.stdio_errors", "stdio_errors"], [34, 0, 1, "c.PyConfig.tracemalloc", "tracemalloc"], [34, 0, 1, "c.PyConfig.use_environment", "use_environment"], [34, 0, 1, "c.PyConfig.use_hash_seed", "use_hash_seed"], [34, 0, 1, "c.PyConfig.user_site_directory", "user_site_directory"], [34, 0, 1, "c.PyConfig.verbose", "verbose"], [34, 0, 1, "c.PyConfig.warn_default_encoding", "warn_default_encoding"], [34, 0, 1, "c.PyConfig.warnoptions", "warnoptions"], [34, 0, 1, "c.PyConfig.write_bytecode", "write_bytecode"], [34, 0, 1, "c.PyConfig.xoptions", "xoptions"]], "PyConfig_Clear": [[34, 3, 1, "c.PyConfig_Clear", "config"]], "PyConfig_InitIsolatedConfig": [[34, 3, 1, "c.PyConfig_InitIsolatedConfig", "config"]], "PyConfig_InitPythonConfig": [[34, 3, 1, "c.PyConfig_InitPythonConfig", "config"]], "PyConfig_Read": [[34, 3, 1, "c.PyConfig_Read", "config"]], "PyConfig_SetArgv": [[34, 3, 1, "c.PyConfig_SetArgv", "argc"], [34, 3, 1, "c.PyConfig_SetArgv", "argv"], [34, 3, 1, "c.PyConfig_SetArgv", "config"]], "PyConfig_SetBytesArgv": [[34, 3, 1, "c.PyConfig_SetBytesArgv", "argc"], [34, 3, 1, "c.PyConfig_SetBytesArgv", "argv"], [34, 3, 1, "c.PyConfig_SetBytesArgv", "config"]], "PyConfig_SetBytesString": [[34, 3, 1, "c.PyConfig_SetBytesString", "config"], [34, 3, 1, "c.PyConfig_SetBytesString", "config_str"], [34, 3, 1, "c.PyConfig_SetBytesString", "str"]], "PyConfig_SetString": [[34, 3, 1, "c.PyConfig_SetString", "config"], [34, 3, 1, "c.PyConfig_SetString", "config_str"], [34, 3, 1, "c.PyConfig_SetString", "str"]], "PyConfig_SetWideStringList": [[34, 3, 1, "c.PyConfig_SetWideStringList", "config"], [34, 3, 1, "c.PyConfig_SetWideStringList", "items"], [34, 3, 1, "c.PyConfig_SetWideStringList", "length"], [34, 3, 1, "c.PyConfig_SetWideStringList", "list"]], "PyContextToken_CheckExact": [[17, 3, 1, "c.PyContextToken_CheckExact", "o"]], "PyContextVar_CheckExact": [[17, 3, 1, "c.PyContextVar_CheckExact", "o"]], "PyContextVar_Get": [[17, 3, 1, "c.PyContextVar_Get", "default_value"], [17, 3, 1, "c.PyContextVar_Get", "value"], [17, 3, 1, "c.PyContextVar_Get", "var"]], "PyContextVar_New": [[17, 3, 1, "c.PyContextVar_New", "def"], [17, 3, 1, "c.PyContextVar_New", "name"]], "PyContextVar_Reset": [[17, 3, 1, "c.PyContextVar_Reset", "token"], [17, 3, 1, "c.PyContextVar_Reset", "var"]], "PyContextVar_Set": [[17, 3, 1, "c.PyContextVar_Set", "value"], [17, 3, 1, "c.PyContextVar_Set", "var"]], "PyContext_CheckExact": [[17, 3, 1, "c.PyContext_CheckExact", "o"]], "PyContext_Copy": [[17, 3, 1, "c.PyContext_Copy", "ctx"]], "PyContext_Enter": [[17, 3, 1, "c.PyContext_Enter", "ctx"]], "PyContext_Exit": [[17, 3, 1, "c.PyContext_Exit", "ctx"]], "PyCoro_CheckExact": [[19, 3, 1, "c.PyCoro_CheckExact", "ob"]], "PyCoro_New": [[19, 3, 1, "c.PyCoro_New", "frame"], [19, 3, 1, "c.PyCoro_New", "name"], [19, 3, 1, "c.PyCoro_New", "qualname"]], "PyDateTime_Check": [[20, 3, 1, "c.PyDateTime_Check", "ob"]], "PyDateTime_CheckExact": [[20, 3, 1, "c.PyDateTime_CheckExact", "ob"]], "PyDateTime_DATE_GET_FOLD": [[20, 3, 1, "c.PyDateTime_DATE_GET_FOLD", "o"]], "PyDateTime_DATE_GET_HOUR": [[20, 3, 1, "c.PyDateTime_DATE_GET_HOUR", "o"]], "PyDateTime_DATE_GET_MICROSECOND": [[20, 3, 1, "c.PyDateTime_DATE_GET_MICROSECOND", "o"]], "PyDateTime_DATE_GET_MINUTE": [[20, 3, 1, "c.PyDateTime_DATE_GET_MINUTE", "o"]], "PyDateTime_DATE_GET_SECOND": [[20, 3, 1, "c.PyDateTime_DATE_GET_SECOND", "o"]], "PyDateTime_DATE_GET_TZINFO": [[20, 3, 1, "c.PyDateTime_DATE_GET_TZINFO", "o"]], "PyDateTime_DELTA_GET_DAYS": [[20, 3, 1, "c.PyDateTime_DELTA_GET_DAYS", "o"]], "PyDateTime_DELTA_GET_MICROSECONDS": [[20, 3, 1, "c.PyDateTime_DELTA_GET_MICROSECONDS", "o"]], "PyDateTime_DELTA_GET_SECONDS": [[20, 3, 1, "c.PyDateTime_DELTA_GET_SECONDS", "o"]], "PyDateTime_FromDateAndTime": [[20, 3, 1, "c.PyDateTime_FromDateAndTime", "day"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "hour"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "minute"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "month"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "second"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "usecond"], [20, 3, 1, "c.PyDateTime_FromDateAndTime", "year"]], "PyDateTime_FromDateAndTimeAndFold": [[20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "day"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "fold"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "hour"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "minute"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "month"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "second"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "usecond"], [20, 3, 1, "c.PyDateTime_FromDateAndTimeAndFold", "year"]], "PyDateTime_FromTimestamp": [[20, 3, 1, "c.PyDateTime_FromTimestamp", "args"]], "PyDateTime_GET_DAY": [[20, 3, 1, "c.PyDateTime_GET_DAY", "o"]], "PyDateTime_GET_MONTH": [[20, 3, 1, "c.PyDateTime_GET_MONTH", "o"]], "PyDateTime_GET_YEAR": [[20, 3, 1, "c.PyDateTime_GET_YEAR", "o"]], "PyDateTime_TIME_GET_FOLD": [[20, 3, 1, "c.PyDateTime_TIME_GET_FOLD", "o"]], "PyDateTime_TIME_GET_HOUR": [[20, 3, 1, "c.PyDateTime_TIME_GET_HOUR", "o"]], "PyDateTime_TIME_GET_MICROSECOND": [[20, 3, 1, "c.PyDateTime_TIME_GET_MICROSECOND", "o"]], "PyDateTime_TIME_GET_MINUTE": [[20, 3, 1, "c.PyDateTime_TIME_GET_MINUTE", "o"]], "PyDateTime_TIME_GET_SECOND": [[20, 3, 1, "c.PyDateTime_TIME_GET_SECOND", "o"]], "PyDateTime_TIME_GET_TZINFO": [[20, 3, 1, "c.PyDateTime_TIME_GET_TZINFO", "o"]], "PyDate_Check": [[20, 3, 1, "c.PyDate_Check", "ob"]], "PyDate_CheckExact": [[20, 3, 1, "c.PyDate_CheckExact", "ob"]], "PyDate_FromDate": [[20, 3, 1, "c.PyDate_FromDate", "day"], [20, 3, 1, "c.PyDate_FromDate", "month"], [20, 3, 1, "c.PyDate_FromDate", "year"]], "PyDate_FromTimestamp": [[20, 3, 1, "c.PyDate_FromTimestamp", "args"]], "PyDelta_Check": [[20, 3, 1, "c.PyDelta_Check", "ob"]], "PyDelta_CheckExact": [[20, 3, 1, "c.PyDelta_CheckExact", "ob"]], "PyDelta_FromDSU": [[20, 3, 1, "c.PyDelta_FromDSU", "days"], [20, 3, 1, "c.PyDelta_FromDSU", "seconds"], [20, 3, 1, "c.PyDelta_FromDSU", "useconds"]], "PyDescr_IsData": [[21, 3, 1, "c.PyDescr_IsData", "descr"]], "PyDescr_NewClassMethod": [[21, 3, 1, "c.PyDescr_NewClassMethod", "method"], [21, 3, 1, "c.PyDescr_NewClassMethod", "type"]], "PyDescr_NewGetSet": [[21, 3, 1, "c.PyDescr_NewGetSet", "getset"], [21, 3, 1, "c.PyDescr_NewGetSet", "type"]], "PyDescr_NewMember": [[21, 3, 1, "c.PyDescr_NewMember", "meth"], [21, 3, 1, "c.PyDescr_NewMember", "type"]], "PyDescr_NewMethod": [[21, 3, 1, "c.PyDescr_NewMethod", "meth"], [21, 3, 1, "c.PyDescr_NewMethod", "type"]], "PyDescr_NewWrapper": [[21, 3, 1, "c.PyDescr_NewWrapper", "type"], [21, 3, 1, "c.PyDescr_NewWrapper", "wrapped"], [21, 3, 1, "c.PyDescr_NewWrapper", "wrapper"]], "PyDictProxy_New": [[22, 3, 1, "c.PyDictProxy_New", "mapping"]], "PyDict_AddWatcher": [[22, 3, 1, "c.PyDict_AddWatcher", "callback"]], "PyDict_Check": [[22, 3, 1, "c.PyDict_Check", "p"]], "PyDict_CheckExact": [[22, 3, 1, "c.PyDict_CheckExact", "p"]], "PyDict_Clear": [[22, 3, 1, "c.PyDict_Clear", "p"]], "PyDict_ClearWatcher": [[22, 3, 1, "c.PyDict_ClearWatcher", "watcher_id"]], "PyDict_Contains": [[22, 3, 1, "c.PyDict_Contains", "key"], [22, 3, 1, "c.PyDict_Contains", "p"]], "PyDict_Copy": [[22, 3, 1, "c.PyDict_Copy", "p"]], "PyDict_DelItem": [[22, 3, 1, "c.PyDict_DelItem", "key"], [22, 3, 1, "c.PyDict_DelItem", "p"]], "PyDict_DelItemString": [[22, 3, 1, "c.PyDict_DelItemString", "key"], [22, 3, 1, "c.PyDict_DelItemString", "p"]], "PyDict_GetItem": [[22, 3, 1, "c.PyDict_GetItem", "key"], [22, 3, 1, "c.PyDict_GetItem", "p"]], "PyDict_GetItemString": [[22, 3, 1, "c.PyDict_GetItemString", "key"], [22, 3, 1, "c.PyDict_GetItemString", "p"]], "PyDict_GetItemWithError": [[22, 3, 1, "c.PyDict_GetItemWithError", "key"], [22, 3, 1, "c.PyDict_GetItemWithError", "p"]], "PyDict_Items": [[22, 3, 1, "c.PyDict_Items", "p"]], "PyDict_Keys": [[22, 3, 1, "c.PyDict_Keys", "p"]], "PyDict_Merge": [[22, 3, 1, "c.PyDict_Merge", "a"], [22, 3, 1, "c.PyDict_Merge", "b"], [22, 3, 1, "c.PyDict_Merge", "override"]], "PyDict_MergeFromSeq2": [[22, 3, 1, "c.PyDict_MergeFromSeq2", "a"], [22, 3, 1, "c.PyDict_MergeFromSeq2", "override"], [22, 3, 1, "c.PyDict_MergeFromSeq2", "seq2"]], "PyDict_Next": [[22, 3, 1, "c.PyDict_Next", "p"], [22, 3, 1, "c.PyDict_Next", "pkey"], [22, 3, 1, "c.PyDict_Next", "ppos"], [22, 3, 1, "c.PyDict_Next", "pvalue"]], "PyDict_SetDefault": [[22, 3, 1, "c.PyDict_SetDefault", "defaultobj"], [22, 3, 1, "c.PyDict_SetDefault", "key"], [22, 3, 1, "c.PyDict_SetDefault", "p"]], "PyDict_SetItem": [[22, 3, 1, "c.PyDict_SetItem", "key"], [22, 3, 1, "c.PyDict_SetItem", "p"], [22, 3, 1, "c.PyDict_SetItem", "val"]], "PyDict_SetItemString": [[22, 3, 1, "c.PyDict_SetItemString", "key"], [22, 3, 1, "c.PyDict_SetItemString", "p"], [22, 3, 1, "c.PyDict_SetItemString", "val"]], "PyDict_Size": [[22, 3, 1, "c.PyDict_Size", "p"]], "PyDict_Unwatch": [[22, 3, 1, "c.PyDict_Unwatch", "dict"], [22, 3, 1, "c.PyDict_Unwatch", "watcher_id"]], "PyDict_Update": [[22, 3, 1, "c.PyDict_Update", "a"], [22, 3, 1, "c.PyDict_Update", "b"]], "PyDict_Values": [[22, 3, 1, "c.PyDict_Values", "p"]], "PyDict_Watch": [[22, 3, 1, "c.PyDict_Watch", "dict"], [22, 3, 1, "c.PyDict_Watch", "watcher_id"]], "PyErr_DisplayException": [[23, 3, 1, "c.PyErr_DisplayException", "exc"]], "PyErr_ExceptionMatches": [[23, 3, 1, "c.PyErr_ExceptionMatches", "exc"]], "PyErr_Fetch": [[23, 3, 1, "c.PyErr_Fetch", "ptraceback"], [23, 3, 1, "c.PyErr_Fetch", "ptype"], [23, 3, 1, "c.PyErr_Fetch", "pvalue"]], "PyErr_Format": [[23, 3, 1, "c.PyErr_Format", "exception"], [23, 3, 1, "c.PyErr_Format", "format"]], "PyErr_FormatV": [[23, 3, 1, "c.PyErr_FormatV", "exception"], [23, 3, 1, "c.PyErr_FormatV", "format"], [23, 3, 1, "c.PyErr_FormatV", "vargs"]], "PyErr_GetExcInfo": [[23, 3, 1, "c.PyErr_GetExcInfo", "ptraceback"], [23, 3, 1, "c.PyErr_GetExcInfo", "ptype"], [23, 3, 1, "c.PyErr_GetExcInfo", "pvalue"]], "PyErr_GivenExceptionMatches": [[23, 3, 1, "c.PyErr_GivenExceptionMatches", "exc"], [23, 3, 1, "c.PyErr_GivenExceptionMatches", "given"]], "PyErr_NewException": [[23, 3, 1, "c.PyErr_NewException", "base"], [23, 3, 1, "c.PyErr_NewException", "dict"], [23, 3, 1, "c.PyErr_NewException", "name"]], "PyErr_NewExceptionWithDoc": [[23, 3, 1, "c.PyErr_NewExceptionWithDoc", "base"], [23, 3, 1, "c.PyErr_NewExceptionWithDoc", "dict"], [23, 3, 1, "c.PyErr_NewExceptionWithDoc", "doc"], [23, 3, 1, "c.PyErr_NewExceptionWithDoc", "name"]], "PyErr_NormalizeException": [[23, 3, 1, "c.PyErr_NormalizeException", "exc"], [23, 3, 1, "c.PyErr_NormalizeException", "tb"], [23, 3, 1, "c.PyErr_NormalizeException", "val"]], "PyErr_PrintEx": [[23, 3, 1, "c.PyErr_PrintEx", "set_sys_last_vars"]], "PyErr_ResourceWarning": [[23, 3, 1, "c.PyErr_ResourceWarning", "format"], [23, 3, 1, "c.PyErr_ResourceWarning", "source"], [23, 3, 1, "c.PyErr_ResourceWarning", "stack_level"]], "PyErr_Restore": [[23, 3, 1, "c.PyErr_Restore", "traceback"], [23, 3, 1, "c.PyErr_Restore", "type"], [23, 3, 1, "c.PyErr_Restore", "value"]], "PyErr_SetExcFromWindowsErr": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErr", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErr", "type"]], "PyErr_SetExcFromWindowsErrWithFilename": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "filename"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilename", "type"]], "PyErr_SetExcFromWindowsErrWithFilenameObject": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "filename"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObject", "type"]], "PyErr_SetExcFromWindowsErrWithFilenameObjects": [[23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "filename"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "filename2"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "ierr"], [23, 3, 1, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects", "type"]], "PyErr_SetExcInfo": [[23, 3, 1, "c.PyErr_SetExcInfo", "traceback"], [23, 3, 1, "c.PyErr_SetExcInfo", "type"], [23, 3, 1, "c.PyErr_SetExcInfo", "value"]], "PyErr_SetFromErrno": [[23, 3, 1, "c.PyErr_SetFromErrno", "type"]], "PyErr_SetFromErrnoWithFilename": [[23, 3, 1, "c.PyErr_SetFromErrnoWithFilename", "filename"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilename", "type"]], "PyErr_SetFromErrnoWithFilenameObject": [[23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObject", "filenameObject"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObject", "type"]], "PyErr_SetFromErrnoWithFilenameObjects": [[23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "filenameObject"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "filenameObject2"], [23, 3, 1, "c.PyErr_SetFromErrnoWithFilenameObjects", "type"]], "PyErr_SetFromWindowsErr": [[23, 3, 1, "c.PyErr_SetFromWindowsErr", "ierr"]], "PyErr_SetFromWindowsErrWithFilename": [[23, 3, 1, "c.PyErr_SetFromWindowsErrWithFilename", "filename"], [23, 3, 1, "c.PyErr_SetFromWindowsErrWithFilename", "ierr"]], "PyErr_SetHandledException": [[23, 3, 1, "c.PyErr_SetHandledException", "exc"]], "PyErr_SetImportError": [[23, 3, 1, "c.PyErr_SetImportError", "msg"], [23, 3, 1, "c.PyErr_SetImportError", "name"], [23, 3, 1, "c.PyErr_SetImportError", "path"]], "PyErr_SetImportErrorSubclass": [[23, 3, 1, "c.PyErr_SetImportErrorSubclass", "exception"], [23, 3, 1, "c.PyErr_SetImportErrorSubclass", "msg"], [23, 3, 1, "c.PyErr_SetImportErrorSubclass", "name"], [23, 3, 1, "c.PyErr_SetImportErrorSubclass", "path"]], "PyErr_SetInterruptEx": [[23, 3, 1, "c.PyErr_SetInterruptEx", "signum"]], "PyErr_SetNone": [[23, 3, 1, "c.PyErr_SetNone", "type"]], "PyErr_SetObject": [[23, 3, 1, "c.PyErr_SetObject", "type"], [23, 3, 1, "c.PyErr_SetObject", "value"]], "PyErr_SetRaisedException": [[23, 3, 1, "c.PyErr_SetRaisedException", "exc"]], "PyErr_SetString": [[23, 3, 1, "c.PyErr_SetString", "message"], [23, 3, 1, "c.PyErr_SetString", "type"]], "PyErr_SyntaxLocation": [[23, 3, 1, "c.PyErr_SyntaxLocation", "filename"], [23, 3, 1, "c.PyErr_SyntaxLocation", "lineno"]], "PyErr_SyntaxLocationEx": [[23, 3, 1, "c.PyErr_SyntaxLocationEx", "col_offset"], [23, 3, 1, "c.PyErr_SyntaxLocationEx", "filename"], [23, 3, 1, "c.PyErr_SyntaxLocationEx", "lineno"]], "PyErr_SyntaxLocationObject": [[23, 3, 1, "c.PyErr_SyntaxLocationObject", "col_offset"], [23, 3, 1, "c.PyErr_SyntaxLocationObject", "filename"], [23, 3, 1, "c.PyErr_SyntaxLocationObject", "lineno"]], "PyErr_WarnEx": [[23, 3, 1, "c.PyErr_WarnEx", "category"], [23, 3, 1, "c.PyErr_WarnEx", "message"], [23, 3, 1, "c.PyErr_WarnEx", "stack_level"]], "PyErr_WarnExplicit": [[23, 3, 1, "c.PyErr_WarnExplicit", "category"], [23, 3, 1, "c.PyErr_WarnExplicit", "filename"], [23, 3, 1, "c.PyErr_WarnExplicit", "lineno"], [23, 3, 1, "c.PyErr_WarnExplicit", "message"], [23, 3, 1, "c.PyErr_WarnExplicit", "module"], [23, 3, 1, "c.PyErr_WarnExplicit", "registry"]], "PyErr_WarnExplicitObject": [[23, 3, 1, "c.PyErr_WarnExplicitObject", "category"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "filename"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "lineno"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "message"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "module"], [23, 3, 1, "c.PyErr_WarnExplicitObject", "registry"]], "PyErr_WarnFormat": [[23, 3, 1, "c.PyErr_WarnFormat", "category"], [23, 3, 1, "c.PyErr_WarnFormat", "format"], [23, 3, 1, "c.PyErr_WarnFormat", "stack_level"]], "PyErr_WriteUnraisable": [[23, 3, 1, "c.PyErr_WriteUnraisable", "obj"]], "PyEval_AcquireThread": [[33, 3, 1, "c.PyEval_AcquireThread", "tstate"]], "PyEval_EvalCode": [[66, 3, 1, "c.PyEval_EvalCode", "co"], [66, 3, 1, "c.PyEval_EvalCode", "globals"], [66, 3, 1, "c.PyEval_EvalCode", "locals"]], "PyEval_EvalCodeEx": [[66, 3, 1, "c.PyEval_EvalCodeEx", "argcount"], [66, 3, 1, "c.PyEval_EvalCodeEx", "args"], [66, 3, 1, "c.PyEval_EvalCodeEx", "closure"], [66, 3, 1, "c.PyEval_EvalCodeEx", "co"], [66, 3, 1, "c.PyEval_EvalCodeEx", "defcount"], [66, 3, 1, "c.PyEval_EvalCodeEx", "defs"], [66, 3, 1, "c.PyEval_EvalCodeEx", "globals"], [66, 3, 1, "c.PyEval_EvalCodeEx", "kwcount"], [66, 3, 1, "c.PyEval_EvalCodeEx", "kwdefs"], [66, 3, 1, "c.PyEval_EvalCodeEx", "kws"], [66, 3, 1, "c.PyEval_EvalCodeEx", "locals"]], "PyEval_EvalFrame": [[66, 3, 1, "c.PyEval_EvalFrame", "f"]], "PyEval_EvalFrameEx": [[66, 3, 1, "c.PyEval_EvalFrameEx", "f"], [66, 3, 1, "c.PyEval_EvalFrameEx", "throwflag"]], "PyEval_GetFuncDesc": [[53, 3, 1, "c.PyEval_GetFuncDesc", "func"]], "PyEval_GetFuncName": [[53, 3, 1, "c.PyEval_GetFuncName", "func"]], "PyEval_MergeCompilerFlags": [[66, 3, 1, "c.PyEval_MergeCompilerFlags", "cf"]], "PyEval_ReleaseThread": [[33, 3, 1, "c.PyEval_ReleaseThread", "tstate"]], "PyEval_RestoreThread": [[33, 3, 1, "c.PyEval_RestoreThread", "tstate"]], "PyEval_SetProfile": [[33, 3, 1, "c.PyEval_SetProfile", "func"], [33, 3, 1, "c.PyEval_SetProfile", "obj"]], "PyEval_SetProfileAllThreads": [[33, 3, 1, "c.PyEval_SetProfileAllThreads", "func"], [33, 3, 1, "c.PyEval_SetProfileAllThreads", "obj"]], "PyEval_SetTrace": [[33, 3, 1, "c.PyEval_SetTrace", "func"], [33, 3, 1, "c.PyEval_SetTrace", "obj"]], "PyEval_SetTraceAllThreads": [[33, 3, 1, "c.PyEval_SetTraceAllThreads", "func"], [33, 3, 1, "c.PyEval_SetTraceAllThreads", "obj"]], "PyException_GetArgs": [[23, 3, 1, "c.PyException_GetArgs", "ex"]], "PyException_GetCause": [[23, 3, 1, "c.PyException_GetCause", "ex"]], "PyException_GetContext": [[23, 3, 1, "c.PyException_GetContext", "ex"]], "PyException_GetTraceback": [[23, 3, 1, "c.PyException_GetTraceback", "ex"]], "PyException_SetArgs": [[23, 3, 1, "c.PyException_SetArgs", "args"], [23, 3, 1, "c.PyException_SetArgs", "ex"]], "PyException_SetCause": [[23, 3, 1, "c.PyException_SetCause", "cause"], [23, 3, 1, "c.PyException_SetCause", "ex"]], "PyException_SetContext": [[23, 3, 1, "c.PyException_SetContext", "ctx"], [23, 3, 1, "c.PyException_SetContext", "ex"]], "PyException_SetTraceback": [[23, 3, 1, "c.PyException_SetTraceback", "ex"], [23, 3, 1, "c.PyException_SetTraceback", "tb"]], "PyFile_FromFd": [[24, 3, 1, "c.PyFile_FromFd", "buffering"], [24, 3, 1, "c.PyFile_FromFd", "closefd"], [24, 3, 1, "c.PyFile_FromFd", "encoding"], [24, 3, 1, "c.PyFile_FromFd", "errors"], [24, 3, 1, "c.PyFile_FromFd", "fd"], [24, 3, 1, "c.PyFile_FromFd", "mode"], [24, 3, 1, "c.PyFile_FromFd", "name"], [24, 3, 1, "c.PyFile_FromFd", "newline"]], "PyFile_GetLine": [[24, 3, 1, "c.PyFile_GetLine", "n"], [24, 3, 1, "c.PyFile_GetLine", "p"]], "PyFile_SetOpenCodeHook": [[24, 4, 1, "c.PyFile_SetOpenCodeHook.Py_OpenCodeHookFunction", "Py_OpenCodeHookFunction"], [24, 3, 1, "c.PyFile_SetOpenCodeHook", "handler"]], "PyFile_WriteObject": [[24, 3, 1, "c.PyFile_WriteObject", "flags"], [24, 3, 1, "c.PyFile_WriteObject", "obj"], [24, 3, 1, "c.PyFile_WriteObject", "p"]], "PyFile_WriteString": [[24, 3, 1, "c.PyFile_WriteString", "p"], [24, 3, 1, "c.PyFile_WriteString", "s"]], "PyFloat_AS_DOUBLE": [[25, 3, 1, "c.PyFloat_AS_DOUBLE", "pyfloat"]], "PyFloat_AsDouble": [[25, 3, 1, "c.PyFloat_AsDouble", "pyfloat"]], "PyFloat_Check": [[25, 3, 1, "c.PyFloat_Check", "p"]], "PyFloat_CheckExact": [[25, 3, 1, "c.PyFloat_CheckExact", "p"]], "PyFloat_FromDouble": [[25, 3, 1, "c.PyFloat_FromDouble", "v"]], "PyFloat_FromString": [[25, 3, 1, "c.PyFloat_FromString", "str"]], "PyFloat_Pack2": [[25, 3, 1, "c.PyFloat_Pack2", "le"], [25, 3, 1, "c.PyFloat_Pack2", "p"], [25, 3, 1, "c.PyFloat_Pack2", "x"]], "PyFloat_Pack4": [[25, 3, 1, "c.PyFloat_Pack4", "le"], [25, 3, 1, "c.PyFloat_Pack4", "p"], [25, 3, 1, "c.PyFloat_Pack4", "x"]], "PyFloat_Pack8": [[25, 3, 1, "c.PyFloat_Pack8", "le"], [25, 3, 1, "c.PyFloat_Pack8", "p"], [25, 3, 1, "c.PyFloat_Pack8", "x"]], "PyFloat_Unpack2": [[25, 3, 1, "c.PyFloat_Unpack2", "le"], [25, 3, 1, "c.PyFloat_Unpack2", "p"]], "PyFloat_Unpack4": [[25, 3, 1, "c.PyFloat_Unpack4", "le"], [25, 3, 1, "c.PyFloat_Unpack4", "p"]], "PyFloat_Unpack8": [[25, 3, 1, "c.PyFloat_Unpack8", "le"], [25, 3, 1, "c.PyFloat_Unpack8", "p"]], "PyFrame_Check": [[26, 3, 1, "c.PyFrame_Check", "obj"]], "PyFrame_GetBack": [[26, 3, 1, "c.PyFrame_GetBack", "frame"]], "PyFrame_GetBuiltins": [[26, 3, 1, "c.PyFrame_GetBuiltins", "frame"]], "PyFrame_GetCode": [[26, 3, 1, "c.PyFrame_GetCode", "frame"]], "PyFrame_GetGenerator": [[26, 3, 1, "c.PyFrame_GetGenerator", "frame"]], "PyFrame_GetGlobals": [[26, 3, 1, "c.PyFrame_GetGlobals", "frame"]], "PyFrame_GetLasti": [[26, 3, 1, "c.PyFrame_GetLasti", "frame"]], "PyFrame_GetLineNumber": [[26, 3, 1, "c.PyFrame_GetLineNumber", "frame"]], "PyFrame_GetLocals": [[26, 3, 1, "c.PyFrame_GetLocals", "frame"]], "PyFrame_GetVar": [[26, 3, 1, "c.PyFrame_GetVar", "frame"], [26, 3, 1, "c.PyFrame_GetVar", "name"]], "PyFrame_GetVarString": [[26, 3, 1, "c.PyFrame_GetVarString", "frame"], [26, 3, 1, "c.PyFrame_GetVarString", "name"]], "PyFrozenSet_Check": [[55, 3, 1, "c.PyFrozenSet_Check", "p"]], "PyFrozenSet_CheckExact": [[55, 3, 1, "c.PyFrozenSet_CheckExact", "p"]], "PyFrozenSet_New": [[55, 3, 1, "c.PyFrozenSet_New", "iterable"]], "PyFunction_AddWatcher": [[27, 3, 1, "c.PyFunction_AddWatcher", "callback"]], "PyFunction_Check": [[27, 3, 1, "c.PyFunction_Check", "o"]], "PyFunction_ClearWatcher": [[27, 3, 1, "c.PyFunction_ClearWatcher", "watcher_id"]], "PyFunction_GetAnnotations": [[27, 3, 1, "c.PyFunction_GetAnnotations", "op"]], "PyFunction_GetClosure": [[27, 3, 1, "c.PyFunction_GetClosure", "op"]], "PyFunction_GetCode": [[27, 3, 1, "c.PyFunction_GetCode", "op"]], "PyFunction_GetDefaults": [[27, 3, 1, "c.PyFunction_GetDefaults", "op"]], "PyFunction_GetGlobals": [[27, 3, 1, "c.PyFunction_GetGlobals", "op"]], "PyFunction_GetModule": [[27, 3, 1, "c.PyFunction_GetModule", "op"]], "PyFunction_New": [[27, 3, 1, "c.PyFunction_New", "code"], [27, 3, 1, "c.PyFunction_New", "globals"]], "PyFunction_NewWithQualName": [[27, 3, 1, "c.PyFunction_NewWithQualName", "code"], [27, 3, 1, "c.PyFunction_NewWithQualName", "globals"], [27, 3, 1, "c.PyFunction_NewWithQualName", "qualname"]], "PyFunction_SetAnnotations": [[27, 3, 1, "c.PyFunction_SetAnnotations", "annotations"], [27, 3, 1, "c.PyFunction_SetAnnotations", "op"]], "PyFunction_SetClosure": [[27, 3, 1, "c.PyFunction_SetClosure", "closure"], [27, 3, 1, "c.PyFunction_SetClosure", "op"]], "PyFunction_SetDefaults": [[27, 3, 1, "c.PyFunction_SetDefaults", "defaults"], [27, 3, 1, "c.PyFunction_SetDefaults", "op"]], "PyFunction_SetVectorcall": [[27, 3, 1, "c.PyFunction_SetVectorcall", "func"], [27, 3, 1, "c.PyFunction_SetVectorcall", "vectorcall"]], "PyGen_Check": [[29, 3, 1, "c.PyGen_Check", "ob"]], "PyGen_CheckExact": [[29, 3, 1, "c.PyGen_CheckExact", "ob"]], "PyGen_New": [[29, 3, 1, "c.PyGen_New", "frame"]], "PyGen_NewWithQualName": [[29, 3, 1, "c.PyGen_NewWithQualName", "frame"], [29, 3, 1, "c.PyGen_NewWithQualName", "name"], [29, 3, 1, "c.PyGen_NewWithQualName", "qualname"]], "PyGetSetDef": [[58, 0, 1, "c.PyGetSetDef.closure", "closure"], [58, 0, 1, "c.PyGetSetDef.doc", "doc"], [58, 0, 1, "c.PyGetSetDef.get", "get"], [58, 0, 1, "c.PyGetSetDef.name", "name"], [58, 0, 1, "c.PyGetSetDef.set", "set"]], "PyHash_FuncDef": [[30, 0, 1, "c.PyHash_FuncDef.hash_bits", "hash_bits"], [30, 0, 1, "c.PyHash_FuncDef.name", "name"], [30, 0, 1, "c.PyHash_FuncDef.seed_bits", "seed_bits"]], "PyImport_AddModule": [[31, 3, 1, "c.PyImport_AddModule", "name"]], "PyImport_AddModuleObject": [[31, 3, 1, "c.PyImport_AddModuleObject", "name"]], "PyImport_AppendInittab": [[31, 3, 1, "c.PyImport_AppendInittab", "initfunc"], [31, 3, 1, "c.PyImport_AppendInittab", "name"]], "PyImport_ExecCodeModule": [[31, 3, 1, "c.PyImport_ExecCodeModule", "co"], [31, 3, 1, "c.PyImport_ExecCodeModule", "name"]], "PyImport_ExecCodeModuleEx": [[31, 3, 1, "c.PyImport_ExecCodeModuleEx", "co"], [31, 3, 1, "c.PyImport_ExecCodeModuleEx", "name"], [31, 3, 1, "c.PyImport_ExecCodeModuleEx", "pathname"]], "PyImport_ExecCodeModuleObject": [[31, 3, 1, "c.PyImport_ExecCodeModuleObject", "co"], [31, 3, 1, "c.PyImport_ExecCodeModuleObject", "cpathname"], [31, 3, 1, "c.PyImport_ExecCodeModuleObject", "name"], [31, 3, 1, "c.PyImport_ExecCodeModuleObject", "pathname"]], "PyImport_ExecCodeModuleWithPathnames": [[31, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "co"], [31, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "cpathname"], [31, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "name"], [31, 3, 1, "c.PyImport_ExecCodeModuleWithPathnames", "pathname"]], "PyImport_ExtendInittab": [[31, 3, 1, "c.PyImport_ExtendInittab", "newtab"]], "PyImport_GetImporter": [[31, 3, 1, "c.PyImport_GetImporter", "path"]], "PyImport_GetModule": [[31, 3, 1, "c.PyImport_GetModule", "name"]], "PyImport_Import": [[31, 3, 1, "c.PyImport_Import", "name"]], "PyImport_ImportFrozenModule": [[31, 3, 1, "c.PyImport_ImportFrozenModule", "name"]], "PyImport_ImportFrozenModuleObject": [[31, 3, 1, "c.PyImport_ImportFrozenModuleObject", "name"]], "PyImport_ImportModule": [[31, 3, 1, "c.PyImport_ImportModule", "name"]], "PyImport_ImportModuleEx": [[31, 3, 1, "c.PyImport_ImportModuleEx", "fromlist"], [31, 3, 1, "c.PyImport_ImportModuleEx", "globals"], [31, 3, 1, "c.PyImport_ImportModuleEx", "locals"], [31, 3, 1, "c.PyImport_ImportModuleEx", "name"]], "PyImport_ImportModuleLevel": [[31, 3, 1, "c.PyImport_ImportModuleLevel", "fromlist"], [31, 3, 1, "c.PyImport_ImportModuleLevel", "globals"], [31, 3, 1, "c.PyImport_ImportModuleLevel", "level"], [31, 3, 1, "c.PyImport_ImportModuleLevel", "locals"], [31, 3, 1, "c.PyImport_ImportModuleLevel", "name"]], "PyImport_ImportModuleLevelObject": [[31, 3, 1, "c.PyImport_ImportModuleLevelObject", "fromlist"], [31, 3, 1, "c.PyImport_ImportModuleLevelObject", "globals"], [31, 3, 1, "c.PyImport_ImportModuleLevelObject", "level"], [31, 3, 1, "c.PyImport_ImportModuleLevelObject", "locals"], [31, 3, 1, "c.PyImport_ImportModuleLevelObject", "name"]], "PyImport_ImportModuleNoBlock": [[31, 3, 1, "c.PyImport_ImportModuleNoBlock", "name"]], "PyImport_ReloadModule": [[31, 3, 1, "c.PyImport_ReloadModule", "m"]], "PyIndex_Check": [[47, 3, 1, "c.PyIndex_Check", "o"]], "PyInstanceMethod_Check": [[44, 3, 1, "c.PyInstanceMethod_Check", "o"]], "PyInstanceMethod_Function": [[44, 3, 1, "c.PyInstanceMethod_Function", "im"]], "PyInstanceMethod_GET_FUNCTION": [[44, 3, 1, "c.PyInstanceMethod_GET_FUNCTION", "im"]], "PyInstanceMethod_New": [[44, 3, 1, "c.PyInstanceMethod_New", "func"]], "PyInterpreterConfig": [[33, 0, 1, "c.PyInterpreterConfig.allow_daemon_threads", "allow_daemon_threads"], [33, 0, 1, "c.PyInterpreterConfig.allow_exec", "allow_exec"], [33, 0, 1, "c.PyInterpreterConfig.allow_fork", "allow_fork"], [33, 0, 1, "c.PyInterpreterConfig.allow_threads", "allow_threads"], [33, 0, 1, "c.PyInterpreterConfig.check_multi_interp_extensions", "check_multi_interp_extensions"], [33, 0, 1, "c.PyInterpreterConfig.gil", "gil"], [33, 0, 1, "c.PyInterpreterConfig.use_main_obmalloc", "use_main_obmalloc"]], "PyInterpreterState_Clear": [[33, 3, 1, "c.PyInterpreterState_Clear", "interp"]], "PyInterpreterState_Delete": [[33, 3, 1, "c.PyInterpreterState_Delete", "interp"]], "PyInterpreterState_GetDict": [[33, 3, 1, "c.PyInterpreterState_GetDict", "interp"]], "PyInterpreterState_GetID": [[33, 3, 1, "c.PyInterpreterState_GetID", "interp"]], "PyInterpreterState_Next": [[33, 3, 1, "c.PyInterpreterState_Next", "interp"]], "PyInterpreterState_ThreadHead": [[33, 3, 1, "c.PyInterpreterState_ThreadHead", "interp"]], "PyIter_Check": [[36, 3, 1, "c.PyIter_Check", "o"]], "PyIter_Next": [[36, 3, 1, "c.PyIter_Next", "o"]], "PyIter_Send": [[36, 3, 1, "c.PyIter_Send", "arg"], [36, 3, 1, "c.PyIter_Send", "iter"], [36, 3, 1, "c.PyIter_Send", "presult"]], "PyList_Append": [[38, 3, 1, "c.PyList_Append", "item"], [38, 3, 1, "c.PyList_Append", "list"]], "PyList_AsTuple": [[38, 3, 1, "c.PyList_AsTuple", "list"]], "PyList_Check": [[38, 3, 1, "c.PyList_Check", "p"]], "PyList_CheckExact": [[38, 3, 1, "c.PyList_CheckExact", "p"]], "PyList_GET_ITEM": [[38, 3, 1, "c.PyList_GET_ITEM", "i"], [38, 3, 1, "c.PyList_GET_ITEM", "list"]], "PyList_GET_SIZE": [[38, 3, 1, "c.PyList_GET_SIZE", "list"]], "PyList_GetItem": [[38, 3, 1, "c.PyList_GetItem", "index"], [38, 3, 1, "c.PyList_GetItem", "list"]], "PyList_GetSlice": [[38, 3, 1, "c.PyList_GetSlice", "high"], [38, 3, 1, "c.PyList_GetSlice", "list"], [38, 3, 1, "c.PyList_GetSlice", "low"]], "PyList_Insert": [[38, 3, 1, "c.PyList_Insert", "index"], [38, 3, 1, "c.PyList_Insert", "item"], [38, 3, 1, "c.PyList_Insert", "list"]], "PyList_New": [[38, 3, 1, "c.PyList_New", "len"]], "PyList_Reverse": [[38, 3, 1, "c.PyList_Reverse", "list"]], "PyList_SET_ITEM": [[38, 3, 1, "c.PyList_SET_ITEM", "i"], [38, 3, 1, "c.PyList_SET_ITEM", "list"], [38, 3, 1, "c.PyList_SET_ITEM", "o"]], "PyList_SetItem": [[38, 3, 1, "c.PyList_SetItem", "index"], [38, 3, 1, "c.PyList_SetItem", "item"], [38, 3, 1, "c.PyList_SetItem", "list"]], "PyList_SetSlice": [[38, 3, 1, "c.PyList_SetSlice", "high"], [38, 3, 1, "c.PyList_SetSlice", "itemlist"], [38, 3, 1, "c.PyList_SetSlice", "list"], [38, 3, 1, "c.PyList_SetSlice", "low"]], "PyList_Size": [[38, 3, 1, "c.PyList_Size", "list"]], "PyList_Sort": [[38, 3, 1, "c.PyList_Sort", "list"]], "PyLong_AsDouble": [[39, 3, 1, "c.PyLong_AsDouble", "pylong"]], "PyLong_AsLong": [[39, 3, 1, "c.PyLong_AsLong", "obj"]], "PyLong_AsLongAndOverflow": [[39, 3, 1, "c.PyLong_AsLongAndOverflow", "obj"], [39, 3, 1, "c.PyLong_AsLongAndOverflow", "overflow"]], "PyLong_AsLongLong": [[39, 3, 1, "c.PyLong_AsLongLong", "obj"]], "PyLong_AsLongLongAndOverflow": [[39, 3, 1, "c.PyLong_AsLongLongAndOverflow", "obj"], [39, 3, 1, "c.PyLong_AsLongLongAndOverflow", "overflow"]], "PyLong_AsSize_t": [[39, 3, 1, "c.PyLong_AsSize_t", "pylong"]], "PyLong_AsSsize_t": [[39, 3, 1, "c.PyLong_AsSsize_t", "pylong"]], "PyLong_AsUnsignedLong": [[39, 3, 1, "c.PyLong_AsUnsignedLong", "pylong"]], "PyLong_AsUnsignedLongLong": [[39, 3, 1, "c.PyLong_AsUnsignedLongLong", "pylong"]], "PyLong_AsUnsignedLongLongMask": [[39, 3, 1, "c.PyLong_AsUnsignedLongLongMask", "obj"]], "PyLong_AsUnsignedLongMask": [[39, 3, 1, "c.PyLong_AsUnsignedLongMask", "obj"]], "PyLong_AsVoidPtr": [[39, 3, 1, "c.PyLong_AsVoidPtr", "pylong"]], "PyLong_Check": [[39, 3, 1, "c.PyLong_Check", "p"]], "PyLong_CheckExact": [[39, 3, 1, "c.PyLong_CheckExact", "p"]], "PyLong_FromDouble": [[39, 3, 1, "c.PyLong_FromDouble", "v"]], "PyLong_FromLong": [[39, 3, 1, "c.PyLong_FromLong", "v"]], "PyLong_FromLongLong": [[39, 3, 1, "c.PyLong_FromLongLong", "v"]], "PyLong_FromSize_t": [[39, 3, 1, "c.PyLong_FromSize_t", "v"]], "PyLong_FromSsize_t": [[39, 3, 1, "c.PyLong_FromSsize_t", "v"]], "PyLong_FromString": [[39, 3, 1, "c.PyLong_FromString", "base"], [39, 3, 1, "c.PyLong_FromString", "pend"], [39, 3, 1, "c.PyLong_FromString", "str"]], "PyLong_FromUnicodeObject": [[39, 3, 1, "c.PyLong_FromUnicodeObject", "base"], [39, 3, 1, "c.PyLong_FromUnicodeObject", "u"]], "PyLong_FromUnsignedLong": [[39, 3, 1, "c.PyLong_FromUnsignedLong", "v"]], "PyLong_FromUnsignedLongLong": [[39, 3, 1, "c.PyLong_FromUnsignedLongLong", "v"]], "PyLong_FromVoidPtr": [[39, 3, 1, "c.PyLong_FromVoidPtr", "p"]], "PyMappingMethods": [[63, 0, 1, "c.PyMappingMethods.mp_ass_subscript", "mp_ass_subscript"], [63, 0, 1, "c.PyMappingMethods.mp_length", "mp_length"], [63, 0, 1, "c.PyMappingMethods.mp_subscript", "mp_subscript"]], "PyMapping_Check": [[40, 3, 1, "c.PyMapping_Check", "o"]], "PyMapping_DelItem": [[40, 3, 1, "c.PyMapping_DelItem", "key"], [40, 3, 1, "c.PyMapping_DelItem", "o"]], "PyMapping_DelItemString": [[40, 3, 1, "c.PyMapping_DelItemString", "key"], [40, 3, 1, "c.PyMapping_DelItemString", "o"]], "PyMapping_GetItemString": [[40, 3, 1, "c.PyMapping_GetItemString", "key"], [40, 3, 1, "c.PyMapping_GetItemString", "o"]], "PyMapping_HasKey": [[40, 3, 1, "c.PyMapping_HasKey", "key"], [40, 3, 1, "c.PyMapping_HasKey", "o"]], "PyMapping_HasKeyString": [[40, 3, 1, "c.PyMapping_HasKeyString", "key"], [40, 3, 1, "c.PyMapping_HasKeyString", "o"]], "PyMapping_Items": [[40, 3, 1, "c.PyMapping_Items", "o"]], "PyMapping_Keys": [[40, 3, 1, "c.PyMapping_Keys", "o"]], "PyMapping_Length": [[40, 3, 1, "c.PyMapping_Length", "o"]], "PyMapping_SetItemString": [[40, 3, 1, "c.PyMapping_SetItemString", "key"], [40, 3, 1, "c.PyMapping_SetItemString", "o"], [40, 3, 1, "c.PyMapping_SetItemString", "v"]], "PyMapping_Size": [[40, 3, 1, "c.PyMapping_Size", "o"]], "PyMapping_Values": [[40, 3, 1, "c.PyMapping_Values", "o"]], "PyMarshal_ReadLastObjectFromFile": [[41, 3, 1, "c.PyMarshal_ReadLastObjectFromFile", "file"]], "PyMarshal_ReadLongFromFile": [[41, 3, 1, "c.PyMarshal_ReadLongFromFile", "file"]], "PyMarshal_ReadObjectFromFile": [[41, 3, 1, "c.PyMarshal_ReadObjectFromFile", "file"]], "PyMarshal_ReadObjectFromString": [[41, 3, 1, "c.PyMarshal_ReadObjectFromString", "data"], [41, 3, 1, "c.PyMarshal_ReadObjectFromString", "len"]], "PyMarshal_ReadShortFromFile": [[41, 3, 1, "c.PyMarshal_ReadShortFromFile", "file"]], "PyMarshal_WriteLongToFile": [[41, 3, 1, "c.PyMarshal_WriteLongToFile", "file"], [41, 3, 1, "c.PyMarshal_WriteLongToFile", "value"], [41, 3, 1, "c.PyMarshal_WriteLongToFile", "version"]], "PyMarshal_WriteObjectToFile": [[41, 3, 1, "c.PyMarshal_WriteObjectToFile", "file"], [41, 3, 1, "c.PyMarshal_WriteObjectToFile", "value"], [41, 3, 1, "c.PyMarshal_WriteObjectToFile", "version"]], "PyMarshal_WriteObjectToString": [[41, 3, 1, "c.PyMarshal_WriteObjectToString", "value"], [41, 3, 1, "c.PyMarshal_WriteObjectToString", "version"]], "PyMem_Calloc": [[42, 3, 1, "c.PyMem_Calloc", "elsize"], [42, 3, 1, "c.PyMem_Calloc", "nelem"]], "PyMem_Del": [[42, 3, 1, "c.PyMem_Del", "p"]], "PyMem_Free": [[42, 3, 1, "c.PyMem_Free", "p"]], "PyMem_GetAllocator": [[42, 3, 1, "c.PyMem_GetAllocator", "allocator"], [42, 3, 1, "c.PyMem_GetAllocator", "domain"]], "PyMem_Malloc": [[42, 3, 1, "c.PyMem_Malloc", "n"]], "PyMem_RawCalloc": [[42, 3, 1, "c.PyMem_RawCalloc", "elsize"], [42, 3, 1, "c.PyMem_RawCalloc", "nelem"]], "PyMem_RawFree": [[42, 3, 1, "c.PyMem_RawFree", "p"]], "PyMem_RawMalloc": [[42, 3, 1, "c.PyMem_RawMalloc", "n"]], "PyMem_RawRealloc": [[42, 3, 1, "c.PyMem_RawRealloc", "n"], [42, 3, 1, "c.PyMem_RawRealloc", "p"]], "PyMem_Realloc": [[42, 3, 1, "c.PyMem_Realloc", "n"], [42, 3, 1, "c.PyMem_Realloc", "p"]], "PyMem_SetAllocator": [[42, 3, 1, "c.PyMem_SetAllocator", "allocator"], [42, 3, 1, "c.PyMem_SetAllocator", "domain"]], "PyMemberDef": [[58, 0, 1, "c.PyMemberDef.doc", "doc"], [58, 0, 1, "c.PyMemberDef.flags", "flags"], [58, 0, 1, "c.PyMemberDef.name", "name"], [58, 0, 1, "c.PyMemberDef.offset", "offset"], [58, 0, 1, "c.PyMemberDef.type", "type"]], "PyMember_GetOne": [[58, 3, 1, "c.PyMember_GetOne", "m"], [58, 3, 1, "c.PyMember_GetOne", "obj_addr"]], "PyMember_SetOne": [[58, 3, 1, "c.PyMember_SetOne", "m"], [58, 3, 1, "c.PyMember_SetOne", "o"], [58, 3, 1, "c.PyMember_SetOne", "obj_addr"]], "PyMemoryView_Check": [[43, 3, 1, "c.PyMemoryView_Check", "obj"]], "PyMemoryView_FromBuffer": [[43, 3, 1, "c.PyMemoryView_FromBuffer", "view"]], "PyMemoryView_FromMemory": [[43, 3, 1, "c.PyMemoryView_FromMemory", "flags"], [43, 3, 1, "c.PyMemoryView_FromMemory", "mem"], [43, 3, 1, "c.PyMemoryView_FromMemory", "size"]], "PyMemoryView_FromObject": [[43, 3, 1, "c.PyMemoryView_FromObject", "obj"]], "PyMemoryView_GET_BASE": [[43, 3, 1, "c.PyMemoryView_GET_BASE", "mview"]], "PyMemoryView_GET_BUFFER": [[43, 3, 1, "c.PyMemoryView_GET_BUFFER", "mview"]], "PyMemoryView_GetContiguous": [[43, 3, 1, "c.PyMemoryView_GetContiguous", "buffertype"], [43, 3, 1, "c.PyMemoryView_GetContiguous", "obj"], [43, 3, 1, "c.PyMemoryView_GetContiguous", "order"]], "PyMethodDef": [[58, 0, 1, "c.PyMethodDef.ml_doc", "ml_doc"], [58, 0, 1, "c.PyMethodDef.ml_flags", "ml_flags"], [58, 0, 1, "c.PyMethodDef.ml_meth", "ml_meth"], [58, 0, 1, "c.PyMethodDef.ml_name", "ml_name"]], "PyMethod_Check": [[44, 3, 1, "c.PyMethod_Check", "o"]], "PyMethod_Function": [[44, 3, 1, "c.PyMethod_Function", "meth"]], "PyMethod_GET_FUNCTION": [[44, 3, 1, "c.PyMethod_GET_FUNCTION", "meth"]], "PyMethod_GET_SELF": [[44, 3, 1, "c.PyMethod_GET_SELF", "meth"]], "PyMethod_New": [[44, 3, 1, "c.PyMethod_New", "func"], [44, 3, 1, "c.PyMethod_New", "self"]], "PyMethod_Self": [[44, 3, 1, "c.PyMethod_Self", "meth"]], "PyModuleDef": [[45, 0, 1, "c.PyModuleDef.m_base", "m_base"], [45, 0, 1, "c.PyModuleDef.m_clear", "m_clear"], [45, 0, 1, "c.PyModuleDef.m_doc", "m_doc"], [45, 0, 1, "c.PyModuleDef.m_free", "m_free"], [45, 0, 1, "c.PyModuleDef.m_methods", "m_methods"], [45, 0, 1, "c.PyModuleDef.m_name", "m_name"], [45, 0, 1, "c.PyModuleDef.m_size", "m_size"], [45, 0, 1, "c.PyModuleDef.m_slots", "m_slots"], [45, 0, 1, "c.PyModuleDef.m_traverse", "m_traverse"]], "PyModuleDef.m_slots": [[45, 0, 1, "c.PyModuleDef.m_slots.m_reload", "m_reload"]], "PyModuleDef_Init": [[45, 3, 1, "c.PyModuleDef_Init", "def"]], "PyModuleDef_Slot": [[45, 0, 1, "c.PyModuleDef_Slot.slot", "slot"], [45, 0, 1, "c.PyModuleDef_Slot.value", "value"]], "PyModule_AddFunctions": [[45, 3, 1, "c.PyModule_AddFunctions", "functions"], [45, 3, 1, "c.PyModule_AddFunctions", "module"]], "PyModule_AddIntConstant": [[45, 3, 1, "c.PyModule_AddIntConstant", "module"], [45, 3, 1, "c.PyModule_AddIntConstant", "name"], [45, 3, 1, "c.PyModule_AddIntConstant", "value"]], "PyModule_AddObject": [[45, 3, 1, "c.PyModule_AddObject", "module"], [45, 3, 1, "c.PyModule_AddObject", "name"], [45, 3, 1, "c.PyModule_AddObject", "value"]], "PyModule_AddObjectRef": [[45, 3, 1, "c.PyModule_AddObjectRef", "module"], [45, 3, 1, "c.PyModule_AddObjectRef", "name"], [45, 3, 1, "c.PyModule_AddObjectRef", "value"]], "PyModule_AddStringConstant": [[45, 3, 1, "c.PyModule_AddStringConstant", "module"], [45, 3, 1, "c.PyModule_AddStringConstant", "name"], [45, 3, 1, "c.PyModule_AddStringConstant", "value"]], "PyModule_AddType": [[45, 3, 1, "c.PyModule_AddType", "module"], [45, 3, 1, "c.PyModule_AddType", "type"]], "PyModule_Check": [[45, 3, 1, "c.PyModule_Check", "p"]], "PyModule_CheckExact": [[45, 3, 1, "c.PyModule_CheckExact", "p"]], "PyModule_Create": [[45, 3, 1, "c.PyModule_Create", "def"]], "PyModule_Create2": [[45, 3, 1, "c.PyModule_Create2", "def"], [45, 3, 1, "c.PyModule_Create2", "module_api_version"]], "PyModule_ExecDef": [[45, 3, 1, "c.PyModule_ExecDef", "def"], [45, 3, 1, "c.PyModule_ExecDef", "module"]], "PyModule_FromDefAndSpec": [[45, 3, 1, "c.PyModule_FromDefAndSpec", "def"], [45, 3, 1, "c.PyModule_FromDefAndSpec", "spec"]], "PyModule_FromDefAndSpec2": [[45, 3, 1, "c.PyModule_FromDefAndSpec2", "def"], [45, 3, 1, "c.PyModule_FromDefAndSpec2", "module_api_version"], [45, 3, 1, "c.PyModule_FromDefAndSpec2", "spec"]], "PyModule_GetDef": [[45, 3, 1, "c.PyModule_GetDef", "module"]], "PyModule_GetDict": [[45, 3, 1, "c.PyModule_GetDict", "module"]], "PyModule_GetFilename": [[45, 3, 1, "c.PyModule_GetFilename", "module"]], "PyModule_GetFilenameObject": [[45, 3, 1, "c.PyModule_GetFilenameObject", "module"]], "PyModule_GetName": [[45, 3, 1, "c.PyModule_GetName", "module"]], "PyModule_GetNameObject": [[45, 3, 1, "c.PyModule_GetNameObject", "module"]], "PyModule_GetState": [[45, 3, 1, "c.PyModule_GetState", "module"]], "PyModule_New": [[45, 3, 1, "c.PyModule_New", "name"]], "PyModule_NewObject": [[45, 3, 1, "c.PyModule_NewObject", "name"]], "PyModule_SetDocString": [[45, 3, 1, "c.PyModule_SetDocString", "docstring"], [45, 3, 1, "c.PyModule_SetDocString", "module"]], "PyNumberMethods": [[63, 0, 1, "c.PyNumberMethods.nb_absolute", "nb_absolute"], [63, 0, 1, "c.PyNumberMethods.nb_add", "nb_add"], [63, 0, 1, "c.PyNumberMethods.nb_and", "nb_and"], [63, 0, 1, "c.PyNumberMethods.nb_bool", "nb_bool"], [63, 0, 1, "c.PyNumberMethods.nb_divmod", "nb_divmod"], [63, 0, 1, "c.PyNumberMethods.nb_float", "nb_float"], [63, 0, 1, "c.PyNumberMethods.nb_floor_divide", "nb_floor_divide"], [63, 0, 1, "c.PyNumberMethods.nb_index", "nb_index"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_add", "nb_inplace_add"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_and", "nb_inplace_and"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_floor_divide", "nb_inplace_floor_divide"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_lshift", "nb_inplace_lshift"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_matrix_multiply", "nb_inplace_matrix_multiply"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_multiply", "nb_inplace_multiply"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_or", "nb_inplace_or"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_power", "nb_inplace_power"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_remainder", "nb_inplace_remainder"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_rshift", "nb_inplace_rshift"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_subtract", "nb_inplace_subtract"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_true_divide", "nb_inplace_true_divide"], [63, 0, 1, "c.PyNumberMethods.nb_inplace_xor", "nb_inplace_xor"], [63, 0, 1, "c.PyNumberMethods.nb_int", "nb_int"], [63, 0, 1, "c.PyNumberMethods.nb_invert", "nb_invert"], [63, 0, 1, "c.PyNumberMethods.nb_lshift", "nb_lshift"], [63, 0, 1, "c.PyNumberMethods.nb_matrix_multiply", "nb_matrix_multiply"], [63, 0, 1, "c.PyNumberMethods.nb_multiply", "nb_multiply"], [63, 0, 1, "c.PyNumberMethods.nb_negative", "nb_negative"], [63, 0, 1, "c.PyNumberMethods.nb_or", "nb_or"], [63, 0, 1, "c.PyNumberMethods.nb_positive", "nb_positive"], [63, 0, 1, "c.PyNumberMethods.nb_power", "nb_power"], [63, 0, 1, "c.PyNumberMethods.nb_remainder", "nb_remainder"], [63, 0, 1, "c.PyNumberMethods.nb_reserved", "nb_reserved"], [63, 0, 1, "c.PyNumberMethods.nb_rshift", "nb_rshift"], [63, 0, 1, "c.PyNumberMethods.nb_subtract", "nb_subtract"], [63, 0, 1, "c.PyNumberMethods.nb_true_divide", "nb_true_divide"], [63, 0, 1, "c.PyNumberMethods.nb_xor", "nb_xor"]], "PyNumber_Absolute": [[47, 3, 1, "c.PyNumber_Absolute", "o"]], "PyNumber_Add": [[47, 3, 1, "c.PyNumber_Add", "o1"], [47, 3, 1, "c.PyNumber_Add", "o2"]], "PyNumber_And": [[47, 3, 1, "c.PyNumber_And", "o1"], [47, 3, 1, "c.PyNumber_And", "o2"]], "PyNumber_AsSsize_t": [[47, 3, 1, "c.PyNumber_AsSsize_t", "exc"], [47, 3, 1, "c.PyNumber_AsSsize_t", "o"]], "PyNumber_Check": [[47, 3, 1, "c.PyNumber_Check", "o"]], "PyNumber_Divmod": [[47, 3, 1, "c.PyNumber_Divmod", "o1"], [47, 3, 1, "c.PyNumber_Divmod", "o2"]], "PyNumber_Float": [[47, 3, 1, "c.PyNumber_Float", "o"]], "PyNumber_FloorDivide": [[47, 3, 1, "c.PyNumber_FloorDivide", "o1"], [47, 3, 1, "c.PyNumber_FloorDivide", "o2"]], "PyNumber_InPlaceAdd": [[47, 3, 1, "c.PyNumber_InPlaceAdd", "o1"], [47, 3, 1, "c.PyNumber_InPlaceAdd", "o2"]], "PyNumber_InPlaceAnd": [[47, 3, 1, "c.PyNumber_InPlaceAnd", "o1"], [47, 3, 1, "c.PyNumber_InPlaceAnd", "o2"]], "PyNumber_InPlaceFloorDivide": [[47, 3, 1, "c.PyNumber_InPlaceFloorDivide", "o1"], [47, 3, 1, "c.PyNumber_InPlaceFloorDivide", "o2"]], "PyNumber_InPlaceLshift": [[47, 3, 1, "c.PyNumber_InPlaceLshift", "o1"], [47, 3, 1, "c.PyNumber_InPlaceLshift", "o2"]], "PyNumber_InPlaceMatrixMultiply": [[47, 3, 1, "c.PyNumber_InPlaceMatrixMultiply", "o1"], [47, 3, 1, "c.PyNumber_InPlaceMatrixMultiply", "o2"]], "PyNumber_InPlaceMultiply": [[47, 3, 1, "c.PyNumber_InPlaceMultiply", "o1"], [47, 3, 1, "c.PyNumber_InPlaceMultiply", "o2"]], "PyNumber_InPlaceOr": [[47, 3, 1, "c.PyNumber_InPlaceOr", "o1"], [47, 3, 1, "c.PyNumber_InPlaceOr", "o2"]], "PyNumber_InPlacePower": [[47, 3, 1, "c.PyNumber_InPlacePower", "o1"], [47, 3, 1, "c.PyNumber_InPlacePower", "o2"], [47, 3, 1, "c.PyNumber_InPlacePower", "o3"]], "PyNumber_InPlaceRemainder": [[47, 3, 1, "c.PyNumber_InPlaceRemainder", "o1"], [47, 3, 1, "c.PyNumber_InPlaceRemainder", "o2"]], "PyNumber_InPlaceRshift": [[47, 3, 1, "c.PyNumber_InPlaceRshift", "o1"], [47, 3, 1, "c.PyNumber_InPlaceRshift", "o2"]], "PyNumber_InPlaceSubtract": [[47, 3, 1, "c.PyNumber_InPlaceSubtract", "o1"], [47, 3, 1, "c.PyNumber_InPlaceSubtract", "o2"]], "PyNumber_InPlaceTrueDivide": [[47, 3, 1, "c.PyNumber_InPlaceTrueDivide", "o1"], [47, 3, 1, "c.PyNumber_InPlaceTrueDivide", "o2"]], "PyNumber_InPlaceXor": [[47, 3, 1, "c.PyNumber_InPlaceXor", "o1"], [47, 3, 1, "c.PyNumber_InPlaceXor", "o2"]], "PyNumber_Index": [[47, 3, 1, "c.PyNumber_Index", "o"]], "PyNumber_Invert": [[47, 3, 1, "c.PyNumber_Invert", "o"]], "PyNumber_Long": [[47, 3, 1, "c.PyNumber_Long", "o"]], "PyNumber_Lshift": [[47, 3, 1, "c.PyNumber_Lshift", "o1"], [47, 3, 1, "c.PyNumber_Lshift", "o2"]], "PyNumber_MatrixMultiply": [[47, 3, 1, "c.PyNumber_MatrixMultiply", "o1"], [47, 3, 1, "c.PyNumber_MatrixMultiply", "o2"]], "PyNumber_Multiply": [[47, 3, 1, "c.PyNumber_Multiply", "o1"], [47, 3, 1, "c.PyNumber_Multiply", "o2"]], "PyNumber_Negative": [[47, 3, 1, "c.PyNumber_Negative", "o"]], "PyNumber_Or": [[47, 3, 1, "c.PyNumber_Or", "o1"], [47, 3, 1, "c.PyNumber_Or", "o2"]], "PyNumber_Positive": [[47, 3, 1, "c.PyNumber_Positive", "o"]], "PyNumber_Power": [[47, 3, 1, "c.PyNumber_Power", "o1"], [47, 3, 1, "c.PyNumber_Power", "o2"], [47, 3, 1, "c.PyNumber_Power", "o3"]], "PyNumber_Remainder": [[47, 3, 1, "c.PyNumber_Remainder", "o1"], [47, 3, 1, "c.PyNumber_Remainder", "o2"]], "PyNumber_Rshift": [[47, 3, 1, "c.PyNumber_Rshift", "o1"], [47, 3, 1, "c.PyNumber_Rshift", "o2"]], "PyNumber_Subtract": [[47, 3, 1, "c.PyNumber_Subtract", "o1"], [47, 3, 1, "c.PyNumber_Subtract", "o2"]], "PyNumber_ToBase": [[47, 3, 1, "c.PyNumber_ToBase", "base"], [47, 3, 1, "c.PyNumber_ToBase", "n"]], "PyNumber_TrueDivide": [[47, 3, 1, "c.PyNumber_TrueDivide", "o1"], [47, 3, 1, "c.PyNumber_TrueDivide", "o2"]], "PyNumber_Xor": [[47, 3, 1, "c.PyNumber_Xor", "o1"], [47, 3, 1, "c.PyNumber_Xor", "o2"]], "PyOS_FSPath": [[59, 3, 1, "c.PyOS_FSPath", "path"]], "PyOS_double_to_string": [[18, 3, 1, "c.PyOS_double_to_string", "flags"], [18, 3, 1, "c.PyOS_double_to_string", "format_code"], [18, 3, 1, "c.PyOS_double_to_string", "precision"], [18, 3, 1, "c.PyOS_double_to_string", "ptype"], [18, 3, 1, "c.PyOS_double_to_string", "val"]], "PyOS_getsig": [[59, 3, 1, "c.PyOS_getsig", "i"]], "PyOS_setsig": [[59, 3, 1, "c.PyOS_setsig", "h"], [59, 3, 1, "c.PyOS_setsig", "i"]], "PyOS_snprintf": [[18, 3, 1, "c.PyOS_snprintf", "format"], [18, 3, 1, "c.PyOS_snprintf", "size"], [18, 3, 1, "c.PyOS_snprintf", "str"]], "PyOS_stricmp": [[18, 3, 1, "c.PyOS_stricmp", "s1"], [18, 3, 1, "c.PyOS_stricmp", "s2"]], "PyOS_string_to_double": [[18, 3, 1, "c.PyOS_string_to_double", "endptr"], [18, 3, 1, "c.PyOS_string_to_double", "overflow_exception"], [18, 3, 1, "c.PyOS_string_to_double", "s"]], "PyOS_strnicmp": [[18, 3, 1, "c.PyOS_strnicmp", "s1"], [18, 3, 1, "c.PyOS_strnicmp", "s2"], [18, 3, 1, "c.PyOS_strnicmp", "size"]], "PyOS_strtol": [[18, 3, 1, "c.PyOS_strtol", "base"], [18, 3, 1, "c.PyOS_strtol", "ptr"], [18, 3, 1, "c.PyOS_strtol", "str"]], "PyOS_strtoul": [[18, 3, 1, "c.PyOS_strtoul", "base"], [18, 3, 1, "c.PyOS_strtoul", "ptr"], [18, 3, 1, "c.PyOS_strtoul", "str"]], "PyOS_vsnprintf": [[18, 3, 1, "c.PyOS_vsnprintf", "format"], [18, 3, 1, "c.PyOS_vsnprintf", "size"], [18, 3, 1, "c.PyOS_vsnprintf", "str"], [18, 3, 1, "c.PyOS_vsnprintf", "va"]], "PyObject": [[63, 0, 1, "c.PyObject._ob_next", "_ob_next"], [63, 0, 1, "c.PyObject._ob_prev", "_ob_prev"], [63, 0, 1, "c.PyObject.ob_refcnt", "ob_refcnt"], [63, 0, 1, "c.PyObject.ob_type", "ob_type"]], "PyObject_ASCII": [[49, 3, 1, "c.PyObject_ASCII", "o"]], "PyObject_AsCharBuffer": [[48, 3, 1, "c.PyObject_AsCharBuffer", "buffer"], [48, 3, 1, "c.PyObject_AsCharBuffer", "buffer_len"], [48, 3, 1, "c.PyObject_AsCharBuffer", "obj"]], "PyObject_AsFileDescriptor": [[24, 3, 1, "c.PyObject_AsFileDescriptor", "p"]], "PyObject_AsReadBuffer": [[48, 3, 1, "c.PyObject_AsReadBuffer", "buffer"], [48, 3, 1, "c.PyObject_AsReadBuffer", "buffer_len"], [48, 3, 1, "c.PyObject_AsReadBuffer", "obj"]], "PyObject_AsWriteBuffer": [[48, 3, 1, "c.PyObject_AsWriteBuffer", "buffer"], [48, 3, 1, "c.PyObject_AsWriteBuffer", "buffer_len"], [48, 3, 1, "c.PyObject_AsWriteBuffer", "obj"]], "PyObject_Bytes": [[49, 3, 1, "c.PyObject_Bytes", "o"]], "PyObject_Call": [[10, 3, 1, "c.PyObject_Call", "args"], [10, 3, 1, "c.PyObject_Call", "callable"], [10, 3, 1, "c.PyObject_Call", "kwargs"]], "PyObject_CallFunction": [[10, 3, 1, "c.PyObject_CallFunction", "callable"], [10, 3, 1, "c.PyObject_CallFunction", "format"]], "PyObject_CallFunctionObjArgs": [[10, 3, 1, "c.PyObject_CallFunctionObjArgs", "callable"]], "PyObject_CallMethod": [[10, 3, 1, "c.PyObject_CallMethod", "format"], [10, 3, 1, "c.PyObject_CallMethod", "name"], [10, 3, 1, "c.PyObject_CallMethod", "obj"]], "PyObject_CallMethodNoArgs": [[10, 3, 1, "c.PyObject_CallMethodNoArgs", "name"], [10, 3, 1, "c.PyObject_CallMethodNoArgs", "obj"]], "PyObject_CallMethodObjArgs": [[10, 3, 1, "c.PyObject_CallMethodObjArgs", "name"], [10, 3, 1, "c.PyObject_CallMethodObjArgs", "obj"]], "PyObject_CallMethodOneArg": [[10, 3, 1, "c.PyObject_CallMethodOneArg", "arg"], [10, 3, 1, "c.PyObject_CallMethodOneArg", "name"], [10, 3, 1, "c.PyObject_CallMethodOneArg", "obj"]], "PyObject_CallNoArgs": [[10, 3, 1, "c.PyObject_CallNoArgs", "callable"]], "PyObject_CallObject": [[10, 3, 1, "c.PyObject_CallObject", "args"], [10, 3, 1, "c.PyObject_CallObject", "callable"]], "PyObject_CallOneArg": [[10, 3, 1, "c.PyObject_CallOneArg", "arg"], [10, 3, 1, "c.PyObject_CallOneArg", "callable"]], "PyObject_Calloc": [[42, 3, 1, "c.PyObject_Calloc", "elsize"], [42, 3, 1, "c.PyObject_Calloc", "nelem"]], "PyObject_CheckBuffer": [[7, 3, 1, "c.PyObject_CheckBuffer", "obj"]], "PyObject_CheckReadBuffer": [[48, 3, 1, "c.PyObject_CheckReadBuffer", "o"]], "PyObject_ClearWeakRefs": [[67, 3, 1, "c.PyObject_ClearWeakRefs", "object"]], "PyObject_CopyData": [[7, 3, 1, "c.PyObject_CopyData", "dest"], [7, 3, 1, "c.PyObject_CopyData", "src"]], "PyObject_Del": [[3, 3, 1, "c.PyObject_Del", "op"]], "PyObject_DelAttr": [[49, 3, 1, "c.PyObject_DelAttr", "attr_name"], [49, 3, 1, "c.PyObject_DelAttr", "o"]], "PyObject_DelAttrString": [[49, 3, 1, "c.PyObject_DelAttrString", "attr_name"], [49, 3, 1, "c.PyObject_DelAttrString", "o"]], "PyObject_DelItem": [[49, 3, 1, "c.PyObject_DelItem", "key"], [49, 3, 1, "c.PyObject_DelItem", "o"]], "PyObject_Dir": [[49, 3, 1, "c.PyObject_Dir", "o"]], "PyObject_Format": [[49, 3, 1, "c.PyObject_Format", "format_spec"], [49, 3, 1, "c.PyObject_Format", "obj"]], "PyObject_Free": [[42, 3, 1, "c.PyObject_Free", "p"]], "PyObject_GC_Del": [[28, 3, 1, "c.PyObject_GC_Del", "op"]], "PyObject_GC_IsFinalized": [[28, 3, 1, "c.PyObject_GC_IsFinalized", "op"]], "PyObject_GC_IsTracked": [[28, 3, 1, "c.PyObject_GC_IsTracked", "op"]], "PyObject_GC_Track": [[28, 3, 1, "c.PyObject_GC_Track", "op"]], "PyObject_GC_UnTrack": [[28, 3, 1, "c.PyObject_GC_UnTrack", "op"]], "PyObject_GenericGetAttr": [[49, 3, 1, "c.PyObject_GenericGetAttr", "name"], [49, 3, 1, "c.PyObject_GenericGetAttr", "o"]], "PyObject_GenericGetDict": [[49, 3, 1, "c.PyObject_GenericGetDict", "context"], [49, 3, 1, "c.PyObject_GenericGetDict", "o"]], "PyObject_GenericSetAttr": [[49, 3, 1, "c.PyObject_GenericSetAttr", "name"], [49, 3, 1, "c.PyObject_GenericSetAttr", "o"], [49, 3, 1, "c.PyObject_GenericSetAttr", "value"]], "PyObject_GenericSetDict": [[49, 3, 1, "c.PyObject_GenericSetDict", "context"], [49, 3, 1, "c.PyObject_GenericSetDict", "o"], [49, 3, 1, "c.PyObject_GenericSetDict", "value"]], "PyObject_GetAIter": [[49, 3, 1, "c.PyObject_GetAIter", "o"]], "PyObject_GetArenaAllocator": [[42, 3, 1, "c.PyObject_GetArenaAllocator", "allocator"]], "PyObject_GetAttr": [[49, 3, 1, "c.PyObject_GetAttr", "attr_name"], [49, 3, 1, "c.PyObject_GetAttr", "o"]], "PyObject_GetAttrString": [[49, 3, 1, "c.PyObject_GetAttrString", "attr_name"], [49, 3, 1, "c.PyObject_GetAttrString", "o"]], "PyObject_GetBuffer": [[7, 3, 1, "c.PyObject_GetBuffer", "exporter"], [7, 3, 1, "c.PyObject_GetBuffer", "flags"], [7, 3, 1, "c.PyObject_GetBuffer", "view"]], "PyObject_GetItem": [[49, 3, 1, "c.PyObject_GetItem", "key"], [49, 3, 1, "c.PyObject_GetItem", "o"]], "PyObject_GetItemData": [[49, 3, 1, "c.PyObject_GetItemData", "o"]], "PyObject_GetIter": [[49, 3, 1, "c.PyObject_GetIter", "o"]], "PyObject_GetTypeData": [[49, 3, 1, "c.PyObject_GetTypeData", "cls"], [49, 3, 1, "c.PyObject_GetTypeData", "o"]], "PyObject_HasAttr": [[49, 3, 1, "c.PyObject_HasAttr", "attr_name"], [49, 3, 1, "c.PyObject_HasAttr", "o"]], "PyObject_HasAttrString": [[49, 3, 1, "c.PyObject_HasAttrString", "attr_name"], [49, 3, 1, "c.PyObject_HasAttrString", "o"]], "PyObject_Hash": [[49, 3, 1, "c.PyObject_Hash", "o"]], "PyObject_HashNotImplemented": [[49, 3, 1, "c.PyObject_HashNotImplemented", "o"]], "PyObject_IS_GC": [[28, 3, 1, "c.PyObject_IS_GC", "obj"]], "PyObject_Init": [[3, 3, 1, "c.PyObject_Init", "op"], [3, 3, 1, "c.PyObject_Init", "type"]], "PyObject_InitVar": [[3, 3, 1, "c.PyObject_InitVar", "op"], [3, 3, 1, "c.PyObject_InitVar", "size"], [3, 3, 1, "c.PyObject_InitVar", "type"]], "PyObject_IsInstance": [[49, 3, 1, "c.PyObject_IsInstance", "cls"], [49, 3, 1, "c.PyObject_IsInstance", "inst"]], "PyObject_IsSubclass": [[49, 3, 1, "c.PyObject_IsSubclass", "cls"], [49, 3, 1, "c.PyObject_IsSubclass", "derived"]], "PyObject_IsTrue": [[49, 3, 1, "c.PyObject_IsTrue", "o"]], "PyObject_Length": [[49, 3, 1, "c.PyObject_Length", "o"]], "PyObject_LengthHint": [[49, 3, 1, "c.PyObject_LengthHint", "defaultvalue"], [49, 3, 1, "c.PyObject_LengthHint", "o"]], "PyObject_Malloc": [[42, 3, 1, "c.PyObject_Malloc", "n"]], "PyObject_Not": [[49, 3, 1, "c.PyObject_Not", "o"]], "PyObject_Print": [[49, 3, 1, "c.PyObject_Print", "flags"], [49, 3, 1, "c.PyObject_Print", "fp"], [49, 3, 1, "c.PyObject_Print", "o"]], "PyObject_Realloc": [[42, 3, 1, "c.PyObject_Realloc", "n"], [42, 3, 1, "c.PyObject_Realloc", "p"]], "PyObject_Repr": [[49, 3, 1, "c.PyObject_Repr", "o"]], "PyObject_RichCompare": [[49, 3, 1, "c.PyObject_RichCompare", "o1"], [49, 3, 1, "c.PyObject_RichCompare", "o2"], [49, 3, 1, "c.PyObject_RichCompare", "opid"]], "PyObject_RichCompareBool": [[49, 3, 1, "c.PyObject_RichCompareBool", "o1"], [49, 3, 1, "c.PyObject_RichCompareBool", "o2"], [49, 3, 1, "c.PyObject_RichCompareBool", "opid"]], "PyObject_SetArenaAllocator": [[42, 3, 1, "c.PyObject_SetArenaAllocator", "allocator"]], "PyObject_SetAttr": [[49, 3, 1, "c.PyObject_SetAttr", "attr_name"], [49, 3, 1, "c.PyObject_SetAttr", "o"], [49, 3, 1, "c.PyObject_SetAttr", "v"]], "PyObject_SetAttrString": [[49, 3, 1, "c.PyObject_SetAttrString", "attr_name"], [49, 3, 1, "c.PyObject_SetAttrString", "o"], [49, 3, 1, "c.PyObject_SetAttrString", "v"]], "PyObject_SetItem": [[49, 3, 1, "c.PyObject_SetItem", "key"], [49, 3, 1, "c.PyObject_SetItem", "o"], [49, 3, 1, "c.PyObject_SetItem", "v"]], "PyObject_Size": [[49, 3, 1, "c.PyObject_Size", "o"]], "PyObject_Str": [[49, 3, 1, "c.PyObject_Str", "o"]], "PyObject_Type": [[49, 3, 1, "c.PyObject_Type", "o"]], "PyObject_TypeCheck": [[49, 3, 1, "c.PyObject_TypeCheck", "o"], [49, 3, 1, "c.PyObject_TypeCheck", "type"]], "PyObject_Vectorcall": [[10, 3, 1, "c.PyObject_Vectorcall", "args"], [10, 3, 1, "c.PyObject_Vectorcall", "callable"], [10, 3, 1, "c.PyObject_Vectorcall", "kwnames"], [10, 3, 1, "c.PyObject_Vectorcall", "nargsf"]], "PyObject_VectorcallDict": [[10, 3, 1, "c.PyObject_VectorcallDict", "args"], [10, 3, 1, "c.PyObject_VectorcallDict", "callable"], [10, 3, 1, "c.PyObject_VectorcallDict", "kwdict"], [10, 3, 1, "c.PyObject_VectorcallDict", "nargsf"]], "PyObject_VectorcallMethod": [[10, 3, 1, "c.PyObject_VectorcallMethod", "args"], [10, 3, 1, "c.PyObject_VectorcallMethod", "kwnames"], [10, 3, 1, "c.PyObject_VectorcallMethod", "name"], [10, 3, 1, "c.PyObject_VectorcallMethod", "nargsf"]], "PyPreConfig": [[34, 0, 1, "c.PyPreConfig.allocator", "allocator"], [34, 0, 1, "c.PyPreConfig.coerce_c_locale", "coerce_c_locale"], [34, 0, 1, "c.PyPreConfig.coerce_c_locale_warn", "coerce_c_locale_warn"], [34, 0, 1, "c.PyPreConfig.configure_locale", "configure_locale"], [34, 0, 1, "c.PyPreConfig.dev_mode", "dev_mode"], [34, 0, 1, "c.PyPreConfig.isolated", "isolated"], [34, 0, 1, "c.PyPreConfig.legacy_windows_fs_encoding", "legacy_windows_fs_encoding"], [34, 0, 1, "c.PyPreConfig.parse_argv", "parse_argv"], [34, 0, 1, "c.PyPreConfig.use_environment", "use_environment"], [34, 0, 1, "c.PyPreConfig.utf8_mode", "utf8_mode"]], "PyPreConfig_InitIsolatedConfig": [[34, 3, 1, "c.PyPreConfig_InitIsolatedConfig", "preconfig"]], "PyPreConfig_InitPythonConfig": [[34, 3, 1, "c.PyPreConfig_InitPythonConfig", "preconfig"]], "PyRun_AnyFile": [[66, 3, 1, "c.PyRun_AnyFile", "filename"], [66, 3, 1, "c.PyRun_AnyFile", "fp"]], "PyRun_AnyFileEx": [[66, 3, 1, "c.PyRun_AnyFileEx", "closeit"], [66, 3, 1, "c.PyRun_AnyFileEx", "filename"], [66, 3, 1, "c.PyRun_AnyFileEx", "fp"]], "PyRun_AnyFileExFlags": [[66, 3, 1, "c.PyRun_AnyFileExFlags", "closeit"], [66, 3, 1, "c.PyRun_AnyFileExFlags", "filename"], [66, 3, 1, "c.PyRun_AnyFileExFlags", "flags"], [66, 3, 1, "c.PyRun_AnyFileExFlags", "fp"]], "PyRun_AnyFileFlags": [[66, 3, 1, "c.PyRun_AnyFileFlags", "filename"], [66, 3, 1, "c.PyRun_AnyFileFlags", "flags"], [66, 3, 1, "c.PyRun_AnyFileFlags", "fp"]], "PyRun_File": [[66, 3, 1, "c.PyRun_File", "filename"], [66, 3, 1, "c.PyRun_File", "fp"], [66, 3, 1, "c.PyRun_File", "globals"], [66, 3, 1, "c.PyRun_File", "locals"], [66, 3, 1, "c.PyRun_File", "start"]], "PyRun_FileEx": [[66, 3, 1, "c.PyRun_FileEx", "closeit"], [66, 3, 1, "c.PyRun_FileEx", "filename"], [66, 3, 1, "c.PyRun_FileEx", "fp"], [66, 3, 1, "c.PyRun_FileEx", "globals"], [66, 3, 1, "c.PyRun_FileEx", "locals"], [66, 3, 1, "c.PyRun_FileEx", "start"]], "PyRun_FileExFlags": [[66, 3, 1, "c.PyRun_FileExFlags", "closeit"], [66, 3, 1, "c.PyRun_FileExFlags", "filename"], [66, 3, 1, "c.PyRun_FileExFlags", "flags"], [66, 3, 1, "c.PyRun_FileExFlags", "fp"], [66, 3, 1, "c.PyRun_FileExFlags", "globals"], [66, 3, 1, "c.PyRun_FileExFlags", "locals"], [66, 3, 1, "c.PyRun_FileExFlags", "start"]], "PyRun_FileFlags": [[66, 3, 1, "c.PyRun_FileFlags", "filename"], [66, 3, 1, "c.PyRun_FileFlags", "flags"], [66, 3, 1, "c.PyRun_FileFlags", "fp"], [66, 3, 1, "c.PyRun_FileFlags", "globals"], [66, 3, 1, "c.PyRun_FileFlags", "locals"], [66, 3, 1, "c.PyRun_FileFlags", "start"]], "PyRun_InteractiveLoop": [[66, 3, 1, "c.PyRun_InteractiveLoop", "filename"], [66, 3, 1, "c.PyRun_InteractiveLoop", "fp"]], "PyRun_InteractiveLoopFlags": [[66, 3, 1, "c.PyRun_InteractiveLoopFlags", "filename"], [66, 3, 1, "c.PyRun_InteractiveLoopFlags", "flags"], [66, 3, 1, "c.PyRun_InteractiveLoopFlags", "fp"]], "PyRun_InteractiveOne": [[66, 3, 1, "c.PyRun_InteractiveOne", "filename"], [66, 3, 1, "c.PyRun_InteractiveOne", "fp"]], "PyRun_InteractiveOneFlags": [[66, 3, 1, "c.PyRun_InteractiveOneFlags", "filename"], [66, 3, 1, "c.PyRun_InteractiveOneFlags", "flags"], [66, 3, 1, "c.PyRun_InteractiveOneFlags", "fp"]], "PyRun_SimpleFile": [[66, 3, 1, "c.PyRun_SimpleFile", "filename"], [66, 3, 1, "c.PyRun_SimpleFile", "fp"]], "PyRun_SimpleFileEx": [[66, 3, 1, "c.PyRun_SimpleFileEx", "closeit"], [66, 3, 1, "c.PyRun_SimpleFileEx", "filename"], [66, 3, 1, "c.PyRun_SimpleFileEx", "fp"]], "PyRun_SimpleFileExFlags": [[66, 3, 1, "c.PyRun_SimpleFileExFlags", "closeit"], [66, 3, 1, "c.PyRun_SimpleFileExFlags", "filename"], [66, 3, 1, "c.PyRun_SimpleFileExFlags", "flags"], [66, 3, 1, "c.PyRun_SimpleFileExFlags", "fp"]], "PyRun_SimpleString": [[66, 3, 1, "c.PyRun_SimpleString", "command"]], "PyRun_SimpleStringFlags": [[66, 3, 1, "c.PyRun_SimpleStringFlags", "command"], [66, 3, 1, "c.PyRun_SimpleStringFlags", "flags"]], "PyRun_String": [[66, 3, 1, "c.PyRun_String", "globals"], [66, 3, 1, "c.PyRun_String", "locals"], [66, 3, 1, "c.PyRun_String", "start"], [66, 3, 1, "c.PyRun_String", "str"]], "PyRun_StringFlags": [[66, 3, 1, "c.PyRun_StringFlags", "flags"], [66, 3, 1, "c.PyRun_StringFlags", "globals"], [66, 3, 1, "c.PyRun_StringFlags", "locals"], [66, 3, 1, "c.PyRun_StringFlags", "start"], [66, 3, 1, "c.PyRun_StringFlags", "str"]], "PySeqIter_Check": [[37, 3, 1, "c.PySeqIter_Check", "op"]], "PySeqIter_New": [[37, 3, 1, "c.PySeqIter_New", "seq"]], "PySequenceMethods": [[63, 0, 1, "c.PySequenceMethods.sq_ass_item", "sq_ass_item"], [63, 0, 1, "c.PySequenceMethods.sq_concat", "sq_concat"], [63, 0, 1, "c.PySequenceMethods.sq_contains", "sq_contains"], [63, 0, 1, "c.PySequenceMethods.sq_inplace_concat", "sq_inplace_concat"], [63, 0, 1, "c.PySequenceMethods.sq_inplace_repeat", "sq_inplace_repeat"], [63, 0, 1, "c.PySequenceMethods.sq_item", "sq_item"], [63, 0, 1, "c.PySequenceMethods.sq_length", "sq_length"], [63, 0, 1, "c.PySequenceMethods.sq_repeat", "sq_repeat"]], "PySequence_Check": [[54, 3, 1, "c.PySequence_Check", "o"]], "PySequence_Concat": [[54, 3, 1, "c.PySequence_Concat", "o1"], [54, 3, 1, "c.PySequence_Concat", "o2"]], "PySequence_Contains": [[54, 3, 1, "c.PySequence_Contains", "o"], [54, 3, 1, "c.PySequence_Contains", "value"]], "PySequence_Count": [[54, 3, 1, "c.PySequence_Count", "o"], [54, 3, 1, "c.PySequence_Count", "value"]], "PySequence_DelItem": [[54, 3, 1, "c.PySequence_DelItem", "i"], [54, 3, 1, "c.PySequence_DelItem", "o"]], "PySequence_DelSlice": [[54, 3, 1, "c.PySequence_DelSlice", "i1"], [54, 3, 1, "c.PySequence_DelSlice", "i2"], [54, 3, 1, "c.PySequence_DelSlice", "o"]], "PySequence_Fast": [[54, 3, 1, "c.PySequence_Fast", "m"], [54, 3, 1, "c.PySequence_Fast", "o"]], "PySequence_Fast_GET_ITEM": [[54, 3, 1, "c.PySequence_Fast_GET_ITEM", "i"], [54, 3, 1, "c.PySequence_Fast_GET_ITEM", "o"]], "PySequence_Fast_GET_SIZE": [[54, 3, 1, "c.PySequence_Fast_GET_SIZE", "o"]], "PySequence_Fast_ITEMS": [[54, 3, 1, "c.PySequence_Fast_ITEMS", "o"]], "PySequence_GetItem": [[54, 3, 1, "c.PySequence_GetItem", "i"], [54, 3, 1, "c.PySequence_GetItem", "o"]], "PySequence_GetSlice": [[54, 3, 1, "c.PySequence_GetSlice", "i1"], [54, 3, 1, "c.PySequence_GetSlice", "i2"], [54, 3, 1, "c.PySequence_GetSlice", "o"]], "PySequence_ITEM": [[54, 3, 1, "c.PySequence_ITEM", "i"], [54, 3, 1, "c.PySequence_ITEM", "o"]], "PySequence_InPlaceConcat": [[54, 3, 1, "c.PySequence_InPlaceConcat", "o1"], [54, 3, 1, "c.PySequence_InPlaceConcat", "o2"]], "PySequence_InPlaceRepeat": [[54, 3, 1, "c.PySequence_InPlaceRepeat", "count"], [54, 3, 1, "c.PySequence_InPlaceRepeat", "o"]], "PySequence_Index": [[54, 3, 1, "c.PySequence_Index", "o"], [54, 3, 1, "c.PySequence_Index", "value"]], "PySequence_Length": [[54, 3, 1, "c.PySequence_Length", "o"]], "PySequence_List": [[54, 3, 1, "c.PySequence_List", "o"]], "PySequence_Repeat": [[54, 3, 1, "c.PySequence_Repeat", "count"], [54, 3, 1, "c.PySequence_Repeat", "o"]], "PySequence_SetItem": [[54, 3, 1, "c.PySequence_SetItem", "i"], [54, 3, 1, "c.PySequence_SetItem", "o"], [54, 3, 1, "c.PySequence_SetItem", "v"]], "PySequence_SetSlice": [[54, 3, 1, "c.PySequence_SetSlice", "i1"], [54, 3, 1, "c.PySequence_SetSlice", "i2"], [54, 3, 1, "c.PySequence_SetSlice", "o"], [54, 3, 1, "c.PySequence_SetSlice", "v"]], "PySequence_Size": [[54, 3, 1, "c.PySequence_Size", "o"]], "PySequence_Tuple": [[54, 3, 1, "c.PySequence_Tuple", "o"]], "PySet_Add": [[55, 3, 1, "c.PySet_Add", "key"], [55, 3, 1, "c.PySet_Add", "set"]], "PySet_Check": [[55, 3, 1, "c.PySet_Check", "p"]], "PySet_CheckExact": [[55, 3, 1, "c.PySet_CheckExact", "p"]], "PySet_Clear": [[55, 3, 1, "c.PySet_Clear", "set"]], "PySet_Contains": [[55, 3, 1, "c.PySet_Contains", "anyset"], [55, 3, 1, "c.PySet_Contains", "key"]], "PySet_Discard": [[55, 3, 1, "c.PySet_Discard", "key"], [55, 3, 1, "c.PySet_Discard", "set"]], "PySet_GET_SIZE": [[55, 3, 1, "c.PySet_GET_SIZE", "anyset"]], "PySet_New": [[55, 3, 1, "c.PySet_New", "iterable"]], "PySet_Pop": [[55, 3, 1, "c.PySet_Pop", "set"]], "PySet_Size": [[55, 3, 1, "c.PySet_Size", "anyset"]], "PySignal_SetWakeupFd": [[23, 3, 1, "c.PySignal_SetWakeupFd", "fd"]], "PySlice_AdjustIndices": [[56, 3, 1, "c.PySlice_AdjustIndices", "length"], [56, 3, 1, "c.PySlice_AdjustIndices", "start"], [56, 3, 1, "c.PySlice_AdjustIndices", "step"], [56, 3, 1, "c.PySlice_AdjustIndices", "stop"]], "PySlice_Check": [[56, 3, 1, "c.PySlice_Check", "ob"]], "PySlice_GetIndices": [[56, 3, 1, "c.PySlice_GetIndices", "length"], [56, 3, 1, "c.PySlice_GetIndices", "slice"], [56, 3, 1, "c.PySlice_GetIndices", "start"], [56, 3, 1, "c.PySlice_GetIndices", "step"], [56, 3, 1, "c.PySlice_GetIndices", "stop"]], "PySlice_GetIndicesEx": [[56, 3, 1, "c.PySlice_GetIndicesEx", "length"], [56, 3, 1, "c.PySlice_GetIndicesEx", "slice"], [56, 3, 1, "c.PySlice_GetIndicesEx", "slicelength"], [56, 3, 1, "c.PySlice_GetIndicesEx", "start"], [56, 3, 1, "c.PySlice_GetIndicesEx", "step"], [56, 3, 1, "c.PySlice_GetIndicesEx", "stop"]], "PySlice_New": [[56, 3, 1, "c.PySlice_New", "start"], [56, 3, 1, "c.PySlice_New", "step"], [56, 3, 1, "c.PySlice_New", "stop"]], "PySlice_Unpack": [[56, 3, 1, "c.PySlice_Unpack", "slice"], [56, 3, 1, "c.PySlice_Unpack", "start"], [56, 3, 1, "c.PySlice_Unpack", "step"], [56, 3, 1, "c.PySlice_Unpack", "stop"]], "PyState_AddModule": [[45, 3, 1, "c.PyState_AddModule", "def"], [45, 3, 1, "c.PyState_AddModule", "module"]], "PyState_FindModule": [[45, 3, 1, "c.PyState_FindModule", "def"]], "PyState_RemoveModule": [[45, 3, 1, "c.PyState_RemoveModule", "def"]], "PyStatus": [[34, 0, 1, "c.PyStatus.err_msg", "err_msg"], [34, 0, 1, "c.PyStatus.exitcode", "exitcode"], [34, 0, 1, "c.PyStatus.func", "func"]], "PyStatus_Error": [[34, 3, 1, "c.PyStatus_Error", "err_msg"]], "PyStatus_Exception": [[34, 3, 1, "c.PyStatus_Exception", "status"]], "PyStatus_Exit": [[34, 3, 1, "c.PyStatus_Exit", "exitcode"]], "PyStatus_IsError": [[34, 3, 1, "c.PyStatus_IsError", "status"]], "PyStatus_IsExit": [[34, 3, 1, "c.PyStatus_IsExit", "status"]], "PyStructSequence_Desc": [[60, 0, 1, "c.PyStructSequence_Desc.doc", "doc"], [60, 0, 1, "c.PyStructSequence_Desc.fields", "fields"], [60, 0, 1, "c.PyStructSequence_Desc.n_in_sequence", "n_in_sequence"], [60, 0, 1, "c.PyStructSequence_Desc.name", "name"]], "PyStructSequence_Field": [[60, 0, 1, "c.PyStructSequence_Field.doc", "doc"], [60, 0, 1, "c.PyStructSequence_Field.name", "name"]], "PyStructSequence_GET_ITEM": [[60, 3, 1, "c.PyStructSequence_GET_ITEM", "p"], [60, 3, 1, "c.PyStructSequence_GET_ITEM", "pos"]], "PyStructSequence_GetItem": [[60, 3, 1, "c.PyStructSequence_GetItem", "p"], [60, 3, 1, "c.PyStructSequence_GetItem", "pos"]], "PyStructSequence_InitType": [[60, 3, 1, "c.PyStructSequence_InitType", "desc"], [60, 3, 1, "c.PyStructSequence_InitType", "type"]], "PyStructSequence_InitType2": [[60, 3, 1, "c.PyStructSequence_InitType2", "desc"], [60, 3, 1, "c.PyStructSequence_InitType2", "type"]], "PyStructSequence_New": [[60, 3, 1, "c.PyStructSequence_New", "type"]], "PyStructSequence_NewType": [[60, 3, 1, "c.PyStructSequence_NewType", "desc"]], "PyStructSequence_SET_ITEM": [[60, 3, 1, "c.PyStructSequence_SET_ITEM", "o"], [60, 3, 1, "c.PyStructSequence_SET_ITEM", "p"], [60, 3, 1, "c.PyStructSequence_SET_ITEM", "pos"]], "PyStructSequence_SetItem": [[60, 3, 1, "c.PyStructSequence_SetItem", "o"], [60, 3, 1, "c.PyStructSequence_SetItem", "p"], [60, 3, 1, "c.PyStructSequence_SetItem", "pos"]], "PySys_AddAuditHook": [[59, 3, 1, "c.PySys_AddAuditHook", "hook"], [59, 3, 1, "c.PySys_AddAuditHook", "userData"]], "PySys_AddWarnOption": [[59, 3, 1, "c.PySys_AddWarnOption", "s"]], "PySys_AddWarnOptionUnicode": [[59, 3, 1, "c.PySys_AddWarnOptionUnicode", "unicode"]], "PySys_AddXOption": [[59, 3, 1, "c.PySys_AddXOption", "s"]], "PySys_Audit": [[59, 3, 1, "c.PySys_Audit", "event"], [59, 3, 1, "c.PySys_Audit", "format"]], "PySys_FormatStderr": [[59, 3, 1, "c.PySys_FormatStderr", "format"]], "PySys_FormatStdout": [[59, 3, 1, "c.PySys_FormatStdout", "format"]], "PySys_GetObject": [[59, 3, 1, "c.PySys_GetObject", "name"]], "PySys_SetArgv": [[33, 3, 1, "c.PySys_SetArgv", "argc"], [33, 3, 1, "c.PySys_SetArgv", "argv"]], "PySys_SetArgvEx": [[33, 3, 1, "c.PySys_SetArgvEx", "argc"], [33, 3, 1, "c.PySys_SetArgvEx", "argv"], [33, 3, 1, "c.PySys_SetArgvEx", "updatepath"]], "PySys_SetObject": [[59, 3, 1, "c.PySys_SetObject", "name"], [59, 3, 1, "c.PySys_SetObject", "v"]], "PySys_SetPath": [[59, 3, 1, "c.PySys_SetPath", "path"]], "PySys_WriteStderr": [[59, 3, 1, "c.PySys_WriteStderr", "format"]], "PySys_WriteStdout": [[59, 3, 1, "c.PySys_WriteStdout", "format"]], "PyTZInfo_Check": [[20, 3, 1, "c.PyTZInfo_Check", "ob"]], "PyTZInfo_CheckExact": [[20, 3, 1, "c.PyTZInfo_CheckExact", "ob"]], "PyThreadState": [[33, 0, 1, "c.PyThreadState.interp", "interp"]], "PyThreadState_Clear": [[33, 3, 1, "c.PyThreadState_Clear", "tstate"]], "PyThreadState_Delete": [[33, 3, 1, "c.PyThreadState_Delete", "tstate"]], "PyThreadState_EnterTracing": [[33, 3, 1, "c.PyThreadState_EnterTracing", "tstate"]], "PyThreadState_GetFrame": [[33, 3, 1, "c.PyThreadState_GetFrame", "tstate"]], "PyThreadState_GetID": [[33, 3, 1, "c.PyThreadState_GetID", "tstate"]], "PyThreadState_GetInterpreter": [[33, 3, 1, "c.PyThreadState_GetInterpreter", "tstate"]], "PyThreadState_LeaveTracing": [[33, 3, 1, "c.PyThreadState_LeaveTracing", "tstate"]], "PyThreadState_New": [[33, 3, 1, "c.PyThreadState_New", "interp"]], "PyThreadState_Next": [[33, 3, 1, "c.PyThreadState_Next", "tstate"]], "PyThreadState_SetAsyncExc": [[33, 3, 1, "c.PyThreadState_SetAsyncExc", "exc"], [33, 3, 1, "c.PyThreadState_SetAsyncExc", "id"]], "PyThreadState_Swap": [[33, 3, 1, "c.PyThreadState_Swap", "tstate"]], "PyThread_delete_key": [[33, 3, 1, "c.PyThread_delete_key", "key"]], "PyThread_delete_key_value": [[33, 3, 1, "c.PyThread_delete_key_value", "key"]], "PyThread_get_key_value": [[33, 3, 1, "c.PyThread_get_key_value", "key"]], "PyThread_set_key_value": [[33, 3, 1, "c.PyThread_set_key_value", "key"], [33, 3, 1, "c.PyThread_set_key_value", "value"]], "PyThread_tss_create": [[33, 3, 1, "c.PyThread_tss_create", "key"]], "PyThread_tss_delete": [[33, 3, 1, "c.PyThread_tss_delete", "key"]], "PyThread_tss_free": [[33, 3, 1, "c.PyThread_tss_free", "key"]], "PyThread_tss_get": [[33, 3, 1, "c.PyThread_tss_get", "key"]], "PyThread_tss_is_created": [[33, 3, 1, "c.PyThread_tss_is_created", "key"]], "PyThread_tss_set": [[33, 3, 1, "c.PyThread_tss_set", "key"], [33, 3, 1, "c.PyThread_tss_set", "value"]], "PyTimeZone_FromOffset": [[20, 3, 1, "c.PyTimeZone_FromOffset", "offset"]], "PyTimeZone_FromOffsetAndName": [[20, 3, 1, "c.PyTimeZone_FromOffsetAndName", "name"], [20, 3, 1, "c.PyTimeZone_FromOffsetAndName", "offset"]], "PyTime_Check": [[20, 3, 1, "c.PyTime_Check", "ob"]], "PyTime_CheckExact": [[20, 3, 1, "c.PyTime_CheckExact", "ob"]], "PyTime_FromTime": [[20, 3, 1, "c.PyTime_FromTime", "hour"], [20, 3, 1, "c.PyTime_FromTime", "minute"], [20, 3, 1, "c.PyTime_FromTime", "second"], [20, 3, 1, "c.PyTime_FromTime", "usecond"]], "PyTime_FromTimeAndFold": [[20, 3, 1, "c.PyTime_FromTimeAndFold", "fold"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "hour"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "minute"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "second"], [20, 3, 1, "c.PyTime_FromTimeAndFold", "usecond"]], "PyTraceMalloc_Track": [[42, 3, 1, "c.PyTraceMalloc_Track", "domain"], [42, 3, 1, "c.PyTraceMalloc_Track", "ptr"], [42, 3, 1, "c.PyTraceMalloc_Track", "size"]], "PyTraceMalloc_Untrack": [[42, 3, 1, "c.PyTraceMalloc_Untrack", "domain"], [42, 3, 1, "c.PyTraceMalloc_Untrack", "ptr"]], "PyTuple_Check": [[60, 3, 1, "c.PyTuple_Check", "p"]], "PyTuple_CheckExact": [[60, 3, 1, "c.PyTuple_CheckExact", "p"]], "PyTuple_GET_ITEM": [[60, 3, 1, "c.PyTuple_GET_ITEM", "p"], [60, 3, 1, "c.PyTuple_GET_ITEM", "pos"]], "PyTuple_GET_SIZE": [[60, 3, 1, "c.PyTuple_GET_SIZE", "p"]], "PyTuple_GetItem": [[60, 3, 1, "c.PyTuple_GetItem", "p"], [60, 3, 1, "c.PyTuple_GetItem", "pos"]], "PyTuple_GetSlice": [[60, 3, 1, "c.PyTuple_GetSlice", "high"], [60, 3, 1, "c.PyTuple_GetSlice", "low"], [60, 3, 1, "c.PyTuple_GetSlice", "p"]], "PyTuple_New": [[60, 3, 1, "c.PyTuple_New", "len"]], "PyTuple_Pack": [[60, 3, 1, "c.PyTuple_Pack", "n"]], "PyTuple_SET_ITEM": [[60, 3, 1, "c.PyTuple_SET_ITEM", "o"], [60, 3, 1, "c.PyTuple_SET_ITEM", "p"], [60, 3, 1, "c.PyTuple_SET_ITEM", "pos"]], "PyTuple_SetItem": [[60, 3, 1, "c.PyTuple_SetItem", "o"], [60, 3, 1, "c.PyTuple_SetItem", "p"], [60, 3, 1, "c.PyTuple_SetItem", "pos"]], "PyTuple_Size": [[60, 3, 1, "c.PyTuple_Size", "p"]], "PyTypeObject": [[63, 0, 1, "c.PyTypeObject.tp_alloc", "tp_alloc"], [63, 0, 1, "c.PyTypeObject.tp_as_async", "tp_as_async"], [63, 0, 1, "c.PyTypeObject.tp_as_buffer", "tp_as_buffer"], [63, 0, 1, "c.PyTypeObject.tp_as_mapping", "tp_as_mapping"], [63, 0, 1, "c.PyTypeObject.tp_as_number", "tp_as_number"], [63, 0, 1, "c.PyTypeObject.tp_as_sequence", "tp_as_sequence"], [63, 0, 1, "c.PyTypeObject.tp_base", "tp_base"], [63, 0, 1, "c.PyTypeObject.tp_bases", "tp_bases"], [63, 0, 1, "c.PyTypeObject.tp_basicsize", "tp_basicsize"], [63, 0, 1, "c.PyTypeObject.tp_cache", "tp_cache"], [63, 0, 1, "c.PyTypeObject.tp_call", "tp_call"], [63, 0, 1, "c.PyTypeObject.tp_clear", "tp_clear"], [63, 0, 1, "c.PyTypeObject.tp_dealloc", "tp_dealloc"], [63, 0, 1, "c.PyTypeObject.tp_del", "tp_del"], [63, 0, 1, "c.PyTypeObject.tp_descr_get", "tp_descr_get"], [63, 0, 1, "c.PyTypeObject.tp_descr_set", "tp_descr_set"], [63, 0, 1, "c.PyTypeObject.tp_dict", "tp_dict"], [63, 0, 1, "c.PyTypeObject.tp_dictoffset", "tp_dictoffset"], [63, 0, 1, "c.PyTypeObject.tp_doc", "tp_doc"], [63, 0, 1, "c.PyTypeObject.tp_finalize", "tp_finalize"], [63, 0, 1, "c.PyTypeObject.tp_flags", "tp_flags"], [63, 0, 1, "c.PyTypeObject.tp_free", "tp_free"], [63, 0, 1, "c.PyTypeObject.tp_getattr", "tp_getattr"], [63, 0, 1, "c.PyTypeObject.tp_getattro", "tp_getattro"], [63, 0, 1, "c.PyTypeObject.tp_getset", "tp_getset"], [63, 0, 1, "c.PyTypeObject.tp_hash", "tp_hash"], [63, 0, 1, "c.PyTypeObject.tp_init", "tp_init"], [63, 0, 1, "c.PyTypeObject.tp_is_gc", "tp_is_gc"], [63, 0, 1, "c.PyTypeObject.tp_itemsize", "tp_itemsize"], [63, 0, 1, "c.PyTypeObject.tp_iter", "tp_iter"], [63, 0, 1, "c.PyTypeObject.tp_iternext", "tp_iternext"], [63, 0, 1, "c.PyTypeObject.tp_members", "tp_members"], [63, 0, 1, "c.PyTypeObject.tp_methods", "tp_methods"], [63, 0, 1, "c.PyTypeObject.tp_mro", "tp_mro"], [63, 0, 1, "c.PyTypeObject.tp_name", "tp_name"], [63, 0, 1, "c.PyTypeObject.tp_new", "tp_new"], [63, 0, 1, "c.PyTypeObject.tp_repr", "tp_repr"], [63, 0, 1, "c.PyTypeObject.tp_richcompare", "tp_richcompare"], [63, 0, 1, "c.PyTypeObject.tp_setattr", "tp_setattr"], [63, 0, 1, "c.PyTypeObject.tp_setattro", "tp_setattro"], [63, 0, 1, "c.PyTypeObject.tp_str", "tp_str"], [63, 0, 1, "c.PyTypeObject.tp_subclasses", "tp_subclasses"], [63, 0, 1, "c.PyTypeObject.tp_traverse", "tp_traverse"], [63, 0, 1, "c.PyTypeObject.tp_vectorcall", "tp_vectorcall"], [63, 0, 1, "c.PyTypeObject.tp_vectorcall_offset", "tp_vectorcall_offset"], [63, 0, 1, "c.PyTypeObject.tp_version_tag", "tp_version_tag"], [63, 0, 1, "c.PyTypeObject.tp_watched", "tp_watched"], [63, 0, 1, "c.PyTypeObject.tp_weaklist", "tp_weaklist"], [63, 0, 1, "c.PyTypeObject.tp_weaklistoffset", "tp_weaklistoffset"]], "PyType_AddWatcher": [[61, 3, 1, "c.PyType_AddWatcher", "callback"]], "PyType_Check": [[61, 3, 1, "c.PyType_Check", "o"]], "PyType_CheckExact": [[61, 3, 1, "c.PyType_CheckExact", "o"]], "PyType_ClearWatcher": [[61, 3, 1, "c.PyType_ClearWatcher", "watcher_id"]], "PyType_FromMetaclass": [[61, 3, 1, "c.PyType_FromMetaclass", "bases"], [61, 3, 1, "c.PyType_FromMetaclass", "metaclass"], [61, 3, 1, "c.PyType_FromMetaclass", "module"], [61, 3, 1, "c.PyType_FromMetaclass", "spec"]], "PyType_FromModuleAndSpec": [[61, 3, 1, "c.PyType_FromModuleAndSpec", "bases"], [61, 3, 1, "c.PyType_FromModuleAndSpec", "module"], [61, 3, 1, "c.PyType_FromModuleAndSpec", "spec"]], "PyType_FromSpec": [[61, 3, 1, "c.PyType_FromSpec", "spec"]], "PyType_FromSpecWithBases": [[61, 3, 1, "c.PyType_FromSpecWithBases", "bases"], [61, 3, 1, "c.PyType_FromSpecWithBases", "spec"]], "PyType_GenericAlloc": [[61, 3, 1, "c.PyType_GenericAlloc", "nitems"], [61, 3, 1, "c.PyType_GenericAlloc", "type"]], "PyType_GenericNew": [[61, 3, 1, "c.PyType_GenericNew", "args"], [61, 3, 1, "c.PyType_GenericNew", "kwds"], [61, 3, 1, "c.PyType_GenericNew", "type"]], "PyType_GetDict": [[61, 3, 1, "c.PyType_GetDict", "type"]], "PyType_GetFlags": [[61, 3, 1, "c.PyType_GetFlags", "type"]], "PyType_GetModule": [[61, 3, 1, "c.PyType_GetModule", "type"]], "PyType_GetModuleByDef": [[61, 3, 1, "c.PyType_GetModuleByDef", "def"], [61, 3, 1, "c.PyType_GetModuleByDef", "type"]], "PyType_GetModuleState": [[61, 3, 1, "c.PyType_GetModuleState", "type"]], "PyType_GetName": [[61, 3, 1, "c.PyType_GetName", "type"]], "PyType_GetQualName": [[61, 3, 1, "c.PyType_GetQualName", "type"]], "PyType_GetSlot": [[61, 3, 1, "c.PyType_GetSlot", "slot"], [61, 3, 1, "c.PyType_GetSlot", "type"]], "PyType_GetTypeDataSize": [[49, 3, 1, "c.PyType_GetTypeDataSize", "cls"]], "PyType_HasFeature": [[61, 3, 1, "c.PyType_HasFeature", "feature"], [61, 3, 1, "c.PyType_HasFeature", "o"]], "PyType_IS_GC": [[61, 3, 1, "c.PyType_IS_GC", "o"]], "PyType_IsSubtype": [[61, 3, 1, "c.PyType_IsSubtype", "a"], [61, 3, 1, "c.PyType_IsSubtype", "b"]], "PyType_Modified": [[61, 3, 1, "c.PyType_Modified", "type"]], "PyType_Ready": [[61, 3, 1, "c.PyType_Ready", "type"]], "PyType_Slot": [[61, 0, 1, "c.PyType_Slot.pfunc", "pfunc"], [61, 0, 1, "c.PyType_Slot.slot", "slot"]], "PyType_Spec": [[61, 0, 1, "c.PyType_Spec.basicsize", "basicsize"], [61, 0, 1, "c.PyType_Spec.flags", "flags"], [61, 0, 1, "c.PyType_Spec.itemsize", "itemsize"], [61, 0, 1, "c.PyType_Spec.name", "name"], [61, 0, 1, "c.PyType_Spec.slots", "slots"]], "PyType_Watch": [[61, 3, 1, "c.PyType_Watch", "type"], [61, 3, 1, "c.PyType_Watch", "watcher_id"]], "PyUnicodeDecodeError_Create": [[23, 3, 1, "c.PyUnicodeDecodeError_Create", "encoding"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "end"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "length"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "object"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "reason"], [23, 3, 1, "c.PyUnicodeDecodeError_Create", "start"]], "PyUnicodeDecodeError_GetEncoding": [[23, 3, 1, "c.PyUnicodeDecodeError_GetEncoding", "exc"]], "PyUnicodeDecodeError_GetEnd": [[23, 3, 1, "c.PyUnicodeDecodeError_GetEnd", "end"], [23, 3, 1, "c.PyUnicodeDecodeError_GetEnd", "exc"]], "PyUnicodeDecodeError_GetObject": [[23, 3, 1, "c.PyUnicodeDecodeError_GetObject", "exc"]], "PyUnicodeDecodeError_GetReason": [[23, 3, 1, "c.PyUnicodeDecodeError_GetReason", "exc"]], "PyUnicodeDecodeError_GetStart": [[23, 3, 1, "c.PyUnicodeDecodeError_GetStart", "exc"], [23, 3, 1, "c.PyUnicodeDecodeError_GetStart", "start"]], "PyUnicodeDecodeError_SetEnd": [[23, 3, 1, "c.PyUnicodeDecodeError_SetEnd", "end"], [23, 3, 1, "c.PyUnicodeDecodeError_SetEnd", "exc"]], "PyUnicodeDecodeError_SetReason": [[23, 3, 1, "c.PyUnicodeDecodeError_SetReason", "exc"], [23, 3, 1, "c.PyUnicodeDecodeError_SetReason", "reason"]], "PyUnicodeDecodeError_SetStart": [[23, 3, 1, "c.PyUnicodeDecodeError_SetStart", "exc"], [23, 3, 1, "c.PyUnicodeDecodeError_SetStart", "start"]], "PyUnicodeEncodeError_GetEncoding": [[23, 3, 1, "c.PyUnicodeEncodeError_GetEncoding", "exc"]], "PyUnicodeEncodeError_GetEnd": [[23, 3, 1, "c.PyUnicodeEncodeError_GetEnd", "end"], [23, 3, 1, "c.PyUnicodeEncodeError_GetEnd", "exc"]], "PyUnicodeEncodeError_GetObject": [[23, 3, 1, "c.PyUnicodeEncodeError_GetObject", "exc"]], "PyUnicodeEncodeError_GetReason": [[23, 3, 1, "c.PyUnicodeEncodeError_GetReason", "exc"]], "PyUnicodeEncodeError_GetStart": [[23, 3, 1, "c.PyUnicodeEncodeError_GetStart", "exc"], [23, 3, 1, "c.PyUnicodeEncodeError_GetStart", "start"]], "PyUnicodeEncodeError_SetEnd": [[23, 3, 1, "c.PyUnicodeEncodeError_SetEnd", "end"], [23, 3, 1, "c.PyUnicodeEncodeError_SetEnd", "exc"]], "PyUnicodeEncodeError_SetReason": [[23, 3, 1, "c.PyUnicodeEncodeError_SetReason", "exc"], [23, 3, 1, "c.PyUnicodeEncodeError_SetReason", "reason"]], "PyUnicodeEncodeError_SetStart": [[23, 3, 1, "c.PyUnicodeEncodeError_SetStart", "exc"], [23, 3, 1, "c.PyUnicodeEncodeError_SetStart", "start"]], "PyUnicodeTranslateError_GetEnd": [[23, 3, 1, "c.PyUnicodeTranslateError_GetEnd", "end"], [23, 3, 1, "c.PyUnicodeTranslateError_GetEnd", "exc"]], "PyUnicodeTranslateError_GetObject": [[23, 3, 1, "c.PyUnicodeTranslateError_GetObject", "exc"]], "PyUnicodeTranslateError_GetReason": [[23, 3, 1, "c.PyUnicodeTranslateError_GetReason", "exc"]], "PyUnicodeTranslateError_GetStart": [[23, 3, 1, "c.PyUnicodeTranslateError_GetStart", "exc"], [23, 3, 1, "c.PyUnicodeTranslateError_GetStart", "start"]], "PyUnicodeTranslateError_SetEnd": [[23, 3, 1, "c.PyUnicodeTranslateError_SetEnd", "end"], [23, 3, 1, "c.PyUnicodeTranslateError_SetEnd", "exc"]], "PyUnicodeTranslateError_SetReason": [[23, 3, 1, "c.PyUnicodeTranslateError_SetReason", "exc"], [23, 3, 1, "c.PyUnicodeTranslateError_SetReason", "reason"]], "PyUnicodeTranslateError_SetStart": [[23, 3, 1, "c.PyUnicodeTranslateError_SetStart", "exc"], [23, 3, 1, "c.PyUnicodeTranslateError_SetStart", "start"]], "PyUnicode_1BYTE_DATA": [[64, 3, 1, "c.PyUnicode_1BYTE_DATA", "unicode"]], "PyUnicode_2BYTE_DATA": [[64, 3, 1, "c.PyUnicode_2BYTE_DATA", "unicode"]], "PyUnicode_4BYTE_DATA": [[64, 3, 1, "c.PyUnicode_4BYTE_DATA", "unicode"]], "PyUnicode_AsASCIIString": [[64, 3, 1, "c.PyUnicode_AsASCIIString", "unicode"]], "PyUnicode_AsCharmapString": [[64, 3, 1, "c.PyUnicode_AsCharmapString", "mapping"], [64, 3, 1, "c.PyUnicode_AsCharmapString", "unicode"]], "PyUnicode_AsEncodedString": [[64, 3, 1, "c.PyUnicode_AsEncodedString", "encoding"], [64, 3, 1, "c.PyUnicode_AsEncodedString", "errors"], [64, 3, 1, "c.PyUnicode_AsEncodedString", "unicode"]], "PyUnicode_AsLatin1String": [[64, 3, 1, "c.PyUnicode_AsLatin1String", "unicode"]], "PyUnicode_AsMBCSString": [[64, 3, 1, "c.PyUnicode_AsMBCSString", "unicode"]], "PyUnicode_AsRawUnicodeEscapeString": [[64, 3, 1, "c.PyUnicode_AsRawUnicodeEscapeString", "unicode"]], "PyUnicode_AsUCS4": [[64, 3, 1, "c.PyUnicode_AsUCS4", "buffer"], [64, 3, 1, "c.PyUnicode_AsUCS4", "buflen"], [64, 3, 1, "c.PyUnicode_AsUCS4", "copy_null"], [64, 3, 1, "c.PyUnicode_AsUCS4", "unicode"]], "PyUnicode_AsUCS4Copy": [[64, 3, 1, "c.PyUnicode_AsUCS4Copy", "unicode"]], "PyUnicode_AsUTF16String": [[64, 3, 1, "c.PyUnicode_AsUTF16String", "unicode"]], "PyUnicode_AsUTF32String": [[64, 3, 1, "c.PyUnicode_AsUTF32String", "unicode"]], "PyUnicode_AsUTF8": [[64, 3, 1, "c.PyUnicode_AsUTF8", "unicode"]], "PyUnicode_AsUTF8AndSize": [[64, 3, 1, "c.PyUnicode_AsUTF8AndSize", "size"], [64, 3, 1, "c.PyUnicode_AsUTF8AndSize", "unicode"]], "PyUnicode_AsUTF8String": [[64, 3, 1, "c.PyUnicode_AsUTF8String", "unicode"]], "PyUnicode_AsUnicodeEscapeString": [[64, 3, 1, "c.PyUnicode_AsUnicodeEscapeString", "unicode"]], "PyUnicode_AsWideChar": [[64, 3, 1, "c.PyUnicode_AsWideChar", "size"], [64, 3, 1, "c.PyUnicode_AsWideChar", "unicode"], [64, 3, 1, "c.PyUnicode_AsWideChar", "wstr"]], "PyUnicode_AsWideCharString": [[64, 3, 1, "c.PyUnicode_AsWideCharString", "size"], [64, 3, 1, "c.PyUnicode_AsWideCharString", "unicode"]], "PyUnicode_Check": [[64, 3, 1, "c.PyUnicode_Check", "obj"]], "PyUnicode_CheckExact": [[64, 3, 1, "c.PyUnicode_CheckExact", "obj"]], "PyUnicode_Compare": [[64, 3, 1, "c.PyUnicode_Compare", "left"], [64, 3, 1, "c.PyUnicode_Compare", "right"]], "PyUnicode_CompareWithASCIIString": [[64, 3, 1, "c.PyUnicode_CompareWithASCIIString", "string"], [64, 3, 1, "c.PyUnicode_CompareWithASCIIString", "unicode"]], "PyUnicode_Concat": [[64, 3, 1, "c.PyUnicode_Concat", "left"], [64, 3, 1, "c.PyUnicode_Concat", "right"]], "PyUnicode_Contains": [[64, 3, 1, "c.PyUnicode_Contains", "substr"], [64, 3, 1, "c.PyUnicode_Contains", "unicode"]], "PyUnicode_CopyCharacters": [[64, 3, 1, "c.PyUnicode_CopyCharacters", "from"], [64, 3, 1, "c.PyUnicode_CopyCharacters", "from_start"], [64, 3, 1, "c.PyUnicode_CopyCharacters", "how_many"], [64, 3, 1, "c.PyUnicode_CopyCharacters", "to"], [64, 3, 1, "c.PyUnicode_CopyCharacters", "to_start"]], "PyUnicode_Count": [[64, 3, 1, "c.PyUnicode_Count", "end"], [64, 3, 1, "c.PyUnicode_Count", "start"], [64, 3, 1, "c.PyUnicode_Count", "substr"], [64, 3, 1, "c.PyUnicode_Count", "unicode"]], "PyUnicode_DATA": [[64, 3, 1, "c.PyUnicode_DATA", "unicode"]], "PyUnicode_Decode": [[64, 3, 1, "c.PyUnicode_Decode", "encoding"], [64, 3, 1, "c.PyUnicode_Decode", "errors"], [64, 3, 1, "c.PyUnicode_Decode", "size"], [64, 3, 1, "c.PyUnicode_Decode", "str"]], "PyUnicode_DecodeASCII": [[64, 3, 1, "c.PyUnicode_DecodeASCII", "errors"], [64, 3, 1, "c.PyUnicode_DecodeASCII", "size"], [64, 3, 1, "c.PyUnicode_DecodeASCII", "str"]], "PyUnicode_DecodeCharmap": [[64, 3, 1, "c.PyUnicode_DecodeCharmap", "errors"], [64, 3, 1, "c.PyUnicode_DecodeCharmap", "length"], [64, 3, 1, "c.PyUnicode_DecodeCharmap", "mapping"], [64, 3, 1, "c.PyUnicode_DecodeCharmap", "str"]], "PyUnicode_DecodeFSDefault": [[64, 3, 1, "c.PyUnicode_DecodeFSDefault", "str"]], "PyUnicode_DecodeFSDefaultAndSize": [[64, 3, 1, "c.PyUnicode_DecodeFSDefaultAndSize", "size"], [64, 3, 1, "c.PyUnicode_DecodeFSDefaultAndSize", "str"]], "PyUnicode_DecodeLatin1": [[64, 3, 1, "c.PyUnicode_DecodeLatin1", "errors"], [64, 3, 1, "c.PyUnicode_DecodeLatin1", "size"], [64, 3, 1, "c.PyUnicode_DecodeLatin1", "str"]], "PyUnicode_DecodeLocale": [[64, 3, 1, "c.PyUnicode_DecodeLocale", "errors"], [64, 3, 1, "c.PyUnicode_DecodeLocale", "str"]], "PyUnicode_DecodeLocaleAndSize": [[64, 3, 1, "c.PyUnicode_DecodeLocaleAndSize", "errors"], [64, 3, 1, "c.PyUnicode_DecodeLocaleAndSize", "length"], [64, 3, 1, "c.PyUnicode_DecodeLocaleAndSize", "str"]], "PyUnicode_DecodeMBCS": [[64, 3, 1, "c.PyUnicode_DecodeMBCS", "errors"], [64, 3, 1, "c.PyUnicode_DecodeMBCS", "size"], [64, 3, 1, "c.PyUnicode_DecodeMBCS", "str"]], "PyUnicode_DecodeMBCSStateful": [[64, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "consumed"], [64, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "errors"], [64, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "size"], [64, 3, 1, "c.PyUnicode_DecodeMBCSStateful", "str"]], "PyUnicode_DecodeRawUnicodeEscape": [[64, 3, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "errors"], [64, 3, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "size"], [64, 3, 1, "c.PyUnicode_DecodeRawUnicodeEscape", "str"]], "PyUnicode_DecodeUTF16": [[64, 3, 1, "c.PyUnicode_DecodeUTF16", "byteorder"], [64, 3, 1, "c.PyUnicode_DecodeUTF16", "errors"], [64, 3, 1, "c.PyUnicode_DecodeUTF16", "size"], [64, 3, 1, "c.PyUnicode_DecodeUTF16", "str"]], "PyUnicode_DecodeUTF16Stateful": [[64, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "byteorder"], [64, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "consumed"], [64, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "errors"], [64, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "size"], [64, 3, 1, "c.PyUnicode_DecodeUTF16Stateful", "str"]], "PyUnicode_DecodeUTF32": [[64, 3, 1, "c.PyUnicode_DecodeUTF32", "byteorder"], [64, 3, 1, "c.PyUnicode_DecodeUTF32", "errors"], [64, 3, 1, "c.PyUnicode_DecodeUTF32", "size"], [64, 3, 1, "c.PyUnicode_DecodeUTF32", "str"]], "PyUnicode_DecodeUTF32Stateful": [[64, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "byteorder"], [64, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "consumed"], [64, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "errors"], [64, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "size"], [64, 3, 1, "c.PyUnicode_DecodeUTF32Stateful", "str"]], "PyUnicode_DecodeUTF7": [[64, 3, 1, "c.PyUnicode_DecodeUTF7", "errors"], [64, 3, 1, "c.PyUnicode_DecodeUTF7", "size"], [64, 3, 1, "c.PyUnicode_DecodeUTF7", "str"]], "PyUnicode_DecodeUTF7Stateful": [[64, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "consumed"], [64, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "errors"], [64, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "size"], [64, 3, 1, "c.PyUnicode_DecodeUTF7Stateful", "str"]], "PyUnicode_DecodeUTF8": [[64, 3, 1, "c.PyUnicode_DecodeUTF8", "errors"], [64, 3, 1, "c.PyUnicode_DecodeUTF8", "size"], [64, 3, 1, "c.PyUnicode_DecodeUTF8", "str"]], "PyUnicode_DecodeUTF8Stateful": [[64, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "consumed"], [64, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "errors"], [64, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "size"], [64, 3, 1, "c.PyUnicode_DecodeUTF8Stateful", "str"]], "PyUnicode_DecodeUnicodeEscape": [[64, 3, 1, "c.PyUnicode_DecodeUnicodeEscape", "errors"], [64, 3, 1, "c.PyUnicode_DecodeUnicodeEscape", "size"], [64, 3, 1, "c.PyUnicode_DecodeUnicodeEscape", "str"]], "PyUnicode_EncodeCodePage": [[64, 3, 1, "c.PyUnicode_EncodeCodePage", "code_page"], [64, 3, 1, "c.PyUnicode_EncodeCodePage", "errors"], [64, 3, 1, "c.PyUnicode_EncodeCodePage", "unicode"]], "PyUnicode_EncodeFSDefault": [[64, 3, 1, "c.PyUnicode_EncodeFSDefault", "unicode"]], "PyUnicode_EncodeLocale": [[64, 3, 1, "c.PyUnicode_EncodeLocale", "errors"], [64, 3, 1, "c.PyUnicode_EncodeLocale", "unicode"]], "PyUnicode_FSConverter": [[64, 3, 1, "c.PyUnicode_FSConverter", "obj"], [64, 3, 1, "c.PyUnicode_FSConverter", "result"]], "PyUnicode_FSDecoder": [[64, 3, 1, "c.PyUnicode_FSDecoder", "obj"], [64, 3, 1, "c.PyUnicode_FSDecoder", "result"]], "PyUnicode_Fill": [[64, 3, 1, "c.PyUnicode_Fill", "fill_char"], [64, 3, 1, "c.PyUnicode_Fill", "length"], [64, 3, 1, "c.PyUnicode_Fill", "start"], [64, 3, 1, "c.PyUnicode_Fill", "unicode"]], "PyUnicode_Find": [[64, 3, 1, "c.PyUnicode_Find", "direction"], [64, 3, 1, "c.PyUnicode_Find", "end"], [64, 3, 1, "c.PyUnicode_Find", "start"], [64, 3, 1, "c.PyUnicode_Find", "substr"], [64, 3, 1, "c.PyUnicode_Find", "unicode"]], "PyUnicode_FindChar": [[64, 3, 1, "c.PyUnicode_FindChar", "ch"], [64, 3, 1, "c.PyUnicode_FindChar", "direction"], [64, 3, 1, "c.PyUnicode_FindChar", "end"], [64, 3, 1, "c.PyUnicode_FindChar", "start"], [64, 3, 1, "c.PyUnicode_FindChar", "unicode"]], "PyUnicode_Format": [[64, 3, 1, "c.PyUnicode_Format", "args"], [64, 3, 1, "c.PyUnicode_Format", "format"]], "PyUnicode_FromEncodedObject": [[64, 3, 1, "c.PyUnicode_FromEncodedObject", "encoding"], [64, 3, 1, "c.PyUnicode_FromEncodedObject", "errors"], [64, 3, 1, "c.PyUnicode_FromEncodedObject", "obj"]], "PyUnicode_FromFormat": [[64, 3, 1, "c.PyUnicode_FromFormat", "format"]], "PyUnicode_FromFormatV": [[64, 3, 1, "c.PyUnicode_FromFormatV", "format"], [64, 3, 1, "c.PyUnicode_FromFormatV", "vargs"]], "PyUnicode_FromKindAndData": [[64, 3, 1, "c.PyUnicode_FromKindAndData", "buffer"], [64, 3, 1, "c.PyUnicode_FromKindAndData", "kind"], [64, 3, 1, "c.PyUnicode_FromKindAndData", "size"]], "PyUnicode_FromObject": [[64, 3, 1, "c.PyUnicode_FromObject", "obj"]], "PyUnicode_FromString": [[64, 3, 1, "c.PyUnicode_FromString", "str"]], "PyUnicode_FromStringAndSize": [[64, 3, 1, "c.PyUnicode_FromStringAndSize", "size"], [64, 3, 1, "c.PyUnicode_FromStringAndSize", "str"]], "PyUnicode_FromWideChar": [[64, 3, 1, "c.PyUnicode_FromWideChar", "size"], [64, 3, 1, "c.PyUnicode_FromWideChar", "wstr"]], "PyUnicode_GET_LENGTH": [[64, 3, 1, "c.PyUnicode_GET_LENGTH", "unicode"]], "PyUnicode_GetLength": [[64, 3, 1, "c.PyUnicode_GetLength", "unicode"]], "PyUnicode_InternFromString": [[64, 3, 1, "c.PyUnicode_InternFromString", "str"]], "PyUnicode_InternInPlace": [[64, 3, 1, "c.PyUnicode_InternInPlace", "p_unicode"]], "PyUnicode_IsIdentifier": [[64, 3, 1, "c.PyUnicode_IsIdentifier", "unicode"]], "PyUnicode_Join": [[64, 3, 1, "c.PyUnicode_Join", "separator"], [64, 3, 1, "c.PyUnicode_Join", "seq"]], "PyUnicode_KIND": [[64, 3, 1, "c.PyUnicode_KIND", "unicode"]], "PyUnicode_MAX_CHAR_VALUE": [[64, 3, 1, "c.PyUnicode_MAX_CHAR_VALUE", "unicode"]], "PyUnicode_New": [[64, 3, 1, "c.PyUnicode_New", "maxchar"], [64, 3, 1, "c.PyUnicode_New", "size"]], "PyUnicode_READ": [[64, 3, 1, "c.PyUnicode_READ", "data"], [64, 3, 1, "c.PyUnicode_READ", "index"], [64, 3, 1, "c.PyUnicode_READ", "kind"]], "PyUnicode_READY": [[64, 3, 1, "c.PyUnicode_READY", "unicode"]], "PyUnicode_READ_CHAR": [[64, 3, 1, "c.PyUnicode_READ_CHAR", "index"], [64, 3, 1, "c.PyUnicode_READ_CHAR", "unicode"]], "PyUnicode_ReadChar": [[64, 3, 1, "c.PyUnicode_ReadChar", "index"], [64, 3, 1, "c.PyUnicode_ReadChar", "unicode"]], "PyUnicode_Replace": [[64, 3, 1, "c.PyUnicode_Replace", "maxcount"], [64, 3, 1, "c.PyUnicode_Replace", "replstr"], [64, 3, 1, "c.PyUnicode_Replace", "substr"], [64, 3, 1, "c.PyUnicode_Replace", "unicode"]], "PyUnicode_RichCompare": [[64, 3, 1, "c.PyUnicode_RichCompare", "left"], [64, 3, 1, "c.PyUnicode_RichCompare", "op"], [64, 3, 1, "c.PyUnicode_RichCompare", "right"]], "PyUnicode_Split": [[64, 3, 1, "c.PyUnicode_Split", "maxsplit"], [64, 3, 1, "c.PyUnicode_Split", "sep"], [64, 3, 1, "c.PyUnicode_Split", "unicode"]], "PyUnicode_Splitlines": [[64, 3, 1, "c.PyUnicode_Splitlines", "keepends"], [64, 3, 1, "c.PyUnicode_Splitlines", "unicode"]], "PyUnicode_Substring": [[64, 3, 1, "c.PyUnicode_Substring", "end"], [64, 3, 1, "c.PyUnicode_Substring", "start"], [64, 3, 1, "c.PyUnicode_Substring", "unicode"]], "PyUnicode_Tailmatch": [[64, 3, 1, "c.PyUnicode_Tailmatch", "direction"], [64, 3, 1, "c.PyUnicode_Tailmatch", "end"], [64, 3, 1, "c.PyUnicode_Tailmatch", "start"], [64, 3, 1, "c.PyUnicode_Tailmatch", "substr"], [64, 3, 1, "c.PyUnicode_Tailmatch", "unicode"]], "PyUnicode_Translate": [[64, 3, 1, "c.PyUnicode_Translate", "errors"], [64, 3, 1, "c.PyUnicode_Translate", "table"], [64, 3, 1, "c.PyUnicode_Translate", "unicode"]], "PyUnicode_WRITE": [[64, 3, 1, "c.PyUnicode_WRITE", "data"], [64, 3, 1, "c.PyUnicode_WRITE", "index"], [64, 3, 1, "c.PyUnicode_WRITE", "kind"], [64, 3, 1, "c.PyUnicode_WRITE", "value"]], "PyUnicode_WriteChar": [[64, 3, 1, "c.PyUnicode_WriteChar", "character"], [64, 3, 1, "c.PyUnicode_WriteChar", "index"], [64, 3, 1, "c.PyUnicode_WriteChar", "unicode"]], "PyUnstable_Code_GetExtra": [[13, 3, 1, "c.PyUnstable_Code_GetExtra", "code"], [13, 3, 1, "c.PyUnstable_Code_GetExtra", "extra"], [13, 3, 1, "c.PyUnstable_Code_GetExtra", "index"]], "PyUnstable_Code_New": [[13, 3, 1, "c.PyUnstable_Code_New", "argcount"], [13, 3, 1, "c.PyUnstable_Code_New", "cellvars"], [13, 3, 1, "c.PyUnstable_Code_New", "code"], [13, 3, 1, "c.PyUnstable_Code_New", "consts"], [13, 3, 1, "c.PyUnstable_Code_New", "exceptiontable"], [13, 3, 1, "c.PyUnstable_Code_New", "filename"], [13, 3, 1, "c.PyUnstable_Code_New", "firstlineno"], [13, 3, 1, "c.PyUnstable_Code_New", "flags"], [13, 3, 1, "c.PyUnstable_Code_New", "freevars"], [13, 3, 1, "c.PyUnstable_Code_New", "kwonlyargcount"], [13, 3, 1, "c.PyUnstable_Code_New", "linetable"], [13, 3, 1, "c.PyUnstable_Code_New", "name"], [13, 3, 1, "c.PyUnstable_Code_New", "names"], [13, 3, 1, "c.PyUnstable_Code_New", "nlocals"], [13, 3, 1, "c.PyUnstable_Code_New", "qualname"], [13, 3, 1, "c.PyUnstable_Code_New", "stacksize"], [13, 3, 1, "c.PyUnstable_Code_New", "varnames"]], "PyUnstable_Code_NewWithPosOnlyArgs": [[13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "argcount"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "cellvars"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "code"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "consts"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "exceptiontable"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "filename"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "firstlineno"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "flags"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "freevars"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "kwonlyargcount"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "linetable"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "name"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "names"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "nlocals"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "posonlyargcount"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "qualname"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "stacksize"], [13, 3, 1, "c.PyUnstable_Code_NewWithPosOnlyArgs", "varnames"]], "PyUnstable_Code_SetExtra": [[13, 3, 1, "c.PyUnstable_Code_SetExtra", "code"], [13, 3, 1, "c.PyUnstable_Code_SetExtra", "extra"], [13, 3, 1, "c.PyUnstable_Code_SetExtra", "index"]], "PyUnstable_Eval_RequestCodeExtraIndex": [[13, 3, 1, "c.PyUnstable_Eval_RequestCodeExtraIndex", "free"]], "PyUnstable_Exc_PrepReraiseStar": [[23, 3, 1, "c.PyUnstable_Exc_PrepReraiseStar", "excs"], [23, 3, 1, "c.PyUnstable_Exc_PrepReraiseStar", "orig"]], "PyUnstable_GC_VisitObjects": [[28, 3, 1, "c.PyUnstable_GC_VisitObjects", "arg"], [28, 3, 1, "c.PyUnstable_GC_VisitObjects", "callback"]], "PyUnstable_InterpreterFrame_GetCode": [[26, 3, 1, "c.PyUnstable_InterpreterFrame_GetCode", "frame"]], "PyUnstable_InterpreterFrame_GetLasti": [[26, 3, 1, "c.PyUnstable_InterpreterFrame_GetLasti", "frame"]], "PyUnstable_InterpreterFrame_GetLine": [[26, 3, 1, "c.PyUnstable_InterpreterFrame_GetLine", "frame"]], "PyUnstable_Long_CompactValue": [[39, 3, 1, "c.PyUnstable_Long_CompactValue", "op"]], "PyUnstable_Long_IsCompact": [[39, 3, 1, "c.PyUnstable_Long_IsCompact", "op"]], "PyUnstable_Object_GC_NewWithExtraData": [[28, 3, 1, "c.PyUnstable_Object_GC_NewWithExtraData", "extra_size"], [28, 3, 1, "c.PyUnstable_Object_GC_NewWithExtraData", "type"]], "PyUnstable_Type_AssignVersionTag": [[61, 3, 1, "c.PyUnstable_Type_AssignVersionTag", "type"]], "PyUnstable_WritePerfMapEntry": [[51, 3, 1, "c.PyUnstable_WritePerfMapEntry", "code_addr"], [51, 3, 1, "c.PyUnstable_WritePerfMapEntry", "code_size"], [51, 3, 1, "c.PyUnstable_WritePerfMapEntry", "entry_name"]], "PyVarObject": [[63, 0, 1, "c.PyVarObject.ob_size", "ob_size"]], "PyVectorcall_Call": [[10, 3, 1, "c.PyVectorcall_Call", "callable"], [10, 3, 1, "c.PyVectorcall_Call", "dict"], [10, 3, 1, "c.PyVectorcall_Call", "tuple"]], "PyVectorcall_Function": [[10, 3, 1, "c.PyVectorcall_Function", "op"]], "PyVectorcall_NARGS": [[10, 3, 1, "c.PyVectorcall_NARGS", "nargsf"]], "PyWeakref_Check": [[67, 3, 1, "c.PyWeakref_Check", "ob"]], "PyWeakref_CheckProxy": [[67, 3, 1, "c.PyWeakref_CheckProxy", "ob"]], "PyWeakref_CheckRef": [[67, 3, 1, "c.PyWeakref_CheckRef", "ob"]], "PyWeakref_GET_OBJECT": [[67, 3, 1, "c.PyWeakref_GET_OBJECT", "ref"]], "PyWeakref_GetObject": [[67, 3, 1, "c.PyWeakref_GetObject", "ref"]], "PyWeakref_NewProxy": [[67, 3, 1, "c.PyWeakref_NewProxy", "callback"], [67, 3, 1, "c.PyWeakref_NewProxy", "ob"]], "PyWeakref_NewRef": [[67, 3, 1, "c.PyWeakref_NewRef", "callback"], [67, 3, 1, "c.PyWeakref_NewRef", "ob"]], "PyWideStringList": [[34, 0, 1, "c.PyWideStringList.items", "items"], [34, 0, 1, "c.PyWideStringList.length", "length"]], "PyWideStringList_Append": [[34, 3, 1, "c.PyWideStringList_Append", "item"], [34, 3, 1, "c.PyWideStringList_Append", "list"]], "PyWideStringList_Insert": [[34, 3, 1, "c.PyWideStringList_Insert", "index"], [34, 3, 1, "c.PyWideStringList_Insert", "item"], [34, 3, 1, "c.PyWideStringList_Insert", "list"]], "Py_AddPendingCall": [[33, 3, 1, "c.Py_AddPendingCall", "arg"], [33, 3, 1, "c.Py_AddPendingCall", "func"]], "Py_AtExit": [[59, 3, 1, "c.Py_AtExit", "func"]], "Py_BuildValue": [[5, 3, 1, "c.Py_BuildValue", "format"]], "Py_BytesMain": [[66, 3, 1, "c.Py_BytesMain", "argc"], [66, 3, 1, "c.Py_BytesMain", "argv"]], "Py_CLEAR": [[52, 3, 1, "c.Py_CLEAR", "o"]], "Py_CompileString": [[66, 3, 1, "c.Py_CompileString", "filename"], [66, 3, 1, "c.Py_CompileString", "start"], [66, 3, 1, "c.Py_CompileString", "str"]], "Py_CompileStringExFlags": [[66, 3, 1, "c.Py_CompileStringExFlags", "filename"], [66, 3, 1, "c.Py_CompileStringExFlags", "flags"], [66, 3, 1, "c.Py_CompileStringExFlags", "optimize"], [66, 3, 1, "c.Py_CompileStringExFlags", "start"], [66, 3, 1, "c.Py_CompileStringExFlags", "str"]], "Py_CompileStringFlags": [[66, 3, 1, "c.Py_CompileStringFlags", "filename"], [66, 3, 1, "c.Py_CompileStringFlags", "flags"], [66, 3, 1, "c.Py_CompileStringFlags", "start"], [66, 3, 1, "c.Py_CompileStringFlags", "str"]], "Py_CompileStringObject": [[66, 3, 1, "c.Py_CompileStringObject", "filename"], [66, 3, 1, "c.Py_CompileStringObject", "flags"], [66, 3, 1, "c.Py_CompileStringObject", "optimize"], [66, 3, 1, "c.Py_CompileStringObject", "start"], [66, 3, 1, "c.Py_CompileStringObject", "str"]], "Py_DECREF": [[52, 3, 1, "c.Py_DECREF", "o"]], "Py_DecRef": [[52, 3, 1, "c.Py_DecRef", "o"]], "Py_DecodeLocale": [[59, 3, 1, "c.Py_DecodeLocale", "arg"], [59, 3, 1, "c.Py_DecodeLocale", "size"]], "Py_EncodeLocale": [[59, 3, 1, "c.Py_EncodeLocale", "error_pos"], [59, 3, 1, "c.Py_EncodeLocale", "text"]], "Py_EndInterpreter": [[33, 3, 1, "c.Py_EndInterpreter", "tstate"]], "Py_EnterRecursiveCall": [[23, 3, 1, "c.Py_EnterRecursiveCall", "where"]], "Py_Exit": [[59, 3, 1, "c.Py_Exit", "status"]], "Py_ExitStatusException": [[34, 3, 1, "c.Py_ExitStatusException", "status"]], "Py_FatalError": [[59, 3, 1, "c.Py_FatalError", "message"]], "Py_FdIsInteractive": [[59, 3, 1, "c.Py_FdIsInteractive", "filename"], [59, 3, 1, "c.Py_FdIsInteractive", "fp"]], "Py_GenericAlias": [[62, 3, 1, "c.Py_GenericAlias", "args"], [62, 3, 1, "c.Py_GenericAlias", "origin"]], "Py_GetArgcArgv": [[34, 3, 1, "c.Py_GetArgcArgv", "argc"], [34, 3, 1, "c.Py_GetArgcArgv", "argv"]], "Py_INCREF": [[52, 3, 1, "c.Py_INCREF", "o"]], "Py_IS_TYPE": [[58, 3, 1, "c.Py_IS_TYPE", "o"], [58, 3, 1, "c.Py_IS_TYPE", "type"]], "Py_IncRef": [[52, 3, 1, "c.Py_IncRef", "o"]], "Py_InitializeEx": [[33, 3, 1, "c.Py_InitializeEx", "initsigs"]], "Py_InitializeFromConfig": [[34, 3, 1, "c.Py_InitializeFromConfig", "config"]], "Py_Is": [[58, 3, 1, "c.Py_Is", "x"], [58, 3, 1, "c.Py_Is", "y"]], "Py_IsFalse": [[58, 3, 1, "c.Py_IsFalse", "x"]], "Py_IsNone": [[58, 3, 1, "c.Py_IsNone", "x"]], "Py_IsTrue": [[58, 3, 1, "c.Py_IsTrue", "x"]], "Py_Main": [[66, 3, 1, "c.Py_Main", "argc"], [66, 3, 1, "c.Py_Main", "argv"]], "Py_NewInterpreterFromConfig": [[33, 3, 1, "c.Py_NewInterpreterFromConfig", "config"], [33, 3, 1, "c.Py_NewInterpreterFromConfig", "tstate_p"]], "Py_NewRef": [[52, 3, 1, "c.Py_NewRef", "o"]], "Py_PreInitialize": [[34, 3, 1, "c.Py_PreInitialize", "preconfig"]], "Py_PreInitializeFromArgs": [[34, 3, 1, "c.Py_PreInitializeFromArgs", "argc"], [34, 3, 1, "c.Py_PreInitializeFromArgs", "argv"], [34, 3, 1, "c.Py_PreInitializeFromArgs", "preconfig"]], "Py_PreInitializeFromBytesArgs": [[34, 3, 1, "c.Py_PreInitializeFromBytesArgs", "argc"], [34, 3, 1, "c.Py_PreInitializeFromBytesArgs", "argv"], [34, 3, 1, "c.Py_PreInitializeFromBytesArgs", "preconfig"]], "Py_REFCNT": [[52, 3, 1, "c.Py_REFCNT", "o"]], "Py_ReprEnter": [[23, 3, 1, "c.Py_ReprEnter", "object"]], "Py_ReprLeave": [[23, 3, 1, "c.Py_ReprLeave", "object"]], "Py_SET_REFCNT": [[52, 3, 1, "c.Py_SET_REFCNT", "o"], [52, 3, 1, "c.Py_SET_REFCNT", "refcnt"]], "Py_SET_SIZE": [[58, 3, 1, "c.Py_SET_SIZE", "o"], [58, 3, 1, "c.Py_SET_SIZE", "size"]], "Py_SET_TYPE": [[58, 3, 1, "c.Py_SET_TYPE", "o"], [58, 3, 1, "c.Py_SET_TYPE", "type"]], "Py_SIZE": [[58, 3, 1, "c.Py_SIZE", "o"]], "Py_SetProgramName": [[33, 3, 1, "c.Py_SetProgramName", "name"]], "Py_SetPythonHome": [[33, 3, 1, "c.Py_SetPythonHome", "home"]], "Py_SetStandardStreamEncoding": [[33, 3, 1, "c.Py_SetStandardStreamEncoding", "encoding"], [33, 3, 1, "c.Py_SetStandardStreamEncoding", "errors"]], "Py_TYPE": [[58, 3, 1, "c.Py_TYPE", "o"]], "Py_UNICODE_ISALNUM": [[64, 3, 1, "c.Py_UNICODE_ISALNUM", "ch"]], "Py_UNICODE_ISALPHA": [[64, 3, 1, "c.Py_UNICODE_ISALPHA", "ch"]], "Py_UNICODE_ISDECIMAL": [[64, 3, 1, "c.Py_UNICODE_ISDECIMAL", "ch"]], "Py_UNICODE_ISDIGIT": [[64, 3, 1, "c.Py_UNICODE_ISDIGIT", "ch"]], "Py_UNICODE_ISLINEBREAK": [[64, 3, 1, "c.Py_UNICODE_ISLINEBREAK", "ch"]], "Py_UNICODE_ISLOWER": [[64, 3, 1, "c.Py_UNICODE_ISLOWER", "ch"]], "Py_UNICODE_ISNUMERIC": [[64, 3, 1, "c.Py_UNICODE_ISNUMERIC", "ch"]], "Py_UNICODE_ISPRINTABLE": [[64, 3, 1, "c.Py_UNICODE_ISPRINTABLE", "ch"]], "Py_UNICODE_ISSPACE": [[64, 3, 1, "c.Py_UNICODE_ISSPACE", "ch"]], "Py_UNICODE_ISTITLE": [[64, 3, 1, "c.Py_UNICODE_ISTITLE", "ch"]], "Py_UNICODE_ISUPPER": [[64, 3, 1, "c.Py_UNICODE_ISUPPER", "ch"]], "Py_UNICODE_IS_HIGH_SURROGATE": [[64, 3, 1, "c.Py_UNICODE_IS_HIGH_SURROGATE", "ch"]], "Py_UNICODE_IS_LOW_SURROGATE": [[64, 3, 1, "c.Py_UNICODE_IS_LOW_SURROGATE", "ch"]], "Py_UNICODE_IS_SURROGATE": [[64, 3, 1, "c.Py_UNICODE_IS_SURROGATE", "ch"]], "Py_UNICODE_JOIN_SURROGATES": [[64, 3, 1, "c.Py_UNICODE_JOIN_SURROGATES", "high"], [64, 3, 1, "c.Py_UNICODE_JOIN_SURROGATES", "low"]], "Py_UNICODE_TODECIMAL": [[64, 3, 1, "c.Py_UNICODE_TODECIMAL", "ch"]], "Py_UNICODE_TODIGIT": [[64, 3, 1, "c.Py_UNICODE_TODIGIT", "ch"]], "Py_UNICODE_TOLOWER": [[64, 3, 1, "c.Py_UNICODE_TOLOWER", "ch"]], "Py_UNICODE_TONUMERIC": [[64, 3, 1, "c.Py_UNICODE_TONUMERIC", "ch"]], "Py_UNICODE_TOTITLE": [[64, 3, 1, "c.Py_UNICODE_TOTITLE", "ch"]], "Py_UNICODE_TOUPPER": [[64, 3, 1, "c.Py_UNICODE_TOUPPER", "ch"]], "Py_VISIT": [[28, 3, 1, "c.Py_VISIT", "o"]], "Py_VaBuildValue": [[5, 3, 1, "c.Py_VaBuildValue", "format"], [5, 3, 1, "c.Py_VaBuildValue", "vargs"]], "Py_XDECREF": [[52, 3, 1, "c.Py_XDECREF", "o"]], "Py_XINCREF": [[52, 3, 1, "c.Py_XINCREF", "o"]], "Py_XNewRef": [[52, 3, 1, "c.Py_XNewRef", "o"]], "Py_buffer": [[7, 0, 1, "c.Py_buffer.buf", "buf"], [7, 0, 1, "c.Py_buffer.format", "format"], [7, 0, 1, "c.Py_buffer.internal", "internal"], [7, 0, 1, "c.Py_buffer.itemsize", "itemsize"], [7, 0, 1, "c.Py_buffer.len", "len"], [7, 0, 1, "c.Py_buffer.ndim", "ndim"], [7, 0, 1, "c.Py_buffer.obj", "obj"], [7, 0, 1, "c.Py_buffer.readonly", "readonly"], [7, 0, 1, "c.Py_buffer.shape", "shape"], [7, 0, 1, "c.Py_buffer.strides", "strides"], [7, 0, 1, "c.Py_buffer.suboffsets", "suboffsets"]], "Py_mod_create": [[45, 2, 1, "c.Py_mod_create.create_module", "create_module"]], "Py_mod_create.create_module": [[45, 3, 1, "c.Py_mod_create.create_module", "def"], [45, 3, 1, "c.Py_mod_create.create_module", "spec"]], "Py_mod_exec": [[45, 2, 1, "c.Py_mod_exec.exec_module", "exec_module"]], "Py_mod_exec.exec_module": [[45, 3, 1, "c.Py_mod_exec.exec_module", "module"]], "_PyBytes_Resize": [[9, 3, 1, "c._PyBytes_Resize", "bytes"], [9, 3, 1, "c._PyBytes_Resize", "newsize"]], "_PyInterpreterState_GetEvalFrameFunc": [[33, 3, 1, "c._PyInterpreterState_GetEvalFrameFunc", "interp"]], "_PyInterpreterState_SetEvalFrameFunc": [[33, 3, 1, "c._PyInterpreterState_SetEvalFrameFunc", "eval_frame"], [33, 3, 1, "c._PyInterpreterState_SetEvalFrameFunc", "interp"]], "_PyObject_GetDictPtr": [[49, 3, 1, "c._PyObject_GetDictPtr", "obj"]], "_PyObject_New": [[3, 3, 1, "c._PyObject_New", "type"]], "_PyObject_NewVar": [[3, 3, 1, "c._PyObject_NewVar", "size"], [3, 3, 1, "c._PyObject_NewVar", "type"]], "_PyTuple_Resize": [[60, 3, 1, "c._PyTuple_Resize", "newsize"], [60, 3, 1, "c._PyTuple_Resize", "p"]], "_Py_c_diff": [[15, 3, 1, "c._Py_c_diff", "left"], [15, 3, 1, "c._Py_c_diff", "right"]], "_Py_c_neg": [[15, 3, 1, "c._Py_c_neg", "num"]], "_Py_c_pow": [[15, 3, 1, "c._Py_c_pow", "exp"], [15, 3, 1, "c._Py_c_pow", "num"]], "_Py_c_prod": [[15, 3, 1, "c._Py_c_prod", "left"], [15, 3, 1, "c._Py_c_prod", "right"]], "_Py_c_quot": [[15, 3, 1, "c._Py_c_quot", "dividend"], [15, 3, 1, "c._Py_c_quot", "divisor"]], "_Py_c_sum": [[15, 3, 1, "c._Py_c_sum", "left"], [15, 3, 1, "c._Py_c_sum", "right"]], "_inittab": [[31, 0, 1, "c._inittab.initfunc", "initfunc"], [31, 0, 1, "c._inittab.name", "name"]], "BaseException": [[213, 7, 1, "", "__cause__"], [213, 7, 1, "", "__context__"], [213, 7, 1, "", "__notes__"], [213, 7, 1, "", "__suppress_context__"], [213, 7, 1, "", "__traceback__"], [213, 8, 1, "", "add_note"], [213, 7, 1, "", "args"], [213, 8, 1, "", "with_traceback"]], "BaseExceptionGroup": [[213, 8, 1, "", "derive"], [213, 7, 1, "", "exceptions"], [213, 7, 1, "", "message"], [213, 8, 1, "", "split"], [213, 8, 1, "", "subgroup"]], "BlockingIOError": [[213, 7, 1, "", "characters_written"]], "ImportError": [[213, 7, 1, "", "name"], [213, 7, 1, "", "path"]], "OSError": [[213, 7, 1, "", "errno"], [213, 7, 1, "", "filename"], [213, 7, 1, "", "filename2"], [213, 7, 1, "", "strerror"], [213, 7, 1, "", "winerror"]], "StopIteration": [[213, 7, 1, "", "value"]], "SyntaxError": [[213, 7, 1, "", "end_lineno"], [213, 7, 1, "", "end_offset"], [213, 7, 1, "", "filename"], [213, 7, 1, "", "lineno"], [213, 7, 1, "", "offset"], [213, 7, 1, "", "text"]], "SystemExit": [[213, 7, 1, "", "code"]], "UnicodeError": [[213, 7, 1, "", "encoding"], [213, 7, 1, "", "end"], [213, 7, 1, "", "object"], [213, 7, 1, "", "reason"], [213, 7, 1, "", "start"]], "__future__": [[113, 11, 1, "future__._Feature", "_Feature"]], "__future__._Feature": [[113, 7, 1, "future__._Feature.compiler_flag", "compiler_flag"], [113, 8, 1, "future__._Feature.getMandatoryRelease", "getMandatoryRelease"], [113, 8, 1, "future__._Feature.getOptionalRelease", "getOptionalRelease"]], "_thread": [[115, 9, 1, "thread.LockType", "LockType"], [115, 9, 1, "thread.TIMEOUT_MAX", "TIMEOUT_MAX"], [115, 12, 1, "thread.allocate_lock", "allocate_lock"], [115, 6, 1, "thread.error", "error"], [115, 12, 1, "thread.exit", "exit"], [115, 12, 1, "thread.get_ident", "get_ident"], [115, 12, 1, "thread.get_native_id", "get_native_id"], [115, 12, 1, "thread.interrupt_main", "interrupt_main"], [115, 12, 1, "thread.stack_size", "stack_size"], [115, 12, 1, "thread.start_new_thread", "start_new_thread"]], "_thread.lock": [[115, 8, 1, "thread.lock.acquire", "acquire"], [115, 8, 1, "thread.lock.locked", "locked"], [115, 8, 1, "thread.lock.release", "release"]], "_tkinter": [[369, 9, 1, "tkinter.EXCEPTION", "EXCEPTION"], [369, 9, 1, "tkinter.READABLE", "READABLE"], [369, 9, 1, "tkinter.WRITABLE", "WRITABLE"]], "_tkinter.Widget.tk": [[369, 8, 1, "tkinter.Widget.tk.createfilehandler", "createfilehandler"], [369, 8, 1, "tkinter.Widget.tk.deletefilehandler", "deletefilehandler"]], "abc": [[116, 11, 1, "", "ABC"], [116, 11, 1, "", "ABCMeta"], [116, 12, 1, "", "abstractclassmethod"], [116, 12, 1, "", "abstractmethod"], [116, 12, 1, "", "abstractproperty"], [116, 12, 1, "", "abstractstaticmethod"], [116, 12, 1, "", "get_cache_token"], [116, 12, 1, "", "update_abstractmethods"]], "abc.ABCMeta": [[116, 8, 1, "", "__subclasshook__"], [116, 8, 1, "", "register"]], "agen": [[430, 8, 1, "", "__anext__"], [430, 8, 1, "", "aclose"], [430, 8, 1, "", "asend"], [430, 8, 1, "", "athrow"]], "aifc.aifc": [[117, 8, 1, "", "aifc"], [117, 8, 1, "", "aiff"], [117, 8, 1, "", "close"], [117, 8, 1, "", "getcompname"], [117, 8, 1, "", "getcomptype"], [117, 8, 1, "", "getframerate"], [117, 8, 1, "", "getmark"], [117, 8, 1, "", "getmarkers"], [117, 8, 1, "", "getnchannels"], [117, 8, 1, "", "getnframes"], [117, 8, 1, "", "getparams"], [117, 8, 1, "", "getsampwidth"], [117, 8, 1, "", "readframes"], [117, 8, 1, "", "rewind"], [117, 8, 1, "", "setcomptype"], [117, 8, 1, "", "setframerate"], [117, 8, 1, "", "setmark"], [117, 8, 1, "", "setnchannels"], [117, 8, 1, "", "setnframes"], [117, 8, 1, "", "setparams"], [117, 8, 1, "", "setpos"], [117, 8, 1, "", "setsampwidth"], [117, 8, 1, "", "tell"], [117, 8, 1, "", "writeframes"], [117, 8, 1, "", "writeframesraw"]], "aifc": [[117, 12, 1, "", "open"]], "argparse": [[120, 11, 1, "", "Action"], [120, 11, 1, "", "ArgumentDefaultsHelpFormatter"], [120, 6, 1, "", "ArgumentError"], [120, 11, 1, "", "ArgumentParser"], [120, 6, 1, "", "ArgumentTypeError"], [120, 11, 1, "", "FileType"], [120, 11, 1, "", "MetavarTypeHelpFormatter"], [120, 11, 1, "", "Namespace"], [120, 11, 1, "", "RawDescriptionHelpFormatter"], [120, 11, 1, "", "RawTextHelpFormatter"]], "argparse.ArgumentParser": [[120, 8, 1, "", "add_argument"], [120, 8, 1, "", "add_argument_group"], [120, 8, 1, "", "add_mutually_exclusive_group"], [120, 8, 1, "", "add_subparsers"], [120, 8, 1, "", "convert_arg_line_to_args"], [120, 8, 1, "", "error"], [120, 8, 1, "", "exit"], [120, 8, 1, "", "format_help"], [120, 8, 1, "", "format_usage"], [120, 8, 1, "", "get_default"], [120, 8, 1, "", "parse_args"], [120, 8, 1, "", "parse_intermixed_args"], [120, 8, 1, "", "parse_known_args"], [120, 8, 1, "", "parse_known_intermixed_args"], [120, 8, 1, "", "print_help"], [120, 8, 1, "", "print_usage"], [120, 8, 1, "", "set_defaults"]], "array": [[121, 11, 1, "", "array"], [121, 9, 1, "", "typecodes"]], "array.array": [[121, 8, 1, "", "append"], [121, 8, 1, "", "buffer_info"], [121, 8, 1, "", "byteswap"], [121, 8, 1, "", "count"], [121, 8, 1, "", "extend"], [121, 8, 1, "", "frombytes"], [121, 8, 1, "", "fromfile"], [121, 8, 1, "", "fromlist"], [121, 8, 1, "", "fromunicode"], [121, 8, 1, "", "index"], [121, 8, 1, "", "insert"], [121, 7, 1, "", "itemsize"], [121, 8, 1, "", "pop"], [121, 8, 1, "", "remove"], [121, 8, 1, "", "reverse"], [121, 8, 1, "", "tobytes"], [121, 8, 1, "", "tofile"], [121, 8, 1, "", "tolist"], [121, 8, 1, "", "tounicode"], [121, 7, 1, "", "typecode"]], "ast": [[122, 11, 1, "", "AST"], [122, 11, 1, "", "Add"], [122, 11, 1, "", "And"], [122, 11, 1, "", "AnnAssign"], [122, 11, 1, "", "Assert"], [122, 11, 1, "", "Assign"], [122, 11, 1, "", "AsyncFor"], [122, 11, 1, "", "AsyncFunctionDef"], [122, 11, 1, "", "AsyncWith"], [122, 11, 1, "", "Attribute"], [122, 11, 1, "", "AugAssign"], [122, 11, 1, "", "Await"], [122, 11, 1, "", "BinOp"], [122, 11, 1, "", "BitAnd"], [122, 11, 1, "", "BitOr"], [122, 11, 1, "", "BitXor"], [122, 11, 1, "", "BoolOp"], [122, 11, 1, "", "Break"], [122, 11, 1, "", "Call"], [122, 11, 1, "", "ClassDef"], [122, 11, 1, "", "Compare"], [122, 11, 1, "", "Constant"], [122, 11, 1, "", "Continue"], [122, 11, 1, "", "Del"], [122, 11, 1, "", "Delete"], [122, 11, 1, "", "Dict"], [122, 11, 1, "", "DictComp"], [122, 11, 1, "", "Div"], [122, 11, 1, "", "Eq"], [122, 11, 1, "", "ExceptHandler"], [122, 11, 1, "", "Expr"], [122, 11, 1, "", "Expression"], [122, 11, 1, "", "FloorDiv"], [122, 11, 1, "", "For"], [122, 11, 1, "", "FormattedValue"], [122, 11, 1, "", "FunctionDef"], [122, 11, 1, "", "FunctionType"], [122, 11, 1, "", "GeneratorExp"], [122, 11, 1, "", "Global"], [122, 11, 1, "", "Gt"], [122, 11, 1, "", "GtE"], [122, 11, 1, "", "If"], [122, 11, 1, "", "IfExp"], [122, 11, 1, "", "Import"], [122, 11, 1, "", "ImportFrom"], [122, 11, 1, "", "In"], [122, 11, 1, "", "Interactive"], [122, 11, 1, "", "Invert"], [122, 11, 1, "", "Is"], [122, 11, 1, "", "IsNot"], [122, 11, 1, "", "JoinedStr"], [122, 11, 1, "", "LShift"], [122, 11, 1, "", "Lambda"], [122, 11, 1, "", "List"], [122, 11, 1, "", "ListComp"], [122, 11, 1, "", "Load"], [122, 11, 1, "", "Lt"], [122, 11, 1, "", "LtE"], [122, 11, 1, "", "MatMult"], [122, 11, 1, "", "Match"], [122, 11, 1, "", "MatchAs"], [122, 11, 1, "", "MatchClass"], [122, 11, 1, "", "MatchMapping"], [122, 11, 1, "", "MatchOr"], [122, 11, 1, "", "MatchSequence"], [122, 11, 1, "", "MatchSingleton"], [122, 11, 1, "", "MatchStar"], [122, 11, 1, "", "MatchValue"], [122, 11, 1, "", "Mod"], [122, 11, 1, "", "Module"], [122, 11, 1, "", "Mult"], [122, 11, 1, "", "Name"], [122, 11, 1, "", "NamedExpr"], [122, 11, 1, "", "NodeTransformer"], [122, 11, 1, "", "NodeVisitor"], [122, 11, 1, "", "Nonlocal"], [122, 11, 1, "", "Not"], [122, 11, 1, "", "NotEq"], [122, 11, 1, "", "NotIn"], [122, 11, 1, "", "Or"], [122, 11, 1, "", "ParamSpec"], [122, 11, 1, "", "Pass"], [122, 11, 1, "", "Pow"], [122, 9, 1, "", "PyCF_ALLOW_TOP_LEVEL_AWAIT"], [122, 9, 1, "", "PyCF_ONLY_AST"], [122, 9, 1, "", "PyCF_TYPE_COMMENTS"], [122, 11, 1, "", "RShift"], [122, 11, 1, "", "Raise"], [122, 11, 1, "", "Return"], [122, 11, 1, "", "Set"], [122, 11, 1, "", "SetComp"], [122, 11, 1, "", "Slice"], [122, 11, 1, "", "Starred"], [122, 11, 1, "", "Store"], [122, 11, 1, "", "Sub"], [122, 11, 1, "", "Subscript"], [122, 11, 1, "", "Try"], [122, 11, 1, "", "TryStar"], [122, 11, 1, "", "Tuple"], [122, 11, 1, "", "TypeAlias"], [122, 11, 1, "", "TypeVar"], [122, 11, 1, "", "TypeVarTuple"], [122, 11, 1, "", "UAdd"], [122, 11, 1, "", "USub"], [122, 11, 1, "", "UnaryOp"], [122, 11, 1, "", "While"], [122, 11, 1, "", "With"], [122, 11, 1, "", "Yield"], [122, 11, 1, "", "YieldFrom"], [122, 11, 1, "", "alias"], [122, 11, 1, "", "arg"], [122, 11, 1, "", "arguments"], [122, 11, 1, "", "comprehension"], [122, 12, 1, "", "copy_location"], [122, 12, 1, "", "dump"], [122, 12, 1, "", "fix_missing_locations"], [122, 12, 1, "", "get_docstring"], [122, 12, 1, "", "get_source_segment"], [122, 12, 1, "", "increment_lineno"], [122, 12, 1, "", "iter_child_nodes"], [122, 12, 1, "", "iter_fields"], [122, 11, 1, "", "keyword"], [122, 12, 1, "", "literal_eval"], [122, 11, 1, "", "match_case"], [122, 12, 1, "", "parse"], [122, 12, 1, "", "unparse"], [122, 12, 1, "", "walk"], [122, 11, 1, "", "withitem"], [122, 14, 1, "cmdoption-ast-h", "--help"], [122, 14, 1, "cmdoption-ast-a", "--include-attributes"], [122, 14, 1, "cmdoption-ast-indent", "--indent"], [122, 14, 1, "cmdoption-ast-mode", "--mode"], [122, 14, 1, "cmdoption-ast-no-type-comments", "--no-type-comments"], [122, 14, 1, "cmdoption-ast-a", "-a"], [122, 14, 1, "cmdoption-ast-h", "-h"], [122, 14, 1, "cmdoption-ast-i", "-i"], [122, 14, 1, "cmdoption-ast-m", "-m"]], "ast.AST": [[122, 7, 1, "", "_fields"], [122, 7, 1, "", "col_offset"], [122, 7, 1, "", "end_col_offset"], [122, 7, 1, "", "end_lineno"], [122, 7, 1, "", "lineno"]], "ast.Assign": [[122, 7, 1, "", "type_comment"]], "ast.For": [[122, 7, 1, "", "type_comment"]], "ast.FunctionDef": [[122, 7, 1, "", "type_comment"]], "ast.NodeVisitor": [[122, 8, 1, "", "generic_visit"], [122, 8, 1, "", "visit"], [122, 8, 1, "", "visit_Constant"]], "ast.With": [[122, 7, 1, "", "type_comment"]], "ast.arg": [[122, 7, 1, "", "type_comment"]], "asyncio": [[139, 9, 1, "", "ALL_COMPLETED"], [132, 11, 1, "", "AbstractChildWatcher"], [126, 11, 1, "", "AbstractEventLoop"], [132, 11, 1, "", "AbstractEventLoopPolicy"], [138, 11, 1, "", "Barrier"], [133, 11, 1, "", "BaseProtocol"], [133, 11, 1, "", "BaseTransport"], [138, 11, 1, "", "BoundedSemaphore"], [138, 6, 1, "", "BrokenBarrierError"], [133, 11, 1, "", "BufferedProtocol"], [127, 6, 1, "", "CancelledError"], [138, 11, 1, "", "Condition"], [133, 11, 1, "", "DatagramProtocol"], [133, 11, 1, "", "DatagramTransport"], [132, 11, 1, "", "DefaultEventLoopPolicy"], [138, 11, 1, "", "Event"], [139, 9, 1, "", "FIRST_COMPLETED"], [139, 9, 1, "", "FIRST_EXCEPTION"], [132, 11, 1, "", "FastChildWatcher"], [129, 11, 1, "", "Future"], [126, 11, 1, "", "Handle"], [127, 6, 1, "", "IncompleteReadError"], [127, 6, 1, "", "InvalidStateError"], [134, 11, 1, "", "LifoQueue"], [127, 6, 1, "", "LimitOverrunError"], [138, 11, 1, "", "Lock"], [132, 11, 1, "", "MultiLoopChildWatcher"], [132, 11, 1, "", "PidfdChildWatcher"], [134, 11, 1, "", "PriorityQueue"], [126, 11, 1, "", "ProactorEventLoop"], [133, 11, 1, "", "Protocol"], [134, 11, 1, "", "Queue"], [134, 6, 1, "", "QueueEmpty"], [134, 6, 1, "", "QueueFull"], [133, 11, 1, "", "ReadTransport"], [135, 11, 1, "", "Runner"], [132, 11, 1, "", "SafeChildWatcher"], [126, 11, 1, "", "SelectorEventLoop"], [138, 11, 1, "", "Semaphore"], [127, 6, 1, "", "SendfileNotAvailableError"], [126, 11, 1, "", "Server"], [136, 11, 1, "", "StreamReader"], [136, 11, 1, "", "StreamWriter"], [133, 11, 1, "", "SubprocessProtocol"], [133, 11, 1, "", "SubprocessTransport"], [139, 11, 1, "", "Task"], [139, 11, 1, "", "TaskGroup"], [132, 11, 1, "", "ThreadedChildWatcher"], [139, 11, 1, "", "Timeout"], [127, 6, 1, "", "TimeoutError"], [126, 11, 1, "", "TimerHandle"], [133, 11, 1, "", "Transport"], [132, 11, 1, "", "WindowsProactorEventLoopPolicy"], [132, 11, 1, "", "WindowsSelectorEventLoopPolicy"], [133, 11, 1, "", "WriteTransport"], [128, 12, 1, "", "_enter_task"], [128, 12, 1, "", "_leave_task"], [128, 12, 1, "", "_register_task"], [128, 12, 1, "", "_unregister_task"], [139, 12, 1, "", "all_tasks"], [139, 12, 1, "", "as_completed"], [139, 12, 1, "", "create_eager_task_factory"], [137, 12, 1, "", "create_subprocess_exec"], [137, 12, 1, "", "create_subprocess_shell"], [139, 12, 1, "", "create_task"], [139, 12, 1, "", "current_task"], [139, 12, 1, "", "eager_task_factory"], [129, 12, 1, "", "ensure_future"], [139, 12, 1, "", "gather"], [132, 12, 1, "", "get_child_watcher"], [126, 12, 1, "", "get_event_loop"], [132, 12, 1, "", "get_event_loop_policy"], [126, 12, 1, "", "get_running_loop"], [139, 12, 1, "", "iscoroutine"], [129, 12, 1, "", "isfuture"], [126, 12, 1, "", "new_event_loop"], [136, 12, 1, "", "open_connection"], [136, 12, 1, "", "open_unix_connection"], [135, 12, 1, "", "run"], [139, 12, 1, "", "run_coroutine_threadsafe"], [132, 12, 1, "", "set_child_watcher"], [126, 12, 1, "", "set_event_loop"], [132, 12, 1, "", "set_event_loop_policy"], [139, 12, 1, "", "shield"], [139, 12, 1, "", "sleep"], [136, 12, 1, "", "start_server"], [136, 12, 1, "", "start_unix_server"], [139, 12, 1, "", "timeout"], [139, 12, 1, "", "timeout_at"], [139, 12, 1, "", "to_thread"], [139, 12, 1, "", "wait"], [139, 12, 1, "", "wait_for"], [129, 12, 1, "", "wrap_future"]], "asyncio.AbstractChildWatcher": [[132, 8, 1, "", "add_child_handler"], [132, 8, 1, "", "attach_loop"], [132, 8, 1, "", "close"], [132, 8, 1, "", "is_active"], [132, 8, 1, "", "remove_child_handler"]], "asyncio.AbstractEventLoopPolicy": [[132, 8, 1, "", "get_child_watcher"], [132, 8, 1, "", "get_event_loop"], [132, 8, 1, "", "new_event_loop"], [132, 8, 1, "", "set_child_watcher"], [132, 8, 1, "", "set_event_loop"]], "asyncio.Barrier": [[138, 8, 1, "", "abort"], [138, 7, 1, "", "broken"], [138, 7, 1, "", "n_waiting"], [138, 7, 1, "", "parties"], [138, 8, 1, "", "reset"], [138, 8, 1, "", "wait"]], "asyncio.BaseProtocol": [[133, 8, 1, "", "connection_lost"], [133, 8, 1, "", "connection_made"], [133, 8, 1, "", "pause_writing"], [133, 8, 1, "", "resume_writing"]], "asyncio.BaseTransport": [[133, 8, 1, "", "close"], [133, 8, 1, "", "get_extra_info"], [133, 8, 1, "", "get_protocol"], [133, 8, 1, "", "is_closing"], [133, 8, 1, "", "set_protocol"]], "asyncio.BufferedProtocol": [[133, 8, 1, "", "buffer_updated"], [133, 8, 1, "", "eof_received"], [133, 8, 1, "", "get_buffer"]], "asyncio.Condition": [[138, 8, 1, "", "acquire"], [138, 8, 1, "", "locked"], [138, 8, 1, "", "notify"], [138, 8, 1, "", "notify_all"], [138, 8, 1, "", "release"], [138, 8, 1, "", "wait"], [138, 8, 1, "", "wait_for"]], "asyncio.DatagramProtocol": [[133, 8, 1, "", "datagram_received"], [133, 8, 1, "", "error_received"]], "asyncio.DatagramTransport": [[133, 8, 1, "", "abort"], [133, 8, 1, "", "sendto"]], "asyncio.Event": [[138, 8, 1, "", "clear"], [138, 8, 1, "", "is_set"], [138, 8, 1, "", "set"], [138, 8, 1, "", "wait"]], "asyncio.Future": [[128, 8, 1, "", "__init__"], [129, 8, 1, "", "add_done_callback"], [129, 8, 1, "", "cancel"], [129, 8, 1, "", "cancelled"], [129, 8, 1, "", "done"], [129, 8, 1, "", "exception"], [129, 8, 1, "", "get_loop"], [129, 8, 1, "", "remove_done_callback"], [129, 8, 1, "", "result"], [129, 8, 1, "", "set_exception"], [129, 8, 1, "", "set_result"]], "asyncio.Handle": [[126, 8, 1, "", "cancel"], [126, 8, 1, "", "cancelled"], [126, 8, 1, "", "get_context"]], "asyncio.IncompleteReadError": [[127, 7, 1, "", "expected"], [127, 7, 1, "", "partial"]], "asyncio.LimitOverrunError": [[127, 7, 1, "", "consumed"]], "asyncio.Lock": [[138, 8, 1, "", "acquire"], [138, 8, 1, "", "locked"], [138, 8, 1, "", "release"]], "asyncio.Protocol": [[133, 8, 1, "", "data_received"], [133, 8, 1, "", "eof_received"]], "asyncio.Queue": [[134, 8, 1, "", "empty"], [134, 8, 1, "", "full"], [134, 8, 1, "", "get"], [134, 8, 1, "", "get_nowait"], [134, 8, 1, "", "join"], [134, 7, 1, "", "maxsize"], [134, 8, 1, "", "put"], [134, 8, 1, "", "put_nowait"], [134, 8, 1, "", "qsize"], [134, 8, 1, "", "task_done"]], "asyncio.ReadTransport": [[133, 8, 1, "", "is_reading"], [133, 8, 1, "", "pause_reading"], [133, 8, 1, "", "resume_reading"]], "asyncio.Runner": [[135, 8, 1, "", "close"], [135, 8, 1, "", "get_loop"], [135, 8, 1, "", "run"]], "asyncio.Semaphore": [[138, 8, 1, "", "acquire"], [138, 8, 1, "", "locked"], [138, 8, 1, "", "release"]], "asyncio.Server": [[126, 8, 1, "", "close"], [126, 8, 1, "", "get_loop"], [126, 8, 1, "", "is_serving"], [126, 8, 1, "", "serve_forever"], [126, 7, 1, "", "sockets"], [126, 8, 1, "", "start_serving"], [126, 8, 1, "", "wait_closed"]], "asyncio.StreamReader": [[136, 8, 1, "", "at_eof"], [136, 8, 1, "", "feed_eof"], [136, 8, 1, "", "read"], [136, 8, 1, "", "readexactly"], [136, 8, 1, "", "readline"], [136, 8, 1, "", "readuntil"]], "asyncio.StreamWriter": [[136, 8, 1, "", "can_write_eof"], [136, 8, 1, "", "close"], [136, 8, 1, "", "drain"], [136, 8, 1, "", "get_extra_info"], [136, 8, 1, "", "is_closing"], [136, 8, 1, "", "start_tls"], [136, 7, 1, "", "transport"], [136, 8, 1, "", "wait_closed"], [136, 8, 1, "", "write"], [136, 8, 1, "", "write_eof"], [136, 8, 1, "", "writelines"]], "asyncio.SubprocessProtocol": [[133, 8, 1, "", "pipe_connection_lost"], [133, 8, 1, "", "pipe_data_received"], [133, 8, 1, "", "process_exited"]], "asyncio.SubprocessTransport": [[133, 8, 1, "", "close"], [133, 8, 1, "", "get_pid"], [133, 8, 1, "", "get_pipe_transport"], [133, 8, 1, "", "get_returncode"], [133, 8, 1, "", "kill"], [133, 8, 1, "", "send_signal"], [133, 8, 1, "", "terminate"]], "asyncio.Task": [[128, 8, 1, "", "__init__"], [139, 8, 1, "", "add_done_callback"], [139, 8, 1, "", "cancel"], [139, 8, 1, "", "cancelled"], [139, 8, 1, "", "cancelling"], [139, 8, 1, "", "done"], [139, 8, 1, "", "exception"], [139, 8, 1, "", "get_context"], [139, 8, 1, "", "get_coro"], [139, 8, 1, "", "get_name"], [139, 8, 1, "", "get_stack"], [139, 8, 1, "", "print_stack"], [139, 8, 1, "", "remove_done_callback"], [139, 8, 1, "", "result"], [139, 8, 1, "", "set_name"], [139, 8, 1, "", "uncancel"]], "asyncio.TaskGroup": [[139, 8, 1, "", "create_task"]], "asyncio.Timeout": [[139, 8, 1, "", "expired"], [139, 8, 1, "", "reschedule"], [139, 8, 1, "", "when"]], "asyncio.TimerHandle": [[126, 8, 1, "", "when"]], "asyncio.WriteTransport": [[133, 8, 1, "", "abort"], [133, 8, 1, "", "can_write_eof"], [133, 8, 1, "", "get_write_buffer_limits"], [133, 8, 1, "", "get_write_buffer_size"], [133, 8, 1, "", "set_write_buffer_limits"], [133, 8, 1, "", "write"], [133, 8, 1, "", "write_eof"], [133, 8, 1, "", "writelines"]], "asyncio.loop": [[126, 8, 1, "", "add_reader"], [126, 8, 1, "", "add_signal_handler"], [126, 8, 1, "", "add_writer"], [126, 8, 1, "", "call_at"], [126, 8, 1, "", "call_exception_handler"], [126, 8, 1, "", "call_later"], [126, 8, 1, "", "call_soon"], [126, 8, 1, "", "call_soon_threadsafe"], [126, 8, 1, "", "close"], [126, 8, 1, "", "connect_accepted_socket"], [126, 8, 1, "", "connect_read_pipe"], [126, 8, 1, "", "connect_write_pipe"], [126, 8, 1, "", "create_connection"], [126, 8, 1, "", "create_datagram_endpoint"], [126, 8, 1, "", "create_future"], [126, 8, 1, "", "create_server"], [126, 8, 1, "", "create_task"], [126, 8, 1, "", "create_unix_connection"], [126, 8, 1, "", "create_unix_server"], [126, 8, 1, "", "default_exception_handler"], [126, 8, 1, "", "get_debug"], [126, 8, 1, "", "get_exception_handler"], [126, 8, 1, "", "get_task_factory"], [126, 8, 1, "", "getaddrinfo"], [126, 8, 1, "", "getnameinfo"], [126, 8, 1, "", "is_closed"], [126, 8, 1, "", "is_running"], [126, 8, 1, "", "remove_reader"], [126, 8, 1, "", "remove_signal_handler"], [126, 8, 1, "", "remove_writer"], [126, 8, 1, "", "run_forever"], [126, 8, 1, "", "run_in_executor"], [126, 8, 1, "", "run_until_complete"], [126, 8, 1, "", "sendfile"], [126, 8, 1, "", "set_debug"], [126, 8, 1, "", "set_default_executor"], [126, 8, 1, "", "set_exception_handler"], [126, 8, 1, "", "set_task_factory"], [126, 8, 1, "", "shutdown_asyncgens"], [126, 8, 1, "", "shutdown_default_executor"], [126, 7, 1, "", "slow_callback_duration"], [126, 8, 1, "", "sock_accept"], [126, 8, 1, "", "sock_connect"], [126, 8, 1, "", "sock_recv"], [126, 8, 1, "", "sock_recv_into"], [126, 8, 1, "", "sock_recvfrom"], [126, 8, 1, "", "sock_recvfrom_into"], [126, 8, 1, "", "sock_sendall"], [126, 8, 1, "", "sock_sendfile"], [126, 8, 1, "", "sock_sendto"], [126, 8, 1, "", "start_tls"], [126, 8, 1, "", "stop"], [126, 8, 1, "", "subprocess_exec"], [126, 8, 1, "", "subprocess_shell"], [126, 8, 1, "", "time"]], "asyncio.subprocess": [[137, 9, 1, "", "DEVNULL"], [137, 9, 1, "", "PIPE"], [137, 11, 1, "", "Process"], [137, 9, 1, "", "STDOUT"]], "asyncio.subprocess.Process": [[137, 8, 1, "", "communicate"], [137, 8, 1, "", "kill"], [137, 7, 1, "", "pid"], [137, 7, 1, "", "returncode"], [137, 8, 1, "", "send_signal"], [137, 7, 1, "", "stderr"], [137, 7, 1, "", "stdin"], [137, 7, 1, "", "stdout"], [137, 8, 1, "", "terminate"], [137, 8, 1, "", "wait"]], "atexit": [[140, 12, 1, "", "register"], [140, 12, 1, "", "unregister"]], "audioop": [[141, 12, 1, "", "add"], [141, 12, 1, "", "adpcm2lin"], [141, 12, 1, "", "alaw2lin"], [141, 12, 1, "", "avg"], [141, 12, 1, "", "avgpp"], [141, 12, 1, "", "bias"], [141, 12, 1, "", "byteswap"], [141, 12, 1, "", "cross"], [141, 6, 1, "", "error"], [141, 12, 1, "", "findfactor"], [141, 12, 1, "", "findfit"], [141, 12, 1, "", "findmax"], [141, 12, 1, "", "getsample"], [141, 12, 1, "", "lin2adpcm"], [141, 12, 1, "", "lin2alaw"], [141, 12, 1, "", "lin2lin"], [141, 12, 1, "", "lin2ulaw"], [141, 12, 1, "", "max"], [141, 12, 1, "", "maxpp"], [141, 12, 1, "", "minmax"], [141, 12, 1, "", "mul"], [141, 12, 1, "", "ratecv"], [141, 12, 1, "", "reverse"], [141, 12, 1, "", "rms"], [141, 12, 1, "", "tomono"], [141, 12, 1, "", "tostereo"], [141, 12, 1, "", "ulaw2lin"]], "base64": [[143, 12, 1, "", "a85decode"], [143, 12, 1, "", "a85encode"], [143, 12, 1, "", "b16decode"], [143, 12, 1, "", "b16encode"], [143, 12, 1, "", "b32decode"], [143, 12, 1, "", "b32encode"], [143, 12, 1, "", "b32hexdecode"], [143, 12, 1, "", "b32hexencode"], [143, 12, 1, "", "b64decode"], [143, 12, 1, "", "b64encode"], [143, 12, 1, "", "b85decode"], [143, 12, 1, "", "b85encode"], [143, 12, 1, "", "decode"], [143, 12, 1, "", "decodebytes"], [143, 12, 1, "", "encode"], [143, 12, 1, "", "encodebytes"], [143, 12, 1, "", "standard_b64decode"], [143, 12, 1, "", "standard_b64encode"], [143, 12, 1, "", "urlsafe_b64decode"], [143, 12, 1, "", "urlsafe_b64encode"]], "bdb": [[144, 11, 1, "", "Bdb"], [144, 6, 1, "", "BdbQuit"], [144, 11, 1, "", "Breakpoint"], [144, 12, 1, "", "checkfuncname"], [144, 12, 1, "", "effective"], [144, 12, 1, "", "set_trace"]], "bdb.Bdb": [[144, 8, 1, "", "break_anywhere"], [144, 8, 1, "", "break_here"], [144, 8, 1, "", "canonic"], [144, 8, 1, "", "clear_all_breaks"], [144, 8, 1, "", "clear_all_file_breaks"], [144, 8, 1, "", "clear_bpbynumber"], [144, 8, 1, "", "clear_break"], [144, 8, 1, "", "dispatch_call"], [144, 8, 1, "", "dispatch_exception"], [144, 8, 1, "", "dispatch_line"], [144, 8, 1, "", "dispatch_return"], [144, 8, 1, "", "do_clear"], [144, 8, 1, "", "format_stack_entry"], [144, 8, 1, "", "get_all_breaks"], [144, 8, 1, "", "get_bpbynumber"], [144, 8, 1, "", "get_break"], [144, 8, 1, "", "get_breaks"], [144, 8, 1, "", "get_file_breaks"], [144, 8, 1, "", "get_stack"], [144, 8, 1, "", "is_skipped_line"], [144, 8, 1, "", "reset"], [144, 8, 1, "", "run"], [144, 8, 1, "", "runcall"], [144, 8, 1, "", "runctx"], [144, 8, 1, "", "runeval"], [144, 8, 1, "", "set_break"], [144, 8, 1, "", "set_continue"], [144, 8, 1, "", "set_next"], [144, 8, 1, "", "set_quit"], [144, 8, 1, "", "set_return"], [144, 8, 1, "", "set_step"], [144, 8, 1, "", "set_trace"], [144, 8, 1, "", "set_until"], [144, 8, 1, "", "stop_here"], [144, 8, 1, "", "trace_dispatch"], [144, 8, 1, "", "user_call"], [144, 8, 1, "", "user_exception"], [144, 8, 1, "", "user_line"], [144, 8, 1, "", "user_return"]], "bdb.Breakpoint": [[144, 7, 1, "", "bpbynumber"], [144, 8, 1, "", "bpformat"], [144, 7, 1, "", "bplist"], [144, 8, 1, "", "bpprint"], [144, 7, 1, "", "cond"], [144, 8, 1, "", "deleteMe"], [144, 8, 1, "", "disable"], [144, 8, 1, "", "enable"], [144, 7, 1, "", "enabled"], [144, 7, 1, "", "file"], [144, 7, 1, "", "funcname"], [144, 7, 1, "", "hits"], [144, 7, 1, "", "ignore"], [144, 7, 1, "", "line"], [144, 7, 1, "", "temporary"]], "binascii": [[146, 6, 1, "", "Error"], [146, 6, 1, "", "Incomplete"], [146, 12, 1, "", "a2b_base64"], [146, 12, 1, "", "a2b_hex"], [146, 12, 1, "", "a2b_qp"], [146, 12, 1, "", "a2b_uu"], [146, 12, 1, "", "b2a_base64"], [146, 12, 1, "", "b2a_hex"], [146, 12, 1, "", "b2a_qp"], [146, 12, 1, "", "b2a_uu"], [146, 12, 1, "", "crc32"], [146, 12, 1, "", "crc_hqx"], [146, 12, 1, "", "hexlify"], [146, 12, 1, "", "unhexlify"]], "bisect": [[147, 12, 1, "", "bisect"], [147, 12, 1, "", "bisect_left"], [147, 12, 1, "", "bisect_right"], [147, 12, 1, "", "insort"], [147, 12, 1, "", "insort_left"], [147, 12, 1, "", "insort_right"]], "bytearray": [[344, 8, 1, "", "capitalize"], [344, 8, 1, "", "center"], [344, 8, 1, "", "count"], [344, 8, 1, "", "decode"], [344, 8, 1, "", "endswith"], [344, 8, 1, "", "expandtabs"], [344, 8, 1, "", "find"], [344, 8, 1, "", "fromhex"], [344, 8, 1, "", "hex"], [344, 8, 1, "", "index"], [344, 8, 1, "", "isalnum"], [344, 8, 1, "", "isalpha"], [344, 8, 1, "", "isascii"], [344, 8, 1, "", "isdigit"], [344, 8, 1, "", "islower"], [344, 8, 1, "", "isspace"], [344, 8, 1, "", "istitle"], [344, 8, 1, "", "isupper"], [344, 8, 1, "", "join"], [344, 8, 1, "", "ljust"], [344, 8, 1, "", "lower"], [344, 8, 1, "", "lstrip"], [344, 8, 1, "", "maketrans"], [344, 8, 1, "", "partition"], [344, 8, 1, "", "removeprefix"], [344, 8, 1, "", "removesuffix"], [344, 8, 1, "", "replace"], [344, 8, 1, "", "rfind"], [344, 8, 1, "", "rindex"], [344, 8, 1, "", "rjust"], [344, 8, 1, "", "rpartition"], [344, 8, 1, "", "rsplit"], [344, 8, 1, "", "rstrip"], [344, 8, 1, "", "split"], [344, 8, 1, "", "splitlines"], [344, 8, 1, "", "startswith"], [344, 8, 1, "", "strip"], [344, 8, 1, "", "swapcase"], [344, 8, 1, "", "title"], [344, 8, 1, "", "translate"], [344, 8, 1, "", "upper"], [344, 8, 1, "", "zfill"]], "bytes": [[344, 8, 1, "", "capitalize"], [344, 8, 1, "", "center"], [344, 8, 1, "", "count"], [344, 8, 1, "", "decode"], [344, 8, 1, "", "endswith"], [344, 8, 1, "", "expandtabs"], [344, 8, 1, "", "find"], [344, 8, 1, "", "fromhex"], [344, 8, 1, "", "hex"], [344, 8, 1, "", "index"], [344, 8, 1, "", "isalnum"], [344, 8, 1, "", "isalpha"], [344, 8, 1, "", "isascii"], [344, 8, 1, "", "isdigit"], [344, 8, 1, "", "islower"], [344, 8, 1, "", "isspace"], [344, 8, 1, "", "istitle"], [344, 8, 1, "", "isupper"], [344, 8, 1, "", "join"], [344, 8, 1, "", "ljust"], [344, 8, 1, "", "lower"], [344, 8, 1, "", "lstrip"], [344, 8, 1, "", "maketrans"], [344, 8, 1, "", "partition"], [344, 8, 1, "", "removeprefix"], [344, 8, 1, "", "removesuffix"], [344, 8, 1, "", "replace"], [344, 8, 1, "", "rfind"], [344, 8, 1, "", "rindex"], [344, 8, 1, "", "rjust"], [344, 8, 1, "", "rpartition"], [344, 8, 1, "", "rsplit"], [344, 8, 1, "", "rstrip"], [344, 8, 1, "", "split"], [344, 8, 1, "", "splitlines"], [344, 8, 1, "", "startswith"], [344, 8, 1, "", "strip"], [344, 8, 1, "", "swapcase"], [344, 8, 1, "", "title"], [344, 8, 1, "", "translate"], [344, 8, 1, "", "upper"], [344, 8, 1, "", "zfill"]], "bz2": [[149, 11, 1, "", "BZ2Compressor"], [149, 11, 1, "", "BZ2Decompressor"], [149, 11, 1, "", "BZ2File"], [149, 12, 1, "", "compress"], [149, 12, 1, "", "decompress"], [149, 12, 1, "", "open"]], "bz2.BZ2Compressor": [[149, 8, 1, "", "compress"], [149, 8, 1, "", "flush"]], "bz2.BZ2Decompressor": [[149, 8, 1, "", "decompress"], [149, 7, 1, "", "eof"], [149, 7, 1, "", "needs_input"], [149, 7, 1, "", "unused_data"]], "bz2.BZ2File": [[149, 8, 1, "", "fileno"], [149, 8, 1, "", "peek"], [149, 8, 1, "", "read1"], [149, 8, 1, "", "readable"], [149, 8, 1, "", "readinto"], [149, 8, 1, "", "seekable"], [149, 8, 1, "", "writable"]], "calendar": [[150, 9, 1, "", "APRIL"], [150, 9, 1, "", "AUGUST"], [150, 11, 1, "", "Calendar"], [150, 9, 1, "", "DECEMBER"], [150, 11, 1, "", "Day"], [150, 9, 1, "", "FEBRUARY"], [150, 9, 1, "", "FRIDAY"], [150, 11, 1, "", "HTMLCalendar"], [150, 6, 1, "", "IllegalMonthError"], [150, 6, 1, "", "IllegalWeekdayError"], [150, 9, 1, "", "JANUARY"], [150, 9, 1, "", "JULY"], [150, 9, 1, "", "JUNE"], [150, 11, 1, "", "LocaleHTMLCalendar"], [150, 11, 1, "", "LocaleTextCalendar"], [150, 9, 1, "", "MARCH"], [150, 9, 1, "", "MAY"], [150, 9, 1, "", "MONDAY"], [150, 11, 1, "", "Month"], [150, 9, 1, "", "NOVEMBER"], [150, 9, 1, "", "OCTOBER"], [150, 9, 1, "", "SATURDAY"], [150, 9, 1, "", "SEPTEMBER"], [150, 9, 1, "", "SUNDAY"], [150, 9, 1, "", "THURSDAY"], [150, 9, 1, "", "TUESDAY"], [150, 11, 1, "", "TextCalendar"], [150, 9, 1, "", "WEDNESDAY"], [150, 12, 1, "", "calendar"], [150, 9, 1, "", "day_abbr"], [150, 9, 1, "", "day_name"], [150, 12, 1, "", "firstweekday"], [150, 12, 1, "", "isleap"], [150, 12, 1, "", "leapdays"], [150, 12, 1, "", "month"], [150, 9, 1, "", "month_abbr"], [150, 9, 1, "", "month_name"], [150, 12, 1, "", "monthcalendar"], [150, 12, 1, "", "monthrange"], [150, 12, 1, "", "prcal"], [150, 12, 1, "", "prmonth"], [150, 12, 1, "", "setfirstweekday"], [150, 12, 1, "", "timegm"], [150, 12, 1, "", "weekday"], [150, 12, 1, "", "weekheader"], [150, 14, 1, "cmdoption-calendar-css", "--css"], [150, 14, 1, "cmdoption-calendar-encoding", "--encoding"], [150, 14, 1, "cmdoption-calendar-help", "--help"], [150, 14, 1, "cmdoption-calendar-lines", "--lines"], [150, 14, 1, "cmdoption-calendar-locale", "--locale"], [150, 14, 1, "cmdoption-calendar-months", "--months"], [150, 14, 1, "cmdoption-calendar-spacing", "--spacing"], [150, 14, 1, "cmdoption-calendar-type", "--type"], [150, 14, 1, "cmdoption-calendar-width", "--width"], [150, 14, 1, "cmdoption-calendar-locale", "-L"], [150, 14, 1, "cmdoption-calendar-css", "-c"], [150, 14, 1, "cmdoption-calendar-encoding", "-e"], [150, 14, 1, "cmdoption-calendar-help", "-h"], [150, 14, 1, "cmdoption-calendar-lines", "-l"], [150, 14, 1, "cmdoption-calendar-months", "-m"], [150, 14, 1, "cmdoption-calendar-spacing", "-s"], [150, 14, 1, "cmdoption-calendar-type", "-t"], [150, 14, 1, "cmdoption-calendar-width", "-w"], [150, 14, 1, "cmdoption-calendar-arg-month", "month"], [150, 14, 1, "cmdoption-calendar-arg-year", "year"]], "calendar.Calendar": [[150, 8, 1, "", "itermonthdates"], [150, 8, 1, "", "itermonthdays"], [150, 8, 1, "", "itermonthdays2"], [150, 8, 1, "", "itermonthdays3"], [150, 8, 1, "", "itermonthdays4"], [150, 8, 1, "", "iterweekdays"], [150, 8, 1, "", "monthdatescalendar"], [150, 8, 1, "", "monthdays2calendar"], [150, 8, 1, "", "monthdayscalendar"], [150, 8, 1, "", "yeardatescalendar"], [150, 8, 1, "", "yeardays2calendar"], [150, 8, 1, "", "yeardayscalendar"]], "calendar.HTMLCalendar": [[150, 7, 1, "", "cssclass_month"], [150, 7, 1, "", "cssclass_month_head"], [150, 7, 1, "", "cssclass_noday"], [150, 7, 1, "", "cssclass_year"], [150, 7, 1, "", "cssclass_year_head"], [150, 7, 1, "", "cssclasses"], [150, 7, 1, "", "cssclasses_weekday_head"], [150, 8, 1, "", "formatmonth"], [150, 8, 1, "", "formatmonthname"], [150, 8, 1, "", "formatyear"], [150, 8, 1, "", "formatyearpage"]], "calendar.IllegalMonthError": [[150, 7, 1, "", "month"]], "calendar.IllegalWeekdayError": [[150, 7, 1, "", "weekday"]], "calendar.TextCalendar": [[150, 8, 1, "", "formatmonth"], [150, 8, 1, "", "formatyear"], [150, 8, 1, "", "prmonth"], [150, 8, 1, "", "pryear"]], "cgi.FieldStorage": [[151, 8, 1, "", "getfirst"], [151, 8, 1, "", "getlist"]], "cgi": [[151, 12, 1, "", "parse"], [151, 12, 1, "", "parse_header"], [151, 12, 1, "", "parse_multipart"], [151, 12, 1, "", "print_directory"], [151, 12, 1, "", "print_environ"], [151, 12, 1, "", "print_environ_usage"], [151, 12, 1, "", "print_form"], [151, 12, 1, "", "test"]], "cgitb": [[152, 12, 1, "", "enable"], [152, 12, 1, "", "handler"], [152, 12, 1, "", "html"], [152, 12, 1, "", "text"]], "chunk": [[153, 11, 1, "", "Chunk"]], "chunk.Chunk": [[153, 8, 1, "", "close"], [153, 8, 1, "", "getname"], [153, 8, 1, "", "getsize"], [153, 8, 1, "", "isatty"], [153, 8, 1, "", "read"], [153, 8, 1, "", "seek"], [153, 8, 1, "", "skip"], [153, 8, 1, "", "tell"]], "class": [[344, 7, 1, "", "__bases__"], [428, 8, 1, "", "__instancecheck__"], [344, 7, 1, "", "__mro__"], [428, 8, 1, "", "__subclasscheck__"], [344, 8, 1, "", "__subclasses__"], [344, 8, 1, "", "mro"]], "cmath": [[154, 12, 1, "", "acos"], [154, 12, 1, "", "acosh"], [154, 12, 1, "", "asin"], [154, 12, 1, "", "asinh"], [154, 12, 1, "", "atan"], [154, 12, 1, "", "atanh"], [154, 12, 1, "", "cos"], [154, 12, 1, "", "cosh"], [154, 9, 1, "", "e"], [154, 12, 1, "", "exp"], [154, 9, 1, "", "inf"], [154, 9, 1, "", "infj"], [154, 12, 1, "", "isclose"], [154, 12, 1, "", "isfinite"], [154, 12, 1, "", "isinf"], [154, 12, 1, "", "isnan"], [154, 12, 1, "", "log"], [154, 12, 1, "", "log10"], [154, 9, 1, "", "nan"], [154, 9, 1, "", "nanj"], [154, 12, 1, "", "phase"], [154, 9, 1, "", "pi"], [154, 12, 1, "", "polar"], [154, 12, 1, "", "rect"], [154, 12, 1, "", "sin"], [154, 12, 1, "", "sinh"], [154, 12, 1, "", "sqrt"], [154, 12, 1, "", "tan"], [154, 12, 1, "", "tanh"], [154, 9, 1, "", "tau"]], "cmd": [[155, 11, 1, "", "Cmd"]], "cmd.Cmd": [[155, 8, 1, "", "cmdloop"], [155, 7, 1, "", "cmdqueue"], [155, 8, 1, "", "columnize"], [155, 8, 1, "", "completedefault"], [155, 8, 1, "", "default"], [155, 8, 1, "", "do_help"], [155, 7, 1, "", "doc_header"], [155, 8, 1, "", "emptyline"], [155, 7, 1, "", "identchars"], [155, 7, 1, "", "intro"], [155, 7, 1, "", "lastcmd"], [155, 7, 1, "", "misc_header"], [155, 8, 1, "", "onecmd"], [155, 8, 1, "", "postcmd"], [155, 8, 1, "", "postloop"], [155, 8, 1, "", "precmd"], [155, 8, 1, "", "preloop"], [155, 7, 1, "", "prompt"], [155, 7, 1, "", "ruler"], [155, 7, 1, "", "undoc_header"], [155, 7, 1, "", "use_rawinput"]], "code": [[157, 11, 1, "", "InteractiveConsole"], [157, 11, 1, "", "InteractiveInterpreter"], [157, 12, 1, "", "compile_command"], [157, 12, 1, "", "interact"]], "code.InteractiveConsole": [[157, 8, 1, "", "interact"], [157, 8, 1, "", "push"], [157, 8, 1, "", "raw_input"], [157, 8, 1, "", "resetbuffer"]], "code.InteractiveInterpreter": [[157, 8, 1, "", "runcode"], [157, 8, 1, "", "runsource"], [157, 8, 1, "", "showsyntaxerror"], [157, 8, 1, "", "showtraceback"], [157, 8, 1, "", "write"]], "codecs": [[158, 9, 1, "", "BOM"], [158, 9, 1, "", "BOM_BE"], [158, 9, 1, "", "BOM_LE"], [158, 9, 1, "", "BOM_UTF16"], [158, 9, 1, "", "BOM_UTF16_BE"], [158, 9, 1, "", "BOM_UTF16_LE"], [158, 9, 1, "", "BOM_UTF32"], [158, 9, 1, "", "BOM_UTF32_BE"], [158, 9, 1, "", "BOM_UTF32_LE"], [158, 9, 1, "", "BOM_UTF8"], [158, 11, 1, "", "Codec"], [158, 11, 1, "", "CodecInfo"], [158, 12, 1, "", "EncodedFile"], [158, 11, 1, "", "IncrementalDecoder"], [158, 11, 1, "", "IncrementalEncoder"], [158, 11, 1, "", "StreamReader"], [158, 11, 1, "", "StreamReaderWriter"], [158, 11, 1, "", "StreamRecoder"], [158, 11, 1, "", "StreamWriter"], [158, 12, 1, "", "backslashreplace_errors"], [158, 12, 1, "", "decode"], [158, 12, 1, "", "encode"], [158, 12, 1, "", "getdecoder"], [158, 12, 1, "", "getencoder"], [158, 12, 1, "", "getincrementaldecoder"], [158, 12, 1, "", "getincrementalencoder"], [158, 12, 1, "", "getreader"], [158, 12, 1, "", "getwriter"], [158, 12, 1, "", "ignore_errors"], [158, 12, 1, "", "iterdecode"], [158, 12, 1, "", "iterencode"], [158, 12, 1, "", "lookup"], [158, 12, 1, "", "lookup_error"], [158, 12, 1, "", "namereplace_errors"], [158, 12, 1, "", "open"], [158, 12, 1, "", "register"], [158, 12, 1, "", "register_error"], [158, 12, 1, "", "replace_errors"], [158, 12, 1, "", "strict_errors"], [158, 12, 1, "", "unregister"], [158, 12, 1, "", "xmlcharrefreplace_errors"]], "codecs.Codec": [[158, 8, 1, "", "decode"], [158, 8, 1, "", "encode"]], "codecs.CodecInfo": [[158, 7, 1, "", "decode"], [158, 7, 1, "", "encode"], [158, 7, 1, "", "incrementaldecoder"], [158, 7, 1, "", "incrementalencoder"], [158, 7, 1, "", "name"], [158, 7, 1, "", "streamreader"], [158, 7, 1, "", "streamwriter"]], "codecs.IncrementalDecoder": [[158, 8, 1, "", "decode"], [158, 8, 1, "", "getstate"], [158, 8, 1, "", "reset"], [158, 8, 1, "", "setstate"]], "codecs.IncrementalEncoder": [[158, 8, 1, "", "encode"], [158, 8, 1, "", "getstate"], [158, 8, 1, "", "reset"], [158, 8, 1, "", "setstate"]], "codecs.StreamReader": [[158, 8, 1, "", "read"], [158, 8, 1, "", "readline"], [158, 8, 1, "", "readlines"], [158, 8, 1, "", "reset"]], "codecs.StreamWriter": [[158, 8, 1, "", "reset"], [158, 8, 1, "", "write"], [158, 8, 1, "", "writelines"]], "codeobject": [[428, 7, 1, "", "co_argcount"], [428, 7, 1, "", "co_cellvars"], [428, 7, 1, "", "co_code"], [428, 7, 1, "", "co_consts"], [428, 7, 1, "", "co_filename"], [428, 7, 1, "", "co_firstlineno"], [428, 7, 1, "", "co_flags"], [428, 7, 1, "", "co_freevars"], [428, 7, 1, "", "co_kwonlyargcount"], [428, 8, 1, "", "co_lines"], [428, 7, 1, "", "co_lnotab"], [428, 7, 1, "", "co_name"], [428, 7, 1, "", "co_names"], [428, 7, 1, "", "co_nlocals"], [428, 8, 1, "", "co_positions"], [428, 7, 1, "", "co_posonlyargcount"], [428, 7, 1, "", "co_qualname"], [428, 7, 1, "", "co_stacksize"], [428, 7, 1, "", "co_varnames"], [428, 8, 1, "", "replace"]], "codeop": [[159, 11, 1, "", "CommandCompiler"], [159, 11, 1, "", "Compile"], [159, 12, 1, "", "compile_command"]], "collections": [[160, 11, 1, "", "ChainMap"], [160, 11, 1, "", "Counter"], [160, 11, 1, "", "OrderedDict"], [160, 11, 1, "", "UserDict"], [160, 11, 1, "", "UserList"], [160, 11, 1, "", "UserString"], [161, 10, 0, "-", "abc"], [160, 11, 1, "", "defaultdict"], [160, 11, 1, "", "deque"], [160, 12, 1, "", "namedtuple"]], "collections.ChainMap": [[160, 7, 1, "", "maps"], [160, 8, 1, "", "new_child"], [160, 7, 1, "", "parents"]], "collections.Counter": [[160, 8, 1, "", "elements"], [160, 8, 1, "", "fromkeys"], [160, 8, 1, "", "most_common"], [160, 8, 1, "", "subtract"], [160, 8, 1, "", "total"], [160, 8, 1, "", "update"]], "collections.OrderedDict": [[160, 8, 1, "", "move_to_end"], [160, 8, 1, "", "popitem"]], "collections.UserDict": [[160, 7, 1, "", "data"]], "collections.UserList": [[160, 7, 1, "", "data"]], "collections.UserString": [[160, 7, 1, "", "data"]], "collections.abc": [[161, 11, 1, "", "AsyncGenerator"], [161, 11, 1, "", "AsyncIterable"], [161, 11, 1, "", "AsyncIterator"], [161, 11, 1, "", "Awaitable"], [161, 11, 1, "", "Buffer"], [161, 11, 1, "", "ByteString"], [161, 11, 1, "", "Callable"], [161, 11, 1, "", "Collection"], [161, 11, 1, "", "Container"], [161, 11, 1, "", "Coroutine"], [161, 11, 1, "", "Generator"], [161, 11, 1, "", "Hashable"], [161, 11, 1, "", "ItemsView"], [161, 11, 1, "", "Iterable"], [161, 11, 1, "", "Iterator"], [161, 11, 1, "", "KeysView"], [161, 11, 1, "", "Mapping"], [161, 11, 1, "", "MappingView"], [161, 11, 1, "", "MutableMapping"], [161, 11, 1, "", "MutableSequence"], [161, 11, 1, "", "MutableSet"], [161, 11, 1, "", "Reversible"], [161, 11, 1, "", "Sequence"], [161, 11, 1, "", "Set"], [161, 11, 1, "", "Sized"], [161, 11, 1, "", "ValuesView"]], "collections.defaultdict": [[160, 8, 1, "", "__missing__"], [160, 7, 1, "", "default_factory"]], "collections.deque": [[160, 8, 1, "", "append"], [160, 8, 1, "", "appendleft"], [160, 8, 1, "", "clear"], [160, 8, 1, "", "copy"], [160, 8, 1, "", "count"], [160, 8, 1, "", "extend"], [160, 8, 1, "", "extendleft"], [160, 8, 1, "", "index"], [160, 8, 1, "", "insert"], [160, 7, 1, "", "maxlen"], [160, 8, 1, "", "pop"], [160, 8, 1, "", "popleft"], [160, 8, 1, "", "remove"], [160, 8, 1, "", "reverse"], [160, 8, 1, "", "rotate"]], "collections.somenamedtuple": [[160, 8, 1, "", "_asdict"], [160, 7, 1, "", "_field_defaults"], [160, 7, 1, "", "_fields"], [160, 8, 1, "", "_make"], [160, 8, 1, "", "_replace"]], "colorsys": [[162, 12, 1, "", "hls_to_rgb"], [162, 12, 1, "", "hsv_to_rgb"], [162, 12, 1, "", "rgb_to_hls"], [162, 12, 1, "", "rgb_to_hsv"], [162, 12, 1, "", "rgb_to_yiq"], [162, 12, 1, "", "yiq_to_rgb"]], "compileall": [[163, 12, 1, "", "compile_dir"], [163, 12, 1, "", "compile_file"], [163, 12, 1, "", "compile_path"], [163, 14, 1, "cmdoption-compileall-hardlink-dupes", "--hardlink-dupes"], [163, 14, 1, "cmdoption-compileall-invalidation-mode", "--invalidation-mode"], [163, 14, 1, "cmdoption-compileall-b", "-b"], [163, 14, 1, "cmdoption-compileall-d", "-d"], [163, 14, 1, "cmdoption-compileall-e", "-e"], [163, 14, 1, "cmdoption-compileall-f", "-f"], [163, 14, 1, "cmdoption-compileall-i", "-i"], [163, 14, 1, "cmdoption-compileall-j", "-j"], [163, 14, 1, "cmdoption-compileall-l", "-l"], [163, 14, 1, "cmdoption-compileall-o", "-o"], [163, 14, 1, "cmdoption-compileall-p", "-p"], [163, 14, 1, "cmdoption-compileall-q", "-q"], [163, 14, 1, "cmdoption-compileall-r", "-r"], [163, 14, 1, "cmdoption-compileall-s", "-s"], [163, 14, 1, "cmdoption-compileall-x", "-x"], [163, 14, 1, "cmdoption-compileall-arg-directory", "directory"], [163, 14, 1, "cmdoption-compileall-arg-file", "file"]], "concurrent": [[166, 10, 0, "-", "futures"]], "concurrent.futures": [[166, 9, 1, "", "ALL_COMPLETED"], [166, 6, 1, "", "BrokenExecutor"], [166, 6, 1, "", "CancelledError"], [166, 11, 1, "", "Executor"], [166, 9, 1, "", "FIRST_COMPLETED"], [166, 9, 1, "", "FIRST_EXCEPTION"], [166, 11, 1, "", "Future"], [166, 6, 1, "", "InvalidStateError"], [166, 11, 1, "", "ProcessPoolExecutor"], [166, 11, 1, "", "ThreadPoolExecutor"], [166, 6, 1, "", "TimeoutError"], [166, 12, 1, "", "as_completed"], [166, 12, 1, "", "wait"]], "concurrent.futures.Executor": [[166, 8, 1, "", "map"], [166, 8, 1, "", "shutdown"], [166, 8, 1, "", "submit"]], "concurrent.futures.Future": [[166, 8, 1, "", "add_done_callback"], [166, 8, 1, "", "cancel"], [166, 8, 1, "", "cancelled"], [166, 8, 1, "", "done"], [166, 8, 1, "", "exception"], [166, 8, 1, "", "result"], [166, 8, 1, "", "running"], [166, 8, 1, "", "set_exception"], [166, 8, 1, "", "set_result"], [166, 8, 1, "", "set_running_or_notify_cancel"]], "concurrent.futures.process": [[166, 6, 1, "", "BrokenProcessPool"]], "concurrent.futures.thread": [[166, 6, 1, "", "BrokenThreadPool"]], "configparser": [[167, 11, 1, "", "BasicInterpolation"], [167, 11, 1, "", "ConfigParser"], [167, 6, 1, "", "DuplicateOptionError"], [167, 6, 1, "", "DuplicateSectionError"], [167, 6, 1, "", "Error"], [167, 11, 1, "", "ExtendedInterpolation"], [167, 6, 1, "", "InterpolationDepthError"], [167, 6, 1, "", "InterpolationError"], [167, 6, 1, "", "InterpolationMissingOptionError"], [167, 6, 1, "", "InterpolationSyntaxError"], [167, 9, 1, "", "MAX_INTERPOLATION_DEPTH"], [167, 6, 1, "", "MissingSectionHeaderError"], [167, 6, 1, "", "NoOptionError"], [167, 6, 1, "", "NoSectionError"], [167, 6, 1, "", "ParsingError"], [167, 11, 1, "", "RawConfigParser"]], "configparser.ConfigParser": [[167, 7, 1, "", "BOOLEAN_STATES"], [167, 7, 1, "", "SECTCRE"], [167, 8, 1, "", "add_section"], [167, 8, 1, "", "defaults"], [167, 8, 1, "", "get"], [167, 8, 1, "", "getboolean"], [167, 8, 1, "", "getfloat"], [167, 8, 1, "", "getint"], [167, 8, 1, "", "has_option"], [167, 8, 1, "", "has_section"], [167, 8, 1, "", "items"], [167, 8, 1, "", "options"], [167, 8, 1, "", "optionxform"], [167, 8, 1, "", "read"], [167, 8, 1, "", "read_dict"], [167, 8, 1, "", "read_file"], [167, 8, 1, "", "read_string"], [167, 8, 1, "", "remove_option"], [167, 8, 1, "", "remove_section"], [167, 8, 1, "", "sections"], [167, 8, 1, "", "set"], [167, 8, 1, "", "write"]], "configparser.RawConfigParser": [[167, 8, 1, "", "add_section"], [167, 8, 1, "", "set"]], "container": [[344, 8, 1, "", "__iter__"]], "contextlib": [[169, 11, 1, "", "AbstractAsyncContextManager"], [169, 11, 1, "", "AbstractContextManager"], [169, 11, 1, "", "AsyncContextDecorator"], [169, 11, 1, "", "AsyncExitStack"], [169, 11, 1, "", "ContextDecorator"], [169, 11, 1, "", "ExitStack"], [169, 12, 1, "", "aclosing"], [169, 12, 1, "", "asynccontextmanager"], [169, 12, 1, "", "chdir"], [169, 12, 1, "", "closing"], [169, 12, 1, "", "contextmanager"], [169, 12, 1, "", "nullcontext"], [169, 12, 1, "", "redirect_stderr"], [169, 12, 1, "", "redirect_stdout"], [169, 12, 1, "", "suppress"]], "contextlib.AsyncExitStack": [[169, 8, 1, "", "aclose"], [169, 8, 1, "", "enter_async_context"], [169, 8, 1, "", "push_async_callback"], [169, 8, 1, "", "push_async_exit"]], "contextlib.ExitStack": [[169, 8, 1, "", "callback"], [169, 8, 1, "", "close"], [169, 8, 1, "", "enter_context"], [169, 8, 1, "", "pop_all"], [169, 8, 1, "", "push"]], "contextmanager": [[344, 8, 1, "", "__enter__"], [344, 8, 1, "", "__exit__"]], "contextvars": [[170, 11, 1, "", "Context"], [170, 11, 1, "", "ContextVar"], [170, 11, 1, "", "Token"], [170, 12, 1, "", "copy_context"]], "contextvars.Context": [[170, 8, 1, "", "copy"], [170, 8, 1, "", "get"], [170, 8, 1, "", "items"], [170, 8, 1, "", "keys"], [170, 8, 1, "", "run"], [170, 8, 1, "", "values"]], "contextvars.ContextVar": [[170, 8, 1, "", "get"], [170, 7, 1, "", "name"], [170, 8, 1, "", "reset"], [170, 8, 1, "", "set"]], "contextvars.Token": [[170, 7, 1, "", "MISSING"], [170, 7, 1, "", "old_value"], [170, 7, 1, "", "var"]], "copy": [[171, 6, 1, "", "Error"], [171, 12, 1, "", "copy"], [171, 12, 1, "", "deepcopy"]], "copyreg": [[172, 12, 1, "", "constructor"], [172, 12, 1, "", "pickle"]], "coroutine": [[428, 8, 1, "", "close"], [428, 8, 1, "", "send"], [428, 8, 1, "", "throw"]], "crypt": [[173, 9, 1, "", "METHOD_BLOWFISH"], [173, 9, 1, "", "METHOD_CRYPT"], [173, 9, 1, "", "METHOD_MD5"], [173, 9, 1, "", "METHOD_SHA256"], [173, 9, 1, "", "METHOD_SHA512"], [173, 12, 1, "", "crypt"], [173, 7, 1, "", "methods"], [173, 12, 1, "", "mksalt"]], "csv": [[175, 11, 1, "", "Dialect"], [175, 11, 1, "", "DictReader"], [175, 11, 1, "", "DictWriter"], [175, 6, 1, "", "Error"], [175, 9, 1, "", "QUOTE_ALL"], [175, 9, 1, "", "QUOTE_MINIMAL"], [175, 9, 1, "", "QUOTE_NONE"], [175, 9, 1, "", "QUOTE_NONNUMERIC"], [175, 9, 1, "", "QUOTE_NOTNULL"], [175, 9, 1, "", "QUOTE_STRINGS"], [175, 11, 1, "", "Sniffer"], [175, 11, 1, "", "excel"], [175, 11, 1, "", "excel_tab"], [175, 12, 1, "", "field_size_limit"], [175, 12, 1, "", "get_dialect"], [175, 12, 1, "", "list_dialects"], [175, 12, 1, "", "reader"], [175, 12, 1, "", "register_dialect"], [175, 11, 1, "", "unix_dialect"], [175, 12, 1, "", "unregister_dialect"], [175, 12, 1, "", "writer"]], "csv.Dialect": [[175, 7, 1, "", "delimiter"], [175, 7, 1, "", "doublequote"], [175, 7, 1, "", "escapechar"], [175, 7, 1, "", "lineterminator"], [175, 7, 1, "", "quotechar"], [175, 7, 1, "", "quoting"], [175, 7, 1, "", "skipinitialspace"], [175, 7, 1, "", "strict"]], "csv.DictReader": [[175, 7, 1, "", "fieldnames"]], "csv.DictWriter": [[175, 8, 1, "", "writeheader"]], "csv.Sniffer": [[175, 8, 1, "", "has_header"], [175, 8, 1, "", "sniff"]], "csv.csvreader": [[175, 8, 1, "", "__next__"], [175, 7, 1, "", "dialect"], [175, 7, 1, "", "line_num"]], "csv.csvwriter": [[175, 7, 1, "", "dialect"], [175, 8, 1, "", "writerow"], [175, 8, 1, "", "writerows"]], "ctypes": [[176, 6, 1, "", "ArgumentError"], [176, 11, 1, "", "Array"], [176, 11, 1, "", "BigEndianStructure"], [176, 11, 1, "", "BigEndianUnion"], [176, 11, 1, "", "CDLL"], [176, 12, 1, "", "CFUNCTYPE"], [176, 12, 1, "", "DllCanUnloadNow"], [176, 12, 1, "", "DllGetClassObject"], [176, 12, 1, "", "FormatError"], [176, 12, 1, "", "GetLastError"], [176, 11, 1, "", "HRESULT"], [176, 11, 1, "", "LibraryLoader"], [176, 11, 1, "", "LittleEndianStructure"], [176, 11, 1, "", "LittleEndianUnion"], [176, 11, 1, "", "OleDLL"], [176, 12, 1, "", "POINTER"], [176, 12, 1, "", "PYFUNCTYPE"], [176, 11, 1, "", "PyDLL"], [176, 11, 1, "", "Structure"], [176, 11, 1, "", "Union"], [176, 12, 1, "", "WINFUNCTYPE"], [176, 11, 1, "", "WinDLL"], [176, 12, 1, "", "WinError"], [176, 11, 1, "", "_CData"], [176, 11, 1, "", "_FuncPtr"], [176, 11, 1, "", "_Pointer"], [176, 11, 1, "", "_SimpleCData"], [176, 12, 1, "", "addressof"], [176, 12, 1, "", "alignment"], [176, 12, 1, "", "byref"], [176, 11, 1, "", "c_bool"], [176, 11, 1, "", "c_byte"], [176, 11, 1, "", "c_char"], [176, 11, 1, "", "c_char_p"], [176, 11, 1, "", "c_double"], [176, 11, 1, "", "c_float"], [176, 11, 1, "", "c_int"], [176, 11, 1, "", "c_int16"], [176, 11, 1, "", "c_int32"], [176, 11, 1, "", "c_int64"], [176, 11, 1, "", "c_int8"], [176, 11, 1, "", "c_long"], [176, 11, 1, "", "c_longdouble"], [176, 11, 1, "", "c_longlong"], [176, 11, 1, "", "c_short"], [176, 11, 1, "", "c_size_t"], [176, 11, 1, "", "c_ssize_t"], [176, 11, 1, "", "c_time_t"], [176, 11, 1, "", "c_ubyte"], [176, 11, 1, "", "c_uint"], [176, 11, 1, "", "c_uint16"], [176, 11, 1, "", "c_uint32"], [176, 11, 1, "", "c_uint64"], [176, 11, 1, "", "c_uint8"], [176, 11, 1, "", "c_ulong"], [176, 11, 1, "", "c_ulonglong"], [176, 11, 1, "", "c_ushort"], [176, 11, 1, "", "c_void_p"], [176, 11, 1, "", "c_wchar"], [176, 11, 1, "", "c_wchar_p"], [176, 12, 1, "", "cast"], [176, 12, 1, "", "create_string_buffer"], [176, 12, 1, "", "create_unicode_buffer"], [176, 12, 1, "", "get_errno"], [176, 12, 1, "", "get_last_error"], [176, 12, 1, "", "memmove"], [176, 12, 1, "", "memset"], [176, 12, 1, "", "pointer"], [176, 11, 1, "", "py_object"], [176, 12, 1, "", "resize"], [176, 12, 1, "", "set_errno"], [176, 12, 1, "", "set_last_error"], [176, 12, 1, "", "sizeof"], [176, 12, 1, "", "string_at"], [176, 12, 1, "", "wstring_at"]], "ctypes.Array": [[176, 7, 1, "", "_length_"], [176, 7, 1, "", "_type_"]], "ctypes.LibraryLoader": [[176, 8, 1, "", "LoadLibrary"]], "ctypes.PyDLL": [[176, 7, 1, "", "_handle"], [176, 7, 1, "", "_name"]], "ctypes.Structure": [[176, 7, 1, "", "_anonymous_"], [176, 7, 1, "", "_fields_"], [176, 7, 1, "", "_pack_"]], "ctypes._CData": [[176, 7, 1, "", "_b_base_"], [176, 7, 1, "", "_b_needsfree_"], [176, 7, 1, "", "_objects"], [176, 8, 1, "", "from_address"], [176, 8, 1, "", "from_buffer"], [176, 8, 1, "", "from_buffer_copy"], [176, 8, 1, "", "from_param"], [176, 8, 1, "", "in_dll"]], "ctypes._FuncPtr": [[176, 7, 1, "", "argtypes"], [176, 7, 1, "", "errcheck"], [176, 7, 1, "", "restype"]], "ctypes._Pointer": [[176, 7, 1, "", "_type_"], [176, 7, 1, "", "contents"]], "ctypes._SimpleCData": [[176, 7, 1, "", "value"]], "ctypes.util": [[176, 12, 1, "", "find_library"], [176, 12, 1, "", "find_msvcrt"]], "curses": [[177, 9, 1, "", "ACS_BBSS"], [177, 9, 1, "", "ACS_BLOCK"], [177, 9, 1, "", "ACS_BOARD"], [177, 9, 1, "", "ACS_BSBS"], [177, 9, 1, "", "ACS_BSSB"], [177, 9, 1, "", "ACS_BSSS"], [177, 9, 1, "", "ACS_BTEE"], [177, 9, 1, "", "ACS_BULLET"], [177, 9, 1, "", "ACS_CKBOARD"], [177, 9, 1, "", "ACS_DARROW"], [177, 9, 1, "", "ACS_DEGREE"], [177, 9, 1, "", "ACS_DIAMOND"], [177, 9, 1, "", "ACS_GEQUAL"], [177, 9, 1, "", "ACS_HLINE"], [177, 9, 1, "", "ACS_LANTERN"], [177, 9, 1, "", "ACS_LARROW"], [177, 9, 1, "", "ACS_LEQUAL"], [177, 9, 1, "", "ACS_LLCORNER"], [177, 9, 1, "", "ACS_LRCORNER"], [177, 9, 1, "", "ACS_LTEE"], [177, 9, 1, "", "ACS_NEQUAL"], [177, 9, 1, "", "ACS_PI"], [177, 9, 1, "", "ACS_PLMINUS"], [177, 9, 1, "", "ACS_PLUS"], [177, 9, 1, "", "ACS_RARROW"], [177, 9, 1, "", "ACS_RTEE"], [177, 9, 1, "", "ACS_S1"], [177, 9, 1, "", "ACS_S3"], [177, 9, 1, "", "ACS_S7"], [177, 9, 1, "", "ACS_S9"], [177, 9, 1, "", "ACS_SBBS"], [177, 9, 1, "", "ACS_SBSB"], [177, 9, 1, "", "ACS_SBSS"], [177, 9, 1, "", "ACS_SSBB"], [177, 9, 1, "", "ACS_SSBS"], [177, 9, 1, "", "ACS_SSSB"], [177, 9, 1, "", "ACS_SSSS"], [177, 9, 1, "", "ACS_STERLING"], [177, 9, 1, "", "ACS_TTEE"], [177, 9, 1, "", "ACS_UARROW"], [177, 9, 1, "", "ACS_ULCORNER"], [177, 9, 1, "", "ACS_URCORNER"], [177, 9, 1, "", "ACS_VLINE"], [177, 9, 1, "", "A_ALTCHARSET"], [177, 9, 1, "", "A_ATTRIBUTES"], [177, 9, 1, "", "A_BLINK"], [177, 9, 1, "", "A_BOLD"], [177, 9, 1, "", "A_CHARTEXT"], [177, 9, 1, "", "A_COLOR"], [177, 9, 1, "", "A_DIM"], [177, 9, 1, "", "A_HORIZONTAL"], [177, 9, 1, "", "A_INVIS"], [177, 9, 1, "", "A_ITALIC"], [177, 9, 1, "", "A_LEFT"], [177, 9, 1, "", "A_LOW"], [177, 9, 1, "", "A_NORMAL"], [177, 9, 1, "", "A_PROTECT"], [177, 9, 1, "", "A_REVERSE"], [177, 9, 1, "", "A_RIGHT"], [177, 9, 1, "", "A_STANDOUT"], [177, 9, 1, "", "A_TOP"], [177, 9, 1, "", "A_UNDERLINE"], [177, 9, 1, "", "A_VERTICAL"], [177, 9, 1, "", "BUTTON_ALT"], [177, 9, 1, "", "BUTTON_CTRL"], [177, 9, 1, "", "BUTTON_SHIFT"], [177, 9, 1, "", "BUTTONn_CLICKED"], [177, 9, 1, "", "BUTTONn_DOUBLE_CLICKED"], [177, 9, 1, "", "BUTTONn_PRESSED"], [177, 9, 1, "", "BUTTONn_RELEASED"], [177, 9, 1, "", "BUTTONn_TRIPLE_CLICKED"], [177, 9, 1, "", "COLORS"], [177, 9, 1, "", "COLOR_BLACK"], [177, 9, 1, "", "COLOR_BLUE"], [177, 9, 1, "", "COLOR_CYAN"], [177, 9, 1, "", "COLOR_GREEN"], [177, 9, 1, "", "COLOR_MAGENTA"], [177, 9, 1, "", "COLOR_PAIRS"], [177, 9, 1, "", "COLOR_RED"], [177, 9, 1, "", "COLOR_WHITE"], [177, 9, 1, "", "COLOR_YELLOW"], [177, 9, 1, "", "COLS"], [177, 9, 1, "", "ERR"], [177, 9, 1, "", "KEY_A1"], [177, 9, 1, "", "KEY_A3"], [177, 9, 1, "", "KEY_B2"], [177, 9, 1, "", "KEY_BACKSPACE"], [177, 9, 1, "", "KEY_BEG"], [177, 9, 1, "", "KEY_BREAK"], [177, 9, 1, "", "KEY_BTAB"], [177, 9, 1, "", "KEY_C1"], [177, 9, 1, "", "KEY_C3"], [177, 9, 1, "", "KEY_CANCEL"], [177, 9, 1, "", "KEY_CATAB"], [177, 9, 1, "", "KEY_CLEAR"], [177, 9, 1, "", "KEY_CLOSE"], [177, 9, 1, "", "KEY_COMMAND"], [177, 9, 1, "", "KEY_COPY"], [177, 9, 1, "", "KEY_CREATE"], [177, 9, 1, "", "KEY_CTAB"], [177, 9, 1, "", "KEY_DC"], [177, 9, 1, "", "KEY_DL"], [177, 9, 1, "", "KEY_DOWN"], [177, 9, 1, "", "KEY_EIC"], [177, 9, 1, "", "KEY_END"], [177, 9, 1, "", "KEY_ENTER"], [177, 9, 1, "", "KEY_EOL"], [177, 9, 1, "", "KEY_EOS"], [177, 9, 1, "", "KEY_EXIT"], [177, 9, 1, "", "KEY_F0"], [177, 9, 1, "", "KEY_FIND"], [177, 9, 1, "", "KEY_Fn"], [177, 9, 1, "", "KEY_HELP"], [177, 9, 1, "", "KEY_HOME"], [177, 9, 1, "", "KEY_IC"], [177, 9, 1, "", "KEY_IL"], [177, 9, 1, "", "KEY_LEFT"], [177, 9, 1, "", "KEY_LL"], [177, 9, 1, "", "KEY_MARK"], [177, 9, 1, "", "KEY_MAX"], [177, 9, 1, "", "KEY_MESSAGE"], [177, 9, 1, "", "KEY_MIN"], [177, 9, 1, "", "KEY_MOUSE"], [177, 9, 1, "", "KEY_MOVE"], [177, 9, 1, "", "KEY_NEXT"], [177, 9, 1, "", "KEY_NPAGE"], [177, 9, 1, "", "KEY_OPEN"], [177, 9, 1, "", "KEY_OPTIONS"], [177, 9, 1, "", "KEY_PPAGE"], [177, 9, 1, "", "KEY_PREVIOUS"], [177, 9, 1, "", "KEY_PRINT"], [177, 9, 1, "", "KEY_REDO"], [177, 9, 1, "", "KEY_REFERENCE"], [177, 9, 1, "", "KEY_REFRESH"], [177, 9, 1, "", "KEY_REPLACE"], [177, 9, 1, "", "KEY_RESET"], [177, 9, 1, "", "KEY_RESIZE"], [177, 9, 1, "", "KEY_RESTART"], [177, 9, 1, "", "KEY_RESUME"], [177, 9, 1, "", "KEY_RIGHT"], [177, 9, 1, "", "KEY_SAVE"], [177, 9, 1, "", "KEY_SBEG"], [177, 9, 1, "", "KEY_SCANCEL"], [177, 9, 1, "", "KEY_SCOMMAND"], [177, 9, 1, "", "KEY_SCOPY"], [177, 9, 1, "", "KEY_SCREATE"], [177, 9, 1, "", "KEY_SDC"], [177, 9, 1, "", "KEY_SDL"], [177, 9, 1, "", "KEY_SELECT"], [177, 9, 1, "", "KEY_SEND"], [177, 9, 1, "", "KEY_SEOL"], [177, 9, 1, "", "KEY_SEXIT"], [177, 9, 1, "", "KEY_SF"], [177, 9, 1, "", "KEY_SFIND"], [177, 9, 1, "", "KEY_SHELP"], [177, 9, 1, "", "KEY_SHOME"], [177, 9, 1, "", "KEY_SIC"], [177, 9, 1, "", "KEY_SLEFT"], [177, 9, 1, "", "KEY_SMESSAGE"], [177, 9, 1, "", "KEY_SMOVE"], [177, 9, 1, "", "KEY_SNEXT"], [177, 9, 1, "", "KEY_SOPTIONS"], [177, 9, 1, "", "KEY_SPREVIOUS"], [177, 9, 1, "", "KEY_SPRINT"], [177, 9, 1, "", "KEY_SR"], [177, 9, 1, "", "KEY_SREDO"], [177, 9, 1, "", "KEY_SREPLACE"], [177, 9, 1, "", "KEY_SRESET"], [177, 9, 1, "", "KEY_SRIGHT"], [177, 9, 1, "", "KEY_SRSUME"], [177, 9, 1, "", "KEY_SSAVE"], [177, 9, 1, "", "KEY_SSUSPEND"], [177, 9, 1, "", "KEY_STAB"], [177, 9, 1, "", "KEY_SUNDO"], [177, 9, 1, "", "KEY_SUSPEND"], [177, 9, 1, "", "KEY_UNDO"], [177, 9, 1, "", "KEY_UP"], [177, 9, 1, "", "LINES"], [177, 9, 1, "", "OK"], [177, 9, 1, "", "__version__"], [178, 10, 0, "-", "ascii"], [177, 12, 1, "", "baudrate"], [177, 12, 1, "", "beep"], [177, 12, 1, "", "can_change_color"], [177, 12, 1, "", "cbreak"], [177, 12, 1, "", "color_content"], [177, 12, 1, "", "color_pair"], [177, 12, 1, "", "curs_set"], [177, 12, 1, "", "def_prog_mode"], [177, 12, 1, "", "def_shell_mode"], [177, 12, 1, "", "delay_output"], [177, 12, 1, "", "doupdate"], [177, 12, 1, "", "echo"], [177, 12, 1, "", "endwin"], [177, 12, 1, "", "erasechar"], [177, 6, 1, "", "error"], [177, 12, 1, "", "filter"], [177, 12, 1, "", "flash"], [177, 12, 1, "", "flushinp"], [177, 12, 1, "", "get_escdelay"], [177, 12, 1, "", "get_tabsize"], [177, 12, 1, "", "getmouse"], [177, 12, 1, "", "getsyx"], [177, 12, 1, "", "getwin"], [177, 12, 1, "", "halfdelay"], [177, 12, 1, "", "has_colors"], [177, 12, 1, "", "has_extended_color_support"], [177, 12, 1, "", "has_ic"], [177, 12, 1, "", "has_il"], [177, 12, 1, "", "has_key"], [177, 12, 1, "", "init_color"], [177, 12, 1, "", "init_pair"], [177, 12, 1, "", "initscr"], [177, 12, 1, "", "is_term_resized"], [177, 12, 1, "", "isendwin"], [177, 12, 1, "", "keyname"], [177, 12, 1, "", "killchar"], [177, 12, 1, "", "longname"], [177, 12, 1, "", "meta"], [177, 12, 1, "", "mouseinterval"], [177, 12, 1, "", "mousemask"], [177, 12, 1, "", "napms"], [177, 9, 1, "", "ncurses_version"], [177, 12, 1, "", "newpad"], [177, 12, 1, "", "newwin"], [177, 12, 1, "", "nl"], [177, 12, 1, "", "nocbreak"], [177, 12, 1, "", "noecho"], [177, 12, 1, "", "nonl"], [177, 12, 1, "", "noqiflush"], [177, 12, 1, "", "noraw"], [177, 12, 1, "", "pair_content"], [177, 12, 1, "", "pair_number"], [179, 10, 0, "-", "panel"], [177, 12, 1, "", "putp"], [177, 12, 1, "", "qiflush"], [177, 12, 1, "", "raw"], [177, 12, 1, "", "reset_prog_mode"], [177, 12, 1, "", "reset_shell_mode"], [177, 12, 1, "", "resetty"], [177, 12, 1, "", "resize_term"], [177, 12, 1, "", "resizeterm"], [177, 12, 1, "", "savetty"], [177, 12, 1, "", "set_escdelay"], [177, 12, 1, "", "set_tabsize"], [177, 12, 1, "", "setsyx"], [177, 12, 1, "", "setupterm"], [177, 12, 1, "", "start_color"], [177, 12, 1, "", "termattrs"], [177, 12, 1, "", "termname"], [177, 10, 0, "-", "textpad"], [177, 12, 1, "", "tigetflag"], [177, 12, 1, "", "tigetnum"], [177, 12, 1, "", "tigetstr"], [177, 12, 1, "", "tparm"], [177, 12, 1, "", "typeahead"], [177, 12, 1, "", "unctrl"], [177, 12, 1, "", "unget_wch"], [177, 12, 1, "", "ungetch"], [177, 12, 1, "", "ungetmouse"], [177, 12, 1, "", "update_lines_cols"], [177, 12, 1, "", "use_default_colors"], [177, 12, 1, "", "use_env"], [177, 9, 1, "", "version"], [177, 12, 1, "", "wrapper"]], "curses.ascii": [[178, 9, 1, "", "ACK"], [178, 9, 1, "", "BEL"], [178, 9, 1, "", "BS"], [178, 9, 1, "", "CAN"], [178, 9, 1, "", "CR"], [178, 9, 1, "", "DC1"], [178, 9, 1, "", "DC2"], [178, 9, 1, "", "DC3"], [178, 9, 1, "", "DC4"], [178, 9, 1, "", "DEL"], [178, 9, 1, "", "DLE"], [178, 9, 1, "", "EM"], [178, 9, 1, "", "ENQ"], [178, 9, 1, "", "EOT"], [178, 9, 1, "", "ESC"], [178, 9, 1, "", "ETB"], [178, 9, 1, "", "ETX"], [178, 9, 1, "", "FF"], [178, 9, 1, "", "FS"], [178, 9, 1, "", "GS"], [178, 9, 1, "", "HT"], [178, 9, 1, "", "LF"], [178, 9, 1, "", "NAK"], [178, 9, 1, "", "NL"], [178, 9, 1, "", "NUL"], [178, 9, 1, "", "RS"], [178, 9, 1, "", "SI"], [178, 9, 1, "", "SO"], [178, 9, 1, "", "SOH"], [178, 9, 1, "", "SP"], [178, 9, 1, "", "STX"], [178, 9, 1, "", "SUB"], [178, 9, 1, "", "SYN"], [178, 9, 1, "", "TAB"], [178, 9, 1, "", "US"], [178, 9, 1, "", "VT"], [178, 12, 1, "", "alt"], [178, 12, 1, "", "ascii"], [178, 9, 1, "", "controlnames"], [178, 12, 1, "", "ctrl"], [178, 12, 1, "", "isalnum"], [178, 12, 1, "", "isalpha"], [178, 12, 1, "", "isascii"], [178, 12, 1, "", "isblank"], [178, 12, 1, "", "iscntrl"], [178, 12, 1, "", "isctrl"], [178, 12, 1, "", "isdigit"], [178, 12, 1, "", "isgraph"], [178, 12, 1, "", "islower"], [178, 12, 1, "", "ismeta"], [178, 12, 1, "", "isprint"], [178, 12, 1, "", "ispunct"], [178, 12, 1, "", "isspace"], [178, 12, 1, "", "isupper"], [178, 12, 1, "", "isxdigit"], [178, 12, 1, "", "unctrl"]], "curses.panel.Panel": [[179, 8, 1, "", "above"], [179, 8, 1, "", "below"], [179, 8, 1, "", "bottom"], [179, 8, 1, "", "hidden"], [179, 8, 1, "", "hide"], [179, 8, 1, "", "move"], [179, 8, 1, "", "replace"], [179, 8, 1, "", "set_userptr"], [179, 8, 1, "", "show"], [179, 8, 1, "", "top"], [179, 8, 1, "", "userptr"], [179, 8, 1, "", "window"]], "curses.panel": [[179, 12, 1, "", "bottom_panel"], [179, 12, 1, "", "new_panel"], [179, 12, 1, "", "top_panel"], [179, 12, 1, "", "update_panels"]], "curses.textpad": [[177, 11, 1, "", "Textbox"], [177, 12, 1, "", "rectangle"]], "curses.textpad.Textbox": [[177, 8, 1, "", "do_command"], [177, 8, 1, "", "edit"], [177, 8, 1, "", "gather"], [177, 7, 1, "", "stripspaces"]], "curses.window": [[177, 8, 1, "", "addch"], [177, 8, 1, "", "addnstr"], [177, 8, 1, "", "addstr"], [177, 8, 1, "", "attroff"], [177, 8, 1, "", "attron"], [177, 8, 1, "", "attrset"], [177, 8, 1, "", "bkgd"], [177, 8, 1, "", "bkgdset"], [177, 8, 1, "", "border"], [177, 8, 1, "", "box"], [177, 8, 1, "", "chgat"], [177, 8, 1, "", "clear"], [177, 8, 1, "", "clearok"], [177, 8, 1, "", "clrtobot"], [177, 8, 1, "", "clrtoeol"], [177, 8, 1, "", "cursyncup"], [177, 8, 1, "", "delch"], [177, 8, 1, "", "deleteln"], [177, 8, 1, "", "derwin"], [177, 8, 1, "", "echochar"], [177, 8, 1, "", "enclose"], [177, 7, 1, "", "encoding"], [177, 8, 1, "", "erase"], [177, 8, 1, "", "get_wch"], [177, 8, 1, "", "getbegyx"], [177, 8, 1, "", "getbkgd"], [177, 8, 1, "", "getch"], [177, 8, 1, "", "getkey"], [177, 8, 1, "", "getmaxyx"], [177, 8, 1, "", "getparyx"], [177, 8, 1, "", "getstr"], [177, 8, 1, "", "getyx"], [177, 8, 1, "", "hline"], [177, 8, 1, "", "idcok"], [177, 8, 1, "", "idlok"], [177, 8, 1, "", "immedok"], [177, 8, 1, "", "inch"], [177, 8, 1, "", "insch"], [177, 8, 1, "", "insdelln"], [177, 8, 1, "", "insertln"], [177, 8, 1, "", "insnstr"], [177, 8, 1, "", "insstr"], [177, 8, 1, "", "instr"], [177, 8, 1, "", "is_linetouched"], [177, 8, 1, "", "is_wintouched"], [177, 8, 1, "", "keypad"], [177, 8, 1, "", "leaveok"], [177, 8, 1, "", "move"], [177, 8, 1, "", "mvderwin"], [177, 8, 1, "", "mvwin"], [177, 8, 1, "", "nodelay"], [177, 8, 1, "", "notimeout"], [177, 8, 1, "", "noutrefresh"], [177, 8, 1, "", "overlay"], [177, 8, 1, "", "overwrite"], [177, 8, 1, "", "putwin"], [177, 8, 1, "", "redrawln"], [177, 8, 1, "", "redrawwin"], [177, 8, 1, "", "refresh"], [177, 8, 1, "", "resize"], [177, 8, 1, "", "scroll"], [177, 8, 1, "", "scrollok"], [177, 8, 1, "", "setscrreg"], [177, 8, 1, "", "standend"], [177, 8, 1, "", "standout"], [177, 8, 1, "", "subpad"], [177, 8, 1, "", "subwin"], [177, 8, 1, "", "syncdown"], [177, 8, 1, "", "syncok"], [177, 8, 1, "", "syncup"], [177, 8, 1, "", "timeout"], [177, 8, 1, "", "touchline"], [177, 8, 1, "", "touchwin"], [177, 8, 1, "", "untouchwin"], [177, 8, 1, "", "vline"]], "dataclasses": [[181, 11, 1, "", "Field"], [181, 6, 1, "", "FrozenInstanceError"], [181, 9, 1, "", "KW_ONLY"], [181, 9, 1, "", "MISSING"], [181, 12, 1, "", "__post_init__"], [181, 12, 1, "", "asdict"], [181, 12, 1, "", "astuple"], [181, 12, 1, "", "dataclass"], [181, 12, 1, "", "field"], [181, 12, 1, "", "fields"], [181, 12, 1, "", "is_dataclass"], [181, 12, 1, "", "make_dataclass"], [181, 12, 1, "", "replace"]], "datetime": [[183, 9, 1, "", "MAXYEAR"], [183, 9, 1, "", "MINYEAR"], [183, 7, 1, "", "UTC"], [183, 11, 1, "", "date"], [183, 11, 1, "", "datetime"], [183, 11, 1, "", "time"], [183, 11, 1, "", "timedelta"], [183, 11, 1, "", "timezone"], [183, 11, 1, "", "tzinfo"]], "datetime.date": [[183, 8, 1, "", "__format__"], [183, 8, 1, "", "__str__"], [183, 8, 1, "", "ctime"], [183, 7, 1, "", "day"], [183, 8, 1, "", "fromisocalendar"], [183, 8, 1, "", "fromisoformat"], [183, 8, 1, "", "fromordinal"], [183, 8, 1, "", "fromtimestamp"], [183, 8, 1, "", "isocalendar"], [183, 8, 1, "", "isoformat"], [183, 8, 1, "", "isoweekday"], [183, 7, 1, "", "max"], [183, 7, 1, "", "min"], [183, 7, 1, "", "month"], [183, 8, 1, "", "replace"], [183, 7, 1, "", "resolution"], [183, 8, 1, "", "strftime"], [183, 8, 1, "", "timetuple"], [183, 8, 1, "", "today"], [183, 8, 1, "", "toordinal"], [183, 8, 1, "", "weekday"], [183, 7, 1, "", "year"]], "datetime.datetime": [[183, 8, 1, "", "__format__"], [183, 8, 1, "", "__str__"], [183, 8, 1, "", "astimezone"], [183, 8, 1, "", "combine"], [183, 8, 1, "", "ctime"], [183, 8, 1, "", "date"], [183, 7, 1, "", "day"], [183, 8, 1, "", "dst"], [183, 7, 1, "", "fold"], [183, 8, 1, "", "fromisocalendar"], [183, 8, 1, "", "fromisoformat"], [183, 8, 1, "", "fromordinal"], [183, 8, 1, "", "fromtimestamp"], [183, 7, 1, "", "hour"], [183, 8, 1, "", "isocalendar"], [183, 8, 1, "", "isoformat"], [183, 8, 1, "", "isoweekday"], [183, 7, 1, "", "max"], [183, 7, 1, "", "microsecond"], [183, 7, 1, "", "min"], [183, 7, 1, "", "minute"], [183, 7, 1, "", "month"], [183, 8, 1, "", "now"], [183, 8, 1, "", "replace"], [183, 7, 1, "", "resolution"], [183, 7, 1, "", "second"], [183, 8, 1, "", "strftime"], [183, 8, 1, "", "strptime"], [183, 8, 1, "", "time"], [183, 8, 1, "", "timestamp"], [183, 8, 1, "", "timetuple"], [183, 8, 1, "", "timetz"], [183, 8, 1, "", "today"], [183, 8, 1, "", "toordinal"], [183, 7, 1, "", "tzinfo"], [183, 8, 1, "", "tzname"], [183, 8, 1, "", "utcfromtimestamp"], [183, 8, 1, "", "utcnow"], [183, 8, 1, "", "utcoffset"], [183, 8, 1, "", "utctimetuple"], [183, 8, 1, "", "weekday"], [183, 7, 1, "", "year"]], "datetime.time": [[183, 8, 1, "", "__format__"], [183, 8, 1, "", "__str__"], [183, 8, 1, "", "dst"], [183, 7, 1, "", "fold"], [183, 8, 1, "", "fromisoformat"], [183, 7, 1, "", "hour"], [183, 8, 1, "", "isoformat"], [183, 7, 1, "", "max"], [183, 7, 1, "", "microsecond"], [183, 7, 1, "", "min"], [183, 7, 1, "", "minute"], [183, 8, 1, "", "replace"], [183, 7, 1, "", "resolution"], [183, 7, 1, "", "second"], [183, 8, 1, "", "strftime"], [183, 7, 1, "", "tzinfo"], [183, 8, 1, "", "tzname"], [183, 8, 1, "", "utcoffset"]], "datetime.timedelta": [[183, 7, 1, "", "max"], [183, 7, 1, "", "min"], [183, 7, 1, "", "resolution"], [183, 8, 1, "", "total_seconds"]], "datetime.timezone": [[183, 8, 1, "", "dst"], [183, 8, 1, "", "fromutc"], [183, 8, 1, "", "tzname"], [183, 7, 1, "", "utc"], [183, 8, 1, "", "utcoffset"]], "datetime.tzinfo": [[183, 8, 1, "", "dst"], [183, 8, 1, "", "fromutc"], [183, 8, 1, "", "tzname"], [183, 8, 1, "", "utcoffset"]], "dbm": [[184, 10, 0, "-", "dumb"], [184, 6, 1, "", "error"], [184, 10, 0, "-", "gnu"], [184, 10, 0, "-", "ndbm"], [184, 12, 1, "", "open"], [184, 12, 1, "", "whichdb"]], "dbm.dumb.dumbdbm": [[184, 8, 1, "", "close"], [184, 8, 1, "", "sync"]], "dbm.dumb": [[184, 6, 1, "", "error"], [184, 12, 1, "", "open"]], "dbm.gnu": [[184, 6, 1, "", "error"], [184, 12, 1, "", "open"], [184, 9, 1, "", "open_flags"]], "dbm.gnu.gdbm": [[184, 8, 1, "", "close"], [184, 8, 1, "", "firstkey"], [184, 8, 1, "", "nextkey"], [184, 8, 1, "", "reorganize"], [184, 8, 1, "", "sync"]], "dbm.ndbm": [[184, 6, 1, "", "error"], [184, 9, 1, "", "library"], [184, 12, 1, "", "open"]], "dbm.ndbm.ndbm": [[184, 8, 1, "", "close"]], "decimal": [[186, 11, 1, "", "BasicContext"], [186, 11, 1, "", "Clamped"], [186, 11, 1, "", "Context"], [186, 11, 1, "", "Decimal"], [186, 11, 1, "", "DecimalException"], [186, 11, 1, "", "DefaultContext"], [186, 11, 1, "", "DivisionByZero"], [186, 11, 1, "", "ExtendedContext"], [186, 11, 1, "", "FloatOperation"], [186, 9, 1, "", "HAVE_CONTEXTVAR"], [186, 9, 1, "", "HAVE_THREADS"], [186, 11, 1, "", "Inexact"], [186, 11, 1, "", "InvalidOperation"], [186, 9, 1, "", "MAX_EMAX"], [186, 9, 1, "", "MAX_PREC"], [186, 9, 1, "", "MIN_EMIN"], [186, 9, 1, "", "MIN_ETINY"], [186, 11, 1, "", "Overflow"], [186, 9, 1, "", "ROUND_05UP"], [186, 9, 1, "", "ROUND_CEILING"], [186, 9, 1, "", "ROUND_DOWN"], [186, 9, 1, "", "ROUND_FLOOR"], [186, 9, 1, "", "ROUND_HALF_DOWN"], [186, 9, 1, "", "ROUND_HALF_EVEN"], [186, 9, 1, "", "ROUND_HALF_UP"], [186, 9, 1, "", "ROUND_UP"], [186, 11, 1, "", "Rounded"], [186, 11, 1, "", "Subnormal"], [186, 11, 1, "", "Underflow"], [186, 12, 1, "", "getcontext"], [186, 12, 1, "", "localcontext"], [186, 12, 1, "", "setcontext"]], "decimal.Context": [[186, 8, 1, "", "Etiny"], [186, 8, 1, "", "Etop"], [186, 8, 1, "", "abs"], [186, 8, 1, "", "add"], [186, 8, 1, "", "canonical"], [186, 8, 1, "", "clear_flags"], [186, 8, 1, "", "clear_traps"], [186, 8, 1, "", "compare"], [186, 8, 1, "", "compare_signal"], [186, 8, 1, "", "compare_total"], [186, 8, 1, "", "compare_total_mag"], [186, 8, 1, "", "copy"], [186, 8, 1, "", "copy_abs"], [186, 8, 1, "", "copy_decimal"], [186, 8, 1, "", "copy_negate"], [186, 8, 1, "", "copy_sign"], [186, 8, 1, "", "create_decimal"], [186, 8, 1, "", "create_decimal_from_float"], [186, 8, 1, "", "divide"], [186, 8, 1, "", "divide_int"], [186, 8, 1, "", "divmod"], [186, 8, 1, "", "exp"], [186, 8, 1, "", "fma"], [186, 8, 1, "", "is_canonical"], [186, 8, 1, "", "is_finite"], [186, 8, 1, "", "is_infinite"], [186, 8, 1, "", "is_nan"], [186, 8, 1, "", "is_normal"], [186, 8, 1, "", "is_qnan"], [186, 8, 1, "", "is_signed"], [186, 8, 1, "", "is_snan"], [186, 8, 1, "", "is_subnormal"], [186, 8, 1, "", "is_zero"], [186, 8, 1, "", "ln"], [186, 8, 1, "", "log10"], [186, 8, 1, "", "logb"], [186, 8, 1, "", "logical_and"], [186, 8, 1, "", "logical_invert"], [186, 8, 1, "", "logical_or"], [186, 8, 1, "", "logical_xor"], [186, 8, 1, "", "max"], [186, 8, 1, "", "max_mag"], [186, 8, 1, "", "min"], [186, 8, 1, "", "min_mag"], [186, 8, 1, "", "minus"], [186, 8, 1, "", "multiply"], [186, 8, 1, "", "next_minus"], [186, 8, 1, "", "next_plus"], [186, 8, 1, "", "next_toward"], [186, 8, 1, "", "normalize"], [186, 8, 1, "", "number_class"], [186, 8, 1, "", "plus"], [186, 8, 1, "", "power"], [186, 8, 1, "", "quantize"], [186, 8, 1, "", "radix"], [186, 8, 1, "", "remainder"], [186, 8, 1, "", "remainder_near"], [186, 8, 1, "", "rotate"], [186, 8, 1, "", "same_quantum"], [186, 8, 1, "", "scaleb"], [186, 8, 1, "", "shift"], [186, 8, 1, "", "sqrt"], [186, 8, 1, "", "subtract"], [186, 8, 1, "", "to_eng_string"], [186, 8, 1, "", "to_integral_exact"], [186, 8, 1, "", "to_sci_string"]], "decimal.Decimal": [[186, 8, 1, "", "adjusted"], [186, 8, 1, "", "as_integer_ratio"], [186, 8, 1, "", "as_tuple"], [186, 8, 1, "", "canonical"], [186, 8, 1, "", "compare"], [186, 8, 1, "", "compare_signal"], [186, 8, 1, "", "compare_total"], [186, 8, 1, "", "compare_total_mag"], [186, 8, 1, "", "conjugate"], [186, 8, 1, "", "copy_abs"], [186, 8, 1, "", "copy_negate"], [186, 8, 1, "", "copy_sign"], [186, 8, 1, "", "exp"], [186, 8, 1, "", "fma"], [186, 8, 1, "", "from_float"], [186, 8, 1, "", "is_canonical"], [186, 8, 1, "", "is_finite"], [186, 8, 1, "", "is_infinite"], [186, 8, 1, "", "is_nan"], [186, 8, 1, "", "is_normal"], [186, 8, 1, "", "is_qnan"], [186, 8, 1, "", "is_signed"], [186, 8, 1, "", "is_snan"], [186, 8, 1, "", "is_subnormal"], [186, 8, 1, "", "is_zero"], [186, 8, 1, "", "ln"], [186, 8, 1, "", "log10"], [186, 8, 1, "", "logb"], [186, 8, 1, "", "logical_and"], [186, 8, 1, "", "logical_invert"], [186, 8, 1, "", "logical_or"], [186, 8, 1, "", "logical_xor"], [186, 8, 1, "", "max"], [186, 8, 1, "", "max_mag"], [186, 8, 1, "", "min"], [186, 8, 1, "", "min_mag"], [186, 8, 1, "", "next_minus"], [186, 8, 1, "", "next_plus"], [186, 8, 1, "", "next_toward"], [186, 8, 1, "", "normalize"], [186, 8, 1, "", "number_class"], [186, 8, 1, "", "quantize"], [186, 8, 1, "", "radix"], [186, 8, 1, "", "remainder_near"], [186, 8, 1, "", "rotate"], [186, 8, 1, "", "same_quantum"], [186, 8, 1, "", "scaleb"], [186, 8, 1, "", "shift"], [186, 8, 1, "", "sqrt"], [186, 8, 1, "", "to_eng_string"], [186, 8, 1, "", "to_integral"], [186, 8, 1, "", "to_integral_exact"], [186, 8, 1, "", "to_integral_value"]], "definition": [[344, 7, 1, "", "__name__"], [344, 7, 1, "", "__qualname__"], [344, 7, 1, "", "__type_params__"]], "dict": [[344, 8, 1, "", "clear"], [344, 8, 1, "", "copy"], [344, 8, 1, "", "fromkeys"], [344, 8, 1, "", "get"], [344, 8, 1, "", "items"], [344, 8, 1, "", "keys"], [344, 8, 1, "", "pop"], [344, 8, 1, "", "popitem"], [344, 8, 1, "", "setdefault"], [344, 8, 1, "", "update"], [344, 8, 1, "", "values"]], "difflib": [[190, 11, 1, "", "Differ"], [190, 11, 1, "", "HtmlDiff"], [190, 12, 1, "", "IS_CHARACTER_JUNK"], [190, 12, 1, "", "IS_LINE_JUNK"], [190, 11, 1, "", "SequenceMatcher"], [190, 12, 1, "", "context_diff"], [190, 12, 1, "", "diff_bytes"], [190, 12, 1, "", "get_close_matches"], [190, 12, 1, "", "ndiff"], [190, 12, 1, "", "restore"], [190, 12, 1, "", "unified_diff"]], "difflib.Differ": [[190, 8, 1, "", "compare"]], "difflib.HtmlDiff": [[190, 8, 1, "", "__init__"], [190, 8, 1, "", "make_file"], [190, 8, 1, "", "make_table"]], "difflib.SequenceMatcher": [[190, 8, 1, "", "find_longest_match"], [190, 8, 1, "", "get_grouped_opcodes"], [190, 8, 1, "", "get_matching_blocks"], [190, 8, 1, "", "get_opcodes"], [190, 8, 1, "", "quick_ratio"], [190, 8, 1, "", "ratio"], [190, 8, 1, "", "real_quick_ratio"], [190, 8, 1, "", "set_seq1"], [190, 8, 1, "", "set_seq2"], [190, 8, 1, "", "set_seqs"]], "dis": [[191, 11, 1, "", "Bytecode"], [191, 11, 1, "", "Instruction"], [191, 11, 1, "", "Positions"], [191, 9, 1, "", "cmp_op"], [191, 12, 1, "", "code_info"], [191, 12, 1, "", "dis"], [191, 12, 1, "", "disassemble"], [191, 12, 1, "", "disco"], [191, 12, 1, "", "distb"], [191, 12, 1, "", "findlabels"], [191, 12, 1, "", "findlinestarts"], [191, 12, 1, "", "get_instructions"], [191, 9, 1, "", "hasarg"], [191, 9, 1, "", "hascompare"], [191, 9, 1, "", "hasconst"], [191, 9, 1, "", "hasexc"], [191, 9, 1, "", "hasfree"], [191, 9, 1, "", "hasjabs"], [191, 9, 1, "", "hasjrel"], [191, 9, 1, "", "haslocal"], [191, 9, 1, "", "hasname"], [191, 9, 1, "", "opmap"], [191, 9, 1, "", "opname"], [191, 12, 1, "", "show_code"], [191, 12, 1, "", "stack_effect"], [191, 14, 1, "cmdoption-dis-h", "--help"], [191, 14, 1, "cmdoption-dis-h", "-h"]], "dis.Bytecode": [[191, 9, 1, "", "codeobj"], [191, 8, 1, "", "dis"], [191, 9, 1, "", "first_line"], [191, 8, 1, "", "from_traceback"], [191, 8, 1, "", "info"]], "dis.Instruction": [[191, 9, 1, "", "arg"], [191, 9, 1, "", "argrepr"], [191, 9, 1, "", "argval"], [191, 9, 1, "", "is_jump_target"], [191, 9, 1, "", "offset"], [191, 9, 1, "", "opcode"], [191, 9, 1, "", "opname"], [191, 9, 1, "", "positions"], [191, 9, 1, "", "starts_line"]], "dis.Positions": [[191, 9, 1, "", "col_offset"], [191, 9, 1, "", "end_col_offset"], [191, 9, 1, "", "end_lineno"], [191, 9, 1, "", "lineno"]], "doctest": [[193, 9, 1, "", "COMPARISON_FLAGS"], [193, 9, 1, "", "DONT_ACCEPT_BLANKLINE"], [193, 9, 1, "", "DONT_ACCEPT_TRUE_FOR_1"], [193, 11, 1, "", "DebugRunner"], [193, 12, 1, "", "DocFileSuite"], [193, 11, 1, "", "DocTest"], [193, 6, 1, "", "DocTestFailure"], [193, 11, 1, "", "DocTestFinder"], [193, 11, 1, "", "DocTestParser"], [193, 11, 1, "", "DocTestRunner"], [193, 12, 1, "", "DocTestSuite"], [193, 9, 1, "", "ELLIPSIS"], [193, 11, 1, "", "Example"], [193, 9, 1, "", "FAIL_FAST"], [193, 9, 1, "", "IGNORE_EXCEPTION_DETAIL"], [193, 9, 1, "", "NORMALIZE_WHITESPACE"], [193, 11, 1, "", "OutputChecker"], [193, 9, 1, "", "REPORTING_FLAGS"], [193, 9, 1, "", "REPORT_CDIFF"], [193, 9, 1, "", "REPORT_NDIFF"], [193, 9, 1, "", "REPORT_ONLY_FIRST_FAILURE"], [193, 9, 1, "", "REPORT_UDIFF"], [193, 9, 1, "", "SKIP"], [193, 6, 1, "", "UnexpectedException"], [193, 12, 1, "", "debug"], [193, 12, 1, "", "debug_src"], [193, 6, 1, "", "failureException"], [193, 12, 1, "", "register_optionflag"], [193, 12, 1, "", "run_docstring_examples"], [193, 12, 1, "", "script_from_examples"], [193, 12, 1, "", "set_unittest_reportflags"], [193, 12, 1, "", "testfile"], [193, 12, 1, "", "testmod"], [193, 12, 1, "", "testsource"]], "doctest.DocTest": [[193, 7, 1, "", "docstring"], [193, 7, 1, "", "examples"], [193, 7, 1, "", "filename"], [193, 7, 1, "", "globs"], [193, 7, 1, "", "lineno"], [193, 7, 1, "", "name"]], "doctest.DocTestFailure": [[193, 7, 1, "", "example"], [193, 7, 1, "", "got"], [193, 7, 1, "", "test"]], "doctest.DocTestFinder": [[193, 8, 1, "", "find"]], "doctest.DocTestParser": [[193, 8, 1, "", "get_doctest"], [193, 8, 1, "", "get_examples"], [193, 8, 1, "", "parse"]], "doctest.DocTestRunner": [[193, 8, 1, "", "report_failure"], [193, 8, 1, "", "report_start"], [193, 8, 1, "", "report_success"], [193, 8, 1, "", "report_unexpected_exception"], [193, 8, 1, "", "run"], [193, 8, 1, "", "summarize"]], "doctest.Example": [[193, 7, 1, "", "exc_msg"], [193, 7, 1, "", "indent"], [193, 7, 1, "", "lineno"], [193, 7, 1, "", "options"], [193, 7, 1, "", "source"], [193, 7, 1, "", "want"]], "doctest.OutputChecker": [[193, 8, 1, "", "check_output"], [193, 8, 1, "", "output_difference"]], "doctest.UnexpectedException": [[193, 7, 1, "", "example"], [193, 7, 1, "", "exc_info"], [193, 7, 1, "", "test"]], "email": [[195, 10, 0, "-", "charset"], [197, 10, 0, "-", "contentmanager"], [198, 10, 0, "-", "encoders"], [199, 10, 0, "-", "errors"], [201, 10, 0, "-", "generator"], [202, 10, 0, "-", "header"], [203, 10, 0, "-", "headerregistry"], [204, 10, 0, "-", "iterators"], [205, 10, 0, "-", "message"], [207, 12, 1, "", "message_from_binary_file"], [207, 12, 1, "", "message_from_bytes"], [207, 12, 1, "", "message_from_file"], [207, 12, 1, "", "message_from_string"], [206, 10, 0, "-", "mime"], [207, 10, 0, "-", "parser"], [208, 10, 0, "-", "policy"], [209, 10, 0, "-", "utils"]], "email.charset": [[195, 11, 1, "", "Charset"], [195, 12, 1, "", "add_alias"], [195, 12, 1, "", "add_charset"], [195, 12, 1, "", "add_codec"]], "email.charset.Charset": [[195, 8, 1, "", "__eq__"], [195, 8, 1, "", "__ne__"], [195, 8, 1, "", "__str__"], [195, 8, 1, "", "body_encode"], [195, 7, 1, "", "body_encoding"], [195, 8, 1, "", "get_body_encoding"], [195, 8, 1, "", "get_output_charset"], [195, 8, 1, "", "header_encode"], [195, 8, 1, "", "header_encode_lines"], [195, 7, 1, "", "header_encoding"], [195, 7, 1, "", "input_charset"], [195, 7, 1, "", "input_codec"], [195, 7, 1, "", "output_charset"], [195, 7, 1, "", "output_codec"]], "email.contentmanager": [[197, 11, 1, "", "ContentManager"], [197, 8, 1, "", "get_content"], [197, 9, 1, "", "raw_data_manager"], [197, 8, 1, "", "set_content"]], "email.contentmanager.ContentManager": [[197, 8, 1, "", "add_get_handler"], [197, 8, 1, "", "add_set_handler"], [197, 8, 1, "", "get_content"], [197, 8, 1, "", "set_content"]], "email.encoders": [[198, 12, 1, "", "encode_7or8bit"], [198, 12, 1, "", "encode_base64"], [198, 12, 1, "", "encode_noop"], [198, 12, 1, "", "encode_quopri"]], "email.errors": [[199, 6, 1, "", "BoundaryError"], [199, 6, 1, "", "HeaderDefect"], [199, 6, 1, "", "HeaderParseError"], [199, 6, 1, "", "MessageDefect"], [199, 6, 1, "", "MessageError"], [199, 6, 1, "", "MessageParseError"], [199, 6, 1, "", "MultipartConversionError"]], "email.generator": [[201, 11, 1, "", "BytesGenerator"], [201, 11, 1, "", "DecodedGenerator"], [201, 11, 1, "", "Generator"]], "email.generator.BytesGenerator": [[201, 8, 1, "", "clone"], [201, 8, 1, "", "flatten"], [201, 8, 1, "", "write"]], "email.generator.Generator": [[201, 8, 1, "", "clone"], [201, 8, 1, "", "flatten"], [201, 8, 1, "", "write"]], "email.header": [[202, 11, 1, "", "Header"], [202, 12, 1, "", "decode_header"], [202, 12, 1, "", "make_header"]], "email.header.Header": [[202, 8, 1, "", "__eq__"], [202, 8, 1, "", "__ne__"], [202, 8, 1, "", "__str__"], [202, 8, 1, "", "append"], [202, 8, 1, "", "encode"]], "email.headerregistry": [[203, 11, 1, "", "Address"], [203, 11, 1, "", "AddressHeader"], [203, 11, 1, "", "BaseHeader"], [203, 11, 1, "", "ContentDispositionHeader"], [203, 11, 1, "", "ContentTransferEncoding"], [203, 11, 1, "", "ContentTypeHeader"], [203, 11, 1, "", "DateHeader"], [203, 11, 1, "", "Group"], [203, 11, 1, "", "HeaderRegistry"], [203, 11, 1, "", "MIMEVersionHeader"], [203, 11, 1, "", "ParameterizedMIMEHeader"], [203, 11, 1, "", "SingleAddressHeader"], [203, 11, 1, "", "UnstructuredHeader"]], "email.headerregistry.Address": [[203, 8, 1, "", "__str__"], [203, 7, 1, "", "addr_spec"], [203, 7, 1, "", "display_name"], [203, 7, 1, "", "domain"], [203, 7, 1, "", "username"]], "email.headerregistry.AddressHeader": [[203, 7, 1, "", "addresses"], [203, 7, 1, "", "groups"]], "email.headerregistry.BaseHeader": [[203, 7, 1, "", "defects"], [203, 8, 1, "", "fold"], [203, 7, 1, "", "max_count"], [203, 7, 1, "", "name"]], "email.headerregistry.ContentDispositionHeader": [[203, 7, 1, "", "content_disposition"]], "email.headerregistry.ContentTransferEncoding": [[203, 7, 1, "", "cte"]], "email.headerregistry.ContentTypeHeader": [[203, 7, 1, "", "content_type"], [203, 7, 1, "", "maintype"], [203, 7, 1, "", "subtype"]], "email.headerregistry.DateHeader": [[203, 7, 1, "", "datetime"]], "email.headerregistry.Group": [[203, 8, 1, "", "__str__"], [203, 7, 1, "", "addresses"], [203, 7, 1, "", "display_name"]], "email.headerregistry.HeaderRegistry": [[203, 8, 1, "", "__call__"], [203, 8, 1, "", "__getitem__"], [203, 8, 1, "", "map_to_type"]], "email.headerregistry.MIMEVersionHeader": [[203, 7, 1, "", "major"], [203, 7, 1, "", "minor"], [203, 7, 1, "", "version"]], "email.headerregistry.ParameterizedMIMEHeader": [[203, 7, 1, "", "params"]], "email.headerregistry.SingleAddressHeader": [[203, 7, 1, "", "address"]], "email.iterators": [[204, 12, 1, "", "_structure"], [204, 12, 1, "", "body_line_iterator"], [204, 12, 1, "", "typed_subpart_iterator"]], "email.message": [[205, 11, 1, "", "EmailMessage"], [205, 11, 1, "", "MIMEPart"], [196, 11, 1, "", "Message"]], "email.message.EmailMessage": [[205, 8, 1, "", "__bytes__"], [205, 8, 1, "", "__contains__"], [205, 8, 1, "", "__delitem__"], [205, 8, 1, "", "__getitem__"], [205, 8, 1, "", "__len__"], [205, 8, 1, "", "__setitem__"], [205, 8, 1, "", "__str__"], [205, 8, 1, "", "add_alternative"], [205, 8, 1, "", "add_attachment"], [205, 8, 1, "", "add_header"], [205, 8, 1, "", "add_related"], [205, 8, 1, "", "as_bytes"], [205, 8, 1, "", "as_string"], [205, 8, 1, "", "clear"], [205, 8, 1, "", "clear_content"], [205, 7, 1, "", "defects"], [205, 8, 1, "", "del_param"], [205, 7, 1, "", "epilogue"], [205, 8, 1, "", "get"], [205, 8, 1, "", "get_all"], [205, 8, 1, "", "get_body"], [205, 8, 1, "", "get_boundary"], [205, 8, 1, "", "get_charsets"], [205, 8, 1, "", "get_content"], [205, 8, 1, "", "get_content_charset"], [205, 8, 1, "", "get_content_disposition"], [205, 8, 1, "", "get_content_maintype"], [205, 8, 1, "", "get_content_subtype"], [205, 8, 1, "", "get_content_type"], [205, 8, 1, "", "get_default_type"], [205, 8, 1, "", "get_filename"], [205, 8, 1, "", "get_unixfrom"], [205, 8, 1, "", "is_attachment"], [205, 8, 1, "", "is_multipart"], [205, 8, 1, "", "items"], [205, 8, 1, "", "iter_attachments"], [205, 8, 1, "", "iter_parts"], [205, 8, 1, "", "keys"], [205, 8, 1, "", "make_alternative"], [205, 8, 1, "", "make_mixed"], [205, 8, 1, "", "make_related"], [205, 7, 1, "", "preamble"], [205, 8, 1, "", "replace_header"], [205, 8, 1, "", "set_boundary"], [205, 8, 1, "", "set_content"], [205, 8, 1, "", "set_default_type"], [205, 8, 1, "", "set_param"], [205, 8, 1, "", "set_unixfrom"], [205, 8, 1, "", "values"], [205, 8, 1, "", "walk"]], "email.message.Message": [[196, 8, 1, "", "__bytes__"], [196, 8, 1, "", "__contains__"], [196, 8, 1, "", "__delitem__"], [196, 8, 1, "", "__getitem__"], [196, 8, 1, "", "__len__"], [196, 8, 1, "", "__setitem__"], [196, 8, 1, "", "__str__"], [196, 8, 1, "", "add_header"], [196, 8, 1, "", "as_bytes"], [196, 8, 1, "", "as_string"], [196, 8, 1, "", "attach"], [196, 7, 1, "", "defects"], [196, 8, 1, "", "del_param"], [196, 7, 1, "", "epilogue"], [196, 8, 1, "", "get"], [196, 8, 1, "", "get_all"], [196, 8, 1, "", "get_boundary"], [196, 8, 1, "", "get_charset"], [196, 8, 1, "", "get_charsets"], [196, 8, 1, "", "get_content_charset"], [196, 8, 1, "", "get_content_disposition"], [196, 8, 1, "", "get_content_maintype"], [196, 8, 1, "", "get_content_subtype"], [196, 8, 1, "", "get_content_type"], [196, 8, 1, "", "get_default_type"], [196, 8, 1, "", "get_filename"], [196, 8, 1, "", "get_param"], [196, 8, 1, "", "get_params"], [196, 8, 1, "", "get_payload"], [196, 8, 1, "", "get_unixfrom"], [196, 8, 1, "", "is_multipart"], [196, 8, 1, "", "items"], [196, 8, 1, "", "keys"], [196, 7, 1, "", "preamble"], [196, 8, 1, "", "replace_header"], [196, 8, 1, "", "set_boundary"], [196, 8, 1, "", "set_charset"], [196, 8, 1, "", "set_default_type"], [196, 8, 1, "", "set_param"], [196, 8, 1, "", "set_payload"], [196, 8, 1, "", "set_type"], [196, 8, 1, "", "set_unixfrom"], [196, 8, 1, "", "values"], [196, 8, 1, "", "walk"]], "email.mime": [[206, 10, 0, "-", "application"], [206, 10, 0, "-", "audio"], [206, 10, 0, "-", "base"], [206, 10, 0, "-", "image"], [206, 10, 0, "-", "message"], [206, 10, 0, "-", "multipart"], [206, 10, 0, "-", "nonmultipart"], [206, 10, 0, "-", "text"]], "email.mime.application": [[206, 11, 1, "", "MIMEApplication"]], "email.mime.audio": [[206, 11, 1, "", "MIMEAudio"]], "email.mime.base": [[206, 11, 1, "", "MIMEBase"]], "email.mime.image": [[206, 11, 1, "", "MIMEImage"]], "email.mime.message": [[206, 11, 1, "", "MIMEMessage"]], "email.mime.multipart": [[206, 11, 1, "", "MIMEMultipart"]], "email.mime.nonmultipart": [[206, 11, 1, "", "MIMENonMultipart"]], "email.mime.text": [[206, 11, 1, "", "MIMEText"]], "email.parser": [[207, 11, 1, "", "BytesFeedParser"], [207, 11, 1, "", "BytesHeaderParser"], [207, 11, 1, "", "BytesParser"], [207, 11, 1, "", "FeedParser"], [207, 11, 1, "", "HeaderParser"], [207, 11, 1, "", "Parser"]], "email.parser.BytesFeedParser": [[207, 8, 1, "", "close"], [207, 8, 1, "", "feed"]], "email.parser.BytesParser": [[207, 8, 1, "", "parse"], [207, 8, 1, "", "parsebytes"]], "email.parser.Parser": [[207, 8, 1, "", "parse"], [207, 8, 1, "", "parsestr"]], "email.policy": [[208, 11, 1, "", "Compat32"], [208, 11, 1, "", "EmailPolicy"], [208, 9, 1, "", "HTTP"], [208, 11, 1, "", "Policy"], [208, 9, 1, "", "SMTP"], [208, 9, 1, "", "SMTPUTF8"], [208, 9, 1, "", "compat32"], [208, 9, 1, "", "default"], [208, 9, 1, "", "strict"]], "email.policy.Compat32": [[208, 8, 1, "", "fold"], [208, 8, 1, "", "fold_binary"], [208, 8, 1, "", "header_fetch_parse"], [208, 8, 1, "", "header_source_parse"], [208, 8, 1, "", "header_store_parse"], [208, 7, 1, "", "mangle_from_"]], "email.policy.EmailPolicy": [[208, 7, 1, "", "content_manager"], [208, 8, 1, "", "fold"], [208, 8, 1, "", "fold_binary"], [208, 7, 1, "", "header_factory"], [208, 8, 1, "", "header_fetch_parse"], [208, 8, 1, "", "header_max_count"], [208, 8, 1, "", "header_source_parse"], [208, 8, 1, "", "header_store_parse"], [208, 7, 1, "", "refold_source"], [208, 7, 1, "", "utf8"]], "email.policy.Policy": [[208, 8, 1, "", "clone"], [208, 7, 1, "", "cte_type"], [208, 8, 1, "", "fold"], [208, 8, 1, "", "fold_binary"], [208, 8, 1, "", "handle_defect"], [208, 8, 1, "", "header_fetch_parse"], [208, 8, 1, "", "header_max_count"], [208, 8, 1, "", "header_source_parse"], [208, 8, 1, "", "header_store_parse"], [208, 7, 1, "", "linesep"], [208, 7, 1, "", "mangle_from_"], [208, 7, 1, "", "max_line_length"], [208, 7, 1, "", "message_factory"], [208, 7, 1, "", "raise_on_defect"], [208, 8, 1, "", "register_defect"]], "email.utils": [[209, 12, 1, "", "collapse_rfc2231_value"], [209, 12, 1, "", "decode_params"], [209, 12, 1, "", "decode_rfc2231"], [209, 12, 1, "", "encode_rfc2231"], [209, 12, 1, "", "format_datetime"], [209, 12, 1, "", "formataddr"], [209, 12, 1, "", "formatdate"], [209, 12, 1, "", "getaddresses"], [209, 12, 1, "", "localtime"], [209, 12, 1, "", "make_msgid"], [209, 12, 1, "", "mktime_tz"], [209, 12, 1, "", "parseaddr"], [209, 12, 1, "", "parsedate"], [209, 12, 1, "", "parsedate_to_datetime"], [209, 12, 1, "", "parsedate_tz"], [209, 12, 1, "", "quote"], [209, 12, 1, "", "unquote"]], "encodings": [[158, 10, 0, "-", "idna"], [158, 10, 0, "-", "mbcs"], [158, 10, 0, "-", "utf_8_sig"]], "encodings.idna": [[158, 12, 1, "", "ToASCII"], [158, 12, 1, "", "ToUnicode"], [158, 12, 1, "", "nameprep"]], "ensurepip": [[210, 12, 1, "", "bootstrap"], [210, 12, 1, "", "version"]], "enum": [[211, 11, 1, "", "Enum"], [211, 11, 1, "", "EnumCheck"], [211, 11, 1, "", "EnumType"], [211, 11, 1, "", "Flag"], [211, 11, 1, "", "FlagBoundary"], [211, 11, 1, "", "IntEnum"], [211, 11, 1, "", "IntFlag"], [211, 11, 1, "", "ReprEnum"], [211, 11, 1, "", "StrEnum"], [211, 11, 1, "", "auto"], [211, 12, 1, "", "global_enum"], [211, 12, 1, "", "member"], [211, 12, 1, "", "nonmember"], [211, 12, 1, "", "property"], [211, 12, 1, "", "show_flag_values"], [211, 12, 1, "", "unique"], [211, 12, 1, "", "verify"]], "enum.Enum": [[211, 8, 1, "", "__dir__"], [211, 8, 1, "", "__format__"], [211, 8, 1, "", "__init__"], [211, 8, 1, "", "__init_subclass__"], [211, 8, 1, "", "__new__"], [211, 8, 1, "", "__repr__"], [211, 8, 1, "", "__str__"], [211, 8, 1, "", "_generate_next_value_"], [211, 7, 1, "", "_ignore_"], [211, 8, 1, "", "_missing_"], [211, 7, 1, "", "_name_"], [211, 7, 1, "", "_order_"], [211, 7, 1, "", "_value_"], [211, 7, 1, "", "name"], [211, 7, 1, "", "value"]], "enum.EnumCheck": [[211, 7, 1, "", "CONTINUOUS"], [211, 7, 1, "", "NAMED_FLAGS"], [211, 7, 1, "", "UNIQUE"]], "enum.EnumType": [[211, 8, 1, "", "__call__"], [211, 8, 1, "", "__contains__"], [211, 8, 1, "", "__dir__"], [211, 8, 1, "", "__getitem__"], [211, 8, 1, "", "__iter__"], [211, 8, 1, "", "__len__"], [211, 7, 1, "", "__members__"], [211, 8, 1, "", "__reversed__"]], "enum.Flag": [[211, 8, 1, "", "__and__"], [211, 8, 1, "", "__contains__"], [211, 8, 1, "", "__or__"], [211, 8, 1, "", "__xor__"], [211, 8, 1, "", "_numeric_repr_"]], "enum.FlagBoundary": [[211, 7, 1, "", "CONFORM"], [211, 7, 1, "", "EJECT"], [211, 7, 1, "", "KEEP"], [211, 7, 1, "", "STRICT"]], "errno": [[212, 9, 1, "", "E2BIG"], [212, 9, 1, "", "EACCES"], [212, 9, 1, "", "EADDRINUSE"], [212, 9, 1, "", "EADDRNOTAVAIL"], [212, 9, 1, "", "EADV"], [212, 9, 1, "", "EAFNOSUPPORT"], [212, 9, 1, "", "EAGAIN"], [212, 9, 1, "", "EALREADY"], [212, 9, 1, "", "EBADE"], [212, 9, 1, "", "EBADF"], [212, 9, 1, "", "EBADFD"], [212, 9, 1, "", "EBADMSG"], [212, 9, 1, "", "EBADR"], [212, 9, 1, "", "EBADRQC"], [212, 9, 1, "", "EBADSLT"], [212, 9, 1, "", "EBFONT"], [212, 9, 1, "", "EBUSY"], [212, 9, 1, "", "ECANCELED"], [212, 9, 1, "", "ECHILD"], [212, 9, 1, "", "ECHRNG"], [212, 9, 1, "", "ECOMM"], [212, 9, 1, "", "ECONNABORTED"], [212, 9, 1, "", "ECONNREFUSED"], [212, 9, 1, "", "ECONNRESET"], [212, 9, 1, "", "EDEADLK"], [212, 9, 1, "", "EDEADLOCK"], [212, 9, 1, "", "EDESTADDRREQ"], [212, 9, 1, "", "EDOM"], [212, 9, 1, "", "EDOTDOT"], [212, 9, 1, "", "EDQUOT"], [212, 9, 1, "", "EEXIST"], [212, 9, 1, "", "EFAULT"], [212, 9, 1, "", "EFBIG"], [212, 9, 1, "", "EHOSTDOWN"], [212, 9, 1, "", "EHOSTUNREACH"], [212, 9, 1, "", "EIDRM"], [212, 9, 1, "", "EILSEQ"], [212, 9, 1, "", "EINPROGRESS"], [212, 9, 1, "", "EINTR"], [212, 9, 1, "", "EINVAL"], [212, 9, 1, "", "EIO"], [212, 9, 1, "", "EISCONN"], [212, 9, 1, "", "EISDIR"], [212, 9, 1, "", "EISNAM"], [212, 9, 1, "", "EL2HLT"], [212, 9, 1, "", "EL2NSYNC"], [212, 9, 1, "", "EL3HLT"], [212, 9, 1, "", "EL3RST"], [212, 9, 1, "", "ELIBACC"], [212, 9, 1, "", "ELIBBAD"], [212, 9, 1, "", "ELIBEXEC"], [212, 9, 1, "", "ELIBMAX"], [212, 9, 1, "", "ELIBSCN"], [212, 9, 1, "", "ELNRNG"], [212, 9, 1, "", "ELOOP"], [212, 9, 1, "", "EMFILE"], [212, 9, 1, "", "EMLINK"], [212, 9, 1, "", "EMSGSIZE"], [212, 9, 1, "", "EMULTIHOP"], [212, 9, 1, "", "ENAMETOOLONG"], [212, 9, 1, "", "ENAVAIL"], [212, 9, 1, "", "ENETDOWN"], [212, 9, 1, "", "ENETRESET"], [212, 9, 1, "", "ENETUNREACH"], [212, 9, 1, "", "ENFILE"], [212, 9, 1, "", "ENOANO"], [212, 9, 1, "", "ENOBUFS"], [212, 9, 1, "", "ENOCSI"], [212, 9, 1, "", "ENODATA"], [212, 9, 1, "", "ENODEV"], [212, 9, 1, "", "ENOENT"], [212, 9, 1, "", "ENOEXEC"], [212, 9, 1, "", "ENOLCK"], [212, 9, 1, "", "ENOLINK"], [212, 9, 1, "", "ENOMEM"], [212, 9, 1, "", "ENOMSG"], [212, 9, 1, "", "ENONET"], [212, 9, 1, "", "ENOPKG"], [212, 9, 1, "", "ENOPROTOOPT"], [212, 9, 1, "", "ENOSPC"], [212, 9, 1, "", "ENOSR"], [212, 9, 1, "", "ENOSTR"], [212, 9, 1, "", "ENOSYS"], [212, 9, 1, "", "ENOTBLK"], [212, 9, 1, "", "ENOTCAPABLE"], [212, 9, 1, "", "ENOTCONN"], [212, 9, 1, "", "ENOTDIR"], [212, 9, 1, "", "ENOTEMPTY"], [212, 9, 1, "", "ENOTNAM"], [212, 9, 1, "", "ENOTRECOVERABLE"], [212, 9, 1, "", "ENOTSOCK"], [212, 9, 1, "", "ENOTSUP"], [212, 9, 1, "", "ENOTTY"], [212, 9, 1, "", "ENOTUNIQ"], [212, 9, 1, "", "ENXIO"], [212, 9, 1, "", "EOPNOTSUPP"], [212, 9, 1, "", "EOVERFLOW"], [212, 9, 1, "", "EOWNERDEAD"], [212, 9, 1, "", "EPERM"], [212, 9, 1, "", "EPFNOSUPPORT"], [212, 9, 1, "", "EPIPE"], [212, 9, 1, "", "EPROTO"], [212, 9, 1, "", "EPROTONOSUPPORT"], [212, 9, 1, "", "EPROTOTYPE"], [212, 9, 1, "", "EQFULL"], [212, 9, 1, "", "ERANGE"], [212, 9, 1, "", "EREMCHG"], [212, 9, 1, "", "EREMOTE"], [212, 9, 1, "", "EREMOTEIO"], [212, 9, 1, "", "ERESTART"], [212, 9, 1, "", "EROFS"], [212, 9, 1, "", "ESHUTDOWN"], [212, 9, 1, "", "ESOCKTNOSUPPORT"], [212, 9, 1, "", "ESPIPE"], [212, 9, 1, "", "ESRCH"], [212, 9, 1, "", "ESRMNT"], [212, 9, 1, "", "ESTALE"], [212, 9, 1, "", "ESTRPIPE"], [212, 9, 1, "", "ETIME"], [212, 9, 1, "", "ETIMEDOUT"], [212, 9, 1, "", "ETOOMANYREFS"], [212, 9, 1, "", "ETXTBSY"], [212, 9, 1, "", "EUCLEAN"], [212, 9, 1, "", "EUNATCH"], [212, 9, 1, "", "EUSERS"], [212, 9, 1, "", "EWOULDBLOCK"], [212, 9, 1, "", "EXDEV"], [212, 9, 1, "", "EXFULL"], [212, 9, 1, "", "errorcode"]], "faulthandler": [[214, 12, 1, "", "cancel_dump_traceback_later"], [214, 12, 1, "", "disable"], [214, 12, 1, "", "dump_traceback"], [214, 12, 1, "", "dump_traceback_later"], [214, 12, 1, "", "enable"], [214, 12, 1, "", "is_enabled"], [214, 12, 1, "", "register"], [214, 12, 1, "", "unregister"]], "fcntl": [[215, 9, 1, "", "LOCK_EX"], [215, 9, 1, "", "LOCK_NB"], [215, 9, 1, "", "LOCK_SH"], [215, 9, 1, "", "LOCK_UN"], [215, 12, 1, "", "fcntl"], [215, 12, 1, "", "flock"], [215, 12, 1, "", "ioctl"], [215, 12, 1, "", "lockf"]], "filecmp": [[216, 7, 1, "", "DEFAULT_IGNORES"], [216, 12, 1, "", "clear_cache"], [216, 12, 1, "", "cmp"], [216, 12, 1, "", "cmpfiles"], [216, 11, 1, "", "dircmp"]], "filecmp.dircmp": [[216, 7, 1, "", "common"], [216, 7, 1, "", "common_dirs"], [216, 7, 1, "", "common_files"], [216, 7, 1, "", "common_funny"], [216, 7, 1, "", "diff_files"], [216, 7, 1, "", "funny_files"], [216, 7, 1, "", "left"], [216, 7, 1, "", "left_list"], [216, 7, 1, "", "left_only"], [216, 8, 1, "", "report"], [216, 8, 1, "", "report_full_closure"], [216, 8, 1, "", "report_partial_closure"], [216, 7, 1, "", "right"], [216, 7, 1, "", "right_list"], [216, 7, 1, "", "right_only"], [216, 7, 1, "", "same_files"], [216, 7, 1, "", "subdirs"]], "fileinput": [[218, 11, 1, "", "FileInput"], [218, 12, 1, "", "close"], [218, 12, 1, "", "filelineno"], [218, 12, 1, "", "filename"], [218, 12, 1, "", "fileno"], [218, 12, 1, "", "hook_compressed"], [218, 12, 1, "", "hook_encoded"], [218, 12, 1, "", "input"], [218, 12, 1, "", "isfirstline"], [218, 12, 1, "", "isstdin"], [218, 12, 1, "", "lineno"], [218, 12, 1, "", "nextfile"]], "float": [[344, 8, 1, "", "as_integer_ratio"], [344, 8, 1, "", "fromhex"], [344, 8, 1, "", "hex"], [344, 8, 1, "", "is_integer"]], "fnmatch": [[220, 12, 1, "", "filter"], [220, 12, 1, "", "fnmatch"], [220, 12, 1, "", "fnmatchcase"], [220, 12, 1, "", "translate"]], "fractions": [[221, 11, 1, "", "Fraction"]], "fractions.Fraction": [[221, 8, 1, "", "__ceil__"], [221, 8, 1, "", "__floor__"], [221, 8, 1, "", "__format__"], [221, 8, 1, "", "__round__"], [221, 8, 1, "", "as_integer_ratio"], [221, 7, 1, "", "denominator"], [221, 8, 1, "", "from_decimal"], [221, 8, 1, "", "from_float"], [221, 8, 1, "", "is_integer"], [221, 8, 1, "", "limit_denominator"], [221, 7, 1, "", "numerator"]], "frame": [[428, 8, 1, "", "clear"], [428, 7, 1, "", "f_back"], [428, 7, 1, "", "f_builtins"], [428, 7, 1, "", "f_code"], [428, 7, 1, "", "f_globals"], [428, 7, 1, "", "f_lasti"], [428, 7, 1, "", "f_lineno"], [428, 7, 1, "", "f_locals"], [428, 7, 1, "", "f_trace"], [428, 7, 1, "", "f_trace_lines"], [428, 7, 1, "", "f_trace_opcodes"]], "frozenset": [[344, 8, 1, "", "add"], [344, 8, 1, "", "clear"], [344, 8, 1, "", "copy"], [344, 8, 1, "", "difference"], [344, 8, 1, "", "difference_update"], [344, 8, 1, "", "discard"], [344, 8, 1, "", "intersection"], [344, 8, 1, "", "intersection_update"], [344, 8, 1, "", "isdisjoint"], [344, 8, 1, "", "issubset"], [344, 8, 1, "", "issuperset"], [344, 8, 1, "", "pop"], [344, 8, 1, "", "remove"], [344, 8, 1, "", "symmetric_difference"], [344, 8, 1, "", "symmetric_difference_update"], [344, 8, 1, "", "union"], [344, 8, 1, "", "update"]], "ftplib": [[223, 11, 1, "", "FTP"], [223, 11, 1, "", "FTP_TLS"], [223, 9, 1, "", "all_errors"], [223, 6, 1, "", "error_perm"], [223, 6, 1, "", "error_proto"], [223, 6, 1, "", "error_reply"], [223, 6, 1, "", "error_temp"]], "ftplib.FTP": [[223, 8, 1, "", "abort"], [223, 8, 1, "", "close"], [223, 8, 1, "", "connect"], [223, 8, 1, "", "cwd"], [223, 8, 1, "", "delete"], [223, 8, 1, "", "dir"], [223, 8, 1, "", "getwelcome"], [223, 8, 1, "", "login"], [223, 8, 1, "", "mkd"], [223, 8, 1, "", "mlsd"], [223, 8, 1, "", "nlst"], [223, 8, 1, "", "ntransfercmd"], [223, 8, 1, "", "pwd"], [223, 8, 1, "", "quit"], [223, 8, 1, "", "rename"], [223, 8, 1, "", "retrbinary"], [223, 8, 1, "", "retrlines"], [223, 8, 1, "", "rmd"], [223, 8, 1, "", "sendcmd"], [223, 8, 1, "", "set_debuglevel"], [223, 8, 1, "", "set_pasv"], [223, 8, 1, "", "size"], [223, 8, 1, "", "storbinary"], [223, 8, 1, "", "storlines"], [223, 8, 1, "", "transfercmd"], [223, 8, 1, "", "voidcmd"]], "ftplib.FTP_TLS": [[223, 8, 1, "", "auth"], [223, 8, 1, "", "ccc"], [223, 8, 1, "", "prot_c"], [223, 8, 1, "", "prot_p"], [223, 7, 1, "", "ssl_version"]], "function": [[428, 7, 1, "", "__annotations__"], [428, 7, 1, "", "__closure__"], [428, 7, 1, "", "__code__"], [428, 7, 1, "", "__defaults__"], [428, 7, 1, "", "__dict__"], [428, 7, 1, "", "__doc__"], [428, 7, 1, "", "__globals__"], [428, 7, 1, "", "__kwdefaults__"], [428, 7, 1, "", "__module__"], [428, 7, 1, "", "__name__"], [428, 7, 1, "", "__qualname__"], [428, 7, 1, "", "__type_params__"]], "functools": [[226, 12, 1, "", "cache"], [226, 12, 1, "", "cached_property"], [226, 12, 1, "", "cmp_to_key"], [226, 12, 1, "", "lru_cache"], [226, 12, 1, "", "partial"], [226, 11, 1, "", "partialmethod"], [226, 12, 1, "", "reduce"], [226, 12, 1, "", "singledispatch"], [226, 11, 1, "", "singledispatchmethod"], [226, 12, 1, "", "total_ordering"], [226, 12, 1, "", "update_wrapper"], [226, 12, 1, "", "wraps"]], "functools.partial": [[226, 7, 1, "", "args"], [226, 7, 1, "", "func"], [226, 7, 1, "", "keywords"]], "gc": [[227, 9, 1, "", "DEBUG_COLLECTABLE"], [227, 9, 1, "", "DEBUG_LEAK"], [227, 9, 1, "", "DEBUG_SAVEALL"], [227, 9, 1, "", "DEBUG_STATS"], [227, 9, 1, "", "DEBUG_UNCOLLECTABLE"], [227, 9, 1, "", "callbacks"], [227, 12, 1, "", "collect"], [227, 12, 1, "", "disable"], [227, 12, 1, "", "enable"], [227, 12, 1, "", "freeze"], [227, 9, 1, "", "garbage"], [227, 12, 1, "", "get_count"], [227, 12, 1, "", "get_debug"], [227, 12, 1, "", "get_freeze_count"], [227, 12, 1, "", "get_objects"], [227, 12, 1, "", "get_referents"], [227, 12, 1, "", "get_referrers"], [227, 12, 1, "", "get_stats"], [227, 12, 1, "", "get_threshold"], [227, 12, 1, "", "is_finalized"], [227, 12, 1, "", "is_tracked"], [227, 12, 1, "", "isenabled"], [227, 12, 1, "", "set_debug"], [227, 12, 1, "", "set_threshold"], [227, 12, 1, "", "unfreeze"]], "generator": [[430, 8, 1, "", "__next__"], [430, 8, 1, "", "close"], [430, 8, 1, "", "send"], [430, 8, 1, "", "throw"]], "genericalias": [[344, 7, 1, "", "__args__"], [344, 7, 1, "", "__origin__"], [344, 7, 1, "", "__parameters__"], [344, 7, 1, "", "__unpacked__"]], "getopt": [[228, 6, 1, "", "GetoptError"], [228, 6, 1, "", "error"], [228, 12, 1, "", "getopt"], [228, 12, 1, "", "gnu_getopt"]], "getpass": [[229, 6, 1, "", "GetPassWarning"], [229, 12, 1, "", "getpass"], [229, 12, 1, "", "getuser"]], "gettext": [[230, 11, 1, "", "GNUTranslations"], [230, 11, 1, "", "NullTranslations"], [230, 12, 1, "", "bindtextdomain"], [230, 12, 1, "", "dgettext"], [230, 12, 1, "", "dngettext"], [230, 12, 1, "", "dnpgettext"], [230, 12, 1, "", "dpgettext"], [230, 12, 1, "", "find"], [230, 12, 1, "", "gettext"], [230, 12, 1, "", "install"], [230, 12, 1, "", "ngettext"], [230, 12, 1, "", "npgettext"], [230, 12, 1, "", "pgettext"], [230, 12, 1, "", "textdomain"], [230, 12, 1, "", "translation"]], "gettext.GNUTranslations": [[230, 8, 1, "", "gettext"], [230, 8, 1, "", "ngettext"], [230, 8, 1, "", "npgettext"], [230, 8, 1, "", "pgettext"]], "gettext.NullTranslations": [[230, 8, 1, "", "_parse"], [230, 8, 1, "", "add_fallback"], [230, 8, 1, "", "charset"], [230, 8, 1, "", "gettext"], [230, 8, 1, "", "info"], [230, 8, 1, "", "install"], [230, 8, 1, "", "ngettext"], [230, 8, 1, "", "npgettext"], [230, 8, 1, "", "pgettext"]], "glob": [[231, 12, 1, "", "escape"], [231, 12, 1, "", "glob"], [231, 12, 1, "", "iglob"]], "graphlib": [[232, 6, 1, "", "CycleError"], [232, 11, 1, "", "TopologicalSorter"]], "graphlib.TopologicalSorter": [[232, 8, 1, "", "add"], [232, 8, 1, "", "done"], [232, 8, 1, "", "get_ready"], [232, 8, 1, "", "is_active"], [232, 8, 1, "", "prepare"], [232, 8, 1, "", "static_order"]], "grp": [[233, 12, 1, "", "getgrall"], [233, 12, 1, "", "getgrgid"], [233, 12, 1, "", "getgrnam"]], "gzip": [[234, 6, 1, "", "BadGzipFile"], [234, 11, 1, "", "GzipFile"], [234, 12, 1, "", "compress"], [234, 12, 1, "", "decompress"], [234, 12, 1, "", "open"], [234, 14, 1, "cmdoption-gzip-best", "--best"], [234, 14, 1, "cmdoption-gzip-d", "--decompress"], [234, 14, 1, "cmdoption-gzip-fast", "--fast"], [234, 14, 1, "cmdoption-gzip-h", "--help"], [234, 14, 1, "cmdoption-gzip-d", "-d"], [234, 14, 1, "cmdoption-gzip-h", "-h"], [234, 14, 1, "cmdoption-gzip-arg-file", "file"]], "gzip.GzipFile": [[234, 7, 1, "", "mtime"], [234, 7, 1, "", "name"], [234, 8, 1, "", "peek"]], "hashlib": [[235, 9, 1, "", "algorithms_available"], [235, 9, 1, "", "algorithms_guaranteed"], [235, 12, 1, "", "blake2b"], [235, 12, 1, "", "blake2s"], [235, 12, 1, "", "file_digest"], [235, 12, 1, "", "md5"], [235, 12, 1, "", "new"], [235, 12, 1, "", "pbkdf2_hmac"], [235, 12, 1, "", "scrypt"], [235, 12, 1, "", "sha1"], [235, 12, 1, "", "sha224"], [235, 12, 1, "", "sha256"], [235, 12, 1, "", "sha384"], [235, 12, 1, "", "sha3_224"], [235, 12, 1, "", "sha3_256"], [235, 12, 1, "", "sha3_384"], [235, 12, 1, "", "sha3_512"], [235, 12, 1, "", "sha512"], [235, 12, 1, "", "shake_128"], [235, 12, 1, "", "shake_256"]], "hashlib.blake2b": [[235, 9, 1, "", "MAX_DIGEST_SIZE"], [235, 9, 1, "", "MAX_KEY_SIZE"], [235, 9, 1, "", "PERSON_SIZE"], [235, 9, 1, "", "SALT_SIZE"]], "hashlib.blake2s": [[235, 9, 1, "", "MAX_DIGEST_SIZE"], [235, 9, 1, "", "MAX_KEY_SIZE"], [235, 9, 1, "", "PERSON_SIZE"], [235, 9, 1, "", "SALT_SIZE"]], "hashlib.hash": [[235, 9, 1, "", "block_size"], [235, 8, 1, "", "copy"], [235, 8, 1, "", "digest"], [235, 9, 1, "", "digest_size"], [235, 8, 1, "", "hexdigest"], [235, 7, 1, "", "name"], [235, 8, 1, "", "update"]], "hashlib.shake": [[235, 8, 1, "", "digest"], [235, 8, 1, "", "hexdigest"]], "heapq": [[236, 12, 1, "", "heapify"], [236, 12, 1, "", "heappop"], [236, 12, 1, "", "heappush"], [236, 12, 1, "", "heappushpop"], [236, 12, 1, "", "heapreplace"], [236, 12, 1, "", "merge"], [236, 12, 1, "", "nlargest"], [236, 12, 1, "", "nsmallest"]], "hmac.HMAC": [[237, 7, 1, "", "block_size"], [237, 8, 1, "", "copy"], [237, 8, 1, "", "digest"], [237, 7, 1, "", "digest_size"], [237, 8, 1, "", "hexdigest"], [237, 7, 1, "", "name"], [237, 8, 1, "", "update"]], "hmac": [[237, 12, 1, "", "compare_digest"], [237, 12, 1, "", "digest"], [237, 12, 1, "", "new"]], "html": [[239, 10, 0, "-", "entities"], [238, 12, 1, "", "escape"], [240, 10, 0, "-", "parser"], [238, 12, 1, "", "unescape"]], "html.entities": [[239, 9, 1, "", "codepoint2name"], [239, 9, 1, "", "entitydefs"], [239, 9, 1, "", "html5"], [239, 9, 1, "", "name2codepoint"]], "html.parser": [[240, 11, 1, "", "HTMLParser"]], "html.parser.HTMLParser": [[240, 8, 1, "", "close"], [240, 8, 1, "", "feed"], [240, 8, 1, "", "get_starttag_text"], [240, 8, 1, "", "getpos"], [240, 8, 1, "", "handle_charref"], [240, 8, 1, "", "handle_comment"], [240, 8, 1, "", "handle_data"], [240, 8, 1, "", "handle_decl"], [240, 8, 1, "", "handle_endtag"], [240, 8, 1, "", "handle_entityref"], [240, 8, 1, "", "handle_pi"], [240, 8, 1, "", "handle_startendtag"], [240, 8, 1, "", "handle_starttag"], [240, 8, 1, "", "reset"], [240, 8, 1, "", "unknown_decl"]], "http": [[241, 11, 1, "", "HTTPMethod"], [241, 11, 1, "", "HTTPStatus"], [242, 10, 0, "-", "client"], [243, 10, 0, "-", "cookiejar"], [244, 10, 0, "-", "cookies"], [245, 10, 0, "-", "server"]], "http.client": [[242, 6, 1, "", "BadStatusLine"], [242, 6, 1, "", "CannotSendHeader"], [242, 6, 1, "", "CannotSendRequest"], [242, 11, 1, "", "HTTPConnection"], [242, 6, 1, "", "HTTPException"], [242, 11, 1, "", "HTTPMessage"], [242, 11, 1, "", "HTTPResponse"], [242, 11, 1, "", "HTTPSConnection"], [242, 9, 1, "", "HTTPS_PORT"], [242, 9, 1, "", "HTTP_PORT"], [242, 6, 1, "", "ImproperConnectionState"], [242, 6, 1, "", "IncompleteRead"], [242, 6, 1, "", "InvalidURL"], [242, 6, 1, "", "LineTooLong"], [242, 6, 1, "", "NotConnected"], [242, 6, 1, "", "RemoteDisconnected"], [242, 6, 1, "", "ResponseNotReady"], [242, 6, 1, "", "UnimplementedFileMode"], [242, 6, 1, "", "UnknownProtocol"], [242, 6, 1, "", "UnknownTransferEncoding"], [242, 12, 1, "", "parse_headers"], [242, 9, 1, "", "responses"]], "http.client.HTTPConnection": [[242, 7, 1, "", "blocksize"], [242, 8, 1, "", "close"], [242, 8, 1, "", "connect"], [242, 8, 1, "", "endheaders"], [242, 8, 1, "", "get_proxy_response_headers"], [242, 8, 1, "", "getresponse"], [242, 8, 1, "", "putheader"], [242, 8, 1, "", "putrequest"], [242, 8, 1, "", "request"], [242, 8, 1, "", "send"], [242, 8, 1, "", "set_debuglevel"], [242, 8, 1, "", "set_tunnel"]], "http.client.HTTPResponse": [[242, 7, 1, "", "closed"], [242, 7, 1, "", "debuglevel"], [242, 8, 1, "", "fileno"], [242, 8, 1, "", "getcode"], [242, 8, 1, "", "getheader"], [242, 8, 1, "", "getheaders"], [242, 8, 1, "", "geturl"], [242, 7, 1, "", "headers"], [242, 8, 1, "", "info"], [242, 7, 1, "", "msg"], [242, 8, 1, "", "read"], [242, 8, 1, "", "readinto"], [242, 7, 1, "", "reason"], [242, 7, 1, "", "status"], [242, 7, 1, "", "url"], [242, 7, 1, "", "version"]], "http.cookiejar": [[243, 11, 1, "", "Cookie"], [243, 11, 1, "", "CookieJar"], [243, 11, 1, "", "CookiePolicy"], [243, 11, 1, "", "DefaultCookiePolicy"], [243, 11, 1, "", "FileCookieJar"], [243, 11, 1, "", "LWPCookieJar"], [243, 6, 1, "", "LoadError"], [243, 11, 1, "", "MozillaCookieJar"]], "http.cookiejar.Cookie": [[243, 7, 1, "", "comment"], [243, 7, 1, "", "comment_url"], [243, 7, 1, "", "discard"], [243, 7, 1, "", "domain"], [243, 7, 1, "", "domain_initial_dot"], [243, 7, 1, "", "domain_specified"], [243, 7, 1, "", "expires"], [243, 8, 1, "", "get_nonstandard_attr"], [243, 8, 1, "", "has_nonstandard_attr"], [243, 8, 1, "", "is_expired"], [243, 7, 1, "", "name"], [243, 7, 1, "", "path"], [243, 7, 1, "", "port"], [243, 7, 1, "", "port_specified"], [243, 7, 1, "", "rfc2109"], [243, 7, 1, "", "secure"], [243, 8, 1, "", "set_nonstandard_attr"], [243, 7, 1, "", "value"], [243, 7, 1, "", "version"]], "http.cookiejar.CookieJar": [[243, 8, 1, "", "add_cookie_header"], [243, 8, 1, "", "clear"], [243, 8, 1, "", "clear_session_cookies"], [243, 8, 1, "", "extract_cookies"], [243, 8, 1, "", "make_cookies"], [243, 8, 1, "", "set_cookie"], [243, 8, 1, "", "set_cookie_if_ok"], [243, 8, 1, "", "set_policy"]], "http.cookiejar.CookiePolicy": [[243, 8, 1, "", "domain_return_ok"], [243, 7, 1, "", "hide_cookie2"], [243, 7, 1, "", "netscape"], [243, 8, 1, "", "path_return_ok"], [243, 8, 1, "", "return_ok"], [243, 7, 1, "", "rfc2965"], [243, 8, 1, "", "set_ok"]], "http.cookiejar.DefaultCookiePolicy": [[243, 7, 1, "", "DomainLiberal"], [243, 7, 1, "", "DomainRFC2965Match"], [243, 7, 1, "", "DomainStrict"], [243, 7, 1, "", "DomainStrictNoDots"], [243, 7, 1, "", "DomainStrictNonDomain"], [243, 8, 1, "", "allowed_domains"], [243, 8, 1, "", "blocked_domains"], [243, 8, 1, "", "is_blocked"], [243, 8, 1, "", "is_not_allowed"], [243, 7, 1, "", "rfc2109_as_netscape"], [243, 8, 1, "", "set_allowed_domains"], [243, 8, 1, "", "set_blocked_domains"], [243, 7, 1, "", "strict_domain"], [243, 7, 1, "", "strict_ns_domain"], [243, 7, 1, "", "strict_ns_set_initial_dollar"], [243, 7, 1, "", "strict_ns_set_path"], [243, 7, 1, "", "strict_ns_unverifiable"], [243, 7, 1, "", "strict_rfc2965_unverifiable"]], "http.cookiejar.FileCookieJar": [[243, 7, 1, "", "delayload"], [243, 7, 1, "", "filename"], [243, 8, 1, "", "load"], [243, 8, 1, "", "revert"], [243, 8, 1, "", "save"]], "http.cookies": [[244, 11, 1, "", "BaseCookie"], [244, 6, 1, "", "CookieError"], [244, 11, 1, "", "Morsel"], [244, 11, 1, "", "SimpleCookie"]], "http.cookies.BaseCookie": [[244, 8, 1, "", "js_output"], [244, 8, 1, "", "load"], [244, 8, 1, "", "output"], [244, 8, 1, "", "value_decode"], [244, 8, 1, "", "value_encode"]], "http.cookies.Morsel": [[244, 8, 1, "", "OutputString"], [244, 7, 1, "", "coded_value"], [244, 7, 1, "", "comment"], [244, 8, 1, "", "copy"], [244, 7, 1, "", "domain"], [244, 7, 1, "", "expires"], [244, 7, 1, "", "httponly"], [244, 8, 1, "", "isReservedKey"], [244, 8, 1, "", "js_output"], [244, 7, 1, "", "key"], [244, 8, 1, "", "output"], [244, 7, 1, "", "path"], [244, 7, 1, "", "samesite"], [244, 7, 1, "", "secure"], [244, 8, 1, "", "set"], [244, 8, 1, "", "setdefault"], [244, 8, 1, "", "update"], [244, 7, 1, "", "value"], [244, 7, 1, "", "version"]], "http.server": [[245, 11, 1, "", "BaseHTTPRequestHandler"], [245, 11, 1, "", "CGIHTTPRequestHandler"], [245, 11, 1, "", "HTTPServer"], [245, 11, 1, "", "SimpleHTTPRequestHandler"], [245, 11, 1, "", "ThreadingHTTPServer"]], "http.server.BaseHTTPRequestHandler": [[245, 7, 1, "", "MessageClass"], [245, 8, 1, "", "address_string"], [245, 7, 1, "", "client_address"], [245, 7, 1, "", "close_connection"], [245, 7, 1, "", "command"], [245, 8, 1, "", "date_time_string"], [245, 8, 1, "", "end_headers"], [245, 7, 1, "", "error_content_type"], [245, 7, 1, "", "error_message_format"], [245, 8, 1, "", "flush_headers"], [245, 8, 1, "", "handle"], [245, 8, 1, "", "handle_expect_100"], [245, 8, 1, "", "handle_one_request"], [245, 7, 1, "", "headers"], [245, 8, 1, "", "log_date_time_string"], [245, 8, 1, "", "log_error"], [245, 8, 1, "", "log_message"], [245, 8, 1, "", "log_request"], [245, 7, 1, "", "path"], [245, 7, 1, "", "protocol_version"], [245, 7, 1, "", "request_version"], [245, 7, 1, "", "requestline"], [245, 7, 1, "", "responses"], [245, 7, 1, "", "rfile"], [245, 8, 1, "", "send_error"], [245, 8, 1, "", "send_header"], [245, 8, 1, "", "send_response"], [245, 8, 1, "", "send_response_only"], [245, 7, 1, "", "server"], [245, 7, 1, "", "server_version"], [245, 7, 1, "", "sys_version"], [245, 8, 1, "", "version_string"], [245, 7, 1, "", "wfile"]], "http.server.CGIHTTPRequestHandler": [[245, 7, 1, "", "cgi_directories"], [245, 8, 1, "", "do_POST"]], "http.server.SimpleHTTPRequestHandler": [[245, 8, 1, "", "do_GET"], [245, 8, 1, "", "do_HEAD"], [245, 7, 1, "", "extensions_map"], [245, 7, 1, "", "server_version"]], "imaplib": [[248, 11, 1, "", "IMAP4"], [248, 11, 1, "", "IMAP4_SSL"], [248, 11, 1, "", "IMAP4_stream"], [248, 12, 1, "", "Int2AP"], [248, 12, 1, "", "Internaldate2tuple"], [248, 12, 1, "", "ParseFlags"], [248, 12, 1, "", "Time2Internaldate"]], "imaplib.IMAP4": [[248, 7, 1, "", "PROTOCOL_VERSION"], [248, 6, 1, "", "abort"], [248, 8, 1, "", "append"], [248, 8, 1, "", "authenticate"], [248, 8, 1, "", "check"], [248, 8, 1, "", "close"], [248, 8, 1, "", "copy"], [248, 8, 1, "", "create"], [248, 7, 1, "", "debug"], [248, 8, 1, "", "delete"], [248, 8, 1, "", "deleteacl"], [248, 8, 1, "", "enable"], [248, 6, 1, "", "error"], [248, 8, 1, "", "expunge"], [248, 8, 1, "", "fetch"], [248, 8, 1, "", "getacl"], [248, 8, 1, "", "getannotation"], [248, 8, 1, "", "getquota"], [248, 8, 1, "", "getquotaroot"], [248, 8, 1, "", "list"], [248, 8, 1, "", "login"], [248, 8, 1, "", "login_cram_md5"], [248, 8, 1, "", "logout"], [248, 8, 1, "", "lsub"], [248, 8, 1, "", "myrights"], [248, 8, 1, "", "namespace"], [248, 8, 1, "", "noop"], [248, 8, 1, "", "open"], [248, 8, 1, "", "partial"], [248, 8, 1, "", "proxyauth"], [248, 8, 1, "", "read"], [248, 8, 1, "", "readline"], [248, 6, 1, "", "readonly"], [248, 8, 1, "", "recent"], [248, 8, 1, "", "rename"], [248, 8, 1, "", "response"], [248, 8, 1, "", "search"], [248, 8, 1, "", "select"], [248, 8, 1, "", "send"], [248, 8, 1, "", "setacl"], [248, 8, 1, "", "setannotation"], [248, 8, 1, "", "setquota"], [248, 8, 1, "", "shutdown"], [248, 8, 1, "", "socket"], [248, 8, 1, "", "sort"], [248, 8, 1, "", "starttls"], [248, 8, 1, "", "status"], [248, 8, 1, "", "store"], [248, 8, 1, "", "subscribe"], [248, 8, 1, "", "thread"], [248, 8, 1, "", "uid"], [248, 8, 1, "", "unselect"], [248, 8, 1, "", "unsubscribe"], [248, 7, 1, "", "utf8_enabled"], [248, 8, 1, "", "xatom"]], "imghdr": [[249, 9, 1, "", "tests"], [249, 12, 1, "", "what"]], "importlib": [[250, 12, 1, "", "__import__"], [250, 10, 0, "-", "abc"], [250, 12, 1, "", "import_module"], [250, 12, 1, "", "invalidate_caches"], [250, 10, 0, "-", "machinery"], [251, 10, 0, "-", "metadata"], [250, 12, 1, "", "reload"], [252, 10, 0, "-", "resources"], [250, 10, 0, "-", "util"]], "importlib.abc": [[250, 11, 1, "", "ExecutionLoader"], [250, 11, 1, "", "FileLoader"], [250, 11, 1, "", "InspectLoader"], [250, 11, 1, "", "Loader"], [250, 11, 1, "", "MetaPathFinder"], [250, 11, 1, "", "PathEntryFinder"], [250, 11, 1, "", "ResourceLoader"], [250, 11, 1, "", "ResourceReader"], [250, 11, 1, "", "SourceLoader"], [250, 11, 1, "", "Traversable"], [250, 11, 1, "", "TraversableResources"]], "importlib.abc.ExecutionLoader": [[250, 8, 1, "", "get_filename"]], "importlib.abc.FileLoader": [[250, 8, 1, "", "get_data"], [250, 8, 1, "", "get_filename"], [250, 8, 1, "", "load_module"], [250, 7, 1, "", "name"], [250, 7, 1, "", "path"]], "importlib.abc.InspectLoader": [[250, 8, 1, "", "exec_module"], [250, 8, 1, "", "get_code"], [250, 8, 1, "", "get_source"], [250, 8, 1, "", "is_package"], [250, 8, 1, "", "load_module"], [250, 8, 1, "", "source_to_code"]], "importlib.abc.Loader": [[250, 8, 1, "", "create_module"], [250, 8, 1, "", "exec_module"], [250, 8, 1, "", "load_module"]], "importlib.abc.MetaPathFinder": [[250, 8, 1, "", "find_spec"], [250, 8, 1, "", "invalidate_caches"]], "importlib.abc.PathEntryFinder": [[250, 8, 1, "", "find_spec"], [250, 8, 1, "", "invalidate_caches"]], "importlib.abc.ResourceLoader": [[250, 8, 1, "", "get_data"]], "importlib.abc.ResourceReader": [[250, 8, 1, "", "contents"], [250, 8, 1, "", "is_resource"], [250, 8, 1, "", "open_resource"], [250, 8, 1, "", "resource_path"]], "importlib.abc.SourceLoader": [[250, 8, 1, "", "exec_module"], [250, 8, 1, "", "get_code"], [250, 8, 1, "", "get_source"], [250, 8, 1, "", "is_package"], [250, 8, 1, "", "load_module"], [250, 8, 1, "", "path_mtime"], [250, 8, 1, "", "path_stats"], [250, 8, 1, "", "set_data"]], "importlib.abc.Traversable": [[250, 8, 1, "", "__truediv__"], [250, 8, 1, "", "is_dir"], [250, 8, 1, "", "is_file"], [250, 8, 1, "", "iterdir"], [250, 8, 1, "", "joinpath"], [250, 7, 1, "", "name"], [250, 8, 1, "", "open"], [250, 8, 1, "", "read_bytes"], [250, 8, 1, "", "read_text"]], "importlib.abc.TraversableResources": [[250, 8, 1, "", "files"]], "importlib.machinery": [[250, 7, 1, "", "BYTECODE_SUFFIXES"], [250, 11, 1, "", "BuiltinImporter"], [250, 7, 1, "", "DEBUG_BYTECODE_SUFFIXES"], [250, 7, 1, "", "EXTENSION_SUFFIXES"], [250, 11, 1, "", "ExtensionFileLoader"], [250, 11, 1, "", "FileFinder"], [250, 11, 1, "", "FrozenImporter"], [250, 11, 1, "", "ModuleSpec"], [250, 11, 1, "", "NamespaceLoader"], [250, 7, 1, "", "OPTIMIZED_BYTECODE_SUFFIXES"], [250, 11, 1, "", "PathFinder"], [250, 7, 1, "", "SOURCE_SUFFIXES"], [250, 11, 1, "", "SourceFileLoader"], [250, 11, 1, "", "SourcelessFileLoader"], [250, 11, 1, "", "WindowsRegistryFinder"], [250, 12, 1, "", "all_suffixes"]], "importlib.machinery.ExtensionFileLoader": [[250, 8, 1, "", "create_module"], [250, 8, 1, "", "exec_module"], [250, 8, 1, "", "get_code"], [250, 8, 1, "", "get_filename"], [250, 8, 1, "", "get_source"], [250, 8, 1, "", "is_package"], [250, 7, 1, "", "name"], [250, 7, 1, "", "path"]], "importlib.machinery.FileFinder": [[250, 8, 1, "", "find_spec"], [250, 8, 1, "", "invalidate_caches"], [250, 7, 1, "", "path"], [250, 8, 1, "", "path_hook"]], "importlib.machinery.ModuleSpec": [[250, 7, 1, "", "cached"], [250, 7, 1, "", "has_location"], [250, 7, 1, "", "loader"], [250, 7, 1, "", "loader_state"], [250, 7, 1, "", "name"], [250, 7, 1, "", "origin"], [250, 7, 1, "", "parent"], [250, 7, 1, "", "submodule_search_locations"]], "importlib.machinery.PathFinder": [[250, 8, 1, "", "find_spec"], [250, 8, 1, "", "invalidate_caches"]], "importlib.machinery.SourceFileLoader": [[250, 8, 1, "", "is_package"], [250, 8, 1, "", "load_module"], [250, 7, 1, "", "name"], [250, 7, 1, "", "path"], [250, 8, 1, "", "path_stats"], [250, 8, 1, "", "set_data"]], "importlib.machinery.SourcelessFileLoader": [[250, 8, 1, "", "get_code"], [250, 8, 1, "", "get_source"], [250, 8, 1, "", "is_package"], [250, 8, 1, "", "load_module"], [250, 7, 1, "", "name"], [250, 7, 1, "", "path"]], "importlib.resources": [[252, 11, 1, "", "Anchor"], [252, 9, 1, "", "Package"], [252, 9, 1, "", "Resource"], [253, 10, 0, "-", "abc"], [252, 12, 1, "", "as_file"], [252, 12, 1, "", "contents"], [252, 12, 1, "", "files"], [252, 12, 1, "", "is_resource"], [252, 12, 1, "", "open_binary"], [252, 12, 1, "", "open_text"], [252, 12, 1, "", "path"], [252, 12, 1, "", "read_binary"], [252, 12, 1, "", "read_text"]], "importlib.resources.abc": [[253, 11, 1, "", "ResourceReader"], [253, 11, 1, "", "Traversable"], [253, 11, 1, "", "TraversableResources"]], "importlib.resources.abc.ResourceReader": [[253, 8, 1, "", "contents"], [253, 8, 1, "", "is_resource"], [253, 8, 1, "", "open_resource"], [253, 8, 1, "", "resource_path"]], "importlib.resources.abc.Traversable": [[253, 8, 1, "", "__truediv__"], [253, 8, 1, "", "is_dir"], [253, 8, 1, "", "is_file"], [253, 8, 1, "", "iterdir"], [253, 8, 1, "", "joinpath"], [253, 7, 1, "", "name"], [253, 8, 1, "", "open"], [253, 8, 1, "", "read_bytes"], [253, 8, 1, "", "read_text"]], "importlib.resources.abc.TraversableResources": [[253, 8, 1, "", "files"]], "importlib.util": [[250, 11, 1, "", "LazyLoader"], [250, 7, 1, "", "MAGIC_NUMBER"], [250, 12, 1, "", "_incompatible_extension_module_restrictions"], [250, 12, 1, "", "cache_from_source"], [250, 12, 1, "", "decode_source"], [250, 12, 1, "", "find_spec"], [250, 12, 1, "", "module_from_spec"], [250, 12, 1, "", "resolve_name"], [250, 12, 1, "", "source_from_cache"], [250, 12, 1, "", "source_hash"], [250, 12, 1, "", "spec_from_file_location"], [250, 12, 1, "", "spec_from_loader"]], "importlib.util.LazyLoader": [[250, 8, 1, "", "factory"]], "inspect": [[255, 11, 1, "", "BoundArguments"], [255, 11, 1, "", "BufferFlags"], [255, 9, 1, "", "CO_ASYNC_GENERATOR"], [255, 9, 1, "", "CO_COROUTINE"], [255, 9, 1, "", "CO_GENERATOR"], [255, 9, 1, "", "CO_ITERABLE_COROUTINE"], [255, 9, 1, "", "CO_NESTED"], [255, 9, 1, "", "CO_NEWLOCALS"], [255, 9, 1, "", "CO_OPTIMIZED"], [255, 9, 1, "", "CO_VARARGS"], [255, 9, 1, "", "CO_VARKEYWORDS"], [255, 11, 1, "", "FrameInfo"], [255, 11, 1, "", "Parameter"], [255, 11, 1, "", "Signature"], [255, 11, 1, "", "Traceback"], [255, 12, 1, "", "cleandoc"], [255, 12, 1, "", "currentframe"], [255, 12, 1, "", "formatargvalues"], [255, 12, 1, "", "get_annotations"], [255, 12, 1, "", "getargvalues"], [255, 12, 1, "", "getasyncgenlocals"], [255, 12, 1, "", "getasyncgenstate"], [255, 12, 1, "", "getattr_static"], [255, 12, 1, "", "getcallargs"], [255, 12, 1, "", "getclasstree"], [255, 12, 1, "", "getclosurevars"], [255, 12, 1, "", "getcomments"], [255, 12, 1, "", "getcoroutinelocals"], [255, 12, 1, "", "getcoroutinestate"], [255, 12, 1, "", "getdoc"], [255, 12, 1, "", "getfile"], [255, 12, 1, "", "getframeinfo"], [255, 12, 1, "", "getfullargspec"], [255, 12, 1, "", "getgeneratorlocals"], [255, 12, 1, "", "getgeneratorstate"], [255, 12, 1, "", "getinnerframes"], [255, 12, 1, "", "getmembers"], [255, 12, 1, "", "getmembers_static"], [255, 12, 1, "", "getmodule"], [255, 12, 1, "", "getmodulename"], [255, 12, 1, "", "getmro"], [255, 12, 1, "", "getouterframes"], [255, 12, 1, "", "getsource"], [255, 12, 1, "", "getsourcefile"], [255, 12, 1, "", "getsourcelines"], [255, 12, 1, "", "isabstract"], [255, 12, 1, "", "isasyncgen"], [255, 12, 1, "", "isasyncgenfunction"], [255, 12, 1, "", "isawaitable"], [255, 12, 1, "", "isbuiltin"], [255, 12, 1, "", "isclass"], [255, 12, 1, "", "iscode"], [255, 12, 1, "", "iscoroutine"], [255, 12, 1, "", "iscoroutinefunction"], [255, 12, 1, "", "isdatadescriptor"], [255, 12, 1, "", "isframe"], [255, 12, 1, "", "isfunction"], [255, 12, 1, "", "isgenerator"], [255, 12, 1, "", "isgeneratorfunction"], [255, 12, 1, "", "isgetsetdescriptor"], [255, 12, 1, "", "ismemberdescriptor"], [255, 12, 1, "", "ismethod"], [255, 12, 1, "", "ismethoddescriptor"], [255, 12, 1, "", "ismethodwrapper"], [255, 12, 1, "", "ismodule"], [255, 12, 1, "", "isroutine"], [255, 12, 1, "", "istraceback"], [255, 12, 1, "", "markcoroutinefunction"], [255, 12, 1, "", "signature"], [255, 12, 1, "", "stack"], [255, 12, 1, "", "trace"], [255, 12, 1, "", "unwrap"], [255, 14, 1, "cmdoption-inspect-details", "--details"]], "inspect.BoundArguments": [[255, 8, 1, "", "apply_defaults"], [255, 7, 1, "", "args"], [255, 7, 1, "", "arguments"], [255, 7, 1, "", "kwargs"], [255, 7, 1, "", "signature"]], "inspect.BufferFlags": [[255, 7, 1, "", "ANY_CONTIGUOUS"], [255, 7, 1, "", "CONTIG"], [255, 7, 1, "", "CONTIG_RO"], [255, 7, 1, "", "C_CONTIGUOUS"], [255, 7, 1, "", "FORMAT"], [255, 7, 1, "", "FULL"], [255, 7, 1, "", "FULL_RO"], [255, 7, 1, "", "F_CONTIGUOUS"], [255, 7, 1, "", "INDIRECT"], [255, 7, 1, "", "ND"], [255, 7, 1, "", "READ"], [255, 7, 1, "", "RECORDS"], [255, 7, 1, "", "RECORDS_RO"], [255, 7, 1, "", "SIMPLE"], [255, 7, 1, "", "STRIDED"], [255, 7, 1, "", "STRIDED_RO"], [255, 7, 1, "", "STRIDES"], [255, 7, 1, "", "WRITABLE"], [255, 7, 1, "", "WRITE"]], "inspect.FrameInfo": [[255, 7, 1, "", "code_context"], [255, 7, 1, "", "filename"], [255, 7, 1, "", "frame"], [255, 7, 1, "", "function"], [255, 7, 1, "", "index"], [255, 7, 1, "", "lineno"], [255, 7, 1, "", "positions"]], "inspect.Parameter": [[255, 7, 1, "", "annotation"], [255, 7, 1, "", "default"], [255, 7, 1, "", "empty"], [255, 7, 1, "", "kind"], [255, 7, 1, "", "name"], [255, 8, 1, "", "replace"]], "inspect.Parameter.kind": [[255, 7, 1, "", "description"]], "inspect.Signature": [[255, 8, 1, "", "bind"], [255, 8, 1, "", "bind_partial"], [255, 7, 1, "", "empty"], [255, 8, 1, "", "from_callable"], [255, 7, 1, "", "parameters"], [255, 8, 1, "", "replace"], [255, 7, 1, "", "return_annotation"]], "inspect.Traceback": [[255, 7, 1, "", "code_context"], [255, 7, 1, "", "filename"], [255, 7, 1, "", "function"], [255, 7, 1, "", "index"], [255, 7, 1, "", "lineno"], [255, 7, 1, "", "positions"]], "instance": [[344, 7, 1, "", "__class__"]], "int": [[344, 8, 1, "", "as_integer_ratio"], [344, 8, 1, "", "bit_count"], [344, 8, 1, "", "bit_length"], [344, 8, 1, "", "from_bytes"], [344, 8, 1, "", "is_integer"], [344, 8, 1, "", "to_bytes"]], "io": [[258, 6, 1, "", "BlockingIOError"], [258, 11, 1, "", "BufferedIOBase"], [258, 11, 1, "", "BufferedRWPair"], [258, 11, 1, "", "BufferedRandom"], [258, 11, 1, "", "BufferedReader"], [258, 11, 1, "", "BufferedWriter"], [258, 11, 1, "", "BytesIO"], [258, 9, 1, "", "DEFAULT_BUFFER_SIZE"], [258, 11, 1, "", "FileIO"], [258, 11, 1, "", "IOBase"], [258, 11, 1, "", "IncrementalNewlineDecoder"], [258, 11, 1, "", "RawIOBase"], [258, 11, 1, "", "StringIO"], [258, 11, 1, "", "TextIOBase"], [258, 11, 1, "", "TextIOWrapper"], [258, 6, 1, "", "UnsupportedOperation"], [258, 12, 1, "", "open"], [258, 12, 1, "", "open_code"], [258, 12, 1, "", "text_encoding"]], "io.BufferedIOBase": [[258, 8, 1, "", "detach"], [258, 7, 1, "", "raw"], [258, 8, 1, "", "read"], [258, 8, 1, "", "read1"], [258, 8, 1, "", "readinto"], [258, 8, 1, "", "readinto1"], [258, 8, 1, "", "write"]], "io.BufferedReader": [[258, 8, 1, "", "peek"], [258, 8, 1, "", "read"], [258, 8, 1, "", "read1"]], "io.BufferedWriter": [[258, 8, 1, "", "flush"], [258, 8, 1, "", "write"]], "io.BytesIO": [[258, 8, 1, "", "getbuffer"], [258, 8, 1, "", "getvalue"], [258, 8, 1, "", "read1"], [258, 8, 1, "", "readinto1"]], "io.FileIO": [[258, 7, 1, "", "mode"], [258, 7, 1, "", "name"]], "io.IOBase": [[258, 8, 1, "", "__del__"], [258, 8, 1, "", "close"], [258, 7, 1, "", "closed"], [258, 8, 1, "", "fileno"], [258, 8, 1, "", "flush"], [258, 8, 1, "", "isatty"], [258, 8, 1, "", "readable"], [258, 8, 1, "", "readline"], [258, 8, 1, "", "readlines"], [258, 8, 1, "", "seek"], [258, 8, 1, "", "seekable"], [258, 8, 1, "", "tell"], [258, 8, 1, "", "truncate"], [258, 8, 1, "", "writable"], [258, 8, 1, "", "writelines"]], "io.RawIOBase": [[258, 8, 1, "", "read"], [258, 8, 1, "", "readall"], [258, 8, 1, "", "readinto"], [258, 8, 1, "", "write"]], "io.StringIO": [[258, 8, 1, "", "getvalue"]], "io.TextIOBase": [[258, 7, 1, "", "buffer"], [258, 8, 1, "", "detach"], [258, 7, 1, "", "encoding"], [258, 7, 1, "", "errors"], [258, 7, 1, "", "newlines"], [258, 8, 1, "", "read"], [258, 8, 1, "", "readline"], [258, 8, 1, "", "seek"], [258, 8, 1, "", "tell"], [258, 8, 1, "", "write"]], "io.TextIOWrapper": [[258, 7, 1, "", "line_buffering"], [258, 8, 1, "", "reconfigure"], [258, 8, 1, "", "seek"], [258, 8, 1, "", "tell"], [258, 7, 1, "", "write_through"]], "ipaddress": [[259, 6, 1, "", "AddressValueError"], [259, 11, 1, "", "IPv4Address"], [259, 11, 1, "", "IPv4Interface"], [259, 11, 1, "", "IPv4Network"], [259, 11, 1, "", "IPv6Address"], [259, 11, 1, "", "IPv6Interface"], [259, 11, 1, "", "IPv6Network"], [259, 6, 1, "", "NetmaskValueError"], [259, 12, 1, "", "collapse_addresses"], [259, 12, 1, "", "get_mixed_type_key"], [259, 12, 1, "", "ip_address"], [259, 12, 1, "", "ip_interface"], [259, 12, 1, "", "ip_network"], [259, 12, 1, "", "summarize_address_range"], [259, 12, 1, "", "v4_int_to_packed"], [259, 12, 1, "", "v6_int_to_packed"]], "ipaddress.IPv4Address": [[259, 8, 1, "", "__format__"], [259, 7, 1, "", "compressed"], [259, 7, 1, "", "exploded"], [259, 7, 1, "", "is_global"], [259, 7, 1, "", "is_link_local"], [259, 7, 1, "", "is_loopback"], [259, 7, 1, "", "is_multicast"], [259, 7, 1, "", "is_private"], [259, 7, 1, "", "is_reserved"], [259, 7, 1, "", "is_unspecified"], [259, 7, 1, "", "max_prefixlen"], [259, 7, 1, "", "packed"], [259, 7, 1, "", "reverse_pointer"], [259, 7, 1, "", "version"]], "ipaddress.IPv4Interface": [[259, 7, 1, "", "ip"], [259, 7, 1, "", "network"], [259, 7, 1, "", "with_hostmask"], [259, 7, 1, "", "with_netmask"], [259, 7, 1, "", "with_prefixlen"]], "ipaddress.IPv4Network": [[259, 8, 1, "", "address_exclude"], [259, 7, 1, "", "broadcast_address"], [259, 8, 1, "", "compare_networks"], [259, 7, 1, "", "compressed"], [259, 7, 1, "", "exploded"], [259, 7, 1, "", "hostmask"], [259, 8, 1, "", "hosts"], [259, 7, 1, "", "is_link_local"], [259, 7, 1, "", "is_loopback"], [259, 7, 1, "", "is_multicast"], [259, 7, 1, "", "is_private"], [259, 7, 1, "", "is_reserved"], [259, 7, 1, "", "is_unspecified"], [259, 7, 1, "", "max_prefixlen"], [259, 7, 1, "", "netmask"], [259, 7, 1, "", "network_address"], [259, 7, 1, "", "num_addresses"], [259, 8, 1, "", "overlaps"], [259, 7, 1, "", "prefixlen"], [259, 8, 1, "", "subnet_of"], [259, 8, 1, "", "subnets"], [259, 8, 1, "", "supernet"], [259, 8, 1, "", "supernet_of"], [259, 7, 1, "", "version"], [259, 7, 1, "", "with_hostmask"], [259, 7, 1, "", "with_netmask"], [259, 7, 1, "", "with_prefixlen"]], "ipaddress.IPv6Address": [[259, 8, 1, "", "__format__"], [259, 7, 1, "", "compressed"], [259, 7, 1, "", "exploded"], [259, 7, 1, "", "ipv4_mapped"], [259, 7, 1, "", "is_global"], [259, 7, 1, "", "is_link_local"], [259, 7, 1, "", "is_loopback"], [259, 7, 1, "", "is_multicast"], [259, 7, 1, "", "is_private"], [259, 7, 1, "", "is_reserved"], [259, 7, 1, "", "is_site_local"], [259, 7, 1, "", "is_unspecified"], [259, 7, 1, "", "max_prefixlen"], [259, 7, 1, "", "packed"], [259, 7, 1, "", "reverse_pointer"], [259, 7, 1, "", "scope_id"], [259, 7, 1, "", "sixtofour"], [259, 7, 1, "", "teredo"], [259, 7, 1, "", "version"]], "ipaddress.IPv6Interface": [[259, 7, 1, "", "ip"], [259, 7, 1, "", "network"], [259, 7, 1, "", "with_hostmask"], [259, 7, 1, "", "with_netmask"], [259, 7, 1, "", "with_prefixlen"]], "ipaddress.IPv6Network": [[259, 8, 1, "", "address_exclude"], [259, 7, 1, "", "broadcast_address"], [259, 8, 1, "", "compare_networks"], [259, 7, 1, "", "compressed"], [259, 7, 1, "", "exploded"], [259, 7, 1, "", "hostmask"], [259, 8, 1, "", "hosts"], [259, 7, 1, "", "is_link_local"], [259, 7, 1, "", "is_loopback"], [259, 7, 1, "", "is_multicast"], [259, 7, 1, "", "is_private"], [259, 7, 1, "", "is_reserved"], [259, 7, 1, "", "is_site_local"], [259, 7, 1, "", "is_unspecified"], [259, 7, 1, "", "max_prefixlen"], [259, 7, 1, "", "netmask"], [259, 7, 1, "", "network_address"], [259, 7, 1, "", "num_addresses"], [259, 8, 1, "", "overlaps"], [259, 7, 1, "", "prefixlen"], [259, 8, 1, "", "subnet_of"], [259, 8, 1, "", "subnets"], [259, 8, 1, "", "supernet"], [259, 8, 1, "", "supernet_of"], [259, 7, 1, "", "version"], [259, 7, 1, "", "with_hostmask"], [259, 7, 1, "", "with_netmask"], [259, 7, 1, "", "with_prefixlen"]], "iterator": [[344, 8, 1, "", "__iter__"], [344, 8, 1, "", "__next__"]], "itertools": [[261, 12, 1, "", "accumulate"], [261, 12, 1, "", "batched"], [261, 12, 1, "", "chain"], [261, 12, 1, "", "combinations"], [261, 12, 1, "", "combinations_with_replacement"], [261, 12, 1, "", "compress"], [261, 12, 1, "", "count"], [261, 12, 1, "", "cycle"], [261, 12, 1, "", "dropwhile"], [261, 12, 1, "", "filterfalse"], [261, 12, 1, "", "groupby"], [261, 12, 1, "", "islice"], [261, 12, 1, "", "pairwise"], [261, 12, 1, "", "permutations"], [261, 12, 1, "", "product"], [261, 12, 1, "", "repeat"], [261, 12, 1, "", "starmap"], [261, 12, 1, "", "takewhile"], [261, 12, 1, "", "tee"], [261, 12, 1, "", "zip_longest"]], "itertools.chain": [[261, 8, 1, "", "from_iterable"]], "json": [[262, 6, 1, "", "JSONDecodeError"], [262, 11, 1, "", "JSONDecoder"], [262, 11, 1, "", "JSONEncoder"], [262, 12, 1, "", "dump"], [262, 12, 1, "", "dumps"], [262, 12, 1, "", "load"], [262, 12, 1, "", "loads"], [262, 10, 0, "-", "tool"]], "json.JSONDecodeError": [[262, 7, 1, "", "colno"], [262, 7, 1, "", "doc"], [262, 7, 1, "", "lineno"], [262, 7, 1, "", "msg"], [262, 7, 1, "", "pos"]], "json.JSONDecoder": [[262, 8, 1, "", "decode"], [262, 8, 1, "", "raw_decode"]], "json.JSONEncoder": [[262, 8, 1, "", "default"], [262, 8, 1, "", "encode"], [262, 8, 1, "", "iterencode"]], "keyword": [[263, 12, 1, "", "iskeyword"], [263, 12, 1, "", "issoftkeyword"], [263, 9, 1, "", "kwlist"], [263, 9, 1, "", "softkwlist"]], "linecache": [[265, 12, 1, "", "checkcache"], [265, 12, 1, "", "clearcache"], [265, 12, 1, "", "getline"], [265, 12, 1, "", "lazycache"]], "list": [[344, 8, 1, "", "sort"]], "locale": [[266, 9, 1, "", "ABDAY_1"], [266, 9, 1, "", "ABDAY_2"], [266, 9, 1, "", "ABDAY_3"], [266, 9, 1, "", "ABDAY_4"], [266, 9, 1, "", "ABDAY_5"], [266, 9, 1, "", "ABDAY_6"], [266, 9, 1, "", "ABDAY_7"], [266, 9, 1, "", "ABMON_1"], [266, 9, 1, "", "ABMON_10"], [266, 9, 1, "", "ABMON_11"], [266, 9, 1, "", "ABMON_12"], [266, 9, 1, "", "ABMON_2"], [266, 9, 1, "", "ABMON_3"], [266, 9, 1, "", "ABMON_4"], [266, 9, 1, "", "ABMON_5"], [266, 9, 1, "", "ABMON_6"], [266, 9, 1, "", "ABMON_7"], [266, 9, 1, "", "ABMON_8"], [266, 9, 1, "", "ABMON_9"], [266, 9, 1, "", "ALT_DIGITS"], [266, 9, 1, "", "CHAR_MAX"], [266, 9, 1, "", "CODESET"], [266, 9, 1, "", "CRNCYSTR"], [266, 9, 1, "", "DAY_1"], [266, 9, 1, "", "DAY_2"], [266, 9, 1, "", "DAY_3"], [266, 9, 1, "", "DAY_4"], [266, 9, 1, "", "DAY_5"], [266, 9, 1, "", "DAY_6"], [266, 9, 1, "", "DAY_7"], [266, 9, 1, "", "D_FMT"], [266, 9, 1, "", "D_T_FMT"], [266, 9, 1, "", "ERA"], [266, 9, 1, "", "ERA_D_FMT"], [266, 9, 1, "", "ERA_D_T_FMT"], [266, 9, 1, "", "ERA_T_FMT"], [266, 6, 1, "", "Error"], [266, 9, 1, "", "LC_ALL"], [266, 9, 1, "", "LC_COLLATE"], [266, 9, 1, "", "LC_CTYPE"], [266, 9, 1, "", "LC_MESSAGES"], [266, 9, 1, "", "LC_MONETARY"], [266, 9, 1, "", "LC_NUMERIC"], [266, 9, 1, "", "LC_TIME"], [266, 9, 1, "", "MON_1"], [266, 9, 1, "", "MON_10"], [266, 9, 1, "", "MON_11"], [266, 9, 1, "", "MON_12"], [266, 9, 1, "", "MON_2"], [266, 9, 1, "", "MON_3"], [266, 9, 1, "", "MON_4"], [266, 9, 1, "", "MON_5"], [266, 9, 1, "", "MON_6"], [266, 9, 1, "", "MON_7"], [266, 9, 1, "", "MON_8"], [266, 9, 1, "", "MON_9"], [266, 9, 1, "", "NOEXPR"], [266, 9, 1, "", "RADIXCHAR"], [266, 9, 1, "", "THOUSEP"], [266, 9, 1, "", "T_FMT"], [266, 9, 1, "", "T_FMT_AMPM"], [266, 9, 1, "", "YESEXPR"], [266, 12, 1, "", "atof"], [266, 12, 1, "", "atoi"], [266, 12, 1, "", "bind_textdomain_codeset"], [266, 12, 1, "", "bindtextdomain"], [266, 12, 1, "", "currency"], [266, 12, 1, "", "dcgettext"], [266, 12, 1, "", "delocalize"], [266, 12, 1, "", "dgettext"], [266, 12, 1, "", "format_string"], [266, 12, 1, "", "getdefaultlocale"], [266, 12, 1, "", "getencoding"], [266, 12, 1, "", "getlocale"], [266, 12, 1, "", "getpreferredencoding"], [266, 12, 1, "", "gettext"], [266, 12, 1, "", "localeconv"], [266, 12, 1, "", "localize"], [266, 12, 1, "", "nl_langinfo"], [266, 12, 1, "", "normalize"], [266, 12, 1, "", "resetlocale"], [266, 12, 1, "", "setlocale"], [266, 12, 1, "", "str"], [266, 12, 1, "", "strcoll"], [266, 12, 1, "", "strxfrm"], [266, 12, 1, "", "textdomain"]], "logging": [[267, 11, 1, "", "BufferingFormatter"], [267, 9, 1, "", "CRITICAL"], [267, 9, 1, "", "DEBUG"], [267, 9, 1, "", "ERROR"], [269, 11, 1, "", "FileHandler"], [267, 11, 1, "", "Filter"], [267, 11, 1, "", "Formatter"], [267, 11, 1, "", "Handler"], [267, 9, 1, "", "INFO"], [267, 11, 1, "", "LogRecord"], [267, 11, 1, "", "Logger"], [267, 11, 1, "", "LoggerAdapter"], [267, 9, 1, "", "NOTSET"], [269, 11, 1, "", "NullHandler"], [269, 11, 1, "", "StreamHandler"], [267, 9, 1, "", "WARNING"], [267, 12, 1, "", "addLevelName"], [267, 12, 1, "", "basicConfig"], [267, 12, 1, "", "captureWarnings"], [268, 10, 0, "-", "config"], [267, 12, 1, "", "critical"], [267, 12, 1, "", "debug"], [267, 12, 1, "", "disable"], [267, 12, 1, "", "error"], [267, 12, 1, "", "exception"], [267, 12, 1, "", "getHandlerByName"], [267, 12, 1, "", "getHandlerNames"], [267, 12, 1, "", "getLevelName"], [267, 12, 1, "", "getLevelNamesMapping"], [267, 12, 1, "", "getLogRecordFactory"], [267, 12, 1, "", "getLogger"], [267, 12, 1, "", "getLoggerClass"], [269, 10, 0, "-", "handlers"], [267, 12, 1, "", "info"], [267, 7, 1, "", "lastResort"], [267, 12, 1, "", "log"], [267, 12, 1, "", "makeLogRecord"], [267, 7, 1, "", "raiseExceptions"], [267, 12, 1, "", "setLogRecordFactory"], [267, 12, 1, "", "setLoggerClass"], [267, 12, 1, "", "shutdown"], [267, 12, 1, "", "warning"]], "logging.BufferingFormatter": [[267, 8, 1, "", "format"], [267, 8, 1, "", "formatFooter"], [267, 8, 1, "", "formatHeader"]], "logging.FileHandler": [[269, 8, 1, "", "close"], [269, 8, 1, "", "emit"]], "logging.Filter": [[267, 8, 1, "", "filter"]], "logging.Formatter": [[267, 8, 1, "", "format"], [267, 8, 1, "", "formatException"], [267, 8, 1, "", "formatStack"], [267, 8, 1, "", "formatTime"]], "logging.Handler": [[267, 8, 1, "", "__init__"], [267, 8, 1, "", "acquire"], [267, 8, 1, "", "addFilter"], [267, 8, 1, "", "close"], [267, 8, 1, "", "createLock"], [267, 8, 1, "", "emit"], [267, 8, 1, "", "filter"], [267, 8, 1, "", "flush"], [267, 8, 1, "", "format"], [267, 8, 1, "", "handle"], [267, 8, 1, "", "handleError"], [267, 8, 1, "", "release"], [267, 8, 1, "", "removeFilter"], [267, 8, 1, "", "setFormatter"], [267, 8, 1, "", "setLevel"]], "logging.LogRecord": [[267, 8, 1, "", "getMessage"]], "logging.Logger": [[267, 8, 1, "", "addFilter"], [267, 8, 1, "", "addHandler"], [267, 8, 1, "", "critical"], [267, 8, 1, "", "debug"], [267, 7, 1, "", "disabled"], [267, 8, 1, "", "error"], [267, 8, 1, "", "exception"], [267, 8, 1, "", "filter"], [267, 8, 1, "", "findCaller"], [267, 8, 1, "", "getChild"], [267, 8, 1, "", "getChildren"], [267, 8, 1, "", "getEffectiveLevel"], [267, 8, 1, "", "handle"], [267, 7, 1, "", "handlers"], [267, 8, 1, "", "hasHandlers"], [267, 8, 1, "", "info"], [267, 8, 1, "", "isEnabledFor"], [267, 7, 1, "", "level"], [267, 8, 1, "", "log"], [267, 8, 1, "", "makeRecord"], [267, 7, 1, "", "name"], [267, 7, 1, "", "parent"], [267, 7, 1, "", "propagate"], [267, 8, 1, "", "removeFilter"], [267, 8, 1, "", "removeHandler"], [267, 8, 1, "", "setLevel"], [267, 8, 1, "", "warning"]], "logging.LoggerAdapter": [[267, 7, 1, "", "_log"], [267, 7, 1, "", "manager"], [267, 8, 1, "", "process"]], "logging.NullHandler": [[269, 8, 1, "", "createLock"], [269, 8, 1, "", "emit"], [269, 8, 1, "", "handle"]], "logging.StreamHandler": [[269, 8, 1, "", "emit"], [269, 8, 1, "", "flush"], [269, 8, 1, "", "setStream"], [269, 7, 1, "", "terminator"]], "logging.config": [[268, 12, 1, "", "dictConfig"], [268, 12, 1, "", "fileConfig"], [268, 12, 1, "", "listen"], [268, 12, 1, "", "stopListening"]], "logging.handlers": [[269, 11, 1, "", "BaseRotatingHandler"], [269, 11, 1, "", "BufferingHandler"], [269, 11, 1, "", "DatagramHandler"], [269, 11, 1, "", "HTTPHandler"], [269, 11, 1, "", "MemoryHandler"], [269, 11, 1, "", "NTEventLogHandler"], [269, 11, 1, "", "QueueHandler"], [269, 11, 1, "", "QueueListener"], [269, 11, 1, "", "RotatingFileHandler"], [269, 11, 1, "", "SMTPHandler"], [269, 11, 1, "", "SocketHandler"], [269, 11, 1, "", "SysLogHandler"], [269, 11, 1, "", "TimedRotatingFileHandler"], [269, 11, 1, "", "WatchedFileHandler"]], "logging.handlers.BaseRotatingHandler": [[269, 7, 1, "", "namer"], [269, 8, 1, "", "rotate"], [269, 8, 1, "", "rotation_filename"], [269, 7, 1, "", "rotator"]], "logging.handlers.BufferingHandler": [[269, 8, 1, "", "emit"], [269, 8, 1, "", "flush"], [269, 8, 1, "", "shouldFlush"]], "logging.handlers.DatagramHandler": [[269, 8, 1, "", "emit"], [269, 8, 1, "", "makeSocket"], [269, 8, 1, "", "send"]], "logging.handlers.HTTPHandler": [[269, 8, 1, "", "emit"], [269, 8, 1, "", "mapLogRecord"]], "logging.handlers.MemoryHandler": [[269, 8, 1, "", "close"], [269, 8, 1, "", "flush"], [269, 8, 1, "", "setTarget"], [269, 8, 1, "", "shouldFlush"]], "logging.handlers.NTEventLogHandler": [[269, 8, 1, "", "close"], [269, 8, 1, "", "emit"], [269, 8, 1, "", "getEventCategory"], [269, 8, 1, "", "getEventType"], [269, 8, 1, "", "getMessageID"]], "logging.handlers.QueueHandler": [[269, 8, 1, "", "emit"], [269, 8, 1, "", "enqueue"], [269, 7, 1, "", "listener"], [269, 8, 1, "", "prepare"]], "logging.handlers.QueueListener": [[269, 8, 1, "", "dequeue"], [269, 8, 1, "", "enqueue_sentinel"], [269, 8, 1, "", "handle"], [269, 8, 1, "", "prepare"], [269, 8, 1, "", "start"], [269, 8, 1, "", "stop"]], "logging.handlers.RotatingFileHandler": [[269, 8, 1, "", "doRollover"], [269, 8, 1, "", "emit"]], "logging.handlers.SMTPHandler": [[269, 8, 1, "", "emit"], [269, 8, 1, "", "getSubject"]], "logging.handlers.SocketHandler": [[269, 8, 1, "", "close"], [269, 8, 1, "", "createSocket"], [269, 8, 1, "", "emit"], [269, 8, 1, "", "handleError"], [269, 8, 1, "", "makePickle"], [269, 8, 1, "", "makeSocket"], [269, 8, 1, "", "send"]], "logging.handlers.SysLogHandler": [[269, 8, 1, "", "close"], [269, 8, 1, "", "createSocket"], [269, 8, 1, "", "emit"], [269, 8, 1, "", "encodePriority"], [269, 8, 1, "", "mapPriority"]], "logging.handlers.TimedRotatingFileHandler": [[269, 8, 1, "", "doRollover"], [269, 8, 1, "", "emit"], [269, 8, 1, "", "getFilesToDelete"]], "logging.handlers.WatchedFileHandler": [[269, 8, 1, "", "emit"], [269, 8, 1, "", "reopenIfNeeded"]], "logging.logging.Formatter": [[101, 8, 1, "", "__init__"]], "lzma": [[270, 11, 1, "", "LZMACompressor"], [270, 11, 1, "", "LZMADecompressor"], [270, 6, 1, "", "LZMAError"], [270, 11, 1, "", "LZMAFile"], [270, 12, 1, "", "compress"], [270, 12, 1, "", "decompress"], [270, 12, 1, "", "is_check_supported"], [270, 12, 1, "", "open"]], "lzma.LZMACompressor": [[270, 8, 1, "", "compress"], [270, 8, 1, "", "flush"]], "lzma.LZMADecompressor": [[270, 7, 1, "", "check"], [270, 8, 1, "", "decompress"], [270, 7, 1, "", "eof"], [270, 7, 1, "", "needs_input"], [270, 7, 1, "", "unused_data"]], "lzma.LZMAFile": [[270, 8, 1, "", "peek"]], "mailbox": [[271, 11, 1, "", "Babyl"], [271, 11, 1, "", "BabylMessage"], [271, 6, 1, "", "Error"], [271, 6, 1, "", "ExternalClashError"], [271, 6, 1, "", "FormatError"], [271, 11, 1, "", "MH"], [271, 11, 1, "", "MHMessage"], [271, 11, 1, "", "MMDF"], [271, 11, 1, "", "MMDFMessage"], [271, 11, 1, "", "Mailbox"], [271, 11, 1, "", "Maildir"], [271, 11, 1, "", "MaildirMessage"], [271, 11, 1, "", "Message"], [271, 6, 1, "", "NoSuchMailboxError"], [271, 6, 1, "", "NotEmptyError"], [271, 11, 1, "", "mbox"], [271, 11, 1, "", "mboxMessage"]], "mailbox.Babyl": [[271, 8, 1, "", "get_file"], [271, 8, 1, "", "get_labels"], [271, 8, 1, "", "lock"], [271, 8, 1, "", "unlock"]], "mailbox.BabylMessage": [[271, 8, 1, "", "add_label"], [271, 8, 1, "", "get_labels"], [271, 8, 1, "", "get_visible"], [271, 8, 1, "", "remove_label"], [271, 8, 1, "", "set_labels"], [271, 8, 1, "", "set_visible"], [271, 8, 1, "", "update_visible"]], "mailbox.MH": [[271, 8, 1, "", "__delitem__"], [271, 8, 1, "", "add_folder"], [271, 8, 1, "", "close"], [271, 8, 1, "", "discard"], [271, 8, 1, "", "flush"], [271, 8, 1, "", "get_file"], [271, 8, 1, "", "get_folder"], [271, 8, 1, "", "get_sequences"], [271, 8, 1, "", "list_folders"], [271, 8, 1, "", "lock"], [271, 8, 1, "", "pack"], [271, 8, 1, "", "remove"], [271, 8, 1, "", "remove_folder"], [271, 8, 1, "", "set_sequences"], [271, 8, 1, "", "unlock"]], "mailbox.MHMessage": [[271, 8, 1, "", "add_sequence"], [271, 8, 1, "", "get_sequences"], [271, 8, 1, "", "remove_sequence"], [271, 8, 1, "", "set_sequences"]], "mailbox.MMDF": [[271, 8, 1, "", "get_file"], [271, 8, 1, "", "lock"], [271, 8, 1, "", "unlock"]], "mailbox.MMDFMessage": [[271, 8, 1, "", "add_flag"], [271, 8, 1, "", "get_flags"], [271, 8, 1, "", "get_from"], [271, 8, 1, "", "remove_flag"], [271, 8, 1, "", "set_flags"], [271, 8, 1, "", "set_from"]], "mailbox.Mailbox": [[271, 8, 1, "", "__contains__"], [271, 8, 1, "", "__delitem__"], [271, 8, 1, "", "__getitem__"], [271, 8, 1, "", "__iter__"], [271, 8, 1, "", "__len__"], [271, 8, 1, "", "__setitem__"], [271, 8, 1, "", "add"], [271, 8, 1, "", "clear"], [271, 8, 1, "", "close"], [271, 8, 1, "", "discard"], [271, 8, 1, "", "flush"], [271, 8, 1, "", "get"], [271, 8, 1, "", "get_bytes"], [271, 8, 1, "", "get_file"], [271, 8, 1, "", "get_message"], [271, 8, 1, "", "get_string"], [271, 8, 1, "", "items"], [271, 8, 1, "", "iteritems"], [271, 8, 1, "", "iterkeys"], [271, 8, 1, "", "itervalues"], [271, 8, 1, "", "keys"], [271, 8, 1, "", "lock"], [271, 8, 1, "", "pop"], [271, 8, 1, "", "popitem"], [271, 8, 1, "", "remove"], [271, 8, 1, "", "unlock"], [271, 8, 1, "", "update"], [271, 8, 1, "", "values"]], "mailbox.Maildir": [[271, 8, 1, "", "__setitem__"], [271, 8, 1, "", "add"], [271, 8, 1, "", "add_folder"], [271, 8, 1, "", "clean"], [271, 8, 1, "", "close"], [271, 7, 1, "", "colon"], [271, 8, 1, "", "flush"], [271, 8, 1, "", "get_file"], [271, 8, 1, "", "get_folder"], [271, 8, 1, "", "list_folders"], [271, 8, 1, "", "lock"], [271, 8, 1, "", "remove_folder"], [271, 8, 1, "", "unlock"], [271, 8, 1, "", "update"]], "mailbox.MaildirMessage": [[271, 8, 1, "", "add_flag"], [271, 8, 1, "", "get_date"], [271, 8, 1, "", "get_flags"], [271, 8, 1, "", "get_info"], [271, 8, 1, "", "get_subdir"], [271, 8, 1, "", "remove_flag"], [271, 8, 1, "", "set_date"], [271, 8, 1, "", "set_flags"], [271, 8, 1, "", "set_info"], [271, 8, 1, "", "set_subdir"]], "mailbox.mbox": [[271, 8, 1, "", "get_file"], [271, 8, 1, "", "lock"], [271, 8, 1, "", "unlock"]], "mailbox.mboxMessage": [[271, 8, 1, "", "add_flag"], [271, 8, 1, "", "get_flags"], [271, 8, 1, "", "get_from"], [271, 8, 1, "", "remove_flag"], [271, 8, 1, "", "set_flags"], [271, 8, 1, "", "set_from"]], "mailcap": [[272, 12, 1, "", "findmatch"], [272, 12, 1, "", "getcaps"]], "marshal": [[274, 12, 1, "", "dump"], [274, 12, 1, "", "dumps"], [274, 12, 1, "", "load"], [274, 12, 1, "", "loads"], [274, 9, 1, "", "version"]], "math": [[275, 12, 1, "", "acos"], [275, 12, 1, "", "acosh"], [275, 12, 1, "", "asin"], [275, 12, 1, "", "asinh"], [275, 12, 1, "", "atan"], [275, 12, 1, "", "atan2"], [275, 12, 1, "", "atanh"], [275, 12, 1, "", "cbrt"], [275, 12, 1, "", "ceil"], [275, 12, 1, "", "comb"], [275, 12, 1, "", "copysign"], [275, 12, 1, "", "cos"], [275, 12, 1, "", "cosh"], [275, 12, 1, "", "degrees"], [275, 12, 1, "", "dist"], [275, 9, 1, "", "e"], [275, 12, 1, "", "erf"], [275, 12, 1, "", "erfc"], [275, 12, 1, "", "exp"], [275, 12, 1, "", "exp2"], [275, 12, 1, "", "expm1"], [275, 12, 1, "", "fabs"], [275, 12, 1, "", "factorial"], [275, 12, 1, "", "floor"], [275, 12, 1, "", "fmod"], [275, 12, 1, "", "frexp"], [275, 12, 1, "", "fsum"], [275, 12, 1, "", "gamma"], [275, 12, 1, "", "gcd"], [275, 12, 1, "", "hypot"], [275, 9, 1, "", "inf"], [275, 12, 1, "", "isclose"], [275, 12, 1, "", "isfinite"], [275, 12, 1, "", "isinf"], [275, 12, 1, "", "isnan"], [275, 12, 1, "", "isqrt"], [275, 12, 1, "", "lcm"], [275, 12, 1, "", "ldexp"], [275, 12, 1, "", "lgamma"], [275, 12, 1, "", "log"], [275, 12, 1, "", "log10"], [275, 12, 1, "", "log1p"], [275, 12, 1, "", "log2"], [275, 12, 1, "", "modf"], [275, 9, 1, "", "nan"], [275, 12, 1, "", "nextafter"], [275, 12, 1, "", "perm"], [275, 9, 1, "", "pi"], [275, 12, 1, "", "pow"], [275, 12, 1, "", "prod"], [275, 12, 1, "", "radians"], [275, 12, 1, "", "remainder"], [275, 12, 1, "", "sin"], [275, 12, 1, "", "sinh"], [275, 12, 1, "", "sqrt"], [275, 12, 1, "", "sumprod"], [275, 12, 1, "", "tan"], [275, 12, 1, "", "tanh"], [275, 9, 1, "", "tau"], [275, 12, 1, "", "trunc"], [275, 12, 1, "", "ulp"]], "memoryview": [[344, 8, 1, "", "__eq__"], [344, 7, 1, "", "c_contiguous"], [344, 8, 1, "", "cast"], [344, 7, 1, "", "contiguous"], [344, 7, 1, "", "f_contiguous"], [344, 7, 1, "", "format"], [344, 8, 1, "", "hex"], [344, 7, 1, "", "itemsize"], [344, 7, 1, "", "nbytes"], [344, 7, 1, "", "ndim"], [344, 7, 1, "", "obj"], [344, 7, 1, "", "readonly"], [344, 8, 1, "", "release"], [344, 7, 1, "", "shape"], [344, 7, 1, "", "strides"], [344, 7, 1, "", "suboffsets"], [344, 8, 1, "", "tobytes"], [344, 8, 1, "", "tolist"], [344, 8, 1, "", "toreadonly"]], "method": [[428, 7, 1, "", "__doc__"], [428, 7, 1, "", "__func__"], [428, 7, 1, "", "__module__"], [428, 7, 1, "", "__name__"], [428, 7, 1, "", "__self__"]], "mimetypes": [[276, 11, 1, "", "MimeTypes"], [276, 12, 1, "", "add_type"], [276, 9, 1, "", "common_types"], [276, 9, 1, "", "encodings_map"], [276, 12, 1, "", "guess_all_extensions"], [276, 12, 1, "", "guess_extension"], [276, 12, 1, "", "guess_type"], [276, 12, 1, "", "init"], [276, 9, 1, "", "inited"], [276, 9, 1, "", "knownfiles"], [276, 12, 1, "", "read_mime_types"], [276, 9, 1, "", "suffix_map"], [276, 9, 1, "", "types_map"]], "mimetypes.MimeTypes": [[276, 7, 1, "", "encodings_map"], [276, 8, 1, "", "guess_all_extensions"], [276, 8, 1, "", "guess_extension"], [276, 8, 1, "", "guess_type"], [276, 8, 1, "", "read"], [276, 8, 1, "", "read_windows_registry"], [276, 8, 1, "", "readfp"], [276, 7, 1, "", "suffix_map"], [276, 7, 1, "", "types_map"], [276, 7, 1, "", "types_map_inv"]], "mmap": [[278, 9, 1, "", "MADV_AUTOSYNC"], [278, 9, 1, "", "MADV_CORE"], [278, 9, 1, "", "MADV_DODUMP"], [278, 9, 1, "", "MADV_DOFORK"], [278, 9, 1, "", "MADV_DONTDUMP"], [278, 9, 1, "", "MADV_DONTFORK"], [278, 9, 1, "", "MADV_DONTNEED"], [278, 9, 1, "", "MADV_FREE"], [278, 9, 1, "", "MADV_FREE_REUSABLE"], [278, 9, 1, "", "MADV_FREE_REUSE"], [278, 9, 1, "", "MADV_HUGEPAGE"], [278, 9, 1, "", "MADV_HWPOISON"], [278, 9, 1, "", "MADV_MERGEABLE"], [278, 9, 1, "", "MADV_NOCORE"], [278, 9, 1, "", "MADV_NOHUGEPAGE"], [278, 9, 1, "", "MADV_NORMAL"], [278, 9, 1, "", "MADV_NOSYNC"], [278, 9, 1, "", "MADV_PROTECT"], [278, 9, 1, "", "MADV_RANDOM"], [278, 9, 1, "", "MADV_REMOVE"], [278, 9, 1, "", "MADV_SEQUENTIAL"], [278, 9, 1, "", "MADV_SOFT_OFFLINE"], [278, 9, 1, "", "MADV_UNMERGEABLE"], [278, 9, 1, "", "MADV_WILLNEED"], [278, 9, 1, "", "MAP_ALIGNED_SUPER"], [278, 9, 1, "", "MAP_ANON"], [278, 9, 1, "", "MAP_ANONYMOUS"], [278, 9, 1, "", "MAP_CONCEAL"], [278, 9, 1, "", "MAP_DENYWRITE"], [278, 9, 1, "", "MAP_EXECUTABLE"], [278, 9, 1, "", "MAP_POPULATE"], [278, 9, 1, "", "MAP_PRIVATE"], [278, 9, 1, "", "MAP_SHARED"], [278, 9, 1, "", "MAP_STACK"], [278, 11, 1, "", "mmap"]], "mmap.mmap": [[278, 8, 1, "", "close"], [278, 7, 1, "", "closed"], [278, 8, 1, "", "find"], [278, 8, 1, "", "flush"], [278, 8, 1, "", "madvise"], [278, 8, 1, "", "move"], [278, 8, 1, "", "read"], [278, 8, 1, "", "read_byte"], [278, 8, 1, "", "readline"], [278, 8, 1, "", "resize"], [278, 8, 1, "", "rfind"], [278, 8, 1, "", "seek"], [278, 8, 1, "", "size"], [278, 8, 1, "", "tell"], [278, 8, 1, "", "write"], [278, 8, 1, "", "write_byte"]], "modulefinder": [[279, 12, 1, "", "AddPackagePath"], [279, 11, 1, "", "ModuleFinder"], [279, 12, 1, "", "ReplacePackage"]], "modulefinder.ModuleFinder": [[279, 7, 1, "", "modules"], [279, 8, 1, "", "report"], [279, 8, 1, "", "run_script"]], "msilib": [[281, 11, 1, "", "Binary"], [281, 11, 1, "", "CAB"], [281, 11, 1, "", "Control"], [281, 12, 1, "", "CreateRecord"], [281, 11, 1, "", "Dialog"], [281, 11, 1, "", "Directory"], [281, 12, 1, "", "FCICreate"], [281, 11, 1, "", "Feature"], [281, 12, 1, "", "OpenDatabase"], [281, 11, 1, "", "RadioButtonGroup"], [281, 12, 1, "", "UuidCreate"], [281, 12, 1, "", "add_data"], [281, 12, 1, "", "add_stream"], [281, 12, 1, "", "add_tables"], [281, 12, 1, "", "gen_uuid"], [281, 12, 1, "", "init_database"], [281, 9, 1, "", "schema"], [281, 9, 1, "", "sequence"], [281, 9, 1, "", "text"]], "msilib.CAB": [[281, 8, 1, "", "append"], [281, 8, 1, "", "commit"]], "msilib.Control": [[281, 8, 1, "", "condition"], [281, 8, 1, "", "event"], [281, 8, 1, "", "mapping"]], "msilib.Database": [[281, 8, 1, "", "Close"], [281, 8, 1, "", "Commit"], [281, 8, 1, "", "GetSummaryInformation"], [281, 8, 1, "", "OpenView"]], "msilib.Dialog": [[281, 8, 1, "", "bitmap"], [281, 8, 1, "", "checkbox"], [281, 8, 1, "", "control"], [281, 8, 1, "", "line"], [281, 8, 1, "", "pushbutton"], [281, 8, 1, "", "radiogroup"], [281, 8, 1, "", "text"]], "msilib.Directory": [[281, 8, 1, "", "add_file"], [281, 8, 1, "", "glob"], [281, 8, 1, "", "remove_pyc"], [281, 8, 1, "", "start_component"]], "msilib.Feature": [[281, 8, 1, "", "set_current"]], "msilib.RadioButtonGroup": [[281, 8, 1, "", "add"]], "msilib.Record": [[281, 8, 1, "", "ClearData"], [281, 8, 1, "", "GetFieldCount"], [281, 8, 1, "", "GetInteger"], [281, 8, 1, "", "GetString"], [281, 8, 1, "", "SetInteger"], [281, 8, 1, "", "SetStream"], [281, 8, 1, "", "SetString"]], "msilib.SummaryInformation": [[281, 8, 1, "", "GetProperty"], [281, 8, 1, "", "GetPropertyCount"], [281, 8, 1, "", "Persist"], [281, 8, 1, "", "SetProperty"]], "msilib.View": [[281, 8, 1, "", "Close"], [281, 8, 1, "", "Execute"], [281, 8, 1, "", "Fetch"], [281, 8, 1, "", "GetColumnInfo"], [281, 8, 1, "", "Modify"]], "msvcrt": [[282, 9, 1, "", "CRT_ASSEMBLY_VERSION"], [282, 9, 1, "", "LIBRARIES_ASSEMBLY_NAME_PREFIX"], [282, 9, 1, "", "LK_LOCK"], [282, 9, 1, "", "LK_NBLCK"], [282, 9, 1, "", "LK_NBRLCK"], [282, 9, 1, "", "LK_RLCK"], [282, 9, 1, "", "LK_UNLCK"], [282, 9, 1, "", "VC_ASSEMBLY_PUBLICKEYTOKEN"], [282, 12, 1, "", "get_osfhandle"], [282, 12, 1, "", "getch"], [282, 12, 1, "", "getche"], [282, 12, 1, "", "getwch"], [282, 12, 1, "", "getwche"], [282, 12, 1, "", "heapmin"], [282, 12, 1, "", "kbhit"], [282, 12, 1, "", "locking"], [282, 12, 1, "", "open_osfhandle"], [282, 12, 1, "", "putch"], [282, 12, 1, "", "putwch"], [282, 12, 1, "", "setmode"], [282, 12, 1, "", "ungetch"], [282, 12, 1, "", "ungetwch"]], "multiprocessing": [[283, 12, 1, "", "Array"], [283, 6, 1, "", "AuthenticationError"], [283, 11, 1, "", "Barrier"], [283, 11, 1, "", "BoundedSemaphore"], [283, 6, 1, "", "BufferTooShort"], [283, 11, 1, "", "Condition"], [283, 11, 1, "", "Event"], [283, 11, 1, "", "JoinableQueue"], [283, 11, 1, "", "Lock"], [283, 12, 1, "", "Manager"], [283, 12, 1, "", "Pipe"], [283, 11, 1, "", "Process"], [283, 6, 1, "", "ProcessError"], [283, 11, 1, "", "Queue"], [283, 11, 1, "", "RLock"], [283, 11, 1, "", "Semaphore"], [283, 11, 1, "", "SimpleQueue"], [283, 6, 1, "", "TimeoutError"], [283, 12, 1, "", "Value"], [283, 12, 1, "", "active_children"], [283, 10, 0, "-", "connection"], [283, 12, 1, "", "cpu_count"], [283, 12, 1, "", "current_process"], [283, 10, 0, "-", "dummy"], [283, 12, 1, "", "freeze_support"], [283, 12, 1, "", "get_all_start_methods"], [283, 12, 1, "", "get_context"], [283, 12, 1, "", "get_logger"], [283, 12, 1, "", "get_start_method"], [283, 12, 1, "", "log_to_stderr"], [283, 10, 0, "-", "managers"], [283, 12, 1, "", "parent_process"], [283, 10, 0, "-", "pool"], [283, 12, 1, "", "set_executable"], [283, 12, 1, "", "set_forkserver_preload"], [283, 12, 1, "", "set_start_method"], [284, 10, 0, "-", "shared_memory"], [283, 10, 0, "-", "sharedctypes"]], "multiprocessing.JoinableQueue": [[283, 8, 1, "", "join"], [283, 8, 1, "", "task_done"]], "multiprocessing.Lock": [[283, 8, 1, "", "acquire"], [283, 8, 1, "", "release"]], "multiprocessing.Process": [[283, 7, 1, "", "authkey"], [283, 8, 1, "", "close"], [283, 7, 1, "", "daemon"], [283, 7, 1, "", "exitcode"], [283, 8, 1, "", "is_alive"], [283, 8, 1, "", "join"], [283, 8, 1, "", "kill"], [283, 7, 1, "", "name"], [283, 7, 1, "", "pid"], [283, 8, 1, "", "run"], [283, 7, 1, "", "sentinel"], [283, 8, 1, "", "start"], [283, 8, 1, "", "terminate"]], "multiprocessing.Queue": [[283, 8, 1, "", "cancel_join_thread"], [283, 8, 1, "", "close"], [283, 8, 1, "", "empty"], [283, 8, 1, "", "full"], [283, 8, 1, "", "get"], [283, 8, 1, "", "get_nowait"], [283, 8, 1, "", "join_thread"], [283, 8, 1, "", "put"], [283, 8, 1, "", "put_nowait"], [283, 8, 1, "", "qsize"]], "multiprocessing.RLock": [[283, 8, 1, "", "acquire"], [283, 8, 1, "", "release"]], "multiprocessing.SimpleQueue": [[283, 8, 1, "", "close"], [283, 8, 1, "", "empty"], [283, 8, 1, "", "get"], [283, 8, 1, "", "put"]], "multiprocessing.connection": [[283, 12, 1, "", "Client"], [283, 11, 1, "", "Connection"], [283, 11, 1, "", "Listener"], [283, 12, 1, "", "answer_challenge"], [283, 12, 1, "", "deliver_challenge"], [283, 12, 1, "", "wait"]], "multiprocessing.connection.Connection": [[283, 8, 1, "", "close"], [283, 8, 1, "", "fileno"], [283, 8, 1, "", "poll"], [283, 8, 1, "", "recv"], [283, 8, 1, "", "recv_bytes"], [283, 8, 1, "", "recv_bytes_into"], [283, 8, 1, "", "send"], [283, 8, 1, "", "send_bytes"]], "multiprocessing.connection.Listener": [[283, 8, 1, "", "accept"], [283, 7, 1, "", "address"], [283, 8, 1, "", "close"], [283, 7, 1, "", "last_accepted"]], "multiprocessing.managers": [[283, 11, 1, "", "BaseManager"], [283, 11, 1, "", "BaseProxy"], [283, 11, 1, "", "Namespace"], [284, 11, 1, "", "SharedMemoryManager"], [283, 11, 1, "", "SyncManager"]], "multiprocessing.managers.BaseManager": [[283, 7, 1, "", "address"], [283, 8, 1, "", "connect"], [283, 8, 1, "", "get_server"], [283, 8, 1, "", "register"], [283, 8, 1, "", "shutdown"], [283, 8, 1, "", "start"]], "multiprocessing.managers.BaseProxy": [[283, 8, 1, "", "__repr__"], [283, 8, 1, "", "__str__"], [283, 8, 1, "", "_callmethod"], [283, 8, 1, "", "_getvalue"]], "multiprocessing.managers.SharedMemoryManager": [[284, 8, 1, "", "ShareableList"], [284, 8, 1, "", "SharedMemory"]], "multiprocessing.managers.SyncManager": [[283, 8, 1, "", "Array"], [283, 8, 1, "", "Barrier"], [283, 8, 1, "", "BoundedSemaphore"], [283, 8, 1, "", "Condition"], [283, 8, 1, "", "Event"], [283, 8, 1, "", "Lock"], [283, 8, 1, "", "Namespace"], [283, 8, 1, "", "Queue"], [283, 8, 1, "", "RLock"], [283, 8, 1, "", "Semaphore"], [283, 8, 1, "", "Value"], [283, 8, 1, "", "dict"], [283, 8, 1, "", "list"]], "multiprocessing.pool": [[283, 11, 1, "", "AsyncResult"], [283, 11, 1, "", "Pool"], [283, 11, 1, "", "ThreadPool"]], "multiprocessing.pool.AsyncResult": [[283, 8, 1, "", "get"], [283, 8, 1, "", "ready"], [283, 8, 1, "", "successful"], [283, 8, 1, "", "wait"]], "multiprocessing.pool.Pool": [[283, 8, 1, "", "apply"], [283, 8, 1, "", "apply_async"], [283, 8, 1, "", "close"], [283, 8, 1, "", "imap"], [283, 8, 1, "", "imap_unordered"], [283, 8, 1, "", "join"], [283, 8, 1, "", "map"], [283, 8, 1, "", "map_async"], [283, 8, 1, "", "starmap"], [283, 8, 1, "", "starmap_async"], [283, 8, 1, "", "terminate"]], "multiprocessing.shared_memory": [[284, 11, 1, "", "ShareableList"], [284, 11, 1, "", "SharedMemory"]], "multiprocessing.shared_memory.ShareableList": [[284, 8, 1, "", "count"], [284, 7, 1, "", "format"], [284, 8, 1, "", "index"], [284, 7, 1, "", "shm"]], "multiprocessing.shared_memory.SharedMemory": [[284, 7, 1, "", "buf"], [284, 8, 1, "", "close"], [284, 7, 1, "", "name"], [284, 7, 1, "", "size"], [284, 8, 1, "", "unlink"]], "multiprocessing.sharedctypes": [[283, 12, 1, "", "Array"], [283, 12, 1, "", "RawArray"], [283, 12, 1, "", "RawValue"], [283, 12, 1, "", "Value"], [283, 12, 1, "", "copy"], [283, 12, 1, "", "synchronized"]], "netrc": [[286, 6, 1, "", "NetrcParseError"], [286, 11, 1, "", "netrc"]], "netrc.NetrcParseError": [[286, 7, 1, "", "filename"], [286, 7, 1, "", "lineno"], [286, 7, 1, "", "msg"]], "netrc.netrc": [[286, 8, 1, "", "__repr__"], [286, 8, 1, "", "authenticators"], [286, 7, 1, "", "hosts"], [286, 7, 1, "", "macros"]], "nis": [[287, 12, 1, "", "cat"], [287, 6, 1, "", "error"], [287, 12, 1, "", "get_default_domain"], [287, 12, 1, "", "maps"], [287, 12, 1, "", "match"]], "nntplib": [[288, 11, 1, "", "NNTP"], [288, 6, 1, "", "NNTPDataError"], [288, 6, 1, "", "NNTPError"], [288, 6, 1, "", "NNTPPermanentError"], [288, 6, 1, "", "NNTPProtocolError"], [288, 6, 1, "", "NNTPReplyError"], [288, 6, 1, "", "NNTPTemporaryError"], [288, 11, 1, "", "NNTP_SSL"], [288, 12, 1, "", "decode_header"]], "nntplib.NNTP": [[288, 8, 1, "", "article"], [288, 8, 1, "", "body"], [288, 8, 1, "", "date"], [288, 8, 1, "", "description"], [288, 8, 1, "", "descriptions"], [288, 8, 1, "", "getcapabilities"], [288, 8, 1, "", "getwelcome"], [288, 8, 1, "", "group"], [288, 8, 1, "", "head"], [288, 8, 1, "", "help"], [288, 8, 1, "", "ihave"], [288, 8, 1, "", "last"], [288, 8, 1, "", "list"], [288, 8, 1, "", "login"], [288, 8, 1, "", "newgroups"], [288, 8, 1, "", "newnews"], [288, 8, 1, "", "next"], [288, 7, 1, "", "nntp_implementation"], [288, 7, 1, "", "nntp_version"], [288, 8, 1, "", "over"], [288, 8, 1, "", "post"], [288, 8, 1, "", "quit"], [288, 8, 1, "", "set_debuglevel"], [288, 8, 1, "", "slave"], [288, 8, 1, "", "starttls"], [288, 8, 1, "", "stat"], [288, 8, 1, "", "xhdr"], [288, 8, 1, "", "xover"]], "nntplib.NNTPError": [[288, 7, 1, "", "response"]], "numbers": [[289, 11, 1, "", "Complex"], [289, 11, 1, "", "Integral"], [289, 11, 1, "", "Number"], [289, 11, 1, "", "Rational"], [289, 11, 1, "", "Real"]], "numbers.Complex": [[289, 8, 1, "", "conjugate"], [289, 7, 1, "", "imag"], [289, 7, 1, "", "real"]], "numbers.Rational": [[289, 7, 1, "", "denominator"], [289, 7, 1, "", "numerator"]], "object": [[428, 8, 1, "", "__abs__"], [428, 8, 1, "", "__add__"], [428, 8, 1, "", "__aenter__"], [428, 8, 1, "", "__aexit__"], [428, 8, 1, "", "__aiter__"], [428, 8, 1, "", "__and__"], [428, 8, 1, "", "__anext__"], [428, 8, 1, "", "__await__"], [428, 8, 1, "", "__bool__"], [428, 8, 1, "", "__buffer__"], [428, 8, 1, "", "__bytes__"], [428, 8, 1, "", "__call__"], [428, 8, 1, "", "__ceil__"], [428, 8, 1, "", "__class_getitem__"], [428, 8, 1, "", "__complex__"], [428, 8, 1, "", "__contains__"], [428, 8, 1, "", "__del__"], [428, 8, 1, "", "__delattr__"], [428, 8, 1, "", "__delete__"], [428, 8, 1, "", "__delitem__"], [344, 7, 1, "", "__dict__"], [428, 8, 1, "", "__dir__"], [428, 8, 1, "", "__divmod__"], [428, 8, 1, "", "__enter__"], [428, 8, 1, "", "__eq__"], [428, 8, 1, "", "__exit__"], [428, 8, 1, "", "__float__"], [428, 8, 1, "", "__floor__"], [428, 8, 1, "", "__floordiv__"], [428, 8, 1, "", "__format__"], [428, 8, 1, "", "__ge__"], [428, 8, 1, "", "__get__"], [428, 8, 1, "", "__getattr__"], [428, 8, 1, "", "__getattribute__"], [428, 8, 1, "", "__getitem__"], [299, 8, 1, "", "__getnewargs__"], [299, 8, 1, "", "__getnewargs_ex__"], [299, 8, 1, "", "__getstate__"], [428, 8, 1, "", "__gt__"], [428, 8, 1, "", "__hash__"], [428, 8, 1, "", "__iadd__"], [428, 8, 1, "", "__iand__"], [428, 8, 1, "", "__ifloordiv__"], [428, 8, 1, "", "__ilshift__"], [428, 8, 1, "", "__imatmul__"], [428, 8, 1, "", "__imod__"], [428, 8, 1, "", "__imul__"], [428, 8, 1, "", "__index__"], [428, 8, 1, "", "__init__"], [428, 8, 1, "", "__init_subclass__"], [428, 8, 1, "", "__int__"], [428, 8, 1, "", "__invert__"], [428, 8, 1, "", "__ior__"], [428, 8, 1, "", "__ipow__"], [428, 8, 1, "", "__irshift__"], [428, 8, 1, "", "__isub__"], [428, 8, 1, "", "__iter__"], [428, 8, 1, "", "__itruediv__"], [428, 8, 1, "", "__ixor__"], [428, 8, 1, "", "__le__"], [428, 8, 1, "", "__len__"], [428, 8, 1, "", "__length_hint__"], [428, 8, 1, "", "__lshift__"], [428, 8, 1, "", "__lt__"], [428, 9, 1, "", "__match_args__"], [428, 8, 1, "", "__matmul__"], [428, 8, 1, "", "__missing__"], [428, 8, 1, "", "__mod__"], [428, 8, 1, "", "__mro_entries__"], [428, 8, 1, "", "__mul__"], [428, 8, 1, "", "__ne__"], [428, 8, 1, "", "__neg__"], [428, 8, 1, "", "__new__"], [428, 7, 1, "", "__objclass__"], [428, 8, 1, "", "__or__"], [428, 8, 1, "", "__pos__"], [428, 8, 1, "", "__pow__"], [428, 8, 1, "", "__radd__"], [428, 8, 1, "", "__rand__"], [428, 8, 1, "", "__rdivmod__"], [299, 8, 1, "", "__reduce__"], [299, 8, 1, "", "__reduce_ex__"], [428, 8, 1, "", "__release_buffer__"], [428, 8, 1, "", "__repr__"], [428, 8, 1, "", "__reversed__"], [428, 8, 1, "", "__rfloordiv__"], [428, 8, 1, "", "__rlshift__"], [428, 8, 1, "", "__rmatmul__"], [428, 8, 1, "", "__rmod__"], [428, 8, 1, "", "__rmul__"], [428, 8, 1, "", "__ror__"], [428, 8, 1, "", "__round__"], [428, 8, 1, "", "__rpow__"], [428, 8, 1, "", "__rrshift__"], [428, 8, 1, "", "__rshift__"], [428, 8, 1, "", "__rsub__"], [428, 8, 1, "", "__rtruediv__"], [428, 8, 1, "", "__rxor__"], [428, 8, 1, "", "__set__"], [428, 8, 1, "", "__set_name__"], [428, 8, 1, "", "__setattr__"], [428, 8, 1, "", "__setitem__"], [299, 8, 1, "", "__setstate__"], [428, 9, 1, "", "__slots__"], [428, 8, 1, "", "__str__"], [428, 8, 1, "", "__sub__"], [428, 8, 1, "", "__truediv__"], [428, 8, 1, "", "__trunc__"], [428, 8, 1, "", "__xor__"]], "operator": [[291, 12, 1, "", "__abs__"], [291, 12, 1, "", "__add__"], [291, 12, 1, "", "__and__"], [291, 12, 1, "", "__call__"], [291, 12, 1, "", "__concat__"], [291, 12, 1, "", "__contains__"], [291, 12, 1, "", "__delitem__"], [291, 12, 1, "", "__eq__"], [291, 12, 1, "", "__floordiv__"], [291, 12, 1, "", "__ge__"], [291, 12, 1, "", "__getitem__"], [291, 12, 1, "", "__gt__"], [291, 12, 1, "", "__iadd__"], [291, 12, 1, "", "__iand__"], [291, 12, 1, "", "__iconcat__"], [291, 12, 1, "", "__ifloordiv__"], [291, 12, 1, "", "__ilshift__"], [291, 12, 1, "", "__imatmul__"], [291, 12, 1, "", "__imod__"], [291, 12, 1, "", "__imul__"], [291, 12, 1, "", "__index__"], [291, 12, 1, "", "__inv__"], [291, 12, 1, "", "__invert__"], [291, 12, 1, "", "__ior__"], [291, 12, 1, "", "__ipow__"], [291, 12, 1, "", "__irshift__"], [291, 12, 1, "", "__isub__"], [291, 12, 1, "", "__itruediv__"], [291, 12, 1, "", "__ixor__"], [291, 12, 1, "", "__le__"], [291, 12, 1, "", "__lshift__"], [291, 12, 1, "", "__lt__"], [291, 12, 1, "", "__matmul__"], [291, 12, 1, "", "__mod__"], [291, 12, 1, "", "__mul__"], [291, 12, 1, "", "__ne__"], [291, 12, 1, "", "__neg__"], [291, 12, 1, "", "__not__"], [291, 12, 1, "", "__or__"], [291, 12, 1, "", "__pos__"], [291, 12, 1, "", "__pow__"], [291, 12, 1, "", "__rshift__"], [291, 12, 1, "", "__setitem__"], [291, 12, 1, "", "__sub__"], [291, 12, 1, "", "__truediv__"], [291, 12, 1, "", "__xor__"], [291, 12, 1, "", "abs"], [291, 12, 1, "", "add"], [291, 12, 1, "", "and_"], [291, 12, 1, "", "attrgetter"], [291, 12, 1, "", "call"], [291, 12, 1, "", "concat"], [291, 12, 1, "", "contains"], [291, 12, 1, "", "countOf"], [291, 12, 1, "", "delitem"], [291, 12, 1, "", "eq"], [291, 12, 1, "", "floordiv"], [291, 12, 1, "", "ge"], [291, 12, 1, "", "getitem"], [291, 12, 1, "", "gt"], [291, 12, 1, "", "iadd"], [291, 12, 1, "", "iand"], [291, 12, 1, "", "iconcat"], [291, 12, 1, "", "ifloordiv"], [291, 12, 1, "", "ilshift"], [291, 12, 1, "", "imatmul"], [291, 12, 1, "", "imod"], [291, 12, 1, "", "imul"], [291, 12, 1, "", "index"], [291, 12, 1, "", "indexOf"], [291, 12, 1, "", "inv"], [291, 12, 1, "", "invert"], [291, 12, 1, "", "ior"], [291, 12, 1, "", "ipow"], [291, 12, 1, "", "irshift"], [291, 12, 1, "", "is_"], [291, 12, 1, "", "is_not"], [291, 12, 1, "", "isub"], [291, 12, 1, "", "itemgetter"], [291, 12, 1, "", "itruediv"], [291, 12, 1, "", "ixor"], [291, 12, 1, "", "le"], [291, 12, 1, "", "length_hint"], [291, 12, 1, "", "lshift"], [291, 12, 1, "", "lt"], [291, 12, 1, "", "matmul"], [291, 12, 1, "", "methodcaller"], [291, 12, 1, "", "mod"], [291, 12, 1, "", "mul"], [291, 12, 1, "", "ne"], [291, 12, 1, "", "neg"], [291, 12, 1, "", "not_"], [291, 12, 1, "", "or_"], [291, 12, 1, "", "pos"], [291, 12, 1, "", "pow"], [291, 12, 1, "", "rshift"], [291, 12, 1, "", "setitem"], [291, 12, 1, "", "sub"], [291, 12, 1, "", "truediv"], [291, 12, 1, "", "truth"], [291, 12, 1, "", "xor"]], "optparse": [[292, 6, 1, "", "AmbiguousOptionError"], [292, 6, 1, "", "BadOptionError"], [292, 11, 1, "", "Option"], [292, 6, 1, "", "OptionConflictError"], [292, 6, 1, "", "OptionError"], [292, 11, 1, "", "OptionGroup"], [292, 11, 1, "", "OptionParser"], [292, 6, 1, "", "OptionValueError"], [292, 11, 1, "", "Values"]], "optparse.Option": [[292, 7, 1, "", "ACTIONS"], [292, 7, 1, "", "ALWAYS_TYPED_ACTIONS"], [292, 7, 1, "", "STORE_ACTIONS"], [292, 7, 1, "", "TYPED_ACTIONS"], [292, 7, 1, "", "TYPES"], [292, 7, 1, "", "TYPE_CHECKER"], [292, 7, 1, "", "action"], [292, 7, 1, "", "callback"], [292, 7, 1, "", "callback_args"], [292, 7, 1, "", "callback_kwargs"], [292, 7, 1, "", "choices"], [292, 7, 1, "", "const"], [292, 7, 1, "", "default"], [292, 7, 1, "", "dest"], [292, 7, 1, "", "help"], [292, 7, 1, "", "metavar"], [292, 7, 1, "", "nargs"], [292, 7, 1, "", "type"]], "optparse.OptionParser": [[292, 8, 1, "", "add_option"], [292, 8, 1, "", "disable_interspersed_args"], [292, 8, 1, "", "enable_interspersed_args"], [292, 8, 1, "", "get_option"], [292, 8, 1, "", "get_option_group"], [292, 8, 1, "", "get_usage"], [292, 8, 1, "", "get_version"], [292, 8, 1, "", "has_option"], [292, 8, 1, "", "parse_args"], [292, 8, 1, "", "print_usage"], [292, 8, 1, "", "print_version"], [292, 8, 1, "", "remove_option"], [292, 8, 1, "", "set_defaults"], [292, 8, 1, "", "set_usage"]], "os": [[293, 9, 1, "", "CLD_CONTINUED"], [293, 9, 1, "", "CLD_DUMPED"], [293, 9, 1, "", "CLD_EXITED"], [293, 9, 1, "", "CLD_KILLED"], [293, 9, 1, "", "CLD_STOPPED"], [293, 9, 1, "", "CLD_TRAPPED"], [293, 9, 1, "", "CLONE_FILES"], [293, 9, 1, "", "CLONE_FS"], [293, 9, 1, "", "CLONE_NEWCGROUP"], [293, 9, 1, "", "CLONE_NEWIPC"], [293, 9, 1, "", "CLONE_NEWNET"], [293, 9, 1, "", "CLONE_NEWNS"], [293, 9, 1, "", "CLONE_NEWPID"], [293, 9, 1, "", "CLONE_NEWTIME"], [293, 9, 1, "", "CLONE_NEWUSER"], [293, 9, 1, "", "CLONE_NEWUTS"], [293, 9, 1, "", "CLONE_SIGHAND"], [293, 9, 1, "", "CLONE_SYSVSEM"], [293, 9, 1, "", "CLONE_THREAD"], [293, 9, 1, "", "CLONE_VM"], [293, 11, 1, "", "DirEntry"], [293, 9, 1, "", "EFD_CLOEXEC"], [293, 9, 1, "", "EFD_NONBLOCK"], [293, 9, 1, "", "EFD_SEMAPHORE"], [293, 9, 1, "", "EX_CANTCREAT"], [293, 9, 1, "", "EX_CONFIG"], [293, 9, 1, "", "EX_DATAERR"], [293, 9, 1, "", "EX_IOERR"], [293, 9, 1, "", "EX_NOHOST"], [293, 9, 1, "", "EX_NOINPUT"], [293, 9, 1, "", "EX_NOPERM"], [293, 9, 1, "", "EX_NOTFOUND"], [293, 9, 1, "", "EX_NOUSER"], [293, 9, 1, "", "EX_OK"], [293, 9, 1, "", "EX_OSERR"], [293, 9, 1, "", "EX_OSFILE"], [293, 9, 1, "", "EX_PROTOCOL"], [293, 9, 1, "", "EX_SOFTWARE"], [293, 9, 1, "", "EX_TEMPFAIL"], [293, 9, 1, "", "EX_UNAVAILABLE"], [293, 9, 1, "", "EX_USAGE"], [293, 9, 1, "", "F_LOCK"], [293, 9, 1, "", "F_OK"], [293, 9, 1, "", "F_TEST"], [293, 9, 1, "", "F_TLOCK"], [293, 9, 1, "", "F_ULOCK"], [293, 9, 1, "", "GRND_NONBLOCK"], [293, 9, 1, "", "GRND_RANDOM"], [293, 9, 1, "", "MFD_ALLOW_SEALING"], [293, 9, 1, "", "MFD_CLOEXEC"], [293, 9, 1, "", "MFD_HUGETLB"], [293, 9, 1, "", "MFD_HUGE_16GB"], [293, 9, 1, "", "MFD_HUGE_16MB"], [293, 9, 1, "", "MFD_HUGE_1GB"], [293, 9, 1, "", "MFD_HUGE_1MB"], [293, 9, 1, "", "MFD_HUGE_256MB"], [293, 9, 1, "", "MFD_HUGE_2GB"], [293, 9, 1, "", "MFD_HUGE_2MB"], [293, 9, 1, "", "MFD_HUGE_32MB"], [293, 9, 1, "", "MFD_HUGE_512KB"], [293, 9, 1, "", "MFD_HUGE_512MB"], [293, 9, 1, "", "MFD_HUGE_64KB"], [293, 9, 1, "", "MFD_HUGE_8MB"], [293, 9, 1, "", "MFD_HUGE_MASK"], [293, 9, 1, "", "MFD_HUGE_SHIFT"], [293, 9, 1, "", "O_APPEND"], [293, 9, 1, "", "O_ASYNC"], [293, 9, 1, "", "O_BINARY"], [293, 9, 1, "", "O_CLOEXEC"], [293, 9, 1, "", "O_CREAT"], [293, 9, 1, "", "O_DIRECT"], [293, 9, 1, "", "O_DIRECTORY"], [293, 9, 1, "", "O_DSYNC"], [293, 9, 1, "", "O_EVTONLY"], [293, 9, 1, "", "O_EXCL"], [293, 9, 1, "", "O_EXLOCK"], [293, 9, 1, "", "O_FSYNC"], [293, 9, 1, "", "O_NDELAY"], [293, 9, 1, "", "O_NOATIME"], [293, 9, 1, "", "O_NOCTTY"], [293, 9, 1, "", "O_NOFOLLOW"], [293, 9, 1, "", "O_NOFOLLOW_ANY"], [293, 9, 1, "", "O_NOINHERIT"], [293, 9, 1, "", "O_NONBLOCK"], [293, 9, 1, "", "O_PATH"], [293, 9, 1, "", "O_RANDOM"], [293, 9, 1, "", "O_RDONLY"], [293, 9, 1, "", "O_RDWR"], [293, 9, 1, "", "O_RSYNC"], [293, 9, 1, "", "O_SEQUENTIAL"], [293, 9, 1, "", "O_SHLOCK"], [293, 9, 1, "", "O_SHORT_LIVED"], [293, 9, 1, "", "O_SYMLINK"], [293, 9, 1, "", "O_SYNC"], [293, 9, 1, "", "O_TEMPORARY"], [293, 9, 1, "", "O_TEXT"], [293, 9, 1, "", "O_TMPFILE"], [293, 9, 1, "", "O_TRUNC"], [293, 9, 1, "", "O_WRONLY"], [293, 9, 1, "", "PIDFD_NONBLOCK"], [293, 9, 1, "", "POSIX_FADV_DONTNEED"], [293, 9, 1, "", "POSIX_FADV_NOREUSE"], [293, 9, 1, "", "POSIX_FADV_NORMAL"], [293, 9, 1, "", "POSIX_FADV_RANDOM"], [293, 9, 1, "", "POSIX_FADV_SEQUENTIAL"], [293, 9, 1, "", "POSIX_FADV_WILLNEED"], [293, 9, 1, "", "POSIX_SPAWN_CLOSE"], [293, 9, 1, "", "POSIX_SPAWN_DUP2"], [293, 9, 1, "", "POSIX_SPAWN_OPEN"], [293, 9, 1, "", "PRIO_DARWIN_BG"], [293, 9, 1, "", "PRIO_DARWIN_NONUI"], [293, 9, 1, "", "PRIO_DARWIN_PROCESS"], [293, 9, 1, "", "PRIO_DARWIN_THREAD"], [293, 9, 1, "", "PRIO_PGRP"], [293, 9, 1, "", "PRIO_PROCESS"], [293, 9, 1, "", "PRIO_USER"], [293, 9, 1, "", "P_ALL"], [293, 9, 1, "", "P_DETACH"], [293, 9, 1, "", "P_NOWAIT"], [293, 9, 1, "", "P_NOWAITO"], [293, 9, 1, "", "P_OVERLAY"], [293, 9, 1, "", "P_PGID"], [293, 9, 1, "", "P_PID"], [293, 9, 1, "", "P_PIDFD"], [293, 9, 1, "", "P_WAIT"], [293, 11, 1, "", "PathLike"], [293, 9, 1, "", "RTLD_DEEPBIND"], [293, 9, 1, "", "RTLD_GLOBAL"], [293, 9, 1, "", "RTLD_LAZY"], [293, 9, 1, "", "RTLD_LOCAL"], [293, 9, 1, "", "RTLD_NODELETE"], [293, 9, 1, "", "RTLD_NOLOAD"], [293, 9, 1, "", "RTLD_NOW"], [293, 9, 1, "", "RWF_APPEND"], [293, 9, 1, "", "RWF_DSYNC"], [293, 9, 1, "", "RWF_HIPRI"], [293, 9, 1, "", "RWF_NOWAIT"], [293, 9, 1, "", "RWF_SYNC"], [293, 9, 1, "", "R_OK"], [293, 9, 1, "", "SCHED_BATCH"], [293, 9, 1, "", "SCHED_FIFO"], [293, 9, 1, "", "SCHED_IDLE"], [293, 9, 1, "", "SCHED_OTHER"], [293, 9, 1, "", "SCHED_RESET_ON_FORK"], [293, 9, 1, "", "SCHED_RR"], [293, 9, 1, "", "SCHED_SPORADIC"], [293, 9, 1, "", "SEEK_CUR"], [293, 9, 1, "", "SEEK_DATA"], [293, 9, 1, "", "SEEK_END"], [293, 9, 1, "", "SEEK_HOLE"], [293, 9, 1, "", "SEEK_SET"], [293, 9, 1, "", "SF_MNOWAIT"], [293, 9, 1, "", "SF_NOCACHE"], [293, 9, 1, "", "SF_NODISKIO"], [293, 9, 1, "", "SF_SYNC"], [293, 9, 1, "", "SPLICE_F_MORE"], [293, 9, 1, "", "SPLICE_F_MOVE"], [293, 9, 1, "", "SPLICE_F_NONBLOCK"], [293, 9, 1, "", "WCONTINUED"], [293, 12, 1, "", "WCOREDUMP"], [293, 9, 1, "", "WEXITED"], [293, 12, 1, "", "WEXITSTATUS"], [293, 12, 1, "", "WIFCONTINUED"], [293, 12, 1, "", "WIFEXITED"], [293, 12, 1, "", "WIFSIGNALED"], [293, 12, 1, "", "WIFSTOPPED"], [293, 9, 1, "", "WNOHANG"], [293, 9, 1, "", "WNOWAIT"], [293, 9, 1, "", "WSTOPPED"], [293, 12, 1, "", "WSTOPSIG"], [293, 12, 1, "", "WTERMSIG"], [293, 9, 1, "", "WUNTRACED"], [293, 9, 1, "", "W_OK"], [293, 9, 1, "", "XATTR_CREATE"], [293, 9, 1, "", "XATTR_REPLACE"], [293, 9, 1, "", "XATTR_SIZE_MAX"], [293, 9, 1, "", "X_OK"], [293, 12, 1, "", "_exit"], [293, 12, 1, "", "abort"], [293, 12, 1, "", "access"], [293, 12, 1, "", "add_dll_directory"], [293, 9, 1, "", "altsep"], [293, 12, 1, "", "chdir"], [293, 12, 1, "", "chflags"], [293, 12, 1, "", "chmod"], [293, 12, 1, "", "chown"], [293, 12, 1, "", "chroot"], [293, 12, 1, "", "close"], [293, 12, 1, "", "closerange"], [293, 12, 1, "", "confstr"], [293, 9, 1, "", "confstr_names"], [293, 12, 1, "", "copy_file_range"], [293, 12, 1, "", "cpu_count"], [293, 12, 1, "", "ctermid"], [293, 9, 1, "", "curdir"], [293, 9, 1, "", "defpath"], [293, 12, 1, "", "device_encoding"], [293, 9, 1, "", "devnull"], [293, 12, 1, "", "dup"], [293, 12, 1, "", "dup2"], [293, 9, 1, "", "environ"], [293, 9, 1, "", "environb"], [293, 6, 1, "", "error"], [293, 12, 1, "", "eventfd"], [293, 12, 1, "", "eventfd_read"], [293, 12, 1, "", "eventfd_write"], [293, 12, 1, "", "execl"], [293, 12, 1, "", "execle"], [293, 12, 1, "", "execlp"], [293, 12, 1, "", "execlpe"], [293, 12, 1, "", "execv"], [293, 12, 1, "", "execve"], [293, 12, 1, "", "execvp"], [293, 12, 1, "", "execvpe"], [293, 9, 1, "", "extsep"], [293, 12, 1, "", "fchdir"], [293, 12, 1, "", "fchmod"], [293, 12, 1, "", "fchown"], [293, 12, 1, "", "fdatasync"], [293, 12, 1, "", "fdopen"], [293, 12, 1, "", "fork"], [293, 12, 1, "", "forkpty"], [293, 12, 1, "", "fpathconf"], [293, 12, 1, "", "fsdecode"], [293, 12, 1, "", "fsencode"], [293, 12, 1, "", "fspath"], [293, 12, 1, "", "fstat"], [293, 12, 1, "", "fstatvfs"], [293, 12, 1, "", "fsync"], [293, 12, 1, "", "ftruncate"], [293, 12, 1, "", "fwalk"], [293, 12, 1, "", "get_blocking"], [293, 12, 1, "", "get_exec_path"], [293, 12, 1, "", "get_handle_inheritable"], [293, 12, 1, "", "get_inheritable"], [293, 12, 1, "", "get_terminal_size"], [293, 12, 1, "", "getcwd"], [293, 12, 1, "", "getcwdb"], [293, 12, 1, "", "getegid"], [293, 12, 1, "", "getenv"], [293, 12, 1, "", "getenvb"], [293, 12, 1, "", "geteuid"], [293, 12, 1, "", "getgid"], [293, 12, 1, "", "getgrouplist"], [293, 12, 1, "", "getgroups"], [293, 12, 1, "", "getloadavg"], [293, 12, 1, "", "getlogin"], [293, 12, 1, "", "getpgid"], [293, 12, 1, "", "getpgrp"], [293, 12, 1, "", "getpid"], [293, 12, 1, "", "getppid"], [293, 12, 1, "", "getpriority"], [293, 12, 1, "", "getrandom"], [293, 12, 1, "", "getresgid"], [293, 12, 1, "", "getresuid"], [293, 12, 1, "", "getsid"], [293, 12, 1, "", "getuid"], [293, 12, 1, "", "getxattr"], [293, 12, 1, "", "initgroups"], [293, 12, 1, "", "isatty"], [293, 12, 1, "", "kill"], [293, 12, 1, "", "killpg"], [293, 12, 1, "", "lchflags"], [293, 12, 1, "", "lchmod"], [293, 12, 1, "", "lchown"], [293, 9, 1, "", "linesep"], [293, 12, 1, "", "link"], [293, 12, 1, "", "listdir"], [293, 12, 1, "", "listdrives"], [293, 12, 1, "", "listmounts"], [293, 12, 1, "", "listvolumes"], [293, 12, 1, "", "listxattr"], [293, 12, 1, "", "lockf"], [293, 12, 1, "", "login_tty"], [293, 12, 1, "", "lseek"], [293, 12, 1, "", "lstat"], [293, 12, 1, "", "major"], [293, 12, 1, "", "makedev"], [293, 12, 1, "", "makedirs"], [293, 12, 1, "", "memfd_create"], [293, 12, 1, "", "minor"], [293, 12, 1, "", "mkdir"], [293, 12, 1, "", "mkfifo"], [293, 12, 1, "", "mknod"], [293, 9, 1, "", "name"], [293, 12, 1, "", "nice"], [293, 12, 1, "", "open"], [293, 12, 1, "", "openpty"], [293, 9, 1, "", "pardir"], [294, 10, 0, "-", "path"], [293, 12, 1, "", "pathconf"], [293, 9, 1, "", "pathconf_names"], [293, 9, 1, "", "pathsep"], [293, 12, 1, "", "pidfd_open"], [293, 12, 1, "", "pipe"], [293, 12, 1, "", "pipe2"], [293, 12, 1, "", "plock"], [293, 12, 1, "", "popen"], [293, 12, 1, "", "posix_fadvise"], [293, 12, 1, "", "posix_fallocate"], [293, 12, 1, "", "posix_spawn"], [293, 12, 1, "", "posix_spawnp"], [293, 12, 1, "", "pread"], [293, 12, 1, "", "preadv"], [293, 12, 1, "", "putenv"], [293, 12, 1, "", "pwrite"], [293, 12, 1, "", "pwritev"], [293, 12, 1, "", "read"], [293, 12, 1, "", "readlink"], [293, 12, 1, "", "readv"], [293, 12, 1, "", "register_at_fork"], [293, 12, 1, "", "remove"], [293, 12, 1, "", "removedirs"], [293, 12, 1, "", "removexattr"], [293, 12, 1, "", "rename"], [293, 12, 1, "", "renames"], [293, 12, 1, "", "replace"], [293, 12, 1, "", "rmdir"], [293, 12, 1, "", "scandir"], [293, 12, 1, "", "sched_get_priority_max"], [293, 12, 1, "", "sched_get_priority_min"], [293, 12, 1, "", "sched_getaffinity"], [293, 12, 1, "", "sched_getparam"], [293, 12, 1, "", "sched_getscheduler"], [293, 11, 1, "", "sched_param"], [293, 12, 1, "", "sched_rr_get_interval"], [293, 12, 1, "", "sched_setaffinity"], [293, 12, 1, "", "sched_setparam"], [293, 12, 1, "", "sched_setscheduler"], [293, 12, 1, "", "sched_yield"], [293, 12, 1, "", "sendfile"], [293, 9, 1, "", "sep"], [293, 12, 1, "", "set_blocking"], [293, 12, 1, "", "set_handle_inheritable"], [293, 12, 1, "", "set_inheritable"], [293, 12, 1, "", "setegid"], [293, 12, 1, "", "seteuid"], [293, 12, 1, "", "setgid"], [293, 12, 1, "", "setgroups"], [293, 12, 1, "", "setns"], [293, 12, 1, "", "setpgid"], [293, 12, 1, "", "setpgrp"], [293, 12, 1, "", "setpriority"], [293, 12, 1, "", "setregid"], [293, 12, 1, "", "setresgid"], [293, 12, 1, "", "setresuid"], [293, 12, 1, "", "setreuid"], [293, 12, 1, "", "setsid"], [293, 12, 1, "", "setuid"], [293, 12, 1, "", "setxattr"], [293, 12, 1, "", "spawnl"], [293, 12, 1, "", "spawnle"], [293, 12, 1, "", "spawnlp"], [293, 12, 1, "", "spawnlpe"], [293, 12, 1, "", "spawnv"], [293, 12, 1, "", "spawnve"], [293, 12, 1, "", "spawnvp"], [293, 12, 1, "", "spawnvpe"], [293, 12, 1, "", "splice"], [293, 12, 1, "", "startfile"], [293, 12, 1, "", "stat"], [293, 11, 1, "", "stat_result"], [293, 12, 1, "", "statvfs"], [293, 12, 1, "", "strerror"], [293, 9, 1, "", "supports_bytes_environ"], [293, 9, 1, "", "supports_dir_fd"], [293, 9, 1, "", "supports_effective_ids"], [293, 9, 1, "", "supports_fd"], [293, 9, 1, "", "supports_follow_symlinks"], [293, 12, 1, "", "symlink"], [293, 12, 1, "", "sync"], [293, 12, 1, "", "sysconf"], [293, 9, 1, "", "sysconf_names"], [293, 12, 1, "", "system"], [293, 12, 1, "", "tcgetpgrp"], [293, 12, 1, "", "tcsetpgrp"], [293, 11, 1, "", "terminal_size"], [293, 12, 1, "", "times"], [293, 12, 1, "", "truncate"], [293, 12, 1, "", "ttyname"], [293, 12, 1, "", "umask"], [293, 12, 1, "", "uname"], [293, 12, 1, "", "unlink"], [293, 12, 1, "", "unsetenv"], [293, 12, 1, "", "unshare"], [293, 12, 1, "", "urandom"], [293, 12, 1, "", "utime"], [293, 12, 1, "", "wait"], [293, 12, 1, "", "wait3"], [293, 12, 1, "", "wait4"], [293, 12, 1, "", "waitid"], [293, 12, 1, "", "waitpid"], [293, 12, 1, "", "waitstatus_to_exitcode"], [293, 12, 1, "", "walk"], [293, 12, 1, "", "write"], [293, 12, 1, "", "writev"]], "os.DirEntry": [[293, 8, 1, "", "inode"], [293, 8, 1, "", "is_dir"], [293, 8, 1, "", "is_file"], [293, 8, 1, "", "is_junction"], [293, 8, 1, "", "is_symlink"], [293, 7, 1, "", "name"], [293, 7, 1, "", "path"], [293, 8, 1, "", "stat"]], "os.PathLike": [[293, 8, 1, "", "__fspath__"]], "os.path": [[294, 12, 1, "", "abspath"], [294, 12, 1, "", "basename"], [294, 12, 1, "", "commonpath"], [294, 12, 1, "", "commonprefix"], [294, 12, 1, "", "dirname"], [294, 12, 1, "", "exists"], [294, 12, 1, "", "expanduser"], [294, 12, 1, "", "expandvars"], [294, 12, 1, "", "getatime"], [294, 12, 1, "", "getctime"], [294, 12, 1, "", "getmtime"], [294, 12, 1, "", "getsize"], [294, 12, 1, "", "isabs"], [294, 12, 1, "", "isdevdrive"], [294, 12, 1, "", "isdir"], [294, 12, 1, "", "isfile"], [294, 12, 1, "", "isjunction"], [294, 12, 1, "", "islink"], [294, 12, 1, "", "ismount"], [294, 12, 1, "", "join"], [294, 12, 1, "", "lexists"], [294, 12, 1, "", "normcase"], [294, 12, 1, "", "normpath"], [294, 12, 1, "", "realpath"], [294, 12, 1, "", "relpath"], [294, 12, 1, "", "samefile"], [294, 12, 1, "", "sameopenfile"], [294, 12, 1, "", "samestat"], [294, 12, 1, "", "split"], [294, 12, 1, "", "splitdrive"], [294, 12, 1, "", "splitext"], [294, 12, 1, "", "splitroot"], [294, 9, 1, "", "supports_unicode_filenames"]], "os.scandir": [[293, 8, 1, "", "close"]], "os.sched_param": [[293, 7, 1, "", "sched_priority"]], "os.stat_result": [[293, 7, 1, "", "st_atime"], [293, 7, 1, "", "st_atime_ns"], [293, 7, 1, "", "st_birthtime"], [293, 7, 1, "", "st_birthtime_ns"], [293, 7, 1, "", "st_blksize"], [293, 7, 1, "", "st_blocks"], [293, 7, 1, "", "st_creator"], [293, 7, 1, "", "st_ctime"], [293, 7, 1, "", "st_ctime_ns"], [293, 7, 1, "", "st_dev"], [293, 7, 1, "", "st_file_attributes"], [293, 7, 1, "", "st_flags"], [293, 7, 1, "", "st_fstype"], [293, 7, 1, "", "st_gen"], [293, 7, 1, "", "st_gid"], [293, 7, 1, "", "st_ino"], [293, 7, 1, "", "st_mode"], [293, 7, 1, "", "st_mtime"], [293, 7, 1, "", "st_mtime_ns"], [293, 7, 1, "", "st_nlink"], [293, 7, 1, "", "st_rdev"], [293, 7, 1, "", "st_reparse_tag"], [293, 7, 1, "", "st_rsize"], [293, 7, 1, "", "st_size"], [293, 7, 1, "", "st_type"], [293, 7, 1, "", "st_uid"]], "os.terminal_size": [[293, 7, 1, "", "columns"], [293, 7, 1, "", "lines"]], "ossaudiodev": [[295, 6, 1, "", "OSSAudioError"], [295, 12, 1, "", "open"], [295, 12, 1, "", "openmixer"]], "ossaudiodev.oss_audio_device": [[295, 8, 1, "", "bufsize"], [295, 8, 1, "", "channels"], [295, 8, 1, "", "close"], [295, 7, 1, "", "closed"], [295, 8, 1, "", "fileno"], [295, 8, 1, "", "getfmts"], [295, 7, 1, "", "mode"], [295, 7, 1, "", "name"], [295, 8, 1, "", "nonblock"], [295, 8, 1, "", "obufcount"], [295, 8, 1, "", "obuffree"], [295, 8, 1, "", "post"], [295, 8, 1, "", "read"], [295, 8, 1, "", "reset"], [295, 8, 1, "", "setfmt"], [295, 8, 1, "", "setparameters"], [295, 8, 1, "", "speed"], [295, 8, 1, "", "sync"], [295, 8, 1, "", "write"], [295, 8, 1, "", "writeall"]], "ossaudiodev.oss_mixer_device": [[295, 8, 1, "", "close"], [295, 8, 1, "", "controls"], [295, 8, 1, "", "fileno"], [295, 8, 1, "", "get"], [295, 8, 1, "", "get_recsrc"], [295, 8, 1, "", "reccontrols"], [295, 8, 1, "", "set"], [295, 8, 1, "", "set_recsrc"], [295, 8, 1, "", "stereocontrols"]], "pathlib": [[296, 11, 1, "", "Path"], [296, 11, 1, "", "PosixPath"], [296, 11, 1, "", "PurePath"], [296, 11, 1, "", "PurePosixPath"], [296, 11, 1, "", "PureWindowsPath"], [296, 11, 1, "", "WindowsPath"]], "pathlib.Path": [[296, 8, 1, "", "absolute"], [296, 8, 1, "", "chmod"], [296, 8, 1, "", "cwd"], [296, 8, 1, "", "exists"], [296, 8, 1, "", "expanduser"], [296, 8, 1, "", "glob"], [296, 8, 1, "", "group"], [296, 8, 1, "", "hardlink_to"], [296, 8, 1, "", "home"], [296, 8, 1, "", "is_block_device"], [296, 8, 1, "", "is_char_device"], [296, 8, 1, "", "is_dir"], [296, 8, 1, "", "is_fifo"], [296, 8, 1, "", "is_file"], [296, 8, 1, "", "is_junction"], [296, 8, 1, "", "is_mount"], [296, 8, 1, "", "is_socket"], [296, 8, 1, "", "is_symlink"], [296, 8, 1, "", "iterdir"], [296, 8, 1, "", "lchmod"], [296, 8, 1, "", "lstat"], [296, 8, 1, "", "mkdir"], [296, 8, 1, "", "open"], [296, 8, 1, "", "owner"], [296, 8, 1, "", "read_bytes"], [296, 8, 1, "", "read_text"], [296, 8, 1, "", "readlink"], [296, 8, 1, "", "rename"], [296, 8, 1, "", "replace"], [296, 8, 1, "", "resolve"], [296, 8, 1, "", "rglob"], [296, 8, 1, "", "rmdir"], [296, 8, 1, "", "samefile"], [296, 8, 1, "", "stat"], [296, 8, 1, "", "symlink_to"], [296, 8, 1, "", "touch"], [296, 8, 1, "", "unlink"], [296, 8, 1, "", "walk"], [296, 8, 1, "", "write_bytes"], [296, 8, 1, "", "write_text"]], "pathlib.PurePath": [[296, 7, 1, "", "anchor"], [296, 8, 1, "", "as_posix"], [296, 8, 1, "", "as_uri"], [296, 7, 1, "", "drive"], [296, 8, 1, "", "is_absolute"], [296, 8, 1, "", "is_relative_to"], [296, 8, 1, "", "is_reserved"], [296, 8, 1, "", "joinpath"], [296, 8, 1, "", "match"], [296, 7, 1, "", "name"], [296, 7, 1, "", "parent"], [296, 7, 1, "", "parents"], [296, 7, 1, "", "parts"], [296, 8, 1, "", "relative_to"], [296, 7, 1, "", "root"], [296, 7, 1, "", "stem"], [296, 7, 1, "", "suffix"], [296, 7, 1, "", "suffixes"], [296, 8, 1, "", "with_name"], [296, 8, 1, "", "with_segments"], [296, 8, 1, "", "with_stem"], [296, 8, 1, "", "with_suffix"]], "pdb": [[297, 11, 1, "", "Pdb"], [297, 12, 1, "", "pm"], [297, 12, 1, "", "post_mortem"], [297, 12, 1, "", "run"], [297, 12, 1, "", "runcall"], [297, 12, 1, "", "runeval"], [297, 12, 1, "", "set_trace"]], "pdb.Pdb": [[297, 8, 1, "", "run"], [297, 8, 1, "", "runcall"], [297, 8, 1, "", "runeval"], [297, 8, 1, "", "set_trace"]], "pickle": [[299, 9, 1, "", "DEFAULT_PROTOCOL"], [299, 9, 1, "", "HIGHEST_PROTOCOL"], [299, 11, 1, "", "PickleBuffer"], [299, 6, 1, "", "PickleError"], [299, 11, 1, "", "Pickler"], [299, 6, 1, "", "PicklingError"], [299, 11, 1, "", "Unpickler"], [299, 6, 1, "", "UnpicklingError"], [299, 12, 1, "", "dump"], [299, 12, 1, "", "dumps"], [299, 12, 1, "", "load"], [299, 12, 1, "", "loads"]], "pickle.PickleBuffer": [[299, 8, 1, "", "raw"], [299, 8, 1, "", "release"]], "pickle.Pickler": [[299, 7, 1, "", "dispatch_table"], [299, 8, 1, "", "dump"], [299, 7, 1, "", "fast"], [299, 8, 1, "", "persistent_id"], [299, 8, 1, "", "reducer_override"]], "pickle.Unpickler": [[299, 8, 1, "", "find_class"], [299, 8, 1, "", "load"], [299, 8, 1, "", "persistent_load"]], "pickletools": [[300, 12, 1, "", "dis"], [300, 12, 1, "", "genops"], [300, 12, 1, "", "optimize"], [300, 14, 1, "cmdoption-pickletools-a", "--annotate"], [300, 14, 1, "cmdoption-pickletools-l", "--indentlevel"], [300, 14, 1, "cmdoption-pickletools-m", "--memo"], [300, 14, 1, "cmdoption-pickletools-o", "--output"], [300, 14, 1, "cmdoption-pickletools-p", "--preamble"], [300, 14, 1, "cmdoption-pickletools-a", "-a"], [300, 14, 1, "cmdoption-pickletools-l", "-l"], [300, 14, 1, "cmdoption-pickletools-m", "-m"], [300, 14, 1, "cmdoption-pickletools-o", "-o"], [300, 14, 1, "cmdoption-pickletools-p", "-p"]], "pipes": [[301, 11, 1, "", "Template"]], "pipes.Template": [[301, 8, 1, "", "append"], [301, 8, 1, "", "clone"], [301, 8, 1, "", "copy"], [301, 8, 1, "", "debug"], [301, 8, 1, "", "open"], [301, 8, 1, "", "prepend"], [301, 8, 1, "", "reset"]], "pkgutil": [[302, 11, 1, "", "ModuleInfo"], [302, 12, 1, "", "extend_path"], [302, 12, 1, "", "find_loader"], [302, 12, 1, "", "get_data"], [302, 12, 1, "", "get_importer"], [302, 12, 1, "", "get_loader"], [302, 12, 1, "", "iter_importers"], [302, 12, 1, "", "iter_modules"], [302, 12, 1, "", "resolve_name"], [302, 12, 1, "", "walk_packages"]], "platform": [[303, 12, 1, "", "architecture"], [303, 12, 1, "", "freedesktop_os_release"], [303, 12, 1, "", "java_ver"], [303, 12, 1, "", "libc_ver"], [303, 12, 1, "", "mac_ver"], [303, 12, 1, "", "machine"], [303, 12, 1, "", "node"], [303, 12, 1, "", "platform"], [303, 12, 1, "", "processor"], [303, 12, 1, "", "python_branch"], [303, 12, 1, "", "python_build"], [303, 12, 1, "", "python_compiler"], [303, 12, 1, "", "python_implementation"], [303, 12, 1, "", "python_revision"], [303, 12, 1, "", "python_version"], [303, 12, 1, "", "python_version_tuple"], [303, 12, 1, "", "release"], [303, 12, 1, "", "system"], [303, 12, 1, "", "system_alias"], [303, 12, 1, "", "uname"], [303, 12, 1, "", "version"], [303, 12, 1, "", "win32_edition"], [303, 12, 1, "", "win32_is_iot"], [303, 12, 1, "", "win32_ver"]], "plistlib": [[304, 9, 1, "", "FMT_BINARY"], [304, 9, 1, "", "FMT_XML"], [304, 11, 1, "", "UID"], [304, 12, 1, "", "dump"], [304, 12, 1, "", "dumps"], [304, 12, 1, "", "load"], [304, 12, 1, "", "loads"]], "poplib": [[305, 11, 1, "", "POP3"], [305, 11, 1, "", "POP3_SSL"], [305, 6, 1, "", "error_proto"]], "poplib.POP3": [[305, 8, 1, "", "apop"], [305, 8, 1, "", "capa"], [305, 8, 1, "", "dele"], [305, 8, 1, "", "getwelcome"], [305, 8, 1, "", "list"], [305, 8, 1, "", "noop"], [305, 8, 1, "", "pass_"], [305, 8, 1, "", "quit"], [305, 8, 1, "", "retr"], [305, 8, 1, "", "rpop"], [305, 8, 1, "", "rset"], [305, 8, 1, "", "set_debuglevel"], [305, 8, 1, "", "stat"], [305, 8, 1, "", "stls"], [305, 8, 1, "", "top"], [305, 8, 1, "", "uidl"], [305, 8, 1, "", "user"], [305, 8, 1, "", "utf8"]], "posix": [[306, 9, 1, "", "environ"]], "pprint": [[307, 11, 1, "", "PrettyPrinter"], [307, 12, 1, "", "isreadable"], [307, 12, 1, "", "isrecursive"], [307, 12, 1, "", "pformat"], [307, 12, 1, "", "pp"], [307, 12, 1, "", "pprint"], [307, 12, 1, "", "saferepr"]], "pprint.PrettyPrinter": [[307, 8, 1, "", "format"], [307, 8, 1, "", "isreadable"], [307, 8, 1, "", "isrecursive"], [307, 8, 1, "", "pformat"], [307, 8, 1, "", "pprint"]], "profile": [[308, 11, 1, "", "Profile"], [308, 12, 1, "", "run"], [308, 12, 1, "", "runctx"]], "profile.Profile": [[308, 8, 1, "", "create_stats"], [308, 8, 1, "", "disable"], [308, 8, 1, "", "dump_stats"], [308, 8, 1, "", "enable"], [308, 8, 1, "", "print_stats"], [308, 8, 1, "", "run"], [308, 8, 1, "", "runcall"], [308, 8, 1, "", "runctx"]], "property": [[225, 12, 1, "", "deleter"], [225, 12, 1, "", "getter"], [225, 12, 1, "", "setter"]], "pstats": [[308, 11, 1, "", "Stats"]], "pstats.Stats": [[308, 8, 1, "", "add"], [308, 8, 1, "", "dump_stats"], [308, 8, 1, "", "get_stats_profile"], [308, 8, 1, "", "print_callees"], [308, 8, 1, "", "print_callers"], [308, 8, 1, "", "print_stats"], [308, 8, 1, "", "reverse_order"], [308, 8, 1, "", "sort_stats"], [308, 8, 1, "", "strip_dirs"]], "pty": [[309, 12, 1, "", "fork"], [309, 12, 1, "", "openpty"], [309, 12, 1, "", "spawn"]], "pwd": [[310, 12, 1, "", "getpwall"], [310, 12, 1, "", "getpwnam"], [310, 12, 1, "", "getpwuid"]], "py_compile": [[311, 6, 1, "", "PyCompileError"], [311, 11, 1, "", "PycInvalidationMode"], [311, 12, 1, "", "compile"]], "py_compile.PycInvalidationMode": [[311, 7, 1, "", "CHECKED_HASH"], [311, 7, 1, "", "TIMESTAMP"], [311, 7, 1, "", "UNCHECKED_HASH"]], "pyclbr": [[312, 11, 1, "", "Class"], [312, 11, 1, "", "Function"], [312, 12, 1, "", "readmodule"], [312, 12, 1, "", "readmodule_ex"]], "pyclbr.Class": [[312, 7, 1, "", "children"], [312, 7, 1, "", "file"], [312, 7, 1, "", "lineno"], [312, 7, 1, "", "methods"], [312, 7, 1, "", "module"], [312, 7, 1, "", "name"], [312, 7, 1, "", "parent"], [312, 7, 1, "", "super"]], "pyclbr.Function": [[312, 7, 1, "", "children"], [312, 7, 1, "", "file"], [312, 7, 1, "", "is_async"], [312, 7, 1, "", "lineno"], [312, 7, 1, "", "module"], [312, 7, 1, "", "name"], [312, 7, 1, "", "parent"]], "queue": [[316, 6, 1, "", "Empty"], [316, 6, 1, "", "Full"], [316, 11, 1, "", "LifoQueue"], [316, 11, 1, "", "PriorityQueue"], [316, 11, 1, "", "Queue"], [316, 11, 1, "", "SimpleQueue"]], "queue.Queue": [[316, 8, 1, "", "empty"], [316, 8, 1, "", "full"], [316, 8, 1, "", "get"], [316, 8, 1, "", "get_nowait"], [316, 8, 1, "", "join"], [316, 8, 1, "", "put"], [316, 8, 1, "", "put_nowait"], [316, 8, 1, "", "qsize"], [316, 8, 1, "", "task_done"]], "queue.SimpleQueue": [[316, 8, 1, "", "empty"], [316, 8, 1, "", "get"], [316, 8, 1, "", "get_nowait"], [316, 8, 1, "", "put"], [316, 8, 1, "", "put_nowait"], [316, 8, 1, "", "qsize"]], "quopri": [[317, 12, 1, "", "decode"], [317, 12, 1, "", "decodestring"], [317, 12, 1, "", "encode"], [317, 12, 1, "", "encodestring"]], "random": [[318, 11, 1, "", "Random"], [318, 11, 1, "", "SystemRandom"], [318, 12, 1, "", "betavariate"], [318, 12, 1, "", "binomialvariate"], [318, 12, 1, "", "choice"], [318, 12, 1, "", "choices"], [318, 12, 1, "", "expovariate"], [318, 12, 1, "", "gammavariate"], [318, 12, 1, "", "gauss"], [318, 12, 1, "", "getrandbits"], [318, 12, 1, "", "getstate"], [318, 12, 1, "", "lognormvariate"], [318, 12, 1, "", "normalvariate"], [318, 12, 1, "", "paretovariate"], [318, 12, 1, "", "randbytes"], [318, 12, 1, "", "randint"], [318, 12, 1, "", "random"], [318, 12, 1, "", "randrange"], [318, 12, 1, "", "sample"], [318, 12, 1, "", "seed"], [318, 12, 1, "", "setstate"], [318, 12, 1, "", "shuffle"], [318, 12, 1, "", "triangular"], [318, 12, 1, "", "uniform"], [318, 12, 1, "", "vonmisesvariate"], [318, 12, 1, "", "weibullvariate"]], "random.Random": [[318, 8, 1, "", "getrandbits"], [318, 8, 1, "", "getstate"], [318, 8, 1, "", "random"], [318, 8, 1, "", "seed"], [318, 8, 1, "", "setstate"]], "range": [[344, 7, 1, "", "start"], [344, 7, 1, "", "step"], [344, 7, 1, "", "stop"]], "re": [[319, 9, 1, "", "A"], [319, 9, 1, "", "ASCII"], [319, 9, 1, "", "DEBUG"], [319, 9, 1, "", "DOTALL"], [319, 9, 1, "", "I"], [319, 9, 1, "", "IGNORECASE"], [319, 9, 1, "", "L"], [319, 9, 1, "", "LOCALE"], [319, 9, 1, "", "M"], [319, 9, 1, "", "MULTILINE"], [319, 11, 1, "", "Match"], [319, 9, 1, "", "NOFLAG"], [319, 11, 1, "", "Pattern"], [319, 11, 1, "", "RegexFlag"], [319, 9, 1, "", "S"], [319, 9, 1, "", "U"], [319, 9, 1, "", "UNICODE"], [319, 9, 1, "", "VERBOSE"], [319, 9, 1, "", "X"], [319, 12, 1, "", "compile"], [319, 6, 1, "", "error"], [319, 12, 1, "", "escape"], [319, 12, 1, "", "findall"], [319, 12, 1, "", "finditer"], [319, 12, 1, "", "fullmatch"], [319, 12, 1, "", "match"], [319, 12, 1, "", "purge"], [319, 12, 1, "", "search"], [319, 12, 1, "", "split"], [319, 12, 1, "", "sub"], [319, 12, 1, "", "subn"]], "re.Match": [[319, 8, 1, "", "__getitem__"], [319, 8, 1, "", "end"], [319, 7, 1, "", "endpos"], [319, 8, 1, "", "expand"], [319, 8, 1, "", "group"], [319, 8, 1, "", "groupdict"], [319, 8, 1, "", "groups"], [319, 7, 1, "", "lastgroup"], [319, 7, 1, "", "lastindex"], [319, 7, 1, "", "pos"], [319, 7, 1, "", "re"], [319, 8, 1, "", "span"], [319, 8, 1, "", "start"], [319, 7, 1, "", "string"]], "re.Pattern": [[319, 8, 1, "", "findall"], [319, 8, 1, "", "finditer"], [319, 7, 1, "", "flags"], [319, 8, 1, "", "fullmatch"], [319, 7, 1, "", "groupindex"], [319, 7, 1, "", "groups"], [319, 8, 1, "", "match"], [319, 7, 1, "", "pattern"], [319, 8, 1, "", "search"], [319, 8, 1, "", "split"], [319, 8, 1, "", "sub"], [319, 8, 1, "", "subn"]], "re.error": [[319, 7, 1, "", "colno"], [319, 7, 1, "", "lineno"], [319, 7, 1, "", "msg"], [319, 7, 1, "", "pattern"], [319, 7, 1, "", "pos"]], "readline": [[320, 12, 1, "", "add_history"], [320, 12, 1, "", "append_history_file"], [320, 12, 1, "", "clear_history"], [320, 12, 1, "", "get_begidx"], [320, 12, 1, "", "get_completer"], [320, 12, 1, "", "get_completer_delims"], [320, 12, 1, "", "get_completion_type"], [320, 12, 1, "", "get_current_history_length"], [320, 12, 1, "", "get_endidx"], [320, 12, 1, "", "get_history_item"], [320, 12, 1, "", "get_history_length"], [320, 12, 1, "", "get_line_buffer"], [320, 12, 1, "", "insert_text"], [320, 12, 1, "", "parse_and_bind"], [320, 12, 1, "", "read_history_file"], [320, 12, 1, "", "read_init_file"], [320, 12, 1, "", "redisplay"], [320, 12, 1, "", "remove_history_item"], [320, 12, 1, "", "replace_history_item"], [320, 12, 1, "", "set_auto_history"], [320, 12, 1, "", "set_completer"], [320, 12, 1, "", "set_completer_delims"], [320, 12, 1, "", "set_completion_display_matches_hook"], [320, 12, 1, "", "set_history_length"], [320, 12, 1, "", "set_pre_input_hook"], [320, 12, 1, "", "set_startup_hook"], [320, 12, 1, "", "write_history_file"]], "reprlib": [[321, 11, 1, "", "Repr"], [321, 9, 1, "", "aRepr"], [321, 12, 1, "", "recursive_repr"], [321, 12, 1, "", "repr"]], "reprlib.Repr": [[321, 7, 1, "", "fillvalue"], [321, 7, 1, "", "indent"], [321, 7, 1, "", "maxarray"], [321, 7, 1, "", "maxdeque"], [321, 7, 1, "", "maxdict"], [321, 7, 1, "", "maxfrozenset"], [321, 7, 1, "", "maxlevel"], [321, 7, 1, "", "maxlist"], [321, 7, 1, "", "maxlong"], [321, 7, 1, "", "maxother"], [321, 7, 1, "", "maxset"], [321, 7, 1, "", "maxstring"], [321, 7, 1, "", "maxtuple"], [321, 8, 1, "", "repr"], [321, 8, 1, "", "repr1"]], "resource": [[322, 9, 1, "", "RLIMIT_AS"], [322, 9, 1, "", "RLIMIT_CORE"], [322, 9, 1, "", "RLIMIT_CPU"], [322, 9, 1, "", "RLIMIT_DATA"], [322, 9, 1, "", "RLIMIT_FSIZE"], [322, 9, 1, "", "RLIMIT_KQUEUES"], [322, 9, 1, "", "RLIMIT_MEMLOCK"], [322, 9, 1, "", "RLIMIT_MSGQUEUE"], [322, 9, 1, "", "RLIMIT_NICE"], [322, 9, 1, "", "RLIMIT_NOFILE"], [322, 9, 1, "", "RLIMIT_NPROC"], [322, 9, 1, "", "RLIMIT_NPTS"], [322, 9, 1, "", "RLIMIT_OFILE"], [322, 9, 1, "", "RLIMIT_RSS"], [322, 9, 1, "", "RLIMIT_RTPRIO"], [322, 9, 1, "", "RLIMIT_RTTIME"], [322, 9, 1, "", "RLIMIT_SBSIZE"], [322, 9, 1, "", "RLIMIT_SIGPENDING"], [322, 9, 1, "", "RLIMIT_STACK"], [322, 9, 1, "", "RLIMIT_SWAP"], [322, 9, 1, "", "RLIMIT_VMEM"], [322, 9, 1, "", "RLIM_INFINITY"], [322, 9, 1, "", "RUSAGE_BOTH"], [322, 9, 1, "", "RUSAGE_CHILDREN"], [322, 9, 1, "", "RUSAGE_SELF"], [322, 9, 1, "", "RUSAGE_THREAD"], [322, 6, 1, "", "error"], [322, 12, 1, "", "getpagesize"], [322, 12, 1, "", "getrlimit"], [322, 12, 1, "", "getrusage"], [322, 12, 1, "", "prlimit"], [322, 12, 1, "", "setrlimit"]], "rlcompleter": [[323, 11, 1, "", "Completer"]], "rlcompleter.Completer": [[323, 8, 1, "", "complete"]], "runpy": [[324, 12, 1, "", "run_module"], [324, 12, 1, "", "run_path"]], "sched": [[325, 11, 1, "", "scheduler"]], "sched.scheduler": [[325, 8, 1, "", "cancel"], [325, 8, 1, "", "empty"], [325, 8, 1, "", "enter"], [325, 8, 1, "", "enterabs"], [325, 7, 1, "", "queue"], [325, 8, 1, "", "run"]], "secrets": [[326, 11, 1, "", "SystemRandom"], [326, 12, 1, "", "choice"], [326, 12, 1, "", "compare_digest"], [326, 12, 1, "", "randbelow"], [326, 12, 1, "", "randbits"], [326, 12, 1, "", "token_bytes"], [326, 12, 1, "", "token_hex"], [326, 12, 1, "", "token_urlsafe"]], "select": [[328, 7, 1, "", "PIPE_BUF"], [328, 12, 1, "", "devpoll"], [328, 12, 1, "", "epoll"], [328, 6, 1, "", "error"], [328, 12, 1, "", "kevent"], [328, 12, 1, "", "kqueue"], [328, 12, 1, "", "poll"], [328, 12, 1, "", "select"]], "select.devpoll": [[328, 8, 1, "", "close"], [328, 7, 1, "", "closed"], [328, 8, 1, "", "fileno"], [328, 8, 1, "", "modify"], [328, 8, 1, "", "poll"], [328, 8, 1, "", "register"], [328, 8, 1, "", "unregister"]], "select.epoll": [[328, 8, 1, "", "close"], [328, 7, 1, "", "closed"], [328, 8, 1, "", "fileno"], [328, 8, 1, "", "fromfd"], [328, 8, 1, "", "modify"], [328, 8, 1, "", "poll"], [328, 8, 1, "", "register"], [328, 8, 1, "", "unregister"]], "select.kevent": [[328, 7, 1, "", "data"], [328, 7, 1, "", "fflags"], [328, 7, 1, "", "filter"], [328, 7, 1, "", "flags"], [328, 7, 1, "", "ident"], [328, 7, 1, "", "udata"]], "select.kqueue": [[328, 8, 1, "", "close"], [328, 7, 1, "", "closed"], [328, 8, 1, "", "control"], [328, 8, 1, "", "fileno"], [328, 8, 1, "", "fromfd"]], "select.poll": [[328, 8, 1, "", "modify"], [328, 8, 1, "", "poll"], [328, 8, 1, "", "register"], [328, 8, 1, "", "unregister"]], "selectors": [[329, 11, 1, "", "BaseSelector"], [329, 11, 1, "", "DefaultSelector"], [329, 11, 1, "", "DevpollSelector"], [329, 9, 1, "", "EVENT_READ"], [329, 9, 1, "", "EVENT_WRITE"], [329, 11, 1, "", "EpollSelector"], [329, 11, 1, "", "KqueueSelector"], [329, 11, 1, "", "PollSelector"], [329, 11, 1, "", "SelectSelector"], [329, 11, 1, "", "SelectorKey"]], "selectors.BaseSelector": [[329, 8, 1, "", "close"], [329, 8, 1, "", "get_key"], [329, 8, 1, "", "get_map"], [329, 8, 1, "", "modify"], [329, 8, 1, "", "register"], [329, 8, 1, "", "select"], [329, 8, 1, "", "unregister"]], "selectors.DevpollSelector": [[329, 8, 1, "", "fileno"]], "selectors.EpollSelector": [[329, 8, 1, "", "fileno"]], "selectors.KqueueSelector": [[329, 8, 1, "", "fileno"]], "selectors.SelectorKey": [[329, 7, 1, "", "data"], [329, 7, 1, "", "events"], [329, 7, 1, "", "fd"], [329, 7, 1, "", "fileobj"]], "shelve": [[330, 11, 1, "", "BsdDbShelf"], [330, 11, 1, "", "DbfilenameShelf"], [330, 11, 1, "", "Shelf"], [330, 12, 1, "", "open"]], "shelve.Shelf": [[330, 8, 1, "", "close"], [330, 8, 1, "", "sync"]], "shlex": [[331, 12, 1, "", "join"], [331, 12, 1, "", "quote"], [331, 11, 1, "", "shlex"], [331, 12, 1, "", "split"]], "shlex.shlex": [[331, 7, 1, "", "commenters"], [331, 7, 1, "", "debug"], [331, 7, 1, "", "eof"], [331, 8, 1, "", "error_leader"], [331, 7, 1, "", "escape"], [331, 7, 1, "", "escapedquotes"], [331, 8, 1, "", "get_token"], [331, 7, 1, "", "infile"], [331, 7, 1, "", "instream"], [331, 7, 1, "", "lineno"], [331, 8, 1, "", "pop_source"], [331, 7, 1, "", "punctuation_chars"], [331, 8, 1, "", "push_source"], [331, 8, 1, "", "push_token"], [331, 7, 1, "", "quotes"], [331, 8, 1, "", "read_token"], [331, 7, 1, "", "source"], [331, 8, 1, "", "sourcehook"], [331, 7, 1, "", "token"], [331, 7, 1, "", "whitespace"], [331, 7, 1, "", "whitespace_split"], [331, 7, 1, "", "wordchars"]], "shutil": [[332, 6, 1, "", "Error"], [332, 6, 1, "", "SameFileError"], [332, 12, 1, "", "chown"], [332, 12, 1, "", "copy"], [332, 12, 1, "", "copy2"], [332, 12, 1, "", "copyfile"], [332, 12, 1, "", "copyfileobj"], [332, 12, 1, "", "copymode"], [332, 12, 1, "", "copystat"], [332, 12, 1, "", "copytree"], [332, 12, 1, "", "disk_usage"], [332, 12, 1, "", "get_archive_formats"], [332, 12, 1, "", "get_terminal_size"], [332, 12, 1, "", "get_unpack_formats"], [332, 12, 1, "", "ignore_patterns"], [332, 12, 1, "", "make_archive"], [332, 12, 1, "", "move"], [332, 12, 1, "", "register_archive_format"], [332, 12, 1, "", "register_unpack_format"], [332, 12, 1, "", "rmtree"], [332, 12, 1, "", "unpack_archive"], [332, 12, 1, "", "unregister_archive_format"], [332, 12, 1, "", "unregister_unpack_format"], [332, 12, 1, "", "which"]], "shutil.rmtree": [[332, 7, 1, "", "avoids_symlink_attacks"]], "signal": [[333, 9, 1, "", "CTRL_BREAK_EVENT"], [333, 9, 1, "", "CTRL_C_EVENT"], [333, 11, 1, "", "Handlers"], [333, 9, 1, "", "ITIMER_PROF"], [333, 9, 1, "", "ITIMER_REAL"], [333, 9, 1, "", "ITIMER_VIRTUAL"], [333, 6, 1, "", "ItimerError"], [333, 9, 1, "", "NSIG"], [333, 9, 1, "", "SIGABRT"], [333, 9, 1, "", "SIGALRM"], [333, 9, 1, "", "SIGBREAK"], [333, 9, 1, "", "SIGBUS"], [333, 9, 1, "", "SIGCHLD"], [333, 9, 1, "", "SIGCLD"], [333, 9, 1, "", "SIGCONT"], [333, 9, 1, "", "SIGFPE"], [333, 9, 1, "", "SIGHUP"], [333, 9, 1, "", "SIGILL"], [333, 9, 1, "", "SIGINT"], [333, 9, 1, "", "SIGKILL"], [333, 9, 1, "", "SIGPIPE"], [333, 9, 1, "", "SIGSEGV"], [333, 9, 1, "", "SIGSTKFLT"], [333, 9, 1, "", "SIGTERM"], [333, 9, 1, "", "SIGUSR1"], [333, 9, 1, "", "SIGUSR2"], [333, 9, 1, "", "SIGWINCH"], [333, 9, 1, "", "SIG_BLOCK"], [333, 9, 1, "", "SIG_DFL"], [333, 9, 1, "", "SIG_IGN"], [333, 9, 1, "", "SIG_SETMASK"], [333, 9, 1, "", "SIG_UNBLOCK"], [333, 11, 1, "", "Sigmasks"], [333, 11, 1, "", "Signals"], [333, 12, 1, "", "alarm"], [333, 12, 1, "", "getitimer"], [333, 12, 1, "", "getsignal"], [333, 12, 1, "", "pause"], [333, 12, 1, "", "pidfd_send_signal"], [333, 12, 1, "", "pthread_kill"], [333, 12, 1, "", "pthread_sigmask"], [333, 12, 1, "", "raise_signal"], [333, 12, 1, "", "set_wakeup_fd"], [333, 12, 1, "", "setitimer"], [333, 12, 1, "", "siginterrupt"], [333, 12, 1, "", "signal"], [333, 12, 1, "", "sigpending"], [333, 12, 1, "", "sigtimedwait"], [333, 12, 1, "", "sigwait"], [333, 12, 1, "", "sigwaitinfo"], [333, 12, 1, "", "strsignal"], [333, 12, 1, "", "valid_signals"]], "site": [[334, 9, 1, "", "ENABLE_USER_SITE"], [334, 9, 1, "", "PREFIXES"], [334, 9, 1, "", "USER_BASE"], [334, 9, 1, "", "USER_SITE"], [334, 12, 1, "", "addsitedir"], [334, 12, 1, "", "getsitepackages"], [334, 12, 1, "", "getuserbase"], [334, 12, 1, "", "getusersitepackages"], [334, 12, 1, "", "main"], [334, 14, 1, "cmdoption-site-user-base", "--user-base"], [334, 14, 1, "cmdoption-site-user-site", "--user-site"]], "slice": [[428, 8, 1, "", "indices"], [225, 7, 1, "", "start"], [225, 7, 1, "", "step"], [225, 7, 1, "", "stop"]], "smtplib": [[335, 11, 1, "", "LMTP"], [335, 11, 1, "", "SMTP"], [335, 6, 1, "", "SMTPAuthenticationError"], [335, 6, 1, "", "SMTPConnectError"], [335, 6, 1, "", "SMTPDataError"], [335, 6, 1, "", "SMTPException"], [335, 6, 1, "", "SMTPHeloError"], [335, 6, 1, "", "SMTPNotSupportedError"], [335, 6, 1, "", "SMTPRecipientsRefused"], [335, 6, 1, "", "SMTPResponseException"], [335, 6, 1, "", "SMTPSenderRefused"], [335, 6, 1, "", "SMTPServerDisconnected"], [335, 11, 1, "", "SMTP_SSL"]], "smtplib.SMTP": [[335, 8, 1, "", "auth"], [335, 8, 1, "", "connect"], [335, 8, 1, "", "docmd"], [335, 8, 1, "", "ehlo"], [335, 8, 1, "", "ehlo_or_helo_if_needed"], [335, 8, 1, "", "has_extn"], [335, 8, 1, "", "helo"], [335, 8, 1, "", "login"], [335, 8, 1, "", "quit"], [335, 8, 1, "", "send_message"], [335, 8, 1, "", "sendmail"], [335, 8, 1, "", "set_debuglevel"], [335, 8, 1, "", "starttls"], [335, 8, 1, "", "verify"]], "sndhdr": [[336, 9, 1, "", "tests"], [336, 12, 1, "", "what"], [336, 12, 1, "", "whathdr"]], "socket": [[337, 9, 1, "", "AF_ALG"], [337, 9, 1, "", "AF_CAN"], [337, 9, 1, "", "AF_DIVERT"], [337, 9, 1, "", "AF_HYPERV"], [337, 9, 1, "", "AF_INET"], [337, 9, 1, "", "AF_INET6"], [337, 9, 1, "", "AF_LINK"], [337, 9, 1, "", "AF_PACKET"], [337, 9, 1, "", "AF_QIPCRTR"], [337, 9, 1, "", "AF_RDS"], [337, 9, 1, "", "AF_UNIX"], [337, 9, 1, "", "AF_UNSPEC"], [337, 9, 1, "", "AF_VSOCK"], [337, 9, 1, "", "BDADDR_ANY"], [337, 9, 1, "", "BDADDR_LOCAL"], [337, 9, 1, "", "CAN_BCM"], [337, 9, 1, "", "CAN_ISOTP"], [337, 9, 1, "", "CAN_J1939"], [337, 9, 1, "", "CAN_RAW_FD_FRAMES"], [337, 9, 1, "", "CAN_RAW_JOIN_FILTERS"], [337, 12, 1, "", "CMSG_LEN"], [337, 12, 1, "", "CMSG_SPACE"], [337, 9, 1, "", "ETHERTYPE_ARP"], [337, 9, 1, "", "ETHERTYPE_IP"], [337, 9, 1, "", "ETHERTYPE_IPV6"], [337, 9, 1, "", "ETHERTYPE_VLAN"], [337, 9, 1, "", "ETH_P_ALL"], [337, 9, 1, "", "HCI_DATA_DIR"], [337, 9, 1, "", "HCI_FILTER"], [337, 9, 1, "", "HCI_TIME_STAMP"], [337, 9, 1, "", "HVSOCKET_ADDRESS_FLAG_PASSTHRU"], [337, 9, 1, "", "HVSOCKET_CONNECTED_SUSPEND"], [337, 9, 1, "", "HVSOCKET_CONNECT_TIMEOUT"], [337, 9, 1, "", "HVSOCKET_CONNECT_TIMEOUT_MAX"], [337, 9, 1, "", "HV_GUID_BROADCAST"], [337, 9, 1, "", "HV_GUID_CHILDREN"], [337, 9, 1, "", "HV_GUID_LOOPBACK"], [337, 9, 1, "", "HV_GUID_PARENT"], [337, 9, 1, "", "HV_GUID_WILDCARD"], [337, 9, 1, "", "HV_GUID_ZERO"], [337, 9, 1, "", "HV_PROTOCOL_RAW"], [337, 9, 1, "", "IOCTL_VM_SOCKETS_GET_LOCAL_CID"], [337, 9, 1, "", "LOCAL_CREDS"], [337, 9, 1, "", "LOCAL_CREDS_PERSISTENT"], [337, 9, 1, "", "PF_CAN"], [337, 9, 1, "", "PF_DIVERT"], [337, 9, 1, "", "PF_PACKET"], [337, 9, 1, "", "PF_RDS"], [337, 9, 1, "", "SCM_CREDS2"], [337, 9, 1, "", "SIO_KEEPALIVE_VALS"], [337, 9, 1, "", "SIO_LOOPBACK_FAST_PATH"], [337, 9, 1, "", "SIO_RCVALL"], [337, 9, 1, "", "SOCK_CLOEXEC"], [337, 9, 1, "", "SOCK_DGRAM"], [337, 9, 1, "", "SOCK_NONBLOCK"], [337, 9, 1, "", "SOCK_RAW"], [337, 9, 1, "", "SOCK_RDM"], [337, 9, 1, "", "SOCK_SEQPACKET"], [337, 9, 1, "", "SOCK_STREAM"], [337, 9, 1, "", "SOL_ALG"], [337, 9, 1, "", "SOL_RDS"], [337, 9, 1, "", "SOMAXCONN"], [337, 9, 1, "", "SO_INCOMING_CPU"], [337, 9, 1, "", "SocketType"], [337, 12, 1, "", "close"], [337, 12, 1, "", "create_connection"], [337, 12, 1, "", "create_server"], [337, 6, 1, "", "error"], [337, 12, 1, "", "fromfd"], [337, 12, 1, "", "fromshare"], [337, 6, 1, "", "gaierror"], [337, 12, 1, "", "getaddrinfo"], [337, 12, 1, "", "getdefaulttimeout"], [337, 12, 1, "", "getfqdn"], [337, 12, 1, "", "gethostbyaddr"], [337, 12, 1, "", "gethostbyname"], [337, 12, 1, "", "gethostbyname_ex"], [337, 12, 1, "", "gethostname"], [337, 12, 1, "", "getnameinfo"], [337, 12, 1, "", "getprotobyname"], [337, 12, 1, "", "getservbyname"], [337, 12, 1, "", "getservbyport"], [337, 12, 1, "", "has_dualstack_ipv6"], [337, 9, 1, "", "has_ipv6"], [337, 6, 1, "", "herror"], [337, 12, 1, "", "htonl"], [337, 12, 1, "", "htons"], [337, 12, 1, "", "if_indextoname"], [337, 12, 1, "", "if_nameindex"], [337, 12, 1, "", "if_nametoindex"], [337, 12, 1, "", "inet_aton"], [337, 12, 1, "", "inet_ntoa"], [337, 12, 1, "", "inet_ntop"], [337, 12, 1, "", "inet_pton"], [337, 12, 1, "", "ntohl"], [337, 12, 1, "", "ntohs"], [337, 12, 1, "", "recv_fds"], [337, 12, 1, "", "send_fds"], [337, 12, 1, "", "setdefaulttimeout"], [337, 12, 1, "", "sethostname"], [337, 11, 1, "", "socket"], [337, 12, 1, "", "socketpair"], [337, 6, 1, "", "timeout"]], "socket.socket": [[337, 8, 1, "", "accept"], [337, 8, 1, "", "bind"], [337, 8, 1, "", "close"], [337, 8, 1, "", "connect"], [337, 8, 1, "", "connect_ex"], [337, 8, 1, "", "detach"], [337, 8, 1, "", "dup"], [337, 7, 1, "", "family"], [337, 8, 1, "", "fileno"], [337, 8, 1, "", "get_inheritable"], [337, 8, 1, "", "getblocking"], [337, 8, 1, "", "getpeername"], [337, 8, 1, "", "getsockname"], [337, 8, 1, "", "getsockopt"], [337, 8, 1, "", "gettimeout"], [337, 8, 1, "", "ioctl"], [337, 8, 1, "", "listen"], [337, 8, 1, "", "makefile"], [337, 7, 1, "", "proto"], [337, 8, 1, "", "recv"], [337, 8, 1, "", "recv_into"], [337, 8, 1, "", "recvfrom"], [337, 8, 1, "", "recvfrom_into"], [337, 8, 1, "", "recvmsg"], [337, 8, 1, "", "recvmsg_into"], [337, 8, 1, "", "send"], [337, 8, 1, "", "sendall"], [337, 8, 1, "", "sendfile"], [337, 8, 1, "", "sendmsg"], [337, 8, 1, "", "sendmsg_afalg"], [337, 8, 1, "", "sendto"], [337, 8, 1, "", "set_inheritable"], [337, 8, 1, "", "setblocking"], [337, 8, 1, "", "setsockopt"], [337, 8, 1, "", "settimeout"], [337, 8, 1, "", "share"], [337, 8, 1, "", "shutdown"], [337, 7, 1, "", "type"]], "socketserver": [[338, 11, 1, "", "BaseRequestHandler"], [338, 11, 1, "", "BaseServer"], [338, 11, 1, "", "DatagramRequestHandler"], [338, 11, 1, "", "ForkingMixIn"], [338, 11, 1, "", "ForkingTCPServer"], [338, 11, 1, "", "ForkingUDPServer"], [338, 11, 1, "", "ForkingUnixDatagramServer"], [338, 11, 1, "", "ForkingUnixStreamServer"], [338, 11, 1, "", "StreamRequestHandler"], [338, 11, 1, "", "TCPServer"], [338, 11, 1, "", "ThreadingMixIn"], [338, 11, 1, "", "ThreadingTCPServer"], [338, 11, 1, "", "ThreadingUDPServer"], [338, 11, 1, "", "ThreadingUnixDatagramServer"], [338, 11, 1, "", "ThreadingUnixStreamServer"], [338, 11, 1, "", "UDPServer"], [338, 11, 1, "", "UnixDatagramServer"], [338, 11, 1, "", "UnixStreamServer"]], "socketserver.BaseRequestHandler": [[338, 7, 1, "", "client_address"], [338, 8, 1, "", "finish"], [338, 8, 1, "", "handle"], [338, 7, 1, "", "request"], [338, 7, 1, "", "server"], [338, 8, 1, "", "setup"]], "socketserver.BaseServer": [[338, 7, 1, "", "RequestHandlerClass"], [338, 7, 1, "", "address_family"], [338, 7, 1, "", "allow_reuse_address"], [338, 8, 1, "", "fileno"], [338, 8, 1, "", "finish_request"], [338, 8, 1, "", "get_request"], [338, 8, 1, "", "handle_error"], [338, 8, 1, "", "handle_request"], [338, 8, 1, "", "handle_timeout"], [338, 8, 1, "", "process_request"], [338, 7, 1, "", "request_queue_size"], [338, 8, 1, "", "serve_forever"], [338, 8, 1, "", "server_activate"], [338, 7, 1, "", "server_address"], [338, 8, 1, "", "server_bind"], [338, 8, 1, "", "server_close"], [338, 8, 1, "", "service_actions"], [338, 8, 1, "", "shutdown"], [338, 7, 1, "", "socket"], [338, 7, 1, "", "socket_type"], [338, 7, 1, "", "timeout"], [338, 8, 1, "", "verify_request"]], "socketserver.DatagramRequestHandler": [[338, 7, 1, "", "rfile"], [338, 7, 1, "", "wfile"]], "socketserver.ThreadingMixIn": [[338, 7, 1, "", "block_on_close"], [338, 7, 1, "", "daemon_threads"]], "spwd": [[339, 12, 1, "", "getspall"], [339, 12, 1, "", "getspnam"]], "sqlite3": [[340, 11, 1, "", "Blob"], [340, 11, 1, "", "Connection"], [340, 11, 1, "", "Cursor"], [340, 6, 1, "", "DataError"], [340, 6, 1, "", "DatabaseError"], [340, 6, 1, "", "Error"], [340, 6, 1, "", "IntegrityError"], [340, 6, 1, "", "InterfaceError"], [340, 6, 1, "", "InternalError"], [340, 9, 1, "", "LEGACY_TRANSACTION_CONTROL"], [340, 6, 1, "", "NotSupportedError"], [340, 6, 1, "", "OperationalError"], [340, 9, 1, "", "PARSE_COLNAMES"], [340, 9, 1, "", "PARSE_DECLTYPES"], [340, 11, 1, "", "PrepareProtocol"], [340, 6, 1, "", "ProgrammingError"], [340, 11, 1, "", "Row"], [340, 9, 1, "", "SQLITE_DBCONFIG_DEFENSIVE"], [340, 9, 1, "", "SQLITE_DBCONFIG_DQS_DDL"], [340, 9, 1, "", "SQLITE_DBCONFIG_DQS_DML"], [340, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_FKEY"], [340, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER"], [340, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION"], [340, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_QPSG"], [340, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_TRIGGER"], [340, 9, 1, "", "SQLITE_DBCONFIG_ENABLE_VIEW"], [340, 9, 1, "", "SQLITE_DBCONFIG_LEGACY_ALTER_TABLE"], [340, 9, 1, "", "SQLITE_DBCONFIG_LEGACY_FILE_FORMAT"], [340, 9, 1, "", "SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE"], [340, 9, 1, "", "SQLITE_DBCONFIG_RESET_DATABASE"], [340, 9, 1, "", "SQLITE_DBCONFIG_TRIGGER_EQP"], [340, 9, 1, "", "SQLITE_DBCONFIG_TRUSTED_SCHEMA"], [340, 9, 1, "", "SQLITE_DBCONFIG_WRITABLE_SCHEMA"], [340, 9, 1, "", "SQLITE_DENY"], [340, 9, 1, "", "SQLITE_IGNORE"], [340, 9, 1, "", "SQLITE_OK"], [340, 6, 1, "", "Warning"], [340, 9, 1, "", "apilevel"], [340, 12, 1, "", "complete_statement"], [340, 12, 1, "", "connect"], [340, 12, 1, "", "enable_callback_tracebacks"], [340, 9, 1, "", "paramstyle"], [340, 12, 1, "", "register_adapter"], [340, 12, 1, "", "register_converter"], [340, 9, 1, "", "sqlite_version"], [340, 9, 1, "", "sqlite_version_info"], [340, 9, 1, "", "threadsafety"], [340, 9, 1, "", "version"], [340, 9, 1, "", "version_info"]], "sqlite3.Blob": [[340, 8, 1, "", "close"], [340, 8, 1, "", "read"], [340, 8, 1, "", "seek"], [340, 8, 1, "", "tell"], [340, 8, 1, "", "write"]], "sqlite3.Connection": [[340, 7, 1, "", "autocommit"], [340, 8, 1, "", "backup"], [340, 8, 1, "", "blobopen"], [340, 8, 1, "", "close"], [340, 8, 1, "", "commit"], [340, 8, 1, "", "create_aggregate"], [340, 8, 1, "", "create_collation"], [340, 8, 1, "", "create_function"], [340, 8, 1, "", "create_window_function"], [340, 8, 1, "", "cursor"], [340, 8, 1, "", "deserialize"], [340, 8, 1, "", "enable_load_extension"], [340, 8, 1, "", "execute"], [340, 8, 1, "", "executemany"], [340, 8, 1, "", "executescript"], [340, 8, 1, "", "getconfig"], [340, 8, 1, "", "getlimit"], [340, 7, 1, "", "in_transaction"], [340, 8, 1, "", "interrupt"], [340, 7, 1, "", "isolation_level"], [340, 8, 1, "", "iterdump"], [340, 8, 1, "", "load_extension"], [340, 8, 1, "", "rollback"], [340, 7, 1, "", "row_factory"], [340, 8, 1, "", "serialize"], [340, 8, 1, "", "set_authorizer"], [340, 8, 1, "", "set_progress_handler"], [340, 8, 1, "", "set_trace_callback"], [340, 8, 1, "", "setconfig"], [340, 8, 1, "", "setlimit"], [340, 7, 1, "", "text_factory"], [340, 7, 1, "", "total_changes"]], "sqlite3.Cursor": [[340, 7, 1, "", "arraysize"], [340, 8, 1, "", "close"], [340, 7, 1, "", "connection"], [340, 7, 1, "", "description"], [340, 8, 1, "", "execute"], [340, 8, 1, "", "executemany"], [340, 8, 1, "", "executescript"], [340, 8, 1, "", "fetchall"], [340, 8, 1, "", "fetchmany"], [340, 8, 1, "", "fetchone"], [340, 7, 1, "", "lastrowid"], [340, 7, 1, "", "row_factory"], [340, 7, 1, "", "rowcount"], [340, 8, 1, "", "setinputsizes"], [340, 8, 1, "", "setoutputsize"]], "sqlite3.Error": [[340, 7, 1, "", "sqlite_errorcode"], [340, 7, 1, "", "sqlite_errorname"]], "sqlite3.Row": [[340, 8, 1, "", "keys"]], "ssl": [[341, 9, 1, "", "ALERT_DESCRIPTION_HANDSHAKE_FAILURE"], [341, 9, 1, "", "ALERT_DESCRIPTION_INTERNAL_ERROR"], [341, 11, 1, "", "AlertDescription"], [341, 9, 1, "", "CERT_NONE"], [341, 9, 1, "", "CERT_OPTIONAL"], [341, 9, 1, "", "CERT_REQUIRED"], [341, 9, 1, "", "CHANNEL_BINDING_TYPES"], [341, 6, 1, "", "CertificateError"], [341, 12, 1, "", "DER_cert_to_PEM_cert"], [341, 9, 1, "", "HAS_ALPN"], [341, 9, 1, "", "HAS_ECDH"], [341, 9, 1, "", "HAS_NEVER_CHECK_COMMON_NAME"], [341, 9, 1, "", "HAS_NPN"], [341, 9, 1, "", "HAS_SNI"], [341, 9, 1, "", "HAS_SSLv2"], [341, 9, 1, "", "HAS_SSLv3"], [341, 9, 1, "", "HAS_TLSv1"], [341, 9, 1, "", "HAS_TLSv1_1"], [341, 9, 1, "", "HAS_TLSv1_2"], [341, 9, 1, "", "HAS_TLSv1_3"], [341, 11, 1, "", "MemoryBIO"], [341, 9, 1, "", "OPENSSL_VERSION"], [341, 9, 1, "", "OPENSSL_VERSION_INFO"], [341, 9, 1, "", "OPENSSL_VERSION_NUMBER"], [341, 9, 1, "", "OP_ALL"], [341, 9, 1, "", "OP_CIPHER_SERVER_PREFERENCE"], [341, 9, 1, "", "OP_ENABLE_KTLS"], [341, 9, 1, "", "OP_ENABLE_MIDDLEBOX_COMPAT"], [341, 9, 1, "", "OP_IGNORE_UNEXPECTED_EOF"], [341, 9, 1, "", "OP_LEGACY_SERVER_CONNECT"], [341, 9, 1, "", "OP_NO_COMPRESSION"], [341, 9, 1, "", "OP_NO_RENEGOTIATION"], [341, 9, 1, "", "OP_NO_SSLv2"], [341, 9, 1, "", "OP_NO_SSLv3"], [341, 9, 1, "", "OP_NO_TICKET"], [341, 9, 1, "", "OP_NO_TLSv1"], [341, 9, 1, "", "OP_NO_TLSv1_1"], [341, 9, 1, "", "OP_NO_TLSv1_2"], [341, 9, 1, "", "OP_NO_TLSv1_3"], [341, 9, 1, "", "OP_SINGLE_DH_USE"], [341, 9, 1, "", "OP_SINGLE_ECDH_USE"], [341, 11, 1, "", "Options"], [341, 12, 1, "", "PEM_cert_to_DER_cert"], [341, 9, 1, "", "PROTOCOL_SSLv23"], [341, 9, 1, "", "PROTOCOL_SSLv3"], [341, 9, 1, "", "PROTOCOL_TLS"], [341, 9, 1, "", "PROTOCOL_TLS_CLIENT"], [341, 9, 1, "", "PROTOCOL_TLS_SERVER"], [341, 9, 1, "", "PROTOCOL_TLSv1"], [341, 9, 1, "", "PROTOCOL_TLSv1_1"], [341, 9, 1, "", "PROTOCOL_TLSv1_2"], [341, 12, 1, "", "RAND_add"], [341, 12, 1, "", "RAND_bytes"], [341, 12, 1, "", "RAND_status"], [341, 6, 1, "", "SSLCertVerificationError"], [341, 11, 1, "", "SSLContext"], [341, 6, 1, "", "SSLEOFError"], [341, 6, 1, "", "SSLError"], [341, 11, 1, "", "SSLErrorNumber"], [341, 11, 1, "", "SSLObject"], [341, 11, 1, "", "SSLSession"], [341, 11, 1, "", "SSLSocket"], [341, 6, 1, "", "SSLSyscallError"], [341, 6, 1, "", "SSLWantReadError"], [341, 6, 1, "", "SSLWantWriteError"], [341, 6, 1, "", "SSLZeroReturnError"], [341, 11, 1, "", "TLSVersion"], [341, 9, 1, "", "VERIFY_ALLOW_PROXY_CERTS"], [341, 9, 1, "", "VERIFY_CRL_CHECK_CHAIN"], [341, 9, 1, "", "VERIFY_CRL_CHECK_LEAF"], [341, 9, 1, "", "VERIFY_DEFAULT"], [341, 9, 1, "", "VERIFY_X509_PARTIAL_CHAIN"], [341, 9, 1, "", "VERIFY_X509_STRICT"], [341, 9, 1, "", "VERIFY_X509_TRUSTED_FIRST"], [341, 11, 1, "", "VerifyFlags"], [341, 11, 1, "", "VerifyMode"], [341, 12, 1, "", "cert_time_to_seconds"], [341, 12, 1, "", "create_default_context"], [341, 12, 1, "", "enum_certificates"], [341, 12, 1, "", "enum_crls"], [341, 12, 1, "", "get_default_verify_paths"], [341, 12, 1, "", "get_server_certificate"]], "ssl.MemoryBIO": [[341, 7, 1, "", "eof"], [341, 7, 1, "", "pending"], [341, 8, 1, "", "read"], [341, 8, 1, "", "write"], [341, 8, 1, "", "write_eof"]], "ssl.Purpose": [[341, 9, 1, "", "CLIENT_AUTH"], [341, 9, 1, "", "SERVER_AUTH"]], "ssl.SSLCertVerificationError": [[341, 7, 1, "", "verify_code"], [341, 7, 1, "", "verify_message"]], "ssl.SSLContext": [[341, 8, 1, "", "cert_store_stats"], [341, 7, 1, "", "check_hostname"], [341, 8, 1, "", "get_ca_certs"], [341, 8, 1, "", "get_ciphers"], [341, 7, 1, "", "hostname_checks_common_name"], [341, 7, 1, "", "keylog_filename"], [341, 8, 1, "", "load_cert_chain"], [341, 8, 1, "", "load_default_certs"], [341, 8, 1, "", "load_dh_params"], [341, 8, 1, "", "load_verify_locations"], [341, 7, 1, "", "maximum_version"], [341, 7, 1, "", "minimum_version"], [341, 7, 1, "", "num_tickets"], [341, 7, 1, "", "options"], [341, 7, 1, "", "post_handshake_auth"], [341, 7, 1, "", "protocol"], [341, 7, 1, "", "security_level"], [341, 8, 1, "", "session_stats"], [341, 8, 1, "", "set_alpn_protocols"], [341, 8, 1, "", "set_ciphers"], [341, 8, 1, "", "set_default_verify_paths"], [341, 8, 1, "", "set_ecdh_curve"], [341, 8, 1, "", "set_npn_protocols"], [341, 7, 1, "", "set_servername_callback"], [341, 7, 1, "", "sni_callback"], [341, 7, 1, "", "sslobject_class"], [341, 7, 1, "", "sslsocket_class"], [341, 7, 1, "", "verify_flags"], [341, 7, 1, "", "verify_mode"], [341, 8, 1, "", "wrap_bio"], [341, 8, 1, "", "wrap_socket"]], "ssl.SSLError": [[341, 7, 1, "", "library"], [341, 7, 1, "", "reason"]], "ssl.SSLSession": [[341, 7, 1, "", "has_ticket"], [341, 7, 1, "", "id"], [341, 7, 1, "", "ticket_lifetime_hint"], [341, 7, 1, "", "time"], [341, 7, 1, "", "timeout"]], "ssl.SSLSocket": [[341, 8, 1, "", "cipher"], [341, 8, 1, "", "compression"], [341, 7, 1, "", "context"], [341, 8, 1, "", "do_handshake"], [341, 8, 1, "", "get_channel_binding"], [341, 8, 1, "", "getpeercert"], [341, 8, 1, "", "pending"], [341, 8, 1, "", "read"], [341, 8, 1, "", "selected_alpn_protocol"], [341, 8, 1, "", "selected_npn_protocol"], [341, 7, 1, "", "server_hostname"], [341, 7, 1, "", "server_side"], [341, 7, 1, "", "session"], [341, 7, 1, "", "session_reused"], [341, 8, 1, "", "shared_ciphers"], [341, 8, 1, "", "unwrap"], [341, 8, 1, "", "verify_client_post_handshake"], [341, 8, 1, "", "version"], [341, 8, 1, "", "write"]], "ssl.TLSVersion": [[341, 7, 1, "", "MAXIMUM_SUPPORTED"], [341, 7, 1, "", "MINIMUM_SUPPORTED"], [341, 7, 1, "", "SSLv3"], [341, 7, 1, "", "TLSv1"], [341, 7, 1, "", "TLSv1_1"], [341, 7, 1, "", "TLSv1_2"], [341, 7, 1, "", "TLSv1_3"]], "stat": [[342, 9, 1, "", "FILE_ATTRIBUTE_ARCHIVE"], [342, 9, 1, "", "FILE_ATTRIBUTE_COMPRESSED"], [342, 9, 1, "", "FILE_ATTRIBUTE_DEVICE"], [342, 9, 1, "", "FILE_ATTRIBUTE_DIRECTORY"], [342, 9, 1, "", "FILE_ATTRIBUTE_ENCRYPTED"], [342, 9, 1, "", "FILE_ATTRIBUTE_HIDDEN"], [342, 9, 1, "", "FILE_ATTRIBUTE_INTEGRITY_STREAM"], [342, 9, 1, "", "FILE_ATTRIBUTE_NORMAL"], [342, 9, 1, "", "FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"], [342, 9, 1, "", "FILE_ATTRIBUTE_NO_SCRUB_DATA"], [342, 9, 1, "", "FILE_ATTRIBUTE_OFFLINE"], [342, 9, 1, "", "FILE_ATTRIBUTE_READONLY"], [342, 9, 1, "", "FILE_ATTRIBUTE_REPARSE_POINT"], [342, 9, 1, "", "FILE_ATTRIBUTE_SPARSE_FILE"], [342, 9, 1, "", "FILE_ATTRIBUTE_SYSTEM"], [342, 9, 1, "", "FILE_ATTRIBUTE_TEMPORARY"], [342, 9, 1, "", "FILE_ATTRIBUTE_VIRTUAL"], [342, 9, 1, "", "IO_REPARSE_TAG_APPEXECLINK"], [342, 9, 1, "", "IO_REPARSE_TAG_MOUNT_POINT"], [342, 9, 1, "", "IO_REPARSE_TAG_SYMLINK"], [342, 9, 1, "", "SF_APPEND"], [342, 9, 1, "", "SF_ARCHIVED"], [342, 9, 1, "", "SF_IMMUTABLE"], [342, 9, 1, "", "SF_NOUNLINK"], [342, 9, 1, "", "SF_SNAPSHOT"], [342, 9, 1, "", "ST_ATIME"], [342, 9, 1, "", "ST_CTIME"], [342, 9, 1, "", "ST_DEV"], [342, 9, 1, "", "ST_GID"], [342, 9, 1, "", "ST_INO"], [342, 9, 1, "", "ST_MODE"], [342, 9, 1, "", "ST_MTIME"], [342, 9, 1, "", "ST_NLINK"], [342, 9, 1, "", "ST_SIZE"], [342, 9, 1, "", "ST_UID"], [342, 9, 1, "", "S_ENFMT"], [342, 9, 1, "", "S_IEXEC"], [342, 9, 1, "", "S_IFBLK"], [342, 9, 1, "", "S_IFCHR"], [342, 9, 1, "", "S_IFDIR"], [342, 9, 1, "", "S_IFDOOR"], [342, 9, 1, "", "S_IFIFO"], [342, 9, 1, "", "S_IFLNK"], [342, 12, 1, "", "S_IFMT"], [342, 9, 1, "", "S_IFPORT"], [342, 9, 1, "", "S_IFREG"], [342, 9, 1, "", "S_IFSOCK"], [342, 9, 1, "", "S_IFWHT"], [342, 12, 1, "", "S_IMODE"], [342, 9, 1, "", "S_IREAD"], [342, 9, 1, "", "S_IRGRP"], [342, 9, 1, "", "S_IROTH"], [342, 9, 1, "", "S_IRUSR"], [342, 9, 1, "", "S_IRWXG"], [342, 9, 1, "", "S_IRWXO"], [342, 9, 1, "", "S_IRWXU"], [342, 12, 1, "", "S_ISBLK"], [342, 12, 1, "", "S_ISCHR"], [342, 12, 1, "", "S_ISDIR"], [342, 12, 1, "", "S_ISDOOR"], [342, 12, 1, "", "S_ISFIFO"], [342, 9, 1, "", "S_ISGID"], [342, 12, 1, "", "S_ISLNK"], [342, 12, 1, "", "S_ISPORT"], [342, 12, 1, "", "S_ISREG"], [342, 12, 1, "", "S_ISSOCK"], [342, 9, 1, "", "S_ISUID"], [342, 9, 1, "", "S_ISVTX"], [342, 12, 1, "", "S_ISWHT"], [342, 9, 1, "", "S_IWGRP"], [342, 9, 1, "", "S_IWOTH"], [342, 9, 1, "", "S_IWRITE"], [342, 9, 1, "", "S_IWUSR"], [342, 9, 1, "", "S_IXGRP"], [342, 9, 1, "", "S_IXOTH"], [342, 9, 1, "", "S_IXUSR"], [342, 9, 1, "", "UF_APPEND"], [342, 9, 1, "", "UF_COMPRESSED"], [342, 9, 1, "", "UF_HIDDEN"], [342, 9, 1, "", "UF_IMMUTABLE"], [342, 9, 1, "", "UF_NODUMP"], [342, 9, 1, "", "UF_NOUNLINK"], [342, 9, 1, "", "UF_OPAQUE"], [342, 12, 1, "", "filemode"]], "statistics": [[343, 11, 1, "", "NormalDist"], [343, 6, 1, "", "StatisticsError"], [343, 12, 1, "", "correlation"], [343, 12, 1, "", "covariance"], [343, 12, 1, "", "fmean"], [343, 12, 1, "", "geometric_mean"], [343, 12, 1, "", "harmonic_mean"], [343, 12, 1, "", "linear_regression"], [343, 12, 1, "", "mean"], [343, 12, 1, "", "median"], [343, 12, 1, "", "median_grouped"], [343, 12, 1, "", "median_high"], [343, 12, 1, "", "median_low"], [343, 12, 1, "", "mode"], [343, 12, 1, "", "multimode"], [343, 12, 1, "", "pstdev"], [343, 12, 1, "", "pvariance"], [343, 12, 1, "", "quantiles"], [343, 12, 1, "", "stdev"], [343, 12, 1, "", "variance"]], "statistics.NormalDist": [[343, 8, 1, "", "cdf"], [343, 8, 1, "", "from_samples"], [343, 8, 1, "", "inv_cdf"], [343, 7, 1, "", "mean"], [343, 7, 1, "", "median"], [343, 7, 1, "", "mode"], [343, 8, 1, "", "overlap"], [343, 8, 1, "", "pdf"], [343, 8, 1, "", "quantiles"], [343, 8, 1, "", "samples"], [343, 7, 1, "", "stdev"], [343, 7, 1, "", "variance"], [343, 8, 1, "", "zscore"]], "str": [[344, 8, 1, "", "capitalize"], [344, 8, 1, "", "casefold"], [344, 8, 1, "", "center"], [344, 8, 1, "", "count"], [344, 8, 1, "", "encode"], [344, 8, 1, "", "endswith"], [344, 8, 1, "", "expandtabs"], [344, 8, 1, "", "find"], [344, 8, 1, "", "format"], [344, 8, 1, "", "format_map"], [344, 8, 1, "", "index"], [344, 8, 1, "", "isalnum"], [344, 8, 1, "", "isalpha"], [344, 8, 1, "", "isascii"], [344, 8, 1, "", "isdecimal"], [344, 8, 1, "", "isdigit"], [344, 8, 1, "", "isidentifier"], [344, 8, 1, "", "islower"], [344, 8, 1, "", "isnumeric"], [344, 8, 1, "", "isprintable"], [344, 8, 1, "", "isspace"], [344, 8, 1, "", "istitle"], [344, 8, 1, "", "isupper"], [344, 8, 1, "", "join"], [344, 8, 1, "", "ljust"], [344, 8, 1, "", "lower"], [344, 8, 1, "", "lstrip"], [344, 8, 1, "", "maketrans"], [344, 8, 1, "", "partition"], [344, 8, 1, "", "removeprefix"], [344, 8, 1, "", "removesuffix"], [344, 8, 1, "", "replace"], [344, 8, 1, "", "rfind"], [344, 8, 1, "", "rindex"], [344, 8, 1, "", "rjust"], [344, 8, 1, "", "rpartition"], [344, 8, 1, "", "rsplit"], [344, 8, 1, "", "rstrip"], [344, 8, 1, "", "split"], [344, 8, 1, "", "splitlines"], [344, 8, 1, "", "startswith"], [344, 8, 1, "", "strip"], [344, 8, 1, "", "swapcase"], [344, 8, 1, "", "title"], [344, 8, 1, "", "translate"], [344, 8, 1, "", "upper"], [344, 8, 1, "", "zfill"]], "string": [[345, 11, 1, "", "Formatter"], [345, 11, 1, "", "Template"], [345, 9, 1, "", "ascii_letters"], [345, 9, 1, "", "ascii_lowercase"], [345, 9, 1, "", "ascii_uppercase"], [345, 12, 1, "", "capwords"], [345, 9, 1, "", "digits"], [345, 9, 1, "", "hexdigits"], [345, 9, 1, "", "octdigits"], [345, 9, 1, "", "printable"], [345, 9, 1, "", "punctuation"], [345, 9, 1, "", "whitespace"]], "string.Formatter": [[345, 8, 1, "", "check_unused_args"], [345, 8, 1, "", "convert_field"], [345, 8, 1, "", "format"], [345, 8, 1, "", "format_field"], [345, 8, 1, "", "get_field"], [345, 8, 1, "", "get_value"], [345, 8, 1, "", "parse"], [345, 8, 1, "", "vformat"]], "string.Template": [[345, 8, 1, "", "get_identifiers"], [345, 8, 1, "", "is_valid"], [345, 8, 1, "", "safe_substitute"], [345, 8, 1, "", "substitute"], [345, 7, 1, "", "template"]], "stringprep": [[346, 12, 1, "", "in_table_a1"], [346, 12, 1, "", "in_table_b1"], [346, 12, 1, "", "in_table_c11"], [346, 12, 1, "", "in_table_c11_c12"], [346, 12, 1, "", "in_table_c12"], [346, 12, 1, "", "in_table_c21"], [346, 12, 1, "", "in_table_c21_c22"], [346, 12, 1, "", "in_table_c22"], [346, 12, 1, "", "in_table_c3"], [346, 12, 1, "", "in_table_c4"], [346, 12, 1, "", "in_table_c5"], [346, 12, 1, "", "in_table_c6"], [346, 12, 1, "", "in_table_c7"], [346, 12, 1, "", "in_table_c8"], [346, 12, 1, "", "in_table_c9"], [346, 12, 1, "", "in_table_d1"], [346, 12, 1, "", "in_table_d2"], [346, 12, 1, "", "map_table_b2"], [346, 12, 1, "", "map_table_b3"]], "struct": [[347, 11, 1, "", "Struct"], [347, 12, 1, "", "calcsize"], [347, 6, 1, "", "error"], [347, 12, 1, "", "iter_unpack"], [347, 12, 1, "", "pack"], [347, 12, 1, "", "pack_into"], [347, 12, 1, "", "unpack"], [347, 12, 1, "", "unpack_from"]], "struct.Struct": [[347, 7, 1, "", "format"], [347, 8, 1, "", "iter_unpack"], [347, 8, 1, "", "pack"], [347, 8, 1, "", "pack_into"], [347, 7, 1, "", "size"], [347, 8, 1, "", "unpack"], [347, 8, 1, "", "unpack_from"]], "subprocess": [[348, 9, 1, "", "ABOVE_NORMAL_PRIORITY_CLASS"], [348, 9, 1, "", "BELOW_NORMAL_PRIORITY_CLASS"], [348, 9, 1, "", "CREATE_BREAKAWAY_FROM_JOB"], [348, 9, 1, "", "CREATE_DEFAULT_ERROR_MODE"], [348, 9, 1, "", "CREATE_NEW_CONSOLE"], [348, 9, 1, "", "CREATE_NEW_PROCESS_GROUP"], [348, 9, 1, "", "CREATE_NO_WINDOW"], [348, 6, 1, "", "CalledProcessError"], [348, 11, 1, "", "CompletedProcess"], [348, 9, 1, "", "DETACHED_PROCESS"], [348, 9, 1, "", "DEVNULL"], [348, 9, 1, "", "HIGH_PRIORITY_CLASS"], [348, 9, 1, "", "IDLE_PRIORITY_CLASS"], [348, 9, 1, "", "NORMAL_PRIORITY_CLASS"], [348, 9, 1, "", "PIPE"], [348, 11, 1, "", "Popen"], [348, 9, 1, "", "REALTIME_PRIORITY_CLASS"], [348, 9, 1, "", "STARTF_USESHOWWINDOW"], [348, 9, 1, "", "STARTF_USESTDHANDLES"], [348, 11, 1, "", "STARTUPINFO"], [348, 9, 1, "", "STDOUT"], [348, 9, 1, "", "STD_ERROR_HANDLE"], [348, 9, 1, "", "STD_INPUT_HANDLE"], [348, 9, 1, "", "STD_OUTPUT_HANDLE"], [348, 9, 1, "", "SW_HIDE"], [348, 6, 1, "", "SubprocessError"], [348, 6, 1, "", "TimeoutExpired"], [348, 12, 1, "", "call"], [348, 12, 1, "", "check_call"], [348, 12, 1, "", "check_output"], [348, 12, 1, "", "getoutput"], [348, 12, 1, "", "getstatusoutput"], [348, 12, 1, "", "run"]], "subprocess.CalledProcessError": [[348, 7, 1, "", "cmd"], [348, 7, 1, "", "output"], [348, 7, 1, "", "returncode"], [348, 7, 1, "", "stderr"], [348, 7, 1, "", "stdout"]], "subprocess.CompletedProcess": [[348, 7, 1, "", "args"], [348, 8, 1, "", "check_returncode"], [348, 7, 1, "", "returncode"], [348, 7, 1, "", "stderr"], [348, 7, 1, "", "stdout"]], "subprocess.Popen": [[348, 7, 1, "", "args"], [348, 8, 1, "", "communicate"], [348, 8, 1, "", "kill"], [348, 7, 1, "", "pid"], [348, 8, 1, "", "poll"], [348, 7, 1, "", "returncode"], [348, 8, 1, "", "send_signal"], [348, 7, 1, "", "stderr"], [348, 7, 1, "", "stdin"], [348, 7, 1, "", "stdout"], [348, 8, 1, "", "terminate"], [348, 8, 1, "", "wait"]], "subprocess.STARTUPINFO": [[348, 7, 1, "", "dwFlags"], [348, 7, 1, "", "hStdError"], [348, 7, 1, "", "hStdInput"], [348, 7, 1, "", "hStdOutput"], [348, 7, 1, "", "lpAttributeList"], [348, 7, 1, "", "wShowWindow"]], "subprocess.TimeoutExpired": [[348, 7, 1, "", "cmd"], [348, 7, 1, "", "output"], [348, 7, 1, "", "stderr"], [348, 7, 1, "", "stdout"], [348, 7, 1, "", "timeout"]], "sunau": [[349, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G721"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G722"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G723_3"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_ADPCM_G723_5"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_ALAW_8"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_DOUBLE"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_FLOAT"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_16"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_24"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_32"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_LINEAR_8"], [349, 9, 1, "", "AUDIO_FILE_ENCODING_MULAW_8"], [349, 9, 1, "", "AUDIO_FILE_MAGIC"], [349, 6, 1, "", "Error"], [349, 12, 1, "", "open"]], "sunau.AU_read": [[349, 8, 1, "", "close"], [349, 8, 1, "", "getcompname"], [349, 8, 1, "", "getcomptype"], [349, 8, 1, "", "getframerate"], [349, 8, 1, "", "getmark"], [349, 8, 1, "", "getmarkers"], [349, 8, 1, "", "getnchannels"], [349, 8, 1, "", "getnframes"], [349, 8, 1, "", "getparams"], [349, 8, 1, "", "getsampwidth"], [349, 8, 1, "", "readframes"], [349, 8, 1, "", "rewind"], [349, 8, 1, "", "setpos"], [349, 8, 1, "", "tell"]], "sunau.AU_write": [[349, 8, 1, "", "close"], [349, 8, 1, "", "setcomptype"], [349, 8, 1, "", "setframerate"], [349, 8, 1, "", "setnchannels"], [349, 8, 1, "", "setnframes"], [349, 8, 1, "", "setparams"], [349, 8, 1, "", "setsampwidth"], [349, 8, 1, "", "tell"], [349, 8, 1, "", "writeframes"], [349, 8, 1, "", "writeframesraw"]], "symtable": [[351, 11, 1, "", "Class"], [351, 11, 1, "", "Function"], [351, 11, 1, "", "Symbol"], [351, 11, 1, "", "SymbolTable"], [351, 12, 1, "", "symtable"]], "symtable.Class": [[351, 8, 1, "", "get_methods"]], "symtable.Function": [[351, 8, 1, "", "get_frees"], [351, 8, 1, "", "get_globals"], [351, 8, 1, "", "get_locals"], [351, 8, 1, "", "get_nonlocals"], [351, 8, 1, "", "get_parameters"]], "symtable.Symbol": [[351, 8, 1, "", "get_name"], [351, 8, 1, "", "get_namespace"], [351, 8, 1, "", "get_namespaces"], [351, 8, 1, "", "is_annotated"], [351, 8, 1, "", "is_assigned"], [351, 8, 1, "", "is_declared_global"], [351, 8, 1, "", "is_free"], [351, 8, 1, "", "is_global"], [351, 8, 1, "", "is_imported"], [351, 8, 1, "", "is_local"], [351, 8, 1, "", "is_namespace"], [351, 8, 1, "", "is_nonlocal"], [351, 8, 1, "", "is_parameter"], [351, 8, 1, "", "is_referenced"]], "symtable.SymbolTable": [[351, 8, 1, "", "get_children"], [351, 8, 1, "", "get_id"], [351, 8, 1, "", "get_identifiers"], [351, 8, 1, "", "get_lineno"], [351, 8, 1, "", "get_name"], [351, 8, 1, "", "get_symbols"], [351, 8, 1, "", "get_type"], [351, 8, 1, "", "has_children"], [351, 8, 1, "", "is_nested"], [351, 8, 1, "", "is_optimized"], [351, 8, 1, "", "lookup"]], "sys": [[352, 9, 1, "", "__breakpointhook__"], [352, 9, 1, "", "__displayhook__"], [352, 9, 1, "", "__excepthook__"], [352, 9, 1, "", "__interactivehook__"], [352, 9, 1, "", "__stderr__"], [352, 9, 1, "", "__stdin__"], [352, 9, 1, "", "__stdout__"], [352, 9, 1, "", "__unraisablehook__"], [352, 12, 1, "", "_clear_type_cache"], [352, 12, 1, "", "_current_exceptions"], [352, 12, 1, "", "_current_frames"], [352, 12, 1, "", "_debugmallocstats"], [352, 9, 1, "", "_emscripten_info"], [352, 12, 1, "", "_enablelegacywindowsfsencoding"], [352, 12, 1, "", "_getframe"], [352, 12, 1, "", "_getframemodulename"], [352, 9, 1, "", "_xoptions"], [352, 9, 1, "", "abiflags"], [352, 12, 1, "", "activate_stack_trampoline"], [352, 12, 1, "", "addaudithook"], [352, 9, 1, "", "api_version"], [352, 9, 1, "", "argv"], [352, 12, 1, "", "audit"], [352, 9, 1, "", "base_exec_prefix"], [352, 9, 1, "", "base_prefix"], [352, 12, 1, "", "breakpointhook"], [352, 9, 1, "", "builtin_module_names"], [352, 9, 1, "", "byteorder"], [352, 12, 1, "", "call_tracing"], [352, 9, 1, "", "copyright"], [352, 12, 1, "", "deactivate_stack_trampoline"], [352, 12, 1, "", "displayhook"], [352, 9, 1, "", "dllhandle"], [352, 9, 1, "", "dont_write_bytecode"], [352, 12, 1, "", "exc_info"], [352, 12, 1, "", "excepthook"], [352, 12, 1, "", "exception"], [352, 9, 1, "", "exec_prefix"], [352, 9, 1, "", "executable"], [352, 12, 1, "", "exit"], [352, 9, 1, "", "flags"], [352, 9, 1, "", "float_info"], [352, 9, 1, "", "float_repr_style"], [352, 12, 1, "", "get_asyncgen_hooks"], [352, 12, 1, "", "get_coroutine_origin_tracking_depth"], [352, 12, 1, "", "get_int_max_str_digits"], [352, 12, 1, "", "getallocatedblocks"], [352, 12, 1, "", "getandroidapilevel"], [352, 12, 1, "", "getdefaultencoding"], [352, 12, 1, "", "getdlopenflags"], [352, 12, 1, "", "getfilesystemencodeerrors"], [352, 12, 1, "", "getfilesystemencoding"], [352, 12, 1, "", "getprofile"], [352, 12, 1, "", "getrecursionlimit"], [352, 12, 1, "", "getrefcount"], [352, 12, 1, "", "getsizeof"], [352, 12, 1, "", "getswitchinterval"], [352, 12, 1, "", "gettrace"], [352, 12, 1, "", "getunicodeinternedsize"], [352, 12, 1, "", "getwindowsversion"], [352, 9, 1, "", "hash_info"], [352, 9, 1, "", "hexversion"], [352, 9, 1, "", "implementation"], [352, 9, 1, "", "int_info"], [352, 12, 1, "", "intern"], [352, 12, 1, "", "is_finalizing"], [352, 12, 1, "", "is_stack_trampoline_active"], [352, 9, 1, "", "last_exc"], [352, 9, 1, "", "last_traceback"], [352, 9, 1, "", "last_type"], [352, 9, 1, "", "last_value"], [352, 9, 1, "", "maxsize"], [352, 9, 1, "", "maxunicode"], [352, 9, 1, "", "meta_path"], [352, 9, 1, "", "modules"], [353, 10, 0, "-", "monitoring"], [352, 9, 1, "", "orig_argv"], [352, 9, 1, "", "path"], [352, 9, 1, "", "path_hooks"], [352, 9, 1, "", "path_importer_cache"], [352, 9, 1, "", "platform"], [352, 9, 1, "", "platlibdir"], [352, 9, 1, "", "prefix"], [352, 9, 1, "", "ps1"], [352, 9, 1, "", "ps2"], [352, 9, 1, "", "pycache_prefix"], [352, 12, 1, "", "set_asyncgen_hooks"], [352, 12, 1, "", "set_coroutine_origin_tracking_depth"], [352, 12, 1, "", "set_int_max_str_digits"], [352, 12, 1, "", "setdlopenflags"], [352, 12, 1, "", "setprofile"], [352, 12, 1, "", "setrecursionlimit"], [352, 12, 1, "", "setswitchinterval"], [352, 12, 1, "", "settrace"], [352, 9, 1, "", "stderr"], [352, 9, 1, "", "stdin"], [352, 9, 1, "", "stdlib_module_names"], [352, 9, 1, "", "stdout"], [352, 9, 1, "", "thread_info"], [352, 9, 1, "", "tracebacklimit"], [352, 12, 1, "", "unraisablehook"], [352, 9, 1, "", "version"], [352, 9, 1, "", "version_info"], [352, 9, 1, "", "warnoptions"], [352, 9, 1, "", "winver"]], "sys._emscripten_info": [[352, 7, 1, "", "emscripten_version"], [352, 7, 1, "", "pthreads"], [352, 7, 1, "", "runtime"], [352, 7, 1, "", "shared_memory"]], "sys.flags": [[352, 7, 1, "", "bytes_warning"], [352, 7, 1, "", "debug"], [352, 7, 1, "", "dev_mode"], [352, 7, 1, "", "dont_write_bytecode"], [352, 7, 1, "", "hash_randomization"], [352, 7, 1, "", "ignore_environment"], [352, 7, 1, "", "inspect"], [352, 7, 1, "", "int_max_str_digits"], [352, 7, 1, "", "interactive"], [352, 7, 1, "", "isolated"], [352, 7, 1, "", "no_site"], [352, 7, 1, "", "no_user_site"], [352, 7, 1, "", "optimize"], [352, 7, 1, "", "quiet"], [352, 7, 1, "", "safe_path"], [352, 7, 1, "", "utf8_mode"], [352, 7, 1, "", "verbose"], [352, 7, 1, "", "warn_default_encoding"]], "sys.float_info": [[352, 7, 1, "", "dig"], [352, 7, 1, "", "epsilon"], [352, 7, 1, "", "mant_dig"], [352, 7, 1, "", "max"], [352, 7, 1, "", "max_10_exp"], [352, 7, 1, "", "max_exp"], [352, 7, 1, "", "min"], [352, 7, 1, "", "min_10_exp"], [352, 7, 1, "", "min_exp"], [352, 7, 1, "", "radix"], [352, 7, 1, "", "rounds"]], "sys.hash_info": [[352, 7, 1, "", "algorithm"], [352, 7, 1, "", "hash_bits"], [352, 7, 1, "", "imag"], [352, 7, 1, "", "inf"], [352, 7, 1, "", "modulus"], [352, 7, 1, "", "nan"], [352, 7, 1, "", "seed_bits"], [352, 7, 1, "", "width"]], "sys.int_info": [[352, 7, 1, "", "bits_per_digit"], [352, 7, 1, "", "default_max_str_digits"], [352, 7, 1, "", "sizeof_digit"], [352, 7, 1, "", "str_digits_check_threshold"]], "sys.monitoring": [[353, 9, 1, "", "DISABLE"], [353, 9, 1, "", "MISSING"], [353, 12, 1, "", "free_tool_id"], [353, 12, 1, "", "get_events"], [353, 12, 1, "", "get_local_events"], [353, 12, 1, "", "get_tool"], [353, 12, 1, "", "register_callback"], [353, 12, 1, "", "restart_events"], [353, 12, 1, "", "set_events"], [353, 12, 1, "", "set_local_events"], [353, 12, 1, "", "use_tool_id"]], "sys.thread_info": [[352, 7, 1, "", "lock"], [352, 7, 1, "", "name"], [352, 7, 1, "", "version"]], "sysconfig": [[355, 12, 1, "", "_get_preferred_schemes"], [355, 12, 1, "", "get_config_h_filename"], [355, 12, 1, "", "get_config_var"], [355, 12, 1, "", "get_config_vars"], [355, 12, 1, "", "get_default_scheme"], [355, 12, 1, "", "get_makefile_filename"], [355, 12, 1, "", "get_path"], [355, 12, 1, "", "get_path_names"], [355, 12, 1, "", "get_paths"], [355, 12, 1, "", "get_platform"], [355, 12, 1, "", "get_preferred_scheme"], [355, 12, 1, "", "get_python_version"], [355, 12, 1, "", "get_scheme_names"], [355, 12, 1, "", "is_python_build"], [355, 12, 1, "", "parse_config_h"]], "syslog": [[356, 12, 1, "", "closelog"], [356, 12, 1, "", "openlog"], [356, 12, 1, "", "setlogmask"], [356, 12, 1, "", "syslog"]], "tabnanny": [[357, 6, 1, "", "NannyNag"], [357, 12, 1, "", "check"], [357, 9, 1, "", "filename_only"], [357, 12, 1, "", "process_tokens"], [357, 9, 1, "", "verbose"]], "tarfile": [[358, 9, 1, "", "AREGTYPE"], [358, 6, 1, "", "AbsoluteLinkError"], [358, 6, 1, "", "AbsolutePathError"], [358, 9, 1, "", "BLKTYPE"], [358, 9, 1, "", "CHRTYPE"], [358, 9, 1, "", "CONTTYPE"], [358, 6, 1, "", "CompressionError"], [358, 9, 1, "", "DEFAULT_FORMAT"], [358, 9, 1, "", "DIRTYPE"], [358, 9, 1, "", "ENCODING"], [358, 6, 1, "", "ExtractError"], [358, 9, 1, "", "FIFOTYPE"], [358, 6, 1, "", "FilterError"], [358, 9, 1, "", "GNUTYPE_LONGLINK"], [358, 9, 1, "", "GNUTYPE_LONGNAME"], [358, 9, 1, "", "GNUTYPE_SPARSE"], [358, 9, 1, "", "GNU_FORMAT"], [358, 6, 1, "", "HeaderError"], [358, 9, 1, "", "LNKTYPE"], [358, 6, 1, "", "LinkOutsideDestinationError"], [358, 6, 1, "", "OutsideDestinationError"], [358, 9, 1, "", "PAX_FORMAT"], [358, 9, 1, "", "REGTYPE"], [358, 6, 1, "", "ReadError"], [358, 9, 1, "", "SYMTYPE"], [358, 6, 1, "", "SpecialFileError"], [358, 6, 1, "", "StreamError"], [358, 6, 1, "", "TarError"], [358, 11, 1, "", "TarFile"], [358, 11, 1, "", "TarInfo"], [358, 9, 1, "", "USTAR_FORMAT"], [358, 12, 1, "", "data_filter"], [358, 12, 1, "", "fully_trusted_filter"], [358, 12, 1, "", "is_tarfile"], [358, 12, 1, "", "open"], [358, 12, 1, "", "tar_filter"], [358, 14, 1, "cmdoption-tarfile-create", "--create"], [358, 14, 1, "cmdoption-tarfile-extract", "--extract"], [358, 14, 1, "cmdoption-tarfile-filter", "--filter"], [358, 14, 1, "cmdoption-tarfile-list", "--list"], [358, 14, 1, "cmdoption-tarfile-test", "--test"], [358, 14, 1, "cmdoption-tarfile-v", "--verbose"], [358, 14, 1, "cmdoption-tarfile-c", "-c"], [358, 14, 1, "cmdoption-tarfile-e", "-e"], [358, 14, 1, "cmdoption-tarfile-l", "-l"], [358, 14, 1, "cmdoption-tarfile-t", "-t"], [358, 14, 1, "cmdoption-tarfile-v", "-v"]], "tarfile.FilterError": [[358, 7, 1, "", "tarinfo"]], "tarfile.TarFile": [[358, 8, 1, "", "add"], [358, 8, 1, "", "addfile"], [358, 8, 1, "", "close"], [358, 7, 1, "", "errorlevel"], [358, 8, 1, "", "extract"], [358, 8, 1, "", "extractall"], [358, 8, 1, "", "extractfile"], [358, 7, 1, "", "extraction_filter"], [358, 8, 1, "", "getmember"], [358, 8, 1, "", "getmembers"], [358, 8, 1, "", "getnames"], [358, 8, 1, "", "gettarinfo"], [358, 8, 1, "", "list"], [358, 8, 1, "", "next"], [358, 8, 1, "", "open"], [358, 7, 1, "", "pax_headers"]], "tarfile.TarInfo": [[358, 7, 1, "", "chksum"], [358, 7, 1, "", "devmajor"], [358, 7, 1, "", "devminor"], [358, 8, 1, "", "frombuf"], [358, 8, 1, "", "fromtarfile"], [358, 7, 1, "", "gid"], [358, 7, 1, "", "gname"], [358, 8, 1, "", "isblk"], [358, 8, 1, "", "ischr"], [358, 8, 1, "", "isdev"], [358, 8, 1, "", "isdir"], [358, 8, 1, "", "isfifo"], [358, 8, 1, "", "isfile"], [358, 8, 1, "", "islnk"], [358, 8, 1, "", "isreg"], [358, 8, 1, "", "issym"], [358, 7, 1, "", "linkname"], [358, 7, 1, "", "mode"], [358, 7, 1, "", "mtime"], [358, 7, 1, "", "name"], [358, 7, 1, "", "offset"], [358, 7, 1, "", "offset_data"], [358, 7, 1, "", "pax_headers"], [358, 8, 1, "", "replace"], [358, 7, 1, "", "size"], [358, 7, 1, "", "sparse"], [358, 8, 1, "", "tobuf"], [358, 7, 1, "", "type"], [358, 7, 1, "", "uid"], [358, 7, 1, "", "uname"]], "telnetlib": [[359, 11, 1, "", "Telnet"]], "telnetlib.Telnet": [[359, 8, 1, "", "close"], [359, 8, 1, "", "expect"], [359, 8, 1, "", "fileno"], [359, 8, 1, "", "get_socket"], [359, 8, 1, "", "interact"], [359, 8, 1, "", "msg"], [359, 8, 1, "", "mt_interact"], [359, 8, 1, "", "open"], [359, 8, 1, "", "read_all"], [359, 8, 1, "", "read_eager"], [359, 8, 1, "", "read_lazy"], [359, 8, 1, "", "read_sb_data"], [359, 8, 1, "", "read_some"], [359, 8, 1, "", "read_until"], [359, 8, 1, "", "read_very_eager"], [359, 8, 1, "", "read_very_lazy"], [359, 8, 1, "", "set_debuglevel"], [359, 8, 1, "", "set_option_negotiation_callback"], [359, 8, 1, "", "write"]], "tempfile": [[360, 12, 1, "", "NamedTemporaryFile"], [360, 11, 1, "", "SpooledTemporaryFile"], [360, 11, 1, "", "TemporaryDirectory"], [360, 12, 1, "", "TemporaryFile"], [360, 12, 1, "", "gettempdir"], [360, 12, 1, "", "gettempdirb"], [360, 12, 1, "", "gettempprefix"], [360, 12, 1, "", "gettempprefixb"], [360, 12, 1, "", "mkdtemp"], [360, 12, 1, "", "mkstemp"], [360, 12, 1, "", "mktemp"], [360, 9, 1, "", "tempdir"]], "tempfile.SpooledTemporaryFile": [[360, 8, 1, "", "rollover"]], "tempfile.TemporaryDirectory": [[360, 8, 1, "", "cleanup"], [360, 7, 1, "", "name"]], "termios": [[361, 9, 1, "", "TCSADRAIN"], [361, 9, 1, "", "TCSAFLUSH"], [361, 9, 1, "", "TCSANOW"], [361, 12, 1, "", "tcdrain"], [361, 12, 1, "", "tcflow"], [361, 12, 1, "", "tcflush"], [361, 12, 1, "", "tcgetattr"], [361, 12, 1, "", "tcgetwinsize"], [361, 12, 1, "", "tcsendbreak"], [361, 12, 1, "", "tcsetattr"], [361, 12, 1, "", "tcsetwinsize"]], "test": [[362, 10, 0, "-", "regrtest"], [362, 10, 0, "-", "support"]], "test.support": [[362, 9, 1, "", "ALWAYS_EQ"], [362, 9, 1, "", "HAVE_DOCSTRINGS"], [362, 9, 1, "", "INTERNET_TIMEOUT"], [362, 9, 1, "", "LARGEST"], [362, 9, 1, "", "LONG_TIMEOUT"], [362, 9, 1, "", "LOOPBACK_TIMEOUT"], [362, 9, 1, "", "MAX_Py_ssize_t"], [362, 9, 1, "", "MISSING_C_DOCSTRINGS"], [362, 11, 1, "", "Matcher"], [362, 9, 1, "", "NEVER_EQ"], [362, 9, 1, "", "PGO"], [362, 9, 1, "", "PIPE_MAX_SIZE"], [362, 9, 1, "", "Py_DEBUG"], [362, 6, 1, "", "ResourceDenied"], [362, 9, 1, "", "SHORT_TIMEOUT"], [362, 9, 1, "", "SMALLEST"], [362, 9, 1, "", "SOCK_MAX_SIZE"], [362, 11, 1, "", "SaveSignals"], [362, 11, 1, "", "SuppressCrashReport"], [362, 9, 1, "", "TEST_DATA_DIR"], [362, 9, 1, "", "TEST_HOME_DIR"], [362, 9, 1, "", "TEST_HTTP_URL"], [362, 9, 1, "", "TEST_SUPPORT_DIR"], [362, 6, 1, "", "TestFailed"], [362, 12, 1, "", "adjust_int_max_str_digits"], [362, 12, 1, "", "anticipate_failure"], [362, 12, 1, "", "args_from_interpreter_flags"], [362, 12, 1, "", "bigaddrspacetest"], [362, 12, 1, "", "bigmemtest"], [362, 12, 1, "", "busy_retry"], [362, 10, 0, "-", "bytecode_helper"], [362, 12, 1, "", "calcobjsize"], [362, 12, 1, "", "calcvobjsize"], [362, 12, 1, "", "captured_stderr"], [362, 12, 1, "", "captured_stdin"], [362, 12, 1, "", "captured_stdout"], [362, 12, 1, "", "catch_unraisable_exception"], [362, 12, 1, "", "check__all__"], [362, 12, 1, "", "check_disallow_instantiation"], [362, 12, 1, "", "check_free_after_iterating"], [362, 12, 1, "", "check_impl_detail"], [362, 12, 1, "", "check_syntax_error"], [362, 12, 1, "", "checksizeof"], [362, 12, 1, "", "cpython_only"], [362, 12, 1, "", "detect_api_mismatch"], [362, 12, 1, "", "disable_faulthandler"], [362, 12, 1, "", "disable_gc"], [362, 12, 1, "", "findfile"], [362, 12, 1, "", "flush_std_streams"], [362, 12, 1, "", "gc_collect"], [362, 12, 1, "", "get_attribute"], [362, 12, 1, "", "get_original_stdout"], [362, 12, 1, "", "get_pagesize"], [362, 12, 1, "", "impl_detail"], [362, 10, 0, "-", "import_helper"], [362, 9, 1, "", "is_android"], [362, 9, 1, "", "is_jython"], [362, 12, 1, "", "is_resource_enabled"], [362, 12, 1, "", "load_package_tests"], [362, 9, 1, "", "max_memuse"], [362, 12, 1, "", "missing_compiler_executable"], [362, 12, 1, "", "no_tracing"], [362, 12, 1, "", "open_urlresource"], [362, 12, 1, "", "optim_args_from_interpreter_flags"], [362, 10, 0, "-", "os_helper"], [362, 12, 1, "", "patch"], [362, 12, 1, "", "print_warning"], [362, 12, 1, "", "python_is_optimized"], [362, 9, 1, "", "real_max_memuse"], [362, 12, 1, "", "reap_children"], [362, 12, 1, "", "record_original_stdout"], [362, 12, 1, "", "refcount_test"], [362, 12, 1, "", "requires"], [362, 12, 1, "", "requires_IEEE_754"], [362, 12, 1, "", "requires_bz2"], [362, 12, 1, "", "requires_docstrings"], [362, 12, 1, "", "requires_freebsd_version"], [362, 12, 1, "", "requires_gzip"], [362, 12, 1, "", "requires_limited_api"], [362, 12, 1, "", "requires_linux_version"], [362, 12, 1, "", "requires_lzma"], [362, 12, 1, "", "requires_mac_version"], [362, 12, 1, "", "requires_resource"], [362, 12, 1, "", "requires_zlib"], [362, 12, 1, "", "run_in_subinterp"], [362, 12, 1, "", "run_with_locale"], [362, 12, 1, "", "run_with_tz"], [362, 10, 0, "-", "script_helper"], [362, 12, 1, "", "set_memlimit"], [362, 12, 1, "", "setswitchinterval"], [362, 12, 1, "", "skip_if_broken_multiprocessing_synchronize"], [362, 12, 1, "", "sleeping_retry"], [362, 10, 0, "-", "socket_helper"], [362, 12, 1, "", "sortdict"], [362, 12, 1, "", "swap_attr"], [362, 12, 1, "", "swap_item"], [362, 12, 1, "", "system_must_validate_cert"], [362, 10, 0, "-", "threading_helper"], [362, 9, 1, "", "unix_shell"], [362, 9, 1, "", "verbose"], [362, 12, 1, "", "wait_process"], [362, 10, 0, "-", "warnings_helper"], [362, 12, 1, "", "with_pymalloc"]], "test.support.Matcher": [[362, 8, 1, "", "match_value"], [362, 8, 1, "", "matches"]], "test.support.SaveSignals": [[362, 8, 1, "", "restore"], [362, 8, 1, "", "save"]], "test.support.bytecode_helper": [[362, 11, 1, "", "BytecodeTestCase"]], "test.support.bytecode_helper.BytecodeTestCase": [[362, 8, 1, "", "assertInBytecode"], [362, 8, 1, "", "assertNotInBytecode"], [362, 8, 1, "", "get_disassembly_as_string"]], "test.support.import_helper": [[362, 11, 1, "", "CleanImport"], [362, 11, 1, "", "DirsOnSysPath"], [362, 12, 1, "", "forget"], [362, 12, 1, "", "import_fresh_module"], [362, 12, 1, "", "import_module"], [362, 12, 1, "", "make_legacy_pyc"], [362, 12, 1, "", "modules_cleanup"], [362, 12, 1, "", "modules_setup"], [362, 12, 1, "", "unload"]], "test.support.os_helper": [[362, 11, 1, "", "EnvironmentVarGuard"], [362, 9, 1, "", "FS_NONASCII"], [362, 11, 1, "", "FakePath"], [362, 9, 1, "", "SAVEDCWD"], [362, 9, 1, "", "TESTFN"], [362, 9, 1, "", "TESTFN_NONASCII"], [362, 9, 1, "", "TESTFN_UNDECODABLE"], [362, 9, 1, "", "TESTFN_UNENCODABLE"], [362, 9, 1, "", "TESTFN_UNICODE"], [362, 12, 1, "", "can_symlink"], [362, 12, 1, "", "can_xattr"], [362, 12, 1, "", "change_cwd"], [362, 12, 1, "", "create_empty_file"], [362, 12, 1, "", "fd_count"], [362, 12, 1, "", "fs_is_case_insensitive"], [362, 12, 1, "", "make_bad_fd"], [362, 12, 1, "", "rmdir"], [362, 12, 1, "", "rmtree"], [362, 12, 1, "", "skip_unless_symlink"], [362, 12, 1, "", "skip_unless_xattr"], [362, 12, 1, "", "temp_cwd"], [362, 12, 1, "", "temp_dir"], [362, 12, 1, "", "temp_umask"], [362, 12, 1, "", "unlink"]], "test.support.os_helper.EnvironmentVarGuard": [[362, 8, 1, "", "set"], [362, 8, 1, "", "unset"]], "test.support.script_helper": [[362, 12, 1, "", "assert_python_failure"], [362, 12, 1, "", "assert_python_ok"], [362, 12, 1, "", "interpreter_requires_environment"], [362, 12, 1, "", "kill_python"], [362, 12, 1, "", "make_pkg"], [362, 12, 1, "", "make_script"], [362, 12, 1, "", "make_zip_pkg"], [362, 12, 1, "", "make_zip_script"], [362, 12, 1, "", "run_python_until_end"], [362, 12, 1, "", "spawn_python"]], "test.support.socket_helper": [[362, 9, 1, "", "IPV6_ENABLED"], [362, 12, 1, "", "bind_port"], [362, 12, 1, "", "bind_unix_socket"], [362, 12, 1, "", "find_unused_port"], [362, 12, 1, "", "skip_unless_bind_unix_socket"], [362, 12, 1, "", "transient_internet"]], "test.support.threading_helper": [[362, 12, 1, "", "catch_threading_exception"], [362, 12, 1, "", "join_thread"], [362, 12, 1, "", "reap_threads"], [362, 12, 1, "", "start_threads"], [362, 12, 1, "", "threading_cleanup"], [362, 12, 1, "", "threading_setup"], [362, 12, 1, "", "wait_threads_exit"]], "test.support.warnings_helper": [[362, 11, 1, "", "WarningsRecorder"], [362, 12, 1, "", "check_no_resource_warning"], [362, 12, 1, "", "check_syntax_warning"], [362, 12, 1, "", "check_warnings"], [362, 12, 1, "", "ignore_warnings"]], "textwrap": [[364, 11, 1, "", "TextWrapper"], [364, 12, 1, "", "dedent"], [364, 12, 1, "", "fill"], [364, 12, 1, "", "indent"], [364, 12, 1, "", "shorten"], [364, 12, 1, "", "wrap"]], "textwrap.TextWrapper": [[364, 7, 1, "", "break_long_words"], [364, 7, 1, "", "break_on_hyphens"], [364, 7, 1, "", "drop_whitespace"], [364, 7, 1, "", "expand_tabs"], [364, 8, 1, "", "fill"], [364, 7, 1, "", "fix_sentence_endings"], [364, 7, 1, "", "initial_indent"], [364, 7, 1, "", "max_lines"], [364, 7, 1, "", "placeholder"], [364, 7, 1, "", "replace_whitespace"], [364, 7, 1, "", "subsequent_indent"], [364, 7, 1, "", "tabsize"], [364, 7, 1, "", "width"], [364, 8, 1, "", "wrap"]], "threading": [[365, 11, 1, "", "Barrier"], [365, 11, 1, "", "BoundedSemaphore"], [365, 6, 1, "", "BrokenBarrierError"], [365, 11, 1, "", "Condition"], [365, 11, 1, "", "Event"], [365, 11, 1, "", "Lock"], [365, 11, 1, "", "RLock"], [365, 11, 1, "", "Semaphore"], [365, 9, 1, "", "TIMEOUT_MAX"], [365, 11, 1, "", "Thread"], [365, 11, 1, "", "Timer"], [365, 9, 1, "", "__excepthook__"], [365, 12, 1, "", "active_count"], [365, 12, 1, "", "current_thread"], [365, 12, 1, "", "enumerate"], [365, 12, 1, "", "excepthook"], [365, 12, 1, "", "get_ident"], [365, 12, 1, "", "get_native_id"], [365, 12, 1, "", "getprofile"], [365, 12, 1, "", "gettrace"], [365, 11, 1, "", "local"], [365, 12, 1, "", "main_thread"], [365, 12, 1, "", "setprofile"], [365, 12, 1, "", "setprofile_all_threads"], [365, 12, 1, "", "settrace"], [365, 12, 1, "", "settrace_all_threads"], [365, 12, 1, "", "stack_size"]], "threading.Barrier": [[365, 8, 1, "", "abort"], [365, 7, 1, "", "broken"], [365, 7, 1, "", "n_waiting"], [365, 7, 1, "", "parties"], [365, 8, 1, "", "reset"], [365, 8, 1, "", "wait"]], "threading.Condition": [[365, 8, 1, "", "acquire"], [365, 8, 1, "", "notify"], [365, 8, 1, "", "notify_all"], [365, 8, 1, "", "release"], [365, 8, 1, "", "wait"], [365, 8, 1, "", "wait_for"]], "threading.Event": [[365, 8, 1, "", "clear"], [365, 8, 1, "", "is_set"], [365, 8, 1, "", "set"], [365, 8, 1, "", "wait"]], "threading.Lock": [[365, 8, 1, "", "acquire"], [365, 8, 1, "", "locked"], [365, 8, 1, "", "release"]], "threading.RLock": [[365, 8, 1, "", "acquire"], [365, 8, 1, "", "release"]], "threading.Semaphore": [[365, 8, 1, "", "acquire"], [365, 8, 1, "", "release"]], "threading.Thread": [[365, 7, 1, "", "daemon"], [365, 8, 1, "", "getName"], [365, 7, 1, "", "ident"], [365, 8, 1, "", "isDaemon"], [365, 8, 1, "", "is_alive"], [365, 8, 1, "", "join"], [365, 7, 1, "", "name"], [365, 7, 1, "", "native_id"], [365, 8, 1, "", "run"], [365, 8, 1, "", "setDaemon"], [365, 8, 1, "", "setName"], [365, 8, 1, "", "start"]], "threading.Timer": [[365, 8, 1, "", "cancel"]], "time": [[366, 9, 1, "", "CLOCK_BOOTTIME"], [366, 9, 1, "", "CLOCK_HIGHRES"], [366, 9, 1, "", "CLOCK_MONOTONIC"], [366, 9, 1, "", "CLOCK_MONOTONIC_RAW"], [366, 9, 1, "", "CLOCK_PROCESS_CPUTIME_ID"], [366, 9, 1, "", "CLOCK_PROF"], [366, 9, 1, "", "CLOCK_REALTIME"], [366, 9, 1, "", "CLOCK_TAI"], [366, 9, 1, "", "CLOCK_THREAD_CPUTIME_ID"], [366, 9, 1, "", "CLOCK_UPTIME"], [366, 9, 1, "", "CLOCK_UPTIME_RAW"], [366, 9, 1, "", "altzone"], [366, 12, 1, "", "asctime"], [366, 12, 1, "", "clock_getres"], [366, 12, 1, "", "clock_gettime"], [366, 12, 1, "", "clock_gettime_ns"], [366, 12, 1, "", "clock_settime"], [366, 12, 1, "", "clock_settime_ns"], [366, 12, 1, "", "ctime"], [366, 9, 1, "", "daylight"], [366, 12, 1, "", "get_clock_info"], [366, 12, 1, "", "gmtime"], [366, 12, 1, "", "localtime"], [366, 12, 1, "", "mktime"], [366, 12, 1, "", "monotonic"], [366, 12, 1, "", "monotonic_ns"], [366, 12, 1, "", "perf_counter"], [366, 12, 1, "", "perf_counter_ns"], [366, 12, 1, "", "process_time"], [366, 12, 1, "", "process_time_ns"], [366, 12, 1, "", "pthread_getcpuclockid"], [366, 12, 1, "", "sleep"], [366, 12, 1, "", "strftime"], [366, 12, 1, "", "strptime"], [366, 11, 1, "", "struct_time"], [366, 12, 1, "", "thread_time"], [366, 12, 1, "", "thread_time_ns"], [366, 12, 1, "", "time"], [366, 12, 1, "", "time_ns"], [366, 9, 1, "", "timezone"], [366, 9, 1, "", "tzname"], [366, 12, 1, "", "tzset"]], "time.struct_time": [[366, 7, 1, "", "tm_day"], [366, 7, 1, "", "tm_gmtoff"], [366, 7, 1, "", "tm_hour"], [366, 7, 1, "", "tm_isdst"], [366, 7, 1, "", "tm_min"], [366, 7, 1, "", "tm_mon"], [366, 7, 1, "", "tm_sec"], [366, 7, 1, "", "tm_wday"], [366, 7, 1, "", "tm_yday"], [366, 7, 1, "", "tm_year"], [366, 7, 1, "", "tm_zone"]], "timeit": [[367, 11, 1, "", "Timer"], [367, 12, 1, "", "default_timer"], [367, 12, 1, "", "repeat"], [367, 12, 1, "", "timeit"], [367, 14, 1, "cmdoption-timeit-h", "--help"], [367, 14, 1, "cmdoption-timeit-n", "--number"], [367, 14, 1, "cmdoption-timeit-p", "--process"], [367, 14, 1, "cmdoption-timeit-r", "--repeat"], [367, 14, 1, "cmdoption-timeit-s", "--setup"], [367, 14, 1, "cmdoption-timeit-u", "--unit"], [367, 14, 1, "cmdoption-timeit-v", "--verbose"], [367, 14, 1, "cmdoption-timeit-h", "-h"], [367, 14, 1, "cmdoption-timeit-n", "-n"], [367, 14, 1, "cmdoption-timeit-p", "-p"], [367, 14, 1, "cmdoption-timeit-r", "-r"], [367, 14, 1, "cmdoption-timeit-s", "-s"], [367, 14, 1, "cmdoption-timeit-u", "-u"], [367, 14, 1, "cmdoption-timeit-v", "-v"]], "timeit.Timer": [[367, 8, 1, "", "autorange"], [367, 8, 1, "", "print_exc"], [367, 8, 1, "", "repeat"], [367, 8, 1, "", "timeit"]], "tkinter": [[369, 12, 1, "", "Tcl"], [369, 11, 1, "", "Tk"], [370, 10, 0, "-", "colorchooser"], [189, 10, 0, "-", "commondialog"], [371, 10, 0, "-", "dnd"], [189, 10, 0, "-", "filedialog"], [372, 10, 0, "-", "font"], [373, 10, 0, "-", "messagebox"], [374, 10, 0, "-", "scrolledtext"], [189, 10, 0, "-", "simpledialog"], [375, 10, 0, "-", "tix"], [376, 10, 0, "-", "ttk"]], "tkinter.Tk": [[369, 7, 1, "", "children"], [369, 7, 1, "", "master"], [369, 7, 1, "", "tk"]], "tkinter.colorchooser": [[370, 11, 1, "", "Chooser"], [370, 12, 1, "", "askcolor"]], "tkinter.commondialog": [[189, 11, 1, "", "Dialog"]], "tkinter.commondialog.Dialog": [[189, 8, 1, "", "show"]], "tkinter.dnd": [[371, 11, 1, "", "DndHandler"], [371, 12, 1, "", "dnd_start"]], "tkinter.dnd.DndHandler": [[371, 8, 1, "", "cancel"], [371, 8, 1, "", "finish"], [371, 8, 1, "", "on_motion"], [371, 8, 1, "", "on_release"]], "tkinter.filedialog": [[189, 11, 1, "", "Directory"], [189, 11, 1, "", "FileDialog"], [189, 11, 1, "", "LoadFileDialog"], [189, 11, 1, "", "Open"], [189, 11, 1, "", "SaveAs"], [189, 11, 1, "", "SaveFileDialog"], [189, 12, 1, "", "askdirectory"], [189, 12, 1, "", "askopenfile"], [189, 12, 1, "", "askopenfilename"], [189, 12, 1, "", "askopenfilenames"], [189, 12, 1, "", "askopenfiles"], [189, 12, 1, "", "asksaveasfile"], [189, 12, 1, "", "asksaveasfilename"]], "tkinter.filedialog.FileDialog": [[189, 8, 1, "", "cancel_command"], [189, 8, 1, "", "dirs_double_event"], [189, 8, 1, "", "dirs_select_event"], [189, 8, 1, "", "files_double_event"], [189, 8, 1, "", "files_select_event"], [189, 8, 1, "", "filter_command"], [189, 8, 1, "", "get_filter"], [189, 8, 1, "", "get_selection"], [189, 8, 1, "", "go"], [189, 8, 1, "", "ok_event"], [189, 8, 1, "", "quit"], [189, 8, 1, "", "set_filter"], [189, 8, 1, "", "set_selection"]], "tkinter.filedialog.LoadFileDialog": [[189, 8, 1, "", "ok_command"]], "tkinter.filedialog.SaveFileDialog": [[189, 8, 1, "", "ok_command"]], "tkinter.font": [[372, 9, 1, "", "BOLD"], [372, 11, 1, "", "Font"], [372, 9, 1, "", "ITALIC"], [372, 9, 1, "", "NORMAL"], [372, 9, 1, "", "ROMAN"], [372, 12, 1, "", "families"], [372, 12, 1, "", "names"], [372, 12, 1, "", "nametofont"]], "tkinter.font.Font": [[372, 8, 1, "", "actual"], [372, 8, 1, "", "cget"], [372, 8, 1, "", "config"], [372, 8, 1, "", "copy"], [372, 8, 1, "", "measure"], [372, 8, 1, "", "metrics"]], "tkinter.messagebox": [[373, 9, 1, "", "ABORT"], [373, 9, 1, "", "ABORTRETRYIGNORE"], [373, 9, 1, "", "CANCEL"], [373, 9, 1, "", "ERROR"], [373, 9, 1, "", "IGNORE"], [373, 9, 1, "", "INFO"], [373, 11, 1, "", "Message"], [373, 9, 1, "", "NO"], [373, 9, 1, "", "OK"], [373, 9, 1, "", "OKCANCEL"], [373, 9, 1, "", "QUESTION"], [373, 9, 1, "", "RETRY"], [373, 9, 1, "", "RETRYCANCEL"], [373, 9, 1, "", "WARNING"], [373, 9, 1, "", "YES"], [373, 9, 1, "", "YESNO"], [373, 9, 1, "", "YESNOCANCEL"], [373, 12, 1, "", "askokcancel"], [373, 12, 1, "", "askquestion"], [373, 12, 1, "", "askretrycancel"], [373, 12, 1, "", "askyesno"], [373, 12, 1, "", "askyesnocancel"], [373, 12, 1, "", "showerror"], [373, 12, 1, "", "showinfo"], [373, 12, 1, "", "showwarning"]], "tkinter.messagebox.Message": [[373, 8, 1, "", "show"]], "tkinter.scrolledtext": [[374, 11, 1, "", "ScrolledText"]], "tkinter.scrolledtext.ScrolledText": [[374, 7, 1, "", "frame"], [374, 7, 1, "", "vbar"]], "tkinter.simpledialog": [[189, 11, 1, "", "Dialog"], [189, 12, 1, "", "askfloat"], [189, 12, 1, "", "askinteger"], [189, 12, 1, "", "askstring"]], "tkinter.simpledialog.Dialog": [[189, 8, 1, "", "body"], [189, 8, 1, "", "buttonbox"]], "tkinter.tix": [[375, 11, 1, "", "Balloon"], [375, 11, 1, "", "ButtonBox"], [375, 11, 1, "", "CheckList"], [375, 11, 1, "", "ComboBox"], [375, 11, 1, "", "Control"], [375, 11, 1, "", "DirList"], [375, 11, 1, "", "DirSelectBox"], [375, 11, 1, "", "DirSelectDialog"], [375, 11, 1, "", "DirTree"], [375, 11, 1, "", "ExFileSelectBox"], [375, 11, 1, "", "FileEntry"], [375, 11, 1, "", "FileSelectBox"], [375, 11, 1, "", "Form"], [375, 11, 1, "", "HList"], [375, 11, 1, "", "InputOnly"], [375, 11, 1, "", "LabelEntry"], [375, 11, 1, "", "LabelFrame"], [375, 11, 1, "", "ListNoteBook"], [375, 11, 1, "", "Meter"], [375, 11, 1, "", "NoteBook"], [375, 11, 1, "", "OptionMenu"], [375, 11, 1, "", "PanedWindow"], [375, 11, 1, "", "PopupMenu"], [375, 11, 1, "", "Select"], [375, 11, 1, "", "StdButtonBox"], [375, 11, 1, "", "TList"], [375, 11, 1, "", "Tk"], [375, 11, 1, "", "Tree"], [375, 11, 1, "", "tixCommand"]], "tkinter.tix.tixCommand": [[375, 8, 1, "", "tix_addbitmapdir"], [375, 8, 1, "", "tix_cget"], [375, 8, 1, "", "tix_configure"], [375, 8, 1, "", "tix_filedialog"], [375, 8, 1, "", "tix_getbitmap"], [375, 8, 1, "", "tix_getimage"], [375, 8, 1, "", "tix_option_get"], [375, 8, 1, "", "tix_resetoptions"]], "tkinter.ttk": [[376, 11, 1, "", "Combobox"], [376, 11, 1, "", "Notebook"], [376, 11, 1, "", "Progressbar"], [376, 11, 1, "", "Spinbox"], [376, 11, 1, "", "Style"], [376, 11, 1, "", "Treeview"], [376, 11, 1, "", "Widget"]], "tkinter.ttk.Combobox": [[376, 8, 1, "", "current"], [376, 8, 1, "", "get"], [376, 8, 1, "", "set"]], "tkinter.ttk.Notebook": [[376, 8, 1, "", "add"], [376, 8, 1, "", "enable_traversal"], [376, 8, 1, "", "forget"], [376, 8, 1, "", "hide"], [376, 8, 1, "", "identify"], [376, 8, 1, "", "index"], [376, 8, 1, "", "insert"], [376, 8, 1, "", "select"], [376, 8, 1, "", "tab"], [376, 8, 1, "", "tabs"]], "tkinter.ttk.Progressbar": [[376, 8, 1, "", "start"], [376, 8, 1, "", "step"], [376, 8, 1, "", "stop"]], "tkinter.ttk.Spinbox": [[376, 8, 1, "", "get"], [376, 8, 1, "", "set"]], "tkinter.ttk.Style": [[376, 8, 1, "", "configure"], [376, 8, 1, "", "element_create"], [376, 8, 1, "", "element_names"], [376, 8, 1, "", "element_options"], [376, 8, 1, "", "layout"], [376, 8, 1, "", "lookup"], [376, 8, 1, "", "map"], [376, 8, 1, "", "theme_create"], [376, 8, 1, "", "theme_names"], [376, 8, 1, "", "theme_settings"], [376, 8, 1, "", "theme_use"]], "tkinter.ttk.Treeview": [[376, 8, 1, "", "bbox"], [376, 8, 1, "", "column"], [376, 8, 1, "", "delete"], [376, 8, 1, "", "detach"], [376, 8, 1, "", "exists"], [376, 8, 1, "", "focus"], [376, 8, 1, "", "get_children"], [376, 8, 1, "", "heading"], [376, 8, 1, "", "identify"], [376, 8, 1, "", "identify_column"], [376, 8, 1, "", "identify_element"], [376, 8, 1, "", "identify_region"], [376, 8, 1, "", "identify_row"], [376, 8, 1, "", "index"], [376, 8, 1, "", "insert"], [376, 8, 1, "", "item"], [376, 8, 1, "", "move"], [376, 8, 1, "", "next"], [376, 8, 1, "", "parent"], [376, 8, 1, "", "prev"], [376, 8, 1, "", "reattach"], [376, 8, 1, "", "see"], [376, 8, 1, "", "selection"], [376, 8, 1, "", "selection_add"], [376, 8, 1, "", "selection_remove"], [376, 8, 1, "", "selection_set"], [376, 8, 1, "", "selection_toggle"], [376, 8, 1, "", "set"], [376, 8, 1, "", "set_children"], [376, 8, 1, "", "tag_bind"], [376, 8, 1, "", "tag_configure"], [376, 8, 1, "", "tag_has"], [376, 8, 1, "", "xview"], [376, 8, 1, "", "yview"]], "tkinter.ttk.Widget": [[376, 8, 1, "", "identify"], [376, 8, 1, "", "instate"], [376, 8, 1, "", "state"]], "token": [[377, 9, 1, "", "AMPER"], [377, 9, 1, "", "AMPEREQUAL"], [377, 9, 1, "", "ASYNC"], [377, 9, 1, "", "AT"], [377, 9, 1, "", "ATEQUAL"], [377, 9, 1, "", "AWAIT"], [377, 9, 1, "", "CIRCUMFLEX"], [377, 9, 1, "", "CIRCUMFLEXEQUAL"], [377, 9, 1, "", "COLON"], [377, 9, 1, "", "COLONEQUAL"], [377, 9, 1, "", "COMMA"], [377, 9, 1, "", "COMMENT"], [377, 9, 1, "", "DEDENT"], [377, 9, 1, "", "DOT"], [377, 9, 1, "", "DOUBLESLASH"], [377, 9, 1, "", "DOUBLESLASHEQUAL"], [377, 9, 1, "", "DOUBLESTAR"], [377, 9, 1, "", "DOUBLESTAREQUAL"], [377, 9, 1, "", "ELLIPSIS"], [377, 9, 1, "", "ENCODING"], [377, 9, 1, "", "ENDMARKER"], [377, 9, 1, "", "EQEQUAL"], [377, 9, 1, "", "EQUAL"], [377, 9, 1, "", "ERRORTOKEN"], [377, 9, 1, "", "EXCLAMATION"], [377, 9, 1, "", "FSTRING_END"], [377, 9, 1, "", "FSTRING_MIDDLE"], [377, 9, 1, "", "FSTRING_START"], [377, 9, 1, "", "GREATER"], [377, 9, 1, "", "GREATEREQUAL"], [377, 9, 1, "", "INDENT"], [377, 12, 1, "", "ISEOF"], [377, 12, 1, "", "ISNONTERMINAL"], [377, 12, 1, "", "ISTERMINAL"], [377, 9, 1, "", "LBRACE"], [377, 9, 1, "", "LEFTSHIFT"], [377, 9, 1, "", "LEFTSHIFTEQUAL"], [377, 9, 1, "", "LESS"], [377, 9, 1, "", "LESSEQUAL"], [377, 9, 1, "", "LPAR"], [377, 9, 1, "", "LSQB"], [377, 9, 1, "", "MINEQUAL"], [377, 9, 1, "", "MINUS"], [377, 9, 1, "", "NAME"], [377, 9, 1, "", "NEWLINE"], [377, 9, 1, "", "NL"], [377, 9, 1, "", "NOTEQUAL"], [377, 9, 1, "", "NT_OFFSET"], [377, 9, 1, "", "NUMBER"], [377, 9, 1, "", "N_TOKENS"], [377, 9, 1, "", "OP"], [377, 9, 1, "", "PERCENT"], [377, 9, 1, "", "PERCENTEQUAL"], [377, 9, 1, "", "PLUS"], [377, 9, 1, "", "PLUSEQUAL"], [377, 9, 1, "", "RARROW"], [377, 9, 1, "", "RBRACE"], [377, 9, 1, "", "RIGHTSHIFT"], [377, 9, 1, "", "RIGHTSHIFTEQUAL"], [377, 9, 1, "", "RPAR"], [377, 9, 1, "", "RSQB"], [377, 9, 1, "", "SEMI"], [377, 9, 1, "", "SLASH"], [377, 9, 1, "", "SLASHEQUAL"], [377, 9, 1, "", "SOFT_KEYWORD"], [377, 9, 1, "", "STAR"], [377, 9, 1, "", "STAREQUAL"], [377, 9, 1, "", "STRING"], [377, 9, 1, "", "TILDE"], [377, 9, 1, "", "TYPE_COMMENT"], [377, 9, 1, "", "TYPE_IGNORE"], [377, 9, 1, "", "VBAR"], [377, 9, 1, "", "VBAREQUAL"], [377, 9, 1, "", "tok_name"]], "tokenize": [[378, 6, 1, "", "TokenError"], [378, 12, 1, "", "detect_encoding"], [378, 12, 1, "", "generate_tokens"], [378, 12, 1, "", "open"], [378, 12, 1, "", "tokenize"], [378, 12, 1, "", "untokenize"], [378, 14, 1, "cmdoption-tokenize-e", "--exact"], [378, 14, 1, "cmdoption-tokenize-h", "--help"], [378, 14, 1, "cmdoption-tokenize-e", "-e"], [378, 14, 1, "cmdoption-tokenize-h", "-h"]], "tomllib": [[379, 6, 1, "", "TOMLDecodeError"], [379, 12, 1, "", "load"], [379, 12, 1, "", "loads"]], "trace": [[380, 11, 1, "", "CoverageResults"], [380, 11, 1, "", "Trace"], [380, 14, 1, "cmdoption-trace-c", "--count"], [380, 14, 1, "cmdoption-trace-C", "--coverdir"], [380, 14, 1, "cmdoption-trace-f", "--file"], [380, 14, 1, "cmdoption-trace-help", "--help"], [380, 14, 1, "cmdoption-trace-ignore-dir", "--ignore-dir"], [380, 14, 1, "cmdoption-trace-ignore-module", "--ignore-module"], [380, 14, 1, "cmdoption-trace-l", "--listfuncs"], [380, 14, 1, "cmdoption-trace-m", "--missing"], [380, 14, 1, "cmdoption-trace-R", "--no-report"], [380, 14, 1, "cmdoption-trace-r", "--report"], [380, 14, 1, "cmdoption-trace-s", "--summary"], [380, 14, 1, "cmdoption-trace-g", "--timing"], [380, 14, 1, "cmdoption-trace-t", "--trace"], [380, 14, 1, "cmdoption-trace-T", "--trackcalls"], [380, 14, 1, "cmdoption-trace-version", "--version"], [380, 14, 1, "cmdoption-trace-C", "-C"], [380, 14, 1, "cmdoption-trace-R", "-R"], [380, 14, 1, "cmdoption-trace-T", "-T"], [380, 14, 1, "cmdoption-trace-c", "-c"], [380, 14, 1, "cmdoption-trace-f", "-f"], [380, 14, 1, "cmdoption-trace-g", "-g"], [380, 14, 1, "cmdoption-trace-l", "-l"], [380, 14, 1, "cmdoption-trace-m", "-m"], [380, 14, 1, "cmdoption-trace-r", "-r"], [380, 14, 1, "cmdoption-trace-s", "-s"], [380, 14, 1, "cmdoption-trace-t", "-t"]], "trace.CoverageResults": [[380, 8, 1, "", "update"], [380, 8, 1, "", "write_results"]], "trace.Trace": [[380, 8, 1, "", "results"], [380, 8, 1, "", "run"], [380, 8, 1, "", "runctx"], [380, 8, 1, "", "runfunc"]], "traceback": [[381, 11, 1, "", "FrameSummary"], [381, 11, 1, "", "StackSummary"], [381, 11, 1, "", "TracebackException"], [381, 12, 1, "", "clear_frames"], [381, 12, 1, "", "extract_stack"], [381, 12, 1, "", "extract_tb"], [381, 12, 1, "", "format_exc"], [381, 12, 1, "", "format_exception"], [381, 12, 1, "", "format_exception_only"], [381, 12, 1, "", "format_list"], [381, 12, 1, "", "format_stack"], [381, 12, 1, "", "format_tb"], [381, 12, 1, "", "print_exc"], [381, 12, 1, "", "print_exception"], [381, 12, 1, "", "print_last"], [381, 12, 1, "", "print_stack"], [381, 12, 1, "", "print_tb"], [428, 7, 1, "", "tb_frame"], [428, 7, 1, "", "tb_lasti"], [428, 7, 1, "", "tb_lineno"], [428, 7, 1, "", "tb_next"], [381, 12, 1, "", "walk_stack"], [381, 12, 1, "", "walk_tb"]], "traceback.FrameSummary": [[381, 7, 1, "", "filename"], [381, 7, 1, "", "line"], [381, 7, 1, "", "lineno"], [381, 7, 1, "", "name"]], "traceback.StackSummary": [[381, 8, 1, "", "extract"], [381, 8, 1, "", "format"], [381, 8, 1, "", "format_frame_summary"], [381, 8, 1, "", "from_list"]], "traceback.TracebackException": [[381, 7, 1, "", "__cause__"], [381, 7, 1, "", "__context__"], [381, 7, 1, "", "__notes__"], [381, 7, 1, "", "__suppress_context__"], [381, 7, 1, "", "end_lineno"], [381, 7, 1, "", "end_offset"], [381, 7, 1, "", "exc_type"], [381, 7, 1, "", "exceptions"], [381, 7, 1, "", "filename"], [381, 8, 1, "", "format"], [381, 8, 1, "", "format_exception_only"], [381, 8, 1, "", "from_exception"], [381, 7, 1, "", "lineno"], [381, 7, 1, "", "msg"], [381, 7, 1, "", "offset"], [381, 8, 1, "", "print"], [381, 7, 1, "", "stack"], [381, 7, 1, "", "text"]], "tracemalloc": [[382, 11, 1, "", "DomainFilter"], [382, 11, 1, "", "Filter"], [382, 11, 1, "", "Frame"], [382, 11, 1, "", "Snapshot"], [382, 11, 1, "", "Statistic"], [382, 11, 1, "", "StatisticDiff"], [382, 11, 1, "", "Trace"], [382, 11, 1, "", "Traceback"], [382, 12, 1, "", "clear_traces"], [382, 12, 1, "", "get_object_traceback"], [382, 12, 1, "", "get_traceback_limit"], [382, 12, 1, "", "get_traced_memory"], [382, 12, 1, "", "get_tracemalloc_memory"], [382, 12, 1, "", "is_tracing"], [382, 12, 1, "", "reset_peak"], [382, 12, 1, "", "start"], [382, 12, 1, "", "stop"], [382, 12, 1, "", "take_snapshot"]], "tracemalloc.DomainFilter": [[382, 7, 1, "", "domain"], [382, 7, 1, "", "inclusive"]], "tracemalloc.Filter": [[382, 7, 1, "", "all_frames"], [382, 7, 1, "", "domain"], [382, 7, 1, "", "filename_pattern"], [382, 7, 1, "", "inclusive"], [382, 7, 1, "", "lineno"]], "tracemalloc.Frame": [[382, 7, 1, "", "filename"], [382, 7, 1, "", "lineno"]], "tracemalloc.Snapshot": [[382, 8, 1, "", "compare_to"], [382, 8, 1, "", "dump"], [382, 8, 1, "", "filter_traces"], [382, 8, 1, "", "load"], [382, 8, 1, "", "statistics"], [382, 7, 1, "", "traceback_limit"], [382, 7, 1, "", "traces"]], "tracemalloc.Statistic": [[382, 7, 1, "", "count"], [382, 7, 1, "", "size"], [382, 7, 1, "", "traceback"]], "tracemalloc.StatisticDiff": [[382, 7, 1, "", "count"], [382, 7, 1, "", "count_diff"], [382, 7, 1, "", "size"], [382, 7, 1, "", "size_diff"], [382, 7, 1, "", "traceback"]], "tracemalloc.Trace": [[382, 7, 1, "", "domain"], [382, 7, 1, "", "size"], [382, 7, 1, "", "traceback"]], "tracemalloc.Traceback": [[382, 8, 1, "", "format"], [382, 7, 1, "", "total_nframe"]], "tty": [[383, 12, 1, "", "cfmakecbreak"], [383, 12, 1, "", "cfmakeraw"], [383, 12, 1, "", "setcbreak"], [383, 12, 1, "", "setraw"]], "turtle": [[384, 11, 1, "", "RawPen"], [384, 11, 1, "", "RawTurtle"], [384, 11, 1, "", "Screen"], [384, 11, 1, "", "ScrolledCanvas"], [384, 11, 1, "", "Shape"], [384, 11, 1, "", "Turtle"], [384, 11, 1, "", "TurtleScreen"], [384, 11, 1, "", "Vec2D"], [384, 12, 1, "", "addshape"], [384, 12, 1, "", "back"], [384, 12, 1, "", "backward"], [384, 12, 1, "", "begin_fill"], [384, 12, 1, "", "begin_poly"], [384, 12, 1, "", "bgcolor"], [384, 12, 1, "", "bgpic"], [384, 12, 1, "", "bk"], [384, 12, 1, "", "bye"], [384, 12, 1, "", "circle"], [384, 12, 1, "", "clear"], [384, 12, 1, "", "clearscreen"], [384, 12, 1, "", "clearstamp"], [384, 12, 1, "", "clearstamps"], [384, 12, 1, "", "clone"], [384, 12, 1, "", "color"], [384, 12, 1, "", "colormode"], [384, 12, 1, "", "degrees"], [384, 12, 1, "", "delay"], [384, 12, 1, "", "distance"], [384, 12, 1, "", "done"], [384, 12, 1, "", "dot"], [384, 12, 1, "", "down"], [384, 12, 1, "", "end_fill"], [384, 12, 1, "", "end_poly"], [384, 12, 1, "", "exitonclick"], [384, 12, 1, "", "fd"], [384, 12, 1, "", "fillcolor"], [384, 12, 1, "", "filling"], [384, 12, 1, "", "forward"], [384, 12, 1, "", "get_poly"], [384, 12, 1, "", "get_shapepoly"], [384, 12, 1, "", "getcanvas"], [384, 12, 1, "", "getpen"], [384, 12, 1, "", "getscreen"], [384, 12, 1, "", "getshapes"], [384, 12, 1, "", "getturtle"], [384, 12, 1, "", "goto"], [384, 12, 1, "", "heading"], [384, 12, 1, "", "hideturtle"], [384, 12, 1, "", "home"], [384, 12, 1, "", "ht"], [384, 12, 1, "", "isdown"], [384, 12, 1, "", "isvisible"], [384, 12, 1, "", "left"], [384, 12, 1, "", "listen"], [384, 12, 1, "", "lt"], [384, 12, 1, "", "mainloop"], [384, 12, 1, "", "mode"], [384, 12, 1, "", "numinput"], [384, 12, 1, "", "onclick"], [384, 12, 1, "", "ondrag"], [384, 12, 1, "", "onkey"], [384, 12, 1, "", "onkeypress"], [384, 12, 1, "", "onkeyrelease"], [384, 12, 1, "", "onrelease"], [384, 12, 1, "", "onscreenclick"], [384, 12, 1, "", "ontimer"], [384, 12, 1, "", "pd"], [384, 12, 1, "", "pen"], [384, 12, 1, "", "pencolor"], [384, 12, 1, "", "pendown"], [384, 12, 1, "", "pensize"], [384, 12, 1, "", "penup"], [384, 12, 1, "", "pos"], [384, 12, 1, "", "position"], [384, 12, 1, "", "pu"], [384, 12, 1, "", "radians"], [384, 12, 1, "", "register_shape"], [384, 12, 1, "", "reset"], [384, 12, 1, "", "resetscreen"], [384, 12, 1, "", "resizemode"], [384, 12, 1, "", "right"], [384, 12, 1, "", "rt"], [384, 12, 1, "", "screensize"], [384, 12, 1, "", "seth"], [384, 12, 1, "", "setheading"], [384, 12, 1, "", "setpos"], [384, 12, 1, "", "setposition"], [384, 12, 1, "", "settiltangle"], [384, 12, 1, "", "setundobuffer"], [384, 12, 1, "", "setup"], [384, 12, 1, "", "setworldcoordinates"], [384, 12, 1, "", "setx"], [384, 12, 1, "", "sety"], [384, 12, 1, "", "shape"], [384, 12, 1, "", "shapesize"], [384, 12, 1, "", "shapetransform"], [384, 12, 1, "", "shearfactor"], [384, 12, 1, "", "showturtle"], [384, 12, 1, "", "speed"], [384, 12, 1, "", "st"], [384, 12, 1, "", "stamp"], [384, 12, 1, "", "teleport"], [384, 12, 1, "", "textinput"], [384, 12, 1, "", "tilt"], [384, 12, 1, "", "tiltangle"], [384, 12, 1, "", "title"], [384, 12, 1, "", "towards"], [384, 12, 1, "", "tracer"], [384, 12, 1, "", "turtles"], [384, 12, 1, "", "turtlesize"], [384, 12, 1, "", "undo"], [384, 12, 1, "", "undobufferentries"], [384, 12, 1, "", "up"], [384, 12, 1, "", "update"], [384, 12, 1, "", "width"], [384, 12, 1, "", "window_height"], [384, 12, 1, "", "window_width"], [384, 12, 1, "", "write"], [384, 12, 1, "", "write_docstringdict"], [384, 12, 1, "", "xcor"], [384, 12, 1, "", "ycor"]], "turtle.Shape": [[384, 8, 1, "", "addcomponent"]], "types": [[385, 9, 1, "", "AsyncGeneratorType"], [385, 9, 1, "", "BuiltinFunctionType"], [385, 9, 1, "", "BuiltinMethodType"], [385, 9, 1, "", "CellType"], [385, 9, 1, "", "ClassMethodDescriptorType"], [385, 11, 1, "", "CodeType"], [385, 9, 1, "", "CoroutineType"], [385, 12, 1, "", "DynamicClassAttribute"], [385, 9, 1, "", "EllipsisType"], [385, 9, 1, "", "FrameType"], [385, 9, 1, "", "FunctionType"], [385, 9, 1, "", "GeneratorType"], [385, 11, 1, "", "GenericAlias"], [385, 9, 1, "", "GetSetDescriptorType"], [385, 9, 1, "", "LambdaType"], [385, 11, 1, "", "MappingProxyType"], [385, 9, 1, "", "MemberDescriptorType"], [385, 9, 1, "", "MethodDescriptorType"], [385, 9, 1, "", "MethodType"], [385, 9, 1, "", "MethodWrapperType"], [385, 11, 1, "", "ModuleType"], [385, 9, 1, "", "NoneType"], [385, 9, 1, "", "NotImplementedType"], [385, 11, 1, "", "SimpleNamespace"], [385, 11, 1, "", "TracebackType"], [385, 11, 1, "", "UnionType"], [385, 9, 1, "", "WrapperDescriptorType"], [385, 12, 1, "", "coroutine"], [385, 12, 1, "", "get_original_bases"], [385, 12, 1, "", "new_class"], [385, 12, 1, "", "prepare_class"], [385, 12, 1, "", "resolve_bases"]], "types.MappingProxyType": [[385, 8, 1, "", "copy"], [385, 8, 1, "", "get"], [385, 8, 1, "", "items"], [385, 8, 1, "", "keys"], [385, 8, 1, "", "values"]], "types.ModuleType": [[385, 7, 1, "", "__doc__"], [385, 7, 1, "", "__loader__"], [385, 7, 1, "", "__name__"], [385, 7, 1, "", "__package__"], [385, 7, 1, "", "__spec__"]], "typing": [[386, 11, 1, "", "AbstractSet"], [386, 9, 1, "", "Annotated"], [386, 9, 1, "", "Any"], [386, 9, 1, "", "AnyStr"], [386, 11, 1, "", "AsyncContextManager"], [386, 11, 1, "", "AsyncGenerator"], [386, 11, 1, "", "AsyncIterable"], [386, 11, 1, "", "AsyncIterator"], [386, 11, 1, "", "Awaitable"], [386, 11, 1, "", "BinaryIO"], [386, 11, 1, "", "ByteString"], [386, 9, 1, "", "Callable"], [386, 11, 1, "", "ChainMap"], [386, 9, 1, "", "ClassVar"], [386, 11, 1, "", "Collection"], [386, 9, 1, "", "Concatenate"], [386, 11, 1, "", "Container"], [386, 11, 1, "", "ContextManager"], [386, 11, 1, "", "Coroutine"], [386, 11, 1, "", "Counter"], [386, 11, 1, "", "DefaultDict"], [386, 11, 1, "", "Deque"], [386, 11, 1, "", "Dict"], [386, 9, 1, "", "Final"], [386, 11, 1, "", "ForwardRef"], [386, 11, 1, "", "FrozenSet"], [386, 11, 1, "", "Generator"], [386, 11, 1, "", "Generic"], [386, 11, 1, "", "Hashable"], [386, 11, 1, "", "IO"], [386, 11, 1, "", "ItemsView"], [386, 11, 1, "", "Iterable"], [386, 11, 1, "", "Iterator"], [386, 11, 1, "", "KeysView"], [386, 11, 1, "", "List"], [386, 9, 1, "", "Literal"], [386, 9, 1, "", "LiteralString"], [386, 11, 1, "", "Mapping"], [386, 11, 1, "", "MappingView"], [386, 11, 1, "", "Match"], [386, 11, 1, "", "MutableMapping"], [386, 11, 1, "", "MutableSequence"], [386, 11, 1, "", "MutableSet"], [386, 11, 1, "", "NamedTuple"], [386, 9, 1, "", "Never"], [386, 11, 1, "", "NewType"], [386, 9, 1, "", "NoReturn"], [386, 9, 1, "", "NotRequired"], [386, 9, 1, "", "Optional"], [386, 11, 1, "", "OrderedDict"], [386, 11, 1, "", "ParamSpec"], [386, 9, 1, "", "ParamSpecArgs"], [386, 9, 1, "", "ParamSpecKwargs"], [386, 11, 1, "", "Pattern"], [386, 11, 1, "", "Protocol"], [386, 9, 1, "", "Required"], [386, 11, 1, "", "Reversible"], [386, 9, 1, "", "Self"], [386, 11, 1, "", "Sequence"], [386, 11, 1, "", "Set"], [386, 11, 1, "", "Sized"], [386, 11, 1, "", "SupportsAbs"], [386, 11, 1, "", "SupportsBytes"], [386, 11, 1, "", "SupportsComplex"], [386, 11, 1, "", "SupportsFloat"], [386, 11, 1, "", "SupportsIndex"], [386, 11, 1, "", "SupportsInt"], [386, 11, 1, "", "SupportsRound"], [386, 9, 1, "", "TYPE_CHECKING"], [386, 11, 1, "", "Text"], [386, 11, 1, "", "TextIO"], [386, 9, 1, "", "Tuple"], [386, 11, 1, "", "Type"], [386, 9, 1, "", "TypeAlias"], [386, 11, 1, "", "TypeAliasType"], [386, 9, 1, "", "TypeGuard"], [386, 11, 1, "", "TypeVar"], [386, 11, 1, "", "TypeVarTuple"], [386, 11, 1, "", "TypedDict"], [386, 9, 1, "", "Union"], [386, 9, 1, "", "Unpack"], [386, 11, 1, "", "ValuesView"], [386, 12, 1, "", "assert_never"], [386, 12, 1, "", "assert_type"], [386, 12, 1, "", "cast"], [386, 12, 1, "", "clear_overloads"], [386, 12, 1, "", "dataclass_transform"], [386, 12, 1, "", "final"], [386, 12, 1, "", "get_args"], [386, 12, 1, "", "get_origin"], [386, 12, 1, "", "get_overloads"], [386, 12, 1, "", "get_type_hints"], [386, 12, 1, "", "is_typeddict"], [386, 12, 1, "", "no_type_check"], [386, 12, 1, "", "no_type_check_decorator"], [386, 12, 1, "", "overload"], [386, 12, 1, "", "override"], [386, 12, 1, "", "reveal_type"], [386, 12, 1, "", "runtime_checkable"], [386, 12, 1, "", "type_check_only"]], "typing.NewType": [[386, 7, 1, "", "__module__"], [386, 7, 1, "", "__name__"], [386, 7, 1, "", "__supertype__"]], "typing.ParamSpec": [[386, 7, 1, "", "__name__"], [386, 7, 1, "", "args"], [386, 7, 1, "", "kwargs"]], "typing.TypeAliasType": [[386, 7, 1, "", "__module__"], [386, 7, 1, "", "__name__"], [386, 7, 1, "", "__type_params__"], [386, 7, 1, "", "__value__"]], "typing.TypeVar": [[386, 7, 1, "", "__bound__"], [386, 7, 1, "", "__constraints__"], [386, 7, 1, "", "__contravariant__"], [386, 7, 1, "", "__covariant__"], [386, 7, 1, "", "__infer_variance__"], [386, 7, 1, "", "__name__"]], "typing.TypeVarTuple": [[386, 7, 1, "", "__name__"]], "typing.TypedDict": [[386, 7, 1, "", "__optional_keys__"], [386, 7, 1, "", "__required_keys__"], [386, 7, 1, "", "__total__"]], "unicodedata": [[387, 12, 1, "", "bidirectional"], [387, 12, 1, "", "category"], [387, 12, 1, "", "combining"], [387, 12, 1, "", "decimal"], [387, 12, 1, "", "decomposition"], [387, 12, 1, "", "digit"], [387, 12, 1, "", "east_asian_width"], [387, 12, 1, "", "is_normalized"], [387, 12, 1, "", "lookup"], [387, 12, 1, "", "mirrored"], [387, 12, 1, "", "name"], [387, 12, 1, "", "normalize"], [387, 12, 1, "", "numeric"], [387, 9, 1, "", "ucd_3_2_0"], [387, 9, 1, "", "unidata_version"]], "unittest": [[388, 11, 1, "", "FunctionTestCase"], [388, 11, 1, "", "IsolatedAsyncioTestCase"], [388, 6, 1, "", "SkipTest"], [388, 11, 1, "", "TestCase"], [388, 11, 1, "", "TestLoader"], [388, 11, 1, "", "TestResult"], [388, 11, 1, "", "TestSuite"], [388, 11, 1, "", "TextTestResult"], [388, 11, 1, "", "TextTestRunner"], [388, 12, 1, "", "addModuleCleanup"], [388, 9, 1, "", "defaultTestLoader"], [388, 12, 1, "", "doModuleCleanups"], [388, 8, 1, "", "enterModuleContext"], [388, 12, 1, "", "expectedFailure"], [388, 12, 1, "", "installHandler"], [388, 12, 1, "", "main"], [389, 10, 0, "-", "mock"], [388, 12, 1, "", "registerResult"], [388, 12, 1, "", "removeHandler"], [388, 12, 1, "", "removeResult"], [388, 12, 1, "", "skip"], [388, 12, 1, "", "skipIf"], [388, 12, 1, "", "skipUnless"], [388, 14, 1, "cmdoption-unittest-b", "--buffer"], [388, 14, 1, "cmdoption-unittest-c", "--catch"], [388, 14, 1, "cmdoption-unittest-durations", "--durations"], [388, 14, 1, "cmdoption-unittest-f", "--failfast"], [388, 14, 1, "cmdoption-unittest-locals", "--locals"], [388, 14, 1, "cmdoption-unittest-b", "-b"], [388, 14, 1, "cmdoption-unittest-c", "-c"], [388, 14, 1, "cmdoption-unittest-f", "-f"], [388, 14, 1, "cmdoption-unittest-k", "-k"]], "unittest.IsolatedAsyncioTestCase": [[388, 8, 1, "", "addAsyncCleanup"], [388, 8, 1, "", "asyncSetUp"], [388, 8, 1, "", "asyncTearDown"], [388, 8, 1, "", "enterAsyncContext"], [388, 8, 1, "", "run"]], "unittest.TestCase": [[388, 8, 1, "", "addClassCleanup"], [388, 8, 1, "", "addCleanup"], [388, 8, 1, "", "addTypeEqualityFunc"], [388, 8, 1, "", "assertAlmostEqual"], [388, 8, 1, "", "assertCountEqual"], [388, 8, 1, "", "assertDictEqual"], [388, 8, 1, "", "assertEqual"], [388, 8, 1, "", "assertFalse"], [388, 8, 1, "", "assertGreater"], [388, 8, 1, "", "assertGreaterEqual"], [388, 8, 1, "", "assertIn"], [388, 8, 1, "", "assertIs"], [388, 8, 1, "", "assertIsInstance"], [388, 8, 1, "", "assertIsNone"], [388, 8, 1, "", "assertIsNot"], [388, 8, 1, "", "assertIsNotNone"], [388, 8, 1, "", "assertLess"], [388, 8, 1, "", "assertLessEqual"], [388, 8, 1, "", "assertListEqual"], [388, 8, 1, "", "assertLogs"], [388, 8, 1, "", "assertMultiLineEqual"], [388, 8, 1, "", "assertNoLogs"], [388, 8, 1, "", "assertNotAlmostEqual"], [388, 8, 1, "", "assertNotEqual"], [388, 8, 1, "", "assertNotIn"], [388, 8, 1, "", "assertNotIsInstance"], [388, 8, 1, "", "assertNotRegex"], [388, 8, 1, "", "assertRaises"], [388, 8, 1, "", "assertRaisesRegex"], [388, 8, 1, "", "assertRegex"], [388, 8, 1, "", "assertSequenceEqual"], [388, 8, 1, "", "assertSetEqual"], [388, 8, 1, "", "assertTrue"], [388, 8, 1, "", "assertTupleEqual"], [388, 8, 1, "", "assertWarns"], [388, 8, 1, "", "assertWarnsRegex"], [388, 8, 1, "", "countTestCases"], [388, 8, 1, "", "debug"], [388, 8, 1, "", "defaultTestResult"], [388, 8, 1, "", "doClassCleanups"], [388, 8, 1, "", "doCleanups"], [388, 8, 1, "", "enterClassContext"], [388, 8, 1, "", "enterContext"], [388, 8, 1, "", "fail"], [388, 7, 1, "", "failureException"], [388, 8, 1, "", "id"], [388, 7, 1, "", "longMessage"], [388, 7, 1, "", "maxDiff"], [388, 7, 1, "", "output"], [388, 7, 1, "", "records"], [388, 8, 1, "", "run"], [388, 8, 1, "", "setUp"], [388, 8, 1, "", "setUpClass"], [388, 8, 1, "", "shortDescription"], [388, 8, 1, "", "skipTest"], [388, 8, 1, "", "subTest"], [388, 8, 1, "", "tearDown"], [388, 8, 1, "", "tearDownClass"]], "unittest.TestLoader": [[388, 8, 1, "", "discover"], [388, 7, 1, "", "errors"], [388, 8, 1, "", "getTestCaseNames"], [388, 8, 1, "", "loadTestsFromModule"], [388, 8, 1, "", "loadTestsFromName"], [388, 8, 1, "", "loadTestsFromNames"], [388, 8, 1, "", "loadTestsFromTestCase"], [388, 7, 1, "", "sortTestMethodsUsing"], [388, 7, 1, "", "suiteClass"], [388, 7, 1, "", "testMethodPrefix"], [388, 7, 1, "", "testNamePatterns"]], "unittest.TestResult": [[388, 8, 1, "", "addDuration"], [388, 8, 1, "", "addError"], [388, 8, 1, "", "addExpectedFailure"], [388, 8, 1, "", "addFailure"], [388, 8, 1, "", "addSkip"], [388, 8, 1, "", "addSubTest"], [388, 8, 1, "", "addSuccess"], [388, 8, 1, "", "addUnexpectedSuccess"], [388, 7, 1, "", "buffer"], [388, 7, 1, "", "collectedDurations"], [388, 7, 1, "", "errors"], [388, 7, 1, "", "expectedFailures"], [388, 7, 1, "", "failfast"], [388, 7, 1, "", "failures"], [388, 7, 1, "", "shouldStop"], [388, 7, 1, "", "skipped"], [388, 8, 1, "", "startTest"], [388, 8, 1, "", "startTestRun"], [388, 8, 1, "", "stop"], [388, 8, 1, "", "stopTest"], [388, 8, 1, "", "stopTestRun"], [388, 7, 1, "", "tb_locals"], [388, 7, 1, "", "testsRun"], [388, 7, 1, "", "unexpectedSuccesses"], [388, 8, 1, "", "wasSuccessful"]], "unittest.TestSuite": [[388, 8, 1, "", "__iter__"], [388, 8, 1, "", "addTest"], [388, 8, 1, "", "addTests"], [388, 8, 1, "", "countTestCases"], [388, 8, 1, "", "debug"], [388, 8, 1, "", "run"]], "unittest.TextTestRunner": [[388, 8, 1, "", "_makeResult"], [388, 8, 1, "", "run"]], "unittest.mock": [[389, 9, 1, "", "ANY"], [389, 11, 1, "", "AsyncMock"], [389, 9, 1, "", "DEFAULT"], [389, 9, 1, "", "FILTER_DIR"], [389, 11, 1, "", "MagicMock"], [389, 11, 1, "", "Mock"], [389, 11, 1, "", "NonCallableMagicMock"], [389, 11, 1, "", "NonCallableMock"], [389, 11, 1, "", "PropertyMock"], [389, 12, 1, "", "call"], [389, 12, 1, "", "create_autospec"], [389, 12, 1, "", "mock_open"], [389, 12, 1, "", "patch"], [389, 12, 1, "", "seal"], [389, 9, 1, "", "sentinel"]], "unittest.mock.AsyncMock": [[389, 8, 1, "", "assert_any_await"], [389, 8, 1, "", "assert_awaited"], [389, 8, 1, "", "assert_awaited_once"], [389, 8, 1, "", "assert_awaited_once_with"], [389, 8, 1, "", "assert_awaited_with"], [389, 8, 1, "", "assert_has_awaits"], [389, 8, 1, "", "assert_not_awaited"], [389, 7, 1, "", "await_args"], [389, 7, 1, "", "await_args_list"], [389, 7, 1, "", "await_count"], [389, 8, 1, "", "reset_mock"]], "unittest.mock.Mock": [[389, 7, 1, "", "__class__"], [389, 8, 1, "", "__dir__"], [389, 8, 1, "", "_get_child_mock"], [389, 8, 1, "", "assert_any_call"], [389, 8, 1, "", "assert_called"], [389, 8, 1, "", "assert_called_once"], [389, 8, 1, "", "assert_called_once_with"], [389, 8, 1, "", "assert_called_with"], [389, 8, 1, "", "assert_has_calls"], [389, 8, 1, "", "assert_not_called"], [389, 8, 1, "", "attach_mock"], [389, 7, 1, "", "call_args"], [389, 7, 1, "", "call_args_list"], [389, 7, 1, "", "call_count"], [389, 7, 1, "", "called"], [389, 8, 1, "", "configure_mock"], [389, 7, 1, "", "method_calls"], [389, 8, 1, "", "mock_add_spec"], [389, 7, 1, "", "mock_calls"], [389, 8, 1, "", "reset_mock"], [389, 7, 1, "", "return_value"], [389, 7, 1, "", "side_effect"]], "unittest.mock.call": [[389, 8, 1, "", "call_list"]], "unittest.mock.patch": [[389, 12, 1, "", "dict"], [389, 12, 1, "", "multiple"], [389, 12, 1, "", "object"], [389, 12, 1, "", "stopall"]], "urllib": [[393, 10, 0, "-", "error"], [394, 10, 0, "-", "parse"], [395, 10, 0, "-", "request"], [395, 10, 0, "-", "response"], [396, 10, 0, "-", "robotparser"]], "urllib.error": [[393, 6, 1, "", "ContentTooShortError"], [393, 6, 1, "", "HTTPError"], [393, 6, 1, "", "URLError"]], "urllib.error.ContentTooShortError": [[393, 7, 1, "", "content"]], "urllib.error.HTTPError": [[393, 7, 1, "", "code"], [393, 7, 1, "", "fp"], [393, 7, 1, "", "headers"], [393, 7, 1, "", "reason"], [393, 7, 1, "", "url"]], "urllib.error.URLError": [[393, 7, 1, "", "reason"]], "urllib.parse": [[394, 11, 1, "", "DefragResult"], [394, 11, 1, "", "DefragResultBytes"], [394, 11, 1, "", "ParseResult"], [394, 11, 1, "", "ParseResultBytes"], [394, 11, 1, "", "SplitResult"], [394, 11, 1, "", "SplitResultBytes"], [394, 12, 1, "", "parse_qs"], [394, 12, 1, "", "parse_qsl"], [394, 12, 1, "", "quote"], [394, 12, 1, "", "quote_from_bytes"], [394, 12, 1, "", "quote_plus"], [394, 12, 1, "", "unquote"], [394, 12, 1, "", "unquote_plus"], [394, 12, 1, "", "unquote_to_bytes"], [394, 12, 1, "", "unwrap"], [394, 12, 1, "", "urldefrag"], [394, 12, 1, "", "urlencode"], [394, 12, 1, "", "urljoin"], [394, 12, 1, "", "urlparse"], [394, 12, 1, "", "urlsplit"], [394, 12, 1, "", "urlunparse"], [394, 12, 1, "", "urlunsplit"]], "urllib.parse.urllib.parse.SplitResult": [[394, 8, 1, "", "geturl"]], "urllib.request": [[395, 11, 1, "", "AbstractBasicAuthHandler"], [395, 11, 1, "", "AbstractDigestAuthHandler"], [395, 11, 1, "", "BaseHandler"], [395, 11, 1, "", "CacheFTPHandler"], [395, 11, 1, "", "DataHandler"], [395, 11, 1, "", "FTPHandler"], [395, 11, 1, "", "FancyURLopener"], [395, 11, 1, "", "FileHandler"], [395, 11, 1, "", "HTTPBasicAuthHandler"], [395, 11, 1, "", "HTTPCookieProcessor"], [395, 11, 1, "", "HTTPDefaultErrorHandler"], [395, 11, 1, "", "HTTPDigestAuthHandler"], [395, 11, 1, "", "HTTPErrorProcessor"], [395, 11, 1, "", "HTTPHandler"], [395, 11, 1, "", "HTTPPasswordMgr"], [395, 11, 1, "", "HTTPPasswordMgrWithDefaultRealm"], [395, 11, 1, "", "HTTPPasswordMgrWithPriorAuth"], [395, 11, 1, "", "HTTPRedirectHandler"], [395, 11, 1, "", "HTTPSHandler"], [395, 11, 1, "", "OpenerDirector"], [395, 11, 1, "", "ProxyBasicAuthHandler"], [395, 11, 1, "", "ProxyDigestAuthHandler"], [395, 11, 1, "", "ProxyHandler"], [395, 11, 1, "", "Request"], [395, 11, 1, "", "URLopener"], [395, 11, 1, "", "UnknownHandler"], [395, 12, 1, "", "build_opener"], [395, 12, 1, "", "getproxies"], [395, 12, 1, "", "install_opener"], [395, 12, 1, "", "pathname2url"], [395, 12, 1, "", "url2pathname"], [395, 12, 1, "", "urlcleanup"], [395, 12, 1, "", "urlopen"], [395, 12, 1, "", "urlretrieve"]], "urllib.request.AbstractBasicAuthHandler": [[395, 8, 1, "", "http_error_auth_reqed"]], "urllib.request.AbstractDigestAuthHandler": [[395, 8, 1, "", "http_error_auth_reqed"]], "urllib.request.BaseHandler": [[395, 8, 1, "", "add_parent"], [395, 8, 1, "", "close"], [395, 8, 1, "", "default_open"], [395, 8, 1, "", "http_error_default"], [395, 7, 1, "", "parent"], [395, 8, 1, "", "unknown_open"]], "urllib.request.CacheFTPHandler": [[395, 8, 1, "", "setMaxConns"], [395, 8, 1, "", "setTimeout"]], "urllib.request.DataHandler": [[395, 8, 1, "", "data_open"]], "urllib.request.FTPHandler": [[395, 8, 1, "", "ftp_open"]], "urllib.request.FancyURLopener": [[395, 8, 1, "", "prompt_user_passwd"]], "urllib.request.FileHandler": [[395, 8, 1, "", "file_open"]], "urllib.request.HTTPBasicAuthHandler": [[395, 8, 1, "", "http_error_401"]], "urllib.request.HTTPCookieProcessor": [[395, 7, 1, "", "cookiejar"]], "urllib.request.HTTPDigestAuthHandler": [[395, 8, 1, "", "http_error_401"]], "urllib.request.HTTPErrorProcessor": [[395, 8, 1, "", "http_response"], [395, 8, 1, "", "https_response"]], "urllib.request.HTTPHandler": [[395, 8, 1, "", "http_open"]], "urllib.request.HTTPPasswordMgr": [[395, 8, 1, "", "add_password"], [395, 8, 1, "", "find_user_password"]], "urllib.request.HTTPPasswordMgrWithPriorAuth": [[395, 8, 1, "", "add_password"], [395, 8, 1, "", "find_user_password"], [395, 8, 1, "", "is_authenticated"], [395, 8, 1, "", "update_authenticated"]], "urllib.request.HTTPRedirectHandler": [[395, 8, 1, "", "http_error_301"], [395, 8, 1, "", "http_error_302"], [395, 8, 1, "", "http_error_303"], [395, 8, 1, "", "http_error_307"], [395, 8, 1, "", "http_error_308"], [395, 8, 1, "", "redirect_request"]], "urllib.request.HTTPSHandler": [[395, 8, 1, "", "https_open"]], "urllib.request.OpenerDirector": [[395, 8, 1, "", "add_handler"], [395, 8, 1, "", "error"], [395, 8, 1, "", "open"]], "urllib.request.ProxyBasicAuthHandler": [[395, 8, 1, "", "http_error_407"]], "urllib.request.ProxyDigestAuthHandler": [[395, 8, 1, "", "http_error_407"]], "urllib.request.Request": [[395, 8, 1, "", "add_header"], [395, 8, 1, "", "add_unredirected_header"], [395, 7, 1, "", "data"], [395, 7, 1, "", "full_url"], [395, 8, 1, "", "get_full_url"], [395, 8, 1, "", "get_header"], [395, 8, 1, "", "get_method"], [395, 8, 1, "", "has_header"], [395, 8, 1, "", "header_items"], [395, 7, 1, "", "host"], [395, 7, 1, "", "method"], [395, 7, 1, "", "origin_req_host"], [395, 8, 1, "", "remove_header"], [395, 7, 1, "", "selector"], [395, 8, 1, "", "set_proxy"], [395, 7, 1, "", "type"], [395, 7, 1, "", "unverifiable"]], "urllib.request.URLopener": [[395, 8, 1, "", "open"], [395, 8, 1, "", "open_unknown"], [395, 8, 1, "", "retrieve"], [395, 7, 1, "", "version"]], "urllib.request.UnknownHandler": [[395, 8, 1, "", "unknown_open"]], "urllib.response": [[395, 11, 1, "", "addinfourl"]], "urllib.response.addinfourl": [[395, 7, 1, "", "code"], [395, 8, 1, "", "getcode"], [395, 8, 1, "", "geturl"], [395, 7, 1, "", "headers"], [395, 8, 1, "", "info"], [395, 7, 1, "", "status"], [395, 7, 1, "", "url"]], "urllib.robotparser": [[396, 11, 1, "", "RobotFileParser"]], "urllib.robotparser.RobotFileParser": [[396, 8, 1, "", "can_fetch"], [396, 8, 1, "", "crawl_delay"], [396, 8, 1, "", "modified"], [396, 8, 1, "", "mtime"], [396, 8, 1, "", "parse"], [396, 8, 1, "", "read"], [396, 8, 1, "", "request_rate"], [396, 8, 1, "", "set_url"], [396, 8, 1, "", "site_maps"]], "uu": [[397, 6, 1, "", "Error"], [397, 12, 1, "", "decode"], [397, 12, 1, "", "encode"]], "uuid": [[398, 9, 1, "", "NAMESPACE_DNS"], [398, 9, 1, "", "NAMESPACE_OID"], [398, 9, 1, "", "NAMESPACE_URL"], [398, 9, 1, "", "NAMESPACE_X500"], [398, 9, 1, "", "RESERVED_FUTURE"], [398, 9, 1, "", "RESERVED_MICROSOFT"], [398, 9, 1, "", "RESERVED_NCS"], [398, 9, 1, "", "RFC_4122"], [398, 11, 1, "", "SafeUUID"], [398, 11, 1, "", "UUID"], [398, 12, 1, "", "getnode"], [398, 12, 1, "", "uuid1"], [398, 12, 1, "", "uuid3"], [398, 12, 1, "", "uuid4"], [398, 12, 1, "", "uuid5"], [398, 14, 1, "cmdoption-uuid-h", "--help"], [398, 14, 1, "cmdoption-uuid-name", "--name"], [398, 14, 1, "cmdoption-uuid-namespace", "--namespace"], [398, 14, 1, "cmdoption-uuid-uuid", "--uuid"], [398, 14, 1, "cmdoption-uuid-N", "-N"], [398, 14, 1, "cmdoption-uuid-h", "-h"], [398, 14, 1, "cmdoption-uuid-n", "-n"], [398, 14, 1, "cmdoption-uuid-u", "-u"]], "uuid.SafeUUID": [[398, 7, 1, "", "safe"], [398, 7, 1, "", "unknown"], [398, 7, 1, "", "unsafe"]], "uuid.UUID": [[398, 7, 1, "", "bytes"], [398, 7, 1, "", "bytes_le"], [398, 7, 1, "", "clock_seq"], [398, 7, 1, "", "clock_seq_hi_variant"], [398, 7, 1, "", "clock_seq_low"], [398, 7, 1, "", "fields"], [398, 7, 1, "", "hex"], [398, 7, 1, "", "int"], [398, 7, 1, "", "is_safe"], [398, 7, 1, "", "node"], [398, 7, 1, "", "time"], [398, 7, 1, "", "time_hi_version"], [398, 7, 1, "", "time_low"], [398, 7, 1, "", "time_mid"], [398, 7, 1, "", "urn"], [398, 7, 1, "", "variant"], [398, 7, 1, "", "version"]], "venv": [[399, 11, 1, "", "EnvBuilder"], [399, 12, 1, "", "create"]], "venv.EnvBuilder": [[399, 8, 1, "", "create"], [399, 8, 1, "", "create_configuration"], [399, 8, 1, "", "ensure_directories"], [399, 8, 1, "", "install_scripts"], [399, 8, 1, "", "post_setup"], [399, 8, 1, "", "setup_python"], [399, 8, 1, "", "setup_scripts"], [399, 8, 1, "", "upgrade_dependencies"]], "warnings": [[400, 11, 1, "", "catch_warnings"], [400, 12, 1, "", "filterwarnings"], [400, 12, 1, "", "formatwarning"], [400, 12, 1, "", "resetwarnings"], [400, 12, 1, "", "showwarning"], [400, 12, 1, "", "simplefilter"], [400, 12, 1, "", "warn"], [400, 12, 1, "", "warn_explicit"]], "wave": [[401, 6, 1, "", "Error"], [401, 11, 1, "", "Wave_read"], [401, 11, 1, "", "Wave_write"], [401, 12, 1, "", "open"]], "wave.Wave_read": [[401, 8, 1, "", "close"], [401, 8, 1, "", "getcompname"], [401, 8, 1, "", "getcomptype"], [401, 8, 1, "", "getframerate"], [401, 8, 1, "", "getmark"], [401, 8, 1, "", "getmarkers"], [401, 8, 1, "", "getnchannels"], [401, 8, 1, "", "getnframes"], [401, 8, 1, "", "getparams"], [401, 8, 1, "", "getsampwidth"], [401, 8, 1, "", "readframes"], [401, 8, 1, "", "rewind"], [401, 8, 1, "", "setpos"], [401, 8, 1, "", "tell"]], "wave.Wave_write": [[401, 8, 1, "", "close"], [401, 8, 1, "", "setcomptype"], [401, 8, 1, "", "setframerate"], [401, 8, 1, "", "setnchannels"], [401, 8, 1, "", "setnframes"], [401, 8, 1, "", "setparams"], [401, 8, 1, "", "setsampwidth"], [401, 8, 1, "", "tell"], [401, 8, 1, "", "writeframes"], [401, 8, 1, "", "writeframesraw"]], "weakref": [[402, 9, 1, "", "CallableProxyType"], [402, 9, 1, "", "ProxyType"], [402, 9, 1, "", "ProxyTypes"], [402, 9, 1, "", "ReferenceType"], [402, 11, 1, "", "WeakKeyDictionary"], [402, 11, 1, "", "WeakMethod"], [402, 11, 1, "", "WeakSet"], [402, 11, 1, "", "WeakValueDictionary"], [402, 11, 1, "", "finalize"], [402, 12, 1, "", "getweakrefcount"], [402, 12, 1, "", "getweakrefs"], [402, 12, 1, "", "proxy"], [402, 11, 1, "", "ref"]], "weakref.WeakKeyDictionary": [[402, 8, 1, "", "keyrefs"]], "weakref.WeakValueDictionary": [[402, 8, 1, "", "valuerefs"]], "weakref.finalize": [[402, 8, 1, "", "__call__"], [402, 7, 1, "", "alive"], [402, 7, 1, "", "atexit"], [402, 8, 1, "", "detach"], [402, 8, 1, "", "peek"]], "weakref.ref": [[402, 7, 1, "", "__callback__"]], "webbrowser": [[403, 6, 1, "", "Error"], [403, 12, 1, "", "get"], [403, 7, 1, "", "name"], [403, 12, 1, "", "open"], [403, 12, 1, "", "open_new"], [403, 12, 1, "", "open_new_tab"], [403, 12, 1, "", "register"]], "webbrowser.controller": [[403, 8, 1, "", "open"], [403, 8, 1, "", "open_new"], [403, 8, 1, "", "open_new_tab"]], "winreg": [[405, 12, 1, "", "CloseKey"], [405, 12, 1, "", "ConnectRegistry"], [405, 12, 1, "", "CreateKey"], [405, 12, 1, "", "CreateKeyEx"], [405, 12, 1, "", "DeleteKey"], [405, 12, 1, "", "DeleteKeyEx"], [405, 12, 1, "", "DeleteValue"], [405, 12, 1, "", "DisableReflectionKey"], [405, 12, 1, "", "EnableReflectionKey"], [405, 12, 1, "", "EnumKey"], [405, 12, 1, "", "EnumValue"], [405, 12, 1, "", "ExpandEnvironmentStrings"], [405, 12, 1, "", "FlushKey"], [405, 9, 1, "", "HKEY_CLASSES_ROOT"], [405, 9, 1, "", "HKEY_CURRENT_CONFIG"], [405, 9, 1, "", "HKEY_CURRENT_USER"], [405, 9, 1, "", "HKEY_DYN_DATA"], [405, 9, 1, "", "HKEY_LOCAL_MACHINE"], [405, 9, 1, "", "HKEY_PERFORMANCE_DATA"], [405, 9, 1, "", "HKEY_USERS"], [405, 9, 1, "", "KEY_ALL_ACCESS"], [405, 9, 1, "", "KEY_CREATE_LINK"], [405, 9, 1, "", "KEY_CREATE_SUB_KEY"], [405, 9, 1, "", "KEY_ENUMERATE_SUB_KEYS"], [405, 9, 1, "", "KEY_EXECUTE"], [405, 9, 1, "", "KEY_NOTIFY"], [405, 9, 1, "", "KEY_QUERY_VALUE"], [405, 9, 1, "", "KEY_READ"], [405, 9, 1, "", "KEY_SET_VALUE"], [405, 9, 1, "", "KEY_WOW64_32KEY"], [405, 9, 1, "", "KEY_WOW64_64KEY"], [405, 9, 1, "", "KEY_WRITE"], [405, 12, 1, "", "LoadKey"], [405, 12, 1, "", "OpenKey"], [405, 12, 1, "", "OpenKeyEx"], [405, 12, 1, "", "QueryInfoKey"], [405, 12, 1, "", "QueryReflectionKey"], [405, 12, 1, "", "QueryValue"], [405, 12, 1, "", "QueryValueEx"], [405, 9, 1, "", "REG_BINARY"], [405, 9, 1, "", "REG_DWORD"], [405, 9, 1, "", "REG_DWORD_BIG_ENDIAN"], [405, 9, 1, "", "REG_DWORD_LITTLE_ENDIAN"], [405, 9, 1, "", "REG_EXPAND_SZ"], [405, 9, 1, "", "REG_FULL_RESOURCE_DESCRIPTOR"], [405, 9, 1, "", "REG_LINK"], [405, 9, 1, "", "REG_MULTI_SZ"], [405, 9, 1, "", "REG_NONE"], [405, 9, 1, "", "REG_QWORD"], [405, 9, 1, "", "REG_QWORD_LITTLE_ENDIAN"], [405, 9, 1, "", "REG_RESOURCE_LIST"], [405, 9, 1, "", "REG_RESOURCE_REQUIREMENTS_LIST"], [405, 9, 1, "", "REG_SZ"], [405, 12, 1, "", "SaveKey"], [405, 12, 1, "", "SetValue"], [405, 12, 1, "", "SetValueEx"]], "winreg.PyHKEY": [[405, 8, 1, "", "Close"], [405, 8, 1, "", "Detach"], [405, 8, 1, "", "__enter__"], [405, 8, 1, "", "__exit__"]], "winsound": [[406, 12, 1, "", "Beep"], [406, 9, 1, "", "MB_ICONASTERISK"], [406, 9, 1, "", "MB_ICONEXCLAMATION"], [406, 9, 1, "", "MB_ICONHAND"], [406, 9, 1, "", "MB_ICONQUESTION"], [406, 9, 1, "", "MB_OK"], [406, 12, 1, "", "MessageBeep"], [406, 12, 1, "", "PlaySound"], [406, 9, 1, "", "SND_ALIAS"], [406, 9, 1, "", "SND_ASYNC"], [406, 9, 1, "", "SND_FILENAME"], [406, 9, 1, "", "SND_LOOP"], [406, 9, 1, "", "SND_MEMORY"], [406, 9, 1, "", "SND_NODEFAULT"], [406, 9, 1, "", "SND_NOSTOP"], [406, 9, 1, "", "SND_NOWAIT"], [406, 9, 1, "", "SND_PURGE"]], "wsgiref": [[407, 10, 0, "-", "handlers"], [407, 10, 0, "-", "headers"], [407, 10, 0, "-", "simple_server"], [407, 10, 0, "-", "types"], [407, 10, 0, "-", "util"], [407, 10, 0, "-", "validate"]], "wsgiref.handlers": [[407, 11, 1, "", "BaseCGIHandler"], [407, 11, 1, "", "BaseHandler"], [407, 11, 1, "", "CGIHandler"], [407, 11, 1, "", "IISCGIHandler"], [407, 11, 1, "", "SimpleHandler"], [407, 12, 1, "", "read_environ"]], "wsgiref.handlers.BaseHandler": [[407, 8, 1, "", "_flush"], [407, 8, 1, "", "_write"], [407, 8, 1, "", "add_cgi_vars"], [407, 7, 1, "", "error_body"], [407, 7, 1, "", "error_headers"], [407, 8, 1, "", "error_output"], [407, 7, 1, "", "error_status"], [407, 8, 1, "", "get_scheme"], [407, 8, 1, "", "get_stderr"], [407, 8, 1, "", "get_stdin"], [407, 7, 1, "", "http_version"], [407, 8, 1, "", "log_exception"], [407, 7, 1, "", "origin_server"], [407, 7, 1, "", "os_environ"], [407, 8, 1, "", "run"], [407, 8, 1, "", "sendfile"], [407, 7, 1, "", "server_software"], [407, 8, 1, "", "setup_environ"], [407, 7, 1, "", "traceback_limit"], [407, 7, 1, "", "wsgi_file_wrapper"], [407, 7, 1, "", "wsgi_multiprocess"], [407, 7, 1, "", "wsgi_multithread"], [407, 7, 1, "", "wsgi_run_once"]], "wsgiref.headers": [[407, 11, 1, "", "Headers"]], "wsgiref.headers.Headers": [[407, 8, 1, "", "add_header"], [407, 8, 1, "", "get_all"]], "wsgiref.simple_server": [[407, 11, 1, "", "WSGIRequestHandler"], [407, 11, 1, "", "WSGIServer"], [407, 12, 1, "", "demo_app"], [407, 12, 1, "", "make_server"]], "wsgiref.simple_server.WSGIRequestHandler": [[407, 8, 1, "", "get_environ"], [407, 8, 1, "", "get_stderr"], [407, 8, 1, "", "handle"]], "wsgiref.simple_server.WSGIServer": [[407, 8, 1, "", "get_app"], [407, 8, 1, "", "set_app"]], "wsgiref.types": [[407, 11, 1, "", "ErrorStream"], [407, 11, 1, "", "FileWrapper"], [407, 11, 1, "", "InputStream"], [407, 11, 1, "", "StartResponse"], [407, 9, 1, "", "WSGIApplication"], [407, 9, 1, "", "WSGIEnvironment"]], "wsgiref.util": [[407, 11, 1, "", "FileWrapper"], [407, 12, 1, "", "application_uri"], [407, 12, 1, "", "guess_scheme"], [407, 12, 1, "", "is_hop_by_hop"], [407, 12, 1, "", "request_uri"], [407, 12, 1, "", "setup_testing_defaults"], [407, 12, 1, "", "shift_path_info"]], "wsgiref.validate": [[407, 12, 1, "", "validator"]], "xdrlib": [[408, 6, 1, "", "ConversionError"], [408, 6, 1, "", "Error"], [408, 11, 1, "", "Packer"], [408, 11, 1, "", "Unpacker"]], "xdrlib.Packer": [[408, 8, 1, "", "get_buffer"], [408, 8, 1, "", "pack_array"], [408, 8, 1, "", "pack_bytes"], [408, 8, 1, "", "pack_double"], [408, 8, 1, "", "pack_farray"], [408, 8, 1, "", "pack_float"], [408, 8, 1, "", "pack_fopaque"], [408, 8, 1, "", "pack_fstring"], [408, 8, 1, "", "pack_list"], [408, 8, 1, "", "pack_opaque"], [408, 8, 1, "", "pack_string"], [408, 8, 1, "", "reset"]], "xdrlib.Unpacker": [[408, 8, 1, "", "done"], [408, 8, 1, "", "get_buffer"], [408, 8, 1, "", "get_position"], [408, 8, 1, "", "reset"], [408, 8, 1, "", "set_position"], [408, 8, 1, "", "unpack_array"], [408, 8, 1, "", "unpack_bytes"], [408, 8, 1, "", "unpack_double"], [408, 8, 1, "", "unpack_farray"], [408, 8, 1, "", "unpack_float"], [408, 8, 1, "", "unpack_fopaque"], [408, 8, 1, "", "unpack_fstring"], [408, 8, 1, "", "unpack_list"], [408, 8, 1, "", "unpack_opaque"], [408, 8, 1, "", "unpack_string"]], "xml": [[410, 10, 0, "-", "dom"], [414, 10, 0, "-", "sax"]], "xml.dom.Attr": [[410, 7, 1, "", "localName"], [410, 7, 1, "", "name"], [410, 7, 1, "", "prefix"], [410, 7, 1, "", "value"]], "xml.dom.Comment": [[410, 7, 1, "", "data"]], "xml.dom": [[410, 6, 1, "", "DOMException"], [410, 6, 1, "", "DomstringSizeErr"], [410, 9, 1, "", "EMPTY_NAMESPACE"], [410, 6, 1, "", "HierarchyRequestErr"], [410, 6, 1, "", "IndexSizeErr"], [410, 6, 1, "", "InuseAttributeErr"], [410, 6, 1, "", "InvalidAccessErr"], [410, 6, 1, "", "InvalidCharacterErr"], [410, 6, 1, "", "InvalidModificationErr"], [410, 6, 1, "", "InvalidStateErr"], [410, 6, 1, "", "NamespaceErr"], [410, 6, 1, "", "NoDataAllowedErr"], [410, 6, 1, "", "NoModificationAllowedErr"], [410, 6, 1, "", "NotFoundErr"], [410, 6, 1, "", "NotSupportedErr"], [410, 6, 1, "", "SyntaxErr"], [410, 6, 1, "", "WrongDocumentErr"], [410, 9, 1, "", "XHTML_NAMESPACE"], [410, 9, 1, "", "XMLNS_NAMESPACE"], [410, 9, 1, "", "XML_NAMESPACE"], [410, 12, 1, "", "getDOMImplementation"], [411, 10, 0, "-", "minidom"], [412, 10, 0, "-", "pulldom"], [410, 12, 1, "", "registerDOMImplementation"]], "xml.dom.DOMImplementation": [[410, 8, 1, "", "createDocument"], [410, 8, 1, "", "createDocumentType"], [410, 8, 1, "", "hasFeature"]], "xml.dom.Document": [[410, 8, 1, "", "createAttribute"], [410, 8, 1, "", "createAttributeNS"], [410, 8, 1, "", "createComment"], [410, 8, 1, "", "createElement"], [410, 8, 1, "", "createElementNS"], [410, 8, 1, "", "createProcessingInstruction"], [410, 8, 1, "", "createTextNode"], [410, 7, 1, "", "documentElement"], [410, 8, 1, "", "getElementsByTagName"], [410, 8, 1, "", "getElementsByTagNameNS"]], "xml.dom.DocumentType": [[410, 7, 1, "", "entities"], [410, 7, 1, "", "internalSubset"], [410, 7, 1, "", "name"], [410, 7, 1, "", "notations"], [410, 7, 1, "", "publicId"], [410, 7, 1, "", "systemId"]], "xml.dom.Element": [[410, 8, 1, "", "getAttribute"], [410, 8, 1, "", "getAttributeNS"], [410, 8, 1, "", "getAttributeNode"], [410, 8, 1, "", "getAttributeNodeNS"], [410, 8, 1, "", "getElementsByTagName"], [410, 8, 1, "", "getElementsByTagNameNS"], [410, 8, 1, "", "hasAttribute"], [410, 8, 1, "", "hasAttributeNS"], [410, 8, 1, "", "removeAttribute"], [410, 8, 1, "", "removeAttributeNS"], [410, 8, 1, "", "removeAttributeNode"], [410, 8, 1, "", "setAttribute"], [410, 8, 1, "", "setAttributeNS"], [410, 8, 1, "", "setAttributeNode"], [410, 8, 1, "", "setAttributeNodeNS"], [410, 7, 1, "", "tagName"]], "xml.dom.NamedNodeMap": [[410, 8, 1, "", "item"], [410, 7, 1, "", "length"]], "xml.dom.Node": [[410, 8, 1, "", "appendChild"], [410, 7, 1, "", "attributes"], [410, 7, 1, "", "childNodes"], [410, 8, 1, "", "cloneNode"], [410, 7, 1, "", "firstChild"], [410, 8, 1, "", "hasAttributes"], [410, 8, 1, "", "hasChildNodes"], [410, 8, 1, "", "insertBefore"], [410, 8, 1, "", "isSameNode"], [410, 7, 1, "", "lastChild"], [410, 7, 1, "", "localName"], [410, 7, 1, "", "namespaceURI"], [410, 7, 1, "", "nextSibling"], [410, 7, 1, "", "nodeName"], [410, 7, 1, "", "nodeType"], [410, 7, 1, "", "nodeValue"], [410, 8, 1, "", "normalize"], [410, 7, 1, "", "parentNode"], [410, 7, 1, "", "prefix"], [410, 7, 1, "", "previousSibling"], [410, 8, 1, "", "removeChild"], [410, 8, 1, "", "replaceChild"]], "xml.dom.NodeList": [[410, 8, 1, "", "item"], [410, 7, 1, "", "length"]], "xml.dom.ProcessingInstruction": [[410, 7, 1, "", "data"], [410, 7, 1, "", "target"]], "xml.dom.Text": [[410, 7, 1, "", "data"]], "xml.dom.minidom.Node": [[411, 8, 1, "", "toprettyxml"], [411, 8, 1, "", "toxml"], [411, 8, 1, "", "unlink"], [411, 8, 1, "", "writexml"]], "xml.dom.minidom": [[411, 12, 1, "", "parse"], [411, 12, 1, "", "parseString"]], "xml.dom.pulldom": [[412, 11, 1, "", "DOMEventStream"], [412, 11, 1, "", "PullDom"], [412, 11, 1, "", "SAX2DOM"], [412, 9, 1, "", "default_bufsize"], [412, 12, 1, "", "parse"], [412, 12, 1, "", "parseString"]], "xml.dom.pulldom.DOMEventStream": [[412, 8, 1, "", "expandNode"], [412, 8, 1, "", "getEvent"], [412, 8, 1, "", "reset"]], "xml.etree": [[413, 10, 0, "-", "ElementInclude"], [413, 10, 0, "-", "ElementTree"]], "xml.etree.ElementInclude": [[413, 12, 1, "", "default_loader"], [413, 12, 1, "", "include"]], "xml.etree.ElementTree": [[413, 11, 1, "", "C14NWriterTarget"], [413, 12, 1, "", "Comment"], [413, 11, 1, "", "Element"], [413, 11, 1, "", "ElementTree"], [413, 11, 1, "", "ParseError"], [413, 12, 1, "", "ProcessingInstruction"], [413, 11, 1, "", "QName"], [413, 12, 1, "", "SubElement"], [413, 11, 1, "", "TreeBuilder"], [413, 12, 1, "", "XML"], [413, 12, 1, "", "XMLID"], [413, 11, 1, "", "XMLParser"], [413, 11, 1, "", "XMLPullParser"], [413, 12, 1, "", "canonicalize"], [413, 12, 1, "", "dump"], [413, 12, 1, "", "fromstring"], [413, 12, 1, "", "fromstringlist"], [413, 12, 1, "", "indent"], [413, 12, 1, "", "iselement"], [413, 12, 1, "", "iterparse"], [413, 12, 1, "", "parse"], [413, 12, 1, "", "register_namespace"], [413, 12, 1, "", "tostring"], [413, 12, 1, "", "tostringlist"]], "xml.etree.ElementTree.Element": [[413, 8, 1, "", "append"], [413, 7, 1, "", "attrib"], [413, 8, 1, "", "clear"], [413, 8, 1, "", "extend"], [413, 8, 1, "", "find"], [413, 8, 1, "", "findall"], [413, 8, 1, "", "findtext"], [413, 8, 1, "", "get"], [413, 8, 1, "", "insert"], [413, 8, 1, "", "items"], [413, 8, 1, "", "iter"], [413, 8, 1, "", "iterfind"], [413, 8, 1, "", "itertext"], [413, 8, 1, "", "keys"], [413, 8, 1, "", "makeelement"], [413, 8, 1, "", "remove"], [413, 8, 1, "", "set"], [413, 7, 1, "", "tag"], [413, 7, 1, "", "tail"], [413, 7, 1, "", "text"]], "xml.etree.ElementTree.ElementTree": [[413, 8, 1, "", "_setroot"], [413, 8, 1, "", "find"], [413, 8, 1, "", "findall"], [413, 8, 1, "", "findtext"], [413, 8, 1, "", "getroot"], [413, 8, 1, "", "iter"], [413, 8, 1, "", "iterfind"], [413, 8, 1, "", "parse"], [413, 8, 1, "", "write"]], "xml.etree.ElementTree.ParseError": [[413, 7, 1, "", "code"], [413, 7, 1, "", "position"]], "xml.etree.ElementTree.TreeBuilder": [[413, 8, 1, "", "close"], [413, 8, 1, "", "comment"], [413, 8, 1, "", "data"], [413, 8, 1, "", "doctype"], [413, 8, 1, "", "end"], [413, 8, 1, "", "end_ns"], [413, 8, 1, "", "pi"], [413, 8, 1, "", "start"], [413, 8, 1, "", "start_ns"]], "xml.etree.ElementTree.XMLParser": [[413, 8, 1, "", "close"], [413, 8, 1, "", "feed"], [413, 8, 1, "", "flush"]], "xml.etree.ElementTree.XMLPullParser": [[413, 8, 1, "", "close"], [413, 8, 1, "", "feed"], [413, 8, 1, "", "flush"], [413, 8, 1, "", "read_events"]], "xml.parsers": [[314, 10, 0, "-", "expat"]], "xml.parsers.expat": [[314, 12, 1, "", "ErrorString"], [314, 6, 1, "", "ExpatError"], [314, 12, 1, "", "ParserCreate"], [314, 9, 1, "", "XMLParserType"], [314, 6, 1, "", "error"], [314, 10, 0, "-", "errors"], [314, 10, 0, "-", "model"]], "xml.parsers.expat.ExpatError": [[314, 7, 1, "", "code"], [314, 7, 1, "", "lineno"], [314, 7, 1, "", "offset"]], "xml.parsers.expat.errors": [[314, 9, 1, "", "XML_ERROR_ABORTED"], [314, 9, 1, "", "XML_ERROR_AMPLIFICATION_LIMIT_BREACH"], [314, 9, 1, "", "XML_ERROR_ASYNC_ENTITY"], [314, 9, 1, "", "XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF"], [314, 9, 1, "", "XML_ERROR_BAD_CHAR_REF"], [314, 9, 1, "", "XML_ERROR_BINARY_ENTITY_REF"], [314, 9, 1, "", "XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING"], [314, 9, 1, "", "XML_ERROR_DUPLICATE_ATTRIBUTE"], [314, 9, 1, "", "XML_ERROR_ENTITY_DECLARED_IN_PE"], [314, 9, 1, "", "XML_ERROR_EXTERNAL_ENTITY_HANDLING"], [314, 9, 1, "", "XML_ERROR_FEATURE_REQUIRES_XML_DTD"], [314, 9, 1, "", "XML_ERROR_FINISHED"], [314, 9, 1, "", "XML_ERROR_INCOMPLETE_PE"], [314, 9, 1, "", "XML_ERROR_INCORRECT_ENCODING"], [314, 9, 1, "", "XML_ERROR_INVALID_ARGUMENT"], [314, 9, 1, "", "XML_ERROR_INVALID_TOKEN"], [314, 9, 1, "", "XML_ERROR_JUNK_AFTER_DOC_ELEMENT"], [314, 9, 1, "", "XML_ERROR_MISPLACED_XML_PI"], [314, 9, 1, "", "XML_ERROR_NOT_STANDALONE"], [314, 9, 1, "", "XML_ERROR_NOT_SUSPENDED"], [314, 9, 1, "", "XML_ERROR_NO_BUFFER"], [314, 9, 1, "", "XML_ERROR_NO_ELEMENTS"], [314, 9, 1, "", "XML_ERROR_NO_MEMORY"], [314, 9, 1, "", "XML_ERROR_PARAM_ENTITY_REF"], [314, 9, 1, "", "XML_ERROR_PARTIAL_CHAR"], [314, 9, 1, "", "XML_ERROR_PUBLICID"], [314, 9, 1, "", "XML_ERROR_RECURSIVE_ENTITY_REF"], [314, 9, 1, "", "XML_ERROR_RESERVED_NAMESPACE_URI"], [314, 9, 1, "", "XML_ERROR_RESERVED_PREFIX_XML"], [314, 9, 1, "", "XML_ERROR_RESERVED_PREFIX_XMLNS"], [314, 9, 1, "", "XML_ERROR_SUSPENDED"], [314, 9, 1, "", "XML_ERROR_SUSPEND_PE"], [314, 9, 1, "", "XML_ERROR_SYNTAX"], [314, 9, 1, "", "XML_ERROR_TAG_MISMATCH"], [314, 9, 1, "", "XML_ERROR_TEXT_DECL"], [314, 9, 1, "", "XML_ERROR_UNBOUND_PREFIX"], [314, 9, 1, "", "XML_ERROR_UNCLOSED_CDATA_SECTION"], [314, 9, 1, "", "XML_ERROR_UNCLOSED_TOKEN"], [314, 9, 1, "", "XML_ERROR_UNDECLARING_PREFIX"], [314, 9, 1, "", "XML_ERROR_UNDEFINED_ENTITY"], [314, 9, 1, "", "XML_ERROR_UNEXPECTED_STATE"], [314, 9, 1, "", "XML_ERROR_UNKNOWN_ENCODING"], [314, 9, 1, "", "XML_ERROR_XML_DECL"], [314, 9, 1, "", "codes"], [314, 9, 1, "", "messages"]], "xml.parsers.expat.xmlparser": [[314, 8, 1, "", "AttlistDeclHandler"], [314, 8, 1, "", "CharacterDataHandler"], [314, 8, 1, "", "CommentHandler"], [314, 7, 1, "", "CurrentByteIndex"], [314, 7, 1, "", "CurrentColumnNumber"], [314, 7, 1, "", "CurrentLineNumber"], [314, 8, 1, "", "DefaultHandler"], [314, 8, 1, "", "DefaultHandlerExpand"], [314, 8, 1, "", "ElementDeclHandler"], [314, 8, 1, "", "EndCdataSectionHandler"], [314, 8, 1, "", "EndDoctypeDeclHandler"], [314, 8, 1, "", "EndElementHandler"], [314, 8, 1, "", "EndNamespaceDeclHandler"], [314, 8, 1, "", "EntityDeclHandler"], [314, 7, 1, "", "ErrorByteIndex"], [314, 7, 1, "", "ErrorCode"], [314, 7, 1, "", "ErrorColumnNumber"], [314, 7, 1, "", "ErrorLineNumber"], [314, 8, 1, "", "ExternalEntityParserCreate"], [314, 8, 1, "", "ExternalEntityRefHandler"], [314, 8, 1, "", "GetBase"], [314, 8, 1, "", "GetInputContext"], [314, 8, 1, "", "GetReparseDeferralEnabled"], [314, 8, 1, "", "NotStandaloneHandler"], [314, 8, 1, "", "NotationDeclHandler"], [314, 8, 1, "", "Parse"], [314, 8, 1, "", "ParseFile"], [314, 8, 1, "", "ProcessingInstructionHandler"], [314, 8, 1, "", "SetBase"], [314, 8, 1, "", "SetParamEntityParsing"], [314, 8, 1, "", "SetReparseDeferralEnabled"], [314, 8, 1, "", "StartCdataSectionHandler"], [314, 8, 1, "", "StartDoctypeDeclHandler"], [314, 8, 1, "", "StartElementHandler"], [314, 8, 1, "", "StartNamespaceDeclHandler"], [314, 8, 1, "", "UnparsedEntityDeclHandler"], [314, 8, 1, "", "UseForeignDTD"], [314, 8, 1, "", "XmlDeclHandler"], [314, 7, 1, "", "buffer_size"], [314, 7, 1, "", "buffer_text"], [314, 7, 1, "", "buffer_used"], [314, 7, 1, "", "ordered_attributes"], [314, 7, 1, "", "specified_attributes"]], "xml.sax": [[414, 6, 1, "", "SAXException"], [414, 6, 1, "", "SAXNotRecognizedException"], [414, 6, 1, "", "SAXNotSupportedException"], [414, 6, 1, "", "SAXParseException"], [415, 10, 0, "-", "handler"], [414, 12, 1, "", "make_parser"], [414, 12, 1, "", "parse"], [414, 12, 1, "", "parseString"], [417, 10, 0, "-", "saxutils"], [416, 10, 0, "-", "xmlreader"]], "xml.sax.SAXException": [[414, 8, 1, "", "getException"], [414, 8, 1, "", "getMessage"]], "xml.sax.handler": [[415, 11, 1, "", "ContentHandler"], [415, 11, 1, "", "DTDHandler"], [415, 11, 1, "", "EntityResolver"], [415, 11, 1, "", "ErrorHandler"], [415, 11, 1, "", "LexicalHandler"], [415, 9, 1, "", "all_features"], [415, 9, 1, "", "all_properties"], [415, 9, 1, "", "feature_external_ges"], [415, 9, 1, "", "feature_external_pes"], [415, 9, 1, "", "feature_namespace_prefixes"], [415, 9, 1, "", "feature_namespaces"], [415, 9, 1, "", "feature_string_interning"], [415, 9, 1, "", "feature_validation"], [415, 9, 1, "", "property_declaration_handler"], [415, 9, 1, "", "property_dom_node"], [415, 9, 1, "", "property_lexical_handler"], [415, 9, 1, "", "property_xml_string"]], "xml.sax.handler.ContentHandler": [[415, 8, 1, "", "characters"], [415, 8, 1, "", "endDocument"], [415, 8, 1, "", "endElement"], [415, 8, 1, "", "endElementNS"], [415, 8, 1, "", "endPrefixMapping"], [415, 8, 1, "", "ignorableWhitespace"], [415, 8, 1, "", "processingInstruction"], [415, 8, 1, "", "setDocumentLocator"], [415, 8, 1, "", "skippedEntity"], [415, 8, 1, "", "startDocument"], [415, 8, 1, "", "startElement"], [415, 8, 1, "", "startElementNS"], [415, 8, 1, "", "startPrefixMapping"]], "xml.sax.handler.DTDHandler": [[415, 8, 1, "", "notationDecl"], [415, 8, 1, "", "unparsedEntityDecl"]], "xml.sax.handler.EntityResolver": [[415, 8, 1, "", "resolveEntity"]], "xml.sax.handler.ErrorHandler": [[415, 8, 1, "", "error"], [415, 8, 1, "", "fatalError"], [415, 8, 1, "", "warning"]], "xml.sax.handler.LexicalHandler": [[415, 8, 1, "", "comment"], [415, 8, 1, "", "endCDATA"], [415, 8, 1, "", "endDTD"], [415, 8, 1, "", "startCDATA"], [415, 8, 1, "", "startDTD"]], "xml.sax.saxutils": [[417, 11, 1, "", "XMLFilterBase"], [417, 11, 1, "", "XMLGenerator"], [417, 12, 1, "", "escape"], [417, 12, 1, "", "prepare_input_source"], [417, 12, 1, "", "quoteattr"], [417, 12, 1, "", "unescape"]], "xml.sax.xmlreader.Attributes": [[416, 8, 1, "", "getLength"], [416, 8, 1, "", "getNames"], [416, 8, 1, "", "getType"], [416, 8, 1, "", "getValue"]], "xml.sax.xmlreader": [[416, 11, 1, "", "AttributesImpl"], [416, 11, 1, "", "AttributesNSImpl"], [416, 11, 1, "", "IncrementalParser"], [416, 11, 1, "", "InputSource"], [416, 11, 1, "", "Locator"], [416, 11, 1, "", "XMLReader"]], "xml.sax.xmlreader.AttributesNS": [[416, 8, 1, "", "getNameByQName"], [416, 8, 1, "", "getQNameByName"], [416, 8, 1, "", "getQNames"], [416, 8, 1, "", "getValueByQName"]], "xml.sax.xmlreader.IncrementalParser": [[416, 8, 1, "", "close"], [416, 8, 1, "", "feed"], [416, 8, 1, "", "reset"]], "xml.sax.xmlreader.InputSource": [[416, 8, 1, "", "getByteStream"], [416, 8, 1, "", "getCharacterStream"], [416, 8, 1, "", "getEncoding"], [416, 8, 1, "", "getPublicId"], [416, 8, 1, "", "getSystemId"], [416, 8, 1, "", "setByteStream"], [416, 8, 1, "", "setCharacterStream"], [416, 8, 1, "", "setEncoding"], [416, 8, 1, "", "setPublicId"], [416, 8, 1, "", "setSystemId"]], "xml.sax.xmlreader.Locator": [[416, 8, 1, "", "getColumnNumber"], [416, 8, 1, "", "getLineNumber"], [416, 8, 1, "", "getPublicId"], [416, 8, 1, "", "getSystemId"]], "xml.sax.xmlreader.XMLReader": [[416, 8, 1, "", "getContentHandler"], [416, 8, 1, "", "getDTDHandler"], [416, 8, 1, "", "getEntityResolver"], [416, 8, 1, "", "getErrorHandler"], [416, 8, 1, "", "getFeature"], [416, 8, 1, "", "getProperty"], [416, 8, 1, "", "parse"], [416, 8, 1, "", "setContentHandler"], [416, 8, 1, "", "setDTDHandler"], [416, 8, 1, "", "setEntityResolver"], [416, 8, 1, "", "setErrorHandler"], [416, 8, 1, "", "setFeature"], [416, 8, 1, "", "setLocale"], [416, 8, 1, "", "setProperty"]], "xmlrpc": [[419, 10, 0, "-", "client"], [420, 10, 0, "-", "server"]], "xmlrpc.client": [[419, 11, 1, "", "Binary"], [419, 11, 1, "", "DateTime"], [419, 11, 1, "", "Fault"], [419, 11, 1, "", "MultiCall"], [419, 11, 1, "", "ProtocolError"], [419, 11, 1, "", "ServerProxy"], [419, 12, 1, "", "dumps"], [419, 12, 1, "", "loads"]], "xmlrpc.client.Binary": [[419, 7, 1, "", "data"], [419, 8, 1, "", "decode"], [419, 8, 1, "", "encode"]], "xmlrpc.client.DateTime": [[419, 8, 1, "", "decode"], [419, 8, 1, "", "encode"]], "xmlrpc.client.Fault": [[419, 7, 1, "", "faultCode"], [419, 7, 1, "", "faultString"]], "xmlrpc.client.ProtocolError": [[419, 7, 1, "", "errcode"], [419, 7, 1, "", "errmsg"], [419, 7, 1, "", "headers"], [419, 7, 1, "", "url"]], "xmlrpc.client.ServerProxy.system": [[419, 8, 1, "", "listMethods"], [419, 8, 1, "", "methodHelp"], [419, 8, 1, "", "methodSignature"]], "xmlrpc.server": [[420, 11, 1, "", "CGIXMLRPCRequestHandler"], [420, 11, 1, "", "DocCGIXMLRPCRequestHandler"], [420, 11, 1, "", "DocXMLRPCRequestHandler"], [420, 11, 1, "", "DocXMLRPCServer"], [420, 11, 1, "", "SimpleXMLRPCRequestHandler"], [420, 11, 1, "", "SimpleXMLRPCServer"]], "xmlrpc.server.CGIXMLRPCRequestHandler": [[420, 8, 1, "", "handle_request"], [420, 8, 1, "", "register_function"], [420, 8, 1, "", "register_instance"], [420, 8, 1, "", "register_introspection_functions"], [420, 8, 1, "", "register_multicall_functions"]], "xmlrpc.server.DocCGIXMLRPCRequestHandler": [[420, 8, 1, "", "set_server_documentation"], [420, 8, 1, "", "set_server_name"], [420, 8, 1, "", "set_server_title"]], "xmlrpc.server.DocXMLRPCServer": [[420, 8, 1, "", "set_server_documentation"], [420, 8, 1, "", "set_server_name"], [420, 8, 1, "", "set_server_title"]], "xmlrpc.server.SimpleXMLRPCRequestHandler": [[420, 7, 1, "", "rpc_paths"]], "xmlrpc.server.SimpleXMLRPCServer": [[420, 8, 1, "", "register_function"], [420, 8, 1, "", "register_instance"], [420, 8, 1, "", "register_introspection_functions"], [420, 8, 1, "", "register_multicall_functions"]], "zipapp": [[421, 12, 1, "", "create_archive"], [421, 12, 1, "", "get_interpreter"], [421, 14, 1, "cmdoption-zipapp-c", "--compress"], [421, 14, 1, "cmdoption-zipapp-h", "--help"], [421, 14, 1, "cmdoption-zipapp-info", "--info"], [421, 14, 1, "cmdoption-zipapp-m", "--main"], [421, 14, 1, "cmdoption-zipapp-o", "--output"], [421, 14, 1, "cmdoption-zipapp-p", "--python"], [421, 14, 1, "cmdoption-zipapp-c", "-c"], [421, 14, 1, "cmdoption-zipapp-h", "-h"], [421, 14, 1, "cmdoption-zipapp-m", "-m"], [421, 14, 1, "cmdoption-zipapp-o", "-o"], [421, 14, 1, "cmdoption-zipapp-p", "-p"]], "zipfile": [[422, 6, 1, "", "BadZipFile"], [422, 6, 1, "", "BadZipfile"], [422, 6, 1, "", "LargeZipFile"], [422, 11, 1, "", "Path"], [422, 11, 1, "", "PyZipFile"], [422, 9, 1, "", "ZIP_BZIP2"], [422, 9, 1, "", "ZIP_DEFLATED"], [422, 9, 1, "", "ZIP_LZMA"], [422, 9, 1, "", "ZIP_STORED"], [422, 11, 1, "", "ZipFile"], [422, 11, 1, "", "ZipInfo"], [422, 12, 1, "", "is_zipfile"], [422, 14, 1, "cmdoption-zipfile-create", "--create"], [422, 14, 1, "cmdoption-zipfile-extract", "--extract"], [422, 14, 1, "cmdoption-zipfile-list", "--list"], [422, 14, 1, "cmdoption-zipfile-metadata-encoding", "--metadata-encoding"], [422, 14, 1, "cmdoption-zipfile-test", "--test"], [422, 14, 1, "cmdoption-zipfile-c", "-c"], [422, 14, 1, "cmdoption-zipfile-e", "-e"], [422, 14, 1, "cmdoption-zipfile-l", "-l"], [422, 14, 1, "cmdoption-zipfile-t", "-t"]], "zipfile.Path": [[422, 8, 1, "", "exists"], [422, 8, 1, "", "is_dir"], [422, 8, 1, "", "is_file"], [422, 8, 1, "", "iterdir"], [422, 8, 1, "", "joinpath"], [422, 7, 1, "", "name"], [422, 8, 1, "", "open"], [422, 8, 1, "", "read_bytes"], [422, 8, 1, "", "read_text"], [422, 9, 1, "", "stem"], [422, 9, 1, "", "suffix"], [422, 9, 1, "", "suffixes"]], "zipfile.PyZipFile": [[422, 8, 1, "", "writepy"]], "zipfile.ZipFile": [[422, 8, 1, "", "close"], [422, 7, 1, "", "comment"], [422, 7, 1, "", "debug"], [422, 8, 1, "", "extract"], [422, 8, 1, "", "extractall"], [422, 7, 1, "", "filename"], [422, 8, 1, "", "getinfo"], [422, 8, 1, "", "infolist"], [422, 8, 1, "", "mkdir"], [422, 8, 1, "", "namelist"], [422, 8, 1, "", "open"], [422, 8, 1, "", "printdir"], [422, 8, 1, "", "read"], [422, 8, 1, "", "setpassword"], [422, 8, 1, "", "testzip"], [422, 8, 1, "", "write"], [422, 8, 1, "", "writestr"]], "zipfile.ZipInfo": [[422, 7, 1, "", "CRC"], [422, 7, 1, "", "comment"], [422, 7, 1, "", "compress_size"], [422, 7, 1, "", "compress_type"], [422, 7, 1, "", "create_system"], [422, 7, 1, "", "create_version"], [422, 7, 1, "", "date_time"], [422, 7, 1, "", "external_attr"], [422, 7, 1, "", "extra"], [422, 7, 1, "", "extract_version"], [422, 7, 1, "", "file_size"], [422, 7, 1, "", "filename"], [422, 7, 1, "", "flag_bits"], [422, 8, 1, "", "from_file"], [422, 7, 1, "", "header_offset"], [422, 7, 1, "", "internal_attr"], [422, 8, 1, "", "is_dir"], [422, 7, 1, "", "reserved"], [422, 7, 1, "", "volume"]], "zipimport": [[423, 6, 1, "", "ZipImportError"], [423, 11, 1, "", "zipimporter"]], "zipimport.zipimporter": [[423, 7, 1, "", "archive"], [423, 8, 1, "", "create_module"], [423, 8, 1, "", "exec_module"], [423, 8, 1, "", "find_spec"], [423, 8, 1, "", "get_code"], [423, 8, 1, "", "get_data"], [423, 8, 1, "", "get_filename"], [423, 8, 1, "", "get_source"], [423, 8, 1, "", "invalidate_caches"], [423, 8, 1, "", "is_package"], [423, 8, 1, "", "load_module"], [423, 7, 1, "", "prefix"]], "zlib.Compress": [[424, 8, 1, "", "compress"], [424, 8, 1, "", "copy"], [424, 8, 1, "", "flush"]], "zlib.Decompress": [[424, 8, 1, "", "copy"], [424, 8, 1, "", "decompress"], [424, 7, 1, "", "eof"], [424, 8, 1, "", "flush"], [424, 7, 1, "", "unconsumed_tail"], [424, 7, 1, "", "unused_data"]], "zlib": [[424, 9, 1, "", "ZLIB_RUNTIME_VERSION"], [424, 9, 1, "", "ZLIB_VERSION"], [424, 12, 1, "", "adler32"], [424, 12, 1, "", "compress"], [424, 12, 1, "", "compressobj"], [424, 12, 1, "", "crc32"], [424, 12, 1, "", "decompress"], [424, 12, 1, "", "decompressobj"], [424, 6, 1, "", "error"]], "zoneinfo": [[425, 6, 1, "", "InvalidTZPathWarning"], [425, 9, 1, "", "TZPATH"], [425, 11, 1, "", "ZoneInfo"], [425, 6, 1, "", "ZoneInfoNotFoundError"], [425, 12, 1, "", "available_timezones"], [425, 12, 1, "", "reset_tzpath"]], "zoneinfo.ZoneInfo": [[425, 8, 1, "", "clear_cache"], [425, 8, 1, "", "from_file"], [425, 7, 1, "", "key"], [425, 8, 1, "", "no_cache"]], "json.tool": [[262, 14, 1, "cmdoption-json.tool-indent", "--compact"], [262, 14, 1, "cmdoption-json.tool-h", "--help"], [262, 14, 1, "cmdoption-json.tool-indent", "--indent"], [262, 14, 1, "cmdoption-json.tool-json-lines", "--json-lines"], [262, 14, 1, "cmdoption-json.tool-no-ensure-ascii", "--no-ensure-ascii"], [262, 14, 1, "cmdoption-json.tool-indent", "--no-indent"], [262, 14, 1, "cmdoption-json.tool-sort-keys", "--sort-keys"], [262, 14, 1, "cmdoption-json.tool-indent", "--tab"], [262, 14, 1, "cmdoption-json.tool-h", "-h"], [262, 14, 1, "cmdoption-json.tool-arg-infile", "infile"], [262, 14, 1, "cmdoption-json.tool-arg-outfile", "outfile"]], "python--m-py_compile": [[311, 14, 1, "cmdoption-python-m-py_compile", "-"], [311, 14, 1, "cmdoption-python-m-py_compile-q", "--quiet"], [311, 14, 1, "cmdoption-python-m-py_compile-q", "-q"], [311, 14, 1, "cmdoption-python-m-py_compile-arg-file", "&lt;file&gt;"]], "python--m-sqlite3-[-h]-[-v]-[filename]-[sql]": [[340, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-h", "--help"], [340, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-v", "--version"], [340, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-h", "-h"], [340, 14, 1, "cmdoption-python-m-sqlite3-h-v-filename-sql-v", "-v"]], "unittest-discover": [[388, 14, 1, "cmdoption-unittest-discover-p", "--pattern"], [388, 14, 1, "cmdoption-unittest-discover-s", "--start-directory"], [388, 14, 1, "cmdoption-unittest-discover-t", "--top-level-directory"], [388, 14, 1, "cmdoption-unittest-discover-v", "--verbose"], [388, 14, 1, "cmdoption-unittest-discover-p", "-p"], [388, 14, 1, "cmdoption-unittest-discover-s", "-s"], [388, 14, 1, "cmdoption-unittest-discover-t", "-t"], [388, 14, 1, "cmdoption-unittest-discover-v", "-v"]]}, "objtypes": {"0": "c:member", "1": "c:macro", "2": "c:function", "3": "c:functionParam", "4": "c:type", "5": "c:struct", "6": "py:exception", "7": "py:attribute", "8": "py:method", "9": "py:data", "10": "py:module", "11": "py:class", "12": "py:function", "13": "std:pdbcommand", "14": "std:cmdoption", "15": "std:envvar", "16": "std:opcode", "17": "std:monitoring-event", "18": "std:2to3fixer"}, "objnames": {"0": ["c", "member", "C \u6210\u54e1\u51fd\u6578"], "1": ["c", "macro", "C \u5de8\u96c6"], "2": ["c", "function", "C \u51fd\u5f0f"], "3": ["c", "functionParam", "C \u51fd\u5f0f\u53c3\u6578"], "4": ["c", "type", "C \u578b\u5225"], "5": ["c", "struct", "C \u7d50\u69cb"], "6": ["py", "exception", "Python \u4f8b\u5916"], "7": ["py", "attribute", "Python \u5c6c\u6027"], "8": ["py", "method", "Python \u65b9\u6cd5"], "9": ["py", "data", "Python \u8cc7\u6599"], "10": ["py", "module", "Python \u6a21\u7d44"], "11": ["py", "class", "Python \u985e\u5225"], "12": ["py", "function", "Python \u51fd\u5f0f"], "13": ["std", "pdbcommand", "pdbcommand"], "14": ["std", "cmdoption", "\u7a0b\u5f0f\u9078\u9805"], "15": ["std", "envvar", "\u74b0\u5883\u8b8a\u6578"], "16": ["std", "opcode", "opcode"], "17": ["std", "monitoring-event", "monitoring-event"], "18": ["std", "2to3fixer", "2to3fixer"]}, "titleterms": {"python": [0, 1, 15, 32, 33, 34, 35, 42, 68, 70, 72, 73, 74, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 92, 93, 95, 96, 97, 100, 103, 104, 105, 109, 111, 112, 114, 158, 159, 163, 176, 180, 188, 191, 193, 214, 254, 263, 264, 266, 267, 274, 293, 297, 299, 308, 311, 312, 315, 324, 330, 333, 340, 354, 355, 358, 362, 367, 369, 377, 378, 380, 384, 386, 421, 426, 433, 437, 438, 440, 445, 448, 449, 450, 451, 452, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "bug": [1, 33, 85, 376], "abstract": [2, 75, 100, 122, 161, 250, 253, 468], "object": [2, 8, 9, 17, 23, 24, 27, 42, 44, 49, 50, 56, 58, 60, 61, 63, 64, 75, 79, 84, 85, 93, 94, 99, 100, 101, 102, 120, 126, 132, 139, 157, 177, 179, 183, 186, 190, 203, 206, 208, 226, 235, 255, 259, 262, 267, 268, 281, 283, 293, 295, 299, 301, 312, 319, 321, 325, 328, 330, 338, 340, 344, 348, 353, 359, 365, 384, 389, 395, 402, 403, 405, 408, 410, 416, 419, 422, 428, 465, 466, 468, 469, 473, 477], "layer": [2, 66, 110, 478], "heap": [3, 61, 63, 100, 236], "api": [4, 5, 8, 10, 14, 30, 32, 33, 34, 42, 57, 73, 86, 94, 96, 115, 123, 124, 126, 130, 167, 193, 196, 207, 210, 230, 251, 299, 340, 344, 348, 382, 399, 410, 413, 421, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "abi": [4, 57, 472, 475, 481], "pars": [5, 120, 207, 292, 304, 314, 331, 377, 394, 413, 469, 472, 475, 480, 481, 482], "argument": [5, 85, 90, 120, 176, 292, 293, 348, 353, 390, 428, 441, 461, 477, 479], "string": [5, 64, 78, 84, 85, 94, 106, 109, 259, 292, 319, 344, 345, 346, 347, 348, 425, 435, 441, 446, 462, 465, 466, 468, 470, 473, 474, 476, 479, 480, 481, 482], "and": [5, 7, 23, 25, 33, 58, 64, 71, 72, 73, 75, 76, 77, 79, 85, 92, 93, 94, 95, 96, 100, 102, 106, 108, 109, 110, 120, 125, 126, 128, 132, 133, 139, 146, 151, 158, 161, 169, 176, 183, 186, 194, 199, 206, 215, 216, 226, 230, 235, 243, 247, 250, 252, 255, 259, 260, 262, 266, 268, 270, 275, 283, 292, 293, 299, 304, 308, 313, 319, 324, 328, 332, 333, 337, 340, 341, 343, 344, 347, 353, 358, 364, 365, 366, 369, 371, 382, 384, 385, 386, 388, 389, 390, 410, 411, 413, 419, 425, 428, 429, 430, 432, 435, 456, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "buffer": [5, 7, 48, 63, 102, 133, 255, 258, 299, 320, 428, 474, 476, 481], "build": [5, 71, 73, 77, 96, 386, 412, 413, 456, 463, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "valu": [5, 73, 84, 85, 94, 95, 120, 167, 176, 181, 186, 262, 292, 340, 405, 427, 428, 430], "boolean": [6, 94, 292, 344, 430, 465], "protocol": [7, 10, 40, 47, 48, 49, 54, 75, 100, 133, 167, 242, 248, 256, 305, 335, 388, 432, 474, 476, 478, 479, 481], "structur": [7, 63, 102, 167, 176, 273, 394, 429, 435], "request": [7, 338, 393, 395, 479], "type": [7, 58, 61, 63, 64, 75, 76, 94, 95, 100, 109, 120, 122, 176, 181, 183, 255, 276, 292, 299, 340, 344, 369, 375, 385, 386, 405, 407, 410, 427, 428, 436, 464, 465, 466, 467, 468, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482], "independ": [7, 466], "field": [7, 176, 181, 386, 472], "readon": 7, "format": [7, 101, 102, 247, 268, 283, 299, 344, 345, 347, 358, 421, 446, 452, 468, 469, 470, 471, 478, 479], "shape": [7, 384], "stride": 7, "suboffset": 7, "contigu": 7, "compound": [7, 384, 427], "complex": [7, 344, 390, 428], "array": [7, 8, 85, 121, 147, 176, 262, 472, 474, 476, 479], "numpi": 7, "style": [7, 102, 228, 344, 361, 376, 441, 467], "pil": 7, "relat": [7, 110, 250, 432, 467, 468, 474], "function": [7, 25, 27, 45, 64, 73, 85, 93, 94, 95, 100, 106, 108, 120, 163, 169, 176, 181, 191, 226, 251, 259, 261, 267, 268, 275, 282, 288, 299, 307, 318, 319, 323, 340, 348, 353, 384, 385, 388, 400, 419, 427, 428, 430, 441, 462, 463, 466, 467, 468, 470, 476, 478, 479, 480], "byte": [8, 9, 109, 163, 176, 344, 347, 394, 435, 468, 478], "call": [10, 73, 85, 95, 176, 215, 292, 389, 390, 430, 478, 481], "tp_call": 10, "vectorcal": [10, 481], "capsul": [11, 469], "cell": [12, 177], "extra": 13, "inform": [13, 92, 102, 281, 293, 322, 355], "unicod": [14, 23, 64, 109, 158, 358, 387, 462, 464, 465, 470, 475, 476], "context": [17, 102, 135, 169, 170, 186, 193, 247, 283, 340, 341, 344, 400, 428, 466, 467, 468, 476], "variabl": [17, 33, 101, 169, 170, 176, 181, 235, 292, 293, 355, 369, 461, 469, 479], "coroutin": [19, 139, 255, 385, 427, 428, 478], "datetim": [20, 183, 473, 475, 476, 479, 480, 481, 482], "descriptor": [21, 93, 126, 181, 188, 214, 293, 428, 464, 477, 479], "print": [23, 96, 120, 292, 381, 468, 470], "clear": 23, "rais": [23, 85, 101, 292, 436], "except": [23, 73, 85, 101, 102, 110, 120, 169, 193, 199, 213, 259, 292, 319, 333, 425, 427, 443, 467, 468, 469, 470, 473, 476], "issu": [23, 100, 214, 358, 461, 468], "warn": [23, 193, 267, 362, 400, 425, 463, 469, 473, 479, 480], "queri": [23, 28, 292, 293, 332, 340], "the": [23, 28, 33, 42, 66, 73, 76, 84, 85, 92, 95, 96, 100, 101, 102, 103, 106, 109, 120, 126, 132, 151, 176, 188, 193, 196, 214, 215, 216, 230, 233, 251, 255, 267, 270, 282, 283, 292, 293, 297, 308, 332, 337, 340, 344, 348, 352, 353, 354, 365, 369, 382, 384, 386, 400, 410, 411, 413, 416, 421, 425, 427, 428, 430, 432, 436, 456, 461, 464, 465, 467, 468, 469, 474, 475, 476, 477, 478, 479, 480, 481, 482], "error": [23, 73, 85, 110, 126, 158, 186, 188, 199, 281, 292, 314, 358, 393, 443, 444, 465, 474], "indic": 23, "signal": [23, 84, 126, 186, 214, 333, 388, 476, 478, 480, 482], "handl": [23, 102, 110, 126, 135, 177, 194, 243, 272, 292, 299, 340, 388, 405, 465, 468, 469, 477, 478], "recurs": 23, "control": [23, 28, 76, 340, 361, 384, 400, 403], "standard": [23, 158, 189, 212, 254, 262, 292, 344, 347, 385, 411, 432, 465, 482], "categori": [23, 400], "file": [24, 35, 64, 85, 101, 102, 109, 120, 126, 149, 167, 188, 189, 193, 214, 216, 235, 247, 250, 251, 268, 270, 272, 278, 282, 293, 304, 306, 320, 332, 354, 358, 369, 375, 422, 428, 451, 456, 461, 465, 475, 477, 478, 479, 480, 481], "float": [25, 186, 344, 428, 435, 466], "point": [25, 94, 186, 251, 435], "pack": [25, 347], "unpack": [25, 408, 441, 478], "frame": [26, 382, 428, 473, 479], "intern": [26, 96, 268, 344, 428], "support": [28, 33, 41, 45, 50, 51, 64, 75, 76, 94, 95, 102, 109, 128, 149, 155, 167, 169, 170, 230, 278, 312, 341, 358, 362, 371, 412, 413, 414, 465, 468, 477, 478, 479, 480, 481, 482], "cyclic": [28, 76], "garbag": [28, 76, 100, 227, 462], "collect": [28, 76, 100, 160, 161, 191, 386, 462, 469, 472, 475, 476, 477, 478, 479, 480, 481, 482], "collector": [28, 227], "state": [28, 33, 100, 214, 244, 255, 283, 299, 358, 376, 384], "generat": [29, 78, 95, 201, 255, 292, 304, 313, 344, 428, 430, 440, 464, 465, 466, 467, 478, 479], "pyhash": 30, "initi": [33, 34, 45, 73, 354, 478, 481], "final": [33, 75, 169, 402, 427, 467, 477, 483], "thread": [33, 84, 102, 115, 126, 139, 186, 258, 267, 333, 362, 365, 369, 452, 472, 473, 474, 475, 476, 477, 478, 480, 481], "befor": 33, "global": [33, 84, 100, 299, 353, 425, 436], "configur": [33, 34, 101, 102, 268, 334, 344, 355, 384, 425, 469, 475, 481], "interpret": [33, 100, 155, 157, 180, 255, 342, 347, 385, 421, 467, 468, 469, 474], "process": [33, 100, 102, 126, 132, 181, 273, 283, 293, 341, 363, 462, 468], "wide": 33, "paramet": [33, 73, 85, 102, 122, 176, 181, 293, 369, 386, 427, 441, 474, 481], "lock": [33, 138, 365, 476], "releas": [33, 469, 476, 477, 478, 479, 480, 481, 482, 483], "gil": [33, 474], "from": [33, 73, 79, 84, 85, 93, 96, 100, 102, 139, 169, 176, 206, 218, 282, 348, 384, 422, 423, 461, 465, 468], "extens": [33, 58, 71, 73, 75, 76, 77, 96, 100, 111, 179, 247, 266, 302, 476, 478], "code": [33, 85, 109, 110, 120, 126, 157, 159, 247, 250, 255, 344, 353, 388, 400, 428, 441, 461, 465, 473, 475, 476, 478, 482], "non": [33, 106, 262, 340, 341, 413, 477], "creat": [33, 61, 64, 79, 84, 85, 94, 95, 99, 102, 126, 139, 206, 235, 292, 340, 421, 428, 477], "caution": 33, "about": [33, 85, 151, 193, 462], "fork": 33, "sub": [33, 63, 120], "per": [33, 100, 353, 468, 474], "caveat": [33, 266, 421], "asynchron": [33, 255, 333, 338, 386, 428, 430, 479], "notif": [33, 93], "profil": [33, 308], "trace": [33, 380, 382], "advanc": [33, 101, 193, 468], "debugg": [33, 297], "local": [33, 64, 96, 230, 266, 353, 365, 461, 466, 472, 473, 474, 478, 479, 480], "storag": [33, 480], "specif": [33, 75, 95, 158, 334, 345, 376, 384, 386, 405, 465, 466, 467, 468, 469], "tss": 33, "dynam": [33, 93, 176, 385, 429], "alloc": [33, 42, 61, 75, 382, 465, 477], "tls": [33, 126, 341], "pywidestringlist": 34, "pystatus": 34, "pypreconfig": 34, "preiniti": 34, "with": [34, 71, 78, 79, 84, 85, 92, 94, 96, 99, 100, 102, 126, 137, 158, 169, 176, 186, 214, 243, 255, 267, 299, 331, 332, 340, 348, 365, 377, 386, 390, 402, 413, 421, 422, 427, 428, 429, 467, 468, 476, 478, 480, 481], "pyconfig": 34, "isol": [34, 100], "path": [34, 250, 294, 354, 355, 422, 432, 461, 472, 474, 479, 481], "py_runmain": 34, "py_getargcargv": 34, "multi": [34, 45, 258, 341, 452, 466, 475, 478], "phase": [34, 45, 478], "privat": [34, 128], "provision": [34, 476], "includ": 35, "iter": [37, 85, 94, 95, 204, 218, 259, 344, 388, 428, 430, 440, 466, 470, 478], "list": [38, 78, 85, 95, 96, 99, 147, 320, 344, 427, 430, 441, 442, 449, 452, 462, 468, 470], "map": [40, 51, 63, 64, 167, 251, 276, 278, 344, 410, 427, 428], "data": [41, 76, 85, 94, 95, 101, 109, 110, 176, 181, 270, 298, 299, 307, 347, 365, 369, 425, 452, 461, 466, 470, 473, 481], "marshal": [41, 274, 299, 477], "domain": [42, 158], "raw": [42, 64, 85, 258, 319], "memori": [42, 270, 278, 341, 344, 382, 477, 478], "interfac": [42, 78, 79, 99, 151, 190, 191, 227, 259, 293, 311, 320, 337, 358, 368, 369, 380, 388, 395, 406, 416, 422, 475], "default": [42, 85, 120, 181, 292, 340, 341, 358, 389, 400, 422, 461, 469, 477], "custom": [42, 93, 94, 101, 102, 120, 128, 132, 167, 176, 180, 203, 259, 268, 270, 283, 299, 308, 340, 428, 461, 477, 479, 480], "debug": [42, 95, 96, 126, 151, 193, 247, 456, 469, 481], "hook": [42, 250, 320, 334, 432, 463, 465, 481], "on": [42, 77, 84, 95, 99, 151, 214, 226, 230, 247, 333, 337, 341, 344, 348, 353, 463], "pymalloc": [42, 465], "arena": 42, "tracemalloc": [42, 382, 477, 479, 480, 482], "memoryview": [43, 344, 469, 476], "instanc": [44, 85, 93, 94, 99, 181, 197, 299, 344, 428], "method": [44, 64, 73, 76, 78, 79, 84, 85, 93, 94, 100, 103, 106, 120, 126, 169, 173, 283, 288, 292, 337, 340, 344, 384, 390, 402, 410, 428, 430, 440, 446, 462, 466, 467, 470, 478, 479, 480, 482], "modul": [45, 73, 84, 85, 92, 95, 99, 100, 102, 106, 108, 151, 168, 181, 230, 250, 259, 267, 279, 283, 299, 308, 312, 324, 340, 348, 354, 369, 384, 388, 423, 428, 432, 450, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 475, 478, 479, 480], "singl": [45, 84, 102, 169], "low": [45, 115, 337, 474], "level": [45, 66, 72, 101, 102, 106, 115, 151, 259, 262, 267, 328, 329, 337, 348, 478], "creation": [45, 99, 293, 338, 385, 399, 428, 479], "lookup": [45, 93, 428], "none": [46, 428], "number": [47, 63, 85, 110, 169, 221, 262, 289, 293, 428, 449, 468], "implement": [50, 79, 84, 102, 126, 169, 250, 262, 321, 411, 428, 434, 476, 479, 480], "for": [51, 64, 73, 85, 92, 96, 101, 102, 109, 120, 126, 149, 155, 161, 169, 176, 177, 179, 190, 228, 243, 250, 253, 266, 292, 299, 319, 323, 328, 333, 338, 341, 358, 362, 378, 384, 385, 386, 400, 406, 412, 413, 414, 415, 416, 427, 428, 430, 432, 441, 461, 465, 466, 467, 468, 469, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482], "perf": [51, 104], "reflect": 53, "sequenc": [54, 60, 63, 85, 344, 348, 427, 428, 442], "ellipsi": [56, 344, 428], "base": [58, 85, 102, 133, 157, 158, 161, 213, 230, 250, 253, 283, 365, 415, 432, 468, 469, 475, 480], "macro": 58, "access": [58, 64, 94, 100, 167, 176, 251, 252, 265, 266, 268, 355, 366, 405, 419, 428, 464, 474, 480], "attribut": [58, 75, 76, 85, 92, 93, 94, 102, 235, 255, 267, 292, 293, 340, 344, 352, 416, 428, 430, 432, 463, 464, 479, 480], "of": [58, 84, 85, 93, 94, 95, 99, 100, 101, 102, 149, 167, 169, 181, 188, 255, 259, 279, 283, 293, 299, 332, 333, 344, 348, 352, 354, 382, 384, 386, 389, 390, 399, 400, 419, 422, 428, 429, 435, 456, 461, 462, 469, 470, 474, 477, 478, 479, 480, 481], "member": [58, 93, 94, 255], "flag": [58, 94, 106, 120, 169, 193, 255, 292, 319, 456], "defin": [58, 75, 76, 85, 99, 100, 268, 292, 475], "getter": [58, 100], "setter": [58, 100], "tupl": [60, 78, 85, 160, 344, 352, 386, 442], "struct": [60, 347, 476, 477, 479], "quick": [63, 120, 167, 186, 384], "refer": [63, 73, 75, 85, 95, 109, 176, 283, 292, 308, 340, 369, 384, 402, 413, 430, 432, 452, 463], "tp": 63, "slot": [63, 64, 100], "typedef": 63, "pytypeobject": 63, "definit": [63, 93, 259, 427, 440, 479], "pyobject": 63, "pyvarobject": 63, "static": [63, 85, 93, 100, 255, 428, 473, 474], "async": [63, 122, 427, 478], "charact": [64, 106, 177, 262, 347], "properti": [64, 93, 109, 468], "encod": [64, 109, 158, 198, 262, 340, 394, 435, 448, 465, 472, 479], "system": [64, 72, 151, 212, 215, 293, 313, 348, 386, 422, 432, 456, 463, 477, 478, 479], "wchar_t": 64, "built": [64, 95, 96, 344, 385, 428, 462, 466, 480], "in": [64, 72, 73, 77, 79, 84, 85, 95, 100, 101, 102, 109, 126, 139, 158, 169, 176, 181, 193, 247, 270, 291, 292, 340, 344, 365, 384, 385, 386, 410, 428, 461, 462, 463, 466, 470, 472, 473, 474, 477, 478, 479, 480, 481, 482], "codec": [64, 158, 465, 472, 475, 476, 477], "generic": [64, 75, 344, 386, 427, 428, 455, 473, 480, 482], "utf": [64, 158, 293, 340, 461, 479, 480], "32": 64, "16": 64, "escap": 64, "latin": 64, "ascii": [64, 146, 178, 394], "mbcs": [64, 158], "window": [64, 77, 86, 92, 131, 158, 177, 189, 247, 303, 348, 369, 384, 404, 405, 406, 461, 465, 468, 469, 473, 476, 479, 480, 483], "veri": [66, 72], "high": [66, 72, 329, 348], "setuptool": 71, "app": 72, "embed": [72, 354, 462], "beyond": [72, 120], "an": [72, 73, 79, 84, 85, 93, 102, 109, 169, 183, 194, 196, 205, 250, 262, 348, 399, 461, 469], "overview": [72, 93, 251, 427], "pure": [72, 93], "extend": [72, 85, 128, 251, 292, 293, 399, 462, 465], "compil": [72, 73, 106, 159, 163, 425, 456, 481], "link": [72, 120, 176], "under": 72, "unix": [72, 77, 84, 126, 151, 173, 184, 220, 231, 303, 356, 391, 460], "like": [72, 102, 232], "intermezzo": 73, "tabl": [73, 281, 299], "linkag": 73, "extract": [73, 358, 422], "keyword": [73, 85, 181, 263, 435, 441, 472, 478, 479], "arbitrari": [73, 79, 101, 292, 441, 473], "count": 73, "ownership": 73, "rule": [73, 331, 333, 464], "thin": 73, "ice": 73, "null": [73, 344], "pointer": [73, 176], "write": [73, 85, 109, 128, 133, 270, 319, 340, 358, 467, 468], "provid": [73, 76, 101, 299, 355], "cpython": [74, 78, 96, 98, 472, 473, 474, 477, 479, 480, 481, 482], "runtim": [74, 86, 282, 315, 425, 480, 481], "assort": 75, "topic": 75, "de": [75, 149], "present": [75, 470], "manag": [75, 93, 100, 102, 135, 169, 170, 197, 244, 283, 340, 344, 369, 375, 400, 428, 467, 468], "comparison": [75, 94, 99, 108, 216, 259, 299, 430, 463, 470], "weak": [75, 402, 452, 463], "more": [75, 92, 99, 102, 106, 384, 390, 474], "suggest": 75, "tutori": [76, 93, 101, 176, 186, 292, 340], "basic": [76, 110, 193, 375, 420, 428], "adding": [76, 102, 292, 469, 479], "to": [76, 79, 84, 85, 94, 100, 101, 102, 109, 190, 250, 251, 259, 265, 266, 268, 276, 293, 299, 308, 340, 348, 355, 369, 384, 386, 462, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482], "exampl": [76, 93, 102, 103, 155, 161, 167, 169, 188, 190, 193, 200, 279, 292, 319, 332, 343, 358, 381, 395, 399, 419], "finer": [76, 94, 476], "over": [76, 85, 218], "subclass": [76, 85, 94, 102, 243, 321, 428], "other": [76, 79, 85, 94, 99, 101, 102, 120, 139, 259, 282, 292, 299, 344, 353, 386, 435, 462, 463, 465, 469, 470, 477, 478, 479, 480], "cookbook": [77, 94, 102], "approach": [77, 470, 472], "differ": [77, 85, 94, 190, 235, 382, 384], "between": [77, 85, 109, 146, 283, 292, 435], "use": [77, 84, 85, 94, 96, 99, 101, 102, 106, 151, 163, 169, 196, 235, 270, 279, 282, 283, 308, 314, 340, 348, 353, 365, 375, 377, 384, 388, 395, 425, 428, 467, 468, 474, 481], "dlls": [77, 176], "practic": [77, 85, 93, 326], "self": [78, 85, 341, 473, 481], "express": [78, 79, 95, 106, 109, 319, 430, 436, 466, 467, 481], "index": [78, 85, 369, 465, 467], "len": 78, "join": [78, 435], "switch": 78, "case": [78, 100, 388, 427, 463], "lambda": [78, 85, 95, 430, 441], "dictionari": [78, 102, 268, 430, 442, 469, 471, 475, 476, 482], "sort": [78, 85, 108], "spec": [78, 432], "goto": 78, "if": [78, 85, 101, 183, 250, 427, 441], "while": [78, 427], "def": 78, "class": [78, 79, 85, 93, 94, 100, 102, 120, 157, 158, 161, 181, 199, 213, 216, 230, 250, 253, 281, 283, 299, 308, 312, 316, 329, 344, 347, 384, 385, 388, 395, 415, 425, 427, 428, 435, 440, 464, 467, 468, 473, 476, 479], "how": [79, 84, 85, 94, 102, 193, 292, 340, 369, 384], "can": [79, 84, 85, 250, 299], "evalu": [79, 108, 429, 430, 479, 480], "py_buildvalu": 79, "pyerr_print": 79, "stdout": [79, 84], "stderr": [79, 84], "do": [79, 84, 85, 369], "make": [79, 85, 100, 319, 384, 462, 469, 474, 478, 479], "linux": [79, 96, 104, 111, 293, 303, 460], "__builtin_new": 79, "__pure_virtu": 79, "some": 79, "through": 79, "inherit": [79, 181, 293, 384, 440, 464, 477], "beta": [80, 483], "www": [80, 84], "org": [80, 461], "monti": 80, "gui": [81, 102, 281, 459], "tkinter": [81, 189, 247, 369, 370, 371, 372, 373, 374, 375, 376, 473, 474, 478, 479, 480, 481], "tk": [81, 368, 369, 375, 376, 469], "key": [81, 108, 235, 247, 283, 341, 476], "bind": [81, 247, 340, 369, 429], "find": [84, 85, 176, 279, 319, 413, 461], "or": [84, 85, 102, 120, 126, 176, 183, 344, 348, 380, 381, 427, 441], "applic": [84, 92, 93, 102, 158, 230, 247, 347, 421, 461, 467, 478], "perform": [84, 85, 106, 258, 299, 456, 470], "task": [84, 124, 126, 128, 139], "math": [84, 275, 473, 474, 475, 476, 478, 479, 480, 481, 482], "py": [84, 96, 114, 473], "socket": [84, 102, 107, 110, 126, 133, 136, 337, 341, 362, 426, 472, 473, 475, 476, 477, 478, 479, 480, 481, 482], "regex": 84, "script": [84, 151, 279, 384, 461, 467], "curs": [84, 92, 177, 178, 179, 472, 476, 478, 481, 482], "termcap": 84, "is": [84, 85, 92, 101, 183, 308, 466, 470], "there": [84, 85], "equival": [84, 85, 93], "onexit": 84, "whi": [84, 85, 466], "don": 84, "my": [84, 85], "handler": [84, 101, 102, 110, 126, 140, 158, 214, 267, 268, 269, 333, 338, 369, 407, 415], "work": [84, 85, 126, 186, 193, 340, 386, 422], "document": [84, 201, 313, 410, 413, 420, 441, 468, 469, 476, 477, 481, 483], "doc": 84, "get": [84, 85, 99, 132, 382, 384], "keypress": [84, 86], "at": 84, "time": [84, 101, 102, 183, 366, 425, 465, 473, 475, 476, 478, 479, 480, 481, 482], "parcel": 84, "out": [84, 100, 299, 481], "among": 84, "bunch": 84, "worker": [84, 283], "what": [84, 85, 92, 101, 193, 292, 299, 308, 369, 462], "kind": [84, 93], "mutat": 84, "are": [84, 85, 94, 193, 292, 477], "safe": [84, 100, 477], "seem": 84, "os": [84, 213, 293, 294, 296, 348, 362, 468, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482], "read": [84, 100, 109, 126, 133, 252, 270, 358], "pipe": [84, 126, 283, 301], "popen": [84, 348, 475], "rs232": 84, "doesn": 84, "close": [84, 93], "sys": [84, 120, 352, 353, 354, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482], "stdin": 84, "realli": 84, "it": [84, 85, 110, 193, 292], "network": [84, 99, 102, 126, 259, 260, 337, 338, 469], "internet": [84, 256, 346], "cgi": [84, 151, 152, 478], "submiss": 84, "post": [84, 181], "html": [84, 238, 239, 240, 475, 476, 477], "avoid": [84, 100, 102], "block": [84, 102, 341, 382, 413, 427, 470], "connect": [84, 126, 133, 268, 283, 337, 340], "you": [84, 85, 482], "persist": [84, 298, 299, 330], "unboundlocalerror": 85, "loop": [85, 126, 128, 133], "all": [85, 283, 292, 319, 382, 469, 478, 479], "return": [85, 93, 176, 436, 461], "same": [85, 102, 481], "result": [85, 342, 394], "best": [85, 326, 341], "import": [85, 114, 122, 211, 250, 251, 267, 268, 269, 362, 369, 390, 423, 432, 436, 450, 463, 465, 466, 467, 468, 473, 476, 477], "share": [85, 176, 283, 476], "pass": [85, 95, 102, 176, 436, 441], "option": [85, 120, 193, 228, 247, 292, 358, 369, 376, 380, 422, 455, 456, 479], "one": [85, 100, 149], "anoth": 85, "output": [85, 102, 247, 332, 452], "by": [85, 176, 279, 395, 469, 477], "higher": [85, 151, 226], "order": [85, 103, 176, 181, 226, 268, 292, 347, 389, 390, 430, 469, 470, 471, 479], "up": [85, 96, 110, 169, 250], "comma": [85, 465], "oper": [85, 95, 108, 226, 243, 259, 282, 291, 293, 332, 341, 344, 430, 435, 464, 470, 473, 477, 478, 482], "preced": [85, 389, 430], "possibl": [85, 384], "obfusc": 85, "liner": 85, "doe": [85, 369], "slash": 85, "mean": 85, "22": 85, "10": [85, 88, 382, 472, 479, 480, 481, 483], "int": [85, 344], "liter": [85, 109, 122, 427, 430, 435, 446, 468, 473, 476, 479], "instead": [85, 470], "syntaxerror": [85, 472], "modifi": [85, 106, 380, 461], "place": [85, 291], "perl": 85, "chomp": 85, "remov": [85, 461, 467, 468, 469, 478, 479, 480, 481, 482], "trail": 85, "newlin": [85, 465], "scanf": [85, 319], "sscanf": 85, "unicodedecodeerror": 85, "unicodeencodeerro": 85, "end": [85, 92, 103], "odd": 85, "backslash": [85, 106], "program": [85, 92, 109, 177, 230, 266, 283, 369, 429], "too": 85, "slow": 85, "speed": 85, "most": 85, "effici": [85, 332], "way": 85, "concaten": [85, 435], "mani": 85, "togeth": [85, 292], "convert": [85, 109, 146, 340, 348], "negat": 85, "revers": [85, 466], "duplic": [85, 94], "multipl": [85, 100, 102, 218, 389, 464, 478], "item": [85, 376], "multidimension": 85, "appli": 85, "a_tupl": 85, "when": [85, 94, 99], "addit": [85, 207, 344, 385, 461, 478], "want": 85, "complic": 85, "schwartzian": 85, "transform": [85, 158, 473], "check": [85, 193, 250, 292, 319, 428, 482], "given": 85, "deleg": [85, 100, 476], "deriv": [85, 94, 235], "that": [85, 93, 94, 95, 102, 266], "organ": [85, 388], "easier": 85, "chang": [85, 100, 101, 230, 384, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482], "overload": 85, "constructor": [85, 128, 230, 348], "tri": [85, 169, 427, 467], "__spam": 85, "_someclassname__spam": 85, "__del__": [85, 402], "but": 85, "not": [85, 100, 344, 384], "delet": [85, 462], "id": [85, 366], "appear": [85, 384], "be": [85, 250, 299], "uniqu": [85, 94], "cach": [85, 432, 481], "pyc": [85, 475, 480], "current": [85, 126, 255, 382], "name": [85, 93, 94, 106, 120, 158, 262, 293, 352, 358, 385, 428, 429, 430, 465, 476], "have": 85, "mutual": [85, 120], "each": 85, "__import__": 85, "pyd": 86, "dll": 86, "tab": [86, 376, 447], "ms": [86, 282, 404], "win": 86, "crt": 86, "l1": 86, "annot": [88, 344, 429, 436, 441, 479, 480], "__annotations__": 88, "argpars": [89, 120, 469, 472, 475, 477, 478, 480], "clinic": [90, 477], "start": [92, 167, 186, 283, 384], "pad": 92, "display": [92, 101, 126, 177, 382, 430, 463], "text": [92, 158, 177, 193, 247, 265, 319, 340, 344, 363, 364, 374, 410, 470], "color": [92, 247, 384], "user": [92, 214, 247, 268, 308, 355, 368, 468], "input": [92, 177, 189, 218, 378, 384], "primer": 93, "simpl": [93, 106, 193, 235, 331, 436, 464, 465], "constant": [93, 177, 278, 314, 340, 348, 366, 377, 405], "thought": 93, "complet": [93, 247, 320, 323, 328, 447], "valid": [93, 407], "technic": 93, "introduct": [93, 109, 308], "invoc": [93, 348], "super": 93, "summari": [93, 281, 476, 477, 478, 479, 480, 481, 482], "logic": [93, 186, 259, 435], "automat": [93, 94, 247], "orm": 93, "__slots__": [93, 428, 472], "enum": [94, 211, 472, 473, 474, 477, 478, 479, 480], "howto": [94, 95, 109], "programmat": [94, 250, 380], "enumer": [94, 465], "their": [94, 319], "ensur": 94, "allow": 94, "restrict": [94, 299, 330, 395, 429], "dataclass": [94, 181, 472, 473, 480], "pickl": [94, 172, 299, 300, 425, 465, 476, 477, 478, 479, 481], "intenum": 94, "strenum": 94, "intflag": 94, "__new__": 94, "vs": [94, 319, 386, 470], "__init__": [94, 181], "__dunder__": [94, 211], "_sunder_": [94, 211], "_private__nam": 94, "mix": 94, "combin": [94, 341], "minutia": 94, "aka": 94, "omit": 94, "auto": 94, "descript": [94, 161, 314], "orderedenum": 94, "duplicatefreeenum": 94, "planet": 94, "timeperiod": 94, "enumtyp": 94, "formal": [95, 474], "provabl": 95, "modular": 95, "eas": 95, "test": [95, 151, 193, 341, 362, 388, 400, 430, 478, 483], "compos": 95, "comprehens": [95, 122, 442, 462, 474, 479], "into": [95, 102, 384, 394], "itertool": [95, 261, 472, 474, 475, 476, 480, 481], "new": [95, 292, 400, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482], "element": [95, 410, 413], "select": [95, 102, 189, 328, 341, 426, 475, 476, 477], "combinator": 95, "group": [95, 106, 120, 139, 213, 233, 292, 388, 427], "functool": [95, 226, 473, 475, 476, 477, 478, 480, 481], "small": 95, "revis": 95, "histori": [95, 320, 447], "acknowledg": 95, "general": [95, 292, 333, 478], "gdb": 96, "prerequisit": 96, "setup": 96, "sourc": [96, 109, 247, 250, 255, 378, 425, 465], "distro": 96, "develop": [96, 188, 247, 462, 468, 480], "mode": [96, 126, 186, 188, 235, 293, 469, 480], "pretti": [96, 307, 382], "printer": [96, 307], "down": 96, "bt": 96, "command": [96, 120, 155, 163, 190, 191, 228, 292, 293, 297, 311, 348, 358, 378, 380, 388, 422, 461, 469, 475, 477, 479], "dtrace": [98, 479], "systemtap": [98, 479], "tapset": 98, "ipaddress": [99, 259, 476, 477, 478, 480, 482], "address": [99, 259, 283], "note": [99, 186, 207, 333, 337, 338, 341, 376], "ip": [99, 259], "version": [99, 251, 292, 358, 400, 461, 475], "host": [99, 259], "inspect": [99, 255, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482], "as": [99, 101, 102, 169, 259, 347, 384, 427, 428, 467, 468, 481], "detail": [99, 161, 266, 268], "fail": [99, 478], "who": 100, "should": [100, 482], "this": 100, "background": [100, 266, 292], "enter": 100, "surpris": [100, 176], "edg": [100, 328], "opt": 100, "limit": [100, 262, 322, 344, 422, 461], "tp_travers": 100, "lower": 100, "tp_dealloc": 100, "overrid": [100, 400, 474], "tp_free": 100, "pyobject_new": 100, "regular": [100, 106, 109, 319, 432], "lifetim": [100, 128], "open": [100, 102, 110, 126, 252], "scope": [100, 429, 440, 463, 464], "lossless": 100, "convers": [100, 176, 259, 275, 344, 366, 430, 466], "log": [101, 102, 267, 268, 269, 283, 452, 465, 469, 473, 475, 476, 477, 478, 479, 480, 481], "messag": [101, 102, 196, 205, 207, 230, 235, 266, 271, 474], "date": [101, 126, 183, 465], "next": [101, 483], "step": 101, "flow": 101, "logger": [101, 102, 267], "formatt": [101, 102, 267], "happen": 101, "no": [101, 477], "librari": [101, 102, 112, 163, 176, 254, 259, 356, 468, 483], "dure": 101, "optim": 101, "resourc": [101, 102, 103, 252, 253, 322, 422, 474, 477, 480], "destin": 102, "server": [102, 126, 133, 245, 338, 341, 419, 420, 475, 480], "deal": 102, "send": 102, "receiv": 102, "event": [102, 126, 128, 138, 325, 333, 353, 365, 369, 376, 384], "across": 102, "run": [102, 126, 139, 247, 388, 461], "listen": [102, 283], "product": 102, "contextu": 102, "your": [102, 151, 176, 230, 292, 482], "loggeradapt": [102, 267], "impart": 102, "than": 102, "dict": [102, 344, 389, 390, 479], "filter": [102, 267, 270, 358, 380, 382, 400], "contextvar": [102, 170, 480], "concurr": [102, 125, 139, 164, 165, 166, 475, 478, 479, 480, 482], "futur": [102, 113, 126, 128, 129, 166, 436, 469, 475, 478, 479, 480, 482], "processpoolexecutor": [102, 166], "deploy": 102, "web": [102, 243, 403, 475], "gunicorn": 102, "uwsgi": 102, "rotat": 102, "altern": [102, 321, 434, 461], "logrecord": [102, 267], "queuehandl": [102, 268, 269], "queuelisten": [102, 268, 269], "zeromq": 102, "pynng": 102, "namer": 102, "elabor": 102, "multiprocess": [102, 283, 284, 468, 476, 477, 478, 479, 480, 481, 482], "insert": 102, "bom": [102, 158], "sent": 102, "sysloghandl": [102, 269], "dictconfig": 102, "particular": 102, "throughout": 102, "factori": [102, 139, 181, 259, 340], "speak": 102, "them": 102, "condit": [102, 138, 292, 365, 430, 442, 467], "email": [102, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 475, 476, 477, 478, 479], "utc": 102, "gmt": 102, "via": [102, 340, 461], "cli": 102, "starter": 102, "templat": [102, 189, 301, 452], "qt": 102, "syslog": [102, 356], "rfc5424": 102, "treat": 102, "stream": [102, 124, 133, 158, 218, 258, 299], "pattern": [102, 106, 122, 220, 384, 427, 428], "nullhandl": [102, 269], "lot": 102, "resolut": [103, 268, 429, 480], "begin": 103, "c3": 103, "bad": [103, 188], "third": 105, "parti": 105, "guid": [105, 292, 340], "match": [106, 120, 122, 220, 319, 390, 427, 428, 441], "repeat": [106, 262], "thing": 106, "plagu": 106, "power": [106, 275, 430], "metacharact": 106, "captur": [106, 427], "lookahead": 106, "assert": [106, 390, 436], "split": 106, "search": [106, 247, 251, 319, 354, 432], "replac": [106, 169, 247, 348, 432], "common": [106, 151, 344, 470], "problem": [106, 151], "versus": [106, 428], "greedi": 106, "re": [106, 181, 319, 388, 473, 476, 477, 478, 479, 480], "verbos": [106, 390], "feedback": 106, "ipc": 107, "partial": [108, 120, 226, 412, 467], "decor": [108, 169, 466, 468, 474], "undecor": 108, "compar": [109, 402], "filenam": [109, 220, 276], "tip": [109, 266], "awar": [109, 183, 478], "unknown": 109, "urllib": [110, 392, 393, 394, 395, 396, 472, 475, 476, 477, 478, 479, 480, 481, 482], "articl": 110, "url": [110, 392, 394, 395], "header": [110, 202, 203, 407, 476], "urlerror": 110, "httperror": 110, "wrap": [110, 364, 369, 389], "info": 110, "geturl": 110, "authent": [110, 283], "proxi": [110, 283, 389], "pip": [111, 210, 453, 469, 477], "binari": [111, 146, 158, 258, 344, 347, 419, 430, 452], "2to3": 112, "fixer": 112, "lib2to3": 112, "__future__": [113, 463], "__main__": [114, 432, 480], "__name__": 114, "idiomat": 114, "_thread": [115, 472], "abc": [116, 161, 250, 253, 289, 386, 472, 475, 476, 477, 478, 482], "aifc": [117, 477, 480], "aiff": 117, "parser": [120, 167, 207, 228, 240, 292, 314, 414, 416, 468, 482], "line": [120, 155, 163, 190, 191, 218, 228, 265, 292, 293, 311, 320, 358, 378, 380, 388, 422, 435, 461, 466, 469, 475], "core": [120, 462, 480, 483], "add_argu": 120, "argumentpars": 120, "prog": 120, "usag": [120, 193, 279, 322, 378, 380, 419], "epilog": 120, "parent": 120, "formatter_class": 120, "prefix_char": 120, "fromfile_prefix_char": 120, "argument_default": 120, "allow_abbrev": 120, "conflict_handl": 120, "add_help": 120, "exit_on_error": 120, "action": [120, 292], "narg": 120, "const": 120, "choic": 120, "requir": [120, 176, 251, 456], "metavar": 120, "dest": 120, "parse_arg": 120, "syntax": [120, 122, 413, 443, 468, 470, 474, 476, 478, 479], "invalid": [120, 432], "contain": [120, 161, 259, 428], "abbrevi": 120, "prefix": [120, 259, 355, 482], "argv": 120, "namespac": [120, 384, 413, 428, 432, 440, 476], "util": [120, 169, 176, 209, 250, 288, 302, 309, 362, 385, 407, 417], "filetyp": 120, "exclus": 120, "help": [120, 247, 292, 313, 384], "exit": [120, 140], "intermix": 120, "upgrad": [120, 126], "optpars": [120, 292, 465], "ast": [122, 468, 475, 479, 481, 482], "tree": [122, 235, 377, 412, 413], "grammar": 122, "node": [122, 410], "subscript": [122, 430], "await": [122, 125, 139, 428, 430, 478], "asyncio": [123, 125, 135, 170, 426, 472, 473, 474, 477, 478, 479, 480, 481, 482], "hello": [123, 126, 369], "world": [123, 126, 369], "queue": [124, 134, 236, 283, 316, 442, 480], "subprocess": [124, 126, 133, 137, 247, 348, 466, 476, 477, 478, 479, 480], "synchron": [124, 138, 283], "multithread": 125, "never": 125, "retriev": [125, 255, 381], "stop": 126, "schedul": [126, 139, 293, 325], "callback": [126, 176, 292, 353, 465], "delay": 126, "transfer": 126, "watch": 126, "direct": [126, 193, 250, 386, 463], "dns": 126, "execut": [126, 164, 193, 247, 324, 333, 353, 380, 428, 429, 461, 467], "pool": [126, 283], "enabl": [126, 469, 477], "call_soon": 126, "call_lat": 126, "set": [126, 132, 247, 250, 333, 344, 353, 369, 384, 428, 430, 442, 461, 465, 466], "sigint": 126, "sigterm": 126, "polici": [130, 132, 208, 476], "maco": [131, 247, 303, 456, 481, 482, 483], "watcher": 132, "transport": 133, "hierarchi": [133, 468, 476], "onli": [133, 181, 247, 441, 472, 480, 481], "datagram": 133, "tcp": [133, 136], "echo": [133, 136], "client": [133, 242, 243, 248, 283, 305, 335, 341, 419, 469, 475, 477, 478, 479, 480], "udp": 133, "exist": 133, "subprocess_exec": 133, "subprocessprotocol": 133, "prioriti": 134, "lifo": 134, "runner": 135, "keyboard": 135, "interrupt": [135, 422], "streamread": [136, 158], "streamwrit": [136, 158], "http": [136, 241, 242, 243, 244, 245, 407, 469, 475, 476, 477, 478, 479, 480, 482], "interact": [137, 157, 193, 429, 463, 467], "primit": [138, 139, 283, 386], "semaphor": [138, 365], "boundedsemaphor": 138, "barrier": [138, 365], "cancel": 139, "sleep": 139, "eager": 139, "shield": 139, "timeout": [139, 214, 337], "wait": [139, 328], "introspect": [139, 255, 386], "atexit": 140, "audioop": [141, 426, 477], "base64": [143, 472, 476, 477], "base16": 143, "base32": 143, "base85": 143, "secur": [143, 151, 235, 245, 268, 341, 348, 394, 456, 469, 472, 477, 480, 481, 482, 483], "consider": [143, 245, 268, 341, 348, 432], "bdb": [144, 472], "binascii": [146, 476, 479, 480], "bisect": [147, 472], "algorithm": [147, 251, 270, 384, 477], "builtin": [148, 429, 470, 481, 483], "bz2": [149, 476, 478], "bzip2": 149, "compress": [149, 270], "increment": [149, 158, 268], "shot": 149, "calendar": [150, 474, 480], "care": 151, "instal": [151, 281, 355, 461, 462, 477], "solut": 151, "cgitb": 152, "traceback": [152, 214, 381, 382, 428, 472, 473, 477, 478, 479], "chunk": 153, "iff": 153, "cmath": [154, 478, 479], "cmd": 155, "orient": [155, 384], "consol": [157, 282, 479], "registri": [158, 405, 461], "stateless": 158, "decod": [158, 262], "incrementalencod": 158, "incrementaldecod": 158, "streamreaderwrit": 158, "streamrecod": 158, "idna": 158, "internation": [158, 202, 230], "ansi": 158, "codepag": 158, "utf_8_sig": 158, "signatur": [158, 255], "codeop": 159, "chainmap": 160, "counter": 160, "dequ": 160, "defaultdict": 160, "namedtupl": 160, "ordereddict": 160, "userdict": 160, "userlist": 160, "userstr": 160, "recip": [161, 169, 186, 261, 340, 343], "colorsi": [162, 477], "compileal": [163, 478, 480, 482], "public": [163, 384], "executor": 166, "threadpoolexecutor": 166, "configpars": [167, 474, 475, 478], "datatyp": [167, 465], "fallback": 167, "ini": [167, 461], "interpol": 167, "behaviour": 167, "legaci": [167, 348, 395, 480], "rawconfigpars": 167, "site": [168, 334, 468, 472, 475, 479], "contextlib": [169, 386, 467, 468, 472, 473, 475, 476, 477, 478, 479, 480], "statement": [169, 365, 380, 427, 428, 436, 467, 468], "catch": 169, "__enter__": 169, "clean": 169, "ani": [169, 386, 389], "reusabl": 169, "reentrant": 169, "manual": [170, 308, 369], "copi": [171, 332], "shallow": 171, "deep": 171, "copyreg": 172, "crypt": [173, 476, 480], "hash": [173, 235, 344, 477, 480], "csv": [175, 474, 475, 478, 481], "dialect": 175, "ctype": [176, 283, 467, 468, 475, 481], "foreign": 176, "load": [176, 189, 388, 432], "fundament": 176, "continu": [176, 436, 441], "variad": [176, 473], "own": 176, "specifi": [176, 270, 386, 421, 469, 471], "prototyp": 176, "union": [176, 344], "align": [176, 347], "bit": [176, 255, 405, 470], "incomplet": 176, "export": 176, "size": [176, 235, 293, 332, 347, 382], "termin": [177, 293, 309, 332], "textpad": 177, "widget": [177, 369, 374, 375, 376, 469], "textbox": 177, "panel": 179, "stack": [179, 255, 381, 442], "content": [181, 197, 314], "init": [181, 320], "frozen": [181, 473], "mutabl": [181, 344, 428], "naiv": [183, 343], "avail": [183, 400], "determin": [183, 428], "timedelta": 183, "tzinfo": 183, "timezon": [183, 366], "strftime": 183, "strptime": 183, "dbm": [184, 475, 477, 478, 479, 480], "databas": [184, 233, 281, 387], "gnu": [184, 230, 320, 323], "ndbm": 184, "dumb": 184, "decim": [186, 452, 466, 475, 476, 479, 480], "fix": [186, 292, 463, 465, 469], "arithmet": [186, 259, 430], "operand": 186, "round": 186, "mitig": 186, "off": [186, 353], "increas": 186, "precis": [186, 474], "special": [186, 275, 344, 384, 386, 428, 432, 465, 470], "faq": [186, 473], "effect": [188, 390], "resourcewarn": 188, "dialog": 189, "simpledialog": 189, "filedialog": 189, "nativ": [189, 347], "save": 189, "commondialog": 189, "difflib": [190, 478], "helper": [190, 348, 386], "comput": [190, 382], "delta": 190, "sequencematch": 190, "ndiff": 190, "dis": [191, 474, 475, 477, 480], "bytecod": [191, 432, 473, 479, 480, 481, 482], "analysi": [191, 331, 435], "instruct": 191, "opcod": [191, 473], "doctest": [193, 466, 472, 477, 478], "docstr": [193, 384], "which": 193, "examin": 193, "recogn": 193, "unittest": [193, 388, 389, 390, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "doctestfind": 193, "doctestpars": 193, "doctestrunn": 193, "outputcheck": 193, "soapbox": 193, "mime": [194, 197, 201, 206, 276, 317], "packag": [194, 251, 252, 302, 432, 450, 461, 463, 465, 467, 468, 476], "charset": 195, "repres": [196, 205], "compat32": 196, "contentmanag": 197, "defect": 199, "headerregistri": 203, "scratch": 206, "feedpars": 207, "miscellan": [209, 270, 283, 293, 375, 455, 470], "ensurepip": [210, 469, 474, 477], "bootstrap": [210, 469, 477], "errno": 212, "symbol": 212, "faulthandl": [214, 472, 476, 478, 479], "dump": 214, "fault": [214, 419], "after": 214, "fcntl": [215, 473, 482], "ioctl": 215, "filecmp": [216, 477], "directori": [216, 281, 293, 332, 468, 475, 478], "dircmp": 216, "fileinput": [218, 472, 479], "fnmatch": 220, "fraction": [221, 468, 473, 474, 475], "ration": 221, "ftplib": [223, 474, 476, 482], "ftp": [223, 475], "ftp_tls": 223, "callabl": [226, 255, 340, 386, 428], "gc": [227, 472, 476, 477, 480, 481, 482], "getopt": 228, "getpass": 229, "gettext": [230, 480, 481], "multilingu": 230, "servic": [230, 264, 315], "nulltransl": 230, "gnutransl": 230, "solari": 230, "catalog": [230, 266], "languag": [230, 264, 384, 462], "fli": 230, "defer": 230, "translat": [230, 384], "glob": [231, 472, 477, 478], "graphlib": [232, 482], "graph": 232, "grp": [233, 479], "gzip": [234, 424, 474, 475, 478, 481], "hashlib": [235, 467, 472, 473, 474, 475, 477, 479, 482], "digest": 235, "shake": 235, "length": [235, 344], "blake2": 235, "random": [235, 265, 293, 318, 474, 475, 479, 482], "person": 235, "credit": 235, "heapq": [236, 478], "hmac": [237, 472, 476, 477, 480], "entiti": 239, "xhtml": 240, "htmlparser": 240, "httpconnect": 242, "httprespons": 242, "httpmessag": 242, "cookiejar": 243, "cooki": [243, 244, 426], "filecookiejar": 243, "co": 243, "browser": [243, 312, 403], "cookiepolici": 243, "defaultcookiepolici": 243, "morsel": 244, "idl": [247, 462, 469, 471, 472, 473, 475, 477, 478, 479, 480, 481, 482, 483], "menu": 247, "shell": [247, 301, 331, 348], "editor": 247, "edit": [247, 447], "menus": 247, "navig": [247, 369], "indent": [247, 435], "calltip": 247, "startup": [247, 320], "failur": [247, 388], "without": 247, "prefer": 247, "idlelib": [247, 472, 473, 477, 478, 479, 480, 481, 482], "imaplib": [248, 475, 476, 478, 482], "imap4": 248, "imghdr": [249, 478], "importlib": [250, 251, 252, 253, 432, 469, 472, 474, 476, 477, 478, 479, 480, 482], "machineri": 250, "lazi": [250, 429, 473], "approxim": [250, 478], "import_modul": 250, "metadata": [251, 463, 465, 467, 472], "entri": [251, 428, 432], "distribut": 251, "discoveri": [251, 388], "fetch": 255, "webassembl": [257, 456], "io": [258, 386, 474, 475, 476, 478, 480, 481], "reentranc": 258, "ipv4": 259, "ipv6": 259, "manipul": [259, 292], "conveni": [259, 403, 419], "integ": [259, 344, 435, 464, 466, 468], "net": 259, "mask": 259, "interprocess": 260, "communic": 260, "json": [262, 299, 446, 468, 478, 479, 481], "complianc": 262, "interoper": 262, "infinit": 262, "nan": 262, "within": 262, "top": [262, 382], "linecach": [265, 472, 478], "hint": [266, 358, 474, 478, 482], "writer": 266, "emb": 266, "safeti": 267, "integr": [267, 428], "config": 268, "schema": 268, "extern": [268, 299], "streamhandl": 269, "filehandl": [269, 395], "watchedfilehandl": 269, "baserotatinghandl": 269, "rotatingfilehandl": 269, "timedrotatingfilehandl": 269, "sockethandl": 269, "datagramhandl": 269, "nteventloghandl": 269, "smtphandler": 269, "memoryhandl": 269, "httphandler": [269, 395], "lzma": [270, 476, 478], "decompress": [270, 422], "chain": [270, 341, 443], "mailbox": [271, 475], "mbox": 271, "mh": 271, "babyl": 271, "mmdf": 271, "maildirmessag": 271, "mboxmessag": 271, "mhmessag": 271, "babylmessag": 271, "mmdfmessag": 271, "mailcap": 272, "markup": 273, "tool": [273, 353, 469, 474, 481, 483], "logarithm": 275, "trigonometr": 275, "angular": 275, "hyperbol": 275, "mimetyp": [276, 480], "mmap": [278, 476, 477, 481], "madv_": 278, "map_": 278, "modulefind": 279, "msilib": [281, 480], "microsoft": [281, 461], "view": [281, 344, 469, 470], "record": [281, 382, 452], "cab": 281, "featur": [281, 386, 429, 467, 469, 472, 474, 477, 478, 479, 480, 481, 482], "precomput": 281, "msvcrt": 282, "routin": [282, 356], "vc": 282, "parallel": [283, 365, 481], "exchang": 283, "sharedctyp": 283, "remot": 283, "cleanup": [283, 292], "dummi": 283, "guidelin": 283, "spawn": [283, 348], "forkserv": 283, "shared_memori": 284, "netrc": 286, "nis": 287, "sun": [287, 349], "yellow": 287, "page": 287, "nntplib": [288, 476, 482], "nntp": [288, 475], "terminolog": 292, "posit": [292, 319, 384, 428, 441, 481], "understand": [292, 369], "store": [292, 461], "put": 292, "popul": 292, "conflict": 292, "trivial": 292, "environ": [293, 354, 399, 425, 461, 469, 478, 479], "ossaudiodev": 295, "oss": 295, "audio": 295, "devic": 295, "mixer": 295, "pathlib": [296, 472, 473, 474, 477, 478, 479, 480, 481, 482], "pdb": [297, 474, 475, 476, 477, 479, 480, 482], "relationship": [299, 462], "unpickl": 299, "dispatch": 299, "reduct": 299, "band": [299, 481], "consum": 299, "pickletool": [300, 479], "pipelin": [301, 348], "pkgutil": 302, "platform": [303, 332, 376, 463, 472, 480], "java": 303, "plistlib": [304, 468, 477, 481], "appl": [304, 481, 482], "plist": 304, "poplib": [305, 475, 477, 478, 482], "pop3": 305, "posix": [306, 361], "larg": 306, "pprint": [307, 472, 477, 481, 482], "prettyprint": 307, "instant": 308, "cprofil": [308, 480, 481], "stat": [308, 342, 476, 477], "determinist": 308, "timer": [308, 365], "pti": [309, 477], "pseudo": 309, "pwd": 310, "py_compil": [311, 472, 480, 481], "pyclbr": [312, 472], "pydoc": [313, 475, 476, 477, 479, 480, 482], "onlin": 313, "xml": [314, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 426, 462, 472, 474, 476, 477, 478, 479, 480, 481, 482], "expat": [314, 426], "fast": [314, 481], "xmlparser": [314, 413], "expaterror": 314, "model": [314, 369, 410, 429, 463], "simplequeu": 316, "quopri": 317, "bookkeep": 318, "reproduc": 318, "pair": 319, "simul": 319, "phonebook": 319, "mung": 319, "adverb": 319, "notat": [319, 434, 468], "token": [319, 326, 377, 378, 435, 474, 481], "readlin": [320, 323, 334, 478, 479], "reprlib": [321, 475], "repr": [321, 432], "rlcomplet": [323, 479], "runpi": 324, "locat": [324, 416], "sched": [325, 476], "secret": [326, 479], "dev": [328, 480], "poll": 328, "trigger": 328, "epol": 328, "kqueue": [328, 426], "kevent": 328, "selector": [329, 375, 477, 478], "multiplex": 329, "shelv": [330, 472, 477], "shlex": [331, 476, 479, 481], "lexic": [331, 435], "improv": [331, 462, 463, 464, 465, 466, 467, 468, 469, 471, 474, 475, 477, 479], "compat": 331, "shutil": [332, 473, 474, 475, 476, 477, 478, 481], "depend": [332, 400], "copytre": 332, "rmtree": 332, "archiv": [332, 358, 421, 422, 423, 465], "base_dir": 332, "sigpip": 333, "sitecustom": 334, "usercustom": 334, "smtplib": [335, 476, 477, 478, 482], "smtp": 335, "sndhdr": [336, 478], "accept": 337, "socketserv": [338, 476, 479, 480], "framework": [338, 463, 476], "tcpserver": 338, "udpserv": 338, "mixin": 338, "spwd": 339, "shadow": 339, "sqlite3": [340, 467, 472, 473, 474, 475, 476, 477, 478, 479, 480], "sqlite": 340, "db": 340, "cursor": 340, "row": 340, "blob": 340, "prepareprotocol": 340, "adapt": 340, "deprec": [340, 386, 462, 465, 466, 468, 469, 471, 475, 477, 478, 479, 480], "placehold": 340, "sql": 340, "regist": [340, 353], "shortcut": 340, "uri": 340, "transact": 340, "autocommit": 340, "isolation_level": 340, "ssl": [341, 468, 472, 474, 475, 476, 477, 478, 479, 480, 481], "certif": [341, 469, 475, 477], "ca": 341, "sign": 341, "side": [341, 390], "bio": [341, 478], "session": 341, "cipher": 341, "statist": [343, 382, 472, 474, 477, 479, 481], "spread": 343, "normaldist": 343, "mont": 343, "carlo": 343, "bayesian": 343, "classifi": 343, "kernel": 343, "densiti": 343, "estim": 343, "numer": [344, 428, 435, 479], "bitwis": [344, 430], "bool": 344, "rang": [344, 441], "immut": [344, 428], "str": 344, "printf": 344, "bytearray": [344, 478], "frozenset": 344, "alia": 344, "genericalia": 344, "notimpl": [344, 428], "affect": 344, "recommend": 344, "stringprep": 346, "prepar": [346, 428], "frequent": 348, "older": [348, 358], "bin": 348, "sh": 348, "substitut": [348, 466], "famili": 348, "popen2": 348, "popen3": 348, "disabl": [348, 353], "vfork": 348, "posix_spawn": 348, "sunau": [349, 477, 480], "au": 349, "au_read": 349, "au_writ": 349, "symtabl": 351, "float_info": 352, "monitor": [353, 474], "identifi": [353, 376, 430, 435], "ancillari": 353, "stop_iter": 353, "turn": 353, "virtual": [354, 376, 399, 461, 478], "_pth": 354, "sysconfig": [355, 469, 473, 475, 478], "scheme": 355, "posix_us": 355, "nt_user": 355, "osx_framework_us": 355, "home": 355, "posix_hom": 355, "posix_prefix": 355, "nt": [355, 465], "tabnanni": 357, "tarfil": [358, 472, 473, 475, 476, 477, 478, 481, 482], "tar": 358, "tarinfo": 358, "further": 358, "verif": [358, 469, 477], "telnetlib": [359, 479], "telnet": 359, "tempfil": [360, 473, 474, 475, 476], "termio": 361, "tti": [361, 383], "regress": 362, "socket_help": 362, "script_help": 362, "bytecode_help": 362, "threading_help": 362, "os_help": 362, "import_help": 362, "warnings_help": 362, "textwrap": [364, 476, 477], "fill": [364, 384], "rlock": 365, "clock": 366, "timeit": [367, 478, 479], "graphic": [368, 384], "tcl": 369, "architectur": 369, "life": 369, "preserv": [369, 479], "concept": 369, "handi": 369, "packer": [369, 408], "coupl": 369, "imag": [369, 375], "colorchoos": 370, "dnd": 371, "drag": 371, "drop": 371, "font": 372, "messagebox": 373, "scrolledtext": 374, "scroll": 374, "tix": 375, "hierarch": 375, "listbox": 375, "tabular": 375, "form": [375, 386, 430], "geometri": 375, "ttk": [376, 469], "theme": [376, 469], "scrollabl": 376, "label": 376, "combobox": 376, "spinbox": 376, "notebook": 376, "progressbar": 376, "separ": [376, 465, 469, 471], "sizegrip": 376, "treeview": 376, "tag": [376, 475], "column": 376, "layout": [376, 452], "tomllib": 379, "toml": 379, "track": [380, 390], "main": [380, 456, 468], "tracebackexcept": 381, "stacksummari": 381, "framesummari": 381, "peak": 382, "domainfilt": 382, "snapshot": 382, "statisticdiff": 382, "turtl": 384, "star": 384, "pen": 384, "turtlescreen": 384, "screen": 384, "rawturtl": 384, "correspond": 384, "motion": 384, "tell": 384, "measur": 384, "draw": 384, "visibl": 384, "anim": 384, "explan": 384, "turtledemo": [384, 475], "demo": [384, 474, 481, 483], "sinc": 384, "newtyp": 386, "nomin": 386, "alias": [386, 427], "recognis": 386, "concret": 386, "timelin": 386, "major": 386, "unicodedata": [387, 473, 474, 478, 479, 480, 481, 482], "old": [388, 464], "skip": 388, "expect": 388, "distinguish": 388, "subtest": 388, "load_test": 388, "fixtur": 388, "setupclass": 388, "teardownclass": 388, "setupmodul": 388, "teardownmodul": 388, "mock": [389, 390, 478, 479, 480], "patcher": 389, "patch": [389, 390], "test_prefix": 389, "magicmock": [389, 390], "magic": 389, "sentinel": 389, "create_autospec": 389, "filter_dir": 389, "mock_open": 389, "autospecc": 389, "side_effect": [389, 390], "return_valu": 389, "unbound": 390, "less": 390, "compon": 394, "quot": 394, "openerdirector": 395, "basehandl": 395, "httpredirecthandl": 395, "httpcookieprocessor": 395, "proxyhandl": 395, "httppasswordmgr": 395, "httppasswordmgrwithpriorauth": 395, "abstractbasicauthhandl": 395, "httpbasicauthhandl": 395, "proxybasicauthhandl": 395, "abstractdigestauthhandl": 395, "httpdigestauthhandl": 395, "proxydigestauthhandl": 395, "httpshandler": 395, "datahandl": 395, "ftphandler": 395, "cacheftphandl": 395, "unknownhandl": 395, "httperrorprocessor": 395, "respons": 395, "robotpars": [396, 479], "robot": 396, "txt": 396, "xdrlib": [397, 408], "uuencod": [397, 426], "uuid": [398, 474, 480], "rfc": 398, "4122": 398, "venv": [399, 473, 477, 479, 481, 482], "envbuild": 399, "describ": 400, "temporarili": 400, "suppress": [400, 476], "updat": [400, 469, 482], "wave": [401, 477, 480], "wav": 401, "wave_read": 401, "wave_writ": 401, "weakref": [402, 477, 481], "webbrows": [403, 474, 476], "winreg": [405, 479], "hkey_": 405, "right": 405, "64": 405, "winsound": [406, 479], "sound": 406, "play": 406, "wsgiref": [407, 467, 478], "wsgi": 407, "simple_serv": 407, "xdr": 408, "defusedxml": 409, "dom": [410, 411, 412, 462], "domimplement": 410, "nodelist": 410, "documenttyp": 410, "attr": 410, "namednodemap": 410, "comment": [410, 435], "cdatasect": 410, "processinginstruct": 410, "conform": 410, "accessor": 410, "minidom": 411, "minim": 411, "pulldom": 412, "domeventstream": 412, "etre": [413, 474, 476, 477, 480], "elementtre": [413, 467, 469, 474, 475, 476], "pull": 413, "interest": 413, "xpath": 413, "xinclud": 413, "qname": 413, "treebuild": 413, "xmlpullpars": 413, "sax": [414, 415, 416, 417, 478], "sax2": [414, 462], "saxexcept": 414, "contenthandl": 415, "dtdhandler": 415, "entityresolv": 415, "errorhandl": 415, "lexicalhandl": 415, "xmlreader": 416, "incrementalpars": 416, "inputsourc": 416, "attributesn": 416, "saxutil": 417, "xmlrpc": [418, 419, 420, 478, 479, 480, 481], "rpc": [419, 420], "serverproxi": 419, "protocolerror": 419, "multical": 419, "simplexmlrpcserv": 420, "cgixmlrpcrequesthandl": 420, "docxmlrpcserv": 420, "doccgixmlrpcrequesthandl": 420, "zipapp": [421, 478, 480], "zip": [421, 422, 423, 465], "standalon": 421, "zipfil": [422, 473, 475, 477, 478, 479, 480], "pyzipfil": 422, "zipinfo": 422, "pitfal": 422, "itself": 422, "behavior": [422, 477, 478, 479, 480, 481], "zipimport": [423, 472, 474], "zlib": [424, 426, 476, 479], "zoneinfo": [425, 482], "iana": 425, "represent": [425, 444, 476], "serial": 425, "12": [426, 472, 473, 474, 481, 483], "psf": 426, "beopen": 426, "com": 426, "cnri": 426, "cwi": 426, "zero": 426, "claus": [426, 427], "bsd": 426, "mersenn": 426, "twister": 426, "uudecod": 426, "test_epol": 426, "siphash24": 426, "strtod": 426, "dtoa": 426, "openssl": [426, 460, 473], "libffi": 426, "cfuhash": 426, "libmpdec": 426, "w3c": 426, "c14n": 426, "els": [427, 441], "guard": [427, 472], "irrefut": 427, "wildcard": [427, 451, 472], "real": 428, "also": 428, "known": [428, 461], "slice": [428, 430, 465], "invok": 428, "metaclass": 428, "resolv": 428, "mro": 428, "appropri": 428, "bodi": 428, "emul": 428, "purpos": 428, "__class_getitem__": 428, "__getitem__": 428, "atom": 430, "parenthes": 430, "yield": [430, 436], "primari": 430, "unari": 430, "shift": 430, "membership": 430, "ident": 430, "assign": [430, 436, 462, 481], "finder": 432, "loader": 432, "meta": 432, "submodul": 432, "__path__": 432, "__spec__": 432, "physic": 435, "declar": [435, 472], "explicit": [435, 468, 476, 477], "implicit": [435, 476], "blank": 435, "whitespac": 435, "reserv": 435, "imaginari": 435, "delimit": 435, "augment": [436, 462], "del": [436, 442], "break": [436, 441], "nonloc": 436, "dir": 450, "linker": 456, "cross": 456, "makefil": 456, "preprocessor": 456, "ide": [457, 459], "mac": [459, 468, 469, 481, 482], "freebsd": [460, 469], "openbsd": 460, "full": 461, "max_path": 461, "redirect": 461, "temporari": 461, "nuget": 461, "embedd": 461, "bundl": 461, "excursus": 461, "launcher": [461, 473, 478], "shebang": 461, "diagnost": 461, "dri": 461, "pywin32": 461, "cx_freez": 461, "cycl": 462, "minor": 462, "port": [462, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482], "distutil": [462, 465, 472, 474, 478, 479, 480, 482], "easi": 462, "pyxml": 462, "pep": [463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481], "227": [463, 464], "nest": [463, 464], "236": 463, "207": 463, "rich": 463, "230": 463, "229": 463, "205": 463, "232": 463, "235": 463, "insensit": 463, "217": 463, "208": 463, "coercion": [463, 480], "241": 463, "252": 464, "253": 464, "diamond": 464, "234": 464, "255": [464, 465], "237": [464, 466], "unifi": [464, 466, 467], "long": [464, 466], "238": 464, "divis": 464, "218": [465, 466], "263": 465, "273": 465, "277": 465, "278": 465, "univers": 465, "279": 465, "282": 465, "285": 465, "293": 465, "301": 465, "302": 465, "305": 465, "307": 465, "enhanc": [465, 468, 469, 479], "289": 466, "292": 466, "simpler": [466, 479], "318": 466, "322": 466, "324": 466, "327": 466, "need": 466, "328": [466, 467], "331": 466, "cookielib": 466, "308": 467, "309": 467, "314": 467, "softwar": 467, "v1": [467, 475], "absolut": 467, "338": 467, "341": 467, "342": 467, "343": [467, 468], "352": 467, "353": 467, "ssize_t": 467, "357": 467, "__index__": 467, "tracker": 468, "roundup": 468, "restructuredtext": 468, "sphinx": 468, "366": 468, "370": 468, "371": 468, "3101": [468, 470], "3105": 468, "3110": 468, "3112": 468, "3116": 468, "3118": [468, 476], "3119": 468, "3127": 468, "3129": 468, "3141": 468, "future_builtin": 468, "javascript": 468, "irix": 468, "372": [469, 471], "378": [469, 471], "thousand": [469, 471], "389": [469, 475], "391": [469, 475], "3106": 469, "3137": 469, "added": 469, "mainten": 469, "two": 469, "434": 469, "branch": 469, "466": 469, "477": 469, "backport": 469, "453": [469, 477], "476": [469, 477], "stdlib": [469, 477], "493": 469, "https": 469, "migrat": 469, "regen": [469, 478, 479], "target": [469, 478, 479], "touch": [469, 478, 479], "stumbl": 470, "alreadi": 470, "indentationerror": 472, "attributeerror": 472, "nameerror": 472, "626": 472, "634": 472, "encodingwarn": 472, "604": 472, "612": 472, "613": 472, "typealia": 472, "647": 472, "asynchat": [472, 474, 479], "asyncor": [472, 474, 475, 479], "smtpd": [472, 474, 476, 477, 478], "652": 472, "notabl": [472, 473, 480, 481, 482], "11": [473, 480, 481, 482, 483], "657": 473, "654": 473, "678": 473, "exe": 473, "646": 473, "655": 473, "typeddict": [473, 474], "673": 473, "675": 473, "681": 473, "563": [473, 480], "cheaper": 473, "659": 473, "jit": 473, "695": 474, "701": 474, "syntact": 474, "684": 474, "669": 474, "impact": 474, "688": 474, "709": 474, "inlin": 474, "692": 474, "kwarg": 474, "698": 474, "13": [474, 479], "14": [474, 479, 480, 481, 482], "15": 474, "imp": 474, "384": 475, "stabl": 475, "3148": 475, "3147": 475, "repositori": 475, "3149": 475, "so": 475, "3333": 475, "gateway": 475, "highlight": [476, 477, 478, 479, 480, 481, 482], "405": 476, "420": 476, "393": 476, "flexibl": 476, "397": 476, "3151": 476, "rework": 476, "380": 476, "subgener": 476, "409": 476, "414": 476, "3155": 476, "qualifi": 476, "412": 476, "362": 476, "421": 476, "simplenamespac": 476, "grain": 476, "446": 477, "newli": 477, "451": 477, "modulespec": 477, "445": 477, "442": 477, "456": 477, "interchang": 477, "436": 477, "longer": 477, "492": 478, "465": 478, "dedic": 478, "infix": 478, "matrix": 478, "448": 478, "461": 478, "percent": 478, "484": 478, "471": 478, "scandir": 478, "better": 478, "faster": 478, "475": 478, "retri": 478, "eintr": 478, "479": 478, "stopiter": 478, "insid": 478, "485": 478, "equal": 478, "486": 478, "488": 478, "elimin": 478, "pyo": 478, "489": 478, "negoti": 478, "unsupport": 478, "498": 479, "526": 479, "515": 479, "underscor": 479, "525": 479, "530": 479, "487": 479, "519": 479, "495": 479, "disambigu": 479, "529": 479, "filesystem": [479, 481], "528": 479, "520": 479, "468": 479, "523": 479, "pythonmalloc": 479, "probe": 479, "postpon": 480, "538": 480, "540": 480, "forc": 480, "553": 480, "breakpoint": 480, "539": 480, "562": 480, "564": 480, "nanosecond": 480, "565": 480, "show": 480, "deprecationwarn": [480, 482], "560": 480, "552": 480, "545": 480, "uu": 480, "macpath": 480, "578": 481, "audit": 481, "587": 481, "590": 481, "big": [481, 482], "sur": [481, 482], "silicon": [481, 482], "17": [481, 482], "merg": 482, "suffix": 482, "changelog": 483, "candid": 483, "alpha": 483}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 60}, "alltitles": {"\u5728 heap \u4e0a\u5206\u914d\u7269\u4ef6": [[3, "allocating-objects-on-the-heap"]], "\u5b57\u5178\u7269\u4ef6": [[22, "dictionary-objects"]], "\u7a0b\u5f0f\u78bc\u7269\u4ef6": [[13, "code-objects"]], "Extra information": [[13, "extra-information"]], "\u5177\u9ad4\u7269\u4ef6\u5c64": [[16, "concrete-objects-layer"]], "\u57fa\u790e\u7269\u4ef6": [[16, "fundamental-objects"]], "\u6578\u503c\u7269\u4ef6": [[16, "numeric-objects"]], "\u5e8f\u5217\u7269\u4ef6": [[16, "sequence-objects"]], "\u5bb9\u5668\u7269\u4ef6": [[16, "container-objects"]], "\u51fd\u5f0f\u7269\u4ef6": [[16, "function-objects"], [312, "function-objects"]], "\u5176\u4ed6\u7269\u4ef6": [[16, "other-objects"], [5, "other-objects"]], "\u6a94\u6848\u7269\u4ef6 (File Objects)": [[24, "file-objects"]], "API \u548c ABI \u7248\u672c\u7ba1\u7406": [[4, "api-and-abi-versioning"]], "PyHash API": [[30, "pyhash-api"]], "\u8907\u6578\u7269\u4ef6": [[15, "complex-number-objects"]], "\u4f5c\u70ba C \u7d50\u69cb\u7684\u8907\u6578": [[15, "complex-numbers-as-c-structures"]], "\u4f5c\u70ba Python \u7269\u4ef6\u7684\u8907\u6578": [[15, "complex-numbers-as-python-objects"]], "\u7522\u751f\u5668 (Generator) \u7269\u4ef6": [[29, "generator-objects"]], "Python/C API \u53c3\u8003\u624b\u518a": [[32, "python-c-api-reference-manual"]], "Supporting Cyclic Garbage Collection": [[28, "supporting-cyclic-garbage-collection"]], "Controlling the Garbage Collector State": [[28, "controlling-the-garbage-collector-state"]], "Querying Garbage Collector State": [[28, "querying-garbage-collector-state"]], "\u547c\u53eb\u5354\u5b9a (Call Protocol)": [[10, "call-protocol"]], "tp_call \u5354\u5b9a": [[10, "the-tp-call-protocol"]], "Vectorcall \u5354\u5b9a": [[10, "the-vectorcall-protocol"]], "\u905e\u8ff4\u63a7\u5236": [[10, "recursion-control"]], "Vectorcall \u652f\u63f4 API": [[10, "vectorcall-support-api"]], "\u7269\u4ef6\u547c\u53eb API": [[10, "object-calling-api"]], "\u547c\u53eb\u652f\u63f4 API": [[10, "call-support-api"]], "\u4f8b\u5916\u8655\u7406": [[23, "exception-handling"]], "Printing and clearing": [[23, "printing-and-clearing"]], "Raising exceptions": [[23, "raising-exceptions"]], "Issuing warnings": [[23, "issuing-warnings"]], "Querying the error indicator": [[23, "querying-the-error-indicator"]], "Signal Handling": [[23, "signal-handling"], [388, "signal-handling"]], "\u4f8b\u5916\u985e\u5225": [[23, "exception-classes"], [166, "exception-classes"]], "\u4f8b\u5916\u7269\u4ef6": [[23, "exception-objects"]], "Unicode Exception Objects": [[23, "unicode-exception-objects"]], "Recursion Control": [[23, "recursion-control"]], "Standard Exceptions": [[23, "standard-exceptions"]], "Standard Warning Categories": [[23, "standard-warning-categories"]], "Descriptor\uff08\u63cf\u8ff0\u5668\uff09\u7269\u4ef6": [[21, "descriptor-objects"]], "Cell \u7269\u4ef6": [[12, "cell-objects"]], "\u5256\u6790\u5f15\u6578\u8207\u5efa\u7f6e\u6578\u503c": [[5, "parsing-arguments-and-building-values"]], "Parsing arguments": [[5, "parsing-arguments"], [292, "parsing-arguments"]], "Strings and buffers": [[5, "strings-and-buffers"]], "\u6578\u5b57": [[5, "numbers"]], "API \u51fd\u5f0f": [[5, "api-functions"]], "Building values": [[5, "building-values"]], "\u4f4d\u5143\u7d44\u7269\u4ef6 (Bytes Objects)": [[9, "bytes-objects"]], "Initialization, Finalization, and Threads": [[33, "initialization-finalization-and-threads"]], "Before Python Initialization": [[33, "before-python-initialization"]], "Global configuration variables": [[33, "global-configuration-variables"]], "Initializing and finalizing the interpreter": [[33, "initializing-and-finalizing-the-interpreter"]], "Process-wide parameters": [[33, "process-wide-parameters"]], "Thread State and the Global Interpreter Lock": [[33, "thread-state-and-the-global-interpreter-lock"]], "Releasing the GIL from extension code": [[33, "releasing-the-gil-from-extension-code"]], "Non-Python created threads": [[33, "non-python-created-threads"]], "Cautions about fork()": [[33, "cautions-about-fork"]], "\u9ad8\u968e API": [[33, "high-level-api"], [123, null]], "\u4f4e\u968e API": [[33, "low-level-api"], [123, null]], "Sub-interpreter support": [[33, "sub-interpreter-support"]], "A Per-Interpreter GIL": [[33, "a-per-interpreter-gil"]], "Bugs and caveats": [[33, "bugs-and-caveats"]], "Asynchronous Notifications": [[33, "asynchronous-notifications"]], "Profiling and Tracing": [[33, "profiling-and-tracing"]], "Advanced Debugger Support": [[33, "advanced-debugger-support"]], "Thread Local Storage Support": [[33, "thread-local-storage-support"]], "Thread Specific Storage (TSS) API": [[33, "thread-specific-storage-tss-api"]], "Dynamic Allocation": [[33, "dynamic-allocation"]], "\u65b9\u6cd5": [[33, "methods"], [296, "methods"]], "Thread Local Storage (TLS) API": [[33, "thread-local-storage-tls-api"]], "\u5f15\u5165\u6a21\u7d44": [[31, "importing-modules"], [280, "importing-modules"]], "Capsules": [[11, "capsules"], [469, "capsules"]], "\u8655\u7406\u932f\u8aa4 (Bug)": [[1, "dealing-with-bugs"]], "\u8aaa\u660e\u6587\u4ef6\u7684\u932f\u8aa4": [[1, "documentation-bugs"]], "\u4f7f\u7528 Python \u554f\u984c\u8ffd\u8e64\u7cfb\u7d71": [[1, "using-the-python-issue-tracker"]], "\u958b\u59cb\u8b93\u81ea\u5df1\u8ca2\u737b Python": [[1, "getting-started-contributing-to-python-yourself"]], "\u5b57\u4e32\u8f49\u63db\u8207\u683c\u5f0f\u5316": [[18, "string-conversion-and-formatting"]], "\u7de9\u885d\u5354\u5b9a (Buffer Protocol)": [[7, "buffer-protocol"]], "Buffer structure": [[7, "buffer-structure"]], "Buffer request types": [[7, "buffer-request-types"]], "request-independent fields": [[7, "request-independent-fields"]], "readonly, format": [[7, "readonly-format"]], "shape, strides, suboffsets": [[7, "shape-strides-suboffsets"]], "contiguity requests": [[7, "contiguity-requests"]], "compound requests": [[7, "compound-requests"]], "Complex arrays": [[7, "complex-arrays"]], "NumPy-style: shape and strides": [[7, "numpy-style-shape-and-strides"]], "PIL-style: shape, strides and suboffsets": [[7, "pil-style-shape-strides-and-suboffsets"]], "Buffer-related functions": [[7, "buffer-related-functions"]], "DateTime \u7269\u4ef6": [[20, "datetime-objects"]], "Frame \u7269\u4ef6": [[26, "frame-objects"]], "Internal Frames": [[26, "internal-frames"]], "\u62bd\u8c61\u7269\u4ef6\u5c64 (Abstract Objects Layer)": [[2, "abstract-objects-layer"]], "\u51fd\u5f0f\u7269\u4ef6 (Function Objects)": [[27, "function-objects"]], "Context Variables Objects": [[17, "context-variables-objects"]], "\u95dc\u65bc\u9019\u4e9b\u8aaa\u660e\u6587\u4ef6": [[0, "about-these-documents"]], "Python \u6587\u4ef6\u7684\u8ca2\u737b\u8005\u5011": [[0, "contributors-to-the-python-documentation"]], "Boolean\uff08\u5e03\u6797\uff09\u7269\u4ef6": [[6, "boolean-objects"]], "\u7de8\u89e3\u78bc\u5668\u8a3b\u518a\u8868\u548c\u652f\u63f4\u51fd\u5f0f": [[14, "codec-registry-and-support-functions"]], "\u7de8\u89e3\u78bc\u5668\u67e5\u627e API": [[14, "codec-lookup-api"]], "\u7528\u65bc Unicode \u7de8\u78bc\u932f\u8aa4\u8655\u7406\u7a0b\u5f0f\u7684\u8a3b\u518a API": [[14, "registry-api-for-unicode-encoding-error-handlers"]], "\u6d6e\u9ede\u6578\uff08Floating Point\uff09\u7269\u4ef6": [[25, "floating-point-objects"]], "Pack and Unpack functions": [[25, "pack-and-unpack-functions"]], "Pack functions": [[25, "pack-functions"]], "Unpack functions": [[25, "unpack-functions"]], "Coroutine\uff08\u5354\u7a0b\uff09\u7269\u4ef6": [[19, "coroutine-objects"]], "\u4f4d\u5143\u7d44\u9663\u5217\u7269\u4ef6 (Byte Array Objects)": [[8, "byte-array-objects"]], "\u578b\u5225\u6aa2\u67e5\u5de8\u96c6": [[8, "type-check-macros"]], "\u76f4\u63a5 API \u51fd\u5f0f": [[8, "direct-api-functions"]], "\u5de8\u96c6": [[8, "macros"]], "\u64f4\u5145\u548c\u5d4c\u5165 Python \u76f4\u8b6f\u5668": [[74, "extending-and-embedding-the-python-interpreter"]], "\u63a8\u85a6\u7684\u7b2c\u4e09\u65b9\u5de5\u5177": [[74, "recommended-third-party-tools"]], "\u4e0d\u4f7f\u7528\u7b2c\u4e09\u65b9\u5de5\u5177\u5efa\u7acb\u64f4\u5145": [[74, "creating-extensions-without-third-party-tools"]], "\u5728\u66f4\u5927\u7684\u61c9\u7528\u7a0b\u5f0f\u4e2d\u5d4c\u5165 CPython \u904b\u884c\u74b0\u5883 (runtime)": [[74, "embedding-the-cpython-runtime-in-a-larger-application"]], "\u9077\u79fb\u5ef6\u4f38\u6a21\u7d44\u5230 Python 3": [[91, "porting-extension-modules-to-python-3"]], "\u5728 Windows \u4f7f\u7528 Python \u7684\u5e38\u898b\u554f\u7b54\u96c6": [[86, "python-on-windows-faq"]], "\u76ee\u9304": [[86, "id1"], [84, "id1"], [79, "id1"], [85, "id1"], [93, "id1"], [78, "id1"], [80, "id1"], [81, "id1"], [247, "menus"]], "\u5982\u4f55\u5728 Windows \u4f5c\u696d\u7cfb\u7d71\u88e1\u904b\u884c Python \u7a0b\u5f0f\uff1f": [[86, "how-do-i-run-a-python-program-under-windows"]], "\u5982\u4f55\u4f7f Python \u8173\u672c\u53ef\u4ee5\u57f7\u884c\uff1f": [[86, "how-do-i-make-python-scripts-executable"]], "\u70ba\u4ec0\u9ebc Python \u6709\u6642\u9700\u8981\u9019\u9ebc\u9577\u7684\u6642\u9593\u624d\u80fd\u958b\u59cb\uff1f": [[86, "why-does-python-sometimes-take-so-long-to-start"]], "\u5982\u4f55\u5f9e Python \u8173\u672c\u88fd\u4f5c\u53ef\u57f7\u884c\u6a94\uff1f": [[86, "how-do-i-make-an-executable-from-a-python-script"]], "*.pyd \u6a94\u662f\u5426\u8207 DLL \u76f8\u540c\uff1f": [[86, "is-a-pyd-file-the-same-as-a-dll"]], "\u5982\u4f55\u5c07 Python \u5d4c\u5165 Windows \u61c9\u7528\u7a0b\u5f0f\u4e2d\uff1f": [[86, "how-can-i-embed-python-into-a-windows-application"]], "\u5982\u4f55\u9632\u6b62\u7de8\u8f2f\u5668\u5728\u6211\u7684 Python \u539f\u59cb\u78bc\u4e2d\u63d2\u5165 tab\uff1f": [[86, "how-do-i-keep-editors-from-inserting-tabs-into-my-python-source"]], "\u5982\u4f55\u5728\u4e0d\u963b\u585e\u7684\u60c5\u6cc1\u4e0b\u6aa2\u67e5 keypress\uff1f": [[86, "how-do-i-check-for-a-keypress-without-blocking"]], "\u5982\u4f55\u89e3\u6c7a\u907a\u6f0f api-ms-win-crt-runtime-l1-1-0.dll \u7684\u932f\u8aa4\uff1f": [[86, "how-do-i-solve-the-missing-api-ms-win-crt-runtime-l1-1-0-dll-error"]], "\u51fd\u5f0f\u5eab\u548c\u64f4\u5145\u529f\u80fd\u7684\u5e38\u898b\u554f\u984c": [[84, "library-and-extension-faq"]], "\u5e38\u898b\u51fd\u5f0f\u554f\u984c": [[84, "general-library-questions"]], "How do I find a module or application to perform task X?": [[84, "how-do-i-find-a-module-or-application-to-perform-task-x"]], "\u54ea\u88e1\u53ef\u4ee5\u627e\u5230 math.py (socket.py, regex.py, \u7b49...) \u4f86\u6e90\u6a94\u6848\uff1f": [[84, "where-is-the-math-py-socket-py-regex-py-etc-source-file"]], "\u6211\u5982\u4f55\u4f7f Python script \u57f7\u884c\u5728 Unix\uff1f": [[84, "how-do-i-make-a-python-script-executable-on-unix"]], "\u662f\u5426\u6709\u9069\u7528\u65bc Python \u7684 curses/termcap \u5957\u4ef6\uff1f": [[84, "is-there-a-curses-termcap-package-for-python"]], "Is there an equivalent to C's onexit() in Python?": [[84, "is-there-an-equivalent-to-c-s-onexit-in-python"]], "Why don't my signal handlers work?": [[84, "why-don-t-my-signal-handlers-work"]], "\u5e38\u898b\u8ab2\u984c": [[84, "common-tasks"]], "\u5982\u4f55\u6e2c\u8a66 Python \u7a0b\u5f0f\u6216\u5143\u4ef6\uff1f": [[84, "how-do-i-test-a-python-program-or-component"]], "How do I create documentation from doc strings?": [[84, "how-do-i-create-documentation-from-doc-strings"]], "How do I get a single keypress at a time?": [[84, "how-do-i-get-a-single-keypress-at-a-time"]], "\u57f7\u884c\u7dd2": [[84, "threads"]], "\u5982\u4f55\u4f7f\u7528\u57f7\u884c\u7dd2\u7de8\u5beb\u7a0b\u5f0f\uff1f": [[84, "how-do-i-program-using-threads"]], "\u6211\u7684\u57f7\u884c\u7dd2\u4f3c\u4e4e\u90fd\u6c92\u6709\u904b\u884c\uff1a\u70ba\u4ec0\u9ebc\uff1f": [[84, "none-of-my-threads-seem-to-run-why"]], "How do I parcel out work among a bunch of worker threads?": [[84, "how-do-i-parcel-out-work-among-a-bunch-of-worker-threads"]], "What kinds of global value mutation are thread-safe?": [[84, "what-kinds-of-global-value-mutation-are-thread-safe"]], "\u4e0d\u80fd\u64fa\u812b\u5168\u5c40\u76f4\u8b6f\u5668\u9396\u55ce\uff1f": [[84, "can-t-we-get-rid-of-the-global-interpreter-lock"]], "\u8f38\u5165\u8207\u8f38\u51fa": [[84, "input-and-output"]], "\u5982\u4f55\u522a\u9664\u6a94\u6848\uff1f\uff08\u4ee5\u53ca\u5176\u4ed6\u6a94\u6848\u554f\u984c...\uff09": [[84, "how-do-i-delete-a-file-and-other-file-questions"]], "\u5982\u4f55\u8907\u88fd\u6a94\u6848\uff1f": [[84, "how-do-i-copy-a-file"]], "\u5982\u4f55\u8b80\u53d6\uff08\u6216\u5beb\u5165\uff09\u4e8c\u9032\u4f4d\u5236\u8cc7\u6599\uff1f": [[84, "how-do-i-read-or-write-binary-data"]], "I can't seem to use os.read() on a pipe created with os.popen(); why?": [[84, "i-can-t-seem-to-use-os-read-on-a-pipe-created-with-os-popen-why"]], "\u5982\u4f55\u5b58\u53d6\u5e8f\u5217 (RS232) \u9023\u63a5\u57e0\uff1f": [[84, "how-do-i-access-the-serial-rs232-port"]], "Why doesn't closing sys.stdout (stdin, stderr) really close it?": [[84, "why-doesn-t-closing-sys-stdout-stdin-stderr-really-close-it"]], "\u7db2\u8def (Network)/\u7db2\u969b\u7db2\u8def (Internet) \u7a0b\u5f0f": [[84, "network-internet-programming"]], "Python \u6709\u54ea\u4e9b WWW \u5de5\u5177\uff1f": [[84, "what-www-tools-are-there-for-python"]], "\u5982\u4f55\u6a21\u64ec CGI \u8868\u55ae\u9001\u51fa (submission) (METHOD=POST)\uff1f": [[84, "how-can-i-mimic-cgi-form-submission-method-post"]], "\u6211\u61c9\u8a72\u4f7f\u7528\u4ec0\u9ebc\u6a21\u7d44\u4f86\u8f14\u52a9\u7522\u751f HTML\uff1f": [[84, "what-module-should-i-use-to-help-with-generating-html"]], "\u5982\u4f55\u5f9e Python \u8173\u672c\u767c\u9001\u90f5\u4ef6\uff1f": [[84, "how-do-i-send-mail-from-a-python-script"]], "How do I avoid blocking in the connect() method of a socket?": [[84, "how-do-i-avoid-blocking-in-the-connect-method-of-a-socket"]], "\u8cc7\u6599\u5eab": [[84, "databases"]], "Python \u4e2d\u662f\u5426\u6709\u4efb\u4f55\u8cc7\u6599\u5eab\u5957\u4ef6\u7684\u4ecb\u9762\uff1f": [[84, "are-there-any-interfaces-to-database-packages-in-python"]], "How do you implement persistent objects in Python?": [[84, "how-do-you-implement-persistent-objects-in-python"]], "\u6578\u5b78\u548c\u6578\u503c": [[84, "mathematics-and-numerics"]], "\u5982\u4f55\u5728 Python \u4e2d\u751f\u6210\u96a8\u6a5f\u6578\uff1f": [[84, "how-do-i-generate-random-numbers-in-python"]], "Enum HOWTO": [[94, "enum-howto"]], "Programmatic access to enumeration members and their attributes": [[94, "programmatic-access-to-enumeration-members-and-their-attributes"]], "Duplicating enum members and values": [[94, "duplicating-enum-members-and-values"]], "Ensuring unique enumeration values": [[94, "ensuring-unique-enumeration-values"]], "Using automatic values": [[94, "using-automatic-values"]], "Iteration": [[94, "iteration"], [259, "iteration"]], "Comparisons": [[94, "comparisons"], [99, "comparisons"], [430, "comparisons"]], "Allowed members and attributes of enumerations": [[94, "allowed-members-and-attributes-of-enumerations"]], "Restricted Enum subclassing": [[94, "restricted-enum-subclassing"]], "Dataclass support": [[94, "dataclass-support"]], "Pickling": [[94, "pickling"]], "Functional API": [[94, "functional-api"], [251, "functional-api"]], "Derived Enumerations": [[94, "derived-enumerations"]], "IntEnum": [[94, "intenum"]], "StrEnum": [[94, "strenum"]], "IntFlag": [[94, "intflag"]], "Flag": [[94, "flag"]], "Others": [[94, "others"]], "When to use __new__() vs. __init__()": [[94, "when-to-use-new-vs-init"]], "Finer Points": [[94, "finer-points"]], "Supported __dunder__ names": [[94, "supported-dunder-names"]], "Supported _sunder_ names": [[94, "supported-sunder-names"]], "_Private__names": [[94, "private-names"]], "Enum member type": [[94, "enum-member-type"]], "Creating members that are mixed with other data types": [[94, "creating-members-that-are-mixed-with-other-data-types"]], "Boolean value of Enum classes and members": [[94, "boolean-value-of-enum-classes-and-members"]], "Enum classes with methods": [[94, "enum-classes-with-methods"]], "Combining members of Flag": [[94, "combining-members-of-flag"]], "Flag and IntFlag minutia": [[94, "flag-and-intflag-minutia"]], "How are Enums and Flags different?": [[94, "how-are-enums-and-flags-different"]], "Enum Classes": [[94, "enum-classes"]], "Flag Classes": [[94, "flag-classes"]], "Enum Members (aka instances)": [[94, "enum-members-aka-instances"]], "Flag Members": [[94, "flag-members"]], "Enum Cookbook": [[94, "enum-cookbook"]], "Omitting values": [[94, "omitting-values"]], "Using auto": [[94, "using-auto"]], "Using object": [[94, "using-object"]], "Using a descriptive string": [[94, "using-a-descriptive-string"]], "Using a custom __new__()": [[94, "using-a-custom-new"]], "OrderedEnum": [[94, "orderedenum"]], "DuplicateFreeEnum": [[94, "duplicatefreeenum"]], "Planet": [[94, "planet"]], "TimePeriod": [[94, "timeperiod"]], "Subclassing EnumType": [[94, "subclassing-enumtype"]], "\u64f4\u5145/\u5d4c\u5165\u5e38\u898b\u554f\u984c\u96c6": [[79, "extending-embedding-faq"]], "\u6211\u53ef\u4ee5\u5728 C \u4e2d\u5efa\u7acb\u81ea\u5df1\u7684\u51fd\u5f0f\u55ce\uff1f": [[79, "can-i-create-my-own-functions-in-c"]], "\u6211\u53ef\u4ee5\u5728 C++ \u4e2d\u5efa\u7acb\u81ea\u5df1\u7684\u51fd\u5f0f\u55ce\uff1f": [[79, "id2"]], "\u5beb C \u5f88\u96e3\uff1b\u9084\u6709\u5176\u4ed6\u9078\u64c7\u55ce\uff1f": [[79, "writing-c-is-hard-are-there-any-alternatives"]], "\u5982\u4f55\u5f9e C \u57f7\u884c\u4efb\u610f Python \u9673\u8ff0\u5f0f\uff1f": [[79, "how-can-i-execute-arbitrary-python-statements-from-c"]], "How can I evaluate an arbitrary Python expression from C?": [[79, "how-can-i-evaluate-an-arbitrary-python-expression-from-c"]], "\u5982\u4f55\u5f9e Python \u7269\u4ef6\u4e2d\u63d0\u53d6 C \u503c\uff1f": [[79, "how-do-i-extract-c-values-from-a-python-object"]], "\u5982\u4f55\u4f7f\u7528 Py_BuildValue() \u5efa\u7acb\u4efb\u610f\u9577\u5ea6\u7684\u5143\u7d44\uff1f": [[79, "how-do-i-use-py-buildvalue-to-create-a-tuple-of-arbitrary-length"]], "\u5982\u4f55\u5f9e C \u547c\u53eb\u7269\u4ef6\u7684\u65b9\u6cd5\uff1f": [[79, "how-do-i-call-an-object-s-method-from-c"]], "\u6211\u5982\u4f55\u6355\u6349 PyErr_Print() \u7684\u8f38\u51fa\uff08\u6216\u4efb\u4f55\u5370\u51fa\u5230 stdout/stderr \u7684\u6771\u897f\uff09\uff1f": [[79, "how-do-i-catch-the-output-from-pyerr-print-or-anything-that-prints-to-stdout-stderr"]], "\u5982\u4f55\u5f9e C \u5b58\u53d6\u7528 Python \u7de8\u5beb\u7684\u6a21\u7d44\uff1f": [[79, "how-do-i-access-a-module-written-in-python-from-c"]], "How do I interface to C++ objects from Python?": [[79, "how-do-i-interface-to-c-objects-from-python"]], "\u6211\u4f7f\u7528\u5b89\u88dd\u6a94\u6848\u65b0\u589e\u4e86\u4e00\u500b\u6a21\u7d44\uff0c\u4f46 make \u5931\u6557\u4e86\uff1b\u70ba\u4ec0\u9ebc\uff1f": [[79, "i-added-a-module-using-the-setup-file-and-the-make-fails-why"]], "\u5982\u4f55\u70ba\u64f4\u5145\u5957\u4ef6\u9664\u932f\uff1f": [[79, "how-do-i-debug-an-extension"]], "\u6211\u60f3\u5728\u6211\u7684 Linux \u7cfb\u7d71\u4e0a\u7de8\u8b6f\u4e00\u500b Python \u6a21\u7d44\uff0c\u4f46\u662f\u7f3a\u5c11\u4e00\u4e9b\u6a94\u6848\u3002\u70ba\u4ec0\u9ebc\uff1f": [[79, "i-want-to-compile-a-python-module-on-my-linux-system-but-some-files-are-missing-why"]], "\u5982\u4f55\u5f9e\u300c\u7121\u6548\u8f38\u5165\u300d\u5340\u5206\u51fa\u300c\u4e0d\u5b8c\u6574\u8f38\u5165\u300d\uff1f": [[79, "how-do-i-tell-incomplete-input-from-invalid-input"]], "\u5982\u4f55\u627e\u5230\u672a\u5b9a\u7fa9\u7684 g++ \u7b26\u865f __builtin_new \u6216 __pure_virtual\uff1f": [[79, "how-do-i-find-undefined-g-symbols-builtin-new-or-pure-virtual"]], "Can I create an object class with some methods implemented in C and others in Python (e.g. through inheritance)?": [[79, "can-i-create-an-object-class-with-some-methods-implemented-in-c-and-others-in-python-e-g-through-inheritance"]], "\u4ee5 C \u6216 C++ \u64f4\u5145 Python": [[73, "extending-python-with-c-or-c"]], "\u4e00\u500b\u7c21\u55ae\u7bc4\u4f8b": [[73, "a-simple-example"], [101, "a-simple-example"]], "Intermezzo: Errors and Exceptions": [[73, "intermezzo-errors-and-exceptions"]], "\u56de\u5230\u7bc4\u4f8b": [[73, "back-to-the-example"]], "The Module's Method Table and Initialization Function": [[73, "the-module-s-method-table-and-initialization-function"]], "Compilation and Linkage": [[73, "compilation-and-linkage"]], "Calling Python Functions from C": [[73, "calling-python-functions-from-c"]], "Extracting Parameters in Extension Functions": [[73, "extracting-parameters-in-extension-functions"]], "Keyword Parameters for Extension Functions": [[73, "keyword-parameters-for-extension-functions"]], "Building Arbitrary Values": [[73, "building-arbitrary-values"]], "Reference Counts": [[73, "reference-counts"]], "Reference Counting in Python": [[73, "reference-counting-in-python"]], "Ownership Rules": [[73, "ownership-rules"]], "Thin Ice": [[73, "thin-ice"]], "NULL Pointers": [[73, "null-pointers"]], "Writing Extensions in C++": [[73, "writing-extensions-in-c"]], "Providing a C API for an Extension Module": [[73, "providing-a-c-api-for-an-extension-module"]], "Python \u5982\u4f55\u9054\u6210\u4efb\u52d9": [[97, "python-howtos"]], "\u4f7f\u7528 DTrace \u548c SystemTap \u6aa2\u6e2c CPython": [[98, "instrumenting-cpython-with-dtrace-and-systemtap"]], "\u555f\u7528\u975c\u614b\u6a19\u8a18": [[98, "enabling-the-static-markers"]], "\u975c\u614b DTrace \u63a2\u91dd": [[98, "static-dtrace-probes"]], "\u975c\u614b SystemTap \u6a19\u8a18": [[98, "static-systemtap-markers"]], "\u53ef\u7528\u7684\u975c\u614b\u6a19\u8a18": [[98, "available-static-markers"]], "SystemTap Tapsets": [[98, "systemtap-tapsets"]], "\u7bc4\u4f8b": [[98, "examples"], [42, "examples"], [34, "example"], [63, "examples"], [126, "examples"], [120, "example"], [134, "examples"], [133, "examples"], [423, "examples"], [421, "examples"], [413, "example"], [413, "id3"], [382, "examples"], [379, "examples"], [398, "example"], [378, "examples"], [407, "examples"], [402, "example"], [307, "example"], [330, "example"], [309, "example"], [338, "examples"], [333, "examples"], [314, "example"], [320, "example"], [329, "examples"], [337, "example"], [318, "examples"], [367, "examples"], [356, "examples"], [360, "examples"], [361, "example"], [358, "examples"], [347, "examples"], [341, "examples"], [242, "examples"], [271, "examples"], [240, "examples"], [243, "examples"], [244, "example"], [270, "examples"], [250, "examples"], [299, "example"], [299, "examples"], [304, "examples"], [283, "examples"], [235, "examples"], [214, "example"], [173, "examples"], [175, "examples"], [172, "example"], [136, "examples"], [137, "examples"], [147, "examples"]], "\u8a3b\u91cb (annotation) \u6700\u4f73\u5be6\u8e10": [[88, "annotations-best-practices"]], "\u6458\u8981": [[88, null], [92, null], [93, "abstract"], [107, null], [106, null]], "\u5728 Python 3.10 \u53ca\u66f4\u9ad8\u7248\u672c\u4e2d\u5b58\u53d6\u7269\u4ef6\u7684\u8a3b\u91cb\u5b57\u5178": [[88, "accessing-the-annotations-dict-of-an-object-in-python-3-10-and-newer"]], "\u5728 Python 3.9 \u53ca\u66f4\u65e9\u7248\u672c\u4e2d\u5b58\u53d6\u7269\u4ef6\u7684\u8a3b\u91cb\u5b57\u5178": [[88, "accessing-the-annotations-dict-of-an-object-in-python-3-9-and-older"]], "\u624b\u52d5\u53d6\u6d88\u5b57\u4e32\u5316\u8a3b\u91cb": [[88, "manually-un-stringizing-stringized-annotations"]], "\u4efb\u4f55 Python \u7248\u672c\u4e2d __annotations__ \u7684\u6700\u4f73\u5be6\u8e10": [[88, "best-practices-for-annotations-in-any-python-version"]], "__annotations__ \u5947\u7570\u4e4b\u8655": [[88, "annotations-quirks"]], "Building C and C++ Extensions on Windows": [[77, "building-c-and-c-extensions-on-windows"]], "A Cookbook Approach": [[77, "a-cookbook-approach"]], "Differences Between Unix and Windows": [[77, "differences-between-unix-and-windows"]], "Using DLLs in Practice": [[77, "using-dlls-in-practice"]], "\u7a0b\u5f0f\u958b\u767c\u5e38\u898b\u554f\u7b54\u96c6": [[85, "programming-faq"]], "\u5e38\u898b\u554f\u984c": [[85, "general-questions"]], "\u662f\u5426\u6709\u53ef\u4ee5\u4f7f\u7528\u5728\u7a0b\u5f0f\u78bc\u968e\u6bb5,\u5177\u6709\u4e2d\u65b7\u9ede,\u6b65\u9a5f\u57f7\u884c\u7b49\u529f\u80fd\u7684\u9664\u932f\u5668\uff1f": [[85, "is-there-a-source-code-level-debugger-with-breakpoints-single-stepping-etc"]], "\u6709\u6c92\u6709\u5de5\u5177\u80fd\u5920\u5e6b\u5fd9\u627e bug \u6216\u57f7\u884c\u975c\u614b\u5206\u6790\uff1f": [[85, "are-there-tools-to-help-find-bugs-or-perform-static-analysis"]], "\u5982\u4f55\u5f9e Python \u8173\u672c\u5efa\u7acb\u7368\u7acb\u7684\u4e8c\u9032\u4f4d\u6a94\u6848\uff1f": [[85, "how-can-i-create-a-stand-alone-binary-from-a-python-script"]], "Python \u7a0b\u5f0f\u78bc\u662f\u5426\u6709\u7de8\u78bc\u6a19\u6e96\u6216\u98a8\u683c\u6307\u5357\uff1f": [[85, "are-there-coding-standards-or-a-style-guide-for-python-programs"]], "\u6838\u5fc3\u8a9e\u8a00": [[85, "core-language"]], "\u70ba\u4ec0\u9ebc\u7576\u8b8a\u6578\u6709\u503c\u6642\uff0c\u6211\u4ecd\u5f97\u5230\u932f\u8aa4\u8a0a\u606f UnboundLocalError\uff1f": [[85, "why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value"]], "Python \u7684\u5340\u57df\u8b8a\u6578\u548c\u5168\u57df\u8b8a\u6578\u6709\u4ec0\u9ebc\u898f\u5247\uff1f": [[85, "what-are-the-rules-for-local-and-global-variables-in-python"]], "Why do lambdas defined in a loop with different values all return the same result?": [[85, "why-do-lambdas-defined-in-a-loop-with-different-values-all-return-the-same-result"]], "\u5982\u4f55\u8de8\u6a21\u7d44\u5171\u4eab\u5168\u57df\u8b8a\u6578\uff1f": [[85, "how-do-i-share-global-variables-across-modules"]], "What are the \"best practices\" for using import in a module?": [[85, "what-are-the-best-practices-for-using-import-in-a-module"]], "Why are default values shared between objects?": [[85, "why-are-default-values-shared-between-objects"]], "How can I pass optional or keyword parameters from one function to another?": [[85, "how-can-i-pass-optional-or-keyword-parameters-from-one-function-to-another"]], "\u5f15\u6578 (arguments) \u548c\u53c3\u6578 (parameters) \u6709\u4ec0\u9ebc\u5340\u5225\uff1f": [[85, "what-is-the-difference-between-arguments-and-parameters"]], "\u70ba\u4ec0\u9ebc\u66f4\u6539 list 'y' \u4e5f\u6703\u66f4\u6539 list 'x'\uff1f": [[85, "why-did-changing-list-y-also-change-list-x"]], "How do I write a function with output parameters (call by reference)?": [[85, "how-do-i-write-a-function-with-output-parameters-call-by-reference"]], "How do you make a higher order function in Python?": [[85, "how-do-you-make-a-higher-order-function-in-python"]], "\u5982\u4f55\u5728 Python \u4e2d\u8907\u88fd\u7269\u4ef6\uff1f": [[85, "how-do-i-copy-an-object-in-python"]], "\u5982\u4f55\u627e\u5230\u7269\u4ef6\u7684\u65b9\u6cd5\u6216\u5c6c\u6027\uff1f": [[85, "how-can-i-find-the-methods-or-attributes-of-an-object"]], "\u6211\u7684\u7a0b\u5f0f\u78bc\u5982\u4f55\u767c\u73fe\u7269\u4ef6\u7684\u540d\u7a31\uff1f": [[85, "how-can-my-code-discover-the-name-of-an-object"]], "What's up with the comma operator's precedence?": [[85, "what-s-up-with-the-comma-operator-s-precedence"]], "\u662f\u5426\u6709\u7b49\u6548\u65bc C \u7684 \"?:\" \u4e09\u5143\u904b\u7b97\u5b50\uff1f": [[85, "is-there-an-equivalent-of-c-s-ternary-operator"]], "Is it possible to write obfuscated one-liners in Python?": [[85, "is-it-possible-to-write-obfuscated-one-liners-in-python"]], "What does the slash(/) in the parameter list of a function mean?": [[85, "what-does-the-slash-in-the-parameter-list-of-a-function-mean"]], "\u6578\u5b57\u548c\u5b57\u4e32": [[85, "numbers-and-strings"]], "\u5982\u4f55\u6307\u5b9a\u5341\u516d\u9032\u4f4d\u548c\u516b\u9032\u4f4d\u6574\u6578\uff1f": [[85, "how-do-i-specify-hexadecimal-and-octal-integers"]], "\u70ba\u4ec0\u9ebc -22 // 10 \u56de\u50b3 -3\uff1f": [[85, "why-does-22-10-return-3"]], "How do I get int literal attribute instead of SyntaxError?": [[85, "how-do-i-get-int-literal-attribute-instead-of-syntaxerror"]], "\u5982\u4f55\u5c07\u5b57\u4e32\u8f49\u63db\u70ba\u6578\u5b57\uff1f": [[85, "how-do-i-convert-a-string-to-a-number"]], "\u5982\u4f55\u5c07\u6578\u5b57\u8f49\u63db\u70ba\u5b57\u4e32\uff1f": [[85, "how-do-i-convert-a-number-to-a-string"]], "How do I modify a string in place?": [[85, "how-do-i-modify-a-string-in-place"]], "How do I use strings to call functions/methods?": [[85, "how-do-i-use-strings-to-call-functions-methods"]], "Is there an equivalent to Perl's chomp() for removing trailing newlines from strings?": [[85, "is-there-an-equivalent-to-perl-s-chomp-for-removing-trailing-newlines-from-strings"]], "Is there a scanf() or sscanf() equivalent?": [[85, "is-there-a-scanf-or-sscanf-equivalent"]], "'UnicodeDecodeError' \u6216 'UnicodeEncodeErro' \u932f\u8aa4\u662f\u4ec0\u9ebc\u610f\u601d\uff1f": [[85, "what-does-unicodedecodeerror-or-unicodeencodeerror-error-mean"]], "Can I end a raw string with an odd number of backslashes?": [[85, "can-i-end-a-raw-string-with-an-odd-number-of-backslashes"]], "Performance": [[85, "performance"], [470, "performance"], [258, "performance"], [299, "performance"]], "My program is too slow. How do I speed it up?": [[85, "my-program-is-too-slow-how-do-i-speed-it-up"]], "What is the most efficient way to concatenate many strings together?": [[85, "what-is-the-most-efficient-way-to-concatenate-many-strings-together"]], "Sequences (Tuples/Lists)": [[85, "sequences-tuples-lists"]], "How do I convert between tuples and lists?": [[85, "how-do-i-convert-between-tuples-and-lists"]], "What's a negative index?": [[85, "what-s-a-negative-index"]], "How do I iterate over a sequence in reverse order?": [[85, "how-do-i-iterate-over-a-sequence-in-reverse-order"]], "How do you remove duplicates from a list?": [[85, "how-do-you-remove-duplicates-from-a-list"]], "How do you remove multiple items from a list": [[85, "how-do-you-remove-multiple-items-from-a-list"]], "How do you make an array in Python?": [[85, "how-do-you-make-an-array-in-python"]], "How do I create a multidimensional list?": [[85, "how-do-i-create-a-multidimensional-list"]], "How do I apply a method or function to a sequence of objects?": [[85, "how-do-i-apply-a-method-or-function-to-a-sequence-of-objects"]], "Why does a_tuple[i] += ['item'] raise an exception when the addition works?": [[85, "why-does-a-tuple-i-item-raise-an-exception-when-the-addition-works"]], "I want to do a complicated sort: can you do a Schwartzian Transform in Python?": [[85, "i-want-to-do-a-complicated-sort-can-you-do-a-schwartzian-transform-in-python"]], "How can I sort one list by values from another list?": [[85, "how-can-i-sort-one-list-by-values-from-another-list"]], "\u7269\u4ef6": [[85, "objects"]], "\u4ec0\u9ebc\u662f\u985e\u5225 (class)\uff1f": [[85, "what-is-a-class"]], "\u4ec0\u9ebc\u662f\u65b9\u6cd5 (method)\uff1f": [[85, "what-is-a-method"]], "What is self?": [[85, "what-is-self"]], "How do I check if an object is an instance of a given class or of a subclass of it?": [[85, "how-do-i-check-if-an-object-is-an-instance-of-a-given-class-or-of-a-subclass-of-it"]], "What is delegation?": [[85, "what-is-delegation"]], "How do I call a method defined in a base class from a derived class that extends it?": [[85, "how-do-i-call-a-method-defined-in-a-base-class-from-a-derived-class-that-extends-it"]], "How can I organize my code to make it easier to change the base class?": [[85, "how-can-i-organize-my-code-to-make-it-easier-to-change-the-base-class"]], "How do I create static class data and static class methods?": [[85, "how-do-i-create-static-class-data-and-static-class-methods"]], "How can I overload constructors (or methods) in Python?": [[85, "how-can-i-overload-constructors-or-methods-in-python"]], "I try to use __spam and I get an error about _SomeClassName__spam.": [[85, "i-try-to-use-spam-and-i-get-an-error-about-someclassname-spam"]], "My class defines __del__ but it is not called when I delete the object.": [[85, "my-class-defines-del-but-it-is-not-called-when-i-delete-the-object"]], "How do I get a list of all instances of a given class?": [[85, "how-do-i-get-a-list-of-all-instances-of-a-given-class"]], "Why does the result of id() appear to be not unique?": [[85, "why-does-the-result-of-id-appear-to-be-not-unique"]], "\u6211\u4ec0\u9ebc\u6642\u5019\u53ef\u4ee5\u4f9d\u9760 is \u904b\u7b97\u5b50\u9032\u884c\u8b58\u5225\u6027\u6e2c\u8a66\uff1f": [[85, "when-can-i-rely-on-identity-tests-with-the-is-operator"]], "\u5b50\u985e\u5225\u5982\u4f55\u63a7\u5236\u4e0d\u53ef\u8b8a\u5be6\u4f8b\u4e2d\u5b58\u5132\u7684\u8cc7\u6599\uff1f": [[85, "how-can-a-subclass-control-what-data-is-stored-in-an-immutable-instance"]], "How do I cache method calls?": [[85, "how-do-i-cache-method-calls"]], "\u6a21\u7d44": [[85, "modules"], [428, "modules"], [430, "examples"], [473, "modules"], [344, "modules"]], "How do I create a .pyc file?": [[85, "how-do-i-create-a-pyc-file"]], "How do I find the current module name?": [[85, "how-do-i-find-the-current-module-name"]], "How can I have modules that mutually import each other?": [[85, "how-can-i-have-modules-that-mutually-import-each-other"]], "__import__('x.y.z') \u56de\u50b3 <module 'x'>\uff0c\u90a3\u6211\u600e\u9ebc\u5f97\u5230 z\uff1f": [[85, "import-x-y-z-returns-module-x-how-do-i-get-z"]], "\u7576\u6211\u7de8\u8f2f\u9700\u8981\u5f15\u5165\u7684\u6a21\u7d44\u4e26\u91cd\u65b0\u5f15\u5165\u5b83\u6642\uff0c\u66f4\u52d5\u6c92\u6709\u53cd\u61c9\u51fa\u4f86\u3002\u70ba\u4ec0\u9ebc\u6703\u9019\u6a23\uff1f": [[85, "when-i-edit-an-imported-module-and-reimport-it-the-changes-don-t-show-up-why-does-this-happen"]], "Curses Programming with Python": [[92, "curses-programming-with-python"]], "What is curses?": [[92, "what-is-curses"]], "The Python curses module": [[92, "the-python-curses-module"]], "Starting and ending a curses application": [[92, "starting-and-ending-a-curses-application"]], "Windows and Pads": [[92, "windows-and-pads"]], "Displaying Text": [[92, "displaying-text"]], "Attributes and Color": [[92, "attributes-and-color"]], "User Input": [[92, "user-input"]], "For More Information": [[92, "for-more-information"]], "Debugging C API extensions and CPython Internals with GDB": [[96, "debugging-c-api-extensions-and-cpython-internals-with-gdb"]], "Prerequisites": [[96, "prerequisites"]], "Setup with Python built from source": [[96, "setup-with-python-built-from-source"]], "Setup for Python from a Linux distro": [[96, "setup-for-python-from-a-linux-distro"]], "Using the Debug build and Development mode": [[96, "using-the-debug-build-and-development-mode"]], "Using the python-gdb extension": [[96, "using-the-python-gdb-extension"]], "Pretty-printers": [[96, "pretty-printers"]], "py-list": [[96, "py-list"]], "py-up and py-down": [[96, "py-up-and-py-down"]], "py-bt": [[96, "py-bt"]], "py-print": [[96, "py-print"]], "py-locals": [[96, "py-locals"]], "Use with GDB commands": [[96, "use-with-gdb-commands"]], "\u8853\u8a9e\u8868": [[87, "glossary"]], "ipaddress \u6a21\u7d44\u4ecb\u7d39": [[99, "an-introduction-to-the-ipaddress-module"]], "\u7e3d\u652c": [[99, null]], "Creating Address/Network/Interface objects": [[99, "creating-address-network-interface-objects"]], "A Note on IP Versions": [[99, "a-note-on-ip-versions"]], "IP Host Addresses": [[99, "ip-host-addresses"]], "Defining Networks": [[99, "defining-networks"]], "Host Interfaces": [[99, "host-interfaces"]], "Inspecting Address/Network/Interface Objects": [[99, "inspecting-address-network-interface-objects"]], "Networks as lists of Addresses": [[99, "networks-as-lists-of-addresses"]], "Using IP Addresses with other modules": [[99, "using-ip-addresses-with-other-modules"]], "Getting more detail when instance creation fails": [[99, "getting-more-detail-when-instance-creation-fails"]], "\u767c\u5e03 Python \u6a21\u7d44": [[70, "distributing-python-modules"]], "\u5982\u4f55\u4f7f\u7528 Logging \u6a21\u7d44": [[101, "logging-howto"]], "\u57fa\u790e Logging \u6307\u5357": [[101, "basic-logging-tutorial"]], "\u4ec0\u9ebc\u6642\u5019\u4f7f\u7528 logging": [[101, "when-to-use-logging"]], "Logging to a file": [[101, "logging-to-a-file"]], "Logging variable data": [[101, "logging-variable-data"]], "Changing the format of displayed messages": [[101, "changing-the-format-of-displayed-messages"]], "Displaying the date/time in messages": [[101, "displaying-the-date-time-in-messages"]], "Next Steps": [[101, "next-steps"]], "Advanced Logging Tutorial": [[101, "advanced-logging-tutorial"]], "Logging Flow": [[101, "logging-flow"]], "Loggers": [[101, "loggers"]], "Handlers": [[101, "handlers"]], "Formatters": [[101, "formatters"]], "Configuring Logging": [[101, "configuring-logging"]], "What happens if no configuration is provided": [[101, "what-happens-if-no-configuration-is-provided"]], "Configuring Logging for a Library": [[101, "configuring-logging-for-a-library"]], "Logging Levels": [[101, "logging-levels"], [267, "logging-levels"]], "Custom Levels": [[101, "custom-levels"]], "Useful Handlers": [[101, "useful-handlers"]], "Exceptions raised during logging": [[101, "exceptions-raised-during-logging"]], "Using arbitrary objects as messages": [[101, "using-arbitrary-objects-as-messages"]], "Optimization": [[101, "optimization"]], "Other resources": [[101, "other-resources"], [102, "other-resources"]], "Python \u5e38\u898b\u554f\u984c": [[82, "python-frequently-asked-questions"]], "Argument Clinic \u6307\u5357": [[90, "argument-clinic-how-to"]], "\u5728\u5176\u5b83 App \u5167\u5d4c\u5165 Python": [[72, "embedding-python-in-another-application"]], "Very High Level Embedding": [[72, "very-high-level-embedding"]], "Beyond Very High Level Embedding: An overview": [[72, "beyond-very-high-level-embedding-an-overview"]], "Pure Embedding": [[72, "pure-embedding"]], "Extending Embedded Python": [[72, "extending-embedded-python"]], "Embedding Python in C++": [[72, "embedding-python-in-c"]], "Compiling and Linking under Unix-like systems": [[72, "compiling-and-linking-under-unix-like-systems"]], "\u300c\u70ba\u4ec0\u9ebc Python \u88ab\u5b89\u88dd\u5728\u6211\u7684\u6a5f\u5668\u4e0a\uff1f\u300d\u5e38\u898b\u554f\u7b54\u96c6": [[83, "why-is-python-installed-on-my-computer-faq"]], "\u4ec0\u9ebc\u662f Python\uff1f": [[83, "what-is-python"], [80, "what-is-python"]], "\u70ba\u4ec0\u9ebc Python \u88ab\u5b89\u88dd\u5728\u6211\u7684\u6a5f\u5668\u4e0a?": [[83, "why-is-python-installed-on-my-machine"]], "\u6211\u80fd\u5920\u81ea\u884c\u522a\u9664 Python \u55ce\uff1f": [[83, "can-i-delete-python"]], "Python \u8aaa\u660e\u6587\u4ef6\u5167\u5bb9": [[68, "python-documentation-contents"]], "\u51fd\u5f0f\u7de8\u7a0b HOWTO": [[95, "functional-programming-howto"]], "\u7c21\u4ecb": [[95, "introduction"], [35, "introduction"], [110, "introduction"], [106, "introduction"], [434, "introduction"], [463, "introduction"], [453, "introduction"], [464, "introduction"], [462, "introduction"], [329, "introduction"], [257, "introduction"], [250, "introduction"], [283, "introduction"], [151, "introduction"]], "Formal provability": [[95, "formal-provability"]], "Modularity": [[95, "modularity"]], "Ease of debugging and testing": [[95, "ease-of-debugging-and-testing"]], "Composability": [[95, "composability"]], "Iterators": [[95, "iterators"]], "Data Types That Support Iterators": [[95, "data-types-that-support-iterators"]], "Generator expressions and list comprehensions": [[95, "generator-expressions-and-list-comprehensions"]], "Generators": [[95, "generators"]], "Passing values into a generator": [[95, "passing-values-into-a-generator"]], "Built-in functions": [[95, "built-in-functions"], [428, "built-in-functions"]], "The itertools module": [[95, "the-itertools-module"]], "Creating new iterators": [[95, "creating-new-iterators"]], "Calling functions on elements": [[95, "calling-functions-on-elements"]], "Selecting elements": [[95, "selecting-elements"]], "Combinatoric functions": [[95, "combinatoric-functions"]], "Grouping elements": [[95, "grouping-elements"]], "The functools module": [[95, "the-functools-module"]], "The operator module": [[95, "the-operator-module"]], "Small functions and the lambda expression": [[95, "small-functions-and-the-lambda-expression"]], "Revision History and Acknowledgements": [[95, "revision-history-and-acknowledgements"]], "References": [[95, "references"], [109, "references"], [109, "id2"], [109, "id3"], [432, "references"]], "General": [[95, "general"]], "Python-specific": [[95, "python-specific"]], "Python \u8aaa\u660e\u6587\u4ef6": [[95, "python-documentation"]], "Defining Extension Types: Tutorial": [[76, "defining-extension-types-tutorial"]], "The Basics": [[76, "the-basics"]], "Adding data and methods to the Basic example": [[76, "adding-data-and-methods-to-the-basic-example"]], "Providing finer control over data attributes": [[76, "providing-finer-control-over-data-attributes"]], "Supporting cyclic garbage collection": [[76, "supporting-cyclic-garbage-collection"]], "Subclassing other types": [[76, "subclassing-other-types"]], "Defining Extension Types: Assorted Topics": [[75, "defining-extension-types-assorted-topics"]], "Finalization and De-allocation": [[75, "finalization-and-de-allocation"]], "Object Presentation": [[75, "object-presentation"]], "Attribute Management": [[75, "attribute-management"]], "Generic Attribute Management": [[75, "generic-attribute-management"]], "Type-specific Attribute Management": [[75, "type-specific-attribute-management"]], "Object Comparison": [[75, "object-comparison"]], "Abstract Protocol Support": [[75, "abstract-protocol-support"]], "Weak Reference Support": [[75, "weak-reference-support"]], "More Suggestions": [[75, "more-suggestions"]], "\u63cf\u8ff0\u5668 (Descriptor) \u6307\u5357": [[93, "descriptor-guide"]], "Primer": [[93, "primer"]], "Simple example: A descriptor that returns a constant": [[93, "simple-example-a-descriptor-that-returns-a-constant"]], "Dynamic lookups": [[93, "dynamic-lookups"]], "Managed attributes": [[93, "managed-attributes"]], "Customized names": [[93, "customized-names"]], "Closing thoughts": [[93, "closing-thoughts"]], "Complete Practical Example": [[93, "complete-practical-example"]], "Validator class": [[93, "validator-class"]], "Custom validators": [[93, "custom-validators"]], "Practical application": [[93, "practical-application"]], "Technical Tutorial": [[93, "technical-tutorial"]], "Definition and introduction": [[93, "definition-and-introduction"]], "\u63cf\u8ff0\u5668\u5354\u5b9a": [[93, "descriptor-protocol"]], "Overview of descriptor invocation": [[93, "overview-of-descriptor-invocation"]], "Invocation from an instance": [[93, "invocation-from-an-instance"]], "Invocation from a class": [[93, "invocation-from-a-class"]], "Invocation from super": [[93, "invocation-from-super"]], "Summary of invocation logic": [[93, "summary-of-invocation-logic"]], "Automatic name notification": [[93, "automatic-name-notification"]], "ORM \u7bc4\u4f8b": [[93, "orm-example"]], "Pure Python Equivalents": [[93, "pure-python-equivalents"]], "Properties": [[93, "properties"]], "Functions and methods": [[93, "functions-and-methods"]], "Kinds of methods": [[93, "kinds-of-methods"]], "Static methods": [[93, "static-methods"]], "Class methods": [[93, "class-methods"]], "Member objects and __slots__": [[93, "member-objects-and-slots"]], "Isolating Extension Modules": [[100, "isolating-extension-modules"]], "Abstract": [[100, null]], "Who should read this": [[100, "who-should-read-this"]], "Background": [[100, "background"], [292, "background"]], "Enter Per-Module State": [[100, "enter-per-module-state"]], "Isolated Module Objects": [[100, "isolated-module-objects"]], "Surprising Edge Cases": [[100, "surprising-edge-cases"]], "Making Modules Safe with Multiple Interpreters": [[100, "making-modules-safe-with-multiple-interpreters"]], "Managing Global State": [[100, "managing-global-state"]], "Managing Per-Module State": [[100, "managing-per-module-state"]], "Opt-Out: Limiting to One Module Object per Process": [[100, "opt-out-limiting-to-one-module-object-per-process"]], "Module State Access from Functions": [[100, "module-state-access-from-functions"]], "Heap Types": [[100, "heap-types"], [63, "heap-types"]], "Changing Static Types to Heap Types": [[100, "changing-static-types-to-heap-types"]], "Defining Heap Types": [[100, "defining-heap-types"]], "Garbage-Collection Protocol": [[100, "garbage-collection-protocol"]], "tp_traverse in Python 3.8 and lower": [[100, "tp-traverse-in-python-3-8-and-lower"]], "Delegating tp_traverse": [[100, "delegating-tp-traverse"]], "Defining tp_dealloc": [[100, "defining-tp-dealloc"]], "Not overriding tp_free": [[100, "not-overriding-tp-free"]], "Avoiding PyObject_New": [[100, "avoiding-pyobject-new"]], "Module State Access from Classes": [[100, "module-state-access-from-classes"]], "Module State Access from Regular Methods": [[100, "module-state-access-from-regular-methods"]], "Module State Access from Slot Methods, Getters and Setters": [[100, "module-state-access-from-slot-methods-getters-and-setters"]], "Lifetime of the Module State": [[100, "lifetime-of-the-module-state"]], "Open Issues": [[100, "open-issues"]], "Per-Class Scope": [[100, "per-class-scope"]], "Lossless Conversion to Heap Types": [[100, "lossless-conversion-to-heap-types"]], "\u8a2d\u8a08\u548c\u6b77\u53f2\u5e38\u898b\u554f\u7b54\u96c6": [[78, "design-and-history-faq"]], "\u70ba\u4ec0\u9ebc Python \u4f7f\u7528\u7e2e\u6392\u5c07\u9673\u8ff0\u5f0f\u9032\u884c\u5206\u7d44\uff1f": [[78, "why-does-python-use-indentation-for-grouping-of-statements"]], "\u70ba\u4ec0\u9ebc\u6211\u6703\u5f9e\u7c21\u55ae\u7684\u6578\u5b78\u904b\u7b97\u5f97\u5230\u5947\u602a\u7684\u7d50\u679c\uff1f": [[78, "why-am-i-getting-strange-results-with-simple-arithmetic-operations"]], "\u70ba\u4f55\u6d6e\u9ede\u6578\u904b\u7b97\u5982\u6b64\u4e0d\u7cbe\u78ba\uff1f": [[78, "why-are-floating-point-calculations-so-inaccurate"]], "\u70ba\u4ec0\u9ebc Python \u5b57\u4e32\u4e0d\u53ef\u8b8a\u52d5\uff1f": [[78, "why-are-python-strings-immutable"]], "\u70ba\u4f55\u300cself\u300d\u5728\u65b9\u6cd5 (method) \u5b9a\u7fa9\u548c\u547c\u53eb\u6642\u4e00\u5b9a\u8981\u660e\u78ba\u4f7f\u7528\uff1f": [[78, "why-must-self-be-used-explicitly-in-method-definitions-and-calls"]], "\u70ba\u4f55\u6211\u4e0d\u80fd\u5728\u904b\u7b97\u5f0f (expression) \u4e2d\u4f7f\u7528\u6307\u6d3e\u904b\u7b97\uff1f": [[78, "why-can-t-i-use-an-assignment-in-an-expression"]], "\u70ba\u4f55 Python \u5c0d\u65bc\u4e00\u4e9b\u529f\u80fd\u5be6\u4f5c\u4f7f\u7528\u65b9\u6cd5\uff08\u50cf\u662f list.index()\uff09\uff0c\u53e6\u4e00\u4e9b\u4f7f\u7528\u51fd\u5f0f\uff08\u50cf\u662f len(list)\uff09\uff1f": [[78, "why-does-python-use-methods-for-some-functionality-e-g-list-index-but-functions-for-other-e-g-len-list"]], "\u70ba\u4f55 join() \u662f\u5b57\u4e32\u65b9\u6cd5\u800c\u975e\u4e32\u5217 (list) \u6216\u5143\u7d44 (tuple) \u65b9\u6cd5\uff1f": [[78, "why-is-join-a-string-method-instead-of-a-list-or-tuple-method"]], "\u4f8b\u5916\u8655\u7406\u6709\u591a\u5feb\uff1f": [[78, "how-fast-are-exceptions"]], "\u70ba\u4ec0\u9ebc Python \u5167\u6c92\u6709 switch \u6216 case \u9673\u8ff0\u5f0f\uff1f": [[78, "why-isn-t-there-a-switch-or-case-statement-in-python"]], "\u70ba\u4f55\u4e0d\u80fd\u5728\u76f4\u8b6f\u5668\u4e0a\u6a21\u64ec\u57f7\u884c\u7dd2\uff0c\u800c\u8981\u4f7f\u7528\u4f5c\u696d\u7cfb\u7d71\u7684\u7279\u5b9a\u5be6\u4f5c\u65b9\u5f0f\uff1f": [[78, "can-t-you-emulate-threads-in-the-interpreter-instead-of-relying-on-an-os-specific-thread-implementation"]], "\u70ba\u4f55 lambda \u904b\u7b97\u5f0f\u4e0d\u80fd\u5305\u542b\u9673\u8ff0\u5f0f\uff1f": [[78, "why-can-t-lambda-expressions-contain-statements"]], "Python \u53ef\u4ee5\u88ab\u7de8\u8b6f\u6210\u6a5f\u5668\u8a9e\u8a00\u3001C \u8a9e\u8a00\u6216\u5176\u4ed6\u7a2e\u8a9e\u8a00\u55ce\uff1f": [[78, "can-python-be-compiled-to-machine-code-c-or-some-other-language"]], "Python \u5982\u4f55\u7ba1\u7406\u8a18\u61b6\u9ad4\uff1f": [[78, "how-does-python-manage-memory"]], "\u70ba\u4f55 CPython \u4e0d\u4f7f\u7528\u66f4\u591a\u50b3\u7d71\u7684\u5783\u573e\u56de\u6536\u6a5f\u5236\uff1f": [[78, "why-doesn-t-cpython-use-a-more-traditional-garbage-collection-scheme"]], "\u7576 CPython \u7d50\u675f\u6642\uff0c\u70ba\u4f55\u6240\u6709\u7684\u8a18\u61b6\u9ad4\u4e0d\u6703\u88ab\u91cb\u653e\uff1f": [[78, "why-isn-t-all-memory-freed-when-cpython-exits"]], "\u70ba\u4f55\u8981\u628a\u5143\u7d44 (tuple) \u548c\u4e32\u5217 (list) \u5206\u6210\u5169\u500b\u8cc7\u6599\u578b\u614b\uff1f": [[78, "why-are-there-separate-tuple-and-list-data-types"]], "\u4e32\u5217 (list) \u5728 CPython \u4e2d\u662f\u600e\u9ebc\u5be6\u4f5c\u7684\uff1f": [[78, "how-are-lists-implemented-in-cpython"]], "\u5b57\u5178 (dictionaries) \u5728 CPython \u4e2d\u662f\u600e\u9ebc\u5be6\u4f5c\u7684\uff1f": [[78, "how-are-dictionaries-implemented-in-cpython"]], "\u70ba\u4f55\u5b57\u5178\u7684\u9375\u4e00\u5b9a\u662f\u4e0d\u53ef\u8b8a\u7684\uff1f": [[78, "why-must-dictionary-keys-be-immutable"]], "\u70ba\u4f55 list.sort() \u4e0d\u662f\u56de\u50b3\u6392\u5e8f\u904e\u7684\u4e32\u5217\uff1f": [[78, "why-doesn-t-list-sort-return-the-sorted-list"]], "\u5982\u4f55\u5728 Python \u4e2d\u6307\u5b9a\u548c\u5f37\u5236\u4f7f\u7528\u4e00\u500b\u4ecb\u9762\u898f\u7bc4 (interface spec)\uff1f": [[78, "how-do-you-specify-and-enforce-an-interface-spec-in-python"]], "\u70ba\u4f55\u6c92\u6709 goto \u8a9e\u6cd5\uff1f": [[78, "why-is-there-no-goto"]], "\u70ba\u4f55\u7d14\u5b57\u4e32 (r-string) \u4e0d\u80fd\u4ee5\u53cd\u659c\u7dda\u7d50\u5c3e\uff1f": [[78, "why-can-t-raw-strings-r-strings-end-with-a-backslash"]], "\u70ba\u4f55 Python \u6c92\u6709\u5c6c\u6027\u8ce6\u503c\u7684 with \u9673\u8ff0\u5f0f\uff1f": [[78, "why-doesn-t-python-have-a-with-statement-for-attribute-assignments"]], "\u70ba\u4f55\u7522\u751f\u5668 (generator) \u4e0d\u652f\u63f4 with \u9673\u8ff0\u5f0f\uff1f": [[78, "why-don-t-generators-support-the-with-statement"]], "\u70ba\u4f55 if\u3001while\u3001def\u3001class \u9673\u8ff0\u5f0f\u88e1\u9700\u8981\u5192\u865f\uff1f": [[78, "why-are-colons-required-for-the-if-while-def-class-statements"]], "\u70ba\u4f55 Python \u5141\u8a31\u5728\u4e32\u5217\u548c\u5143\u7d44\u672b\u7aef\u52a0\u4e0a\u9017\u865f\uff1f": [[78, "why-does-python-allow-commas-at-the-end-of-lists-and-tuples"]], "\u7248\u6b0a\u5ba3\u544a": [[69, "copyright"]], "\u4e00\u822c\u7684 Python \u5e38\u898b\u554f\u7b54\u96c6": [[80, "general-python-faq"]], "\u4e00\u822c\u8cc7\u8a0a": [[80, "general-information"]], "\u4ec0\u9ebc\u662f Python \u8edf\u9ad4\u57fa\u91d1\u6703\uff1f": [[80, "what-is-the-python-software-foundation"]], "\u4f7f\u7528 Python \u6642\u6709\u4efb\u4f55\u7248\u6b0a\u9650\u5236\u55ce\uff1f": [[80, "are-there-copyright-restrictions-on-the-use-of-python"]], "\u7576\u521d\u70ba\u4ec0\u9ebc Python \u6703\u88ab\u5275\u9020\u51fa\u4f86\uff1f": [[80, "why-was-python-created-in-the-first-place"]], "\u4ec0\u9ebc\u662f Python \u64c5\u9577\u7684\u4e8b\u60c5\uff1f": [[80, "what-is-python-good-for"]], "Python \u7684\u7248\u672c\u7de8\u865f\u7cfb\u7d71\u662f\u5982\u4f55\u904b\u4f5c\u7684\uff1f": [[80, "how-does-the-python-version-numbering-scheme-work"]], "\u6211\u8981\u5982\u4f55\u5f97\u5230 Python \u7684\u539f\u59cb\u78bc\u8907\u672c\uff1f": [[80, "how-do-i-obtain-a-copy-of-the-python-source"]], "\u6211\u8981\u5982\u4f55\u53d6\u5f97 Python \u7684\u8aaa\u660e\u6587\u4ef6\uff1f": [[80, "how-do-i-get-documentation-on-python"]], "\u6211\u5f9e\u4f86\u6c92\u6709\u5beb\u904e\u7a0b\u5f0f\uff0c\u6709\u6c92\u6709 Python \u7684\u6559\u5b78\uff1f": [[80, "i-ve-never-programmed-before-is-there-a-python-tutorial"]], "\u6709\u6c92\u6709 Python \u5c08\u5c6c\u7684\u65b0\u805e\u7fa4\u7d44\u6216\u90f5\u4ef6\u8a0e\u8ad6\u7fa4\uff1f": [[80, "is-there-a-newsgroup-or-mailing-list-devoted-to-python"]], "\u5982\u4f55\u53d6\u5f97 Python \u7684 beta \u6e2c\u8a66\u7248\u672c\uff1f": [[80, "how-do-i-get-a-beta-test-version-of-python"]], "\u5982\u4f55\u63d0\u4ea4 Python \u7684\u932f\u8aa4\u5831\u544a\u548c\u4fee\u88dc\u7a0b\u5f0f\uff1f": [[80, "how-do-i-submit-bug-reports-and-patches-for-python"]], "\u662f\u5426\u6709\u95dc\u65bc Python \u7684\u4efb\u4f55\u5df2\u51fa\u7248\u6587\u7ae0\u53ef\u4f9b\u53c3\u8003\uff1f": [[80, "are-there-any-published-articles-about-python-that-i-can-reference"]], "\u6709\u6c92\u6709\u95dc\u65bc Python \u7684\u66f8\uff1f": [[80, "are-there-any-books-on-python"]], "www.python.org \u7684\u771f\u5be6\u4f4d\u7f6e\u5728\u54ea\u88e1\uff1f": [[80, "where-in-the-world-is-www-python-org-located"]], "\u70ba\u4ec0\u9ebc\u8981\u53d6\u540d\u70ba Python\uff1f": [[80, "why-is-it-called-python"]], "\u6211\u9700\u8981\u559c\u6b61\u300cMonty Python \u7684\u98db\u884c\u99ac\u6232\u5718\u300d\u55ce\uff1f": [[80, "do-i-have-to-like-monty-python-s-flying-circus"]], "\u5728\u771f\u5be6\u4e16\u754c\u4e2d\u7684 Python": [[80, "python-in-the-real-world"]], "Python \u7684\u7a69\u5b9a\u6027\u5982\u4f55\uff1f": [[80, "how-stable-is-python"]], "\u6709\u591a\u5c11\u4eba\u5728\u4f7f\u7528 Python\uff1f": [[80, "how-many-people-are-using-python"]], "\u6709\u6c92\u6709\u4efb\u4f55\u91cd\u8981\u7684\u5c08\u6848\u4f7f\u7528 Python \u5b8c\u6210\u958b\u767c\uff1f": [[80, "have-any-significant-projects-been-done-in-python"]], "Python \u672a\u4f86\u9810\u671f\u6703\u6709\u54ea\u4e9b\u65b0\u7684\u958b\u767c\uff1f": [[80, "what-new-developments-are-expected-for-python-in-the-future"]], "\u5c0d Python \u63d0\u51fa\u4e0d\u76f8\u5bb9\u7684\u8b8a\u66f4\u5efa\u8b70\u662f\u5426\u9069\u7576\uff1f": [[80, "is-it-reasonable-to-propose-incompatible-changes-to-python"]], "Python \u5c0d\u65bc\u5165\u9580\u7684\u7a0b\u5f0f\u8a2d\u8a08\u5e2b\u800c\u8a00\u662f\u5426\u70ba\u597d\u7684\u8a9e\u8a00\uff1f": [[80, "is-python-a-good-language-for-beginning-programmers"]], "\u5efa\u7acb C \u8207 C++ \u64f4\u5145\u5957\u4ef6": [[71, "building-c-and-c-extensions"]], "Building C and C++ Extensions with setuptools": [[71, "building-c-and-c-extensions-with-setuptools"]], "\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762\u5e38\u898b\u554f\u7b54\u96c6": [[81, "graphic-user-interface-faq"]], "\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762 (GUI) \u7684\u5e38\u898b\u554f\u984c": [[81, "general-gui-questions"]], "Python \u6709\u54ea\u4e9b GUI \u5957\u4ef6\uff1f": [[81, "what-gui-toolkits-exist-for-python"]], "Tkinter \u7684\u554f\u7b54": [[81, "tkinter-questions"]], "\u5982\u4f55\u51cd\u7d50 Tkinter \u61c9\u7528\u7a0b\u5f0f\uff1f": [[81, "how-do-i-freeze-tkinter-applications"]], "\u662f\u5426\u53ef\u4ee5\u5728\u7b49\u5f85 I/O \u6642\u8655\u7406 Tk \u4e8b\u4ef6\uff1f": [[81, "can-i-have-tk-events-handled-while-waiting-for-i-o"]], "\u6211\u7121\u6cd5\u8b93\u9375\u7e6b\u7d50 (key binding) \u5728 Tkinter \u4e2d\u4f5c\u7528\uff1a\u70ba\u4ec0\u9ebc\uff1f": [[81, "i-can-t-get-key-bindings-to-work-in-tkinter-why"]], "Argparse \u6559\u5b78": [[89, "argparse-tutorial"]], "\u6982\u5ff5": [[89, "concepts"]], "\u57fa\u672c\u7528\u6cd5": [[89, "the-basics"], [111, "basic-usage"], [262, "basic-usage"], [296, "basic-use"]], "\u4f4d\u7f6e\u5f15\u6578\u7684\u4ecb\u7d39": [[89, "introducing-positional-arguments"]], "\u53ef\u9078\u5f15\u6578\u7684\u4ecb\u7d39": [[89, "introducing-optional-arguments"]], "\u77ed\u9078\u9805": [[89, "short-options"]], "\u7d44\u5408\u4f4d\u7f6e\u5f15\u6578\u548c\u53ef\u9078\u5f15\u6578": [[89, "combining-positional-and-optional-arguments"]], "\u66f4\u9032\u968e\u4e00\u9ede": [[89, "getting-a-little-more-advanced"]], "\u6307\u5b9a\u4e0d\u660e\u78ba\u7684\u5f15\u6578": [[89, "specifying-ambiguous-arguments"]], "\u76f8\u4e92\u885d\u7a81\u7684\u9078\u9805": [[89, "conflicting-options"]], "\u5982\u4f55\u7ffb\u8b6f argparse \u8f38\u51fa": [[89, "how-to-translate-the-argparse-output"]], "\u7d50\u8ad6": [[89, "conclusion"]], "\u7de8\u5beb\u6a19\u6e96": [[35, "coding-standards"]], "\u5f15\u5165\u6a94\u6848 (include files)": [[35, "include-files"]], "\u6709\u7528\u7684\u5de8\u96c6": [[35, "useful-macros"]], "\u7269\u4ef6\u3001\u578b\u5225\u548c\u53c3\u7167\u8a08\u6578": [[35, "objects-types-and-reference-counts"]], "\u53c3\u7167\u8a08\u6578": [[35, "reference-counts"], [52, "reference-counting"]], "\u53c3\u7167\u8a08\u6578\u8a73\u7d30\u8cc7\u8a0a": [[35, "reference-count-details"]], "\u578b\u5225": [[35, "types"]], "\u4f8b\u5916": [[35, "exceptions"], [124, "exceptions"], [134, "exceptions"], [127, "exceptions"], [408, "exceptions"], [429, "exceptions"], [410, "exceptions"], [413, "exceptions"], [337, "exceptions"], [340, "exceptions"], [348, "exceptions"], [343, "exceptions"], [341, "exceptions"], [271, "exceptions"], [262, "exceptions"], [232, "exceptions"], [167, "exceptions"]], "\u5d4c\u5165\u5f0fPython": [[35, "embedding-python"]], "\u9664\u932f\u5efa\u7f6e": [[35, "debugging-builds"]], "\u901a\u7528\u7269\u4ef6\u7d50\u69cb": [[58, "common-object-structures"]], "Base object types and macros": [[58, "base-object-types-and-macros"]], "\u5be6\u4f5c\u51fd\u5f0f\u8207\u65b9\u6cd5": [[58, "implementing-functions-and-methods"]], "Accessing attributes of extension types": [[58, "accessing-attributes-of-extension-types"]], "Member flags": [[58, "member-flags"]], "Member types": [[58, "member-types"]], "Defining Getters and Setters": [[58, "defining-getters-and-setters"]], "\u578b\u5225\u63d0\u793a\u7269\u4ef6": [[62, "objects-for-type-hinting"]], "MemoryView \u7269\u4ef6": [[43, "index-0"]], "\u6a21\u7d44\u7269\u4ef6\u6a21\u7d44": [[45, "module-objects"]], "Initializing C modules": [[45, "initializing-c-modules"]], "Single-phase initialization": [[45, "single-phase-initialization"]], "Multi-phase initialization": [[45, "multi-phase-initialization"]], "Low-level module creation functions": [[45, "low-level-module-creation-functions"]], "Support functions": [[45, "support-functions"]], "Module lookup": [[45, "module-lookup"]], "Tuple\uff08\u5143\u7d44\uff09\u7269\u4ef6": [[60, "tuple-objects"]], "Struct Sequence Objects": [[60, "struct-sequence-objects"]], "Type Objects": [[61, "type-objects"], [344, "type-objects"]], "Creating Heap-Allocated Types": [[61, "creating-heap-allocated-types"]], "Reflection": [[53, "reflection"]], "C API \u7a69\u5b9a\u6027": [[57, "c-api-stability"]], "\u4e0d\u7a69\u5b9a\u7684 C API": [[57, "unstable-c-api"]], "\u7a69\u5b9a\u7684\u61c9\u7528\u7a0b\u5f0f\u4e8c\u9032\u4f4d\u4ecb\u9762": [[57, "stable-application-binary-interface"]], "\u53d7\u9650 C API": [[57, "limited-c-api"]], "\u7a69\u5b9a ABI": [[57, "stable-abi"]], "\u53d7\u9650 API \u7bc4\u570d\u548c\u6027\u80fd": [[57, "limited-api-scope-and-performance"]], "\u53d7\u9650 API \u6ce8\u610f\u4e8b\u9805": [[57, "limited-api-caveats"]], "\u5e73\u53f0\u6ce8\u610f\u4e8b\u9805": [[57, "platform-considerations"]], "\u53d7\u9650 API \u7684\u5167\u5bb9": [[57, "contents-of-limited-api"]], "None \u7269\u4ef6": [[46, "the-none-object"]], "\u820a\u5f0f\u7de9\u885d\u5354\u5b9a (Buffer Protocol)": [[48, "old-buffer-protocol"]], "\u6574\u6578\u7269\u4ef6": [[39, "integer-objects"]], "\u4f5c\u696d\u7cfb\u7d71\u5de5\u5177": [[59, "operating-system-utilities"]], "\u7cfb\u7d71\u51fd\u5f0f": [[59, "system-functions"]], "\u884c\u7a0b\u63a7\u5236": [[59, "process-control"]], "\u8a18\u61b6\u9ad4\u7ba1\u7406": [[42, "memory-management"]], "\u7e3d\u89bd": [[42, "overview"], [258, "overview"]], "Allocator Domains": [[42, "allocator-domains"]], "Raw Memory Interface": [[42, "raw-memory-interface"]], "Memory Interface": [[42, "memory-interface"]], "Object allocators": [[42, "object-allocators"]], "Default Memory Allocators": [[42, "default-memory-allocators"]], "Customize Memory Allocators": [[42, "customize-memory-allocators"]], "Debug hooks on the Python memory allocators": [[42, "debug-hooks-on-the-python-memory-allocators"]], "The pymalloc allocator": [[42, "the-pymalloc-allocator"]], "Customize pymalloc Arena Allocator": [[42, "customize-pymalloc-arena-allocator"]], "tracemalloc C API": [[42, "tracemalloc-c-api"]], "Python Initialization Configuration": [[34, "python-initialization-configuration"]], "PyWideStringList": [[34, "pywidestringlist"]], "PyStatus": [[34, "pystatus"]], "PyPreConfig": [[34, "pypreconfig"]], "Preinitialize Python with PyPreConfig": [[34, "preinitialize-python-with-pypreconfig"]], "PyConfig": [[34, "pyconfig"]], "Initialization with PyConfig": [[34, "initialization-with-pyconfig"]], "Isolated Configuration": [[34, "isolated-configuration"]], "Python Configuration": [[34, "python-configuration"]], "Python Path Configuration": [[34, "python-path-configuration"]], "Py_RunMain()": [[34, "py-runmain"]], "Py_GetArgcArgv()": [[34, "py-getargcargv"]], "Multi-Phase Initialization Private Provisional API": [[34, "multi-phase-initialization-private-provisional-api"]], "\u758a\u4ee3\u5668\u5354\u8b70": [[36, "iterator-protocol"]], "\u5207\u7247\u7269\u4ef6": [[56, "slice-objects"]], "Ellipsis Object": [[56, "ellipsis-object"]], "Object Implementation Support": [[50, "object-implementation-support"]], "List\uff08\u4e32\u5217\uff09\u7269\u4ef6": [[38, "list-objects"]], "Support for Perf Maps": [[51, "support-for-perf-maps"]], "\u5de5\u5177": [[65, "utilities"]], "\u96c6\u5408\u7269\u4ef6": [[55, "set-objects"]], "\u5be6\u4f8b\u65b9\u6cd5\u7269\u4ef6 (Instance Method Objects)": [[44, "instance-method-objects"]], "\u65b9\u6cd5\u7269\u4ef6 (Method Objects)": [[44, "method-objects"]], "\u578b\u5225\u7269\u4ef6": [[63, "type-objects"]], "Quick Reference": [[63, "quick-reference"]], "\"tp slots\"": [[63, "tp-slots"]], "sub-slots": [[63, "sub-slots"]], "slot typedefs": [[63, "slot-typedefs"]], "PyTypeObject Definition": [[63, "pytypeobject-definition"]], "PyObject Slots": [[63, "pyobject-slots"]], "PyVarObject Slots": [[63, "pyvarobject-slots"]], "PyTypeObject Slots": [[63, "pytypeobject-slots"]], "Static Types": [[63, "static-types"]], "Number Object Structures": [[63, "number-object-structures"]], "Mapping Object Structures": [[63, "mapping-object-structures"]], "Sequence Object Structures": [[63, "sequence-object-structures"]], "Buffer Object Structures": [[63, "buffer-object-structures"]], "Async Object Structures": [[63, "async-object-structures"]], "Slot Type typedefs": [[63, "slot-type-typedefs"]], "Number Protocol": [[47, "number-protocol"]], "Sequence Protocol": [[54, "sequence-protocol"]], "\u5f31\u53c3\u7167\u7269\u4ef6": [[67, "weak-reference-objects"]], "Data marshalling support": [[41, "data-marshalling-support"]], "Object Protocol": [[49, "object-protocol"]], "Mapping Protocol": [[40, "mapping-protocol"]], "\u758a\u4ee3\u5668\uff08Iterator\uff09\u7269\u4ef6": [[37, "iterator-objects"]], "The Very High Level Layer": [[66, "the-very-high-level-layer"]], "Unicode \u7269\u4ef6\u8207\u7de8\u89e3\u78bc\u5668": [[64, "unicode-objects-and-codecs"]], "Unicode Objects": [[64, "unicode-objects"]], "Unicode Type": [[64, "unicode-type"]], "Unicode Character Properties": [[64, "unicode-character-properties"]], "Creating and accessing Unicode strings": [[64, "creating-and-accessing-unicode-strings"]], "Locale Encoding": [[64, "locale-encoding"]], "File System Encoding": [[64, "file-system-encoding"]], "wchar_t Support": [[64, "wchar-t-support"]], "Built-in Codecs": [[64, "built-in-codecs"]], "Generic Codecs": [[64, "generic-codecs"]], "UTF-8 \u7de8\u89e3\u78bc\u5668": [[64, "utf-8-codecs"]], "UTF-32 \u7de8\u89e3\u78bc\u5668": [[64, "utf-32-codecs"]], "UTF-16 \u7de8\u89e3\u78bc\u5668": [[64, "utf-16-codecs"]], "UTF-7 \u7de8\u89e3\u78bc\u5668": [[64, "utf-7-codecs"]], "Unicode-Escape Codecs": [[64, "unicode-escape-codecs"]], "Raw-Unicode-Escape Codecs": [[64, "raw-unicode-escape-codecs"]], "Latin-1 \u7de8\u89e3\u78bc\u5668": [[64, "latin-1-codecs"]], "ASCII \u7de8\u89e3\u78bc\u5668": [[64, "ascii-codecs"]], "Character Map Codecs": [[64, "character-map-codecs"]], "MBCS codecs for Windows": [[64, "mbcs-codecs-for-windows"]], "Methods & Slots": [[64, "methods-slots"]], "Methods and Slot Functions": [[64, "methods-and-slot-functions"]], "array --- \u9ad8\u6548\u7387\u7684\u6578\u503c\u578b\u9663\u5217": [[121, "module-array"]], "asyncio --- \u975e\u540c\u6b65 I/O": [[123, "module-asyncio"]], "Hello World!": [[123, null]], "\u6307\u5357\u8207\u6559\u5b78": [[123, null]], "\u5982\u4f55\u4f7f\u7528 urllib \u5957\u4ef6\u53d6\u5f97\u7db2\u8def\u8cc7\u6e90": [[110, "howto-fetch-internet-resources-using-the-urllib-package"]], "Related Articles": [[110, null]], "\u5f9e URL \u53d6\u5f97\u8cc7\u6e90": [[110, "fetching-urls"]], "Data": [[110, "data"]], "Headers": [[110, "headers"]], "Handling Exceptions": [[110, "handling-exceptions"]], "URLError": [[110, "urlerror"]], "HTTPError": [[110, "httperror"]], "Error Codes": [[110, "error-codes"]], "Wrapping it Up": [[110, "wrapping-it-up"]], "Number 1": [[110, "number-1"]], "Number 2": [[110, "number-2"]], "info and geturl": [[110, "info-and-geturl"]], "Openers and Handlers": [[110, "openers-and-handlers"]], "Basic Authentication": [[110, "id5"]], "Proxies": [[110, "proxies"]], "Sockets and Layers": [[110, "sockets-and-layers"]], "\u8a3b\u89e3": [[110, "footnotes"], [348, "notes"]], "2to3 --- \u81ea\u52d5\u5c07 Python 2\u7684\u7a0b\u5f0f\u78bc\u8f49\u6210 Python 3": [[112, "to3-automated-python-2-to-3-code-translation"]], "\u4f7f\u7528 2to3": [[112, "using-2to3"]], "Fixers": [[112, "fixers"]], "lib2to3 --- 2to3's library": [[112, "module-lib2to3"]], "__future__ --- Future \u9673\u8ff0\u5f0f\u5b9a\u7fa9": [[113, "module-__future__"]], "\u6a21\u7d44\u5167\u5bb9": [[113, "module-contents"], [410, "module-contents"], [386, "module-contents"], [319, "module-contents"], [333, "module-contents"], [337, "module-contents"], [334, "module-contents"], [211, "module-contents"], [175, "module-contents"]], "\u8cc7\u6599\u58d3\u7e2e\u8207\u4fdd\u5b58": [[119, "data-compression-and-archiving"]], "\u5b89\u88dd Python \u6a21\u7d44": [[111, "installing-python-modules"]], "\u95dc\u9375\u8853\u8a9e": [[111, "key-terms"]], "\u6211\u8a72\u5982\u4f55...\uff1f": [[111, "how-do-i"]], "...\u5728 Python 3.4 \u4e4b\u524d\u7684 Python \u7248\u672c\u4e2d\u5b89\u88dd pip\uff1f": [[111, "install-pip-in-versions-of-python-prior-to-python-3-4"]], "...\u53ea\u70ba\u76ee\u524d\u7684\u4f7f\u7528\u8005\u5b89\u88dd\u5957\u4ef6\uff1f": [[111, "install-packages-just-for-the-current-user"]], "...\u5b89\u88dd\u79d1\u5b78\u7684 Python \u5957\u4ef6\uff1f": [[111, "install-scientific-python-packages"]], "...\u5e73\u884c\u5b89\u88dd\u591a\u500b Python \u7248\u672c\u4e26\u4f7f\u7528\u5b83\u5011\uff1f": [[111, "work-with-multiple-versions-of-python-installed-in-parallel"]], "\u5e38\u898b\u7684\u5b89\u88dd\u554f\u984c": [[111, "common-installation-issues"]], "\u5728 Linux \u4e0a\u5b89\u88dd\u5957\u4ef6\u81f3\u7cfb\u7d71 Python": [[111, "installing-into-the-system-python-on-linux"]], "\u672a\u5b89\u88dd pip": [[111, "pip-not-installed"]], "\u5b89\u88dd\u4e8c\u9032\u5236\u64f4\u5145 (binary extension)": [[111, "installing-binary-extensions"]], "\u9ad8\u968e API \u7d22\u5f15": [[124, "high-level-api-index"]], "\u4efb\u52d9 (Tasks)": [[124, "tasks"]], "\u4f47\u5217 (Queues)": [[124, "queues"], [134, "queues"]], "\u5b50\u884c\u7a0b (Subprocesses)": [[124, "subprocesses"]], "\u4e32\u6d41 (Streams)": [[124, "streams"]], "\u540c\u6b65\u5316 (Synchronization)": [[124, "synchronization"]], "Logging Cookbook": [[102, "logging-cookbook"]], "Using logging in multiple modules": [[102, "using-logging-in-multiple-modules"]], "Logging from multiple threads": [[102, "logging-from-multiple-threads"]], "Multiple handlers and formatters": [[102, "multiple-handlers-and-formatters"]], "Logging to multiple destinations": [[102, "logging-to-multiple-destinations"]], "Custom handling of levels": [[102, "custom-handling-of-levels"]], "Configuration server example": [[102, "configuration-server-example"]], "Dealing with handlers that block": [[102, "dealing-with-handlers-that-block"]], "Sending and receiving logging events across a network": [[102, "sending-and-receiving-logging-events-across-a-network"]], "Running a logging socket listener in production": [[102, "running-a-logging-socket-listener-in-production"]], "Adding contextual information to your logging output": [[102, "adding-contextual-information-to-your-logging-output"]], "Using LoggerAdapters to impart contextual information": [[102, "using-loggeradapters-to-impart-contextual-information"]], "Using objects other than dicts to pass contextual information": [[102, "using-objects-other-than-dicts-to-pass-contextual-information"]], "Using Filters to impart contextual information": [[102, "using-filters-to-impart-contextual-information"]], "Use of contextvars": [[102, "use-of-contextvars"]], "Imparting contextual information in handlers": [[102, "imparting-contextual-information-in-handlers"]], "Logging to a single file from multiple processes": [[102, "logging-to-a-single-file-from-multiple-processes"]], "Using concurrent.futures.ProcessPoolExecutor": [[102, "using-concurrent-futures-processpoolexecutor"]], "Deploying Web applications using Gunicorn and uWSGI": [[102, "deploying-web-applications-using-gunicorn-and-uwsgi"]], "Using file rotation": [[102, "using-file-rotation"]], "Use of alternative formatting styles": [[102, "use-of-alternative-formatting-styles"]], "Customizing LogRecord": [[102, "customizing-logrecord"]], "Subclassing QueueHandler and QueueListener- a ZeroMQ example": [[102, "subclassing-queuehandler-and-queuelistener-a-zeromq-example"]], "Subclass QueueHandler": [[102, "subclass-queuehandler"], [102, "id4"]], "Subclass QueueListener": [[102, "subclass-queuelistener"], [102, "id3"]], "Subclassing QueueHandler and QueueListener- a pynng example": [[102, "subclassing-queuehandler-and-queuelistener-a-pynng-example"]], "An example dictionary-based configuration": [[102, "an-example-dictionary-based-configuration"]], "Using a rotator and namer to customize log rotation processing": [[102, "using-a-rotator-and-namer-to-customize-log-rotation-processing"]], "A more elaborate multiprocessing example": [[102, "a-more-elaborate-multiprocessing-example"]], "Inserting a BOM into messages sent to a SysLogHandler": [[102, "inserting-a-bom-into-messages-sent-to-a-sysloghandler"]], "Implementing structured logging": [[102, "implementing-structured-logging"]], "Customizing handlers with dictConfig()": [[102, "customizing-handlers-with-dictconfig"]], "Using particular formatting styles throughout your application": [[102, "using-particular-formatting-styles-throughout-your-application"]], "Using LogRecord factories": [[102, "using-logrecord-factories"]], "Using custom message objects": [[102, "using-custom-message-objects"]], "Configuring filters with dictConfig()": [[102, "configuring-filters-with-dictconfig"]], "Customized exception formatting": [[102, "customized-exception-formatting"]], "Speaking logging messages": [[102, "speaking-logging-messages"]], "Buffering logging messages and outputting them conditionally": [[102, "buffering-logging-messages-and-outputting-them-conditionally"]], "Sending logging messages to email, with buffering": [[102, "sending-logging-messages-to-email-with-buffering"]], "Formatting times using UTC (GMT) via configuration": [[102, "formatting-times-using-utc-gmt-via-configuration"]], "Using a context manager for selective logging": [[102, "using-a-context-manager-for-selective-logging"]], "A CLI application starter template": [[102, "a-cli-application-starter-template"]], "A Qt GUI for logging": [[102, "a-qt-gui-for-logging"]], "Logging to syslog with RFC5424 support": [[102, "logging-to-syslog-with-rfc5424-support"]], "How to treat a logger like an output stream": [[102, "how-to-treat-a-logger-like-an-output-stream"]], "Patterns to avoid": [[102, "patterns-to-avoid"]], "Opening the same log file multiple times": [[102, "opening-the-same-log-file-multiple-times"]], "Using loggers as attributes in a class or passing them as parameters": [[102, "using-loggers-as-attributes-in-a-class-or-passing-them-as-parameters"]], "Adding handlers other than NullHandler to a logger in a library": [[102, "adding-handlers-other-than-nullhandler-to-a-logger-in-a-library"]], "Creating a lot of loggers": [[102, "creating-a-lot-of-loggers"]], "Policies": [[132, "policies"]], "Getting and Setting the Policy": [[132, "getting-and-setting-the-policy"]], "Policy Objects": [[132, "policy-objects"]], "Process Watchers": [[132, "process-watchers"]], "Custom Policies": [[132, "custom-policies"]], "Unicode HOWTO": [[109, "unicode-howto"]], "Introduction to Unicode": [[109, "introduction-to-unicode"]], "\u5b9a\u7fa9": [[109, "definitions"]], "Encodings": [[109, "encodings"]], "Python's Unicode Support": [[109, "python-s-unicode-support"]], "The String Type": [[109, "the-string-type"]], "Converting to Bytes": [[109, "converting-to-bytes"]], "Unicode Literals in Python Source Code": [[109, "unicode-literals-in-python-source-code"]], "Unicode Properties": [[109, "unicode-properties"]], "Comparing Strings": [[109, "comparing-strings"]], "Unicode Regular Expressions": [[109, "unicode-regular-expressions"]], "Reading and Writing Unicode Data": [[109, "reading-and-writing-unicode-data"]], "Unicode filenames": [[109, "unicode-filenames"]], "Tips for Writing Unicode-aware Programs": [[109, "tips-for-writing-unicode-aware-programs"]], "Converting Between File Encodings": [[109, "converting-between-file-encodings"]], "Files in an Unknown Encoding": [[109, "files-in-an-unknown-encoding"]], "\u81f4\u8b1d": [[109, "acknowledgements"], [468, "acknowledgements"], [467, "acknowledgements"], [463, "acknowledgements"], [464, "acknowledgements"], [466, "acknowledgements"], [469, "acknowledgements"], [462, "acknowledgements"], [465, "acknowledgements"], [230, "acknowledgements"]], "ast --- \u62bd\u8c61\u8a9e\u6cd5\u6a39 (Abstract Syntax Trees)": [[122, "module-ast"]], "\u62bd\u8c61\u6587\u6cd5 (Abstract Grammar)": [[122, "abstract-grammar"]], "\u7bc0\u9ede (Node) \u985e\u5225": [[122, "node-classes"]], "\u6839\u7bc0\u9ede": [[122, "root-nodes"]], "\u6587\u672c (Literals)": [[122, "literals"]], "\u8b8a\u6578": [[122, "variables"]], "\u904b\u7b97\u5f0f": [[122, "expressions"]], "\u4e0b\u6a19 (Subscripting)": [[122, "subscripting"]], "\u7d9c\u5408\u904b\u7b97\u5f0f (comprehensions)": [[122, "comprehensions"]], "\u9673\u8ff0\u5f0f": [[122, "statements"]], "\u5f15\u5165 (imports)": [[122, "imports"]], "\u6d41\u7a0b\u63a7\u5236": [[122, "control-flow"]], "\u6a21\u5f0f\u5339\u914d (pattern matching)": [[122, "pattern-matching"]], "\u578b\u5225\u53c3\u6578 (type parameters)": [[122, "type-parameters"]], "\u51fd\u5f0f\u548c\u985e\u5225\u5b9a\u7fa9": [[122, "function-and-class-definitions"]], "async \u548c await": [[122, "async-and-await"]], "ast \u8f14\u52a9\u7a0b\u5f0f": [[122, "ast-helpers"]], "\u7de8\u8b6f\u5668\u65d7\u6a19": [[122, "compiler-flags"], [456, "compiler-flags"]], "\u547d\u4ee4\u5217\u7528\u6cd5": [[122, "command-line-usage"], [247, "command-line-usage"], [300, "command-line-usage"], [150, "command-line-usage"]], "\u901a\u7528\u4f5c\u696d\u7cfb\u7d71\u670d\u52d9": [[118, "generic-operating-system-services"]], "The Python 2.3 Method Resolution Order": [[103, "the-python-2-3-method-resolution-order"]], "The beginning": [[103, "the-beginning"]], "The C3 Method Resolution Order": [[103, "the-c3-method-resolution-order"]], "Examples": [[103, "examples"], [395, "examples"]], "Bad Method Resolution Orders": [[103, "bad-method-resolution-orders"]], "The end": [[103, "the-end"]], "Resources": [[103, "resources"]], "Event Loop": [[126, "event-loop"]], "Event Loop Methods": [[126, "event-loop-methods"]], "Running and stopping the loop": [[126, "running-and-stopping-the-loop"]], "Scheduling callbacks": [[126, "scheduling-callbacks"]], "Scheduling delayed callbacks": [[126, "scheduling-delayed-callbacks"]], "Creating Futures and Tasks": [[126, "creating-futures-and-tasks"]], "Opening network connections": [[126, "opening-network-connections"]], "Creating network servers": [[126, "creating-network-servers"]], "Transferring files": [[126, "transferring-files"]], "TLS Upgrade": [[126, "tls-upgrade"]], "Watching file descriptors": [[126, "watching-file-descriptors"]], "Working with socket objects directly": [[126, "working-with-socket-objects-directly"]], "DNS": [[126, "dns"]], "Working with pipes": [[126, "working-with-pipes"]], "Unix signals": [[126, "unix-signals"]], "Executing code in thread or process pools": [[126, "executing-code-in-thread-or-process-pools"]], "Error Handling API": [[126, "error-handling-api"]], "Enabling debug mode": [[126, "enabling-debug-mode"]], "Running Subprocesses": [[126, "running-subprocesses"]], "Callback Handles": [[126, "callback-handles"]], "Server Objects": [[126, "server-objects"], [338, "server-objects"]], "Event Loop Implementations": [[126, "event-loop-implementations"]], "Hello World with call_soon()": [[126, "hello-world-with-call-soon"]], "Display the current date with call_later()": [[126, "display-the-current-date-with-call-later"]], "Watch a file descriptor for read events": [[126, "watch-a-file-descriptor-for-read-events"]], "Set signal handlers for SIGINT and SIGTERM": [[126, "set-signal-handlers-for-sigint-and-sigterm"]], "\u5e73\u81fa\u652f\u63f4": [[131, "platform-support"]], "\u6240\u6709\u5e73\u53f0": [[131, "all-platforms"]], "Windows": [[131, "windows"], [483, "windows"], [483, "id11"], [483, "id19"], [483, "id26"], [483, "id40"], [483, "id50"], [483, "id65"], [483, "id72"], [483, "id82"], [483, "id92"], [483, "id101"], [483, "id111"], [483, "id117"], [483, "id127"], [483, "id137"], [483, "id146"], [483, "id158"], [483, "id167"], [483, "id176"], [483, "id184"], [483, "id193"], [483, "id201"], [483, "id209"], [483, "id219"], [483, "id230"], [483, "id240"], [483, "id249"], [483, "id259"], [483, "id277"], [483, "id288"], [483, "id298"], [483, "id308"], [483, "id318"], [483, "id329"], [483, "id340"], [483, "id355"], [483, "id365"], [483, "id376"], [483, "id387"], [483, "id398"], [483, "id406"], [483, "id414"], [483, "id425"], [483, "id439"], [483, "id449"], [483, "id460"], [483, "id469"], [483, "id476"], [483, "id484"], [483, "id501"], [483, "id510"], [483, "id523"], [483, "id533"], [483, "id546"], [483, "id559"], [483, "id565"], [483, "id572"], [483, "id586"], [483, "id591"], [483, "id602"], [483, "id607"], [483, "id624"], [483, "id635"], [483, "id648"], [483, "id658"], [483, "id670"], [483, "id673"], [483, "id680"], [483, "id725"], [483, "id734"]], "Windows \u7684\u5b50\u884c\u7a0b\u652f\u63f4": [[131, "subprocess-support-on-windows"]], "macOS": [[131, "macos"], [483, "macos"], [483, "id20"], [483, "id27"], [483, "id41"], [483, "id51"], [483, "id73"], [483, "id83"], [483, "id102"], [483, "id118"], [483, "id128"], [483, "id138"], [483, "id147"], [483, "id159"], [483, "id168"], [483, "id185"], [483, "id194"], [483, "id202"], [483, "id210"], [483, "id220"], [483, "id231"], [483, "id250"], [483, "id260"], [483, "id268"], [483, "id278"], [483, "id289"], [483, "id299"], [483, "id309"], [483, "id319"], [483, "id330"], [483, "id356"], [483, "id366"], [483, "id377"], [483, "id388"], [483, "id415"], [483, "id432"], [483, "id440"], [483, "id450"], [483, "id461"], [483, "id470"], [483, "id485"], [483, "id511"], [483, "id524"], [483, "id534"]], "\u6392\u5e8f\u6280\u6cd5": [[108, "sorting-techniques"]], "\u57fa\u790e\u6392\u5e8f": [[108, "sorting-basics"]], "\u9375\u51fd\u5f0f (key functions)": [[108, "key-functions"]], "Operator Module Functions and Partial Function Evaluation": [[108, "operator-module-functions-and-partial-function-evaluation"]], "\u5347\u51aa\u8207\u964d\u51aa": [[108, "ascending-and-descending"]], "\u6392\u5e8f\u7a69\u5b9a\u6027\u8207\u8907\u5408\u6392\u5e8f": [[108, "sort-stability-and-complex-sorts"]], "\u88dd\u98fe-\u6392\u5e8f-\u79fb\u9664\u88dd\u98fe (decorate-sort-undecorate)": [[108, "decorate-sort-undecorate"]], "\u6bd4\u8f03\u51fd\u5f0f (comparison functions)": [[108, "comparison-functions"]], "\u96dc\u9805\u8aaa\u660e": [[108, "odds-and-ends"]], "Partial Sorts": [[108, "partial-sorts"]], "argparse --- Parser for command-line options, arguments and sub-commands": [[120, "module-argparse"]], "\u6559\u5b78": [[120, null], [413, "tutorial"], [384, "tutorial"]], "Core Functionality": [[120, "core-functionality"]], "Quick Links for add_argument()": [[120, "quick-links-for-add-argument"]], "\u5efa\u7acb\u4e00\u500b\u5256\u6790\u5668": [[120, "creating-a-parser"]], "\u589e\u52a0\u5f15\u6578": [[120, "adding-arguments"]], "\u5256\u6790\u5f15\u6578": [[120, "parsing-arguments"]], "ArgumentParser \u7269\u4ef6": [[120, "argumentparser-objects"]], "prog": [[120, "prog"]], "usage": [[120, "usage"]], "\u63cf\u8ff0": [[120, "description"]], "epilog": [[120, "epilog"]], "parents": [[120, "parents"]], "formatter_class": [[120, "formatter-class"]], "prefix_chars": [[120, "prefix-chars"]], "fromfile_prefix_chars": [[120, "fromfile-prefix-chars"]], "argument_default": [[120, "argument-default"]], "allow_abbrev": [[120, "allow-abbrev"]], "conflict_handler": [[120, "conflict-handler"]], "add_help": [[120, "add-help"]], "exit_on_error": [[120, "exit-on-error"]], "The add_argument() method": [[120, "the-add-argument-method"]], "name or flags": [[120, "name-or-flags"]], "action": [[120, "action"]], "nargs": [[120, "nargs"]], "const": [[120, "const"]], "default": [[120, "default"]], "type": [[120, "type"]], "choices": [[120, "choices"]], "required": [[120, "required"]], "\u5e6b\u52a9": [[120, "help"]], "metavar": [[120, "metavar"]], "dest": [[120, "dest"]], "Action classes": [[120, "action-classes"]], "The parse_args() method": [[120, "the-parse-args-method"]], "Option value syntax": [[120, "option-value-syntax"]], "Invalid arguments": [[120, "invalid-arguments"]], "Arguments containing -": [[120, "arguments-containing"]], "Argument abbreviations (prefix matching)": [[120, "argument-abbreviations-prefix-matching"]], "Beyond sys.argv": [[120, "beyond-sys-argv"]], "The Namespace object": [[120, "the-namespace-object"]], "Other utilities": [[120, "other-utilities"]], "Sub-commands": [[120, "sub-commands"]], "FileType \u7269\u4ef6": [[120, "filetype-objects"]], "Argument groups": [[120, "argument-groups"]], "Mutual exclusion": [[120, "mutual-exclusion"]], "Parser defaults": [[120, "parser-defaults"]], "Printing help": [[120, "printing-help"]], "Partial parsing": [[120, "partial-parsing"]], "Customizing file parsing": [[120, "customizing-file-parsing"]], "Exiting methods": [[120, "exiting-methods"]], "Intermixed parsing": [[120, "intermixed-parsing"]], "Upgrading optparse code": [[120, "upgrading-optparse-code"]], "Exceptions": [[120, "exceptions"], [319, "exceptions"], [292, "exceptions"]], "Python \u5c0d Linux perf \u5206\u6790\u5668\u7684\u652f\u63f4": [[104, "python-support-for-the-linux-perf-profiler"]], "\u5982\u4f55\u555f\u7528 perf \u5206\u6790\u652f\u63f4": [[104, "how-to-enable-perf-profiling-support"]], "\u5982\u4f55\u7372\u5f97\u6700\u4f73\u7d50\u679c": [[104, "how-to-obtain-the-best-results"]], "Socket \u7a0b\u5f0f\u8a2d\u8a08\u6307\u5357": [[107, "socket-programming-howto"]], "Sockets": [[107, "sockets"], [426, "sockets"]], "\u6b77\u53f2": [[107, "history"]], "\u5efa\u7acb\u4e00\u500b Socket": [[107, "creating-a-socket"]], "IPC": [[107, "ipc"]], "\u4f7f\u7528\u4e00\u500b Socket": [[107, "using-a-socket"]], "\u4e8c\u9032\u4f4d\u8cc7\u6599": [[107, "binary-data"]], "\u7d50\u675f\u9023\u7dda": [[107, "disconnecting"]], "Sockets \u4f55\u6642\u92b7\u6bc0": [[107, "when-sockets-die"]], "\u975e\u963b\u585e\u7684 Sockets": [[107, "non-blocking-sockets"]], "Runners (\u57f7\u884c\u5668)": [[135, "runners"]], "\u904b\u884c\u4e00\u500b asyncio \u7a0b\u5f0f": [[135, "running-an-asyncio-program"]], "Runner context manager": [[135, "runner-context-manager"]], "Handling Keyboard Interruption": [[135, "handling-keyboard-interruption"]], "Extending": [[128, "extending"]], "Writing a Custom Event Loop": [[128, "writing-a-custom-event-loop"]], "Future and Task private constructors": [[128, "future-and-task-private-constructors"]], "Task lifetime support": [[128, "task-lifetime-support"]], "Queue": [[134, "queue"]], "Priority Queue\uff08\u512a\u5148\u4f47\u5217\uff09": [[134, "priority-queue"]], "LIFO Queue": [[134, "lifo-queue"]], "_thread --- Low-level threading API": [[115, "module-_thread"]], "__main__ --- \u9802\u5c64\u7a0b\u5f0f\u78bc\u74b0\u5883": [[114, "module-__main__"]], "__name__ == '__main__'": [[114, "name-main"]], "\u4ec0\u9ebc\u662f\u300c\u9802\u5c64\u7a0b\u5f0f\u78bc\u74b0\u5883\u300d\uff1f": [[114, "what-is-the-top-level-code-environment"]], "\u6163\u7528 (Idiomatic) \u7528\u6cd5": [[114, "idiomatic-usage"], [114, "id1"]], "\u6253\u5305\u6642\u9808\u8003\u616e\u7684\u4e8b\u60c5": [[114, "packaging-considerations"]], "Python \u5957\u4ef6\u4e2d\u7684 __main__.py": [[114, "main-py-in-python-packages"]], "import __main__": [[114, "import-main"]], "\u4f4e\u968e API \u7d22\u5f15": [[130, "low-level-api-index"]], "\u7372\u53d6\u4e8b\u4ef6\u8ff4\u5708": [[130, "obtaining-the-event-loop"]], "\u4e8b\u4ef6\u8ff4\u5708\u65b9\u6cd5": [[130, "event-loop-methods"]], "\u50b3\u8f38": [[130, "transports"]], "\u5354\u5b9a": [[130, "protocols"], [386, "protocols"]], "\u4e8b\u4ef6\u8ff4\u5708 Policies": [[130, "event-loop-policies"]], "abc --- \u62bd\u8c61\u57fa\u5e95\u985e\u5225": [[116, "module-abc"]], "Futures": [[129, "futures"]], "Future \u51fd\u5f0f": [[129, "future-functions"]], "Future \u7269\u4ef6": [[129, "future-object"], [166, "future-objects"]], "Transports and Protocols": [[133, "transports-and-protocols"]], "Transports": [[133, "transports"]], "Transports Hierarchy": [[133, "transports-hierarchy"]], "Base Transport": [[133, "base-transport"]], "Read-only Transports": [[133, "read-only-transports"]], "Write-only Transports": [[133, "write-only-transports"]], "Datagram Transports": [[133, "datagram-transports"]], "Subprocess Transports": [[133, "subprocess-transports"]], "Protocols": [[133, "protocols"]], "Base Protocols": [[133, "base-protocols"]], "Base Protocol": [[133, "base-protocol"]], "Streaming Protocols": [[133, "streaming-protocols"]], "Buffered Streaming Protocols": [[133, "buffered-streaming-protocols"]], "Datagram Protocols": [[133, "datagram-protocols"]], "Subprocess Protocols": [[133, "subprocess-protocols"]], "TCP Echo Server": [[133, "tcp-echo-server"]], "TCP Echo Client": [[133, "tcp-echo-client"]], "UDP Echo Server": [[133, "udp-echo-server"]], "UDP Echo Client": [[133, "udp-echo-client"]], "Connecting Existing Sockets": [[133, "connecting-existing-sockets"]], "loop.subprocess_exec() and SubprocessProtocol": [[133, "loop-subprocess-exec-and-subprocessprotocol"]], "\u4f7f\u7528 asyncio \u958b\u767c": [[125, "developing-with-asyncio"]], "\u9664\u932f\u6a21\u5f0f": [[125, "debug-mode"]], "\u4e26\u884c\u6027\u548c\u591a\u57f7\u884c\u7dd2 (Concurrency and Multithreading)": [[125, "concurrency-and-multithreading"]], "\u57f7\u884c\u963b\u585e\u7684\u7a0b\u5f0f": [[125, "running-blocking-code"]], "\u65e5\u8a8c\u8a18\u9304": [[125, "logging"]], "\u5075\u6e2c\u5f9e\u672a\u88ab\u7b49\u5f85\u7684 (never-awaited) \u5354\u7a0b": [[125, "detect-never-awaited-coroutines"]], "\u5075\u6e2c\u5f9e\u672a\u88ab\u7372\u53d6\u7684 (never-retrieved) \u4f8b\u5916": [[125, "detect-never-retrieved-exceptions"]], "\u5982\u4f55\u4f7f\u7528\u6b63\u898f\u8868\u9054\u5f0f": [[106, "regular-expression-howto"]], "Simple Patterns": [[106, "simple-patterns"]], "Matching Characters": [[106, "matching-characters"]], "Repeating Things": [[106, "repeating-things"]], "Using Regular Expressions": [[106, "using-regular-expressions"]], "Compiling Regular Expressions": [[106, "compiling-regular-expressions"]], "The Backslash Plague": [[106, "the-backslash-plague"]], "Performing Matches": [[106, "performing-matches"]], "Module-Level Functions": [[106, "module-level-functions"], [267, "module-level-functions"]], "Compilation Flags": [[106, "compilation-flags"]], "More Pattern Power": [[106, "more-pattern-power"]], "More Metacharacters": [[106, "more-metacharacters"]], "Grouping": [[106, "grouping"]], "Non-capturing and Named Groups": [[106, "non-capturing-and-named-groups"]], "Lookahead Assertions": [[106, "lookahead-assertions"]], "Modifying Strings": [[106, "modifying-strings"]], "Splitting Strings": [[106, "splitting-strings"]], "Search and Replace": [[106, "search-and-replace"], [247, "search-and-replace"]], "Common Problems": [[106, "common-problems"]], "Use String Methods": [[106, "use-string-methods"]], "match() versus search()": [[106, "match-versus-search"]], "Greedy versus Non-Greedy": [[106, "greedy-versus-non-greedy"]], "Using re.VERBOSE": [[106, "using-re-verbose"]], "Feedback": [[106, "feedback"]], "aifc --- \u8b80\u5beb AIFF \u8207 AIFC \u6a94\u6848": [[117, "module-aifc"]], "\u5982\u4f55\u5c07 Python 2 \u7684\u7a0b\u5f0f\u78bc\u79fb\u690d\u5230 Python 3": [[105, "how-to-port-python-2-code-to-python-3"]], "Third-party guides": [[105, "third-party-guides"]], "Alternate Implementations": [[434, "alternate-implementations"]], "Notation": [[434, "notation"]], "xml.sax.xmlreader --- Interface for XML parsers": [[416, "module-xml.sax.xmlreader"]], "XMLReader \u7269\u4ef6": [[416, "xmlreader-objects"]], "IncrementalParser \u7269\u4ef6": [[416, "incrementalparser-objects"]], "Locator Objects": [[416, "locator-objects"]], "InputSource \u7269\u4ef6": [[416, "inputsource-objects"]], "The Attributes Interface": [[416, "the-attributes-interface"]], "The AttributesNS Interface": [[416, "the-attributesns-interface"]], "\u6df1\u5165\u4e86\u89e3\u6d41\u7a0b\u63a7\u5236": [[441, "more-control-flow-tools"]], "if \u9673\u8ff0\u5f0f": [[441, "if-statements"]], "for \u9673\u8ff0\u5f0f": [[441, "for-statements"]], "range() \u51fd\u5f0f": [[441, "the-range-function"]], "\u8ff4\u5708\u5167\u7684 break \u548c continue \u9673\u8ff0\u5f0f\u53ca else \u5b50\u53e5": [[441, "break-and-continue-statements-and-else-clauses-on-loops"]], "pass \u9673\u8ff0\u5f0f": [[441, "pass-statements"]], "match \u9673\u8ff0\u5f0f": [[441, "match-statements"]], "\u5b9a\u7fa9\u51fd\u5f0f (function)": [[441, "defining-functions"]], "\u6df1\u5165\u4e86\u89e3\u51fd\u5f0f\u5b9a\u7fa9": [[441, "more-on-defining-functions"]], "\u9810\u8a2d\u5f15\u6578\u503c": [[441, "default-argument-values"]], "\u95dc\u9375\u5b57\u5f15\u6578": [[441, "keyword-arguments"]], "\u7279\u6b8a\u53c3\u6578": [[441, "special-parameters"]], "\u4f4d\u7f6e\u6216\u95dc\u9375\u5b57\u5f15\u6578 (Positional-or-Keyword Arguments)": [[441, "positional-or-keyword-arguments"]], "\u50c5\u9650\u4f4d\u7f6e\u53c3\u6578 (Positional-Only Parameters)": [[441, "positional-only-parameters"]], "\u50c5\u9650\u95dc\u9375\u5b57\u5f15\u6578 (Keyword-Only Arguments)": [[441, "keyword-only-arguments"]], "\u51fd\u5f0f\u7bc4\u4f8b": [[441, "function-examples"]], "\u56de\u9867": [[441, "recap"]], "\u4efb\u610f\u5f15\u6578\u5217\u8868 (Arbitrary Argument Lists)": [[441, "arbitrary-argument-lists"]], "\u62c6\u89e3\u5f15\u6578\u5217\u8868\uff08Unpacking Argument Lists\uff09": [[441, "unpacking-argument-lists"]], "Lambda \u904b\u7b97\u5f0f": [[441, "lambda-expressions"]], "\u8aaa\u660e\u6587\u4ef6\u5b57\u4e32 (Documentation Strings)": [[441, "documentation-strings"]], "\u51fd\u5f0f\u8a3b\u91cb (Function Annotations)": [[441, "function-annotations"]], "\u9593\u594f\u66f2\uff1a\u7a0b\u5f0f\u78bc\u98a8\u683c (Coding Style)": [[441, "intermezzo-coding-style"]], "xmlrpc --- XMLRPC \u4f3a\u670d\u5668\u8207\u7528\u6236\u6a21\u7d44": [[418, "xmlrpc-xmlrpc-server-and-client-modules"]], "\u8cc7\u6599\u6a21\u578b": [[428, "data-model"]], "Objects, values and types": [[428, "objects-values-and-types"]], "\u6a19\u6e96\u578b\u5225\u968e\u5c64": [[428, "the-standard-type-hierarchy"]], "None": [[428, "none"]], "NotImplemented": [[428, "notimplemented"]], "Ellipsis": [[428, "ellipsis"]], "numbers.Number": [[428, "numbers-number"]], "numbers.Integral": [[428, "numbers-integral"]], "numbers.Real (float)": [[428, "numbers-real-float"]], "numbers.Complex (complex)": [[428, "numbers-complex-complex"]], "Sequences": [[428, "sequences"]], "Immutable sequences": [[428, "immutable-sequences"]], "Mutable sequences": [[428, "mutable-sequences"]], "Set types": [[428, "set-types"]], "Mappings": [[428, "mappings"]], "\u5b57\u5178": [[428, "dictionaries"]], "Callable types": [[428, "callable-types"]], "\u81ea\u8a02\u51fd\u5f0f": [[428, "user-defined-functions"]], "\u7279\u6b8a\u552f\u8b80\u5c6c\u6027": [[428, "special-read-only-attributes"], [428, "index-58"], [428, "index-64"]], "\u7279\u6b8a\u53ef\u5beb\u5c6c\u6027": [[428, "special-writable-attributes"], [428, "index-65"]], "Instance methods": [[428, "instance-methods"]], "Generator functions": [[428, "generator-functions"]], "Coroutine functions": [[428, "coroutine-functions"]], "Asynchronous generator functions": [[428, "asynchronous-generator-functions"], [430, "asynchronous-generator-functions"]], "Built-in methods": [[428, "built-in-methods"]], "Classes": [[428, "classes"], [329, "classes"], [347, "classes"]], "Class Instances": [[428, "class-instances"]], "Custom classes": [[428, "custom-classes"]], "Class instances": [[428, "id3"]], "I/O objects (also known as file objects)": [[428, "i-o-objects-also-known-as-file-objects"]], "Internal types": [[428, "internal-types"]], "Code objects": [[428, "code-objects"]], "\u7528\u65bc\u7a0b\u5f0f\u78bc\u7269\u4ef6\u7684\u65b9\u6cd5": [[428, "methods-on-code-objects"]], "Frame objects": [[428, "frame-objects"]], "Frame object methods": [[428, "frame-object-methods"]], "Traceback objects": [[428, "traceback-objects"]], "Slice objects": [[428, "slice-objects"]], "Static method objects": [[428, "static-method-objects"]], "Class method objects": [[428, "class-method-objects"]], "Special method names": [[428, "special-method-names"]], "Basic customization": [[428, "basic-customization"]], "Customizing attribute access": [[428, "customizing-attribute-access"]], "Customizing module attribute access": [[428, "customizing-module-attribute-access"]], "Implementing Descriptors": [[428, "implementing-descriptors"]], "Invoking Descriptors": [[428, "invoking-descriptors"]], "__slots__": [[428, "slots"], [472, "slots"]], "Customizing class creation": [[428, "customizing-class-creation"]], "Metaclasses": [[428, "metaclasses"]], "Resolving MRO entries": [[428, "resolving-mro-entries"]], "Determining the appropriate metaclass": [[428, "determining-the-appropriate-metaclass"]], "Preparing the class namespace": [[428, "preparing-the-class-namespace"]], "Executing the class body": [[428, "executing-the-class-body"]], "Creating the class object": [[428, "creating-the-class-object"]], "Uses for metaclasses": [[428, "uses-for-metaclasses"]], "Customizing instance and subclass checks": [[428, "customizing-instance-and-subclass-checks"]], "Emulating generic types": [[428, "emulating-generic-types"]], "The purpose of __class_getitem__": [[428, "the-purpose-of-class-getitem"]], "__class_getitem__ versus __getitem__": [[428, "class-getitem-versus-getitem"]], "Emulating callable objects": [[428, "emulating-callable-objects"]], "Emulating container types": [[428, "emulating-container-types"]], "Emulating numeric types": [[428, "emulating-numeric-types"]], "With Statement Context Managers": [[428, "with-statement-context-managers"]], "Customizing positional arguments in class pattern matching": [[428, "customizing-positional-arguments-in-class-pattern-matching"]], "Emulating buffer types": [[428, "emulating-buffer-types"]], "Special method lookup": [[428, "special-method-lookup"]], "\u5354\u7a0b": [[428, "coroutines"], [427, "coroutines"], [139, "coroutines"]], "Awaitable Objects": [[428, "awaitable-objects"]], "Coroutine Objects": [[428, "coroutine-objects"]], "Asynchronous Iterators": [[428, "asynchronous-iterators"]], "Asynchronous Context Managers": [[428, "asynchronous-context-managers"]], "zipimport --- Import modules from Zip archives": [[423, "module-zipimport"]], "zipimporter \u7269\u4ef6": [[423, "zipimporter-objects"]], "xdrlib --- XDR \u8cc7\u6599\u7684\u7de8\u78bc\u8207\u89e3\u78bc": [[408, "module-xdrlib"]], "Packer Objects": [[408, "packer-objects"]], "Unpacker Objects": [[408, "unpacker-objects"]], "XML \u8655\u7406\u6a21\u7d44": [[409, "module-xml"]], "XML \u6f0f\u6d1e": [[409, "xml-vulnerabilities"]], "defusedxml \u5957\u4ef6": [[409, "the-defusedxml-package"]], "Compound statements": [[427, "compound-statements"]], "The if statement": [[427, "the-if-statement"]], "The while statement": [[427, "the-while-statement"]], "The for statement": [[427, "the-for-statement"]], "The try statement": [[427, "the-try-statement"]], "except clause": [[427, "except-clause"]], "except* clause": [[427, "except-star"]], "else clause": [[427, "else-clause"]], "finally clause": [[427, "finally-clause"]], "The with statement": [[427, "the-with-statement"]], "The match statement": [[427, "the-match-statement"]], "Overview": [[427, "overview"], [251, "overview"]], "Guards": [[427, "guards"]], "Irrefutable Case Blocks": [[427, "irrefutable-case-blocks"]], "Patterns": [[427, "patterns"]], "OR Patterns": [[427, "or-patterns"]], "AS Patterns": [[427, "as-patterns"]], "Literal Patterns": [[427, "literal-patterns"]], "Capture Patterns": [[427, "capture-patterns"]], "Wildcard Patterns": [[427, "wildcard-patterns"]], "Value Patterns": [[427, "value-patterns"]], "Group Patterns": [[427, "group-patterns"]], "Sequence Patterns": [[427, "sequence-patterns"]], "Mapping Patterns": [[427, "mapping-patterns"]], "Class Patterns": [[427, "class-patterns"]], "\u51fd\u5f0f\u5b9a\u7fa9": [[427, "function-definitions"]], "Class definitions": [[427, "class-definitions"]], "Coroutine function definition": [[427, "coroutine-function-definition"]], "The async for statement": [[427, "the-async-for-statement"]], "The async with statement": [[427, "the-async-with-statement"]], "Type parameter lists": [[427, "type-parameter-lists"]], "Generic functions": [[427, "generic-functions"]], "Generic classes": [[427, "generic-classes"]], "Generic type aliases": [[427, "generic-type-aliases"]], "Expressions": [[430, "expressions"]], "Arithmetic conversions": [[430, "arithmetic-conversions"]], "Atoms": [[430, "atoms"]], "Identifiers (Names)": [[430, "atom-identifiers"]], "Literals": [[430, "literals"], [435, "literals"]], "Parenthesized forms": [[430, "parenthesized-forms"]], "Displays for lists, sets and dictionaries": [[430, "displays-for-lists-sets-and-dictionaries"]], "List displays": [[430, "list-displays"]], "Set displays": [[430, "set-displays"]], "Dictionary displays": [[430, "dictionary-displays"]], "Generator expressions": [[430, "generator-expressions"]], "Yield expressions": [[430, "yield-expressions"]], "Generator-iterator methods": [[430, "generator-iterator-methods"]], "Asynchronous generator-iterator methods": [[430, "asynchronous-generator-iterator-methods"]], "Primaries": [[430, "primaries"]], "Attribute references": [[430, "attribute-references"]], "Subscriptions": [[430, "subscriptions"]], "Slicings": [[430, "slicings"]], "Calls": [[430, "calls"]], "Await expression": [[430, "await-expression"]], "The power operator": [[430, "the-power-operator"]], "Unary arithmetic and bitwise operations": [[430, "unary-arithmetic-and-bitwise-operations"]], "Binary arithmetic operations": [[430, "binary-arithmetic-operations"]], "Shifting operations": [[430, "shifting-operations"]], "Binary bitwise operations": [[430, "binary-bitwise-operations"]], "Value comparisons": [[430, "value-comparisons"]], "Membership test operations": [[430, "membership-test-operations"]], "Identity comparisons": [[430, "is-not"]], "Boolean operations": [[430, "boolean-operations"]], "Assignment expressions": [[430, "assignment-expressions"], [481, "assignment-expressions"]], "Conditional expressions": [[430, "conditional-expressions"]], "Lambdas": [[430, "lambda"]], "Expression lists": [[430, "expression-lists"]], "Evaluation order": [[430, "evaluation-order"]], "Operator precedence": [[430, "operator-precedence"]], "xml.dom.pulldom --- Support for building partial DOM trees": [[412, "module-xml.dom.pulldom"]], "DOMEventStream \u7269\u4ef6": [[412, "domeventstream-objects"]], "xml.sax.saxutils --- SAX Utilities": [[417, "module-xml.sax.saxutils"]], "Execution model": [[429, "execution-model"]], "Structure of a program": [[429, "structure-of-a-program"]], "Naming and binding": [[429, "naming-and-binding"]], "Binding of names": [[429, "binding-of-names"]], "Resolution of names": [[429, "resolution-of-names"]], "Annotation scopes": [[429, "annotation-scopes"]], "Lazy evaluation": [[429, "lazy-evaluation"]], "Builtins and restricted execution": [[429, "builtins-and-restricted-execution"]], "Interaction with dynamic features": [[429, "interaction-with-dynamic-features"]], "xml.dom --- The Document Object Model API": [[410, "module-xml.dom"]], "Objects in the DOM": [[410, "objects-in-the-dom"]], "DOMImplementation \u7269\u4ef6": [[410, "domimplementation-objects"]], "Node Objects": [[410, "node-objects"]], "NodeList \u7269\u4ef6": [[410, "nodelist-objects"]], "DocumentType \u7269\u4ef6": [[410, "documenttype-objects"]], "Document Objects": [[410, "document-objects"]], "Element Objects": [[410, "element-objects"]], "Attr Objects": [[410, "attr-objects"]], "NamedNodeMap \u7269\u4ef6": [[410, "namednodemap-objects"]], "Comment Objects": [[410, "comment-objects"]], "Text and CDATASection Objects": [[410, "text-and-cdatasection-objects"]], "ProcessingInstruction \u7269\u4ef6": [[410, "processinginstruction-objects"]], "Conformance": [[410, "conformance"]], "Type Mapping": [[410, "type-mapping"]], "Accessor Methods": [[410, "accessor-methods"]], "xml.dom.minidom --- Minimal DOM implementation": [[411, "module-xml.dom.minidom"]], "DOM \u7269\u4ef6": [[411, "dom-objects"]], "DOM \u7bc4\u4f8b": [[411, "dom-example"]], "minidom and the DOM standard": [[411, "minidom-and-the-dom-standard"]], "zipapp \u2014 \u7ba1\u7406\u53ef\u57f7\u884c\u7684 Python zip \u5c01\u5b58\u6a94\u6848": [[421, "module-zipapp"]], "\u57fa\u672c\u7bc4\u4f8b": [[421, "basic-example"]], "\u547d\u4ee4\u57f7\u884c\u5217\u4ecb\u9762": [[421, "command-line-interface"]], "Python API": [[421, "python-api"]], "Specifying the Interpreter": [[421, "specifying-the-interpreter"]], "Creating Standalone Applications with zipapp": [[421, "creating-standalone-applications-with-zipapp"]], "Caveats": [[421, "caveats"]], "The Python Zip Application Archive Format": [[421, "the-python-zip-application-archive-format"]], "Python \u8a9e\u8a00\u53c3\u8003\u624b\u518a": [[433, "the-python-language-reference"]], "xml.sax.handler --- Base classes for SAX handlers": [[415, "module-xml.sax.handler"]], "ContentHandler \u7269\u4ef6": [[415, "contenthandler-objects"]], "DTDHandler \u7269\u4ef6": [[415, "dtdhandler-objects"]], "EntityResolver \u7269\u4ef6": [[415, "entityresolver-objects"]], "ErrorHandler \u7269\u4ef6": [[415, "errorhandler-objects"]], "LexicalHandler \u7269\u4ef6": [[415, "lexicalhandler-objects"]], "zipfile --- Work with ZIP archives": [[422, "module-zipfile"]], "ZipFile \u7269\u4ef6": [[422, "zipfile-objects"]], "Path Objects": [[422, "path-objects"]], "PyZipFile \u7269\u4ef6": [[422, "pyzipfile-objects"]], "ZipInfo \u7269\u4ef6": [[422, "zipinfo-objects"]], "Command-Line Interface": [[422, "command-line-interface"], [311, "command-line-interface"], [358, "command-line-interface"]], "Command-line options": [[422, "command-line-options"], [358, "command-line-options"]], "Decompression pitfalls": [[422, "decompression-pitfalls"]], "From file itself": [[422, "from-file-itself"]], "File System limitations": [[422, "file-system-limitations"]], "Resources limitations": [[422, "resources-limitations"]], "Interruption": [[422, "interruption"]], "Default behaviors of extraction": [[422, "default-behaviors-of-extraction"]], "Simple statements": [[436, "simple-statements"]], "Expression statements": [[436, "expression-statements"]], "Assignment statements": [[436, "assignment-statements"]], "Augmented assignment statements": [[436, "augmented-assignment-statements"]], "Annotated assignment statements": [[436, "annotated-assignment-statements"]], "The assert statement": [[436, "the-assert-statement"]], "The pass statement": [[436, "the-pass-statement"]], "The del statement": [[436, "the-del-statement"]], "The return statement": [[436, "the-return-statement"]], "The yield statement": [[436, "the-yield-statement"]], "The raise statement": [[436, "the-raise-statement"]], "The break statement": [[436, "the-break-statement"]], "The continue statement": [[436, "the-continue-statement"]], "The import statement": [[436, "the-import-statement"]], "Future statements": [[436, "future-statements"]], "The global statement": [[436, "the-global-statement"]], "The nonlocal statement": [[436, "the-nonlocal-statement"]], "The type statement": [[436, "the-type-statement"]], "\u6cbf\u9769\u8207\u6388\u6b0a": [[426, "history-and-license"]], "\u8edf\u9ad4\u6cbf\u9769": [[426, "history-of-the-software"]], "\u95dc\u65bc\u5b58\u53d6\u6216\u4ee5\u5176\u4ed6\u65b9\u5f0f\u4f7f\u7528 Python \u7684\u5408\u7d04\u689d\u6b3e": [[426, "terms-and-conditions-for-accessing-or-otherwise-using-python"]], "\u7528\u65bc PYTHON 3.12.3 \u7684 PSF \u6388\u6b0a\u5408\u7d04": [[426, "psf-license-agreement-for-python-release"]], "\u7528\u65bc PYTHON 2.0 \u7684 BEOPEN.COM \u6388\u6b0a\u5408\u7d04": [[426, "beopen-com-license-agreement-for-python-2-0"]], "\u7528\u65bc PYTHON 1.6.1 \u7684 CNRI \u6388\u6b0a\u5408\u7d04": [[426, "cnri-license-agreement-for-python-1-6-1"]], "\u7528\u65bc PYTHON 0.9.0 \u81f3 1.2 \u7684 CWI \u6388\u6b0a\u5408\u7d04": [[426, "cwi-license-agreement-for-python-0-9-0-through-1-2"]], "\u7528\u65bc PYTHON 3.12.3 \u8aaa\u660e\u6587\u4ef6\u5167\u7a0b\u5f0f\u78bc\u7684 ZERO-CLAUSE BSD \u6388\u6b0a": [[426, "zero-clause-bsd-license-for-code-in-the-python-release-documentation"]], "\u88ab\u6536\u9304\u8edf\u9ad4\u7684\u6388\u6b0a\u8207\u81f4\u8b1d": [[426, "licenses-and-acknowledgements-for-incorporated-software"]], "Mersenne Twister": [[426, "mersenne-twister"]], "\u975e\u540c\u6b65 socket \u670d\u52d9": [[426, "asynchronous-socket-services"]], "Cookie \u7ba1\u7406": [[426, "cookie-management"]], "\u57f7\u884c\u8ffd\u8e64": [[426, "execution-tracing"]], "UUencode \u8207 UUdecode \u51fd\u5f0f": [[426, "uuencode-and-uudecode-functions"]], "XML \u9060\u7aef\u7a0b\u5e8f\u547c\u53eb": [[426, "xml-remote-procedure-calls"]], "test_epoll": [[426, "test-epoll"]], "Select kqueue": [[426, "select-kqueue"]], "SipHash24": [[426, "siphash24"]], "strtod \u8207 dtoa": [[426, "strtod-and-dtoa"]], "OpenSSL": [[426, "openssl"], [473, "openssl"]], "expat": [[426, "expat"]], "libffi": [[426, "libffi"]], "zlib": [[426, "zlib"], [476, "zlib"], [479, "zlib"]], "cfuhash": [[426, "cfuhash"]], "libmpdec": [[426, "libmpdec"]], "W3C C14N \u6e2c\u8a66\u5957\u4ef6": [[426, "w3c-c14n-test-suite"]], "Audioop": [[426, "audioop"]], "asyncio": [[426, "asyncio"], [477, "asyncio"], [478, "asyncio"], [482, "asyncio"], [481, "asyncio"], [480, "asyncio"], [480, "whatsnew37-asyncio-deprecated"], [479, "asyncio"], [474, "asyncio"], [472, "asyncio"], [473, "asyncio"]], "xmlrpc.client --- XML-RPC client access": [[419, "module-xmlrpc.client"]], "ServerProxy \u7269\u4ef6": [[419, "serverproxy-objects"]], "\u65e5\u671f\u6642\u9593\u7269\u4ef6": [[419, "datetime-objects"]], "Binary Objects": [[419, "binary-objects"]], "Fault Objects": [[419, "fault-objects"]], "ProtocolError \u7269\u4ef6": [[419, "protocolerror-objects"]], "MultiCall \u7269\u4ef6": [[419, "multicall-objects"]], "Convenience Functions": [[419, "convenience-functions"]], "Example of Client Usage": [[419, "example-of-client-usage"]], "Example of Client and Server Usage": [[419, "example-of-client-and-server-usage"]], "xml.etree.ElementTree --- The ElementTree XML API": [[413, "module-xml.etree.ElementTree"]], "XML tree and elements": [[413, "xml-tree-and-elements"]], "\u5256\u6790 XML": [[413, "parsing-xml"]], "Pull API for non-blocking parsing": [[413, "pull-api-for-non-blocking-parsing"]], "Finding interesting elements": [[413, "finding-interesting-elements"]], "\u6539\u52d5 XML \u6a94\u6848": [[413, "modifying-an-xml-file"]], "Building XML documents": [[413, "building-xml-documents"]], "Parsing XML with Namespaces": [[413, "parsing-xml-with-namespaces"]], "XPath \u652f\u63f4": [[413, "xpath-support"]], "Supported XPath syntax": [[413, "supported-xpath-syntax"]], "Reference": [[413, "reference"], [413, "id4"], [340, "reference"], [283, "reference"]], "\u51fd\u5f0f": [[413, "functions"], [413, "elementinclude-functions"], [425, "functions"], [382, "functions"], [405, "functions"], [337, "functions"], [344, "functions"], [366, "functions"], [250, "functions"], [179, "functions"], [177, "functions"], [151, "functions"]], "XInclude support": [[413, "xinclude-support"]], "Element \u7269\u4ef6": [[413, "element-objects"]], "ElementTree \u7269\u4ef6": [[413, "elementtree-objects"]], "QName \u7269\u4ef6": [[413, "qname-objects"]], "TreeBuilder \u7269\u4ef6": [[413, "treebuilder-objects"]], "XMLParser \u7269\u4ef6": [[413, "xmlparser-objects"], [314, "xmlparser-objects"]], "XMLPullParser \u7269\u4ef6": [[413, "xmlpullparser-objects"]], "\u9644\u9304": [[438, "appendix"]], "\u4e92\u52d5\u6a21\u5f0f": [[438, "interactive-mode"], [448, "interactive-mode"]], "\u932f\u8aa4\u8655\u7406": [[438, "error-handling"]], "\u53ef\u57f7\u884c\u7684 Python \u8173\u672c": [[438, "executable-python-scripts"]], "\u4e92\u52d5\u5f0f\u555f\u52d5\u6a94\u6848": [[438, "the-interactive-startup-file"]], "\u5ba2\u88fd\u5316\u6a21\u7d44": [[438, "the-customization-modules"]], "\u6700\u9ad8\u5c64\u7d1a\u5143\u4ef6": [[437, "top-level-components"]], "\u5b8c\u6574\u7684 Python \u7a0b\u5f0f": [[437, "complete-python-programs"]], "\u6a94\u6848\u8f38\u5165": [[437, "file-input"]], "\u4e92\u52d5\u5f0f\u8f38\u5165": [[437, "interactive-input"]], "\u904b\u7b97\u5f0f\u8f38\u5165": [[437, "expression-input"]], "zlib --- \u76f8\u5bb9\u65bc gzip \u7684\u58d3\u7e2e": [[424, "module-zlib"]], "Class\uff08\u985e\u5225\uff09": [[440, "classes"]], "\u95dc\u65bc\u540d\u7a31\u8207\u7269\u4ef6\u7684\u4e00\u6bb5\u8a71": [[440, "a-word-about-names-and-objects"]], "Python \u4f5c\u7528\u57df (Scope) \u53ca\u547d\u540d\u7a7a\u9593 (Namespace)": [[440, "python-scopes-and-namespaces"]], "\u4f5c\u7528\u57df\u548c\u547d\u540d\u7a7a\u9593\u7684\u7bc4\u4f8b": [[440, "scopes-and-namespaces-example"]], "\u521d\u898b class": [[440, "a-first-look-at-classes"]], "Class definition\uff08\u985e\u5225\u5b9a\u7fa9\uff09\u8a9e\u6cd5": [[440, "class-definition-syntax"]], "Class \u7269\u4ef6": [[440, "class-objects"]], "\u5be6\u4f8b\u7269\u4ef6": [[440, "instance-objects"]], "Method \u7269\u4ef6": [[440, "method-objects"]], "Class \u53ca\u5be6\u4f8b\u8b8a\u6578": [[440, "class-and-instance-variables"]], "\u96a8\u610f\u7684\u5099\u8a3b": [[440, "random-remarks"]], "\u7e7c\u627f (Inheritance)": [[440, "inheritance"]], "\u591a\u91cd\u7e7c\u627f": [[440, "multiple-inheritance"]], "\u79c1\u6709\u8b8a\u6578": [[440, "private-variables"]], "\u88dc\u5145\u8aaa\u660e": [[440, "odds-and-ends"]], "\u758a\u4ee3\u5668 (Iterator)": [[440, "iterators"]], "\u7522\u751f\u5668 (Generator)": [[440, "generators"]], "\u7522\u751f\u5668\u904b\u7b97\u5f0f": [[440, "generator-expressions"]], "Lexical analysis": [[435, "lexical-analysis"]], "Line structure": [[435, "line-structure"]], "Logical lines": [[435, "logical-lines"]], "Physical lines": [[435, "physical-lines"]], "Comments": [[435, "comments"]], "Encoding declarations": [[435, "encoding-declarations"]], "Explicit line joining": [[435, "explicit-line-joining"]], "Implicit line joining": [[435, "implicit-line-joining"]], "Blank lines": [[435, "blank-lines"]], "Indentation": [[435, "indentation"]], "Whitespace between tokens": [[435, "whitespace-between-tokens"]], "Other tokens": [[435, "other-tokens"]], "Identifiers and keywords": [[435, "identifiers"]], "\u95dc\u9375\u5b57": [[435, "keywords"]], "\u8edf\u95dc\u9375\u5b57": [[435, "soft-keywords"]], "Reserved classes of identifiers": [[435, "reserved-classes-of-identifiers"]], "String and Bytes literals": [[435, "string-and-bytes-literals"]], "\u8df3\u812b\u5e8f\u5217": [[435, "escape-sequences"]], "String literal concatenation": [[435, "string-literal-concatenation"]], "f-string\uff08f \u5b57\u4e32\uff09": [[435, "formatted-string-literals"]], "Numeric literals": [[435, "numeric-literals"]], "Integer literals": [[435, "integer-literals"]], "Floating point literals": [[435, "floating-point-literals"]], "Imaginary literals": [[435, "imaginary-literals"]], "Operators": [[435, "operators"], [259, "operators"], [259, "id1"], [259, "id2"]], "Delimiters": [[435, "delimiters"]], "\u5b8c\u6574\u7684\u8a9e\u6cd5\u898f\u683c\u66f8": [[431, "full-grammar-specification"]], "xmlrpc.server --- Basic XML-RPC servers": [[420, "module-xmlrpc.server"]], "SimpleXMLRPCServer \u7269\u4ef6": [[420, "simplexmlrpcserver-objects"]], "SimpleXMLRPCServer \u7bc4\u4f8b": [[420, "simplexmlrpcserver-example"]], "CGIXMLRPCRequestHandler": [[420, "cgixmlrpcrequesthandler"]], "Documenting XMLRPC server": [[420, "documenting-xmlrpc-server"]], "DocXMLRPCServer \u7269\u4ef6": [[420, "docxmlrpcserver-objects"]], "DocCGIXMLRPCRequestHandler": [[420, "doccgixmlrpcrequesthandler"]], "The import system": [[432, "the-import-system"]], "importlib": [[432, "importlib"], [477, "importlib"], [478, "importlib"], [482, "importlib"], [480, "importlib"], [480, "id6"], [479, "importlib"], [479, "id3"], [474, "importlib"]], "Packages": [[432, "packages"]], "Regular packages": [[432, "regular-packages"]], "Namespace packages": [[432, "namespace-packages"]], "Searching": [[432, "searching"]], "The module cache": [[432, "the-module-cache"]], "Finders and loaders": [[432, "finders-and-loaders"]], "Import hooks": [[432, "import-hooks"]], "The meta path": [[432, "the-meta-path"]], "Loading": [[432, "loading"]], "Loaders": [[432, "loaders"]], "Submodules": [[432, "submodules"]], "Module spec": [[432, "module-spec"]], "Import-related module attributes": [[432, "import-related-module-attributes"]], "module.__path__": [[432, "module-path"]], "Module reprs": [[432, "module-reprs"]], "Cached bytecode invalidation": [[432, "cached-bytecode-invalidation"]], "The Path Based Finder": [[432, "the-path-based-finder"]], "Path entry finders": [[432, "path-entry-finders"]], "Path entry finder protocol": [[432, "path-entry-finder-protocol"]], "Replacing the standard import system": [[432, "replacing-the-standard-import-system"]], "Package Relative Imports": [[432, "package-relative-imports"]], "Special considerations for __main__": [[432, "special-considerations-for-main"]], "__main__.__spec__": [[432, "main-spec"]], "xml.sax --- Support for SAX2 parsers": [[414, "module-xml.sax"]], "SAXException \u7269\u4ef6": [[414, "saxexception-objects"]], "\u6dfa\u5617\u6ecb\u5473": [[439, "whetting-your-appetite"]], "zoneinfo --- IANA \u6642\u5340\u652f\u63f4": [[425, "module-zoneinfo"]], "Using ZoneInfo": [[425, "using-zoneinfo"]], "Data sources": [[425, "data-sources"]], "Configuring the data sources": [[425, "configuring-the-data-sources"]], "Compile-time configuration": [[425, "compile-time-configuration"]], "Environment configuration": [[425, "environment-configuration"]], "Runtime configuration": [[425, "runtime-configuration"]], "The ZoneInfo class": [[425, "the-zoneinfo-class"]], "String representations": [[425, "string-representations"]], "Pickle serialization": [[425, "pickle-serialization"]], "Globals": [[425, "globals"]], "Exceptions and warnings": [[425, "exceptions-and-warnings"]], "urllib.parse --- Parse URLs into components": [[394, "module-urllib.parse"]], "URL Parsing": [[394, "url-parsing"]], "URL parsing security": [[394, "url-parsing-security"]], "Parsing ASCII Encoded Bytes": [[394, "parsing-ascii-encoded-bytes"]], "Structured Parse Results": [[394, "structured-parse-results"]], "URL Quoting": [[394, "url-quoting"]], "winsound --- Sound-playing interface for Windows": [[406, "module-winsound"]], "tracemalloc --- Trace memory allocations": [[382, "module-tracemalloc"]], "Display the top 10": [[382, "display-the-top-10"]], "Compute differences": [[382, "compute-differences"]], "Get the traceback of a memory block": [[382, "get-the-traceback-of-a-memory-block"]], "Pretty top": [[382, "pretty-top"]], "Record the current and peak size of all traced memory blocks": [[382, "record-the-current-and-peak-size-of-all-traced-memory-blocks"]], "API": [[382, "api"], [399, "api"]], "DomainFilter": [[382, "domainfilter"]], "Filter": [[382, "filter"]], "Frame": [[382, "frame"]], "Snapshot": [[382, "snapshot"]], "Statistic": [[382, "statistic"]], "StatisticDiff": [[382, "statisticdiff"]], "Trace": [[382, "trace"]], "Traceback": [[382, "traceback"]], "unittest.mock \u2014 mock \u7269\u4ef6\u51fd\u5f0f\u5eab": [[389, "module-unittest.mock"]], "\u5feb\u901f\u5c0e\u5f15": [[389, "quick-guide"]], "Mock \u985e\u5225": [[389, "the-mock-class"], [390, "mocking-classes"]], "\u547c\u53eb": [[389, "calling"]], "\u522a\u9664\u5c6c\u6027": [[389, "deleting-attributes"]], "Mock \u540d\u7a31\u8207\u540d\u7a31\u5c6c\u6027": [[389, "mock-names-and-the-name-attribute"]], "\u5982\u540c\u5c6c\u6027\u4e00\u822c\u9644\u52a0 mock": [[389, "attaching-mocks-as-attributes"]], "Patchers": [[389, "the-patchers"]], "patch": [[389, "patch"]], "patch.object": [[389, "patch-object"]], "patch.dict": [[389, "patch-dict"]], "patch.multiple": [[389, "patch-multiple"]], "patch \u65b9\u6cd5\uff1a\u555f\u52d5\u8207\u505c\u6b62": [[389, "patch-methods-start-and-stop"]], "patch \u5167\u5efa\u51fd\u5f0f": [[389, "patch-builtins"]], "TEST_PREFIX": [[389, "test-prefix"]], "\u5de2\u72c0\u4f7f\u7528 Patch \u88dd\u98fe\u5668": [[389, "nesting-patch-decorators"]], "\u8a72 patch \u4f55\u8655": [[389, "where-to-patch"]], "Patch \u63cf\u8ff0\u5668\u8207\u4ee3\u7406\u7269\u4ef6 (Proxy Objects)": [[389, "patching-descriptors-and-proxy-objects"]], "MagicMock \u4ee5\u53ca\u9b54\u8853\u65b9\u6cd5\u652f\u63f4": [[389, "magicmock-and-magic-method-support"]], "Mock \u9b54\u8853\u65b9\u6cd5": [[389, "mocking-magic-methods"]], "Magic Mock": [[389, "magic-mock"]], "\u8f14\u52a9\u51fd\u5f0f": [[389, "helpers"], [345, "helper-functions"]], "sentinel\uff08\u54e8\u5175\uff09": [[389, "sentinel"]], "DEFAULT": [[389, "default"]], "call": [[389, "call"]], "create_autospec": [[389, "create-autospec"]], "ANY": [[389, "any"]], "FILTER_DIR": [[389, "filter-dir"]], "mock_open": [[389, "mock-open"]], "Autospeccing\uff08\u81ea\u52d5\u898f\u683c\uff09": [[389, "autospeccing"]], "\u5bc6\u5c01 mock": [[389, "sealing-mocks"]], "Order of precedence of side_effect, return_value and wraps": [[389, "order-of-precedence-of-side-effect-return-value-and-wraps"]], "tomllib --- \u5256\u6790 TOML \u6a94\u6848": [[379, "module-tomllib"]], "\u8f49\u63db\u8868": [[379, "conversion-table"]], "unittest.mock --- \u5165\u9580\u6307\u5357": [[390, "unittest-mock-getting-started"]], "\u4f7f\u7528 Mock \u7684\u65b9\u5f0f": [[390, "using-mock"]], "\u4f7f\u7528 Mock \u4f86 patching \u65b9\u6cd5": [[390, "mock-patching-methods"]], "\u5c0d\u7269\u4ef6\u7684\u65b9\u6cd5\u547c\u53eb\u4f7f\u7528 mock": [[390, "mock-for-method-calls-on-an-object"]], "\u547d\u540d\u4f60\u7684 mock": [[390, "naming-your-mocks"]], "\u8ffd\u8e64\u6240\u6709\u547c\u53eb": [[390, "tracking-all-calls"]], "\u8a2d\u5b9a\u56de\u50b3\u503c\u548c\u5c6c\u6027": [[390, "setting-return-values-and-attributes"]], "\u900f\u904e mock \u5f15\u767c\u4f8b\u5916": [[390, "raising-exceptions-with-mocks"]], "Side effect \u51fd\u5f0f\u4ee5\u53ca\u53ef\u758a\u4ee3\u7269\u4ef6": [[390, "side-effect-functions-and-iterables"]], "Mock \u975e\u540c\u6b65\u53ef\u758a\u4ee3\u7269\u4ef6": [[390, "mocking-asynchronous-iterators"]], "Mock \u975e\u540c\u6b65\u60c5\u5883\u7ba1\u7406\u5668": [[390, "mocking-asynchronous-context-manager"]], "\u5f9e\u73fe\u6709\u7269\u4ef6\u5efa\u7acb mock": [[390, "creating-a-mock-from-an-existing-object"]], "\u4f7f\u7528 side_effect \u56de\u50b3\u5404\u5225\u6a94\u6848\u5167\u5bb9": [[390, "using-side-effect-to-return-per-file-content"]], "Patch \u88dd\u98fe\u5668": [[390, "patch-decorators"]], "\u66f4\u591a\u7bc4\u4f8b": [[390, "further-examples"]], "Mock \u934a\u63a5\u547c\u53eb": [[390, "mocking-chained-calls"]], "\u90e8\u5206 mocking": [[390, "partial-mocking"]], "Mock \u7522\u751f\u5668\u65b9\u6cd5": [[390, "mocking-a-generator-method"]], "\u5c0d\u6bcf\u500b\u6e2c\u8a66\u65b9\u6cd5\u61c9\u7528\u76f8\u540c\u7684 patch": [[390, "applying-the-same-patch-to-every-test-method"]], "Mock Unbound Methods \uff08\u672a\u7e6b\u7d50\u65b9\u6cd5\uff09": [[390, "mocking-unbound-methods"]], "\u4f7f\u7528 mock \u6aa2\u67e5\u591a\u500b\u547c\u53eb": [[390, "checking-multiple-calls-with-mock"]], "\u61c9\u5c0d\u53ef\u8b8a\u5f15\u6578": [[390, "coping-with-mutable-arguments"]], "\u5de2\u72c0\u4f7f\u7528 Patch": [[390, "nesting-patches"]], "\u4f7f\u7528 MagicMock \u4f86 mock \u5b57\u5178": [[390, "mocking-a-dictionary-with-magicmock"]], "Mock \u5b50\u985e\u5225\u53ca\u5176\u5c6c\u6027": [[390, "mock-subclasses-and-their-attributes"]], "Mocking imports with patch.dict": [[390, "mocking-imports-with-patch-dict"]], "Tracking order of calls and less verbose call assertions": [[390, "tracking-order-of-calls-and-less-verbose-call-assertions"]], "More complex argument matching": [[390, "more-complex-argument-matching"]], "urllib.request --- \u7528\u4f86\u958b\u555f URLs \u7684\u53ef\u64f4\u5145\u51fd\u5f0f\u5eab": [[395, "module-urllib.request"]], "Request Objects": [[395, "request-objects"]], "OpenerDirector \u7269\u4ef6": [[395, "openerdirector-objects"]], "BaseHandler \u7269\u4ef6": [[395, "basehandler-objects"]], "HTTPRedirectHandler \u7269\u4ef6": [[395, "httpredirecthandler-objects"]], "HTTPCookieProcessor \u7269\u4ef6": [[395, "httpcookieprocessor-objects"]], "ProxyHandler \u7269\u4ef6": [[395, "proxyhandler-objects"]], "HTTPPasswordMgr \u7269\u4ef6": [[395, "httppasswordmgr-objects"]], "HTTPPasswordMgrWithPriorAuth \u7269\u4ef6": [[395, "httppasswordmgrwithpriorauth-objects"]], "AbstractBasicAuthHandler \u7269\u4ef6": [[395, "abstractbasicauthhandler-objects"]], "HTTPBasicAuthHandler \u7269\u4ef6": [[395, "httpbasicauthhandler-objects"]], "ProxyBasicAuthHandler \u7269\u4ef6": [[395, "proxybasicauthhandler-objects"]], "AbstractDigestAuthHandler \u7269\u4ef6": [[395, "abstractdigestauthhandler-objects"]], "HTTPDigestAuthHandler \u7269\u4ef6": [[395, "httpdigestauthhandler-objects"]], "ProxyDigestAuthHandler \u7269\u4ef6": [[395, "proxydigestauthhandler-objects"]], "HTTPHandler \u7269\u4ef6": [[395, "httphandler-objects"]], "HTTPSHandler \u7269\u4ef6": [[395, "httpshandler-objects"]], "FileHandler \u7269\u4ef6": [[395, "filehandler-objects"]], "DataHandler \u7269\u4ef6": [[395, "datahandler-objects"]], "FTPHandler \u7269\u4ef6": [[395, "ftphandler-objects"]], "CacheFTPHandler \u7269\u4ef6": [[395, "cacheftphandler-objects"]], "UnknownHandler \u7269\u4ef6": [[395, "unknownhandler-objects"]], "HTTPErrorProcessor \u7269\u4ef6": [[395, "httperrorprocessor-objects"]], "Legacy interface": [[395, "legacy-interface"]], "urllib.request Restrictions": [[395, "urllib-request-restrictions"]], "urllib.response --- Response classes used by urllib": [[395, "module-urllib.response"]], "uuid --- RFC 4122 \u5b9a\u7fa9\u7684 UUID \u7269\u4ef6": [[398, "module-uuid"]], "\u547d\u4ee4\u5217\u7684\u7528\u6cd5": [[398, "command-line-usage"]], "\u547d\u4ee4\u5217\u7684\u7bc4\u4f8b": [[398, "command-line-example"]], "tkinter.tix --- Tk \u64f4\u5145\u5c0f\u5de5\u5177": [[375, "module-tkinter.tix"]], "Using Tix": [[375, "using-tix"]], "Tix Widgets": [[375, "tix-widgets"]], "Basic Widgets": [[375, "basic-widgets"]], "File Selectors": [[375, "file-selectors"]], "Hierarchical ListBox": [[375, "hierarchical-listbox"]], "Tabular ListBox": [[375, "tabular-listbox"]], "Manager Widgets": [[375, "manager-widgets"]], "Image Types": [[375, "image-types"]], "Miscellaneous Widgets": [[375, "miscellaneous-widgets"]], "Form Geometry Manager": [[375, "form-geometry-manager"]], "Tix \u6307\u4ee4": [[375, "tix-commands"]], "urllib.error --- urllib.request \u5f15\u767c\u7684\u4f8b\u5916\u985e\u5225": [[393, "module-urllib.error"]], "warnings --- Warning control": [[400, "module-warnings"]], "Warning Categories": [[400, "warning-categories"]], "The Warnings Filter": [[400, "the-warnings-filter"]], "Describing Warning Filters": [[400, "describing-warning-filters"]], "Default Warning Filter": [[400, "default-warning-filter"]], "Overriding the default filter": [[400, "overriding-the-default-filter"]], "Temporarily Suppressing Warnings": [[400, "temporarily-suppressing-warnings"]], "Testing Warnings": [[400, "testing-warnings"]], "Updating Code For New Versions of Dependencies": [[400, "updating-code-for-new-versions-of-dependencies"]], "Available Functions": [[400, "available-functions"]], "Available Context Managers": [[400, "available-context-managers"]], "unittest --- \u55ae\u5143\u6e2c\u8a66\u6846\u67b6": [[388, "module-unittest"]], "\u7c21\u55ae\u7bc4\u4f8b": [[388, "basic-example"], [356, "simple-example"]], "\u547d\u4ee4\u57f7\u884c\u5217\u4ecb\u9762 (Command-Line Interface)": [[388, "command-line-interface"]], "\u547d\u4ee4\u5217\u6a21\u5f0f\u9078\u9805": [[388, "command-line-options"]], "Test Discovery\uff08\u6e2c\u8a66\u63a2\u7d22\uff09": [[388, "test-discovery"]], "Organizing test code": [[388, "organizing-test-code"]], "Re-using old test code": [[388, "re-using-old-test-code"]], "Skipping tests and expected failures": [[388, "skipping-tests-and-expected-failures"]], "Distinguishing test iterations using subtests": [[388, "distinguishing-test-iterations-using-subtests"]], "Classes and functions": [[388, "classes-and-functions"]], "Test cases": [[388, "test-cases"]], "Grouping tests": [[388, "grouping-tests"]], "Loading and running tests": [[388, "loading-and-running-tests"]], "load_tests Protocol": [[388, "load-tests-protocol"]], "Class and Module Fixtures": [[388, "class-and-module-fixtures"]], "setUpClass and tearDownClass": [[388, "setupclass-and-teardownclass"]], "setUpModule and tearDownModule": [[388, "setupmodule-and-teardownmodule"]], "tokenize --- Tokenizer for Python source": [[378, "module-tokenize"]], "Tokenizing Input": [[378, "tokenizing-input"]], "Command-Line Usage": [[378, "command-line-usage"], [380, "command-line-usage"]], "webbrowser --- Convenient web-browser controller": [[403, "module-webbrowser"]], "Browser Controller Objects": [[403, "browser-controller-objects"]], "Unix \u7279\u6709\u670d\u52d9": [[391, "unix-specific-services"]], "tkinter.ttk --- Tk themed widgets": [[376, "module-tkinter.ttk"]], "\u4f7f\u7528 Ttk": [[376, "using-ttk"]], "Ttk Widgets": [[376, "ttk-widgets"]], "Widget": [[376, "widget"]], "\u6a19\u6e96\u9078\u9805": [[376, "standard-options"]], "Scrollable Widget Options": [[376, "scrollable-widget-options"]], "Label Options": [[376, "label-options"]], "\u76f8\u5bb9\u6027\u9078\u9805": [[376, "compatibility-options"]], "Widget States": [[376, "widget-states"]], "ttk.Widget": [[376, "ttk-widget"]], "Combobox": [[376, "combobox"]], "\u9078\u9805": [[376, "options"], [376, "id1"], [376, "id3"], [376, "id5"], [376, "id6"], [376, "id7"]], "Virtual events": [[376, "virtual-events"], [376, "id2"]], "ttk.Combobox": [[376, "ttk-combobox"]], "Spinbox": [[376, "spinbox"]], "ttk.Spinbox": [[376, "ttk-spinbox"]], "Notebook": [[376, "notebook"]], "Tab Options": [[376, "tab-options"]], "Tab Identifiers": [[376, "tab-identifiers"]], "\u865b\u64ec\u4e8b\u4ef6": [[376, "id4"], [376, "id8"]], "ttk.Notebook": [[376, "ttk-notebook"]], "Progressbar": [[376, "progressbar"]], "ttk.Progressbar": [[376, "ttk-progressbar"]], "Separator": [[376, "separator"]], "Sizegrip": [[376, "sizegrip"]], "Platform-specific notes": [[376, "platform-specific-notes"]], "Bugs": [[376, "bugs"]], "Treeview": [[376, "treeview"]], "Item Options": [[376, "item-options"]], "Tag Options": [[376, "tag-options"]], "Column Identifiers": [[376, "column-identifiers"]], "ttk.Treeview": [[376, "ttk-treeview"]], "Ttk Styling": [[376, "ttk-styling"]], "Layouts": [[376, "layouts"]], "xdrlib --- uuencode \u6a94\u6848\u7684\u7de8\u78bc\u8207\u89e3\u78bc": [[397, "module-uu"]], "venv --- Creation of virtual environments": [[399, "module-venv"]], "\u5efa\u7acb\u865b\u64ec\u74b0\u5883": [[399, "creating-virtual-environments"], [453, "creating-virtual-environments"]], "\u865b\u64ec\u74b0\u5883\u5982\u4f55\u904b\u4f5c": [[399, "how-venvs-work"]], "An example of extending EnvBuilder": [[399, "an-example-of-extending-envbuilder"]], "urllib.robotparser --- robots.txt \u7684\u5256\u6790\u5668": [[396, "module-urllib.robotparser"]], "token --- Constants used with Python parse trees": [[377, "module-token"]], "traceback --- Print or retrieve a stack traceback": [[381, "module-traceback"]], "TracebackException \u7269\u4ef6": [[381, "tracebackexception-objects"]], "StackSummary \u7269\u4ef6": [[381, "stacksummary-objects"]], "FrameSummary \u7269\u4ef6": [[381, "framesummary-objects"]], "Traceback Examples": [[381, "traceback-examples"]], "wsgiref --- WSGI \u5de5\u5177\u8207\u53c3\u8003\u5be6\u4f5c": [[407, "module-wsgiref"]], "wsgiref.util -- WSGI \u74b0\u5883\u5de5\u5177": [[407, "module-wsgiref.util"]], "wsgiref.headers -- WSGI \u56de\u61c9\u6a19\u982d\u5de5\u5177": [[407, "module-wsgiref.headers"]], "wsgiref.simple_server -- \u4e00\u500b\u7c21\u55ae\u7684 WSGI HTTP \u4f3a\u670d\u5668": [[407, "module-wsgiref.simple_server"]], "wsgiref.validate --- WSGI \u7b26\u5408\u6027\u6aa2\u67e5": [[407, "module-wsgiref.validate"]], "wsgiref.handlers -- \u4f3a\u670d\u5668 / \u9598\u9053\u57fa\u672c\u985e\u5225": [[407, "module-wsgiref.handlers"]], "wsgiref.types -- \u7528\u65bc\u975c\u614b\u578b\u5225\u6aa2\u67e5\u7684 WSGI \u578b\u5225": [[407, "module-wsgiref.types"]], "turtle --- \u9f9c\u5716\u5b78 (Turtle graphics)": [[384, "module-turtle"]], "\u4ecb\u7d39": [[384, "introduction"]], "Turtle star": [[384, null]], "\u555f\u52d5\u4e00\u500b\u70cf\u9f9c\u74b0\u5883": [[384, "starting-a-turtle-environment"]], "\u57fa\u672c\u7e6a\u5716": [[384, "basic-drawing"]], "Pen control": [[384, "pen-control"], [384, "id1"]], "The turtle's position": [[384, "the-turtle-s-position"]], "Making algorithmic patterns": [[384, "making-algorithmic-patterns"]], "How to...": [[384, "how-to"]], "Get started as quickly as possible": [[384, "get-started-as-quickly-as-possible"]], "Use the turtle module namespace": [[384, "use-the-turtle-module-namespace"]], "Use turtle graphics in a script": [[384, "use-turtle-graphics-in-a-script"]], "Use object-oriented turtle graphics": [[384, "use-object-oriented-turtle-graphics"]], "Turtle graphics reference": [[384, "turtle-graphics-reference"]], "Turtle methods": [[384, "turtle-methods"]], "Methods of TurtleScreen/Screen": [[384, "methods-of-turtlescreen-screen"]], "Methods of RawTurtle/Turtle and corresponding functions": [[384, "methods-of-rawturtle-turtle-and-corresponding-functions"]], "Turtle motion": [[384, "turtle-motion"]], "Tell Turtle's state": [[384, "tell-turtle-s-state"]], "Settings for measurement": [[384, "settings-for-measurement"]], "Drawing state": [[384, "drawing-state"]], "Color control": [[384, "color-control"]], "Filling": [[384, "filling"]], "More drawing control": [[384, "more-drawing-control"]], "Turtle state": [[384, "turtle-state"]], "Visibility": [[384, "visibility"]], "Appearance": [[384, "appearance"]], "Using events": [[384, "using-events"]], "Special Turtle methods": [[384, "special-turtle-methods"]], "Compound shapes": [[384, "compound-shapes"]], "Methods of TurtleScreen/Screen and corresponding functions": [[384, "methods-of-turtlescreen-screen-and-corresponding-functions"]], "Window control": [[384, "window-control"]], "Animation control": [[384, "animation-control"]], "Using screen events": [[384, "using-screen-events"]], "Input methods": [[384, "input-methods"]], "Settings and special methods": [[384, "settings-and-special-methods"]], "Methods specific to Screen, not inherited from TurtleScreen": [[384, "methods-specific-to-screen-not-inherited-from-turtlescreen"]], "Public classes": [[384, "public-classes"]], "Explanation": [[384, "explanation"]], "Help and configuration": [[384, "help-and-configuration"]], "How to use help": [[384, "how-to-use-help"]], "Translation of docstrings into different languages": [[384, "translation-of-docstrings-into-different-languages"]], "How to configure Screen and Turtles": [[384, "how-to-configure-screen-and-turtles"]], "turtledemo --- Demo scripts": [[384, "module-turtledemo"]], "Changes since Python 2.6": [[384, "changes-since-python-2-6"]], "Changes since Python 3.0": [[384, "changes-since-python-3-0"]], "wave --- \u8b80\u5beb WAV \u6a94\u6848": [[401, "module-wave"]], "Wave_read \u7269\u4ef6": [[401, "wave-read-objects"]], "Wave_write \u7269\u4ef6": [[401, "wave-write-objects"]], "weakref --- Weak references": [[402, "module-weakref"]], "Weak Reference Objects": [[402, "weak-reference-objects"]], "Finalizer Objects": [[402, "finalizer-objects"]], "Comparing finalizers with __del__() methods": [[402, "comparing-finalizers-with-del-methods"]], "winreg --- Windows registry access": [[405, "module-winreg"]], "\u5e38\u6578": [[405, "constants"], [386, "constant"], [337, "constants"], [341, "constants"], [275, "constants"], [235, "constants"], [183, "constants"], [186, "constants"], [137, "constants"], [154, "constants"]], "HKEY_* Constants": [[405, "hkey-constants"]], "Access Rights": [[405, "access-rights"]], "64-bit Specific": [[405, "bit-specific"]], "Value Types": [[405, "value-types"]], "Registry Handle Objects": [[405, "registry-handle-objects"]], "typing --- \u652f\u63f4\u578b\u5225\u63d0\u793a": [[386, "typing-support-for-type-hints"]], "Specification for the Python Type System": [[386, "specification-for-the-python-type-system"]], "\u578b\u5225\u5225\u540d": [[386, "type-aliases"]], "NewType": [[386, "newtype"]], "\u8a3b\u91cb callable \u7269\u4ef6": [[386, "annotating-callable-objects"]], "\u6cdb\u578b": [[386, "generics"]], "\u8a3b\u91cb\u5143\u7d44 (tuple)": [[386, "annotating-tuples"]], "\u985e\u5225\u7269\u4ef6\u7684\u578b\u5225": [[386, "the-type-of-class-objects"]], "\u4f7f\u7528\u8005\u5b9a\u7fa9\u6cdb\u578b\u578b\u5225": [[386, "user-defined-generic-types"]], "Any \u578b\u5225": [[386, "the-any-type"]], "\u6a19\u7a31 (nominal) \u5b50\u578b\u5225 vs \u7d50\u69cb\u5b50\u578b\u5225": [[386, "nominal-vs-structural-subtyping"]], "\u7279\u5225\u578b\u5225\u539f\u8a9e (primitive)": [[386, "special-typing-primitives"]], "\u7279\u5225\u578b\u5225": [[386, "special-types"]], "Special forms": [[386, "special-forms"]], "Building generic types and type aliases": [[386, "building-generic-types-and-type-aliases"]], "Other special directives": [[386, "other-special-directives"]], "ABCs for working with IO": [[386, "abcs-for-working-with-io"]], "\u51fd\u5f0f\u8207\u88dd\u98fe\u5668": [[386, "functions-and-decorators"]], "Recognised parameters for field specifiers": [[386, "id7"]], "Introspection helpers": [[386, "introspection-helpers"]], "\u68c4\u7528\u7684\u5225\u540d": [[386, "deprecated-aliases"]], "\u5167\u5efa\u578b\u5225\u7684\u5225\u540d": [[386, "aliases-to-built-in-types"]], "collections \u4e2d\u578b\u5225\u7684\u5225\u540d": [[386, "aliases-to-types-in-collections"]], "Aliases to other concrete types": [[386, "aliases-to-other-concrete-types"]], "collections.abc \u4e2d\u5bb9\u5668 ABC \u7684\u5225\u540d": [[386, "aliases-to-container-abcs-in-collections-abc"]], "Aliases to asynchronous ABCs in collections.abc": [[386, "aliases-to-asynchronous-abcs-in-collections-abc"]], "Aliases to other ABCs in collections.abc": [[386, "aliases-to-other-abcs-in-collections-abc"]], "contextlib ABC \u7684\u5225\u540d": [[386, "aliases-to-contextlib-abcs"]], "Deprecation Timeline of Major Features": [[386, "deprecation-timeline-of-major-features"]], "tkinter.scrolledtext --- Scrolled Text Widget": [[374, "module-tkinter.scrolledtext"]], "types --- Dynamic type creation and names for built-in types": [[385, "module-types"]], "Dynamic Type Creation": [[385, "dynamic-type-creation"]], "Standard Interpreter Types": [[385, "standard-interpreter-types"]], "Additional Utility Classes and Functions": [[385, "additional-utility-classes-and-functions"]], "Coroutine Utility Functions": [[385, "coroutine-utility-functions"]], "unicodedata --- Unicode Database": [[387, "module-unicodedata"]], "urllib --- URL \u8655\u7406\u6a21\u7d44": [[392, "module-urllib"]], "trace --- Trace or track Python statement execution": [[380, "module-trace"]], "Main options": [[380, "main-options"]], "Modifiers": [[380, "modifiers"]], "Filters": [[380, "filters"]], "Programmatic Interface": [[380, "programmatic-interface"]], "tty --- \u7d42\u7aef\u6a5f\u63a7\u5236\u51fd\u5f0f": [[383, "module-tty"]], "MS Windows \u7279\u6709\u670d\u52d9": [[404, "ms-windows-specific-services"]], "Python 3.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[477, "what-s-new-in-python-3-4"], [478, "what-s-new-in-python-3-5"]], "Summary -- Release Highlights": [[477, "summary-release-highlights"], [480, "summary-release-highlights"]], "New Features": [[477, "new-features"], [478, "new-features"], [482, "new-features"], [482, "id1"], [481, "new-features"], [480, "new-features"], [479, "new-features"]], "PEP 453: Explicit Bootstrapping of PIP in Python Installations": [[477, "pep-453-explicit-bootstrapping-of-pip-in-python-installations"]], "Bootstrapping pip By Default": [[477, "bootstrapping-pip-by-default"], [469, "bootstrapping-pip-by-default"]], "Documentation Changes": [[477, "documentation-changes"], [469, "documentation-changes"]], "PEP 446: Newly Created File Descriptors Are Non-Inheritable": [[477, "pep-446-newly-created-file-descriptors-are-non-inheritable"]], "Improvements to Codec Handling": [[477, "improvements-to-codec-handling"]], "PEP 451: A ModuleSpec Type for the Import System": [[477, "pep-451-a-modulespec-type-for-the-import-system"]], "\u5176\u4ed6\u8a9e\u8a00\u66f4\u52d5": [[477, "other-language-changes"], [476, "other-language-changes"], [478, "other-language-changes"], [482, "other-language-changes"], [481, "other-language-changes"], [480, "other-language-changes"], [479, "other-language-changes"], [474, "other-language-changes"], [468, "other-language-changes"], [472, "other-language-changes"], [467, "other-language-changes"], [471, "other-language-changes"], [473, "other-language-changes"], [466, "other-language-changes"], [475, "other-language-changes"], [469, "other-language-changes"], [465, "other-language-changes"]], "\u65b0\u6a21\u7d44": [[477, "new-modules"], [476, "new-modules"], [482, "new-modules"], [480, "new-modules"], [479, "new-modules"], [472, "new-modules"]], "ensurepip": [[477, "ensurepip"], [474, "ensurepip"]], "enum": [[477, "enum"], [478, "enum"], [480, "enum"], [480, "id5"], [479, "enum"], [474, "enum"], [472, "enum"], [473, "enum"]], "pathlib": [[477, "pathlib"], [478, "pathlib"], [482, "pathlib"], [481, "pathlib"], [480, "pathlib"], [479, "pathlib"], [474, "pathlib"], [472, "pathlib"], [473, "pathlib"]], "selectors": [[477, "selectors"], [478, "selectors"]], "statistics": [[477, "statistics"], [481, "statistics"], [479, "statistics"], [474, "statistics"], [472, "statistics"]], "tracemalloc": [[477, "tracemalloc"], [482, "tracemalloc"], [480, "tracemalloc"], [479, "tracemalloc"]], "\u6539\u9032\u7684\u6a21\u7d44": [[477, "improved-modules"], [476, "improved-modules"], [478, "improved-modules"], [482, "improved-modules"], [481, "improved-modules"], [480, "improved-modules"], [479, "improved-modules"], [474, "improved-modules"], [472, "improved-modules"], [473, "improved-modules"]], "abc": [[477, "abc"], [476, "abc"], [475, "abc"]], "aifc": [[477, "aifc"], [480, "aifc"]], "argparse": [[477, "argparse"], [478, "argparse"], [480, "argparse"], [472, "argparse"]], "audioop": [[477, "audioop"]], "base64": [[477, "base64"], [476, "base64"], [472, "base64"]], "collections": [[477, "collections"], [476, "collections"], [478, "collections"], [481, "collections"], [480, "collections"], [480, "id3"], [479, "collections"], [475, "collections"]], "colorsys": [[477, "colorsys"]], "contextlib": [[477, "contextlib"], [476, "contextlib"], [478, "contextlib"], [480, "contextlib"], [479, "contextlib"], [472, "contextlib"], [473, "contextlib"], [475, "contextlib"]], "dbm": [[477, "dbm"], [478, "dbm"], [480, "dbm"], [480, "id4"], [479, "dbm"], [475, "dbm"]], "dis": [[477, "dis"], [480, "dis"], [474, "dis"], [475, "dis"]], "doctest": [[477, "doctest"], [478, "doctest"], [472, "doctest"], [466, "doctest"]], "email": [[477, "email"], [476, "email"], [478, "email"], [479, "email"], [475, "email"]], "filecmp": [[477, "filecmp"]], "functools": [[477, "functools"], [476, "functools"], [478, "functools"], [481, "functools"], [480, "functools"], [473, "functools"], [475, "functools"]], "gc": [[477, "gc"], [476, "gc"], [482, "gc"], [481, "gc"], [480, "gc"], [472, "gc"]], "glob": [[477, "glob"], [478, "glob"], [472, "glob"]], "hashlib": [[477, "hashlib"], [482, "hashlib"], [479, "hashlib"], [474, "hashlib"], [472, "hashlib"], [473, "hashlib"], [475, "hashlib"]], "hmac": [[477, "hmac"], [476, "hmac"], [480, "hmac"], [472, "hmac"]], "html": [[477, "html"], [476, "html"], [475, "html"]], "http": [[477, "http"], [476, "http"], [478, "http"], [482, "http"]], "idlelib \u8207 IDLE": [[477, "idlelib-and-idle"]], "inspect": [[477, "inspect"], [476, "inspect"], [478, "inspect"], [482, "inspect"], [481, "inspect"], [479, "inspect"], [474, "inspect"], [472, "inspect"], [473, "inspect"], [475, "inspect"]], "ipaddress": [[477, "ipaddress"], [476, "ipaddress"], [478, "ipaddress"], [482, "ipaddress"], [480, "ipaddress"]], "logging": [[477, "logging"], [476, "logging"], [478, "logging"], [481, "logging"], [480, "logging"], [479, "logging"], [473, "logging"], [475, "logging"]], "marshal": [[477, "marshal"]], "mmap": [[477, "mmap"], [476, "mmap"], [481, "mmap"]], "multiprocessing": [[477, "multiprocessing"], [476, "multiprocessing"], [478, "multiprocessing"], [482, "multiprocessing"], [481, "multiprocessing"], [480, "multiprocessing"], [479, "multiprocessing"]], "operator": [[477, "operator"], [478, "operator"], [473, "operator"]], "os": [[477, "os"], [476, "os"], [478, "os"], [482, "os"], [481, "os"], [480, "os"], [479, "os"], [479, "id4"], [474, "os"], [472, "os"], [473, "os"], [475, "os"]], "pdb": [[477, "pdb"], [476, "pdb"], [482, "pdb"], [480, "pdb"], [479, "pdb"], [474, "pdb"], [475, "pdb"]], "pickle": [[477, "pickle"], [476, "pickle"], [478, "pickle"], [481, "pickle"], [479, "pickle"]], "plistlib": [[477, "plistlib"], [481, "plistlib"]], "poplib": [[477, "poplib"], [478, "poplib"], [482, "poplib"], [475, "poplib"]], "pprint": [[477, "pprint"], [482, "pprint"], [481, "pprint"], [472, "pprint"]], "pty": [[477, "pty"]], "pydoc": [[477, "pydoc"], [476, "pydoc"], [482, "pydoc"], [480, "pydoc"], [479, "pydoc"], [475, "pydoc"]], "re": [[477, "re"], [476, "re"], [478, "re"], [480, "re"], [479, "re"], [479, "id5"], [473, "re"]], "resource": [[477, "resource"]], "select": [[477, "select"], [476, "select"], [475, "select"]], "shelve": [[477, "shelve"], [472, "shelve"]], "shutil": [[477, "shutil"], [476, "shutil"], [478, "shutil"], [481, "shutil"], [474, "shutil"], [473, "shutil"], [475, "shutil"]], "smtpd": [[477, "smtpd"], [476, "smtpd"], [478, "smtpd"], [474, "smtpd"]], "smtplib": [[477, "smtplib"], [476, "smtplib"], [478, "smtplib"], [482, "smtplib"]], "socket": [[477, "socket"], [476, "socket"], [478, "socket"], [482, "socket"], [481, "socket"], [480, "socket"], [480, "id8"], [479, "socket"], [472, "socket"], [473, "socket"], [475, "socket"]], "sqlite3": [[477, "sqlite3"], [476, "sqlite3"], [478, "sqlite3"], [480, "sqlite3"], [479, "sqlite3"], [474, "sqlite3"], [474, "id2"], [472, "sqlite3"], [473, "sqlite3"], [475, "sqlite3"]], "ssl": [[477, "ssl"], [476, "ssl"], [478, "ssl"], [481, "ssl"], [480, "ssl"], [480, "id9"], [479, "ssl"], [479, "id6"], [474, "ssl"], [472, "ssl"], [475, "ssl"]], "stat": [[477, "stat"], [476, "stat"]], "struct": [[477, "struct"], [476, "struct"], [479, "struct"]], "subprocess": [[477, "subprocess"], [476, "subprocess"], [478, "subprocess"], [480, "subprocess"], [479, "subprocess"]], "sunau": [[477, "sunau"], [480, "sunau"]], "sys": [[477, "sys"], [476, "sys"], [478, "sys"], [482, "sys"], [481, "sys"], [480, "sys"], [480, "id10"], [479, "sys"], [474, "sys"], [472, "sys"], [473, "sys"]], "tarfile": [[477, "tarfile"], [476, "tarfile"], [478, "tarfile"], [482, "tarfile"], [481, "tarfile"], [481, "id3"], [472, "tarfile"], [473, "tarfile"], [475, "tarfile"]], "textwrap": [[477, "textwrap"], [476, "textwrap"]], "threading": [[477, "threading"], [476, "threading"], [478, "threading"], [481, "threading"], [480, "threading"], [474, "threading"], [472, "threading"], [473, "threading"], [475, "threading"]], "traceback": [[477, "traceback"], [478, "traceback"], [479, "traceback"], [472, "traceback"], [473, "traceback"]], "types": [[477, "types"], [476, "types"], [478, "types"], [480, "types"], [474, "types"], [472, "types"]], "urllib": [[477, "urllib"], [476, "urllib"], [478, "urllib"]], "unittest": [[477, "unittest"], [476, "unittest"], [478, "unittest"], [481, "unittest"], [480, "unittest"], [474, "unittest"], [474, "id3"], [472, "unittest"], [473, "unittest"], [475, "unittest"]], "venv": [[477, "venv"], [482, "venv"], [481, "venv"], [479, "venv"], [479, "whatsnew36-venv"], [473, "venv"]], "wave": [[477, "wave"], [480, "wave"]], "weakref": [[477, "weakref"], [481, "weakref"]], "xml.etree": [[477, "xml-etree"], [480, "xml-etree"]], "zipfile": [[477, "zipfile"], [478, "zipfile"], [480, "zipfile"], [479, "zipfile"], [473, "zipfile"]], "CPython \u5be6\u4f5c\u8b8a\u66f4": [[477, "cpython-implementation-changes"]], "PEP 445: Customization of CPython Memory Allocators": [[477, "pep-445-customization-of-cpython-memory-allocators"]], "PEP 442: Safe Object Finalization": [[477, "pep-442-safe-object-finalization"]], "PEP 456: Secure and Interchangeable Hash Algorithm": [[477, "pep-456-secure-and-interchangeable-hash-algorithm"]], "PEP 436: Argument Clinic": [[477, "pep-436-argument-clinic"]], "Other Build and C API Changes": [[477, "other-build-and-c-api-changes"]], "Other Improvements": [[477, "other-improvements"], [479, "other-improvements"]], "\u986f\u8457\u6700\u4f73\u5316": [[477, "significant-optimizations"]], "\u5df2\u68c4\u7528": [[477, "deprecated"], [476, "deprecated"], [478, "deprecated"], [482, "deprecated"], [481, "deprecated"], [479, "deprecated"], [474, "deprecated"], [474, "id6"], [472, "deprecated"], [472, "id3"], [473, "deprecated"], [473, "whatsnew311-c-api-deprecated"]], "Deprecations in the Python API": [[477, "deprecations-in-the-python-api"]], "\u5df2\u68c4\u7528\u529f\u80fd": [[477, "deprecated-features"]], "\u5df2\u79fb\u9664": [[477, "removed"], [478, "removed"], [482, "removed"], [482, "id3"], [479, "removed"], [474, "removed"], [474, "id10"], [473, "removed"], [473, "whatsnew311-c-api-removed"]], "Operating Systems No Longer Supported": [[477, "operating-systems-no-longer-supported"]], "API \u8207\u529f\u80fd\u7684\u79fb\u9664": [[477, "api-and-feature-removals"]], "\u7a0b\u5f0f\u78bc\u7684\u6e05\u9664": [[477, "code-cleanups"]], "Porting to Python 3.4": [[477, "porting-to-python-3-4"]], "Changes in 'python' Command Behavior": [[477, "changes-in-python-command-behavior"], [479, "changes-in-python-command-behavior"]], "Python API \u7684\u8b8a\u66f4": [[477, "changes-in-the-python-api"]], "C API \u4e2d\u7684\u6539\u52d5": [[477, "changes-in-the-c-api"], [478, "changes-in-the-c-api"], [482, "changes-in-the-c-api"], [481, "changes-in-the-c-api"], [480, "changes-in-the-c-api"], [479, "changes-in-the-c-api"], [472, "changes-in-the-c-api"]], "3.4.3 \u4e2d\u7684\u8b8a\u66f4": [[477, "changed-in-3-4-3"]], "PEP 476: Enabling certificate verification by default for stdlib http clients": [[477, "pep-476-enabling-certificate-verification-by-default-for-stdlib-http-clients"], [469, "pep-476-enabling-certificate-verification-by-default-for-stdlib-http-clients"]], "Python 3.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[476, "what-s-new-in-python-3-3"]], "Summary -- Release highlights": [[476, "summary-release-highlights"], [478, "summary-release-highlights"], [482, "summary-release-highlights"], [481, "summary-release-highlights"], [479, "summary-release-highlights"]], "PEP 405\uff1a\u865b\u64ec\u74b0\u5883": [[476, "pep-405-virtual-environments"]], "PEP 420: Implicit Namespace Packages": [[476, "pep-420-implicit-namespace-packages"]], "PEP 3118: New memoryview implementation and buffer protocol documentation": [[476, "pep-3118-new-memoryview-implementation-and-buffer-protocol-documentation"]], "\u529f\u80fd": [[476, "features"], [476, "id1"]], "API \u8b8a\u66f4": [[476, "api-changes"], [476, "id2"]], "PEP 393: Flexible String Representation": [[476, "pep-393-flexible-string-representation"]], "\u529f\u80fd\u6027": [[476, "functionality"]], "\u6027\u80fd\u548c\u8cc7\u6e90\u4f7f\u7528\u60c5\u6cc1": [[476, "performance-and-resource-usage"]], "PEP 397\uff1a\u9069\u7528\u65bc Windows \u7684 Python \u555f\u52d5\u5668": [[476, "pep-397-python-launcher-for-windows"]], "PEP 3151: Reworking the OS and IO exception hierarchy": [[476, "pep-3151-reworking-the-os-and-io-exception-hierarchy"]], "PEP 380: Syntax for Delegating to a Subgenerator": [[476, "pep-380-syntax-for-delegating-to-a-subgenerator"]], "PEP 409: Suppressing exception context": [[476, "pep-409-suppressing-exception-context"]], "PEP 414: Explicit Unicode literals": [[476, "pep-414-explicit-unicode-literals"]], "PEP 3155: Qualified name for classes and functions": [[476, "pep-3155-qualified-name-for-classes-and-functions"]], "PEP 412: Key-Sharing Dictionary": [[476, "pep-412-key-sharing-dictionary"]], "PEP 362\uff1a\u51fd\u5f0f\u7c3d\u540d\u7269\u4ef6": [[476, "pep-362-function-signature-object"]], "PEP 421\uff1a\u65b0\u589e sys.implementation": [[476, "pep-421-adding-sys-implementation"]], "SimpleNamespace": [[476, "simplenamespace"]], "\u4f7f\u7528 importlib \u4f5c\u70ba import \u7684\u5be6\u4f5c": [[476, "using-importlib-as-the-implementation-of-import"]], "\u65b0 API": [[476, "new-apis"]], "\u660e\u986f\u7684\u8b8a\u66f4": [[476, "visible-changes"]], "A Finer-Grained Import Lock": [[476, "a-finer-grained-import-lock"]], "\u5167\u5efa\u51fd\u5f0f\u548c\u578b\u5225": [[476, "builtin-functions-and-types"]], "faulthandler": [[476, "faulthandler"], [478, "faulthandler"], [479, "faulthandler"], [472, "faulthandler"]], "lzma": [[476, "lzma"], [478, "lzma"]], "array": [[476, "array"], [479, "array"], [474, "array"], [472, "array"]], "binascii": [[476, "binascii"], [480, "binascii"], [479, "binascii"]], "bz2": [[476, "bz2"], [478, "bz2"]], "codecs": [[476, "codecs"], [472, "codecs"]], "crypt": [[476, "crypt"], [480, "crypt"]], "curses": [[476, "curses"], [478, "curses"], [482, "curses"], [481, "curses"], [472, "curses"]], "datetime": [[476, "datetime"], [482, "datetime"], [481, "datetime"], [480, "datetime"], [479, "datetime"], [473, "datetime"]], "decimal": [[476, "decimal"], [480, "decimal"], [479, "decimal"]], "Policy Framework": [[476, "policy-framework"]], "Provisional Policy with New Header API": [[476, "provisional-policy-with-new-header-api"]], "\u5176\u4ed6 API \u8b8a\u66f4": [[476, "other-api-changes"]], "ftplib": [[476, "ftplib"], [482, "ftplib"], [474, "ftplib"]], "imaplib": [[476, "imaplib"], [478, "imaplib"], [482, "imaplib"], [475, "imaplib"]], "io": [[476, "io"], [478, "io"], [481, "io"], [480, "io"], [474, "io"], [475, "io"]], "itertools": [[476, "itertools"], [481, "itertools"], [480, "itertools"], [474, "itertools"], [472, "itertools"], [475, "itertools"]], "math": [[476, "math"], [478, "math"], [482, "math"], [481, "math"], [480, "math"], [479, "math"], [474, "math"], [473, "math"], [475, "math"]], "nntplib": [[476, "nntplib"], [482, "nntplib"]], "sched": [[476, "sched"]], "shlex": [[476, "shlex"], [481, "shlex"], [479, "shlex"]], "signal": [[476, "signal"], [478, "signal"], [482, "signal"], [480, "signal"]], "socketserver": [[476, "socketserver"], [480, "socketserver"], [479, "socketserver"]], "tempfile": [[476, "tempfile"], [474, "tempfile"], [473, "tempfile"], [475, "tempfile"]], "time": [[476, "time"], [478, "time"], [482, "time"], [481, "time"], [480, "time"], [479, "time"], [473, "time"]], "webbrowser": [[476, "webbrowser"], [474, "webbrowser"]], "xml.etree.ElementTree": [[476, "xml-etree-elementtree"], [474, "xml-etree-elementtree"]], "\u6700\u4f73\u5316": [[476, "optimizations"], [478, "optimizations"], [482, "optimizations"], [481, "optimizations"], [480, "optimizations"], [479, "optimizations"], [474, "optimizations"], [468, "optimizations"], [472, "optimizations"], [467, "optimizations"], [471, "optimizations"], [473, "optimizations"], [466, "optimizations"], [475, "optimizations"], [469, "optimizations"], [465, "optimizations"]], "\u5efa\u7f6e\u548c C API \u66f4\u6539": [[476, "build-and-c-api-changes"]], "\u4e0d\u652f\u63f4\u7684\u4f5c\u696d\u7cfb\u7d71": [[476, "unsupported-operating-systems"]], "\u5df2\u68c4\u7528\u7684 Python \u6a21\u7d44\u3001\u51fd\u5f0f\u548c\u65b9\u6cd5": [[476, "deprecated-python-modules-functions-and-methods"]], "C API \u4e2d\u5df2\u68c4\u7528\u7684\u51fd\u5f0f\u548c\u578b\u5225": [[476, "deprecated-functions-and-types-of-the-c-api"]], "\u5df2\u68c4\u7528\u7684\u529f\u80fd": [[476, "deprecated-features"]], "\u79fb\u690d\u5230 Python 3.3": [[476, "porting-to-python-3-3"]], "\u79fb\u690d Python \u7a0b\u5f0f\u78bc": [[476, "porting-python-code"]], "Porting C code": [[476, "porting-c-code"]], "Building C extensions": [[476, "building-c-extensions"]], "\u547d\u4ee4\u5217\u958b\u95dc\u66f4\u6539": [[476, "command-line-switch-changes"]], "Changelog\uff08\u66f4\u52d5\u65e5\u8a8c\uff09": [[483, "changelog"]], "Python next": [[483, "python-next"]], "Security": [[483, "security"], [483, "id2"], [483, "id5"], [483, "id34"], [483, "id44"], [483, "id54"], [483, "id67"], [483, "id76"], [483, "id95"], [483, "id104"], [483, "id121"], [483, "id131"], [483, "id140"], [483, "id152"], [483, "id213"], [483, "id224"], [483, "id234"], [483, "id243"], [483, "id253"], [483, "id271"], [483, "id282"], [483, "id292"], [483, "id302"], [483, "id312"], [483, "id323"], [483, "id334"], [483, "id349"], [483, "id359"], [483, "id370"], [483, "id381"], [483, "id392"], [483, "id408"], [483, "id443"], [483, "id454"], [483, "id495"], [483, "id517"], [483, "id540"], [483, "id549"], [483, "id550"], [483, "id609"], [483, "id618"], [483, "id628"], [483, "id638"], [483, "id642"], [483, "id650"], [483, "id663"]], "Library": [[483, "library"], [483, "id3"], [483, "id7"], [483, "id15"], [483, "id24"], [483, "id30"], [483, "id36"], [483, "id46"], [483, "id56"], [483, "id63"], [483, "id69"], [483, "id78"], [483, "id88"], [483, "id97"], [483, "id107"], [483, "id113"], [483, "id123"], [483, "id133"], [483, "id142"], [483, "id154"], [483, "id163"], [483, "id172"], [483, "id180"], [483, "id189"], [483, "id197"], [483, "id205"], [483, "id215"], [483, "id226"], [483, "id236"], [483, "id245"], [483, "id255"], [483, "id264"], [483, "id273"], [483, "id284"], [483, "id294"], [483, "id304"], [483, "id314"], [483, "id325"], [483, "id336"], [483, "id344"], [483, "id351"], [483, "id361"], [483, "id372"], [483, "id383"], [483, "id394"], [483, "id403"], [483, "id410"], [483, "id419"], [483, "id422"], [483, "id428"], [483, "id435"], [483, "id445"], [483, "id456"], [483, "id465"], [483, "id473"], [483, "id480"], [483, "id490"], [483, "id497"], [483, "id506"], [483, "id519"], [483, "id529"], [483, "id538"], [483, "id542"], [483, "id552"], [483, "id563"], [483, "id575"], [483, "id580"], [483, "id585"], [483, "id590"], [483, "id596"], [483, "id604"], [483, "id611"], [483, "id620"], [483, "id630"], [483, "id640"], [483, "id641"], [483, "id644"], [483, "id652"], [483, "id665"], [483, "id675"], [483, "id683"], [483, "id686"], [483, "id688"], [483, "id690"], [483, "id695"], [483, "id698"], [483, "id703"], [483, "id705"], [483, "id711"], [483, "id717"], [483, "id722"], [483, "id727"]], "C API": [[483, "c-api"], [483, "id4"], [483, "id22"], [483, "id43"], [483, "id53"], [483, "id61"], [483, "id66"], [483, "id75"], [483, "id86"], [483, "id94"], [483, "id103"], [483, "id120"], [483, "id130"], [483, "id139"], [483, "id151"], [483, "id161"], [483, "id170"], [483, "id178"], [483, "id187"], [483, "id195"], [483, "id203"], [483, "id212"], [483, "id223"], [483, "id233"], [483, "id242"], [483, "id252"], [483, "id262"], [483, "id270"], [483, "id281"], [483, "id291"], [483, "id301"], [483, "id311"], [483, "id322"], [483, "id333"], [483, "id342"], [483, "id348"], [483, "id358"], [483, "id369"], [483, "id380"], [483, "id391"], [483, "id401"], [483, "id418"], [483, "id420"], [483, "id453"], [483, "id471"], [483, "id478"], [483, "id488"], [483, "id494"], [483, "id504"], [483, "id514"], [483, "id527"], [483, "id537"], [483, "id554"], [483, "id566"], [483, "id576"], [483, "id592"], [483, "id598"], [483, "id613"], [483, "id626"], [483, "id637"], [483, "id649"], [483, "id654"], [483, "id715"], [483, "id724"], [483, "id730"]], "Python 3.12.3 final": [[483, "python-3-12-3-final"]], "Core and Builtins": [[483, "core-and-builtins"], [483, "id6"], [483, "id14"], [483, "id23"], [483, "id29"], [483, "id35"], [483, "id45"], [483, "id55"], [483, "id62"], [483, "id68"], [483, "id77"], [483, "id87"], [483, "id96"], [483, "id106"], [483, "id112"], [483, "id122"], [483, "id132"], [483, "id141"], [483, "id153"], [483, "id162"], [483, "id171"], [483, "id179"], [483, "id188"], [483, "id196"], [483, "id204"], [483, "id214"], [483, "id225"], [483, "id235"], [483, "id244"], [483, "id254"], [483, "id263"], [483, "id272"], [483, "id283"], [483, "id293"], [483, "id303"], [483, "id313"], [483, "id324"], [483, "id335"], [483, "id343"], [483, "id350"], [483, "id360"], [483, "id371"], [483, "id382"], [483, "id393"], [483, "id402"], [483, "id409"], [483, "id421"], [483, "id427"], [483, "id434"], [483, "id444"], [483, "id455"], [483, "id464"], [483, "id472"], [483, "id479"], [483, "id489"], [483, "id496"], [483, "id505"], [483, "id518"], [483, "id528"], [483, "id541"], [483, "id551"], [483, "id560"], [483, "id562"], [483, "id570"], [483, "id574"], [483, "id579"], [483, "id584"], [483, "id589"], [483, "id595"], [483, "id603"], [483, "id610"], [483, "id619"], [483, "id629"], [483, "id639"], [483, "id643"], [483, "id651"], [483, "id660"], [483, "id664"], [483, "id672"], [483, "id674"], [483, "id685"], [483, "id687"], [483, "id689"], [483, "id694"], [483, "id697"], [483, "id702"], [483, "id704"], [483, "id710"], [483, "id716"], [483, "id721"], [483, "id726"]], "Documentation": [[483, "documentation"], [483, "id8"], [483, "id16"], [483, "id25"], [483, "id31"], [483, "id37"], [483, "id47"], [483, "id57"], [483, "id70"], [483, "id79"], [483, "id89"], [483, "id98"], [483, "id108"], [483, "id114"], [483, "id124"], [483, "id134"], [483, "id143"], [483, "id155"], [483, "id164"], [483, "id173"], [483, "id181"], [483, "id190"], [483, "id198"], [483, "id206"], [483, "id216"], [483, "id227"], [483, "id237"], [483, "id246"], [483, "id256"], [483, "id265"], [483, "id274"], [483, "id285"], [483, "id295"], [483, "id305"], [483, "id315"], [483, "id326"], [483, "id337"], [483, "id345"], [483, "id352"], [483, "id362"], [483, "id373"], [483, "id384"], [483, "id395"], [483, "id404"], [483, "id411"], [483, "id423"], [483, "id429"], [483, "id436"], [483, "id446"], [483, "id457"], [483, "id466"], [483, "id474"], [483, "id481"], [483, "id491"], [483, "id498"], [483, "id507"], [483, "id520"], [483, "id530"], [483, "id543"], [483, "id556"], [483, "id567"], [483, "id577"], [483, "id581"], [483, "id616"], [483, "id622"], [483, "id632"], [483, "id645"], [483, "id655"], [483, "id667"], [483, "id677"], [483, "id692"], [483, "id700"], [483, "id708"], [483, "id731"]], "Tests": [[483, "tests"], [483, "id9"], [483, "id17"], [483, "id32"], [483, "id38"], [483, "id48"], [483, "id58"], [483, "id64"], [483, "id80"], [483, "id90"], [483, "id99"], [483, "id109"], [483, "id115"], [483, "id125"], [483, "id135"], [483, "id144"], [483, "id156"], [483, "id165"], [483, "id174"], [483, "id182"], [483, "id191"], [483, "id199"], [483, "id207"], [483, "id217"], [483, "id228"], [483, "id238"], [483, "id247"], [483, "id257"], [483, "id266"], [483, "id275"], [483, "id286"], [483, "id296"], [483, "id306"], [483, "id316"], [483, "id327"], [483, "id338"], [483, "id353"], [483, "id363"], [483, "id374"], [483, "id385"], [483, "id396"], [483, "id405"], [483, "id412"], [483, "id430"], [483, "id437"], [483, "id447"], [483, "id458"], [483, "id467"], [483, "id475"], [483, "id482"], [483, "id499"], [483, "id508"], [483, "id515"], [483, "id521"], [483, "id531"], [483, "id544"], [483, "id558"], [483, "id568"], [483, "id582"], [483, "id588"], [483, "id594"], [483, "id599"], [483, "id606"], [483, "id617"], [483, "id623"], [483, "id633"], [483, "id646"], [483, "id656"], [483, "id661"], [483, "id668"], [483, "id678"], [483, "id693"], [483, "id699"], [483, "id707"], [483, "id713"], [483, "id719"], [483, "id732"]], "Build": [[483, "build"], [483, "id10"], [483, "id18"], [483, "id33"], [483, "id39"], [483, "id49"], [483, "id59"], [483, "id71"], [483, "id81"], [483, "id91"], [483, "id100"], [483, "id110"], [483, "id116"], [483, "id126"], [483, "id136"], [483, "id145"], [483, "id157"], [483, "id166"], [483, "id175"], [483, "id183"], [483, "id192"], [483, "id200"], [483, "id208"], [483, "id218"], [483, "id229"], [483, "id239"], [483, "id248"], [483, "id258"], [483, "id267"], [483, "id276"], [483, "id287"], [483, "id297"], [483, "id307"], [483, "id317"], [483, "id328"], [483, "id339"], [483, "id346"], [483, "id354"], [483, "id364"], [483, "id375"], [483, "id386"], [483, "id397"], [483, "id413"], [483, "id424"], [483, "id431"], [483, "id438"], [483, "id448"], [483, "id459"], [483, "id468"], [483, "id483"], [483, "id492"], [483, "id500"], [483, "id509"], [483, "id516"], [483, "id522"], [483, "id532"], [483, "id539"], [483, "id545"], [483, "id555"], [483, "id561"], [483, "id569"], [483, "id573"], [483, "id583"], [483, "id587"], [483, "id593"], [483, "id600"], [483, "id608"], [483, "id614"], [483, "id625"], [483, "id634"], [483, "id647"], [483, "id659"], [483, "id669"], [483, "id679"], [483, "id682"], [483, "id684"], [483, "id696"], [483, "id701"], [483, "id712"], [483, "id718"], [483, "id723"], [483, "id729"]], "IDLE": [[483, "idle"], [483, "id12"], [483, "id21"], [483, "id74"], [483, "id84"], [483, "id148"], [483, "id177"], [483, "id186"], [483, "id211"], [483, "id221"], [483, "id232"], [483, "id241"], [483, "id251"], [483, "id261"], [483, "id279"], [483, "id290"], [483, "id300"], [483, "id320"], [483, "id331"], [483, "id341"], [483, "id347"], [483, "id357"], [483, "id367"], [483, "id378"], [483, "id389"], [483, "id399"], [483, "id407"], [483, "id416"], [483, "id426"], [483, "id433"], [483, "id441"], [483, "id451"], [483, "id462"], [483, "id486"], [483, "id493"], [483, "id502"], [483, "id512"], [483, "id525"], [483, "id535"], [483, "id547"], [483, "id553"], [483, "id564"], [483, "id597"], [483, "id605"], [483, "id612"], [483, "id621"], [483, "id631"], [483, "id653"], [483, "id662"], [483, "id666"], [483, "id676"], [483, "id691"], [483, "id706"], [483, "id728"], [471, "idle"], [475, "idle"], [247, "idle"]], "Tools/Demos": [[483, "tools-demos"], [483, "id13"], [483, "id28"], [483, "id42"], [483, "id52"], [483, "id60"], [483, "id85"], [483, "id93"], [483, "id119"], [483, "id129"], [483, "id149"], [483, "id160"], [483, "id169"], [483, "id222"], [483, "id269"], [483, "id280"], [483, "id310"], [483, "id321"], [483, "id332"], [483, "id368"], [483, "id379"], [483, "id390"], [483, "id400"], [483, "id417"], [483, "id442"], [483, "id452"], [483, "id463"], [483, "id477"], [483, "id487"], [483, "id503"], [483, "id513"], [483, "id526"], [483, "id536"], [483, "id548"], [483, "id557"], [483, "id571"], [483, "id578"], [483, "id601"], [483, "id615"], [483, "id627"], [483, "id636"], [483, "id657"], [483, "id671"], [483, "id681"], [483, "id709"], [483, "id714"], [483, "id720"], [483, "id733"]], "Python 3.12.2 final": [[483, "python-3-12-2-final"]], "Python 3.12.1 final": [[483, "python-3-12-1-final"]], "Python 3.12.0 final": [[483, "python-3-12-0-final"]], "Python 3.12.0 release candidate 3": [[483, "python-3-12-0-release-candidate-3"]], "Python 3.12.0 release candidate 2": [[483, "python-3-12-0-release-candidate-2"]], "Python 3.12.0 release candidate 1": [[483, "python-3-12-0-release-candidate-1"]], "Python 3.12.0 beta 4": [[483, "python-3-12-0-beta-4"]], "Python 3.12.0 beta 3": [[483, "python-3-12-0-beta-3"]], "Python 3.12.0 beta 2": [[483, "python-3-12-0-beta-2"]], "Python 3.12.0 beta 1": [[483, "python-3-12-0-beta-1"]], "Python 3.12.0 alpha 7": [[483, "python-3-12-0-alpha-7"]], "Python 3.12.0 alpha 6": [[483, "python-3-12-0-alpha-6"]], "Python 3.12.0 alpha 5": [[483, "python-3-12-0-alpha-5"]], "Python 3.12.0 alpha 4": [[483, "python-3-12-0-alpha-4"]], "Python 3.12.0 alpha 3": [[483, "python-3-12-0-alpha-3"]], "Python 3.12.0 alpha 2": [[483, "python-3-12-0-alpha-2"]], "Python 3.12.0 alpha 1": [[483, "python-3-12-0-alpha-1"]], "Python 3.11.0 beta 1": [[483, "python-3-11-0-beta-1"]], "Python 3.11.0 alpha 7": [[483, "python-3-11-0-alpha-7"]], "Python 3.11.0 alpha 6": [[483, "python-3-11-0-alpha-6"]], "Python 3.11.0 alpha 5": [[483, "python-3-11-0-alpha-5"]], "Python 3.11.0 alpha 4": [[483, "python-3-11-0-alpha-4"]], "Python 3.11.0 alpha 3": [[483, "python-3-11-0-alpha-3"]], "Python 3.11.0 alpha 2": [[483, "python-3-11-0-alpha-2"]], "Python 3.11.0 alpha 1": [[483, "python-3-11-0-alpha-1"]], "Python 3.10.0 beta 1": [[483, "python-3-10-0-beta-1"]], "Python 3.10.0 alpha 7": [[483, "python-3-10-0-alpha-7"]], "Python 3.10.0 alpha 6": [[483, "python-3-10-0-alpha-6"]], "Python 3.10.0 alpha 5": [[483, "python-3-10-0-alpha-5"]], "Python 3.10.0 alpha 4": [[483, "python-3-10-0-alpha-4"]], "Python 3.10.0 alpha 3": [[483, "python-3-10-0-alpha-3"]], "Python 3.10.0 alpha 2": [[483, "python-3-10-0-alpha-2"]], "Python 3.10.0 alpha 1": [[483, "python-3-10-0-alpha-1"]], "Python 3.9.0 beta 1": [[483, "python-3-9-0-beta-1"]], "Python 3.9.0 alpha 6": [[483, "python-3-9-0-alpha-6"]], "Python 3.9.0 alpha 5": [[483, "python-3-9-0-alpha-5"]], "Python 3.9.0 alpha 4": [[483, "python-3-9-0-alpha-4"]], "Python 3.9.0 alpha 3": [[483, "python-3-9-0-alpha-3"]], "Python 3.9.0 alpha 2": [[483, "python-3-9-0-alpha-2"]], "Python 3.9.0 alpha 1": [[483, "python-3-9-0-alpha-1"]], "Python 3.8.0 beta 1": [[483, "python-3-8-0-beta-1"]], "Python 3.8.0 alpha 4": [[483, "python-3-8-0-alpha-4"]], "Python 3.8.0 alpha 3": [[483, "python-3-8-0-alpha-3"]], "Python 3.8.0 alpha 2": [[483, "python-3-8-0-alpha-2"]], "Python 3.8.0 alpha 1": [[483, "python-3-8-0-alpha-1"]], "Python 3.7.0 final": [[483, "python-3-7-0-final"]], "Python 3.7.0 release candidate 1": [[483, "python-3-7-0-release-candidate-1"]], "Python 3.7.0 beta 5": [[483, "python-3-7-0-beta-5"]], "Python 3.7.0 beta 4": [[483, "python-3-7-0-beta-4"]], "Python 3.7.0 beta 3": [[483, "python-3-7-0-beta-3"]], "Python 3.7.0 beta 2": [[483, "python-3-7-0-beta-2"]], "Python 3.7.0 beta 1": [[483, "python-3-7-0-beta-1"]], "Python 3.7.0 alpha 4": [[483, "python-3-7-0-alpha-4"]], "Python 3.7.0 alpha 3": [[483, "python-3-7-0-alpha-3"]], "Python 3.7.0 alpha 2": [[483, "python-3-7-0-alpha-2"]], "Python 3.7.0 alpha 1": [[483, "python-3-7-0-alpha-1"]], "Python 3.6.6 final": [[483, "python-3-6-6-final"]], "Python 3.6.6 release candidate 1": [[483, "python-3-6-6-release-candidate-1"]], "Python 3.6.5 final": [[483, "python-3-6-5-final"]], "Python 3.6.5 release candidate 1": [[483, "python-3-6-5-release-candidate-1"]], "Python 3.6.4 final": [[483, "python-3-6-4-final"]], "Python 3.6.4 release candidate 1": [[483, "python-3-6-4-release-candidate-1"]], "Python 3.6.3 final": [[483, "python-3-6-3-final"]], "Python 3.6.3 release candidate 1": [[483, "python-3-6-3-release-candidate-1"]], "Python 3.6.2 final": [[483, "python-3-6-2-final"]], "Python 3.6.2 release candidate 2": [[483, "python-3-6-2-release-candidate-2"]], "Python 3.6.2 release candidate 1": [[483, "python-3-6-2-release-candidate-1"]], "Python 3.6.1 final": [[483, "python-3-6-1-final"]], "Python 3.6.1 release candidate 1": [[483, "python-3-6-1-release-candidate-1"]], "Python 3.6.0 final": [[483, "python-3-6-0-final"]], "Python 3.6.0 release candidate 2": [[483, "python-3-6-0-release-candidate-2"]], "Python 3.6.0 release candidate 1": [[483, "python-3-6-0-release-candidate-1"]], "Python 3.6.0 beta 4": [[483, "python-3-6-0-beta-4"]], "Python 3.6.0 beta 3": [[483, "python-3-6-0-beta-3"]], "Python 3.6.0 beta 2": [[483, "python-3-6-0-beta-2"]], "Python 3.6.0 beta 1": [[483, "python-3-6-0-beta-1"]], "Python 3.6.0 alpha 4": [[483, "python-3-6-0-alpha-4"]], "Python 3.6.0 alpha 3": [[483, "python-3-6-0-alpha-3"]], "Python 3.6.0 alpha 2": [[483, "python-3-6-0-alpha-2"]], "Python 3.6.0 alpha 1": [[483, "python-3-6-0-alpha-1"]], "Python 3.5.5 final": [[483, "python-3-5-5-final"]], "Python 3.5.5 release candidate 1": [[483, "python-3-5-5-release-candidate-1"]], "Python 3.5.4 final": [[483, "python-3-5-4-final"]], "Python 3.5.4 release candidate 1": [[483, "python-3-5-4-release-candidate-1"]], "Python 3.5.3 final": [[483, "python-3-5-3-final"]], "Python 3.5.3 release candidate 1": [[483, "python-3-5-3-release-candidate-1"]], "Python 3.5.2 final": [[483, "python-3-5-2-final"]], "Python 3.5.2 release candidate 1": [[483, "python-3-5-2-release-candidate-1"]], "Python 3.5.1 final": [[483, "python-3-5-1-final"]], "Python 3.5.1 release candidate 1": [[483, "python-3-5-1-release-candidate-1"]], "Python 3.5.0 final": [[483, "python-3-5-0-final"]], "Python 3.5.0 release candidate 4": [[483, "python-3-5-0-release-candidate-4"]], "Python 3.5.0 release candidate 3": [[483, "python-3-5-0-release-candidate-3"]], "Python 3.5.0 release candidate 2": [[483, "python-3-5-0-release-candidate-2"]], "Python 3.5.0 release candidate 1": [[483, "python-3-5-0-release-candidate-1"]], "Python 3.5.0 beta 4": [[483, "python-3-5-0-beta-4"]], "Python 3.5.0 beta 3": [[483, "python-3-5-0-beta-3"]], "Python 3.5.0 beta 2": [[483, "python-3-5-0-beta-2"]], "Python 3.5.0 beta 1": [[483, "python-3-5-0-beta-1"]], "Python 3.5.0 alpha 4": [[483, "python-3-5-0-alpha-4"]], "Python 3.5.0 alpha 3": [[483, "python-3-5-0-alpha-3"]], "Python 3.5.0 alpha 2": [[483, "python-3-5-0-alpha-2"]], "Python 3.5.0 alpha 1": [[483, "python-3-5-0-alpha-1"]], "PEP 492 - Coroutines with async and await syntax": [[478, "pep-492-coroutines-with-async-and-await-syntax"]], "PEP 465 - A dedicated infix operator for matrix multiplication": [[478, "pep-465-a-dedicated-infix-operator-for-matrix-multiplication"]], "PEP 448 - Additional Unpacking Generalizations": [[478, "pep-448-additional-unpacking-generalizations"]], "PEP 461 - percent formatting support for bytes and bytearray": [[478, "pep-461-percent-formatting-support-for-bytes-and-bytearray"]], "PEP 484 - Type Hints": [[478, "pep-484-type-hints"]], "PEP 471 - os.scandir() function -- a better and faster directory iterator": [[478, "pep-471-os-scandir-function-a-better-and-faster-directory-iterator"]], "PEP 475: Retry system calls failing with EINTR": [[478, "pep-475-retry-system-calls-failing-with-eintr"]], "PEP 479: Change StopIteration handling inside generators": [[478, "pep-479-change-stopiteration-handling-inside-generators"]], "PEP 485: A function for testing approximate equality": [[478, "pep-485-a-function-for-testing-approximate-equality"]], "PEP 486: Make the Python Launcher aware of virtual environments": [[478, "pep-486-make-the-python-launcher-aware-of-virtual-environments"]], "PEP 488: Elimination of PYO files": [[478, "pep-488-elimination-of-pyo-files"]], "PEP 489: Multi-phase extension module initialization": [[478, "pep-489-multi-phase-extension-module-initialization"]], "\u65b0\u589e\u6a21\u7d44": [[478, "new-modules"], [481, "new-modules"], [474, "new-modules"], [473, "new-modules"], [462, "new-modules"]], "typing": [[478, "typing"], [482, "typing"], [482, "id4"], [481, "typing"], [479, "typing"], [474, "typing"], [472, "typing"], [473, "typing"]], "zipapp": [[478, "zipapp"], [480, "zipapp"]], "cgi": [[478, "cgi"]], "cmath": [[478, "cmath"], [479, "cmath"]], "code": [[478, "code"]], "collections.abc": [[478, "collections-abc"], [482, "collections-abc"], [472, "collections-abc"]], "compileall": [[478, "compileall"], [482, "compileall"], [480, "compileall"]], "concurrent.futures": [[478, "concurrent-futures"], [482, "concurrent-futures"], [480, "concurrent-futures"], [479, "concurrent-futures"]], "configparser": [[478, "configparser"], [474, "configparser"], [475, "configparser"]], "csv": [[478, "csv"], [481, "csv"], [474, "csv"], [475, "csv"]], "difflib": [[478, "difflib"]], "distutils": [[478, "distutils"], [482, "distutils"], [480, "distutils"], [479, "distutils"], [479, "id2"], [474, "distutils"], [472, "distutils"]], "gzip": [[478, "gzip"], [481, "gzip"], [474, "gzip"]], "heapq": [[478, "heapq"]], "http.client": [[478, "http-client"], [480, "http-client"], [479, "http-client"], [475, "http-client"]], "idlelib and IDLE": [[478, "idlelib-and-idle"], [480, "idlelib-and-idle"], [479, "idlelib-and-idle"]], "imghdr": [[478, "imghdr"]], "json": [[478, "json"], [479, "json"]], "linecache": [[478, "linecache"], [472, "linecache"]], "locale": [[478, "locale"], [480, "locale"], [480, "id7"], [474, "locale"], [473, "locale"]], "readline": [[478, "readline"], [479, "readline"]], "sndhdr": [[478, "sndhdr"]], "Memory BIO Support": [[478, "memory-bio-support"], [341, "memory-bio-support"]], "Application-Layer Protocol Negotiation Support": [[478, "application-layer-protocol-negotiation-support"]], "Other Changes": [[478, "other-changes"]], "sysconfig": [[478, "sysconfig"], [473, "sysconfig"], [475, "sysconfig"]], "timeit": [[478, "timeit"], [479, "timeit"]], "tkinter": [[478, "tkinter"], [481, "tkinter"], [480, "tkinter"], [479, "tkinter"], [479, "id7"], [474, "tkinter"], [473, "tkinter"]], "unicodedata": [[478, "unicodedata"], [482, "unicodedata"], [481, "unicodedata"], [480, "unicodedata"], [479, "unicodedata"], [474, "unicodedata"], [473, "unicodedata"]], "unittest.mock": [[478, "unittest-mock"], [480, "unittest-mock"], [479, "unittest-mock"]], "wsgiref": [[478, "wsgiref"]], "xmlrpc": [[478, "xmlrpc"], [481, "xmlrpc"]], "xml.sax": [[478, "xml-sax"]], "Other module-level changes": [[478, "other-module-level-changes"]], "Build and C API Changes": [[478, "build-and-c-api-changes"], [481, "build-and-c-api-changes"], [479, "build-and-c-api-changes"], [468, "build-and-c-api-changes"], [467, "build-and-c-api-changes"], [471, "build-and-c-api-changes"], [470, "build-and-c-api-changes"], [466, "build-and-c-api-changes"], [475, "build-and-c-api-changes"], [469, "build-and-c-api-changes"], [465, "build-and-c-api-changes"]], "New Keywords": [[478, "new-keywords"]], "Deprecated Python Behavior": [[478, "deprecated-python-behavior"], [480, "deprecated-python-behavior"]], "Unsupported Operating Systems": [[478, "unsupported-operating-systems"]], "Deprecated Python modules, functions and methods": [[478, "deprecated-python-modules-functions-and-methods"], [480, "deprecated-python-modules-functions-and-methods"], [479, "deprecated-python-modules-functions-and-methods"]], "API and Feature Removals": [[478, "api-and-feature-removals"], [481, "api-and-feature-removals"], [480, "api-and-feature-removals"], [479, "api-and-feature-removals"]], "Porting to Python 3.5": [[478, "porting-to-python-3-5"]], "Changes in Python behavior": [[478, "changes-in-python-behavior"], [481, "changes-in-python-behavior"]], "Changes in the Python API": [[478, "changes-in-the-python-api"], [482, "changes-in-the-python-api"], [481, "changes-in-the-python-api"], [481, "id2"], [480, "changes-in-the-python-api"], [479, "changes-in-the-python-api"], [474, "changes-in-the-python-api"]], "Python 3.5.4 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[478, "notable-changes-in-python-3-5-4"]], "New make regen-all build target": [[478, "new-make-regen-all-build-target"], [479, "new-make-regen-all-build-target"], [469, "new-make-regen-all-build-target"]], "Removal of make touch build target": [[478, "removal-of-make-touch-build-target"], [479, "removal-of-make-touch-build-target"], [469, "removal-of-make-touch-build-target"]], "Python 3.9 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[482, "what-s-new-in-python-3-9"]], "You should check for DeprecationWarning in your code": [[482, "you-should-check-for-deprecationwarning-in-your-code"]], "Dictionary Merge & Update Operators": [[482, "dictionary-merge-update-operators"]], "New String Methods to Remove Prefixes and Suffixes": [[482, "new-string-methods-to-remove-prefixes-and-suffixes"]], "Type Hinting Generics in Standard Collections": [[482, "type-hinting-generics-in-standard-collections"]], "New Parser": [[482, "new-parser"]], "zoneinfo": [[482, "zoneinfo"]], "graphlib": [[482, "graphlib"]], "ast": [[482, "ast"], [481, "ast"], [479, "ast"], [475, "ast"]], "fcntl": [[482, "fcntl"], [473, "fcntl"]], "IDLE and idlelib": [[482, "idle-and-idlelib"], [481, "idle-and-idlelib"]], "random": [[482, "random"], [479, "random"], [474, "random"], [475, "random"]], "xml": [[482, "xml"], [481, "xml"], [480, "xml"], [479, "xml"], [472, "xml"]], "Porting to Python 3.9": [[482, "porting-to-python-3-9"], [482, "id2"]], "CPython bytecode changes": [[482, "cpython-bytecode-changes"], [481, "cpython-bytecode-changes"], [480, "cpython-bytecode-changes"], [479, "cpython-bytecode-changes"]], "Build Changes": [[482, "build-changes"], [480, "build-changes"], [474, "build-changes"]], "C API \u8b8a\u66f4": [[482, "c-api-changes"], [480, "c-api-changes"], [474, "c-api-changes"], [472, "c-api-changes"], [473, "c-api-changes"]], "Python 3.9.1 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[482, "notable-changes-in-python-3-9-1"]], "macOS 11.0 (Big Sur) and Apple Silicon Mac support": [[482, "macos-11-0-big-sur-and-apple-silicon-mac-support"], [481, "macos-11-0-big-sur-and-apple-silicon-mac-support"]], "Python 3.9.2 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[482, "notable-changes-in-python-3-9-2"]], "urllib.parse": [[482, "urllib-parse"], [482, "id5"], [481, "urllib-parse"], [480, "urllib-parse"], [472, "urllib-parse"], [475, "urllib-parse"]], "Python 3.9.3 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[482, "notable-changes-in-python-3-9-3"]], "Python 3.9.5 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[482, "notable-changes-in-python-3-9-5"]], "Notable security feature in 3.9.14": [[482, "notable-security-feature-in-3-9-14"]], "Notable changes in 3.9.17": [[482, "notable-changes-in-3-9-17"]], "Python 3.8 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[481, "what-s-new-in-python-3-8"]], "Positional-only parameters": [[481, "positional-only-parameters"]], "Parallel filesystem cache for compiled bytecode files": [[481, "parallel-filesystem-cache-for-compiled-bytecode-files"]], "Debug build uses the same ABI as release build": [[481, "debug-build-uses-the-same-abi-as-release-build"]], "f-strings support = for self-documenting expressions and debugging": [[481, "f-strings-support-for-self-documenting-expressions-and-debugging"]], "PEP 578: Python Runtime Audit Hooks": [[481, "pep-578-python-runtime-audit-hooks"]], "PEP 587: Python Initialization Configuration": [[481, "pep-587-python-initialization-configuration"]], "PEP 590: Vectorcall: a fast calling protocol for CPython": [[481, "pep-590-vectorcall-a-fast-calling-protocol-for-cpython"]], "Pickle protocol 5 with out-of-band data buffers": [[481, "pickle-protocol-5-with-out-of-band-data-buffers"]], "builtins\uff08\u5167\u5efa\uff09": [[481, "builtins"]], "cProfile": [[481, "cprofile"], [480, "cprofile"]], "ctypes": [[481, "ctypes"], [475, "ctypes"]], "gettext": [[481, "gettext"], [480, "gettext"]], "json.tool": [[481, "json-tool"]], "os.path": [[481, "os-path"], [474, "os-path"], [472, "os-path"]], "py_compile": [[481, "py-compile"], [480, "py-compile"], [472, "py-compile"]], "tokenize": [[481, "tokenize"], [474, "tokenize"]], "Porting to Python 3.8": [[481, "porting-to-python-3-8"]], "Demos and Tools": [[481, "demos-and-tools"], [474, "demos-and-tools"]], "Python 3.8.1 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[481, "notable-changes-in-python-3-8-1"]], "Python 3.8.2 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[481, "notable-changes-in-python-3-8-2"]], "Python 3.8.3 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[481, "notable-changes-in-python-3-8-3"]], "Python 3.8.8 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[481, "notable-changes-in-python-3-8-8"]], "Python 3.8.9 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[481, "notable-changes-in-python-3-8-9"]], "Python 3.8.10 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[481, "notable-changes-in-python-3-8-10"], [481, "id1"]], "Python 3.8.12 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[481, "notable-changes-in-python-3-8-12"]], "Notable security feature in 3.8.14": [[481, "notable-security-feature-in-3-8-14"]], "Notable changes in 3.8.17": [[481, "notable-changes-in-3-8-17"]], "Python \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\uff1f": [[484, "what-s-new-in-python"]], "Python 3.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[480, "what-s-new-in-python-3-7"]], "PEP 563: Postponed Evaluation of Annotations": [[480, "pep-563-postponed-evaluation-of-annotations"]], "PEP 538: Legacy C Locale Coercion": [[480, "pep-538-legacy-c-locale-coercion"]], "PEP 540: Forced UTF-8 Runtime Mode": [[480, "pep-540-forced-utf-8-runtime-mode"]], "PEP 553: Built-in breakpoint()": [[480, "pep-553-built-in-breakpoint"]], "PEP 539: New C API for Thread-Local Storage": [[480, "pep-539-new-c-api-for-thread-local-storage"]], "PEP 562: Customization of Access to Module Attributes": [[480, "pep-562-customization-of-access-to-module-attributes"]], "PEP 564: New Time Functions With Nanosecond Resolution": [[480, "pep-564-new-time-functions-with-nanosecond-resolution"]], "PEP 565: Show DeprecationWarning in __main__": [[480, "pep-565-show-deprecationwarning-in-main"]], "PEP 560: Core Support for typing module and Generic Types": [[480, "pep-560-core-support-for-typing-module-and-generic-types"]], "PEP 552: Hash-based .pyc Files": [[480, "pep-552-hash-based-pyc-files"]], "PEP 545\uff1aPython \u6587\u4ef6\u7ffb\u8b6f": [[480, "pep-545-python-documentation-translations"]], "Python Development Mode (-X dev)": [[480, "python-development-mode-x-dev"]], "contextvars": [[480, "contextvars"]], "dataclasses": [[480, "dataclasses"], [472, "dataclasses"], [473, "dataclasses"]], "importlib.resources": [[480, "importlib-resources"], [474, "importlib-resources"]], "calendar": [[480, "calendar"], [474, "calendar"]], "http.server": [[480, "http-server"]], "mimetypes": [[480, "mimetypes"]], "msilib": [[480, "msilib"]], "queue": [[480, "queue"]], "string": [[480, "string"], [473, "string"]], "uu": [[480, "uu"]], "uuid": [[480, "uuid"], [474, "uuid"]], "warnings": [[480, "warnings"], [479, "warnings"], [473, "warnings"]], "xmlrpc.server": [[480, "xmlrpc-server"]], "Other CPython Implementation Changes": [[480, "other-cpython-implementation-changes"]], "macpath": [[480, "macpath"]], "Deprecated functions and types of the C API": [[480, "deprecated-functions-and-types-of-the-c-api"], [479, "deprecated-functions-and-types-of-the-c-api"]], "Platform Support Removals": [[480, "platform-support-removals"]], "Module Removals": [[480, "module-removals"]], "Windows-only Changes": [[480, "windows-only-changes"], [480, "id12"]], "Porting to Python 3.7": [[480, "porting-to-python-3-7"]], "Changes in Python Behavior": [[480, "changes-in-python-behavior"]], "Other CPython implementation changes": [[480, "id13"]], "Python 3.7.1 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[480, "notable-changes-in-python-3-7-1"]], "Python 3.7.2 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[480, "notable-changes-in-python-3-7-2"]], "Python 3.7.6 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[480, "notable-changes-in-python-3-7-6"]], "Python 3.7.10 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[480, "notable-changes-in-python-3-7-10"]], "Python 3.7.11 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[480, "notable-changes-in-python-3-7-11"]], "Notable security feature in 3.7.14": [[480, "notable-security-feature-in-3-7-14"]], "Python 3.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[479, "what-s-new-in-python-3-6"]], "PEP 498: Formatted string literals": [[479, "pep-498-formatted-string-literals"]], "PEP 526: Syntax for variable annotations": [[479, "pep-526-syntax-for-variable-annotations"]], "PEP 515: Underscores in Numeric Literals": [[479, "pep-515-underscores-in-numeric-literals"]], "PEP 525: Asynchronous Generators": [[479, "pep-525-asynchronous-generators"]], "PEP 530: Asynchronous Comprehensions": [[479, "pep-530-asynchronous-comprehensions"]], "PEP 487: Simpler customization of class creation": [[479, "pep-487-simpler-customization-of-class-creation"]], "PEP 487: Descriptor Protocol Enhancements": [[479, "pep-487-descriptor-protocol-enhancements"]], "PEP 519: Adding a file system path protocol": [[479, "pep-519-adding-a-file-system-path-protocol"]], "PEP 495: Local Time Disambiguation": [[479, "pep-495-local-time-disambiguation"]], "PEP 529: Change Windows filesystem encoding to UTF-8": [[479, "pep-529-change-windows-filesystem-encoding-to-utf-8"]], "PEP 528: Change Windows console encoding to UTF-8": [[479, "pep-528-change-windows-console-encoding-to-utf-8"]], "PEP 520: Preserving Class Attribute Definition Order": [[479, "pep-520-preserving-class-attribute-definition-order"]], "PEP 468: Preserving Keyword Argument Order": [[479, "pep-468-preserving-keyword-argument-order"]], "New dict implementation": [[479, "new-dict-implementation"]], "PEP 523: Adding a frame evaluation API to CPython": [[479, "pep-523-adding-a-frame-evaluation-api-to-cpython"]], "PYTHONMALLOC environment variable": [[479, "pythonmalloc-environment-variable"]], "DTrace and SystemTap probing support": [[479, "dtrace-and-systemtap-probing-support"]], "secrets": [[479, "secrets"]], "encodings": [[479, "encodings"], [472, "encodings"]], "fileinput": [[479, "fileinput"], [472, "fileinput"]], "pickletools": [[479, "pickletools"]], "rlcompleter": [[479, "rlcompleter"]], "site": [[479, "site"], [472, "site"], [475, "site"]], "telnetlib": [[479, "telnetlib"]], "urllib.request": [[479, "urllib-request"]], "urllib.robotparser": [[479, "urllib-robotparser"]], "winreg": [[479, "winreg"]], "winsound": [[479, "winsound"]], "xmlrpc.client": [[479, "xmlrpc-client"]], "\u65b0\u95dc\u9375\u5b57": [[479, "new-keywords"]], "Deprecated Python behavior": [[479, "deprecated-python-behavior"]], "asynchat": [[479, "asynchat"]], "asyncore": [[479, "asyncore"], [475, "asyncore"]], "grp": [[479, "grp"]], "Deprecated Build Options": [[479, "deprecated-build-options"]], "Porting to Python 3.6": [[479, "porting-to-python-3-6"]], "Python 3.6.2 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[479, "notable-changes-in-python-3-6-2"]], "Python 3.6.4 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[479, "notable-changes-in-python-3-6-4"]], "Python 3.6.5 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[479, "notable-changes-in-python-3-6-5"]], "Python 3.6.7 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[479, "notable-changes-in-python-3-6-7"]], "Python 3.6.10 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[479, "notable-changes-in-python-3-6-10"]], "Python 3.6.13 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[479, "notable-changes-in-python-3-6-13"]], "Python 3.6.14 \u4e2d\u986f\u8457\u7684\u8b8a\u66f4": [[479, "notable-changes-in-python-3-6-14"]], "\u6d6e\u9ede\u6578\u904b\u7b97\uff1a\u554f\u984c\u8207\u9650\u5236": [[444, "floating-point-arithmetic-issues-and-limitations"]], "\u8868\u793a\u6cd5\u8aa4\u5dee (Representation Error)": [[444, "representation-error"]], "Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd": [[451, "brief-tour-of-the-standard-library"]], "\u4f5c\u696d\u7cfb\u7d71\u4ecb\u9762": [[451, "operating-system-interface"]], "\u6a94\u6848\u4e4b\u842c\u7528\u5b57\u5143 (File Wildcards)": [[451, "file-wildcards"]], "\u547d\u4ee4\u5217\u5f15\u6578": [[451, "command-line-arguments"]], "\u932f\u8aa4\u8f38\u51fa\u91cd\u65b0\u5c0e\u5411\u8207\u7a0b\u5f0f\u7d42\u6b62": [[451, "error-output-redirection-and-program-termination"]], "\u5b57\u4e32\u6a23\u5f0f\u6bd4\u5c0d": [[451, "string-pattern-matching"]], "\u6578\u5b78\u76f8\u95dc": [[451, "mathematics"]], "\u7db2\u8def\u5b58\u53d6": [[451, "internet-access"]], "\u65e5\u671f\u8207\u6642\u9593": [[451, "dates-and-times"]], "\u8cc7\u6599\u58d3\u7e2e": [[451, "data-compression"]], "\u6548\u80fd\u91cf\u6e2c": [[451, "performance-measurement"]], "\u54c1\u8cea\u63a7\u7ba1": [[451, "quality-control"]], "\u6a19\u6e96\u6a21\u7d44\u5eab": [[451, "batteries-included"]], "\u4e92\u52d5\u5f0f\u8f38\u5165\u7de8\u8f2f\u548c\u6b77\u53f2\u8a18\u9304\u66ff\u63db": [[447, "interactive-input-editing-and-history-substitution"]], "Tab \u9375\u81ea\u52d5\u5b8c\u6210 (Tab Completion) \u548c\u6b77\u53f2\u8a18\u9304\u7de8\u8f2f (History Editing)": [[447, "tab-completion-and-history-editing"]], "\u4e92\u52d5\u5f0f\u76f4\u8b6f\u5668\u7684\u66ff\u4ee3\u65b9\u6848": [[447, "alternatives-to-the-interactive-interpreter"]], "Python 3.12 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[474, "what-s-new-in-python-3-12"]], "\u767c\u5e03\u91cd\u9ede\u6458\u8981": [[474, "summary-release-highlights"], [473, "summary-release-highlights"]], "\u65b0\u589e\u7279\u6027": [[474, "new-features"], [474, "id4"], [473, "new-features"], [473, "whatsnew311-c-api-new-features"]], "PEP 695: Type Parameter Syntax": [[474, "pep-695-type-parameter-syntax"]], "PEP 701: Syntactic formalization of f-strings": [[474, "pep-701-syntactic-formalization-of-f-strings"]], "PEP 684: A Per-Interpreter GIL": [[474, "pep-684-a-per-interpreter-gil"]], "PEP 669: Low impact monitoring for CPython": [[474, "pep-669-low-impact-monitoring-for-cpython"]], "PEP 688: Making the buffer protocol accessible in Python": [[474, "pep-688-making-the-buffer-protocol-accessible-in-python"]], "PEP 709: Comprehension inlining": [[474, "pep-709-comprehension-inlining"]], "Improved Error Messages": [[474, "improved-error-messages"]], "New Features Related to Type Hints": [[474, "new-features-related-to-type-hints"]], "PEP 692: Using TypedDict for more precise **kwargs typing": [[474, "pep-692-using-typeddict-for-more-precise-kwargs-typing"]], "PEP 698: Override Decorator for Static Typing": [[474, "pep-698-override-decorator-for-static-typing"]], "fractions": [[474, "fractions"], [473, "fractions"]], "CPython \u4f4d\u5143\u7d44\u78bc\u8b8a\u66f4": [[474, "cpython-bytecode-changes"]], "Python 3.13 \u4e2d\u5f85\u6c7a\u8b70\u7684\u79fb\u9664\u9805\u76ee": [[474, "pending-removal-in-python-3-13"]], "Python 3.14 \u4e2d\u5f85\u6c7a\u8b70\u7684\u79fb\u9664\u9805\u76ee": [[474, "pending-removal-in-python-3-14"], [474, "id7"]], "Python 3.15 \u4e2d\u5f85\u6c7a\u8b70\u7684\u79fb\u9664\u9805\u76ee": [[474, "pending-removal-in-python-3-15"], [474, "id8"]], "\u672a\u4f86\u7248\u672c\u4e2d\u5f85\u6c7a\u8b70\u7684\u79fb\u9664\u9805\u76ee": [[474, "pending-removal-in-future-versions"], [474, "id9"]], "asynchat \u548c asyncore": [[474, "asynchat-and-asyncore"]], "imp": [[474, "imp"]], "zipimport": [[474, "zipimport"], [472, "zipimport"]], "\u5176\u4ed6": [[474, "others"]], "Porting to Python 3.12": [[474, "porting-to-python-3-12"], [474, "id5"]], "Python 2.6 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[468, "what-s-new-in-python-2-6"]], "Python 3.0": [[468, "python-3-0"]], "Changes to the Development Process": [[468, "changes-to-the-development-process"]], "New Issue Tracker: Roundup": [[468, "new-issue-tracker-roundup"]], "New Documentation Format: reStructuredText Using Sphinx": [[468, "new-documentation-format-restructuredtext-using-sphinx"]], "PEP 343: The 'with' statement": [[468, "pep-343-the-with-statement"], [467, "pep-343-the-with-statement"]], "Writing Context Managers": [[468, "writing-context-managers"], [467, "writing-context-managers"]], "The contextlib module": [[468, "the-contextlib-module"], [467, "the-contextlib-module"]], "PEP 366: Explicit Relative Imports From a Main Module": [[468, "pep-366-explicit-relative-imports-from-a-main-module"]], "PEP 370: Per-user site-packages Directory": [[468, "pep-370-per-user-site-packages-directory"]], "PEP 371: The multiprocessing Package": [[468, "pep-371-the-multiprocessing-package"]], "PEP 3101: Advanced String Formatting": [[468, "pep-3101-advanced-string-formatting"]], "PEP 3105: print As a Function": [[468, "pep-3105-print-as-a-function"]], "PEP 3110: Exception-Handling Changes": [[468, "pep-3110-exception-handling-changes"]], "PEP 3112: Byte Literals": [[468, "pep-3112-byte-literals"]], "PEP 3116: New I/O Library": [[468, "pep-3116-new-i-o-library"]], "PEP 3118\uff1a\u4fee\u8a02\u7de9\u885d\u5354\u5b9a": [[468, "pep-3118-revised-buffer-protocol"]], "PEP 3119: Abstract Base Classes": [[468, "pep-3119-abstract-base-classes"]], "PEP 3127: Integer Literal Support and Syntax": [[468, "pep-3127-integer-literal-support-and-syntax"]], "PEP 3129: Class Decorators": [[468, "pep-3129-class-decorators"]], "PEP 3141: A Type Hierarchy for Numbers": [[468, "pep-3141-a-type-hierarchy-for-numbers"]], "The fractions Module": [[468, "the-fractions-module"]], "Interpreter Changes": [[468, "interpreter-changes"], [469, "interpreter-changes"]], "New and Improved Modules": [[468, "new-and-improved-modules"], [463, "new-and-improved-modules"], [464, "new-and-improved-modules"], [469, "new-and-improved-modules"]], "The ast module": [[468, "the-ast-module"]], "The future_builtins module": [[468, "the-future-builtins-module"]], "The json module: JavaScript Object Notation": [[468, "the-json-module-javascript-object-notation"]], "The plistlib module: A Property-List Parser": [[468, "the-plistlib-module-a-property-list-parser"]], "ctypes Enhancements": [[468, "ctypes-enhancements"]], "Improved SSL Support": [[468, "improved-ssl-support"]], "Deprecations and Removals": [[468, "deprecations-and-removals"]], "Port-Specific Changes: Windows": [[468, "port-specific-changes-windows"], [469, "port-specific-changes-windows"]], "Port-Specific Changes: Mac OS X": [[468, "port-specific-changes-mac-os-x"], [469, "port-specific-changes-mac-os-x"]], "Port-Specific Changes: IRIX": [[468, "port-specific-changes-irix"]], "Porting to Python 2.6": [[468, "porting-to-python-2-6"]], "Python 3.10 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[472, "what-s-new-in-python-3-10"]], "\u6458\u8981 -- \u767c\u5e03\u91cd\u9ede": [[472, "summary-release-highlights"]], "\u65b0\u529f\u80fd": [[472, "new-features"], [472, "id1"]], "\u5e36\u62ec\u865f\u7684\u60c5\u5883\u7ba1\u7406\u5668": [[472, "parenthesized-context-managers"]], "\u66f4\u597d\u7684\u932f\u8aa4\u8a0a\u606f": [[472, "better-error-messages"]], "SyntaxErrors": [[472, "syntaxerrors"]], "IndentationErrors": [[472, "indentationerrors"]], "AttributeErrors": [[472, "attributeerrors"]], "NameErrors": [[472, "nameerrors"]], "PEP 626\uff1a\u7528\u65bc\u9664\u932f\u548c\u5176\u4ed6\u5de5\u5177\u7684\u7cbe\u78ba\u5217\u865f": [[472, "pep-626-precise-line-numbers-for-debugging-and-other-tools"]], "PEP 634\uff1a\u7d50\u69cb\u6a21\u5f0f\u5339\u914d": [[472, "pep-634-structural-pattern-matching"]], "\u8a9e\u6cd5\u548c\u64cd\u4f5c": [[472, "syntax-and-operations"]], "\u5ba3\u544a\u5f0f\u65b9\u6cd5 (Declarative approach)": [[472, "declarative-approach"]], "\u7c21\u55ae\u6a21\u5f0f\uff1a\u8207\u5b57\u9762\u503c\u5339\u914d": [[472, "simple-pattern-match-to-a-literal"]], "\u6c92\u6709\u842c\u7528\u5b57\u5143 (wildcard) \u7684\u884c\u70ba": [[472, "behavior-without-the-wildcard"]], "\u5177\u6709\u5b57\u9762\u503c\u548c\u8b8a\u6578\u7684\u6a21\u5f0f": [[472, "patterns-with-a-literal-and-variable"]], "\u6a21\u5f0f\u548c\u985e\u5225": [[472, "patterns-and-classes"]], "\u5177\u6709\u4f4d\u7f6e\u53c3\u6578\u7684\u6a21\u5f0f": [[472, "patterns-with-positional-parameters"]], "\u5de2\u72c0\u6a21\u5f0f": [[472, "nested-patterns"]], "\u8907\u96dc\u6a21\u5f0f\u548c\u842c\u7528\u5b57\u5143": [[472, "complex-patterns-and-the-wildcard"]], "Guard": [[472, "guard"]], "\u5176\u4ed6\u4e3b\u8981\u529f\u80fd": [[472, "other-key-features"]], "\u53ef\u9078\u7684 EncodingWarning \u548c encoding=\"locale\" \u9078\u9805": [[472, "optional-encodingwarning-and-encoding-locale-option"]], "\u8207\u578b\u5225\u63d0\u793a\u76f8\u95dc\u7684\u65b0\u529f\u80fd": [[472, "new-features-related-to-type-hints"]], "PEP 604\uff1a\u65b0\u578b\u806f\u96c6\u904b\u7b97\u5b50": [[472, "pep-604-new-type-union-operator"]], "PEP 612\uff1a\u53c3\u6578\u898f\u7bc4\u8b8a\u6578": [[472, "pep-612-parameter-specification-variables"]], "PEP 613\uff1a\u578b\u5225\u5225\u540d (TypeAlias)": [[472, "pep-613-typealias"]], "PEP 647\uff1a\u4f7f\u7528\u8005\u5b9a\u7fa9\u7684\u578b\u5225\u9632\u8b77": [[472, "pep-647-user-defined-type-guards"]], "asynchat, asyncore, smtpd": [[472, "asynchat-asyncore-smtpd"]], "bdb": [[472, "bdb"]], "bisect": [[472, "bisect"]], "\u50c5\u9650\u95dc\u9375\u5b57\u6b04\u4f4d (Keyword-only fields)": [[472, "keyword-only-fields"]], "IDLE \u548c idlelib": [[472, "idle-and-idlelib"]], "importlib.metadata": [[472, "importlib-metadata"]], "platform": [[472, "platform"]], "pyclbr": [[472, "pyclbr"]], "_thread": [[472, "thread"]], "\u5df2\u522a\u9664": [[472, "removed"], [472, "id4"]], "\u79fb\u690d\u5230 Python 3.10": [[472, "porting-to-python-3-10"], [472, "id2"]], "Python \u8a9e\u6cd5\u7684\u8b8a\u5316": [[472, "changes-in-the-python-syntax"]], "Python API \u7684\u8b8a\u5316": [[472, "changes-in-the-python-api"]], "CPython \u4f4d\u5143\u7d44\u78bc\u66f4\u6539": [[472, "cpython-bytecode-changes"]], "\u5efa\u7f6e\u8b8a\u66f4": [[472, "build-changes"], [473, "build-changes"]], "PEP 652\uff1a\u7dad\u8b77\u7a69\u5b9a ABI": [[472, "pep-652-maintaining-the-stable-abi"]], "Notable security feature in 3.10.7": [[472, "notable-security-feature-in-3-10-7"]], "Notable security feature in 3.10.8": [[472, "notable-security-feature-in-3-10-8"]], "Notable changes in 3.10.12": [[472, "notable-changes-in-3-10-12"]], "Python \u6559\u5b78": [[445, "the-python-tutorial"]], "Python 2.5 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[467, "what-s-new-in-python-2-5"]], "PEP 308: Conditional Expressions": [[467, "pep-308-conditional-expressions"]], "PEP 309: Partial Function Application": [[467, "pep-309-partial-function-application"]], "PEP 314: Metadata for Python Software Packages v1.1": [[467, "pep-314-metadata-for-python-software-packages-v1-1"]], "PEP 328: Absolute and Relative Imports": [[467, "pep-328-absolute-and-relative-imports"]], "PEP 338: Executing Modules as Scripts": [[467, "pep-338-executing-modules-as-scripts"]], "PEP 341: Unified try/except/finally": [[467, "pep-341-unified-try-except-finally"]], "PEP 342: New Generator Features": [[467, "pep-342-new-generator-features"]], "PEP 352: Exceptions as New-Style Classes": [[467, "pep-352-exceptions-as-new-style-classes"]], "PEP 353: Using ssize_t as the index type": [[467, "pep-353-using-ssize-t-as-the-index-type"]], "PEP 357: The '__index__' method": [[467, "pep-357-the-index-method"]], "Interactive Interpreter Changes": [[467, "interactive-interpreter-changes"]], "New, Improved, and Removed Modules": [[467, "new-improved-and-removed-modules"]], "ctypes \u5957\u4ef6": [[467, "the-ctypes-package"]], "ElementTree \u5957\u4ef6": [[467, "the-elementtree-package"]], "hashlib \u5957\u4ef6": [[467, "the-hashlib-package"]], "sqlite3 \u5957\u4ef6": [[467, "the-sqlite3-package"]], "wsgiref \u5957\u4ef6": [[467, "the-wsgiref-package"]], "Port-Specific Changes": [[467, "port-specific-changes"], [466, "port-specific-changes"], [465, "port-specific-changes"]], "Porting to Python 2.5": [[467, "porting-to-python-2-5"]], "\u547d\u4ee4\u5217\u8207\u74b0\u5883": [[455, "command-line-and-environment"]], "\u547d\u4ee4\u5217": [[455, "command-line"]], "\u4ecb\u9762\u9078\u9805": [[455, "interface-options"]], "Generic options": [[455, "generic-options"]], "Miscellaneous options": [[455, "miscellaneous-options"]], "\u4f60\u4e0d\u8a72\u4f7f\u7528\u7684\u9078\u9805": [[455, "options-you-shouldn-t-use"]], "\u74b0\u5883\u8b8a\u6578": [[455, "environment-variables"]], "\u9664\u932f\u6a21\u5f0f\u8b8a\u6578": [[455, "debug-mode-variables"]], "Python 2.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[463, "what-s-new-in-python-2-1"]], "PEP 227: Nested Scopes": [[463, "pep-227-nested-scopes"], [464, "pep-227-nested-scopes"]], "PEP 236: __future__ Directives": [[463, "pep-236-future-directives"]], "PEP 207: Rich Comparisons": [[463, "pep-207-rich-comparisons"]], "PEP 230: Warning Framework": [[463, "pep-230-warning-framework"]], "PEP 229: New Build System": [[463, "pep-229-new-build-system"]], "PEP 205: Weak References": [[463, "pep-205-weak-references"]], "PEP 232: Function Attributes": [[463, "pep-232-function-attributes"]], "PEP 235: Importing Modules on Case-Insensitive Platforms": [[463, "pep-235-importing-modules-on-case-insensitive-platforms"]], "PEP 217: Interactive Display Hook": [[463, "pep-217-interactive-display-hook"]], "PEP 208: New Coercion Model": [[463, "pep-208-new-coercion-model"]], "PEP 241: Metadata in Python Packages": [[463, "pep-241-metadata-in-python-packages"]], "Other Changes and Fixes": [[463, "other-changes-and-fixes"], [469, "other-changes-and-fixes"], [465, "other-changes-and-fixes"]], "\u865b\u64ec\u74b0\u5883\u8207\u5957\u4ef6": [[453, "virtual-environments-and-packages"]], "\u7528 pip \u7ba1\u7406\u5957\u4ef6": [[453, "managing-packages-with-pip"]], "\u5728 Mac \u7cfb\u7d71\u4f7f\u7528 Python": [[459, "using-python-on-a-mac"]], "\u53d6\u5f97\u548c\u5b89\u88dd Python": [[459, "getting-and-installing-python"]], "\u5982\u4f55\u57f7\u884c Python \u8173\u672c": [[459, "how-to-run-a-python-script"]], "\u900f\u904e GUI \u57f7\u884c\u8173\u672c": [[459, "running-scripts-with-a-gui"]], "\u8a2d\u5b9a": [[459, "configuration"]], "\u6574\u5408\u5316\u958b\u767c\u5de5\u5177 (IDE)": [[459, "the-ide"]], "\u5b89\u88dd\u984d\u5916\u7684 Python \u5957\u4ef6": [[459, "installing-additional-python-packages"]], "\u958b\u767c GUI \u7a0b\u5f0f": [[459, "gui-programming"]], "\u767c\u884c Python \u61c9\u7528\u7a0b\u5f0f": [[459, "distributing-python-applications"]], "\u5176\u4ed6\u8cc7\u6e90": [[459, "other-resources"]], "Python 2.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[464, "what-s-new-in-python-2-2"]], "PEPs 252 and 253: Type and Class Changes": [[464, "peps-252-and-253-type-and-class-changes"]], "Old and New Classes": [[464, "old-and-new-classes"]], "Descriptors": [[464, "descriptors"]], "Multiple Inheritance: The Diamond Rule": [[464, "multiple-inheritance-the-diamond-rule"]], "Attribute Access": [[464, "attribute-access"]], "\u76f8\u95dc\u9023\u7d50": [[464, "related-links"]], "PEP 234\uff1a\u758a\u4ee3\u5668": [[464, "pep-234-iterators"]], "PEP 255: Simple Generators": [[464, "pep-255-simple-generators"], [465, "pep-255-simple-generators"]], "PEP 237: Unifying Long Integers and Integers": [[464, "pep-237-unifying-long-integers-and-integers"], [466, "pep-237-unifying-long-integers-and-integers"]], "PEP 238: Changing the Division Operator": [[464, "pep-238-changing-the-division-operator"]], "Unicode \u8b8a\u66f4": [[464, "unicode-changes"]], "\u76f4\u8b6f\u5668\u7684\u8b8a\u66f4\u8207\u4fee\u6b63": [[464, "interpreter-changes-and-fixes"]], "\u5176\u4ed6\u6539\u52d5\u8207\u4fee\u6b63": [[464, "other-changes-and-fixes"]], "\u932f\u8aa4\u548c\u4f8b\u5916": [[443, "errors-and-exceptions"]], "\u8a9e\u6cd5\u932f\u8aa4 (Syntax Error)": [[443, "syntax-errors"]], "\u4f8b\u5916 (Exception)": [[443, "exceptions"]], "\u8655\u7406\u4f8b\u5916": [[443, "handling-exceptions"]], "\u5f15\u767c\u4f8b\u5916": [[443, "raising-exceptions"]], "\u4f8b\u5916\u93c8\u63a5 (Exception Chaining)": [[443, "exception-chaining"]], "\u4f7f\u7528\u8005\u81ea\u5b9a\u7684\u4f8b\u5916": [[443, "user-defined-exceptions"]], "\u5b9a\u7fa9\u6e05\u7406\u52d5\u4f5c": [[443, "defining-clean-up-actions"]], "\u9810\u5b9a\u7fa9\u7684\u6e05\u7406\u52d5\u4f5c": [[443, "predefined-clean-up-actions"]], "\u5f15\u767c\u53ca\u8655\u7406\u591a\u500b\u7121\u95dc\u7684\u4f8b\u5916": [[443, "raising-and-handling-multiple-unrelated-exceptions"]], "\u7528\u8a3b\u89e3\u4f7f\u4f8b\u5916\u66f4\u8a73\u7d30": [[443, "enriching-exceptions-with-notes"]], "\u914d\u7f6e Python": [[456, "configure-python"]], "Build Requirements": [[456, "build-requirements"]], "\u7522\u751f\u7684\u6a94\u6848": [[456, "generated-files"]], "\u8a2d\u5b9a\u8173\u672c": [[456, "configure-script"]], "\u8a2d\u5b9a\u9078\u9805": [[456, "configure-options"]], "\u4e00\u822c\u9078\u9805": [[456, "general-options"]], "WebAssembly \u9078\u9805": [[456, "webassembly-options"]], "\u5b89\u88dd\u9078\u9805": [[456, "install-options"]], "Performance options": [[456, "performance-options"]], "Python Debug Build": [[456, "python-debug-build"]], "Debug options": [[456, "debug-options"]], "Linker options": [[456, "linker-options"]], "\u51fd\u5f0f\u5eab\u9078\u9805": [[456, "libraries-options"]], "Security Options": [[456, "security-options"]], "macOS \u9078\u9805": [[456, "macos-options"]], "Cross Compiling Options": [[456, "cross-compiling-options"]], "Python Build System": [[456, "python-build-system"]], "Main files of the build system": [[456, "main-files-of-the-build-system"]], "\u4e3b\u8981\u5efa\u7f6e\u6b65\u9a5f": [[456, "main-build-steps"]], "\u4e3b\u8981 Makefile \u76ee\u6a19": [[456, "main-makefile-targets"]], "C \u64f4\u5145\u6a21\u7d44": [[456, "c-extensions"]], "Compiler and linker flags": [[456, "compiler-and-linker-flags"]], "Preprocessor flags": [[456, "preprocessor-flags"]], "Linker flags": [[456, "linker-flags"]], "\u5728 Windows \u4e0a\u4f7f\u7528 Python": [[461, "using-python-on-windows"]], "The full installer": [[461, "the-full-installer"]], "\u5b89\u88dd\u6b65\u9a5f": [[461, "installation-steps"]], "Removing the MAX_PATH Limitation": [[461, "removing-the-max-path-limitation"]], "\u5b89\u88dd\u6392\u9664\u4f7f\u7528\u8005\u4ecb\u9762": [[461, "installing-without-ui"]], "\u7576\u5b89\u88dd\u6642\u4e0d\u4e0b\u8f09": [[461, "installing-without-downloading"]], "Modifying an install": [[461, "modifying-an-install"]], "The Microsoft Store package": [[461, "the-microsoft-store-package"]], "Known issues": [[461, "known-issues"]], "Redirection of local data, registry, and temporary paths": [[461, "redirection-of-local-data-registry-and-temporary-paths"]], "nuget.org \u5957\u4ef6": [[461, "the-nuget-org-packages"]], "The embeddable package": [[461, "the-embeddable-package"]], "Python Application": [[461, "python-application"]], "\u5d4c\u5165 Python": [[461, "embedding-python"]], "Alternative bundles": [[461, "alternative-bundles"]], "\u8a2d\u5b9a Python": [[461, "configuring-python"]], "Excursus: Setting environment variables": [[461, "excursus-setting-environment-variables"]], "Finding the Python executable": [[461, "finding-the-python-executable"]], "UTF-8 \u6a21\u5f0f": [[461, "utf-8-mode"]], "Python Launcher for Windows": [[461, "python-launcher-for-windows"]], "\u958b\u59cb": [[461, "getting-started"]], "From the command-line": [[461, "from-the-command-line"]], "\u865b\u64ec\u74b0\u5883\uff08Virtual environment\uff09": [[461, "virtual-environments"]], "From a script": [[461, "from-a-script"]], "\u5f9e\u6a94\u6848\u95dc\u806f": [[461, "from-file-associations"]], "Shebang Lines": [[461, "shebang-lines"]], "Arguments in shebang lines": [[461, "arguments-in-shebang-lines"]], "Customization": [[461, "customization"]], "Customization via INI files": [[461, "customization-via-ini-files"]], "Customizing default Python versions": [[461, "customizing-default-python-versions"]], "Diagnostics": [[461, "diagnostics"]], "Dry Run": [[461, "dry-run"]], "\u5b89\u88dd\u96a8\u9078": [[461, "install-on-demand"]], "Return codes": [[461, "return-codes"]], "Finding modules": [[461, "finding-modules"]], "Additional modules": [[461, "additional-modules"]], "PyWin32": [[461, "pywin32"]], "cx_Freeze": [[461, "cx-freeze"]], "\u7de8\u8b6f Python \u5728 Windows": [[461, "compiling-python-on-windows"]], "\u5176\u4ed6\u5e73\u53f0": [[461, "other-platforms"]], "Python 3.1 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[471, "what-s-new-in-python-3-1"]], "PEP 372: Ordered Dictionaries": [[471, "pep-372-ordered-dictionaries"]], "PEP 378: Format Specifier for Thousands Separator": [[471, "pep-378-format-specifier-for-thousands-separator"], [469, "pep-378-format-specifier-for-thousands-separator"]], "New, Improved, and Deprecated Modules": [[471, "new-improved-and-deprecated-modules"], [466, "new-improved-and-deprecated-modules"], [475, "new-improved-and-deprecated-modules"], [465, "new-improved-and-deprecated-modules"]], "Porting to Python 3.1": [[471, "porting-to-python-3-1"]], "\u7de8\u8f2f\u5668\u8207 IDE": [[457, "editors-and-ides"]], "Python 3.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[470, "what-s-new-in-python-3-0"]], "Common Stumbling Blocks": [[470, "common-stumbling-blocks"]], "Print Is A Function": [[470, "print-is-a-function"]], "Views And Iterators Instead Of Lists": [[470, "views-and-iterators-instead-of-lists"]], "Ordering Comparisons": [[470, "ordering-comparisons"]], "\u6574\u6578": [[470, "integers"]], "Text Vs. Data Instead Of Unicode Vs. 8-bit": [[470, "text-vs-data-instead-of-unicode-vs-8-bit"]], "\u8a9e\u6cd5\u8b8a\u66f4\u6982\u8981": [[470, "overview-of-syntax-changes"]], "New Syntax": [[470, "new-syntax"]], "\u8a9e\u6cd5\u8b8a\u66f4": [[470, "changed-syntax"]], "\u5df2\u88ab\u79fb\u9664\u7684\u8a9e\u6cd5": [[470, "removed-syntax"]], "Changes Already Present In Python 2.6": [[470, "changes-already-present-in-python-2-6"]], "\u51fd\u5f0f\u5eab\u8b8a\u66f4": [[470, "library-changes"]], "PEP 3101: A New Approach To String Formatting": [[470, "pep-3101-a-new-approach-to-string-formatting"]], "Changes To Exceptions": [[470, "changes-to-exceptions"]], "Miscellaneous Other Changes": [[470, "miscellaneous-other-changes"]], "Operators And Special Methods": [[470, "operators-and-special-methods"]], "Builtins": [[470, "builtins"]], "Porting To Python 3.0": [[470, "porting-to-python-3-0"]], "Python 3.11 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[473, "what-s-new-in-python-3-11"]], "PEP 657\uff1a\u56de\u6eaf (traceback) \u4e2d\u66f4\u7d30\u7dfb\u7684\u932f\u8aa4\u4f4d\u7f6e": [[473, "pep-657-fine-grained-error-locations-in-tracebacks"]], "PEP 654\uff1a\u4f8b\u5916\u7fa4\u7d44\u8207 except*": [[473, "pep-654-exception-groups-and-except"]], "PEP 678\uff1a\u904b\u7528\u4f8b\u5916\u8a3b\u89e3\u4f7f\u5176\u66f4\u52a0\u8a73\u76e1": [[473, "pep-678-exceptions-can-be-enriched-with-notes"]], "Windows py.exe \u555f\u52d5\u7a0b\u5f0f (launcher) \u7684\u6539\u9032": [[473, "windows-py-exe-launcher-improvements"]], "\u578b\u5225\u63d0\u793a\u76f8\u95dc\u7684\u65b0\u7279\u6027": [[473, "new-features-related-to-type-hints"]], "PEP 646\uff1a\u53ef\u8b8a\u53c3\u6578\u6cdb\u578b (variadic generics)": [[473, "pep-646-variadic-generics"]], "PEP 655\uff1a\u6a19\u8a18\u7368\u7acb TypedDict \u9805\u76ee\u70ba\u5fc5\u8981\u6216\u4e0d\u5fc5\u8981": [[473, "pep-655-marking-individual-typeddict-items-as-required-or-not-required"]], "PEP 673\uff1aSelf \u578b\u5225": [[473, "pep-673-self-type"]], "PEP 675\uff1a\u4efb\u610f\u7684\u6587\u672c\u5b57\u4e32\u578b\u5225 (Arbitrary literal string type)": [[473, "pep-675-arbitrary-literal-string-type"]], "PEP 681\uff1a\u8cc7\u6599\u985e\u5225\u8f49\u63db (Data class transforms)": [[473, "pep-681-data-class-transforms"]], "PEP 563 \u53ef\u80fd\u4e0d\u662f\u672a\u4f86": [[473, "pep-563-may-not-be-the-future"]], "\u5176\u4ed6 CPython \u5be6\u4f5c\u66f4\u52d5": [[473, "other-cpython-implementation-changes"]], "IDLE \u8207 idlelib": [[473, "whatsnew311-idle"]], "\u66f4\u5feb\u7684 CPython": [[473, "faster-cpython"]], "\u66f4\u5feb\u7684\u555f\u52d5": [[473, "faster-startup"]], "\u51cd\u7d50\u5f15\u5165 (Frozen imports) / \u975c\u614b\u7a0b\u5f0f\u78bc\u7269\u4ef6 (Static code objects)": [[473, "frozen-imports-static-code-objects"]], "\u66f4\u5feb\u7684\u904b\u884c\u7a0b\u5f0f": [[473, "faster-runtime"]], "\u6240\u9700\u8cc7\u6e90\u66f4\u5c11 (cheaper) \u4e14\u60f0\u6027\u7684 (lazy)) Python \u5e40 (frame)": [[473, "cheaper-lazy-python-frames"]], "\u884c\u5167 Python \u51fd\u5f0f\u547c\u53eb": [[473, "inlined-python-function-calls"]], "PEP 659\uff1a\u7279\u5316\u7684\u9069\u61c9\u6027\u76f4\u8b6f\u5668": [[473, "pep-659-specializing-adaptive-interpreter"]], "\u96dc\u9805": [[473, "misc"], [460, "miscellaneous"]], "FAQ": [[473, "faq"]], "\u6211\u8a72\u5982\u4f55\u5728\u7a0b\u5f0f\u78bc\u4e2d\u7372\u53d6\u9019\u4e9b\u52a0\u901f\uff1f": [[473, "how-should-i-write-my-code-to-utilize-these-speedups"]], "Python 3.11 \u6703\u4e0d\u6703\u4f7f\u7528\u66f4\u591a\u8a18\u61b6\u9ad4\uff1f": [[473, "will-cpython-3-11-use-more-memory"]], "\u6211\u5728\u6211\u7684\u7a0b\u5f0f\u7576\u4e2d\u6c92\u611f\u89ba\u5230\u4efb\u4f55\u52a0\u901f\uff0c\u70ba\u4ec0\u9ebc\uff1f": [[473, "i-don-t-see-any-speedups-in-my-workload-why"]], "\u6709\u7528\u5230 JIT \u7de8\u8b6f\u5668\u55ce\uff1f": [[473, "is-there-a-jit-compiler"]], "\u95dc\u65bc": [[473, "about"]], "CPython \u4f4d\u5143\u7d44\u78bc (bytecode) \u8b8a\u66f4": [[473, "cpython-bytecode-changes"]], "\u65b0\u589e opcode": [[473, "new-opcodes"]], "\u88ab\u53d6\u4ee3\u7684\u64cd\u4f5c\u78bc (opcode)": [[473, "replaced-opcodes"]], "\u6709\u66f4\u52d5/\u88ab\u79fb\u9664\u7684 opcode": [[473, "changed-removed-opcodes"]], "\u8a9e\u8a00/\u5167\u5efa": [[473, "language-builtins"]], "\u6a19\u6e96\u51fd\u5f0f\u5eab": [[473, "standard-library"]], "Python 3.12 \u4e2d\u5f85\u6c7a\u8b70\u7684\u79fb\u9664\u9805\u76ee": [[473, "pending-removal-in-python-3-12"], [473, "whatsnew311-c-api-pending-removal"]], "\u79fb\u690d\u81f3 Python 3.11": [[473, "porting-to-python-3-11"], [473, "whatsnew311-c-api-porting"]], "Notable changes in 3.11.4": [[473, "notable-changes-in-3-11-4"]], "Notable changes in 3.11.5": [[473, "notable-changes-in-3-11-5"]], "Python \u7684\u8a2d\u7f6e\u8207\u4f7f\u7528": [[458, "python-setup-and-usage"]], "Python 2.4 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[466, "what-s-new-in-python-2-4"]], "PEP 218: Built-In Set Objects": [[466, "pep-218-built-in-set-objects"]], "PEP 289: Generator Expressions": [[466, "pep-289-generator-expressions"]], "PEP 292: Simpler String Substitutions": [[466, "pep-292-simpler-string-substitutions"]], "PEP 318: Decorators for Functions and Methods": [[466, "pep-318-decorators-for-functions-and-methods"]], "PEP 322: Reverse Iteration": [[466, "pep-322-reverse-iteration"]], "PEP 324: New subprocess Module": [[466, "pep-324-new-subprocess-module"]], "PEP 327: Decimal Data Type": [[466, "pep-327-decimal-data-type"]], "Why is Decimal needed?": [[466, "why-is-decimal-needed"]], "Decimal \u578b\u5225": [[466, "the-decimal-type"]], "Context \u578b\u5225": [[466, "the-context-type"]], "PEP 328: Multi-line Imports": [[466, "pep-328-multi-line-imports"]], "PEP 331: Locale-Independent Float/String Conversions": [[466, "pep-331-locale-independent-float-string-conversions"]], "cookielib": [[466, "cookielib"]], "Porting to Python 2.4": [[466, "porting-to-python-2-4"]], "\u4f7f\u7528 Python \u76f4\u8b6f\u5668": [[448, "using-the-python-interpreter"]], "\u555f\u52d5\u76f4\u8b6f\u5668": [[448, "invoking-the-interpreter"]], "\u50b3\u905e\u5f15\u6578": [[448, "argument-passing"]], "\u76f4\u8b6f\u5668\u8207\u5b83\u7684\u74b0\u5883": [[448, "the-interpreter-and-its-environment"]], "\u539f\u59cb\u78bc\u7684\u5b57\u5143\u7de8\u78bc (encoding)": [[448, "source-code-encoding"]], "Python 3.2 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[475, "what-s-new-in-python-3-2"]], "PEP 384: Defining a Stable ABI": [[475, "pep-384-defining-a-stable-abi"]], "PEP 389: Argparse Command Line Parsing Module": [[475, "pep-389-argparse-command-line-parsing-module"]], "PEP 391:  Dictionary Based Configuration for Logging": [[475, "pep-391-dictionary-based-configuration-for-logging"]], "PEP 3148:  The concurrent.futures module": [[475, "pep-3148-the-concurrent-futures-module"]], "PEP 3147:  PYC Repository Directories": [[475, "pep-3147-pyc-repository-directories"]], "PEP 3149: ABI Version Tagged .so Files": [[475, "pep-3149-abi-version-tagged-so-files"]], "PEP 3333: Python Web Server Gateway Interface v1.0.1": [[475, "pep-3333-python-web-server-gateway-interface-v1-0-1"]], "elementtree": [[475, "elementtree"]], "datetime \u548c time": [[475, "datetime-and-time"]], "reprlib": [[475, "reprlib"]], "decimal and fractions": [[475, "decimal-and-fractions"]], "ftp": [[475, "ftp"]], "popen": [[475, "popen"]], "gzip \u548c zipfile": [[475, "gzip-and-zipfile"]], "nntp": [[475, "nntp"]], "certificates": [[475, "certificates"]], "mailbox": [[475, "mailbox"]], "turtledemo": [[475, "turtledemo"]], "Multi-threading": [[475, "multi-threading"], [258, "multi-threading"]], "Unicode": [[475, "unicode"], [462, "unicode"]], "Codecs": [[475, "codecs"]], "\u6587\u4ef6": [[475, "documentation"]], "Code Repository": [[475, "code-repository"]], "Porting to Python 3.2": [[475, "porting-to-python-3-2"]], "\u5728 Unix \u5e73\u81fa\u4e0a\u4f7f\u7528 Python": [[460, "using-python-on-unix-platforms"]], "\u7372\u5f97\u4e26\u5b89\u88dd Python \u7684\u6700\u65b0\u7248\u672c": [[460, "getting-and-installing-the-latest-version-of-python"]], "\u5728 Linux \u4e0a": [[460, "on-linux"]], "\u5728 FreeBSD \u548c OpenBSD \u4e0a": [[460, "on-freebsd-and-openbsd"]], "\u5efa\u7f6e Python": [[460, "building-python"]], "\u8207 Python \u76f8\u95dc\u7684\u8def\u5f91\u548c\u6a94\u6848": [[460, "python-related-paths-and-files"]], "\u5ba2\u88fd\u5316 OpenSSL": [[460, "custom-openssl"]], "\u8f38\u5165\u548c\u8f38\u51fa": [[446, "input-and-output"]], "\u66f4\u83ef\u9e97\u7684\u8f38\u51fa\u683c\u5f0f": [[446, "fancier-output-formatting"]], "\u683c\u5f0f\u5316\u7684\u5b57\u4e32\u6587\u672c (Formatted String Literals)": [[446, "formatted-string-literals"]], "\u5b57\u4e32\u7684 format() method": [[446, "the-string-format-method"]], "\u624b\u52d5\u683c\u5f0f\u5316\u5b57\u4e32": [[446, "manual-string-formatting"]], "\u683c\u5f0f\u5316\u5b57\u4e32\u7684\u820a\u65b9\u6cd5": [[446, "old-string-formatting"]], "\u8b80\u5beb\u6a94\u6848": [[446, "reading-and-writing-files"]], "\u6a94\u6848\u7269\u4ef6\u7684 method": [[446, "methods-of-file-objects"]], "\u4f7f\u7528 json \u5132\u5b58\u7d50\u69cb\u5316\u8cc7\u6599": [[446, "saving-structured-data-with-json"]], "Python 2.7 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[469, "what-s-new-in-python-2-7"]], "The Future for Python 2.x": [[469, "the-future-for-python-2-x"]], "Changes to the Handling of Deprecation Warnings": [[469, "changes-to-the-handling-of-deprecation-warnings"]], "Python 3.1 Features": [[469, "python-3-1-features"]], "PEP 372: Adding an Ordered Dictionary to collections": [[469, "pep-372-adding-an-ordered-dictionary-to-collections"]], "PEP 389: The argparse Module for Parsing Command Lines": [[469, "pep-389-the-argparse-module-for-parsing-command-lines"]], "PEP 391: Dictionary-Based Configuration For Logging": [[469, "pep-391-dictionary-based-configuration-for-logging"]], "PEP 3106: Dictionary Views": [[469, "pep-3106-dictionary-views"]], "PEP 3137: The memoryview Object": [[469, "pep-3137-the-memoryview-object"]], "New module: importlib": [[469, "new-module-importlib"]], "New module: sysconfig": [[469, "new-module-sysconfig"]], "ttk: Themed Widgets for Tk": [[469, "ttk-themed-widgets-for-tk"]], "Updated module: unittest": [[469, "updated-module-unittest"]], "Updated module: ElementTree 1.3": [[469, "updated-module-elementtree-1-3"]], "Port-Specific Changes: FreeBSD": [[469, "port-specific-changes-freebsd"]], "Porting to Python 2.7": [[469, "porting-to-python-2-7"]], "New Features Added to Python 2.7 Maintenance Releases": [[469, "new-features-added-to-python-2-7-maintenance-releases"]], "Two new environment variables for debug mode": [[469, "two-new-environment-variables-for-debug-mode"]], "PEP 434: IDLE Enhancement Exception for All Branches": [[469, "pep-434-idle-enhancement-exception-for-all-branches"]], "PEP 466: Network Security Enhancements for Python 2.7": [[469, "pep-466-network-security-enhancements-for-python-2-7"]], "PEP 477: Backport ensurepip (PEP 453) to Python 2.7": [[469, "pep-477-backport-ensurepip-pep-453-to-python-2-7"]], "PEP 493: HTTPS verification migration tools for Python 2.7": [[469, "pep-493-https-verification-migration-tools-for-python-2-7"]], "Python 2.0 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[462, "what-s-new-in-python-2-0"]], "What About Python 1.6?": [[462, "what-about-python-1-6"]], "New Development Process": [[462, "new-development-process"]], "\u4e32\u5217\u7d9c\u5408\u904b\u7b97\uff08List Comprehension\uff09": [[462, "list-comprehensions"]], "Augmented Assignment": [[462, "augmented-assignment"]], "String Methods": [[462, "string-methods"], [344, "string-methods"]], "Garbage Collection of Cycles": [[462, "garbage-collection-of-cycles"]], "Other Core Changes": [[462, "other-core-changes"]], "Minor Language Changes": [[462, "minor-language-changes"]], "Changes to Built-in Functions": [[462, "changes-to-built-in-functions"]], "Porting to 2.0": [[462, "porting-to-2-0"]], "Extending/Embedding Changes": [[462, "extending-embedding-changes"]], "Distutils: Making Modules Easy to Install": [[462, "distutils-making-modules-easy-to-install"]], "XML \u6a21\u7d44": [[462, "xml-modules"]], "SAX2 \u652f\u63f4": [[462, "sax2-support"]], "DOM \u652f\u63f4": [[462, "dom-support"]], "Relationship to PyXML": [[462, "relationship-to-pyxml"]], "\u6a21\u7d44\u8b8a\u66f4": [[462, "module-changes"]], "IDLE Improvements": [[462, "idle-improvements"]], "Deleted and Deprecated Modules": [[462, "deleted-and-deprecated-modules"]], "\u6a21\u7d44 (Module)": [[450, "modules"]], "\u6df1\u5165\u4e86\u89e3\u6a21\u7d44": [[450, "more-on-modules"]], "\u628a\u6a21\u7d44\u7576\u4f5c\u8173\u672c\u57f7\u884c": [[450, "executing-modules-as-scripts"]], "\u6a21\u7d44\u7684\u641c\u5c0b\u8def\u5f91": [[450, "the-module-search-path"]], "\u300c\u7de8\u8b6f\u300dPython \u6a94\u6848": [[450, "compiled-python-files"]], "\u6a19\u6e96\u6a21\u7d44": [[450, "standard-modules"]], "dir() \u51fd\u5f0f": [[450, "the-dir-function"]], "\u5957\u4ef6 (Package)": [[450, "packages"]], "\u5f9e\u5957\u4ef6\u4e2d import *": [[450, "importing-from-a-package"]], "\u5957\u4ef6\u5167\u5f15\u7528": [[450, "intra-package-references"]], "\u591a\u76ee\u9304\u4e2d\u7684\u5957\u4ef6": [[450, "packages-in-multiple-directories"]], "\u73fe\u5728\u53ef\u4ee5\u4f86\u5b78\u7fd2\u4e9b\u4ec0\u9ebc\uff1f": [[454, "what-now"]], "\u4e00\u500b\u975e\u6b63\u5f0f\u7684 Python \u7c21\u4ecb": [[449, "an-informal-introduction-to-python"]], "\u628a Python \u7576\u4f5c\u8a08\u7b97\u6a5f\u4f7f\u7528": [[449, "using-python-as-a-calculator"]], "\u6578\u5b57 (Number)": [[449, "numbers"]], "\u6587\u5b57": [[449, "text"]], "List\uff08\u4e32\u5217\uff09": [[449, "lists"], [344, "lists"]], "\u521d\u63a2\u7a0b\u5f0f\u8a2d\u8a08\u7684\u524d\u5e7e\u6b65": [[449, "first-steps-towards-programming"]], "Python \u6a19\u6e96\u51fd\u5f0f\u5eab\u6982\u89bd\u2014\u2014\u7b2c\u4e8c\u90e8\u4efd": [[452, "brief-tour-of-the-standard-library-part-ii"]], "\u8f38\u51fa\u683c\u5f0f\u5316 (Output Formatting)": [[452, "output-formatting"]], "\u6a21\u677f\u5316 (Templating)": [[452, "templating"]], "\u4e8c\u9032\u5236\u8cc7\u6599\u8a18\u9304\u7de8\u6392 (Binary Data Record Layouts)": [[452, "working-with-binary-data-record-layouts"]], "\u591a\u57f7\u884c\u7dd2 (Multi-threading)": [[452, "multi-threading"]], "\u65e5\u8a8c\u8a18\u9304 (Logging)": [[452, "logging"]], "\u5f31\u5f15\u7528 (Weak References)": [[452, "weak-references"]], "\u4f7f\u7528\u65bc List \u7684\u5de5\u5177": [[452, "tools-for-working-with-lists"]], "\u5341\u9032\u5236 (Decimal) \u6d6e\u9ede\u6578\u904b\u7b97": [[452, "decimal-floating-point-arithmetic"]], "Python 2.3 \u6709\u4ec0\u9ebc\u65b0\u529f\u80fd": [[465, "what-s-new-in-python-2-3"]], "PEP 218: A Standard Set Datatype": [[465, "pep-218-a-standard-set-datatype"]], "PEP 263: Source Code Encodings": [[465, "pep-263-source-code-encodings"]], "PEP 273: Importing Modules from ZIP Archives": [[465, "pep-273-importing-modules-from-zip-archives"]], "PEP 277: Unicode file name support for Windows NT": [[465, "pep-277-unicode-file-name-support-for-windows-nt"]], "PEP 278: Universal Newline Support": [[465, "pep-278-universal-newline-support"]], "PEP 279: enumerate()": [[465, "pep-279-enumerate"]], "PEP 282: The logging Package": [[465, "pep-282-the-logging-package"]], "PEP 285: A Boolean Type": [[465, "pep-285-a-boolean-type"]], "PEP 293: Codec Error Handling Callbacks": [[465, "pep-293-codec-error-handling-callbacks"]], "PEP 301: Package Index and Metadata for Distutils": [[465, "pep-301-package-index-and-metadata-for-distutils"]], "PEP 302: New Import Hooks": [[465, "pep-302-new-import-hooks"]], "PEP 305: Comma-separated Files": [[465, "pep-305-comma-separated-files"]], "PEP 307: Pickle Enhancements": [[465, "pep-307-pickle-enhancements"]], "Extended Slices": [[465, "extended-slices"]], "String Changes": [[465, "string-changes"]], "Date/Time Type": [[465, "date-time-type"]], "The optparse Module": [[465, "the-optparse-module"]], "Pymalloc: A Specialized Object Allocator": [[465, "pymalloc-a-specialized-object-allocator"]], "Porting to Python 2.3": [[465, "porting-to-python-2-3"]], "\u8cc7\u6599\u7d50\u69cb": [[442, "data-structures"]], "\u9032\u4e00\u6b65\u4e86\u89e3 List\uff08\u4e32\u5217\uff09": [[442, "more-on-lists"]], "\u5c07 List \u4f5c\u70ba Stack\uff08\u5806\u758a\uff09\u4f7f\u7528": [[442, "using-lists-as-stacks"]], "\u5c07 List \u4f5c\u70ba Queue\uff08\u4f47\u5217\uff09\u4f7f\u7528": [[442, "using-lists-as-queues"]], "List Comprehensions\uff08\u4e32\u5217\u7d9c\u5408\u904b\u7b97\uff09": [[442, "list-comprehensions"]], "\u5de2\u72c0\u7684 List Comprehensions": [[442, "nested-list-comprehensions"]], "del \u9673\u8ff0\u5f0f": [[442, "the-del-statement"]], "Tuples \u548c\u5e8f\u5217 (Sequences)": [[442, "tuples-and-sequences"]], "\u96c6\u5408 (Sets)": [[442, "sets"]], "\u5b57\u5178\uff08Dictionary\uff09": [[442, "dictionaries"]], "\u8ff4\u5708\u6280\u5de7": [[442, "looping-techniques"]], "\u6df1\u5165\u4e86\u89e3\u689d\u4ef6 (Condition)": [[442, "more-on-conditions"]], "\u5e8f\u5217\u548c\u5176\u4ed6\u8cc7\u6599\u985e\u578b\u4e4b\u6bd4\u8f03": [[442, "comparing-sequences-and-other-types"]], "Python Runtime Services": [[315, "python-runtime-services"]], "\u5b89\u5168\u6027\u6ce8\u610f\u4e8b\u9805": [[327, "security-considerations"]], "reprlib --- Alternate repr() implementation": [[321, "module-reprlib"]], "Repr \u7269\u4ef6": [[321, "repr-objects"]], "Subclassing Repr Objects": [[321, "subclassing-repr-objects"]], "runpy --- Locating and executing Python modules": [[324, "module-runpy"]], "quopri --- \u7de8\u78bc\u548c\u89e3\u78bc MIME \u53ef\u5217\u5370\u5b57\u5143\u8cc7\u6599": [[317, "module-quopri"]], "pydoc --- Documentation generator and online help system": [[313, "module-pydoc"]], "pprint --- Data pretty printer": [[307, "module-pprint"]], "Functions": [[307, "functions"], [319, "functions"]], "PrettyPrinter \u7269\u4ef6": [[307, "prettyprinter-objects"]], "queue --- \u540c\u6b65\u4f47\u5217 (queue) class\uff08\u985e\u5225\uff09": [[316, "module-queue"]], "\u4f47\u5217\u7269\u4ef6": [[316, "queue-objects"]], "SimpleQueue \u7269\u4ef6": [[316, "simplequeue-objects"]], "shelve --- Python object persistence": [[330, "module-shelve"]], "Restrictions": [[330, "restrictions"]], "spwd --- shadow \u5bc6\u78bc\u8cc7\u6599\u5eab": [[339, "module-spwd"]], "pty --- Pseudo-terminal utilities": [[309, "module-pty"]], "resource --- Resource usage information": [[322, "module-resource"]], "Resource Limits": [[322, "resource-limits"]], "Resource Usage": [[322, "resource-usage"]], "socketserver --- A framework for network servers": [[338, "module-socketserver"]], "Server Creation Notes": [[338, "server-creation-notes"]], "Request Handler Objects": [[338, "request-handler-objects"]], "socketserver.TCPServer \u7bc4\u4f8b": [[338, "socketserver-tcpserver-example"]], "socketserver.UDPServer \u7bc4\u4f8b": [[338, "socketserver-udpserver-example"]], "Asynchronous Mixins": [[338, "asynchronous-mixins"]], "re --- \u6b63\u898f\u8868\u793a\u5f0f (regular expression) \u64cd\u4f5c": [[319, "module-re"]], "\u6b63\u898f\u8868\u793a\u5f0f\u8a9e\u6cd5": [[319, "regular-expression-syntax"]], "Flags": [[319, "flags"]], "Regular Expression Objects": [[319, "regular-expression-objects"]], "Match Objects": [[319, "match-objects"]], "Regular Expression Examples": [[319, "regular-expression-examples"]], "Checking for a Pair": [[319, "checking-for-a-pair"]], "Simulating scanf()": [[319, "simulating-scanf"]], "search() vs. match()": [[319, "search-vs-match"]], "Making a Phonebook": [[319, "making-a-phonebook"]], "Text Munging": [[319, "text-munging"]], "Finding all Adverbs": [[319, "finding-all-adverbs"]], "Finding all Adverbs and their Positions": [[319, "finding-all-adverbs-and-their-positions"]], "Raw String Notation": [[319, "raw-string-notation"]], "Writing a Tokenizer": [[319, "writing-a-tokenizer"]], "signal --- Set handlers for asynchronous events": [[333, "module-signal"]], "General rules": [[333, "general-rules"]], "Execution of Python signal handlers": [[333, "execution-of-python-signal-handlers"]], "Signals and threads": [[333, "signals-and-threads"]], "Note on SIGPIPE": [[333, "note-on-sigpipe"]], "Note on Signal Handlers and Exceptions": [[333, "note-on-signal-handlers-and-exceptions"]], "sched --- Event scheduler": [[325, "module-sched"]], "Scheduler Objects": [[325, "scheduler-objects"]], "shlex --- Simple lexical analysis": [[331, "module-shlex"]], "shlex \u7269\u4ef6": [[331, "shlex-objects"]], "Parsing Rules": [[331, "parsing-rules"]], "Improved Compatibility with Shells": [[331, "improved-compatibility-with-shells"]], "xml.parsers.expat --- Fast XML parsing using Expat": [[314, "module-xml.parsers.expat"]], "ExpatError \u4f8b\u5916": [[314, "expaterror-exceptions"]], "Content Model Descriptions": [[314, "module-xml.parsers.expat.model"]], "Expat error constants": [[314, "module-xml.parsers.expat.errors"]], "shutil \u2014 \u9ad8\u968e\u6a94\u6848\u64cd\u4f5c": [[332, "module-shutil"]], "Directory and files operations": [[332, "directory-and-files-operations"]], "Platform-dependent efficient copy operations": [[332, "platform-dependent-efficient-copy-operations"]], "copytree example": [[332, "copytree-example"]], "rmtree \u7bc4\u4f8b": [[332, "rmtree-example"]], "Archiving operations": [[332, "archiving-operations"]], "Archiving example": [[332, "archiving-example"]], "Archiving example with base_dir": [[332, "archiving-example-with-base-dir"]], "Querying the size of the output terminal": [[332, "querying-the-size-of-the-output-terminal"]], "secrets --- \u7522\u751f\u7528\u65bc\u7ba1\u7406\u6a5f\u5bc6\u7684\u5b89\u5168\u4e82\u6578": [[326, "module-secrets"]], "\u4e82\u6578": [[326, "random-numbers"]], "\u7522\u751f\u6b0a\u6756\uff08token\uff09": [[326, "generating-tokens"]], "\u6b0a\u6756\u61c9\u7576\u4f7f\u7528\u591a\u5c11\u500b\u4f4d\u5143\u7d44\uff1f": [[326, "how-many-bytes-should-tokens-use"]], "\u5176\u4ed6\u51fd\u5f0f": [[326, "other-functions"], [337, "other-functions"], [355, "other-functions"]], "\u61c9\u7528\u6280\u5de7\u548c\u5178\u7bc4\u5be6\u52d9\uff08best practices\uff09": [[326, "recipes-and-best-practices"]], "py_compile \u2014 \u7de8\u8b6f Python \u4f86\u6e90\u6a94\u6848": [[311, "module-py_compile"]], "smtplib --- SMTP protocol client": [[335, "module-smtplib"]], "SMTP \u7269\u4ef6": [[335, "smtp-objects"]], "SMTP \u7bc4\u4f8b": [[335, "smtp-example"]], "readline --- GNU readline interface": [[320, "module-readline"]], "Init file": [[320, "init-file"]], "Line buffer": [[320, "line-buffer"]], "History file": [[320, "history-file"]], "History list": [[320, "history-list"]], "Startup hooks": [[320, "startup-hooks"]], "Completion": [[320, "completion"]], "posix --- \u6700\u5e38\u898b\u7684 POSIX \u7cfb\u7d71\u547c\u53eb": [[306, "module-posix"]], "\u5c0d\u5927\u6a94\u6848 (Large File) \u7684\u652f\u63f4": [[306, "large-file-support"]], "\u503c\u5f97\u6ce8\u610f\u7684\u6a21\u7d44\u5167\u5bb9": [[306, "notable-module-contents"]], "rlcompleter --- Completion function for GNU readline": [[323, "module-rlcompleter"]], "select --- Waiting for I/O completion": [[328, "module-select"]], "/dev/poll Polling Objects": [[328, "dev-poll-polling-objects"]], "Edge and Level Trigger Polling (epoll) Objects": [[328, "edge-and-level-trigger-polling-epoll-objects"]], "Polling Objects": [[328, "polling-objects"]], "Kqueue Objects": [[328, "kqueue-objects"]], "Kevent Objects": [[328, "kevent-objects"]], "selectors --- High-level I/O multiplexing": [[329, "module-selectors"]], "pyclbr --- Python module browser support": [[312, "module-pyclbr"]], "Class Objects": [[312, "class-objects"]], "socket --- Low-level networking interface": [[337, "module-socket"]], "Socket \u7cfb\u5217\u5bb6\u65cf": [[337, "socket-families"]], "\u5efa\u7acb sockets": [[337, "creating-sockets"]], "Socket \u7269\u4ef6": [[337, "socket-objects"]], "Notes on socket timeouts": [[337, "notes-on-socket-timeouts"]], "Timeouts and the connect method": [[337, "timeouts-and-the-connect-method"]], "Timeouts and the accept method": [[337, "timeouts-and-the-accept-method"]], "pwd --- \u5bc6\u78bc\u8cc7\u6599\u5eab": [[310, "module-pwd"]], "site --- Site-specific configuration hook": [[334, "module-site"]], "sitecustomize": [[334, "module-sitecustomize"]], "usercustomize": [[334, "module-usercustomize"]], "Readline configuration": [[334, "readline-configuration"]], "\u547d\u4ee4\u5217\u4ecb\u9762": [[334, "command-line-interface"], [367, "command-line-interface"], [340, "command-line-interface"], [255, "command-line-interface"], [262, "module-json.tool"], [234, "command-line-interface"], [210, "command-line-interface"]], "sndhdr --- \u5224\u5b9a\u8072\u97f3\u6a94\u6848\u7684\u578b\u5225": [[336, "module-sndhdr"]], "random --- \u751f\u6210\u507d\u96a8\u6a5f\u6578": [[318, "module-random"]], "\u7c3f\u8a18\u51fd\u5f0f (bookkeeping functions)": [[318, "bookkeeping-functions"]], "\u56de\u50b3\u4f4d\u5143\u7d44\u7684\u51fd\u5f0f": [[318, "functions-for-bytes"]], "\u56de\u50b3\u6574\u6578\u7684\u51fd\u5f0f": [[318, "functions-for-integers"]], "\u56de\u50b3\u5e8f\u5217\u7684\u51fd\u5f0f": [[318, "functions-for-sequences"]], "\u96e2\u6563\u5206\u5e03": [[318, "discrete-distributions"]], "\u5be6\u6578\u5206\u5e03": [[318, "real-valued-distributions"]], "\u66ff\u4ee3\u7522\u751f\u5668": [[318, "alternative-generator"]], "\u95dc\u65bc Reproducibility\uff08\u5fa9\u73fe\u6027\uff09\u7684\u6ce8\u610f\u4e8b\u9805": [[318, "notes-on-reproducibility"]], "\u4f7f\u7528\u65b9\u6848": [[318, "recipes"]], "The Python Profilers": [[308, "the-python-profilers"]], "Introduction to the profilers": [[308, "introduction-to-the-profilers"]], "Instant User's Manual": [[308, "instant-user-s-manual"]], "profile and cProfile Module Reference": [[308, "module-cProfile"]], "The Stats Class": [[308, "the-stats-class"]], "What Is Deterministic Profiling?": [[308, "what-is-deterministic-profiling"]], "\u9650\u5236": [[308, "limitations"]], "\u6821\u6b63": [[308, "calibration"]], "Using a custom timer": [[308, "using-a-custom-timer"]], "stringprep --- Internet String Preparation": [[346, "module-stringprep"]], "\u5df2\u88ab\u53d6\u4ee3\u7684\u6a21\u7d44": [[350, "superseded-modules"]], "timeit --- \u6e2c\u91cf\u5c0f\u91cf\u7a0b\u5f0f\u7247\u6bb5\u7684\u57f7\u884c\u6642\u9593": [[367, "module-timeit"]], "\u57fa\u790e\u7bc4\u4f8b": [[367, "basic-examples"], [236, "basic-examples"]], "Python \u4ecb\u9762": [[367, "python-interface"]], "sqlite3 --- SQLite \u8cc7\u6599\u5eab\u7684 DB-API 2.0 \u4ecb\u9762": [[340, "module-sqlite3"]], "Tutorial": [[340, "tutorial"], [292, "tutorial"]], "Module functions": [[340, "module-functions"]], "Module constants": [[340, "module-constants"]], "Connection \u7269\u4ef6": [[340, "connection-objects"]], "Cursor \u7269\u4ef6": [[340, "cursor-objects"]], "Row \u7269\u4ef6": [[340, "row-objects"]], "Blob \u7269\u4ef6": [[340, "blob-objects"]], "PrepareProtocol \u7269\u4ef6": [[340, "prepareprotocol-objects"]], "SQLite and Python types": [[340, "sqlite-and-python-types"]], "Default adapters and converters (deprecated)": [[340, "default-adapters-and-converters-deprecated"]], "How-to guides": [[340, "how-to-guides"]], "How to use placeholders to bind values in SQL queries": [[340, "how-to-use-placeholders-to-bind-values-in-sql-queries"]], "How to adapt custom Python types to SQLite values": [[340, "how-to-adapt-custom-python-types-to-sqlite-values"]], "How to write adaptable objects": [[340, "how-to-write-adaptable-objects"]], "How to register adapter callables": [[340, "how-to-register-adapter-callables"]], "How to convert SQLite values to custom Python types": [[340, "how-to-convert-sqlite-values-to-custom-python-types"]], "Adapter and converter recipes": [[340, "adapter-and-converter-recipes"]], "How to use connection shortcut methods": [[340, "how-to-use-connection-shortcut-methods"]], "How to use the connection context manager": [[340, "how-to-use-the-connection-context-manager"]], "How to work with SQLite URIs": [[340, "how-to-work-with-sqlite-uris"]], "How to create and use row factories": [[340, "how-to-create-and-use-row-factories"]], "How to handle non-UTF-8 text encodings": [[340, "how-to-handle-non-utf-8-text-encodings"]], "\u89e3\u91cb": [[340, "explanation"]], "Transaction control": [[340, "transaction-control"]], "Transaction control via the autocommit attribute": [[340, "transaction-control-via-the-autocommit-attribute"]], "Transaction control via the isolation_level attribute": [[340, "transaction-control-via-the-isolation-level-attribute"]], "\u6587\u672c\u8655\u7406 (Text Processing) \u670d\u52d9": [[363, "text-processing-services"]], "syslog --- Unix syslog library routines": [[356, "module-syslog"]], "test --- Python \u7684\u56de\u6b78\u6e2c\u8a66 (regression tests) \u5957\u4ef6": [[362, "module-test"]], "\u64b0\u5beb test \u5957\u4ef6\u7684\u55ae\u5143\u6e2c\u8a66": [[362, "writing-unit-tests-for-the-test-package"]], "\u4f7f\u7528\u547d\u4ee4\u5217\u4ecb\u9762\u57f7\u884c\u6e2c\u8a66": [[362, "module-test.regrtest"]], "test.support --- Python \u6e2c\u8a66\u5957\u4ef6\u7684\u5de5\u5177": [[362, "module-test.support"]], "test.support.socket_helper --- \u7528\u65bc socket \u6e2c\u8a66\u7684\u5de5\u5177": [[362, "module-test.support.socket_helper"]], "test.support.script_helper --- \u7528\u65bc Python \u57f7\u884c\u6e2c\u8a66\u7684\u5de5\u5177": [[362, "module-test.support.script_helper"]], "test.support.bytecode_helper --- \u7528\u65bc\u6e2c\u8a66\u4f4d\u5143\u7d44\u78bc\u80fd\u6b63\u78ba\u7522\u751f\u7684\u652f\u63f4\u5de5\u5177": [[362, "module-test.support.bytecode_helper"]], "test.support.threading_helper --- Utilities for threading tests": [[362, "module-test.support.threading_helper"]], "test.support.os_helper --- \u7528\u65bc os \u6e2c\u8a66\u7684\u5de5\u5177": [[362, "module-test.support.os_helper"]], "test.support.import_helper --- \u7528\u65bc import \u6e2c\u8a66\u7684\u5de5\u5177": [[362, "module-test.support.import_helper"]], "test.support.warnings_helper --- \u7528\u65bc warnings \u6e2c\u8a66\u7684\u5de5\u5177": [[362, "module-test.support.warnings_helper"]], "sys.monitoring --- Execution event monitoring": [[353, "module-sys.monitoring"]], "Tool identifiers": [[353, "tool-identifiers"]], "Registering and using tools": [[353, "registering-and-using-tools"]], "Events": [[353, "events"]], "Local events": [[353, "local-events"]], "Ancillary events": [[353, "ancillary-events"]], "Other events": [[353, "other-events"]], "The STOP_ITERATION event": [[353, "the-stop-iteration-event"]], "Turning events on and off": [[353, "turning-events-on-and-off"]], "Setting events globally": [[353, "setting-events-globally"]], "Per code object events": [[353, "per-code-object-events"]], "Disabling events": [[353, "disabling-events"]], "Registering callback functions": [[353, "registering-callback-functions"]], "Callback function arguments": [[353, "callback-function-arguments"]], "\u5167\u5efa\u578b\u5225": [[344, "built-in-types"]], "\u771f\u503c\u6aa2\u6e2c": [[344, "truth-value-testing"]], "Boolean\uff08\u5e03\u6797\uff09\u904b\u7b97 --- and, or, not": [[344, "boolean-operations-and-or-not"]], "\u6bd4\u8f03\u904b\u7b97": [[344, "comparisons"]], "Numeric Types --- int, float, complex": [[344, "numeric-types-int-float-complex"]], "Bitwise Operations on Integer Types": [[344, "bitwise-operations-on-integer-types"]], "Additional Methods on Integer Types": [[344, "additional-methods-on-integer-types"]], "Additional Methods on Float": [[344, "additional-methods-on-float"]], "Hashing of numeric types": [[344, "hashing-of-numeric-types"]], "Boolean Type - bool": [[344, "boolean-type-bool"]], "Iterator Types": [[344, "iterator-types"]], "Generator Types": [[344, "generator-types"]], "Sequence Types --- list, tuple, range": [[344, "sequence-types-list-tuple-range"]], "Common Sequence Operations": [[344, "common-sequence-operations"]], "Immutable Sequence Types": [[344, "immutable-sequence-types"]], "Mutable Sequence Types": [[344, "mutable-sequence-types"]], "Tuples": [[344, "tuples"]], "Ranges": [[344, "ranges"]], "Text Sequence Type --- str": [[344, "text-sequence-type-str"]], "printf-style String Formatting": [[344, "printf-style-string-formatting"]], "Binary Sequence Types --- bytes, bytearray, memoryview": [[344, "binary-sequence-types-bytes-bytearray-memoryview"]], "Bytes Objects": [[344, "bytes-objects"]], "Bytearray Objects": [[344, "bytearray-objects"]], "Bytes and Bytearray Operations": [[344, "bytes-and-bytearray-operations"]], "printf-style Bytes Formatting": [[344, "printf-style-bytes-formatting"]], "Memory Views": [[344, "memory-views"]], "Set Types --- set, frozenset": [[344, "set-types-set-frozenset"]], "Mapping Types --- dict": [[344, "mapping-types-dict"]], "\u5b57\u5178\u8996\u5716\u7269\u4ef6": [[344, "dictionary-view-objects"]], "Context Manager Types": [[344, "context-manager-types"]], "Type Annotation Types --- Generic Alias, Union": [[344, "type-annotation-types-generic-alias-union"]], "Generic Alias Type": [[344, "generic-alias-type"]], "Standard Generic Classes": [[344, "standard-generic-classes"]], "Special Attributes of GenericAlias objects": [[344, "special-attributes-of-genericalias-objects"]], "Union Type": [[344, "union-type"]], "Other Built-in Types": [[344, "other-built-in-types"]], "Classes and Class Instances": [[344, "classes-and-class-instances"]], "Methods": [[344, "methods"], [288, "methods"]], "Code Objects": [[344, "code-objects"]], "The Null Object": [[344, "the-null-object"]], "The Ellipsis Object": [[344, "the-ellipsis-object"]], "The NotImplemented Object": [[344, "the-notimplemented-object"]], "Internal Objects": [[344, "internal-objects"]], "Special Attributes": [[344, "special-attributes"]], "Integer string conversion length limitation": [[344, "integer-string-conversion-length-limitation"]], "Affected APIs": [[344, "affected-apis"]], "Configuring the limit": [[344, "configuring-the-limit"]], "Recommended configuration": [[344, "recommended-configuration"]], "textwrap --- Text wrapping and filling": [[364, "module-textwrap"]], "string --- \u5e38\u898b\u7684\u5b57\u4e32\u64cd\u4f5c": [[345, "module-string"]], "\u5b57\u4e32\u5e38\u6578": [[345, "string-constants"]], "\u81ea\u8a02\u5b57\u4e32\u683c\u5f0f": [[345, "custom-string-formatting"]], "\u683c\u5f0f\u5316\u6587\u5b57\u8a9e\u6cd5": [[345, "format-string-syntax"]], "\u683c\u5f0f\u898f\u683c (Format Specification) \u8ff7\u4f60\u8a9e\u8a00": [[345, "format-specification-mini-language"]], "\u683c\u5f0f\u7bc4\u4f8b": [[345, "format-examples"]], "\u6a21\u677f\u5b57\u4e32": [[345, "template-strings"]], "tabnanny --- \u5075\u6e2c\u4e0d\u826f\u7e2e\u6392": [[357, "module-tabnanny"]], "sys --- \u7cfb\u7d71\u7279\u5b9a\u7684\u53c3\u6578\u8207\u51fd\u5f0f": [[352, "module-sys"]], "Attributes of the float_info named tuple": [[352, "id2"]], "time --- Time access and conversions": [[366, "module-time"]], "Clock ID Constants": [[366, "clock-id-constants"]], "Timezone Constants": [[366, "timezone-constants"]], "tempfile --- \u751f\u6210\u81e8\u6642\u6a94\u6848\u548c\u76ee\u9304": [[360, "module-tempfile"]], "\u5df2\u68c4\u7528\u7684\u51fd\u5f0f\u548c\u8b8a\u6578": [[360, "deprecated-functions-and-variables"]], "subprocess --- \u5b50\u884c\u7a0b\u7ba1\u7406": [[348, "module-subprocess"]], "Using the subprocess Module": [[348, "using-the-subprocess-module"]], "Frequently Used Arguments": [[348, "frequently-used-arguments"]], "Popen Constructor": [[348, "popen-constructor"]], "Security Considerations": [[348, "security-considerations"], [245, "security-considerations"], [143, "security-considerations"]], "Popen Objects": [[348, "popen-objects"]], "Windows Popen Helpers": [[348, "windows-popen-helpers"]], "Windows Constants": [[348, "windows-constants"]], "Older high-level API": [[348, "older-high-level-api"]], "Replacing Older Functions with the subprocess Module": [[348, "replacing-older-functions-with-the-subprocess-module"]], "Replacing /bin/sh shell command substitution": [[348, "replacing-bin-sh-shell-command-substitution"]], "Replacing shell pipeline": [[348, "replacing-shell-pipeline"]], "Replacing os.system()": [[348, "replacing-os-system"]], "Replacing the os.spawn family": [[348, "replacing-the-os-spawn-family"]], "Replacing os.popen(), os.popen2(), os.popen3()": [[348, "replacing-os-popen-os-popen2-os-popen3"]], "Replacing functions from the popen2 module": [[348, "replacing-functions-from-the-popen2-module"]], "Legacy Shell Invocation Functions": [[348, "legacy-shell-invocation-functions"]], "Converting an argument sequence to a string on Windows": [[348, "converting-an-argument-sequence-to-a-string-on-windows"]], "Disabling use of vfork() or posix_spawn()": [[348, "disabling-use-of-vfork-or-posix-spawn"]], "sysconfig --- Provide access to Python's configuration information": [[355, "module-sysconfig"]], "Configuration variables": [[355, "configuration-variables"]], "Installation paths": [[355, "installation-paths"]], "User scheme": [[355, "user-scheme"]], "posix_user": [[355, "posix-user"]], "nt_user": [[355, "nt-user"]], "osx_framework_user": [[355, "osx-framework-user"]], "Home scheme": [[355, "home-scheme"]], "posix_home": [[355, "posix-home"]], "Prefix scheme": [[355, "prefix-scheme"]], "posix_prefix": [[355, "posix-prefix"]], "nt": [[355, "nt"]], "\u5b89\u88dd\u8def\u5f91\u51fd\u5f0f": [[355, "installation-path-functions"]], "\u5c07 sysconfig \u4f5c\u70ba\u8173\u672c\u4f7f\u7528": [[355, "using-sysconfig-as-a-script"]], "The initialization of the sys.path module search path": [[354, "the-initialization-of-the-sys-path-module-search-path"]], "Virtual environments": [[354, "virtual-environments"]], "_pth files": [[354, "pth-files"]], "Embedded Python": [[354, "embedded-python"]], "termios --- POSIX style tty control": [[361, "module-termios"]], "\u4ee5 Tk \u6253\u9020\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762 (Graphical User Interfaces)": [[368, "graphical-user-interfaces-with-tk"]], "sunau --- \u8b80\u5beb Sun AU \u6a94\u6848": [[349, "module-sunau"]], "AU_read \u7269\u4ef6": [[349, "au-read-objects"]], "AU_write \u7269\u4ef6": [[349, "au-write-objects"]], "tkinter.dnd --- Drag and drop support": [[371, "module-tkinter.dnd"]], "stat --- Interpreting stat() results": [[342, "module-stat"]], "tkinter --- Python interface to Tcl/Tk": [[369, "module-tkinter"]], "Architecture": [[369, "architecture"]], "Tkinter Modules": [[369, "tkinter-modules"]], "Tkinter Life Preserver": [[369, "tkinter-life-preserver"]], "A Hello World Program": [[369, "a-hello-world-program"]], "Important Tk Concepts": [[369, "important-tk-concepts"]], "Understanding How Tkinter Wraps Tcl/Tk": [[369, "understanding-how-tkinter-wraps-tcl-tk"]], "How do I...? What option does...?": [[369, "how-do-i-what-option-does"]], "Navigating the Tcl/Tk Reference Manual": [[369, "navigating-the-tcl-tk-reference-manual"]], "Threading model": [[369, "threading-model"]], "Handy Reference": [[369, "handy-reference"]], "Setting Options": [[369, "setting-options"]], "The Packer": [[369, "the-packer"]], "Packer Options": [[369, "packer-options"]], "Coupling Widget Variables": [[369, "coupling-widget-variables"]], "The Window Manager": [[369, "the-window-manager"]], "Tk Option Data Types": [[369, "tk-option-data-types"]], "Bindings and Events": [[369, "bindings-and-events"]], "The index Parameter": [[369, "the-index-parameter"]], "Images": [[369, "images"]], "File Handlers": [[369, "file-handlers"]], "tarfile --- Read and write tar archive files": [[358, "module-tarfile"]], "TarFile \u7269\u4ef6": [[358, "tarfile-objects"]], "TarInfo \u7269\u4ef6": [[358, "tarinfo-objects"]], "Extraction filters": [[358, "extraction-filters"]], "Default named filters": [[358, "default-named-filters"]], "Filter errors": [[358, "filter-errors"]], "Hints for further verification": [[358, "hints-for-further-verification"]], "Supporting older Python versions": [[358, "supporting-older-python-versions"]], "Stateful extraction filter example": [[358, "stateful-extraction-filter-example"]], "Supported tar formats": [[358, "supported-tar-formats"]], "Unicode issues": [[358, "unicode-issues"]], "telnetlib --- Telnet \u5ba2\u6236\u7aef": [[359, "module-telnetlib"]], "Telnet Objects": [[359, "telnet-objects"]], "Telnet \u7bc4\u4f8b": [[359, "telnet-example"]], "tkinter.font --- Tkinter \u5b57\u578b\u5305\u88dd\u5668": [[372, "module-tkinter.font"]], "tkinter.colorchooser --- \u984f\u8272\u9078\u64c7\u5c0d\u8a71\u6846": [[370, "module-tkinter.colorchooser"]], "statistics --- \u6578\u5b78\u7d71\u8a08\u51fd\u5f0f": [[343, "module-statistics"]], "\u5e73\u5747\u503c\u8207\u4e2d\u592e\u4f4d\u7f6e\u91cf\u6578": [[343, "averages-and-measures-of-central-location"]], "\u96e2\u5ea6 (spread) \u7684\u6e2c\u91cf": [[343, "measures-of-spread"]], "\u5169\u500b\u8f38\u5165\u4e4b\u9593\u7684\u95dc\u4fc2\u7d71\u8a08": [[343, "statistics-for-relations-between-two-inputs"]], "\u51fd\u5f0f\u7d30\u7bc0": [[343, "function-details"]], "NormalDist \u7269\u4ef6": [[343, "normaldist-objects"]], "Examples and Recipes": [[343, "examples-and-recipes"], [161, "examples-and-recipes"], [169, "examples-and-recipes"]], "\u7d93\u5178\u6a5f\u7387\u554f\u984c": [[343, "classic-probability-problems"]], "\u7528\u65bc\u6a21\u64ec\u7684\u8499\u5730\u5361\u7f85 (Monte Carlo) \u8f38\u5165": [[343, "monte-carlo-inputs-for-simulations"]], "\u8fd1\u4f3c\u4e8c\u9805\u5206\u5e03": [[343, "approximating-binomial-distributions"]], "\u55ae\u7d14\u8c9d\u6c0f\u5206\u985e\u5668 (Naive bayesian classifier)": [[343, "naive-bayesian-classifier"]], "\u6838\u5bc6\u5ea6\u4f30\u8a08 (Kernel density estimation)": [[343, "kernel-density-estimation"]], "struct --- Interpret bytes as packed binary data": [[347, "module-struct"]], "\u51fd\u5f0f\u8207\u4f8b\u5916": [[347, "functions-and-exceptions"]], "Format Strings": [[347, "format-strings"]], "Byte Order, Size, and Alignment": [[347, "byte-order-size-and-alignment"]], "Format Characters": [[347, "format-characters"]], "Applications": [[347, "applications"]], "Native Formats": [[347, "native-formats"]], "Standard Formats": [[347, "standard-formats"]], "threading --- Thread-based parallelism": [[365, "module-threading"]], "Thread-Local Data": [[365, "thread-local-data"]], "Thread Objects": [[365, "thread-objects"]], "Lock Objects": [[365, "lock-objects"]], "RLock \u7269\u4ef6": [[365, "rlock-objects"]], "Condition Objects": [[365, "condition-objects"]], "Semaphore Objects": [[365, "semaphore-objects"]], "Semaphore \u7bc4\u4f8b": [[365, "semaphore-example"]], "Event Objects": [[365, "event-objects"]], "Timer Objects": [[365, "timer-objects"]], "Barrier Objects": [[365, "barrier-objects"]], "Using locks, conditions, and semaphores in the with statement": [[365, "using-locks-conditions-and-semaphores-in-the-with-statement"]], "tkinter.messagebox --- Tkinter \u8a0a\u606f\u63d0\u793a": [[373, "module-tkinter.messagebox"]], "symtable --- \u5b58\u53d6\u7de8\u8b6f\u5668\u7684\u7b26\u865f\u8868": [[351, "module-symtable"]], "\u7522\u751f\u7b26\u865f\u8868": [[351, "generating-symbol-tables"]], "\u6aa2\u67e5\u7b26\u865f\u8868": [[351, "examining-symbol-tables"]], "ssl --- socket \u7269\u4ef6\u7684 TLS/SSL \u5305\u88dd\u5668": [[341, "module-ssl"]], "\u51fd\u5f0f\u3001\u5e38\u6578\u8207\u4f8b\u5916": [[341, "functions-constants-and-exceptions"]], "Socket \u5efa\u7acb": [[341, "socket-creation"]], "\u8a9e\u5883\u5efa\u7acb": [[341, "context-creation"]], "\u96a8\u6a5f\u7522\u751f": [[341, "random-generation"]], "\u8a8d\u8b49\u8655\u7406": [[341, "certificate-handling"]], "SSL Sockets": [[341, "ssl-sockets"]], "SSL Contexts": [[341, "ssl-contexts"]], "Certificates": [[341, "certificates"]], "Certificate chains": [[341, "certificate-chains"]], "CA certificates": [[341, "ca-certificates"]], "Combined key and certificate": [[341, "combined-key-and-certificate"]], "Self-signed certificates": [[341, "self-signed-certificates"]], "Testing for SSL support": [[341, "testing-for-ssl-support"]], "Client-side operation": [[341, "client-side-operation"]], "Server-side operation": [[341, "server-side-operation"]], "Notes on non-blocking sockets": [[341, "notes-on-non-blocking-sockets"]], "SSL session": [[341, "ssl-session"]], "Security considerations": [[341, "security-considerations"], [268, "security-considerations"]], "Best defaults": [[341, "best-defaults"]], "\u624b\u52d5\u8a2d\u5b9a": [[341, "manual-settings"]], "\u9a57\u8b49\u6191\u8b49": [[341, "verifying-certificates"]], "\u5354\u5b9a\u7248\u672c": [[341, "protocol-versions"]], "Cipher selection": [[341, "cipher-selection"]], "Multi-processing": [[341, "multi-processing"]], "TLS 1.3": [[341, "tls-1-3"]], "http.client --- HTTP protocol client": [[242, "module-http.client"]], "HTTPConnection \u7269\u4ef6": [[242, "httpconnection-objects"]], "HTTPResponse \u7269\u4ef6": [[242, "httpresponse-objects"]], "HTTPMessage \u7269\u4ef6": [[242, "httpmessage-objects"]], "mailbox --- \u4ee5\u5404\u7a2e\u683c\u5f0f\u64cd\u4f5c\u90f5\u4ef6\u4fe1\u7bb1": [[271, "module-mailbox"]], "Mailbox \u7269\u4ef6": [[271, "mailbox-objects"], [271, "maildir-objects"]], "mbox \u7269\u4ef6": [[271, "mbox-objects"]], "MH \u7269\u4ef6": [[271, "mh-objects"]], "Babyl \u7269\u4ef6": [[271, "babyl-objects"]], "MMDF \u7269\u4ef6": [[271, "mmdf-objects"]], "Message \u7269\u4ef6": [[271, "message-objects"]], "MaildirMessage \u7269\u4ef6": [[271, "maildirmessage-objects"]], "mboxMessage \u7269\u4ef6": [[271, "mboxmessage-objects"]], "MHMessage \u7269\u4ef6": [[271, "mhmessage-objects"]], "BabylMessage \u7269\u4ef6": [[271, "babylmessage-objects"]], "MMDFMessage \u7269\u4ef6": [[271, "mmdfmessage-objects"]], "Python Language Services": [[264, "python-language-services"]], "html.parser --- \u7c21\u55ae\u7684 HTML \u548c XHTML \u5256\u6790\u5668": [[240, "module-html.parser"]], "HTML \u5256\u6790\u5668\u61c9\u7528\u7a0b\u5f0f\u7bc4\u4f8b": [[240, "example-html-parser-application"]], "HTMLParser \u65b9\u6cd5": [[240, "htmlparser-methods"]], "imghdr --- \u63a8\u6e2c\u5716\u7247\u7a2e\u985e": [[249, "module-imghdr"]], "importlib.metadata -- Accessing package metadata": [[251, "module-importlib.metadata"]], "Entry points": [[251, "entry-points"]], "Distribution metadata": [[251, "distribution-metadata"]], "Distribution versions": [[251, "distribution-versions"]], "Distribution files": [[251, "distribution-files"]], "Distribution requirements": [[251, "distribution-requirements"]], "Mapping import to distribution packages": [[251, "mapping-import-to-distribution-packages"]], "Distributions": [[251, "distributions"]], "Distribution Discovery": [[251, "distribution-discovery"]], "Extending the search algorithm": [[251, "extending-the-search-algorithm"]], "keyword --- \u6aa2\u9a57 Python \u95dc\u9375\u5b57": [[263, "module-keyword"]], "html.entities --- HTML \u4e00\u822c\u5be6\u9ad4\u7684\u5b9a\u7fa9": [[239, "module-html.entities"]], "inspect --- \u6aa2\u8996\u6d3b\u52d5\u7269\u4ef6": [[255, "inspect-inspect-live-objects"]], "Types and members": [[255, "types-and-members"]], "Retrieving source code": [[255, "retrieving-source-code"]], "Introspecting callables with the Signature object": [[255, "introspecting-callables-with-the-signature-object"]], "\u985e\u5225\u8207\u51fd\u5f0f": [[255, "classes-and-functions"]], "The interpreter stack": [[255, "the-interpreter-stack"]], "Fetching attributes statically": [[255, "fetching-attributes-statically"]], "Current State of Generators, Coroutines, and Asynchronous Generators": [[255, "current-state-of-generators-coroutines-and-asynchronous-generators"]], "Code Objects Bit Flags": [[255, "code-objects-bit-flags"]], "Buffer flags": [[255, "buffer-flags"]], "json --- JSON \u7de8\u78bc\u5668\u8207\u89e3\u78bc\u5668": [[262, "module-json"]], "Encoders and Decoders": [[262, "encoders-and-decoders"]], "Standard Compliance and Interoperability": [[262, "standard-compliance-and-interoperability"]], "Character Encodings": [[262, "character-encodings"]], "Infinite and NaN Number Values": [[262, "infinite-and-nan-number-values"]], "Repeated Names Within an Object": [[262, "repeated-names-within-an-object"]], "Top-level Non-Object, Non-Array Values": [[262, "top-level-non-object-non-array-values"]], "Implementation Limitations": [[262, "implementation-limitations"]], "\u547d\u4ee4\u5217\u9078\u9805": [[262, "command-line-options"], [300, "command-line-options"], [234, "command-line-options"]], "File menu (Shell and Editor)": [[247, "file-menu-shell-and-editor"]], "Edit menu (Shell and Editor)": [[247, "edit-menu-shell-and-editor"]], "Format menu (Editor window only)": [[247, "format-menu-editor-window-only"]], "Run menu (Editor window only)": [[247, "run-menu-editor-window-only"]], "Shell menu (Shell window only)": [[247, "shell-menu-shell-window-only"]], "Debug menu (Shell window only)": [[247, "debug-menu-shell-window-only"]], "Options menu (Shell and Editor)": [[247, "options-menu-shell-and-editor"]], "Window menu (Shell and Editor)": [[247, "window-menu-shell-and-editor"]], "Help menu (Shell and Editor)": [[247, "help-menu-shell-and-editor"]], "Context menus": [[247, "context-menus"]], "Editing and Navigation": [[247, "editing-and-navigation"]], "Editor windows": [[247, "editor-windows"]], "Key bindings": [[247, "key-bindings"]], "Automatic indentation": [[247, "automatic-indentation"]], "Completions": [[247, "completions"]], "Calltips": [[247, "calltips"]], "Code Context": [[247, "code-context"]], "Shell window": [[247, "shell-window"]], "Text colors": [[247, "text-colors"]], "Startup and Code Execution": [[247, "startup-and-code-execution"]], "Startup failure": [[247, "startup-failure"]], "Running user code": [[247, "running-user-code"]], "User output in Shell": [[247, "user-output-in-shell"]], "Developing tkinter applications": [[247, "developing-tkinter-applications"]], "Running without a subprocess": [[247, "running-without-a-subprocess"]], "Help and Preferences": [[247, "help-and-preferences"]], "Help sources": [[247, "help-sources"]], "Setting preferences": [[247, "setting-preferences"]], "IDLE on macOS": [[247, "idle-on-macos"]], "Extensions": [[247, "extensions"]], "idlelib": [[247, "module-idlelib"]], "io \u2014 \u8655\u7406\u8cc7\u6599\u4e32\u6d41\u7684\u6838\u5fc3\u5de5\u5177": [[258, "module-io"]], "\u6587\u5b57 I/O": [[258, "text-i-o"], [258, "id1"], [258, "id3"]], "\u4e8c\u9032\u4f4d (Binary) I/O": [[258, "binary-i-o"], [258, "id2"]], "\u539f\u59cb (Raw) I/O": [[258, "raw-i-o"]], "\u6587\u5b57\u7de8\u78bc": [[258, "text-encoding"]], "\u9078\u64c7\u6027\u52a0\u5165\u7684\u7de8\u78bc\u8b66\u544a": [[258, "opt-in-encodingwarning"]], "\u9ad8\u968e\u6a21\u7d44\u4ecb\u9762": [[258, "high-level-module-interface"]], "\u985e\u5225\u968e\u5c64": [[258, "class-hierarchy"]], "I/O \u57fa\u790e\u985e\u5225": [[258, "i-o-base-classes"]], "\u539f\u59cb\u6a94\u6848 I/O": [[258, "raw-file-i-o"]], "Buffered Streams": [[258, "buffered-streams"]], "Reentrancy": [[258, "reentrancy"]], "Python \u6a19\u6e96\u51fd\u5f0f\u5eab (Standard Library)": [[254, "the-python-standard-library"]], "importlib.resources.abc -- Abstract base classes for resources": [[253, "module-importlib.resources.abc"]], "\u53ef\u7528\u6027\u4e4b\u8a3b\u91cb": [[257, "notes-on-availability"]], "WebAssembly \u5e73\u53f0": [[257, "webassembly-platforms"]], "logging --- Python \u7684\u65e5\u8a8c\u8a18\u9304\u5de5\u5177": [[267, "module-logging"]], "Important": [[267, "index-0"], [269, null], [268, null], [211, null]], "Logger Objects": [[267, "logger-objects"]], "Handler Objects": [[267, "handler-objects"]], "Formatter Objects": [[267, "formatter-objects"]], "Filter Objects": [[267, "filter-objects"]], "LogRecord \u7269\u4ef6": [[267, "logrecord-objects"]], "LogRecord attributes": [[267, "logrecord-attributes"]], "LoggerAdapter \u7269\u4ef6": [[267, "loggeradapter-objects"]], "Thread Safety": [[267, "thread-safety"]], "Module-Level Attributes": [[267, "module-level-attributes"]], "Integration with the warnings module": [[267, "integration-with-the-warnings-module"]], "\u570b\u969b\u5316": [[246, "internationalization"]], "imaplib --- IMAP4 protocol client": [[248, "module-imaplib"]], "IMAP4 \u7269\u4ef6": [[248, "imap4-objects"]], "IMAP4 \u7bc4\u4f8b": [[248, "imap4-example"]], "Networking and Interprocess Communication": [[260, "networking-and-interprocess-communication"]], "locale \u2014 \u570b\u969b\u5316\u670d\u52d9": [[266, "module-locale"]], "Background, details, hints, tips and caveats": [[266, "background-details-hints-tips-and-caveats"]], "For extension writers and programs that embed Python": [[266, "for-extension-writers-and-programs-that-embed-python"]], "Access to message catalogs": [[266, "access-to-message-catalogs"]], "importlib.resources -- Package resource reading, opening and access": [[252, "module-importlib.resources"]], "\u5df2\u68c4\u7528\u51fd\u5f0f": [[252, "deprecated-functions"]], "http --- HTTP \u6a21\u7d44": [[241, "module-http"]], "HTTP \u72c0\u614b\u78bc": [[241, "http-status-codes"]], "HTTP \u72c0\u614b\u5206\u985e": [[241, "http-status-category"]], "HTTP \u65b9\u6cd5": [[241, "http-methods"]], "ipaddress --- IPv4/IPv6 manipulation library": [[259, "module-ipaddress"]], "Convenience factory functions": [[259, "convenience-factory-functions"]], "IP Addresses": [[259, "ip-addresses"]], "Address objects": [[259, "address-objects"]], "Conversion to Strings and Integers": [[259, "conversion-to-strings-and-integers"]], "Comparison operators": [[259, "comparison-operators"]], "Arithmetic operators": [[259, "arithmetic-operators"]], "IP Network definitions": [[259, "ip-network-definitions"]], "Prefix, net mask and host mask": [[259, "prefix-net-mask-and-host-mask"]], "Network objects": [[259, "network-objects"]], "Logical operators": [[259, "logical-operators"], [259, "id3"]], "Networks as containers of addresses": [[259, "networks-as-containers-of-addresses"]], "Interface objects": [[259, "interface-objects"]], "Other Module Level Functions": [[259, "other-module-level-functions"]], "Custom Exceptions": [[259, "custom-exceptions"]], "logging.handlers --- Logging handlers": [[269, "module-logging.handlers"]], "StreamHandler": [[269, "streamhandler"]], "FileHandler": [[269, "filehandler"]], "NullHandler": [[269, "nullhandler"]], "WatchedFileHandler": [[269, "watchedfilehandler"]], "BaseRotatingHandler": [[269, "baserotatinghandler"]], "RotatingFileHandler": [[269, "rotatingfilehandler"]], "TimedRotatingFileHandler": [[269, "timedrotatingfilehandler"]], "SocketHandler": [[269, "sockethandler"]], "DatagramHandler": [[269, "datagramhandler"]], "SysLogHandler": [[269, "sysloghandler"]], "NTEventLogHandler": [[269, "nteventloghandler"]], "SMTPHandler": [[269, "smtphandler"]], "MemoryHandler": [[269, "memoryhandler"]], "HTTPHandler": [[269, "httphandler"]], "QueueHandler": [[269, "queuehandler"]], "QueueListener": [[269, "queuelistener"]], "linecache --- Random access to text lines": [[265, "module-linecache"]], "http.cookiejar --- Cookie handling for HTTP clients": [[243, "module-http.cookiejar"]], "CookieJar \u8207 FileCookieJar \u7269\u4ef6": [[243, "cookiejar-and-filecookiejar-objects"]], "FileCookieJar subclasses and co-operation with web browsers": [[243, "filecookiejar-subclasses-and-co-operation-with-web-browsers"]], "CookiePolicy \u7269\u4ef6": [[243, "cookiepolicy-objects"]], "DefaultCookiePolicy \u7269\u4ef6": [[243, "defaultcookiepolicy-objects"]], "Cookie \u7269\u4ef6": [[243, "cookie-objects"], [244, "cookie-objects"]], "http.cookies --- HTTP state management": [[244, "module-http.cookies"]], "Morsel \u7269\u4ef6": [[244, "morsel-objects"]], "\u7db2\u8def\u5354\u5b9a (Internet protocols) \u53ca\u652f\u63f4": [[256, "internet-protocols-and-support"]], "itertools --- \u5efa\u7acb\u7522\u751f\u9ad8\u6548\u7387\u8ff4\u5708\u4e4b\u758a\u4ee3\u5668\u7684\u51fd\u5f0f": [[261, "module-itertools"]], "Itertool Functions": [[261, "itertool-functions"]], "Itertools Recipes": [[261, "itertools-recipes"]], "logging.config --- Logging configuration": [[268, "module-logging.config"]], "Configuration functions": [[268, "configuration-functions"]], "Configuration dictionary schema": [[268, "configuration-dictionary-schema"]], "Dictionary Schema Details": [[268, "dictionary-schema-details"]], "Incremental Configuration": [[268, "incremental-configuration"]], "Object connections": [[268, "object-connections"]], "User-defined objects": [[268, "user-defined-objects"]], "Handler configuration order": [[268, "handler-configuration-order"]], "Access to external objects": [[268, "access-to-external-objects"]], "Access to internal objects": [[268, "access-to-internal-objects"]], "Import resolution and custom importers": [[268, "import-resolution-and-custom-importers"]], "Configuring QueueHandler and QueueListener": [[268, "configuring-queuehandler-and-queuelistener"]], "Configuration file format": [[268, "configuration-file-format"]], "html --- \u8d85\u9023\u7d50\u6a19\u8a18\u8a9e\u8a00 (HTML) \u652f\u63f4": [[238, "module-html"]], "lzma --- Compression using the LZMA algorithm": [[270, "module-lzma"]], "Reading and writing compressed files": [[270, "reading-and-writing-compressed-files"]], "Compressing and decompressing data in memory": [[270, "compressing-and-decompressing-data-in-memory"]], "Miscellaneous": [[270, "miscellaneous"], [283, "miscellaneous"]], "Specifying custom filter chains": [[270, "specifying-custom-filter-chains"]], "http.server \u2014 HTTP \u4f3a\u670d\u5668": [[245, "module-http.server"]], "importlib --- import \u7684\u5be6\u4f5c": [[250, "module-importlib"]], "importlib.abc -- Abstract base classes related to import": [[250, "module-importlib.abc"]], "importlib.machinery -- Importers and path hooks": [[250, "module-importlib.machinery"]], "importlib.util -- Utility code for importers": [[250, "module-importlib.util"]], "Importing programmatically": [[250, "importing-programmatically"]], "Checking if a module can be imported": [[250, "checking-if-a-module-can-be-imported"]], "Importing a source file directly": [[250, "importing-a-source-file-directly"]], "Implementing lazy imports": [[250, "implementing-lazy-imports"]], "Setting up an importer": [[250, "setting-up-an-importer"]], "Approximating importlib.import_module()": [[250, "approximating-importlib-import-module"]], "os --- \u5404\u7a2e\u4f5c\u696d\u7cfb\u7d71\u4ecb\u9762": [[293, "module-os"]], "File Names, Command Line Arguments, and Environment Variables": [[293, "file-names-command-line-arguments-and-environment-variables"]], "Python UTF-8 Mode": [[293, "python-utf-8-mode"]], "Process Parameters": [[293, "process-parameters"]], "File Object Creation": [[293, "file-object-creation"]], "File Descriptor Operations": [[293, "file-descriptor-operations"]], "Querying the size of a terminal": [[293, "querying-the-size-of-a-terminal"]], "Inheritance of File Descriptors": [[293, "inheritance-of-file-descriptors"]], "Files and Directories": [[293, "files-and-directories"]], "Linux extended attributes": [[293, "linux-extended-attributes"]], "\u884c\u7a0b\u7ba1\u7406": [[293, "process-management"]], "Interface to the scheduler": [[293, "interface-to-the-scheduler"]], "Miscellaneous System Information": [[293, "miscellaneous-system-information"]], "Random numbers": [[293, "random-numbers"]], "mailcap --- Mailcap file handling": [[272, "module-mailcap"]], "msilib --- \u8b80\u5beb Microsoft Installer \u6a94\u6848": [[281, "module-msilib"]], "Database Objects": [[281, "database-objects"]], "View Objects": [[281, "view-objects"]], "Summary Information Objects": [[281, "summary-information-objects"]], "Record Objects": [[281, "record-objects"]], "Errors": [[281, "errors"]], "CAB \u7269\u4ef6": [[281, "cab-objects"]], "Directory Objects": [[281, "directory-objects"]], "Features": [[281, "features"]], "GUI classes": [[281, "gui-classes"]], "Precomputed tables": [[281, "precomputed-tables"]], "modulefinder --- Find modules used by a script": [[279, "module-modulefinder"]], "Example usage of ModuleFinder": [[279, "example-usage-of-modulefinder"]], "operator --- \u6a19\u6e96\u904b\u7b97\u5b50\u66ff\u4ee3\u51fd\u5f0f": [[291, "module-operator"]], "\u904b\u7b97\u5b50\u8207\u51fd\u5f0f\u9593\u7684\u5c0d\u6620": [[291, "mapping-operators-to-functions"]], "\u539f\u5730 (in-place) \u904b\u7b97\u5b50": [[291, "in-place-operators"]], "pipes --- shell pipelines \u4ecb\u9762": [[301, "module-pipes"]], "Template Objects": [[301, "template-objects"]], "pathlib --- \u7269\u4ef6\u5c0e\u5411\u6a94\u6848\u7cfb\u7d71\u8def\u5f91": [[296, "module-pathlib"]], "\u7d14\u8def\u5f91": [[296, "pure-paths"]], "\u901a\u7528\u5c6c\u6027": [[296, "general-properties"]], "\u904b\u7b97\u5b50": [[296, "operators"]], "\u5c0d\u500b\u5225\u7d44\u6210\u7684\u5b58\u53d6": [[296, "accessing-individual-parts"]], "\u65b9\u6cd5\u8207\u5c6c\u6027": [[296, "methods-and-properties"]], "\u5be6\u9ad4\u8def\u5f91": [[296, "concrete-paths"]], "\u8207 os \u6a21\u7d44\u88e1\u7684\u5de5\u5177\u7684\u5c0d\u61c9\u95dc\u4fc2": [[296, "correspondence-to-tools-in-the-os-module"]], "math --- \u6578\u5b78\u51fd\u5f0f": [[275, "module-math"]], "\u6578\u8ad6\u8207\u8868\u73fe\u51fd\u5f0f": [[275, "number-theoretic-and-representation-functions"]], "Power and logarithmic functions": [[275, "power-and-logarithmic-functions"]], "Trigonometric functions": [[275, "trigonometric-functions"]], "Angular conversion": [[275, "angular-conversion"]], "Hyperbolic functions": [[275, "hyperbolic-functions"]], "Special functions": [[275, "special-functions"]], "\u6578\u503c\u8207\u6578\u5b78\u6a21\u7d44": [[290, "numeric-and-mathematical-modules"]], "multiprocessing.shared_memory --- \u5c0d\u65bc\u5171\u4eab\u8a18\u61b6\u9ad4\u7684\u8de8\u884c\u7a0b\u76f4\u63a5\u5b58\u53d6": [[284, "module-multiprocessing.shared_memory"]], "optparse --- Parser for command line options": [[292, "module-optparse"]], "Terminology": [[292, "terminology"]], "What are options for?": [[292, "what-are-options-for"]], "What are positional arguments for?": [[292, "what-are-positional-arguments-for"]], "Understanding option actions": [[292, "understanding-option-actions"]], "The store action": [[292, "the-store-action"]], "Handling boolean (flag) options": [[292, "handling-boolean-flag-options"]], "Other actions": [[292, "other-actions"]], "Default values": [[292, "default-values"]], "Generating help": [[292, "generating-help"]], "Grouping Options": [[292, "grouping-options"]], "Printing a version string": [[292, "printing-a-version-string"]], "How optparse handles errors": [[292, "how-optparse-handles-errors"]], "Putting it all together": [[292, "putting-it-all-together"]], "Reference Guide": [[292, "reference-guide"]], "Creating the parser": [[292, "creating-the-parser"]], "Populating the parser": [[292, "populating-the-parser"]], "Defining options": [[292, "defining-options"]], "Option attributes": [[292, "option-attributes"]], "Standard option actions": [[292, "standard-option-actions"]], "Standard option types": [[292, "standard-option-types"]], "Querying and manipulating your option parser": [[292, "querying-and-manipulating-your-option-parser"]], "Conflicts between options": [[292, "conflicts-between-options"]], "Cleanup": [[292, "cleanup"], [283, "cleanup"]], "Other methods": [[292, "other-methods"]], "Option Callbacks": [[292, "option-callbacks"]], "Defining a callback option": [[292, "defining-a-callback-option"]], "How callbacks are called": [[292, "how-callbacks-are-called"]], "Raising errors in a callback": [[292, "raising-errors-in-a-callback"]], "Callback example 1: trivial callback": [[292, "callback-example-1-trivial-callback"]], "Callback example 2: check option order": [[292, "callback-example-2-check-option-order"]], "Callback example 3: check option order (generalized)": [[292, "callback-example-3-check-option-order-generalized"]], "Callback example 4: check arbitrary condition": [[292, "callback-example-4-check-arbitrary-condition"]], "Callback example 5: fixed arguments": [[292, "callback-example-5-fixed-arguments"]], "Callback example 6: variable arguments": [[292, "callback-example-6-variable-arguments"]], "Extending optparse": [[292, "extending-optparse"]], "Adding new types": [[292, "adding-new-types"]], "Adding new actions": [[292, "adding-new-actions"]], "pdb --- The Python Debugger": [[297, "module-pdb"]], "Debugger Commands": [[297, "debugger-commands"]], "nntplib --- NNTP \u5354\u5b9a\u5ba2\u6236\u7aef": [[288, "module-nntplib"]], "NNTP \u7269\u4ef6": [[288, "nntp-objects"]], "\u5c6c\u6027": [[288, "attributes"]], "Utility functions": [[288, "utility-functions"], [176, "utility-functions"]], "msvcrt --- Useful routines from the MS VC++ runtime": [[282, "module-msvcrt"]], "File Operations": [[282, "file-operations"]], "Console I/O": [[282, "console-i-o"]], "Other Functions": [[282, "other-functions"]], "pickle --- Python \u7269\u4ef6\u5e8f\u5217\u5316": [[299, "module-pickle"]], "Relationship to other Python modules": [[299, "relationship-to-other-python-modules"]], "Comparison with marshal": [[299, "comparison-with-marshal"]], "Comparison with json": [[299, "comparison-with-json"]], "Data stream format": [[299, "data-stream-format"]], "\u6a21\u7d44\u4ecb\u9762": [[299, "module-interface"]], "What can be pickled and unpickled?": [[299, "what-can-be-pickled-and-unpickled"]], "Pickling Class Instances": [[299, "pickling-class-instances"]], "Persistence of External Objects": [[299, "persistence-of-external-objects"]], "Dispatch Tables": [[299, "dispatch-tables"]], "Handling Stateful Objects": [[299, "handling-stateful-objects"]], "Custom Reduction for Types, Functions, and Other Objects": [[299, "custom-reduction-for-types-functions-and-other-objects"]], "Out-of-band Buffers": [[299, "out-of-band-buffers"]], "Provider API": [[299, "provider-api"]], "Consumer API": [[299, "consumer-api"]], "Restricting Globals": [[299, "restricting-globals"]], "\u591a\u5a92\u9ad4\u670d\u52d9": [[277, "multimedia-services"]], "pkgutil --- Package extension utility": [[302, "module-pkgutil"]], "netrc --- netrc \u6a94\u6848\u8655\u7406": [[286, "module-netrc"]], "netrc \u7269\u4ef6": [[286, "netrc-objects"]], "mimetypes --- Map filenames to MIME types": [[276, "module-mimetypes"]], "MimeTypes \u7269\u4ef6": [[276, "mimetypes-objects"]], "marshal --- \u5185\u90e8 Python \u7269\u4ef6\u5e8f\u5217\u5316": [[274, "module-marshal"]], "ossaudiodev --- \u5c0d OSS \u76f8\u5bb9\u8072\u97f3\u88dd\u7f6e\u7684\u5b58\u53d6": [[295, "module-ossaudiodev"]], "Audio Device Objects": [[295, "audio-device-objects"]], "Mixer Device Objects": [[295, "mixer-device-objects"]], "plistlib --- Generate and parse Apple .plist files": [[304, "module-plistlib"]], "mmap --- Memory-mapped file support": [[278, "module-mmap"]], "MADV_* Constants": [[278, "madv-constants"]], "MAP_* \u5e38\u6578": [[278, "map-constants"]], "\u7db2\u969b\u7db2\u8def\u8cc7\u6599\u8655\u7406": [[285, "internet-data-handling"]], "Structured Markup Processing Tools": [[273, "structured-markup-processing-tools"]], "poplib --- POP3 protocol client": [[305, "module-poplib"]], "POP3 \u7269\u4ef6": [[305, "pop3-objects"]], "POP3 \u7bc4\u4f8b": [[305, "pop3-example"]], "multiprocessing --- Process-based parallelism": [[283, "module-multiprocessing"]], "The Process class": [[283, "the-process-class"]], "Contexts and start methods": [[283, "contexts-and-start-methods"]], "Exchanging objects between processes": [[283, "exchanging-objects-between-processes"]], "Synchronization between processes": [[283, "synchronization-between-processes"]], "Sharing state between processes": [[283, "sharing-state-between-processes"]], "Using a pool of workers": [[283, "using-a-pool-of-workers"]], "Process \u8207\u4f8b\u5916": [[283, "process-and-exceptions"]], "Pipes and Queues": [[283, "pipes-and-queues"]], "Connection Objects": [[283, "connection-objects"]], "Synchronization primitives": [[283, "synchronization-primitives"]], "Shared ctypes Objects": [[283, "shared-ctypes-objects"]], "The multiprocessing.sharedctypes module": [[283, "module-multiprocessing.sharedctypes"]], "Managers": [[283, "managers"]], "Customized managers": [[283, "customized-managers"]], "Using a remote manager": [[283, "using-a-remote-manager"]], "Proxy Objects": [[283, "proxy-objects"]], "Process Pools": [[283, "module-multiprocessing.pool"]], "Listeners and Clients": [[283, "module-multiprocessing.connection"]], "Address Formats": [[283, "address-formats"]], "Authentication keys": [[283, "authentication-keys"]], "Logging": [[283, "logging"]], "The multiprocessing.dummy module": [[283, "module-multiprocessing.dummy"]], "Programming guidelines": [[283, "programming-guidelines"]], "All start methods": [[283, "all-start-methods"]], "The spawn and forkserver start methods": [[283, "the-spawn-and-forkserver-start-methods"]], "nis --- Sun NIS (Yellow Pages) \u4ecb\u9762": [[287, "module-nis"]], "os.path --- \u5e38\u898b\u7684\u8def\u5f91\u540d\u64cd\u4f5c": [[294, "module-os.path"]], "pickletools --- pickle \u958b\u767c\u8005\u7684\u5de5\u5177": [[300, "module-pickletools"]], "\u7a0b\u5f0f\u5316\u4ecb\u9762": [[300, "programmatic-interface"]], "Data Persistence": [[298, "data-persistence"]], "platform ---  \u7372\u53d6\u5e95\u5c64\u5e73\u81fa\u7684\u6a19\u8b58\u8cc7\u6599": [[303, "module-platform"]], "\u8de8\u5e73\u53f0": [[303, "cross-platform"]], "Java \u5e73\u53f0": [[303, "java-platform"]], "Windows \u5e73\u53f0": [[303, "windows-platform"]], "macOS \u5e73\u53f0": [[303, "macos-platform"]], "Unix \u5e73\u53f0": [[303, "unix-platforms"]], "Linux \u5e73\u53f0": [[303, "linux-platforms"]], "numbers --- \u6578\u503c\u7684\u62bd\u8c61\u57fa\u5e95\u985e\u5225": [[289, "module-numbers"]], "\u6578\u503c\u7684\u968e\u5c64": [[289, "the-numeric-tower"]], "\u7d66\u578b\u5225\u5be6\u4f5c\u8005\u7684\u8a3b\u8a18": [[289, "notes-for-type-implementors"]], "\u52a0\u5165\u66f4\u591a\u6578\u503c ABC": [[289, "adding-more-numeric-abcs"]], "\u5be6\u4f5c\u7b97\u8853\u64cd\u4f5c": [[289, "implementing-the-arithmetic-operations"]], "email.policy: Policy Objects": [[208, "module-email.policy"]], "fcntl --- The fcntl and ioctl system calls": [[215, "module-fcntl"]], "\u6a94\u6848\u8207\u76ee\u9304\u5b58\u53d6": [[219, "file-and-directory-access"]], "enum --- \u5c0d\u5217\u8209\u7684\u652f\u63f4": [[211, "module-enum"]], "\u8cc7\u6599\u578b\u5225": [[211, "data-types"], [182, "data-types"]], "\u652f\u63f4 __dunder__ \u540d\u7a31": [[211, "supported-dunder-names"]], "\u652f\u63f4 _sunder_ \u540d\u7a31": [[211, "supported-sunder-names"]], "\u901a\u7528\u9805\u76ee\u8207\u88dd\u98fe\u5668": [[211, "utilities-and-decorators"]], "\u5099\u8a3b": [[211, "notes"]], "fractions --- Rational numbers": [[221, "module-fractions"]], "gzip --- gzip \u6a94\u6848\u7684\u652f\u63f4": [[234, "module-gzip"]], "\u7528\u6cd5\u7bc4\u4f8b": [[234, "examples-of-usage"], [149, "examples-of-usage"]], "glob --- Unix \u98a8\u683c\u7684\u8def\u5f91\u540d\u7a31\u6a21\u5f0f\u64f4\u5c55": [[231, "module-glob"]], "email.message: Representing an email message": [[205, "module-email.message"]], "ftplib --- FTP \u5354\u5b9a\u7528\u6236\u7aef": [[223, "module-ftplib"]], "\u53c3\u8003": [[223, "reference"]], "FTP \u7269\u4ef6": [[223, "ftp-objects"]], "FTP_TLS \u7269\u4ef6": [[223, "ftp-tls-objects"]], "\u6a21\u7d44\u8b8a\u6578": [[223, "module-variables"]], "fnmatch --- Unix filename pattern matching": [[220, "module-fnmatch"]], "errno --- Standard errno system symbols": [[212, "module-errno"]], "functools --- Higher-order functions and operations on callable objects": [[226, "module-functools"]], "partial \u7269\u4ef6": [[226, "partial-objects"]], "gettext --- Multilingual internationalization services": [[230, "module-gettext"]], "GNU gettext API": [[230, "gnu-gettext-api"]], "Class-based API": [[230, "class-based-api"]], "The NullTranslations class": [[230, "the-nulltranslations-class"]], "The GNUTranslations class": [[230, "the-gnutranslations-class"]], "Solaris message catalog support": [[230, "solaris-message-catalog-support"]], "The Catalog constructor": [[230, "the-catalog-constructor"]], "Internationalizing your programs and modules": [[230, "internationalizing-your-programs-and-modules"]], "Localizing your module": [[230, "localizing-your-module"]], "Localizing your application": [[230, "localizing-your-application"]], "Changing languages on the fly": [[230, "changing-languages-on-the-fly"]], "Deferred translations": [[230, "deferred-translations"]], "hashlib --- Secure hashes and message digests": [[235, "module-hashlib"]], "\u96dc\u6e4a\u6f14\u7b97\u6cd5": [[235, "hash-algorithms"]], "\u7528\u6cd5": [[235, "usage"]], "\u5efa\u69cb\u51fd\u5f0f": [[235, "constructors"]], "Attributes": [[235, "attributes"]], "Hash Objects": [[235, "hash-objects"]], "SHAKE variable length digests": [[235, "shake-variable-length-digests"]], "File hashing": [[235, "file-hashing"]], "Key derivation": [[235, "key-derivation"]], "BLAKE2": [[235, "blake2"]], "Creating hash objects": [[235, "creating-hash-objects"]], "Simple hashing": [[235, "simple-hashing"]], "Using different digest sizes": [[235, "using-different-digest-sizes"]], "Keyed hashing": [[235, "keyed-hashing"]], "Randomized hashing": [[235, "randomized-hashing"]], "Personalization": [[235, "personalization"]], "Tree mode": [[235, "tree-mode"]], "Credits": [[235, "credits"]], "heapq --- \u5806\u7a4d\u4f47\u5217 (heap queue) \u6f14\u7b97\u6cd5": [[236, "module-heapq"]], "\u512a\u5148\u4f47\u5217\u5be6\u4f5c\u7d30\u7bc0": [[236, "priority-queue-implementation-notes"]], "\u539f\u7406": [[236, "theory"]], "grp --- The group database": [[233, "module-grp"]], "\u51fd\u5f0f\u7de8\u7a0b\u6a21\u7d44": [[224, "functional-programming-modules"]], "ensurepip --- pip \u5b89\u88dd\u5668\u7684\u521d\u59cb\u5efa\u7f6e (bootstrapping)": [[210, "module-ensurepip"]], "\u6a21\u7d44 API": [[210, "module-api"]], "getpass --- \u53ef\u651c\u5f0f\u5bc6\u78bc\u8f38\u5165\u5de5\u5177": [[229, "module-getpass"]], "\u5167\u5efa\u7684\u4f8b\u5916": [[213, "built-in-exceptions"]], "\u4f8b\u5916\u7684\u60c5\u5883": [[213, "exception-context"]], "\u7e7c\u627f\u81ea\u5167\u5efa\u7684\u4f8b\u5916": [[213, "inheriting-from-built-in-exceptions"]], "\u57fa\u5e95\u985e\u5225 (base classes)": [[213, "base-classes"]], "\u5be6\u9ad4\u4f8b\u5916": [[213, "concrete-exceptions"]], "OS exceptions": [[213, "os-exceptions"]], "\u8b66\u544a": [[213, "warnings"]], "Exception groups": [[213, "exception-groups"]], "\u4f8b\u5916\u968e\u5c64": [[213, "exception-hierarchy"]], "filecmp --- File and Directory Comparisons": [[216, "module-filecmp"]], "The dircmp class": [[216, "the-dircmp-class"]], "\u7a0b\u5f0f\u6846\u67b6": [[222, "program-frameworks"]], "hmac --- \u57fa\u65bc\u91d1\u9470\u96dc\u6e4a\u7684\u8a0a\u606f\u9a57\u8b49": [[237, "module-hmac"]], "graphlib \u2014-- \u4f7f\u7528\u985e\u5716 (graph-like) \u7d50\u69cb\u9032\u884c\u64cd\u4f5c\u7684\u529f\u80fd": [[232, "module-graphlib"]], "faulthandler --- Dump the Python traceback": [[214, "module-faulthandler"]], "Dumping the traceback": [[214, "dumping-the-traceback"]], "Fault handler state": [[214, "fault-handler-state"]], "Dumping the tracebacks after a timeout": [[214, "dumping-the-tracebacks-after-a-timeout"]], "Dumping the traceback on a user signal": [[214, "dumping-the-traceback-on-a-user-signal"]], "Issue with file descriptors": [[214, "issue-with-file-descriptors"]], "\u5167\u5efa\u51fd\u5f0f": [[225, "built-in-functions"]], "gc --- \u5783\u573e\u56de\u6536\u5668\u4ecb\u9762 (Garbage Collector interface)": [[227, "module-gc"]], "getopt --- C-style parser for command line options": [[228, "module-getopt"]], "fileinput --- Iterate over lines from multiple input streams": [[218, "module-fileinput"]], "\u6a94\u6848\u683c\u5f0f": [[217, "file-formats"]], "email.mime: Creating email and MIME objects from scratch": [[206, "module-email.mime"]], "email.utils: Miscellaneous utilities": [[209, "module-email.utils"]], "email.parser: Parsing email messages": [[207, "module-email.parser"]], "FeedParser API": [[207, "feedparser-api"]], "Parser API": [[207, "parser-api"]], "Additional notes": [[207, "additional-notes"]], "email.iterators: Iterators": [[204, "module-email.iterators"]], "datetime --- \u65e5\u671f\u8207\u6642\u9593\u7684\u57fa\u672c\u578b\u5225": [[183, "module-datetime"]], "Aware and Naive Objects": [[183, "aware-and-naive-objects"]], "Available Types": [[183, "available-types"]], "\u5e38\u898b\u5c6c\u6027": [[183, "common-properties"]], "Determining if an Object is Aware or Naive": [[183, "determining-if-an-object-is-aware-or-naive"]], "timedelta \u7269\u4ef6": [[183, "timedelta-objects"]], "\u7528\u6cd5\u7bc4\u4f8b\uff1atimedelta": [[183, "examples-of-usage-timedelta"]], "date \u7269\u4ef6": [[183, "date-objects"]], "\u7528\u6cd5\u7bc4\u4f8b\uff1adate": [[183, "examples-of-usage-date"]], "datetime \u7269\u4ef6": [[183, "datetime-objects"]], "\u7528\u6cd5\u7bc4\u4f8b\uff1adatetime": [[183, "examples-of-usage-datetime"]], "time \u7269\u4ef6": [[183, "time-objects"]], "\u7528\u6cd5\u7bc4\u4f8b\uff1atime": [[183, "examples-of-usage-time"]], "tzinfo \u7269\u4ef6": [[183, "tzinfo-objects"]], "timezone \u7269\u4ef6": [[183, "timezone-objects"]], "strftime() \u8207 strptime() \u7684\u884c\u70ba": [[183, "strftime-and-strptime-behavior"]], "strftime() \u8207 strptime() \u683c\u5f0f\u78bc": [[183, "strftime-and-strptime-format-codes"]], "\u6280\u8853\u7d30\u7bc0": [[183, "technical-detail"]], "doctest --- Test interactive Python examples": [[193, "module-doctest"]], "Simple Usage: Checking Examples in Docstrings": [[193, "simple-usage-checking-examples-in-docstrings"]], "Simple Usage: Checking Examples in a Text File": [[193, "simple-usage-checking-examples-in-a-text-file"]], "How It Works": [[193, "how-it-works"]], "Which Docstrings Are Examined?": [[193, "which-docstrings-are-examined"]], "How are Docstring Examples Recognized?": [[193, "how-are-docstring-examples-recognized"]], "What's the Execution Context?": [[193, "what-s-the-execution-context"]], "What About Exceptions?": [[193, "what-about-exceptions"]], "Option Flags": [[193, "option-flags"]], "Directives": [[193, "directives"]], "Warnings": [[193, "warnings"]], "Basic API": [[193, "basic-api"]], "Unittest API": [[193, "unittest-api"]], "Advanced API": [[193, "advanced-api"]], "DocTest \u7269\u4ef6": [[193, "doctest-objects"]], "Example \u7269\u4ef6": [[193, "example-objects"]], "DocTestFinder \u7269\u4ef6": [[193, "doctestfinder-objects"]], "DocTestParser \u7269\u4ef6": [[193, "doctestparser-objects"]], "DocTestRunner \u7269\u4ef6": [[193, "doctestrunner-objects"]], "OutputChecker \u7269\u4ef6": [[193, "outputchecker-objects"]], "Debugging": [[193, "debugging"]], "Soapbox": [[193, "soapbox"]], "email.generator: Generating MIME documents": [[201, "module-email.generator"]], "crypt --- \u7528\u65bc\u6aa2\u67e5 Unix \u5bc6\u78bc\u7684\u51fd\u5f0f": [[173, "module-crypt"]], "Hashing Methods": [[173, "hashing-methods"]], "\u6a21\u7d44\u5c6c\u6027": [[173, "module-attributes"]], "\u6a21\u7d44\u51fd\u5f0f": [[173, "module-functions"], [166, "module-functions"]], "dataclasses --- Data Classes": [[181, "module-dataclasses"]], "Module contents": [[181, "module-contents"]], "Post-init processing": [[181, "post-init-processing"]], "Class variables": [[181, "class-variables"]], "Init-only variables": [[181, "init-only-variables"]], "Frozen instances": [[181, "frozen-instances"]], "Inheritance": [[181, "inheritance"]], "Re-ordering of keyword-only parameters in __init__()": [[181, "re-ordering-of-keyword-only-parameters-in-init"]], "Default factory functions": [[181, "default-factory-functions"]], "Mutable default values": [[181, "mutable-default-values"]], "Descriptor-typed fields": [[181, "descriptor-typed-fields"]], "Custom Python Interpreters": [[180, "custom-python-interpreters"]], "dis --- Python bytecode\u7684\u53cd\u7d44\u8b6f\u5668": [[191, "module-dis"]], "Command-line interface": [[191, "command-line-interface"]], "Bytecode analysis": [[191, "bytecode-analysis"]], "Analysis functions": [[191, "analysis-functions"]], "Python Bytecode Instructions": [[191, "python-bytecode-instructions"]], "Opcode collections": [[191, "opcode-collections"]], "decimal --- Decimal fixed point and floating point arithmetic": [[186, "module-decimal"]], "Quick-start Tutorial": [[186, "quick-start-tutorial"]], "Decimal objects": [[186, "decimal-objects"]], "Logical operands": [[186, "logical-operands"]], "Context objects": [[186, "context-objects"]], "Rounding modes": [[186, "rounding-modes"]], "Signals": [[186, "signals"]], "Floating Point Notes": [[186, "floating-point-notes"]], "Mitigating round-off error with increased precision": [[186, "mitigating-round-off-error-with-increased-precision"]], "Special values": [[186, "special-values"]], "Working with threads": [[186, "working-with-threads"]], "Recipes": [[186, "recipes"]], "Decimal FAQ": [[186, "decimal-faq"]], "difflib --- Helpers for computing deltas": [[190, "module-difflib"]], "SequenceMatcher \u7269\u4ef6": [[190, "sequencematcher-objects"]], "SequenceMatcher \u7bc4\u4f8b": [[190, "sequencematcher-examples"]], "Differ Objects": [[190, "differ-objects"]], "Differ Example": [[190, "differ-example"]], "A command-line interface to difflib": [[190, "a-command-line-interface-to-difflib"]], "ndiff \u7bc4\u4f8b\uff1a": [[190, "ndiff-example"]], "email.errors: Exception and Defect classes": [[199, "module-email.errors"]], "contextvars --- Context Variables": [[170, "module-contextvars"]], "Context Variables": [[170, "context-variables"]], "Manual Context Management": [[170, "manual-context-management"]], "asyncio support": [[170, "asyncio-support"]], "\u52a0\u5bc6\u670d\u52d9": [[174, "cryptographic-services"]], "\u958b\u767c\u5de5\u5177": [[187, "development-tools"]], "Python Development Mode": [[188, "python-development-mode"]], "Effects of the Python Development Mode": [[188, "effects-of-the-python-development-mode"]], "ResourceWarning \u7bc4\u4f8b": [[188, "resourcewarning-example"]], "Bad file descriptor error example": [[188, "bad-file-descriptor-error-example"]], "dbm --- Unix \"databases\" \u7684\u4ecb\u9762": [[184, "module-dbm"]], "dbm.gnu --- GNU \u8cc7\u6599\u5eab\u7ba1\u7406\u5668": [[184, "module-dbm.gnu"]], "dbm.ndbm --- \u65b0\u8cc7\u6599\u5eab\u7ba1\u7406\u5668": [[184, "module-dbm.ndbm"]], "dbm.dumb --- \u53ef\u651c\u5f0f DBM \u5be6\u4f5c": [[184, "module-dbm.dumb"]], "email: Examples": [[200, "email-examples"]], "email.encoders: Encoders": [[198, "module-email.encoders"]], "email.header: Internationalized headers": [[202, "module-email.header"]], "Tkinter Dialogs": [[189, "tkinter-dialogs"]], "tkinter.simpledialog --- Standard Tkinter input dialogs": [[189, "module-tkinter.simpledialog"]], "tkinter.filedialog --- File selection dialogs": [[189, "module-tkinter.filedialog"]], "Native Load/Save Dialogs": [[189, "native-load-save-dialogs"]], "tkinter.commondialog --- Dialog window templates": [[189, "module-tkinter.commondialog"]], "email.message.Message: Representing an email message using the compat32 API": [[196, "email-message-message-representing-an-email-message-using-the-compat32-api"]], "email --- An email and MIME handling package": [[194, "module-email"]], "curses.panel --- A panel stack extension for curses": [[179, "module-curses.panel"]], "Panel Objects": [[179, "panel-objects"]], "\u9664\u932f\u8207\u6548\u80fd\u5206\u6790": [[185, "debugging-and-profiling"]], "curses --- Terminal handling for character-cell displays": [[177, "module-curses"]], "Window Objects": [[177, "window-objects"]], "Constants": [[177, "constants"]], "curses.textpad --- Text input widget for curses programs": [[177, "module-curses.textpad"]], "Textbox objects": [[177, "textbox-objects"]], "email.contentmanager: Managing MIME Content": [[197, "module-email.contentmanager"]], "Content Manager Instances": [[197, "content-manager-instances"]], "csv --- CSV \u6a94\u6848\u8b80\u53d6\u53ca\u5beb\u5165": [[175, "module-csv"]], "Dialect \u8207\u683c\u5f0f\u53c3\u6578": [[175, "dialects-and-formatting-parameters"]], "\u8b80\u53d6\u5668\u7269\u4ef6": [[175, "reader-objects"]], "\u5beb\u5165\u5668\u7269\u4ef6": [[175, "writer-objects"]], "curses.ascii --- ASCII \u5b57\u5143\u7684\u5de5\u5177\u7a0b\u5f0f": [[178, "module-curses.ascii"]], "\u8edf\u9ad4\u5c01\u88dd\u8207\u767c\u5e03": [[192, "software-packaging-and-distribution"]], "ctypes --- A foreign function library for Python": [[176, "module-ctypes"]], "ctypes tutorial": [[176, "ctypes-tutorial"]], "Loading dynamic link libraries": [[176, "loading-dynamic-link-libraries"]], "Accessing functions from loaded dlls": [[176, "accessing-functions-from-loaded-dlls"]], "Calling functions": [[176, "calling-functions"]], "Fundamental data types": [[176, "fundamental-data-types"], [176, "ctypes-fundamental-data-types-2"]], "Calling functions, continued": [[176, "calling-functions-continued"]], "Calling variadic functions": [[176, "calling-variadic-functions"]], "Calling functions with your own custom data types": [[176, "calling-functions-with-your-own-custom-data-types"]], "Specifying the required argument types (function prototypes)": [[176, "specifying-the-required-argument-types-function-prototypes"]], "Return types": [[176, "return-types"]], "Passing pointers (or: passing parameters by reference)": [[176, "passing-pointers-or-passing-parameters-by-reference"]], "Structures and unions": [[176, "structures-and-unions"]], "Structure/union alignment and byte order": [[176, "structure-union-alignment-and-byte-order"]], "Bit fields in structures and unions": [[176, "bit-fields-in-structures-and-unions"]], "Arrays": [[176, "arrays"]], "Pointers": [[176, "pointers"]], "Type conversions": [[176, "type-conversions"]], "Incomplete Types": [[176, "incomplete-types"]], "Callback functions": [[176, "callback-functions"]], "Accessing values exported from dlls": [[176, "accessing-values-exported-from-dlls"]], "Surprises": [[176, "surprises"]], "Variable-sized data types": [[176, "variable-sized-data-types"]], "ctypes reference": [[176, "ctypes-reference"]], "Finding shared libraries": [[176, "finding-shared-libraries"]], "Loading shared libraries": [[176, "loading-shared-libraries"]], "Foreign functions": [[176, "foreign-functions"]], "Function prototypes": [[176, "function-prototypes"]], "Data types": [[176, "data-types"]], "Structured data types": [[176, "structured-data-types"]], "Arrays and pointers": [[176, "arrays-and-pointers"]], "copyreg --- \u8a3b\u518a pickle \u652f\u63f4\u51fd\u5f0f": [[172, "module-copyreg"]], "copy --- \u6dfa\u5c64 (shallow) \u548c\u6df1\u5c64 (deep) \u8907\u88fd\u64cd\u4f5c": [[171, "module-copy"]], "email.charset: \u8868\u793a\u5b57\u5143\u96c6\u5408": [[195, "module-email.charset"]], "email.headerregistry: Custom Header Objects": [[203, "module-email.headerregistry"]], "\u4e32\u6d41": [[136, "streams"]], "StreamReader": [[136, "streamreader"]], "StreamWriter": [[136, "streamwriter"]], "\u4f7f\u7528\u4e32\u6d41\u7684 TCP echo \u5ba2\u6236\u7aef": [[136, "tcp-echo-client-using-streams"]], "\u4f7f\u7528\u4e32\u6d41\u7684 TCP echo \u4f3a\u670d\u5668": [[136, "tcp-echo-server-using-streams"]], "\u7372\u53d6 HTTP \u6a19\u982d": [[136, "get-http-headers"]], "\u8a3b\u518a\u4e00\u500b\u4f7f\u7528\u4e32\u6d41\u4f86\u7b49\u5f85\u8cc7\u6599\u7684\u958b\u653e socket": [[136, "register-an-open-socket-to-wait-for-data-using-streams"]], "cgi --- \u901a\u7528\u9598\u9053\u5668\u4ecb\u9762\u652f\u63f4": [[151, "module-cgi"]], "Using the cgi module": [[151, "using-the-cgi-module"]], "Higher Level Interface": [[151, "higher-level-interface"]], "Caring about security": [[151, "caring-about-security"]], "Installing your CGI script on a Unix system": [[151, "installing-your-cgi-script-on-a-unix-system"]], "Testing your CGI script": [[151, "testing-your-cgi-script"]], "Debugging CGI scripts": [[151, "debugging-cgi-scripts"]], "Common problems and solutions": [[151, "common-problems-and-solutions"]], "\u540c\u6b65\u5316\u539f\u59cb\u7269\u4ef6 (Synchronization Primitives)": [[138, "synchronization-primitives"]], "Lock": [[138, "lock"]], "Event": [[138, "event"]], "Condition": [[138, "condition"]], "Semaphore": [[138, "semaphore"]], "BoundedSemaphore": [[138, "boundedsemaphore"]], "Barrier": [[138, "barrier"]], "Coroutines and Tasks": [[139, "coroutines-and-tasks"]], "Awaitables": [[139, "awaitables"]], "Creating Tasks": [[139, "creating-tasks"]], "Task Cancellation": [[139, "task-cancellation"]], "Task Groups": [[139, "task-groups"]], "Sleeping": [[139, "sleeping"]], "Running Tasks Concurrently": [[139, "running-tasks-concurrently"]], "Eager Task Factory": [[139, "eager-task-factory"]], "Shielding From Cancellation": [[139, "shielding-from-cancellation"]], "Timeouts": [[139, "timeouts"]], "Waiting Primitives": [[139, "waiting-primitives"]], "Running in Threads": [[139, "running-in-threads"]], "Scheduling From Other Threads": [[139, "scheduling-from-other-threads"]], "Introspection": [[139, "introspection"]], "Task Object": [[139, "task-object"]], "\u6a21\u7d44\u547d\u4ee4\u5217\u4ecb\u9762": [[156, "modules-command-line-interface-cli"]], "binascii --- Convert between binary and ASCII": [[146, "module-binascii"]], "cgitb --- CGI \u8173\u672c\u7684\u56de\u6eaf (traceback) \u7ba1\u7406\u7a0b\u5f0f": [[152, "module-cgitb"]], "builtins --- \u5167\u5efa\u7269\u4ef6": [[148, "module-builtins"]], "collections.abc --- Abstract Base Classes for Containers": [[161, "module-collections.abc"]], "Collections Abstract Base Classes": [[161, "collections-abstract-base-classes"]], "Collections Abstract Base Classes -- Detailed Descriptions": [[161, "collections-abstract-base-classes-detailed-descriptions"]], "compileall --- Byte-compile Python libraries": [[163, "module-compileall"]], "Command-line use": [[163, "command-line-use"]], "Public functions": [[163, "public-functions"]], "audioop --- \u64cd\u4f5c\u539f\u59cb\u8072\u97f3\u6a94\u6848": [[141, "module-audioop"]], "chunk --- \u8b80\u53d6 IFF \u5206\u584a\u8cc7\u6599": [[153, "module-chunk"]], "concurrent \u5957\u4ef6": [[165, "the-concurrent-package"]], "atexit --- Exit handlers": [[140, "module-atexit"]], "atexit \u7bc4\u4f8b": [[140, "atexit-example"]], "\u5b50\u884c\u7a0b": [[137, "subprocesses"]], "\u5efa\u7acb\u5b50\u884c\u7a0b": [[137, "creating-subprocesses"]], "Interacting with Subprocesses": [[137, "interacting-with-subprocesses"]], "\u5b50\u884c\u7a0b\u8207\u7dda\u7a0b": [[137, "subprocess-and-threads"]], "contextlib --- Utilities for with-statement contexts": [[169, "module-contextlib"]], "Utilities": [[169, "utilities"]], "Supporting a variable number of context managers": [[169, "supporting-a-variable-number-of-context-managers"]], "Catching exceptions from __enter__ methods": [[169, "catching-exceptions-from-enter-methods"]], "Cleaning up in an __enter__ implementation": [[169, "cleaning-up-in-an-enter-implementation"]], "Replacing any use of try-finally and flag variables": [[169, "replacing-any-use-of-try-finally-and-flag-variables"]], "Using a context manager as a function decorator": [[169, "using-a-context-manager-as-a-function-decorator"]], "Single use, reusable and reentrant context managers": [[169, "single-use-reusable-and-reentrant-context-managers"]], "Reentrant context managers": [[169, "reentrant-context-managers"]], "Reusable context managers": [[169, "reusable-context-managers"]], "bisect --- \u9663\u5217\u4e8c\u5206\u6f14\u7b97\u6cd5 (Array bisection algorithm)": [[147, "module-bisect"]], "\u6548\u80fd\u8003\u91cf": [[147, "performance-notes"]], "\u641c\u5c0b\u4e00\u500b\u5df2\u6392\u5e8f\u7684 list": [[147, "searching-sorted-lists"]], "cmd --- Support for line-oriented command interpreters": [[155, "module-cmd"]], "Cmd \u7269\u4ef6": [[155, "cmd-objects"]], "Cmd Example": [[155, "cmd-example"]], "\u7a3d\u6838\u4e8b\u4ef6\u8868": [[142, "audit-events-table"]], "bz2 --- Support for bzip2 compression": [[149, "module-bz2"]], "(De)compression of files": [[149, "de-compression-of-files"]], "Incremental (de)compression": [[149, "incremental-de-compression"]], "One-shot (de)compression": [[149, "one-shot-de-compression"]], "calendar --- \u65e5\u66c6\u76f8\u95dc\u51fd\u5f0f": [[150, "module-calendar"]], "colorsys --- \u984f\u8272\u7cfb\u7d71\u9593\u7684\u8f49\u63db": [[162, "module-colorsys"]], "base64 \u2014\u2014 Base16\u3001Base32\u3001Base64\u3001Base85 \u8cc7\u6599\u7de8\u78bc": [[143, "module-base64"]], "\u5167\u5efa\u5e38\u6578": [[168, "built-in-constants"]], "\u7531 site module\uff08\u6a21\u7d44\uff09\u6240\u6dfb\u589e\u7684\u5e38\u6578": [[168, "constants-added-by-the-site-module"]], "bdb --- \u5075\u932f\u5668\u6846\u67b6": [[144, "module-bdb"]], "collections --- \u5bb9\u5668\u8cc7\u6599\u578b\u614b": [[160, "module-collections"]], "ChainMap \u7269\u4ef6": [[160, "chainmap-objects"]], "ChainMap \u7bc4\u4f8b\u548c\u7528\u6cd5": [[160, "chainmap-examples-and-recipes"]], "Counter \u7269\u4ef6": [[160, "counter-objects"]], "deque \u7269\u4ef6": [[160, "deque-objects"]], "deque \u7528\u6cd5": [[160, "deque-recipes"]], "defaultdict \u7269\u4ef6": [[160, "defaultdict-objects"]], "defaultdict \u7bc4\u4f8b": [[160, "defaultdict-examples"]], "namedtuple() \u64c1\u6709\u5177\u540d\u6b04\u4f4d\u4e4b tuple \u7684\u5de5\u5ee0\u51fd\u5f0f": [[160, "namedtuple-factory-function-for-tuples-with-named-fields"]], "OrderedDict \u7269\u4ef6": [[160, "ordereddict-objects"]], "OrderedDict \u7bc4\u4f8b\u8207\u7528\u6cd5": [[160, "ordereddict-examples-and-recipes"]], "UserDict \u7269\u4ef6": [[160, "userdict-objects"]], "UserList \u7269\u4ef6": [[160, "userlist-objects"]], "UserString \u7269\u4ef6": [[160, "userstring-objects"]], "concurrent.futures -- \u555f\u52d5\u5e73\u884c\u4efb\u52d9": [[166, "module-concurrent.futures"]], "Executor \u7269\u4ef6": [[166, "executor-objects"]], "ThreadPoolExecutor": [[166, "threadpoolexecutor"]], "ThreadPoolExecutor \u7bc4\u4f8b": [[166, "threadpoolexecutor-example"]], "ProcessPoolExecutor": [[166, "processpoolexecutor"]], "ProcessPoolExecutor \u7bc4\u4f8b": [[166, "processpoolexecutor-example"]], "\u4e26\u884c\u57f7\u884c (Concurrent Execution)": [[164, "concurrent-execution"]], "codecs --- Codec registry and base classes": [[158, "module-codecs"]], "Codec Base Classes": [[158, "codec-base-classes"]], "Error Handlers": [[158, "error-handlers"]], "Stateless Encoding and Decoding": [[158, "stateless-encoding-and-decoding"]], "Incremental Encoding and Decoding": [[158, "incremental-encoding-and-decoding"]], "IncrementalEncoder \u7269\u4ef6": [[158, "incrementalencoder-objects"]], "IncrementalDecoder \u7269\u4ef6": [[158, "incrementaldecoder-objects"]], "Stream Encoding and Decoding": [[158, "stream-encoding-and-decoding"]], "StreamWriter \u7269\u4ef6": [[158, "streamwriter-objects"]], "StreamReader \u7269\u4ef6": [[158, "streamreader-objects"]], "StreamReaderWriter \u7269\u4ef6": [[158, "streamreaderwriter-objects"]], "StreamRecoder \u7269\u4ef6": [[158, "streamrecoder-objects"]], "Encodings and Unicode": [[158, "encodings-and-unicode"]], "Standard Encodings": [[158, "standard-encodings"]], "Python Specific Encodings": [[158, "python-specific-encodings"]], "Text Encodings": [[158, "text-encodings"]], "Binary Transforms": [[158, "binary-transforms"]], "Text Transforms": [[158, "text-transforms"]], "encodings.idna --- Internationalized Domain Names in Applications": [[158, "module-encodings.idna"]], "encodings.mbcs --- Windows ANSI codepage": [[158, "module-encodings.mbcs"]], "encodings.utf_8_sig --- UTF-8 codec with BOM signature": [[158, "module-encodings.utf_8_sig"]], "codeop --- Compile Python code": [[159, "module-codeop"]], "cmath --- \u8907\u6578\u7684\u6578\u5b78\u51fd\u5f0f": [[154, "module-cmath"]], "\u8f49\u63db\u5230\u6975\u5ea7\u6a19\u548c\u5f9e\u6975\u5ea7\u6a19\u505a\u8f49\u63db": [[154, "conversions-to-and-from-polar-coordinates"]], "\u51aa\u51fd\u6578\u548c\u5c0d\u6578\u51fd\u6578": [[154, "power-and-logarithmic-functions"]], "\u4e09\u89d2\u51fd\u6578": [[154, "trigonometric-functions"]], "\u96d9\u66f2\u51fd\u6578": [[154, "hyperbolic-functions"]], "\u5206\u985e\u51fd\u5f0f": [[154, "classification-functions"]], "\u4e8c\u9032\u4f4d\u8cc7\u6599\u670d\u52d9": [[145, "binary-data-services"]], "code --- Interpreter base classes": [[157, "module-code"]], "Interactive Interpreter Objects": [[157, "interactive-interpreter-objects"]], "Interactive Console Objects": [[157, "interactive-console-objects"]], "configparser --- \u8a2d\u5b9a\u6a94\u5256\u6790\u5668": [[167, "module-configparser"]], "Quick Start": [[167, "quick-start"]], "Supported Datatypes": [[167, "supported-datatypes"]], "Fallback Values": [[167, "fallback-values"]], "Supported INI File Structure": [[167, "supported-ini-file-structure"]], "Interpolation of values": [[167, "interpolation-of-values"]], "Mapping Protocol Access": [[167, "mapping-protocol-access"]], "Customizing Parser Behaviour": [[167, "customizing-parser-behaviour"]], "Legacy API Examples": [[167, "legacy-api-examples"]], "ConfigParser \u7269\u4ef6": [[167, "configparser-objects"]], "RawConfigParser \u7269\u4ef6": [[167, "rawconfigparser-objects"]]}, "indexentries": {"pyobject_del (c function)": [[3, "c.PyObject_Del"]], "pyobject_init (c function)": [[3, "c.PyObject_Init"]], "pyobject_initvar (c function)": [[3, "c.PyObject_InitVar"]], "pyobject_new (c macro)": [[3, "c.PyObject_New"]], "pyobject_newvar (c macro)": [[3, "c.PyObject_NewVar"]], "_pyobject_new (c function)": [[3, "c._PyObject_New"]], "_pyobject_newvar (c function)": [[3, "c._PyObject_NewVar"]], "_py_nonestruct (c var)": [[3, "c._Py_NoneStruct"]], "py_major_version (c macro)": [[4, "c.PY_MAJOR_VERSION"]], "py_micro_version (c macro)": [[4, "c.PY_MICRO_VERSION"]], "py_minor_version (c macro)": [[4, "c.PY_MINOR_VERSION"]], "py_release_level (c macro)": [[4, "c.PY_RELEASE_LEVEL"]], "py_release_serial (c macro)": [[4, "c.PY_RELEASE_SERIAL"]], "py_version_hex (c macro)": [[4, "c.PY_VERSION_HEX"]], "py_version (c var)": [[4, "c.Py_Version"]], "pyarg_parse (c function)": [[5, "c.PyArg_Parse"]], "pyarg_parsetuple (c function)": [[5, "c.PyArg_ParseTuple"]], "pyarg_parsetupleandkeywords (c function)": [[5, "c.PyArg_ParseTupleAndKeywords"]], "pyarg_unpacktuple (c function)": [[5, "c.PyArg_UnpackTuple"]], "pyarg_vaparse (c function)": [[5, "c.PyArg_VaParse"]], "pyarg_vaparsetupleandkeywords (c function)": [[5, "c.PyArg_VaParseTupleAndKeywords"]], "pyarg_validatekeywordarguments (c function)": [[5, "c.PyArg_ValidateKeywordArguments"]], "py_buildvalue (c function)": [[5, "c.Py_BuildValue"]], "py_vabuildvalue (c function)": [[5, "c.Py_VaBuildValue"]], "pybool_check (c function)": [[6, "c.PyBool_Check"]], "pybool_fromlong (c function)": [[6, "c.PyBool_FromLong"]], "pybool_type (c var)": [[6, "c.PyBool_Type"]], "py_false (c var)": [[6, "c.Py_False"]], "py_return_false (c macro)": [[6, "c.Py_RETURN_FALSE"]], "py_return_true (c macro)": [[6, "c.Py_RETURN_TRUE"]], "py_true (c var)": [[6, "c.Py_True"]], "(\u8acb\u898b\u7de9\u885d\u5354\u5b9a)": [[7, "index-0"]], "c-contiguous\uff08c \u9023\u7e8c\u7684\uff09": [[7, "index-2"], [87, "index-10"]], "fortran contiguous\uff08fortran \u9023\u7e8c\u7684\uff09": [[7, "index-2"], [87, "index-10"]], "pybuf_any_contiguous (c macro)": [[7, "c.PyBUF_ANY_CONTIGUOUS"]], "pybuf_contig (c macro)": [[7, "c.PyBUF_CONTIG"]], "pybuf_contig_ro (c macro)": [[7, "c.PyBUF_CONTIG_RO"]], "pybuf_c_contiguous (c macro)": [[7, "c.PyBUF_C_CONTIGUOUS"]], "pybuf_format (c macro)": [[7, "c.PyBUF_FORMAT"]], "pybuf_full (c macro)": [[7, "c.PyBUF_FULL"]], "pybuf_full_ro (c macro)": [[7, "c.PyBUF_FULL_RO"]], "pybuf_f_contiguous (c macro)": [[7, "c.PyBUF_F_CONTIGUOUS"]], "pybuf_indirect (c macro)": [[7, "c.PyBUF_INDIRECT"]], "pybuf_max_ndim (c macro)": [[7, "c.PyBUF_MAX_NDIM"]], "pybuf_nd (c macro)": [[7, "c.PyBUF_ND"]], "pybuf_records (c macro)": [[7, "c.PyBUF_RECORDS"]], "pybuf_records_ro (c macro)": [[7, "c.PyBUF_RECORDS_RO"]], "pybuf_simple (c macro)": [[7, "c.PyBUF_SIMPLE"]], "pybuf_strided (c macro)": [[7, "c.PyBUF_STRIDED"]], "pybuf_strided_ro (c macro)": [[7, "c.PyBUF_STRIDED_RO"]], "pybuf_strides (c macro)": [[7, "c.PyBUF_STRIDES"]], "pybuf_writable (c macro)": [[7, "c.PyBUF_WRITABLE"]], "pybufferprocs\uff08c \u578b\u5225\uff09": [[7, "index-1"]], "pybuffer_fillcontiguousstrides (c function)": [[7, "c.PyBuffer_FillContiguousStrides"]], "pybuffer_fillinfo (c function)": [[7, "c.PyBuffer_FillInfo"]], "pybuffer_fromcontiguous (c function)": [[7, "c.PyBuffer_FromContiguous"]], "pybuffer_getpointer (c function)": [[7, "c.PyBuffer_GetPointer"]], "pybuffer_iscontiguous (c function)": [[7, "c.PyBuffer_IsContiguous"]], "pybuffer_release (c function)": [[7, "c.PyBuffer_Release"]], "pybuffer_sizefromformat (c function)": [[7, "c.PyBuffer_SizeFromFormat"]], "pybuffer_tocontiguous (c function)": [[7, "c.PyBuffer_ToContiguous"]], "pyobject_checkbuffer (c function)": [[7, "c.PyObject_CheckBuffer"]], "pyobject_copydata (c function)": [[7, "c.PyObject_CopyData"]], "pyobject_getbuffer (c function)": [[7, "c.PyObject_GetBuffer"]], "py_buffer (c type)": [[7, "c.Py_buffer"]], "py_buffer.buf (c member)": [[7, "c.Py_buffer.buf"]], "py_buffer.format (c member)": [[7, "c.Py_buffer.format"]], "py_buffer.internal (c member)": [[7, "c.Py_buffer.internal"]], "py_buffer.itemsize (c member)": [[7, "c.Py_buffer.itemsize"]], "py_buffer.len (c member)": [[7, "c.Py_buffer.len"]], "py_buffer.ndim (c member)": [[7, "c.Py_buffer.ndim"]], "py_buffer.obj (c member)": [[7, "c.Py_buffer.obj"]], "py_buffer.readonly (c member)": [[7, "c.Py_buffer.readonly"]], "py_buffer.shape (c member)": [[7, "c.Py_buffer.shape"]], "py_buffer.strides (c member)": [[7, "c.Py_buffer.strides"]], "py_buffer.suboffsets (c member)": [[7, "c.Py_buffer.suboffsets"]], "buffer interface\uff08\u7de9\u885d\u4ecb\u9762\uff09": [[7, "index-0"]], "buffer object\uff08\u7de9\u885d\u7269\u4ef6\uff09": [[7, "index-0"]], "buffer protocol\uff08\u7de9\u885d\u5354\u5b9a\uff09": [[7, "index-0"]], "contiguous\uff08\u9023\u7e8c\u7684\uff09": [[7, "index-2"], [87, "term-contiguous"]], "pybytearrayobject (c type)": [[8, "c.PyByteArrayObject"]], "pybytearray_as_string (c function)": [[8, "c.PyByteArray_AS_STRING"]], "pybytearray_asstring (c function)": [[8, "c.PyByteArray_AsString"]], "pybytearray_check (c function)": [[8, "c.PyByteArray_Check"]], "pybytearray_checkexact (c function)": [[8, "c.PyByteArray_CheckExact"]], "pybytearray_concat (c function)": [[8, "c.PyByteArray_Concat"]], "pybytearray_fromobject (c function)": [[8, "c.PyByteArray_FromObject"]], "pybytearray_fromstringandsize (c function)": [[8, "c.PyByteArray_FromStringAndSize"]], "pybytearray_get_size (c function)": [[8, "c.PyByteArray_GET_SIZE"]], "pybytearray_resize (c function)": [[8, "c.PyByteArray_Resize"]], "pybytearray_size (c function)": [[8, "c.PyByteArray_Size"]], "pybytearray_type (c var)": [[8, "c.PyByteArray_Type"]], "bytearray\uff08\u4f4d\u5143\u7d44\u9663\u5217\uff09": [[8, "index-0"], [344, "index-23"], [344, "index-40"], [344, "index-42"], [344, "index-43"], [344, "index-45"], [428, "index-26"]], "object\uff08\u7269\u4ef6\uff09": [[8, "index-0"], [9, "index-0"], [11, "index-0"], [13, "index-0"], [15, "index-0"], [16, "index-0"], [16, "index-1"], [16, "index-2"], [22, "index-0"], [24, "index-0"], [25, "index-0"], [27, "index-0"], [35, "index-3"], [38, "index-0"], [39, "index-0"], [43, "index-0"], [44, "index-0"], [44, "index-1"], [46, "index-0"], [55, "index-0"], [60, "index-0"], [61, "index-0"], [75, "index-0"], [87, "term-object"], [225, "index-12"], [274, "index-1"], [337, "index-0"], [344, "index-11"], [344, "index-19"], [344, "index-22"], [344, "index-23"], [344, "index-25"], [344, "index-26"], [344, "index-27"], [344, "index-28"], [344, "index-29"], [344, "index-40"], [344, "index-41"], [344, "index-42"], [344, "index-51"], [344, "index-52"], [344, "index-56"], [344, "index-59"], [344, "index-61"], [344, "index-62"], [344, "index-8"], [352, "index-8"], [381, "index-0"], [427, "index-11"], [427, "index-28"], [427, "index-42"], [427, "index-6"], [428, "index-0"], [428, "index-10"], [428, "index-12"], [428, "index-13"], [428, "index-14"], [428, "index-15"], [428, "index-17"], [428, "index-20"], [428, "index-22"], [428, "index-25"], [428, "index-27"], [428, "index-28"], [428, "index-29"], [428, "index-30"], [428, "index-31"], [428, "index-33"], [428, "index-34"], [428, "index-37"], [428, "index-42"], [428, "index-43"], [428, "index-44"], [428, "index-47"], [428, "index-51"], [428, "index-53"], [428, "index-57"], [428, "index-59"], [428, "index-6"], [428, "index-63"], [428, "index-66"], [428, "index-7"], [428, "index-8"], [428, "index-80"], [428, "index-9"], [428, "index-99"], [430, "index-15"], [430, "index-16"], [430, "index-17"], [430, "index-20"], [430, "index-22"], [430, "index-31"], [430, "index-35"], [430, "index-40"], [430, "index-42"], [430, "index-45"], [430, "index-47"], [430, "index-52"], [430, "index-53"], [430, "index-54"], [430, "index-55"], [430, "index-7"], [430, "index-80"], [430, "index-92"], [436, "index-10"], [436, "index-11"], [436, "index-28"], [436, "index-3"], [436, "index-4"], [436, "index-9"], [440, "index-0"], [446, "index-0"]], "pybytesobject (c type)": [[9, "c.PyBytesObject"]], "pybytes_as_string (c function)": [[9, "c.PyBytes_AS_STRING"]], "pybytes_asstring (c function)": [[9, "c.PyBytes_AsString"]], "pybytes_asstringandsize (c function)": [[9, "c.PyBytes_AsStringAndSize"]], "pybytes_check (c function)": [[9, "c.PyBytes_Check"]], "pybytes_checkexact (c function)": [[9, "c.PyBytes_CheckExact"]], "pybytes_concat (c function)": [[9, "c.PyBytes_Concat"]], "pybytes_concatanddel (c function)": [[9, "c.PyBytes_ConcatAndDel"]], "pybytes_fromformat (c function)": [[9, "c.PyBytes_FromFormat"]], "pybytes_fromformatv (c function)": [[9, "c.PyBytes_FromFormatV"]], "pybytes_fromobject (c function)": [[9, "c.PyBytes_FromObject"]], "pybytes_fromstring (c function)": [[9, "c.PyBytes_FromString"]], "pybytes_fromstringandsize (c function)": [[9, "c.PyBytes_FromStringAndSize"]], "pybytes_get_size (c function)": [[9, "c.PyBytes_GET_SIZE"]], "pybytes_size (c function)": [[9, "c.PyBytes_Size"]], "pybytes_type (c var)": [[9, "c.PyBytes_Type"]], "_pybytes_resize (c function)": [[9, "c._PyBytes_Resize"]], "bytes\uff08\u4f4d\u5143\u7d44\uff09": [[9, "index-0"], [49, "index-3"], [344, "index-31"], [344, "index-40"], [344, "index-41"], [344, "index-43"], [344, "index-45"], [428, "index-21"], [428, "index-77"]], "pep 590": [[10, "index-2"], [472, "index-113"], [473, "index-119"], [481, "index-37"], [482, "index-18"], [482, "index-8"], [483, "index-103"], [483, "index-104"], [483, "index-137"], [483, "index-138"], [483, "index-164"], [483, "index-171"], [483, "index-180"], [483, "index-181"], [483, "index-183"], [483, "index-210"], [483, "index-36"], [483, "index-67"], [483, "index-77"], [483, "index-83"], [483, "index-88"]], "py_vectorcall_arguments_offset (c macro)": [[10, "c.PY_VECTORCALL_ARGUMENTS_OFFSET"]], "pycallable_check (c function)": [[10, "c.PyCallable_Check"]], "pyobject_call (c function)": [[10, "c.PyObject_Call"]], "pyobject_callfunction (c function)": [[10, "c.PyObject_CallFunction"]], "pyobject_callfunctionobjargs (c function)": [[10, "c.PyObject_CallFunctionObjArgs"]], "pyobject_callmethod (c function)": [[10, "c.PyObject_CallMethod"]], "pyobject_callmethodnoargs (c function)": [[10, "c.PyObject_CallMethodNoArgs"]], "pyobject_callmethodobjargs (c function)": [[10, "c.PyObject_CallMethodObjArgs"]], "pyobject_callmethodonearg (c function)": [[10, "c.PyObject_CallMethodOneArg"]], "pyobject_callnoargs (c function)": [[10, "c.PyObject_CallNoArgs"]], "pyobject_callobject (c function)": [[10, "c.PyObject_CallObject"]], "pyobject_callonearg (c function)": [[10, "c.PyObject_CallOneArg"]], "pyobject_vectorcall (c function)": [[10, "c.PyObject_Vectorcall"]], "pyobject_vectorcalldict (c function)": [[10, "c.PyObject_VectorcallDict"]], "pyobject_vectorcallmethod (c function)": [[10, "c.PyObject_VectorcallMethod"]], "pyvectorcall_call (c function)": [[10, "c.PyVectorcall_Call"]], "pyvectorcall_function (c function)": [[10, "c.PyVectorcall_Function"]], "pyvectorcall_nargs (c function)": [[10, "c.PyVectorcall_NARGS"]], "python enhancement proposals": [[10, "index-2"], [23, "index-9"], [26, "index-0"], [30, "index-0"], [31, "index-3"], [33, "index-39"], [33, "index-40"], [33, "index-41"], [33, "index-47"], [33, "index-48"], [33, "index-69"], [33, "index-70"], [34, "index-0"], [34, "index-17"], [34, "index-33"], [34, "index-34"], [34, "index-37"], [34, "index-38"], [34, "index-7"], [35, "index-37"], [35, "index-38"], [35, "index-39"], [35, "index-40"], [45, "index-10"], [45, "index-7"], [45, "index-8"], [49, "index-4"], [49, "index-5"], [57, "index-3"], [59, "index-1"], [63, "index-3"], [63, "index-4"], [63, "index-5"], [64, "index-0"], [64, "index-1"], [64, "index-2"], [64, "index-3"], [64, "index-4"], [64, "index-5"], [66, "index-3"], [68, "index-23"], [71, "index-1"], [73, "index-0"], [75, "index-2"], [78, "index-2"], [80, "index-0"], [80, "index-5"], [80, "index-6"], [85, "index-2"], [85, "index-3"], [85, "index-7"], [86, "index-2"], [87, "index-100"], [87, "index-101"], [87, "index-102"], [87, "index-103"], [87, "index-104"], [87, "index-105"], [87, "index-106"], [87, "index-107"], [87, "index-108"], [87, "index-109"], [87, "index-110"], [87, "index-111"], [87, "index-112"], [87, "index-77"], [87, "index-78"], [87, "index-79"], [87, "index-80"], [87, "index-81"], [87, "index-82"], [87, "index-83"], [87, "index-84"], [87, "index-85"], [87, "index-86"], [87, "index-87"], [87, "index-88"], [87, "index-89"], [87, "index-90"], [87, "index-91"], [87, "index-92"], [87, "index-93"], [87, "index-94"], [87, "index-95"], [87, "index-96"], [87, "index-97"], [87, "index-98"], [87, "index-99"], [88, "index-2"], [95, "index-0"], [95, "index-2"], [95, "index-4"], [105, "index-0"], [108, "index-0"], [109, "index-0"], [112, "index-0"], [112, "index-1"], [113, "index-24"], [113, "index-25"], [113, "index-26"], [113, "index-27"], [113, "index-28"], [113, "index-29"], [113, "index-30"], [113, "index-31"], [113, "index-32"], [113, "index-33"], [113, "index-34"], [113, "index-35"], [116, "index-4"], [116, "index-5"], [117, "index-4"], [122, "index-14"], [122, "index-15"], [122, "index-16"], [122, "index-17"], [122, "index-18"], [122, "index-19"], [126, "index-0"], [126, "index-1"], [126, "index-2"], [129, "index-2"], [141, "index-3"], [142, "index-3"], [151, "index-8"], [152, "index-4"], [153, "index-3"], [154, "index-3"], [158, "index-2"], [158, "index-5"], [160, "index-10"], [160, "index-11"], [160, "index-8"], [160, "index-9"], [161, "index-0"], [161, "index-1"], [161, "index-2"], [161, "index-3"], [161, "index-4"], [161, "index-7"], [163, "index-0"], [163, "index-2"], [163, "index-3"], [166, "index-2"], [169, "index-2"], [170, "index-2"], [173, "index-1"], [175, "index-7"], [181, "index-0"], [181, "index-1"], [181, "index-2"], [191, "index-0"], [210, "index-2"], [213, "index-10"], [213, "index-11"], [213, "index-12"], [213, "index-14"], [213, "index-6"], [213, "index-7"], [213, "index-8"], [213, "index-9"], [221, "index-0"], [225, "index-10"], [225, "index-14"], [225, "index-15"], [225, "index-18"], [226, "index-0"], [227, "index-2"], [247, "index-7"], [249, "index-2"], [250, "index-0"], [250, "index-1"], [250, "index-10"], [250, "index-11"], [250, "index-12"], [250, "index-13"], [250, "index-14"], [250, "index-16"], [250, "index-17"], [250, "index-18"], [250, "index-19"], [250, "index-2"], [250, "index-20"], [250, "index-21"], [250, "index-22"], [250, "index-23"], [250, "index-24"], [250, "index-25"], [250, "index-26"], [250, "index-3"], [250, "index-4"], [250, "index-5"], [250, "index-6"], [250, "index-7"], [250, "index-8"], [250, "index-9"], [251, "index-0"], [255, "index-0"], [255, "index-1"], [255, "index-2"], [255, "index-3"], [258, "index-1"], [258, "index-8"], [265, "index-1"], [266, "index-6"], [266, "index-7"], [267, "index-1"], [272, "index-0"], [275, "index-0"], [281, "index-3"], [287, "index-2"], [288, "index-12"], [289, "index-2"], [293, "index-22"], [293, "index-24"], [293, "index-25"], [293, "index-27"], [293, "index-44"], [293, "index-5"], [293, "index-53"], [293, "index-55"], [293, "index-6"], [293, "index-7"], [295, "index-4"], [296, "index-3"], [299, "index-2"], [299, "index-3"], [299, "index-4"], [299, "index-8"], [301, "index-2"], [302, "index-0"], [302, "index-10"], [302, "index-11"], [302, "index-2"], [302, "index-3"], [302, "index-5"], [302, "index-6"], [302, "index-7"], [311, "index-1"], [311, "index-2"], [311, "index-4"], [311, "index-5"], [322, "index-0"], [324, "index-1"], [324, "index-2"], [324, "index-3"], [324, "index-5"], [324, "index-6"], [324, "index-7"], [324, "index-8"], [326, "index-0"], [328, "index-0"], [328, "index-3"], [328, "index-4"], [328, "index-5"], [328, "index-6"], [328, "index-7"], [329, "index-0"], [332, "index-2"], [333, "index-0"], [333, "index-1"], [334, "index-9"], [336, "index-3"], [337, "index-1"], [337, "index-10"], [337, "index-11"], [337, "index-12"], [337, "index-13"], [337, "index-2"], [337, "index-4"], [337, "index-5"], [337, "index-7"], [337, "index-8"], [337, "index-9"], [339, "index-2"], [340, "index-0"], [340, "index-10"], [340, "index-11"], [340, "index-12"], [340, "index-14"], [340, "index-2"], [340, "index-3"], [340, "index-4"], [340, "index-5"], [340, "index-8"], [340, "index-9"], [341, "index-28"], [344, "index-49"], [344, "index-50"], [344, "index-57"], [344, "index-58"], [344, "index-60"], [344, "index-71"], [344, "index-72"], [345, "index-1"], [345, "index-19"], [345, "index-20"], [345, "index-21"], [345, "index-22"], [345, "index-23"], [348, "index-0"], [349, "index-2"], [352, "index-0"], [352, "index-13"], [352, "index-14"], [352, "index-15"], [352, "index-16"], [352, "index-19"], [352, "index-20"], [352, "index-25"], [352, "index-26"], [352, "index-30"], [352, "index-31"], [352, "index-32"], [352, "index-42"], [352, "index-43"], [352, "index-44"], [352, "index-9"], [353, "index-0"], [358, "index-0"], [359, "index-5"], [362, "index-3"], [362, "index-4"], [366, "index-8"], [378, "index-0"], [378, "index-1"], [385, "index-0"], [385, "index-1"], [385, "index-2"], [385, "index-3"], [385, "index-5"], [385, "index-6"], [386, "index-10"], [386, "index-100"], [386, "index-101"], [386, "index-102"], [386, "index-103"], [386, "index-104"], [386, "index-105"], [386, "index-106"], [386, "index-107"], [386, "index-11"], [386, "index-12"], [386, "index-15"], [386, "index-16"], [386, "index-17"], [386, "index-18"], [386, "index-19"], [386, "index-20"], [386, "index-21"], [386, "index-22"], [386, "index-23"], [386, "index-24"], [386, "index-25"], [386, "index-26"], [386, "index-27"], [386, "index-28"], [386, "index-29"], [386, "index-31"], [386, "index-32"], [386, "index-34"], [386, "index-36"], [386, "index-37"], [386, "index-38"], [386, "index-39"], [386, "index-40"], [386, "index-41"], [386, "index-42"], [386, "index-43"], [386, "index-44"], [386, "index-45"], [386, "index-46"], [386, "index-47"], [386, "index-48"], [386, "index-49"], [386, "index-50"], [386, "index-51"], [386, "index-52"], [386, "index-53"], [386, "index-54"], [386, "index-55"], [386, "index-56"], [386, "index-57"], [386, "index-58"], [386, "index-59"], [386, "index-60"], [386, "index-61"], [386, "index-62"], [386, "index-63"], [386, "index-64"], [386, "index-65"], [386, "index-66"], [386, "index-67"], [386, "index-68"], [386, "index-69"], [386, "index-70"], [386, "index-72"], [386, "index-73"], [386, "index-74"], [386, "index-75"], [386, "index-76"], [386, "index-77"], [386, "index-9"], [386, "index-93"], [386, "index-94"], [386, "index-95"], [386, "index-96"], [386, "index-97"], [386, "index-98"], [386, "index-99"], [397, "index-3"], [399, "index-9"], [402, "index-1"], [402, "index-2"], [402, "index-4"], [407, "index-38"], [407, "index-39"], [407, "index-40"], [407, "index-41"], [407, "index-42"], [407, "index-44"], [407, "index-45"], [407, "index-46"], [407, "index-47"], [407, "index-49"], [407, "index-50"], [407, "index-51"], [407, "index-52"], [407, "index-53"], [407, "index-54"], [407, "index-55"], [407, "index-56"], [408, "index-7"], [423, "index-0"], [423, "index-1"], [423, "index-2"], [425, "index-0"], [425, "index-1"], [427, "index-17"], [427, "index-19"], [427, "index-20"], [427, "index-24"], [427, "index-25"], [427, "index-26"], [427, "index-30"], [427, "index-33"], [427, "index-36"], [427, "index-37"], [427, "index-38"], [427, "index-39"], [427, "index-40"], [427, "index-41"], [427, "index-44"], [427, "index-45"], [427, "index-46"], [427, "index-47"], [427, "index-52"], [428, "index-107"], [428, "index-108"], [428, "index-109"], [428, "index-111"], [428, "index-115"], [428, "index-62"], [428, "index-85"], [428, "index-87"], [428, "index-90"], [428, "index-93"], [428, "index-94"], [428, "index-95"], [428, "index-96"], [429, "index-11"], [429, "index-12"], [430, "index-14"], [430, "index-19"], [430, "index-21"], [430, "index-26"], [430, "index-27"], [430, "index-28"], [430, "index-29"], [430, "index-30"], [430, "index-51"], [430, "index-79"], [430, "index-87"], [430, "index-89"], [430, "index-94"], [431, "index-0"], [432, "index-1"], [432, "index-11"], [432, "index-12"], [432, "index-13"], [432, "index-14"], [432, "index-15"], [432, "index-19"], [432, "index-2"], [432, "index-20"], [432, "index-21"], [432, "index-22"], [432, "index-23"], [432, "index-24"], [432, "index-25"], [432, "index-26"], [432, "index-27"], [432, "index-6"], [435, "index-1"], [435, "index-11"], [435, "index-12"], [435, "index-21"], [435, "index-26"], [436, "index-13"], [436, "index-16"], [436, "index-17"], [436, "index-41"], [436, "index-42"], [436, "index-46"], [436, "index-48"], [441, "index-15"], [441, "index-16"], [441, "index-17"], [441, "index-18"], [450, "index-16"], [455, "index-0"], [455, "index-10"], [455, "index-16"], [455, "index-39"], [455, "index-40"], [455, "index-52"], [455, "index-53"], [455, "index-56"], [455, "index-57"], [455, "index-7"], [456, "index-0"], [456, "index-1"], [456, "index-34"], [457, "index-0"], [461, "index-0"], [461, "index-16"], [461, "index-17"], [461, "index-19"], [461, "index-21"], [461, "index-38"], [462, "index-0"], [462, "index-1"], [462, "index-2"], [462, "index-3"], [463, "index-0"], [463, "index-1"], [463, "index-10"], [463, "index-12"], [463, "index-13"], [463, "index-14"], [463, "index-15"], [463, "index-16"], [463, "index-17"], [463, "index-2"], [463, "index-3"], [463, "index-4"], [463, "index-5"], [463, "index-6"], [463, "index-7"], [463, "index-8"], [463, "index-9"], [464, "index-0"], [464, "index-1"], [464, "index-10"], [464, "index-11"], [464, "index-12"], [464, "index-13"], [464, "index-14"], [464, "index-16"], [464, "index-2"], [464, "index-22"], [464, "index-25"], [464, "index-26"], [464, "index-3"], [464, "index-4"], [464, "index-5"], [464, "index-6"], [464, "index-8"], [464, "index-9"], [465, "index-0"], [465, "index-1"], [465, "index-10"], [465, "index-11"], [465, "index-12"], [465, "index-13"], [465, "index-14"], [465, "index-15"], [465, "index-16"], [465, "index-17"], [465, "index-18"], [465, "index-19"], [465, "index-2"], [465, "index-20"], [465, "index-21"], [465, "index-22"], [465, "index-23"], [465, "index-3"], [465, "index-4"], [465, "index-5"], [465, "index-6"], [465, "index-7"], [465, "index-9"], [466, "index-0"], [466, "index-1"], [466, "index-10"], [466, "index-11"], [466, "index-12"], [466, "index-13"], [466, "index-14"], [466, "index-15"], [466, "index-16"], [466, "index-17"], [466, "index-2"], [466, "index-3"], [466, "index-4"], [466, "index-5"], [466, "index-6"], [466, "index-8"], [466, "index-9"], [467, "index-0"], [467, "index-1"], [467, "index-10"], [467, "index-11"], [467, "index-12"], [467, "index-13"], [467, "index-14"], [467, "index-15"], [467, "index-16"], [467, "index-17"], [467, "index-18"], [467, "index-19"], [467, "index-2"], [467, "index-21"], [467, "index-24"], [467, "index-25"], [467, "index-26"], [467, "index-27"], [467, "index-28"], [467, "index-29"], [467, "index-3"], [467, "index-30"], [467, "index-31"], [467, "index-4"], [467, "index-5"], [467, "index-6"], [467, "index-7"], [467, "index-8"], [467, "index-9"], [468, "index-0"], [468, "index-1"], [468, "index-10"], [468, "index-11"], [468, "index-12"], [468, "index-14"], [468, "index-15"], [468, "index-16"], [468, "index-17"], [468, "index-18"], [468, "index-19"], [468, "index-2"], [468, "index-25"], [468, "index-3"], [468, "index-7"], [468, "index-8"], [468, "index-9"], [469, "index-0"], [469, "index-13"], [469, "index-14"], [469, "index-15"], [469, "index-16"], [469, "index-17"], [469, "index-18"], [469, "index-19"], [469, "index-2"], [469, "index-20"], [469, "index-21"], [469, "index-22"], [469, "index-23"], [469, "index-3"], [469, "index-4"], [469, "index-5"], [469, "index-6"], [469, "index-7"], [470, "index-0"], [470, "index-1"], [470, "index-10"], [470, "index-11"], [470, "index-12"], [470, "index-13"], [470, "index-14"], [470, "index-15"], [470, "index-16"], [470, "index-17"], [470, "index-18"], [470, "index-19"], [470, "index-2"], [470, "index-20"], [470, "index-22"], [470, "index-23"], [470, "index-24"], [470, "index-25"], [470, "index-26"], [470, "index-27"], [470, "index-28"], [470, "index-29"], [470, "index-3"], [470, "index-30"], [470, "index-31"], [470, "index-32"], [470, "index-34"], [470, "index-35"], [470, "index-38"], [470, "index-39"], [470, "index-4"], [470, "index-5"], [470, "index-6"], [470, "index-7"], [470, "index-8"], [470, "index-9"], [471, "index-0"], [471, "index-1"], [471, "index-2"], [471, "index-3"], [472, "index-100"], [472, "index-101"], [472, "index-102"], [472, "index-103"], [472, "index-104"], [472, "index-105"], [472, "index-106"], [472, "index-107"], [472, "index-108"], [472, "index-109"], [472, "index-110"], [472, "index-111"], [472, "index-112"], [472, "index-113"], [472, "index-114"], [472, "index-115"], [472, "index-116"], [472, "index-117"], [472, "index-118"], [472, "index-40"], [472, "index-80"], [472, "index-81"], [472, "index-82"], [472, "index-83"], [472, "index-84"], [472, "index-85"], [472, "index-86"], [472, "index-87"], [472, "index-88"], [472, "index-89"], [472, "index-90"], [472, "index-91"], [472, "index-92"], [472, "index-93"], [472, "index-94"], [472, "index-95"], [472, "index-96"], [472, "index-97"], [472, "index-99"], [473, "index-100"], [473, "index-101"], [473, "index-102"], [473, "index-104"], [473, "index-105"], [473, "index-106"], [473, "index-107"], [473, "index-108"], [473, "index-109"], [473, "index-110"], [473, "index-111"], [473, "index-112"], [473, "index-113"], [473, "index-114"], [473, "index-115"], [473, "index-116"], [473, "index-117"], [473, "index-118"], [473, "index-119"], [473, "index-120"], [473, "index-121"], [473, "index-41"], [473, "index-82"], [473, "index-84"], [473, "index-85"], [473, "index-86"], [473, "index-87"], [473, "index-89"], [473, "index-90"], [473, "index-91"], [473, "index-92"], [473, "index-93"], [473, "index-94"], [473, "index-95"], [473, "index-96"], [473, "index-97"], [473, "index-98"], [473, "index-99"], [474, "index-1"], [474, "index-10"], [474, "index-11"], [474, "index-12"], [474, "index-13"], [474, "index-15"], [474, "index-16"], [474, "index-17"], [474, "index-2"], [474, "index-20"], [474, "index-21"], [474, "index-22"], [474, "index-24"], [474, "index-25"], [474, "index-26"], [474, "index-27"], [474, "index-28"], [474, "index-29"], [474, "index-3"], [474, "index-30"], [474, "index-31"], [474, "index-32"], [474, "index-33"], [474, "index-34"], [474, "index-35"], [474, "index-36"], [474, "index-37"], [474, "index-38"], [474, "index-39"], [474, "index-4"], [474, "index-40"], [474, "index-41"], [474, "index-42"], [474, "index-43"], [474, "index-44"], [474, "index-45"], [474, "index-46"], [474, "index-48"], [474, "index-56"], [474, "index-57"], [474, "index-58"], [474, "index-59"], [474, "index-6"], [474, "index-60"], [474, "index-61"], [474, "index-8"], [474, "index-9"], [475, "index-0"], [475, "index-1"], [475, "index-14"], [475, "index-2"], [475, "index-3"], [475, "index-4"], [475, "index-5"], [475, "index-6"], [475, "index-9"], [476, "index-10"], [476, "index-12"], [476, "index-13"], [476, "index-14"], [476, "index-15"], [476, "index-18"], [476, "index-2"], [476, "index-20"], [476, "index-21"], [476, "index-22"], [476, "index-29"], [476, "index-3"], [476, "index-30"], [476, "index-32"], [476, "index-33"], [476, "index-36"], [476, "index-37"], [476, "index-38"], [476, "index-4"], [476, "index-51"], [476, "index-52"], [476, "index-53"], [476, "index-54"], [476, "index-55"], [476, "index-56"], [476, "index-57"], [476, "index-58"], [476, "index-59"], [476, "index-6"], [476, "index-60"], [476, "index-61"], [476, "index-62"], [476, "index-8"], [477, "index-0"], [477, "index-1"], [477, "index-10"], [477, "index-11"], [477, "index-12"], [477, "index-13"], [477, "index-14"], [477, "index-15"], [477, "index-16"], [477, "index-17"], [477, "index-18"], [477, "index-19"], [477, "index-2"], [477, "index-20"], [477, "index-21"], [477, "index-22"], [477, "index-23"], [477, "index-24"], [477, "index-25"], [477, "index-26"], [477, "index-27"], [477, "index-28"], [477, "index-29"], [477, "index-3"], [477, "index-30"], [477, "index-31"], [477, "index-32"], [477, "index-33"], [477, "index-34"], [477, "index-35"], [477, "index-36"], [477, "index-37"], [477, "index-38"], [477, "index-39"], [477, "index-4"], [477, "index-42"], [477, "index-43"], [477, "index-44"], [477, "index-45"], [477, "index-46"], [477, "index-47"], [477, "index-48"], [477, "index-49"], [477, "index-5"], [477, "index-51"], [477, "index-52"], [477, "index-6"], [477, "index-7"], [477, "index-8"], [477, "index-9"], [478, "index-0"], [478, "index-1"], [478, "index-10"], [478, "index-11"], [478, "index-12"], [478, "index-13"], [478, "index-14"], [478, "index-15"], [478, "index-16"], [478, "index-17"], [478, "index-18"], [478, "index-19"], [478, "index-2"], [478, "index-20"], [478, "index-21"], [478, "index-22"], [478, "index-23"], [478, "index-24"], [478, "index-25"], [478, "index-26"], [478, "index-27"], [478, "index-28"], [478, "index-29"], [478, "index-3"], [478, "index-30"], [478, "index-4"], [478, "index-45"], [478, "index-46"], [478, "index-47"], [478, "index-48"], [478, "index-49"], [478, "index-5"], [478, "index-50"], [478, "index-52"], [478, "index-6"], [478, "index-7"], [478, "index-8"], [478, "index-9"], [479, "index-0"], [479, "index-1"], [479, "index-10"], [479, "index-11"], [479, "index-12"], [479, "index-13"], [479, "index-14"], [479, "index-15"], [479, "index-16"], [479, "index-17"], [479, "index-18"], [479, "index-20"], [479, "index-22"], [479, "index-23"], [479, "index-24"], [479, "index-25"], [479, "index-26"], [479, "index-28"], [479, "index-29"], [479, "index-3"], [479, "index-30"], [479, "index-31"], [479, "index-32"], [479, "index-33"], [479, "index-34"], [479, "index-35"], [479, "index-36"], [479, "index-37"], [479, "index-4"], [479, "index-5"], [479, "index-6"], [479, "index-7"], [479, "index-8"], [479, "index-9"], [480, "index-0"], [480, "index-1"], [480, "index-10"], [480, "index-11"], [480, "index-13"], [480, "index-14"], [480, "index-15"], [480, "index-17"], [480, "index-18"], [480, "index-19"], [480, "index-2"], [480, "index-20"], [480, "index-21"], [480, "index-22"], [480, "index-23"], [480, "index-24"], [480, "index-28"], [480, "index-29"], [480, "index-3"], [480, "index-30"], [480, "index-32"], [480, "index-33"], [480, "index-37"], [480, "index-38"], [480, "index-41"], [480, "index-42"], [480, "index-5"], [480, "index-6"], [480, "index-7"], [480, "index-9"], [481, "index-10"], [481, "index-11"], [481, "index-12"], [481, "index-15"], [481, "index-16"], [481, "index-17"], [481, "index-18"], [481, "index-19"], [481, "index-23"], [481, "index-24"], [481, "index-26"], [481, "index-33"], [481, "index-34"], [481, "index-35"], [481, "index-36"], [481, "index-37"], [481, "index-38"], [481, "index-5"], [481, "index-8"], [482, "index-0"], [482, "index-1"], [482, "index-10"], [482, "index-11"], [482, "index-12"], [482, "index-13"], [482, "index-14"], [482, "index-15"], [482, "index-16"], [482, "index-17"], [482, "index-18"], [482, "index-19"], [482, "index-2"], [482, "index-20"], [482, "index-23"], [482, "index-24"], [482, "index-25"], [482, "index-26"], [482, "index-27"], [482, "index-29"], [482, "index-3"], [482, "index-4"], [482, "index-5"], [482, "index-6"], [482, "index-7"], [482, "index-8"], [482, "index-9"], [483, "index-1"], [483, "index-10"], [483, "index-100"], [483, "index-101"], [483, "index-102"], [483, "index-103"], [483, "index-104"], [483, "index-105"], [483, "index-107"], [483, "index-108"], [483, "index-109"], [483, "index-11"], [483, "index-110"], [483, "index-111"], [483, "index-112"], [483, "index-113"], [483, "index-114"], [483, "index-115"], [483, "index-116"], [483, "index-117"], [483, "index-118"], [483, "index-119"], [483, "index-12"], [483, "index-120"], [483, "index-121"], [483, "index-122"], [483, "index-123"], [483, "index-124"], [483, "index-125"], [483, "index-126"], [483, "index-127"], [483, "index-128"], [483, "index-129"], [483, "index-13"], [483, "index-130"], [483, "index-131"], [483, "index-132"], [483, "index-133"], [483, "index-134"], [483, "index-135"], [483, "index-137"], [483, "index-138"], [483, "index-139"], [483, "index-14"], [483, "index-140"], [483, "index-141"], [483, "index-142"], [483, "index-143"], [483, "index-144"], [483, "index-145"], [483, "index-146"], [483, "index-147"], [483, "index-148"], [483, "index-149"], [483, "index-15"], [483, "index-150"], [483, "index-151"], [483, "index-153"], [483, "index-154"], [483, "index-155"], [483, "index-156"], [483, "index-157"], [483, "index-158"], [483, "index-159"], [483, "index-16"], [483, "index-160"], [483, "index-161"], [483, "index-162"], [483, "index-163"], [483, "index-164"], [483, "index-165"], [483, "index-166"], [483, "index-167"], [483, "index-168"], [483, "index-169"], [483, "index-17"], [483, "index-170"], [483, "index-171"], [483, "index-172"], [483, "index-173"], [483, "index-174"], [483, "index-175"], [483, "index-177"], [483, "index-178"], [483, "index-179"], [483, "index-18"], [483, "index-180"], [483, "index-181"], [483, "index-182"], [483, "index-183"], [483, "index-184"], [483, "index-185"], [483, "index-186"], [483, "index-187"], [483, "index-188"], [483, "index-189"], [483, "index-19"], [483, "index-190"], [483, "index-192"], [483, "index-193"], [483, "index-194"], [483, "index-195"], [483, "index-196"], [483, "index-197"], [483, "index-198"], [483, "index-2"], [483, "index-20"], [483, "index-202"], [483, "index-204"], [483, "index-205"], [483, "index-206"], [483, "index-208"], [483, "index-209"], [483, "index-21"], [483, "index-210"], [483, "index-213"], [483, "index-215"], [483, "index-219"], [483, "index-22"], [483, "index-220"], [483, "index-221"], [483, "index-222"], [483, "index-223"], [483, "index-224"], [483, "index-227"], [483, "index-228"], [483, "index-229"], [483, "index-23"], [483, "index-232"], [483, "index-233"], [483, "index-234"], [483, "index-237"], [483, "index-238"], [483, "index-239"], [483, "index-24"], [483, "index-240"], [483, "index-241"], [483, "index-242"], [483, "index-243"], [483, "index-245"], [483, "index-246"], [483, "index-247"], [483, "index-248"], [483, "index-249"], [483, "index-25"], [483, "index-250"], [483, "index-251"], [483, "index-252"], [483, "index-253"], [483, "index-254"], [483, "index-257"], [483, "index-258"], [483, "index-259"], [483, "index-26"], [483, "index-260"], [483, "index-261"], [483, "index-262"], [483, "index-263"], [483, "index-264"], [483, "index-265"], [483, "index-266"], [483, "index-267"], [483, "index-268"], [483, "index-269"], [483, "index-27"], [483, "index-270"], [483, "index-271"], [483, "index-272"], [483, "index-273"], [483, "index-274"], [483, "index-275"], [483, "index-276"], [483, "index-277"], [483, "index-278"], [483, "index-279"], [483, "index-28"], [483, "index-280"], [483, "index-281"], [483, "index-282"], [483, "index-283"], [483, "index-284"], [483, "index-287"], [483, "index-288"], [483, "index-289"], [483, "index-29"], [483, "index-290"], [483, "index-291"], [483, "index-292"], [483, "index-293"], [483, "index-294"], [483, "index-295"], [483, "index-296"], [483, "index-297"], [483, "index-298"], [483, "index-299"], [483, "index-3"], [483, "index-30"], [483, "index-300"], [483, "index-301"], [483, "index-302"], [483, "index-303"], [483, "index-304"], [483, "index-31"], [483, "index-32"], [483, "index-36"], [483, "index-37"], [483, "index-38"], [483, "index-39"], [483, "index-4"], [483, "index-41"], [483, "index-42"], [483, "index-44"], [483, "index-45"], [483, "index-46"], [483, "index-47"], [483, "index-48"], [483, "index-5"], [483, "index-51"], [483, "index-52"], [483, "index-55"], [483, "index-56"], [483, "index-57"], [483, "index-58"], [483, "index-59"], [483, "index-6"], [483, "index-60"], [483, "index-61"], [483, "index-62"], [483, "index-64"], [483, "index-65"], [483, "index-66"], [483, "index-67"], [483, "index-68"], [483, "index-69"], [483, "index-7"], [483, "index-70"], [483, "index-71"], [483, "index-72"], [483, "index-73"], [483, "index-74"], [483, "index-76"], [483, "index-77"], [483, "index-79"], [483, "index-8"], [483, "index-80"], [483, "index-81"], [483, "index-82"], [483, "index-83"], [483, "index-85"], [483, "index-87"], [483, "index-88"], [483, "index-89"], [483, "index-9"], [483, "index-91"], [483, "index-94"], [483, "index-95"], [483, "index-96"], [483, "index-97"], [483, "index-98"], [483, "index-99"], [484, "index-23"]], "vectorcallfunc (c type)": [[10, "c.vectorcallfunc"]], "capsule": [[11, "index-0"]], "pycapsule (c type)": [[11, "c.PyCapsule"]], "pycapsule_checkexact (c function)": [[11, "c.PyCapsule_CheckExact"]], "pycapsule_destructor (c type)": [[11, "c.PyCapsule_Destructor"]], "pycapsule_getcontext (c function)": [[11, "c.PyCapsule_GetContext"]], "pycapsule_getdestructor (c function)": [[11, "c.PyCapsule_GetDestructor"]], "pycapsule_getname (c function)": [[11, "c.PyCapsule_GetName"]], "pycapsule_getpointer (c function)": [[11, "c.PyCapsule_GetPointer"]], "pycapsule_import (c function)": [[11, "c.PyCapsule_Import"]], "pycapsule_isvalid (c function)": [[11, "c.PyCapsule_IsValid"]], "pycapsule_new (c function)": [[11, "c.PyCapsule_New"]], "pycapsule_setcontext (c function)": [[11, "c.PyCapsule_SetContext"]], "pycapsule_setdestructor (c function)": [[11, "c.PyCapsule_SetDestructor"]], "pycapsule_setname (c function)": [[11, "c.PyCapsule_SetName"]], "pycapsule_setpointer (c function)": [[11, "c.PyCapsule_SetPointer"]], "pycellobject (c type)": [[12, "c.PyCellObject"]], "pycell_check (c function)": [[12, "c.PyCell_Check"]], "pycell_get (c function)": [[12, "c.PyCell_GET"], [12, "c.PyCell_Get"]], "pycell_new (c function)": [[12, "c.PyCell_New"]], "pycell_set (c function)": [[12, "c.PyCell_SET"], [12, "c.PyCell_Set"]], "pycell_type (c var)": [[12, "c.PyCell_Type"]], "pycodeevent (c type)": [[13, "c.PyCodeEvent"]], "pycodeobject (c type)": [[13, "c.PyCodeObject"]], "pycode_addwatcher (c function)": [[13, "c.PyCode_AddWatcher"]], "pycode_addr2line (c function)": [[13, "c.PyCode_Addr2Line"]], "pycode_addr2location (c function)": [[13, "c.PyCode_Addr2Location"]], "pycode_check (c function)": [[13, "c.PyCode_Check"]], "pycode_clearwatcher (c function)": [[13, "c.PyCode_ClearWatcher"]], "pycode_getcellvars (c function)": [[13, "c.PyCode_GetCellvars"]], "pycode_getcode (c function)": [[13, "c.PyCode_GetCode"]], "pycode_getfirstfree (c function)": [[13, "c.PyCode_GetFirstFree"]], "pycode_getfreevars (c function)": [[13, "c.PyCode_GetFreevars"]], "pycode_getnumfree (c function)": [[13, "c.PyCode_GetNumFree"]], "pycode_getvarnames (c function)": [[13, "c.PyCode_GetVarnames"]], "pycode_newempty (c function)": [[13, "c.PyCode_NewEmpty"]], "pycode_newwithposonlyargs\uff08c \u51fd\u5f0f\uff09": [[13, "index-2"]], "pycode_new\uff08c \u51fd\u5f0f\uff09": [[13, "index-1"]], "pycode_type (c var)": [[13, "c.PyCode_Type"]], "pycode_watchcallback (c type)": [[13, "c.PyCode_WatchCallback"]], "pyunstable_code_getextra (c function)": [[13, "c.PyUnstable_Code_GetExtra"]], "pyunstable_code_new (c function)": [[13, "c.PyUnstable_Code_New"]], "pyunstable_code_newwithposonlyargs (c function)": [[13, "c.PyUnstable_Code_NewWithPosOnlyArgs"]], "pyunstable_code_setextra (c function)": [[13, "c.PyUnstable_Code_SetExtra"]], "pyunstable_eval_requestcodeextraindex (c function)": [[13, "c.PyUnstable_Eval_RequestCodeExtraIndex"]], "_pycode_getextra\uff08c \u51fd\u5f0f\uff09": [[13, "index-4"]], "_pycode_setextra\uff08c \u51fd\u5f0f\uff09": [[13, "index-5"]], "_pyeval_requestcodeextraindex\uff08c \u51fd\u5f0f\uff09": [[13, "index-3"]], "code object\uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\uff09": [[13, "index-0"], [274, "index-1"], [344, "index-62"], [428, "index-57"]], "code\uff08\u7a0b\u5f0f\u78bc\uff09": [[13, "index-0"], [274, "index-1"], [344, "index-62"], [428, "index-57"], [429, "index-0"]], "pycodec_backslashreplaceerrors (c function)": [[14, "c.PyCodec_BackslashReplaceErrors"]], "pycodec_decode (c function)": [[14, "c.PyCodec_Decode"]], "pycodec_decoder (c function)": [[14, "c.PyCodec_Decoder"]], "pycodec_encode (c function)": [[14, "c.PyCodec_Encode"]], "pycodec_encoder (c function)": [[14, "c.PyCodec_Encoder"]], "pycodec_ignoreerrors (c function)": [[14, "c.PyCodec_IgnoreErrors"]], "pycodec_incrementaldecoder (c function)": [[14, "c.PyCodec_IncrementalDecoder"]], "pycodec_incrementalencoder (c function)": [[14, "c.PyCodec_IncrementalEncoder"]], "pycodec_knownencoding (c function)": [[14, "c.PyCodec_KnownEncoding"]], "pycodec_lookuperror (c function)": [[14, "c.PyCodec_LookupError"]], "pycodec_namereplaceerrors (c function)": [[14, "c.PyCodec_NameReplaceErrors"]], "pycodec_register (c function)": [[14, "c.PyCodec_Register"]], "pycodec_registererror (c function)": [[14, "c.PyCodec_RegisterError"]], "pycodec_replaceerrors (c function)": [[14, "c.PyCodec_ReplaceErrors"]], "pycodec_streamreader (c function)": [[14, "c.PyCodec_StreamReader"]], "pycodec_streamwriter (c function)": [[14, "c.PyCodec_StreamWriter"]], "pycodec_stricterrors (c function)": [[14, "c.PyCodec_StrictErrors"]], "pycodec_unregister (c function)": [[14, "c.PyCodec_Unregister"]], "pycodec_xmlcharrefreplaceerrors (c function)": [[14, "c.PyCodec_XMLCharRefReplaceErrors"]], "pycomplexobject (c type)": [[15, "c.PyComplexObject"]], "pycomplex_asccomplex (c function)": [[15, "c.PyComplex_AsCComplex"]], "pycomplex_check (c function)": [[15, "c.PyComplex_Check"]], "pycomplex_checkexact (c function)": [[15, "c.PyComplex_CheckExact"]], "pycomplex_fromccomplex (c function)": [[15, "c.PyComplex_FromCComplex"]], "pycomplex_fromdoubles (c function)": [[15, "c.PyComplex_FromDoubles"]], "pycomplex_imagasdouble (c function)": [[15, "c.PyComplex_ImagAsDouble"]], "pycomplex_realasdouble (c function)": [[15, "c.PyComplex_RealAsDouble"]], "pycomplex_type (c var)": [[15, "c.PyComplex_Type"]], "py_complex (c type)": [[15, "c.Py_complex"]], "_py_c_diff (c function)": [[15, "c._Py_c_diff"]], "_py_c_neg (c function)": [[15, "c._Py_c_neg"]], "_py_c_pow (c function)": [[15, "c._Py_c_pow"]], "_py_c_prod (c function)": [[15, "c._Py_c_prod"]], "_py_c_quot (c function)": [[15, "c._Py_c_quot"]], "_py_c_sum (c function)": [[15, "c._Py_c_sum"]], "complex number\uff08\u8907\u6578\uff09": [[15, "index-0"], [87, "term-complex-number"], [344, "index-11"], [344, "index-12"]], "mapping\uff08\u5c0d\u6620\uff09": [[16, "index-2"], [87, "term-mapping"], [344, "index-52"], [428, "index-30"], [428, "index-53"], [430, "index-42"], [436, "index-11"]], "numeric\uff08\u6578\u503c\uff09": [[16, "index-0"], [344, "index-11"], [344, "index-12"], [344, "index-14"], [344, "index-15"], [344, "index-8"], [428, "index-53"], [428, "index-9"]], "sequence\uff08\u5e8f\u5217\uff09": [[16, "index-1"], [87, "term-sequence"], [344, "index-18"], [344, "index-19"], [344, "index-20"], [344, "index-22"], [344, "index-23"], [344, "index-24"], [427, "index-6"], [428, "index-15"], [428, "index-53"], [430, "index-42"], [430, "index-45"], [430, "index-80"], [436, "index-10"]], "pycontext (c type)": [[17, "c.PyContext"]], "pycontexttoken (c type)": [[17, "c.PyContextToken"]], "pycontexttoken_checkexact (c function)": [[17, "c.PyContextToken_CheckExact"]], "pycontexttoken_type (c var)": [[17, "c.PyContextToken_Type"]], "pycontextvar (c type)": [[17, "c.PyContextVar"]], "pycontextvar_checkexact (c function)": [[17, "c.PyContextVar_CheckExact"]], "pycontextvar_get (c function)": [[17, "c.PyContextVar_Get"]], "pycontextvar_new (c function)": [[17, "c.PyContextVar_New"]], "pycontextvar_reset (c function)": [[17, "c.PyContextVar_Reset"]], "pycontextvar_set (c function)": [[17, "c.PyContextVar_Set"]], "pycontextvar_type (c var)": [[17, "c.PyContextVar_Type"]], "pycontext_checkexact (c function)": [[17, "c.PyContext_CheckExact"]], "pycontext_copy (c function)": [[17, "c.PyContext_Copy"]], "pycontext_copycurrent (c function)": [[17, "c.PyContext_CopyCurrent"]], "pycontext_enter (c function)": [[17, "c.PyContext_Enter"]], "pycontext_exit (c function)": [[17, "c.PyContext_Exit"]], "pycontext_new (c function)": [[17, "c.PyContext_New"]], "pycontext_type (c var)": [[17, "c.PyContext_Type"]], "pyos_double_to_string (c function)": [[18, "c.PyOS_double_to_string"]], "pyos_snprintf (c function)": [[18, "c.PyOS_snprintf"]], "pyos_stricmp (c function)": [[18, "c.PyOS_stricmp"]], "pyos_string_to_double (c function)": [[18, "c.PyOS_string_to_double"]], "pyos_strnicmp (c function)": [[18, "c.PyOS_strnicmp"]], "pyos_strtol (c function)": [[18, "c.PyOS_strtol"]], "pyos_strtoul (c function)": [[18, "c.PyOS_strtoul"]], "pyos_vsnprintf (c function)": [[18, "c.PyOS_vsnprintf"]], "pycoroobject (c type)": [[19, "c.PyCoroObject"]], "pycoro_checkexact (c function)": [[19, "c.PyCoro_CheckExact"]], "pycoro_new (c function)": [[19, "c.PyCoro_New"]], "pycoro_type (c var)": [[19, "c.PyCoro_Type"]], "pydatetime_check (c function)": [[20, "c.PyDateTime_Check"]], "pydatetime_checkexact (c function)": [[20, "c.PyDateTime_CheckExact"]], "pydatetime_date_get_fold (c function)": [[20, "c.PyDateTime_DATE_GET_FOLD"]], "pydatetime_date_get_hour (c function)": [[20, "c.PyDateTime_DATE_GET_HOUR"]], "pydatetime_date_get_microsecond (c function)": [[20, "c.PyDateTime_DATE_GET_MICROSECOND"]], "pydatetime_date_get_minute (c function)": [[20, "c.PyDateTime_DATE_GET_MINUTE"]], "pydatetime_date_get_second (c function)": [[20, "c.PyDateTime_DATE_GET_SECOND"]], "pydatetime_date_get_tzinfo (c function)": [[20, "c.PyDateTime_DATE_GET_TZINFO"]], "pydatetime_delta_get_days (c function)": [[20, "c.PyDateTime_DELTA_GET_DAYS"]], "pydatetime_delta_get_microseconds (c function)": [[20, "c.PyDateTime_DELTA_GET_MICROSECONDS"]], "pydatetime_delta_get_seconds (c function)": [[20, "c.PyDateTime_DELTA_GET_SECONDS"]], "pydatetime_date (c type)": [[20, "c.PyDateTime_Date"]], "pydatetime_datetime (c type)": [[20, "c.PyDateTime_DateTime"]], "pydatetime_datetimetype (c var)": [[20, "c.PyDateTime_DateTimeType"]], "pydatetime_datetype (c var)": [[20, "c.PyDateTime_DateType"]], "pydatetime_delta (c type)": [[20, "c.PyDateTime_Delta"]], "pydatetime_deltatype (c var)": [[20, "c.PyDateTime_DeltaType"]], "pydatetime_fromdateandtime (c function)": [[20, "c.PyDateTime_FromDateAndTime"]], "pydatetime_fromdateandtimeandfold (c function)": [[20, "c.PyDateTime_FromDateAndTimeAndFold"]], "pydatetime_fromtimestamp (c function)": [[20, "c.PyDateTime_FromTimestamp"]], "pydatetime_get_day (c function)": [[20, "c.PyDateTime_GET_DAY"]], "pydatetime_get_month (c function)": [[20, "c.PyDateTime_GET_MONTH"]], "pydatetime_get_year (c function)": [[20, "c.PyDateTime_GET_YEAR"]], "pydatetime_time_get_fold (c function)": [[20, "c.PyDateTime_TIME_GET_FOLD"]], "pydatetime_time_get_hour (c function)": [[20, "c.PyDateTime_TIME_GET_HOUR"]], "pydatetime_time_get_microsecond (c function)": [[20, "c.PyDateTime_TIME_GET_MICROSECOND"]], "pydatetime_time_get_minute (c function)": [[20, "c.PyDateTime_TIME_GET_MINUTE"]], "pydatetime_time_get_second (c function)": [[20, "c.PyDateTime_TIME_GET_SECOND"]], "pydatetime_time_get_tzinfo (c function)": [[20, "c.PyDateTime_TIME_GET_TZINFO"]], "pydatetime_tzinfotype (c var)": [[20, "c.PyDateTime_TZInfoType"]], "pydatetime_time (c type)": [[20, "c.PyDateTime_Time"]], "pydatetime_timetype (c var)": [[20, "c.PyDateTime_TimeType"]], "pydatetime_timezone_utc (c var)": [[20, "c.PyDateTime_TimeZone_UTC"]], "pydate_check (c function)": [[20, "c.PyDate_Check"]], "pydate_checkexact (c function)": [[20, "c.PyDate_CheckExact"]], "pydate_fromdate (c function)": [[20, "c.PyDate_FromDate"]], "pydate_fromtimestamp (c function)": [[20, "c.PyDate_FromTimestamp"]], "pydelta_check (c function)": [[20, "c.PyDelta_Check"]], "pydelta_checkexact (c function)": [[20, "c.PyDelta_CheckExact"]], "pydelta_fromdsu (c function)": [[20, "c.PyDelta_FromDSU"]], "pytzinfo_check (c function)": [[20, "c.PyTZInfo_Check"]], "pytzinfo_checkexact (c function)": [[20, "c.PyTZInfo_CheckExact"]], "pytimezone_fromoffset (c function)": [[20, "c.PyTimeZone_FromOffset"]], "pytimezone_fromoffsetandname (c function)": [[20, "c.PyTimeZone_FromOffsetAndName"]], "pytime_check (c function)": [[20, "c.PyTime_Check"]], "pytime_checkexact (c function)": [[20, "c.PyTime_CheckExact"]], "pytime_fromtime (c function)": [[20, "c.PyTime_FromTime"]], "pytime_fromtimeandfold (c function)": [[20, "c.PyTime_FromTimeAndFold"]], "pydescr_isdata (c function)": [[21, "c.PyDescr_IsData"]], "pydescr_newclassmethod (c function)": [[21, "c.PyDescr_NewClassMethod"]], "pydescr_newgetset (c function)": [[21, "c.PyDescr_NewGetSet"]], "pydescr_newmember (c function)": [[21, "c.PyDescr_NewMember"]], "pydescr_newmethod (c function)": [[21, "c.PyDescr_NewMethod"]], "pydescr_newwrapper (c function)": [[21, "c.PyDescr_NewWrapper"]], "pyproperty_type (c var)": [[21, "c.PyProperty_Type"]], "pywrapper_new (c function)": [[21, "c.PyWrapper_New"]], "pydictobject (c type)": [[22, "c.PyDictObject"]], "pydictproxy_new (c function)": [[22, "c.PyDictProxy_New"]], "pydict_addwatcher (c function)": [[22, "c.PyDict_AddWatcher"]], "pydict_check (c function)": [[22, "c.PyDict_Check"]], "pydict_checkexact (c function)": [[22, "c.PyDict_CheckExact"]], "pydict_clear (c function)": [[22, "c.PyDict_Clear"]], "pydict_clearwatcher (c function)": [[22, "c.PyDict_ClearWatcher"]], "pydict_contains (c function)": [[22, "c.PyDict_Contains"]], "pydict_copy (c function)": [[22, "c.PyDict_Copy"]], "pydict_delitem (c function)": [[22, "c.PyDict_DelItem"]], "pydict_delitemstring (c function)": [[22, "c.PyDict_DelItemString"]], "pydict_getitem (c function)": [[22, "c.PyDict_GetItem"]], "pydict_getitemstring (c function)": [[22, "c.PyDict_GetItemString"]], "pydict_getitemwitherror (c function)": [[22, "c.PyDict_GetItemWithError"]], "pydict_items (c function)": [[22, "c.PyDict_Items"]], "pydict_keys (c function)": [[22, "c.PyDict_Keys"]], "pydict_merge (c function)": [[22, "c.PyDict_Merge"]], "pydict_mergefromseq2 (c function)": [[22, "c.PyDict_MergeFromSeq2"]], "pydict_new (c function)": [[22, "c.PyDict_New"]], "pydict_next (c function)": [[22, "c.PyDict_Next"]], "pydict_setdefault (c function)": [[22, "c.PyDict_SetDefault"]], "pydict_setitem (c function)": [[22, "c.PyDict_SetItem"]], "pydict_setitemstring (c function)": [[22, "c.PyDict_SetItemString"]], "pydict_size (c function)": [[22, "c.PyDict_Size"]], "pydict_type (c var)": [[22, "c.PyDict_Type"]], "pydict_unwatch (c function)": [[22, "c.PyDict_Unwatch"]], "pydict_update (c function)": [[22, "c.PyDict_Update"]], "pydict_values (c function)": [[22, "c.PyDict_Values"]], "pydict_watch (c function)": [[22, "c.PyDict_Watch"]], "pydict_watchcallback (c type)": [[22, "c.PyDict_WatchCallback"]], "pydict_watchevent (c type)": [[22, "c.PyDict_WatchEvent"]], "built-in function\uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[22, "index-1"], [31, "index-1"], [31, "index-2"], [38, "index-1"], [38, "index-2"], [40, "index-0"], [47, "index-0"], [47, "index-1"], [47, "index-2"], [47, "index-3"], [47, "index-4"], [47, "index-5"], [55, "index-1"], [58, "index-0"], [58, "index-1"], [63, "index-1"], [63, "index-2"], [75, "index-3"], [191, "index-1"], [225, "index-2"], [307, "index-0"], [307, "index-2"], [344, "index-13"], [344, "index-20"], [344, "index-22"], [344, "index-52"], [344, "index-63"], [344, "index-64"], [344, "index-65"], [385, "index-4"], [427, "index-8"], [428, "index-1"], [428, "index-100"], [428, "index-101"], [428, "index-102"], [428, "index-103"], [428, "index-104"], [428, "index-105"], [428, "index-15"], [428, "index-19"], [428, "index-27"], [428, "index-30"], [428, "index-42"], [428, "index-55"], [428, "index-69"], [428, "index-77"], [428, "index-78"], [428, "index-80"], [428, "index-86"], [428, "index-98"], [430, "index-53"], [436, "index-3"], [436, "index-44"], [437, "index-6"], [446, "index-0"], [451, "index-0"]], "dictionary\uff08\u5b57\u5178\uff09": [[22, "index-0"], [87, "term-dictionary"], [344, "index-52"], [428, "index-31"], [428, "index-47"], [428, "index-80"], [430, "index-17"], [430, "index-18"], [430, "index-42"], [436, "index-11"]], "len": [[22, "index-1"], [38, "index-1"], [40, "index-0"], [49, "index-8"], [54, "index-0"], [55, "index-1"], [344, "index-20"], [344, "index-52"], [428, "index-15"], [428, "index-27"], [428, "index-30"], [428, "index-98"]], "keyboardinterrupt\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[23, "index-1"], [23, "index-2"], [23, "index-3"]], "pep 3151": [[23, "index-9"], [213, "index-9"], [322, "index-0"], [328, "index-0"], [337, "index-2"], [476, "index-10"]], "pyerr_badargument (c function)": [[23, "c.PyErr_BadArgument"]], "pyerr_badinternalcall (c function)": [[23, "c.PyErr_BadInternalCall"]], "pyerr_checksignals (c function)": [[23, "c.PyErr_CheckSignals"]], "pyerr_clear (c function)": [[23, "c.PyErr_Clear"]], "pyerr_displayexception (c function)": [[23, "c.PyErr_DisplayException"]], "pyerr_exceptionmatches (c function)": [[23, "c.PyErr_ExceptionMatches"]], "pyerr_fetch (c function)": [[23, "c.PyErr_Fetch"]], "pyerr_format (c function)": [[23, "c.PyErr_Format"]], "pyerr_formatv (c function)": [[23, "c.PyErr_FormatV"]], "pyerr_getexcinfo (c function)": [[23, "c.PyErr_GetExcInfo"]], "pyerr_gethandledexception (c function)": [[23, "c.PyErr_GetHandledException"]], "pyerr_getraisedexception (c function)": [[23, "c.PyErr_GetRaisedException"]], "pyerr_givenexceptionmatches (c function)": [[23, "c.PyErr_GivenExceptionMatches"]], "pyerr_newexception (c function)": [[23, "c.PyErr_NewException"]], "pyerr_newexceptionwithdoc (c function)": [[23, "c.PyErr_NewExceptionWithDoc"]], "pyerr_nomemory (c function)": [[23, "c.PyErr_NoMemory"]], "pyerr_normalizeexception (c function)": [[23, "c.PyErr_NormalizeException"]], "pyerr_occurred (c function)": [[23, "c.PyErr_Occurred"]], "pyerr_print (c function)": [[23, "c.PyErr_Print"]], "pyerr_printex (c function)": [[23, "c.PyErr_PrintEx"]], "pyerr_resourcewarning (c function)": [[23, "c.PyErr_ResourceWarning"]], "pyerr_restore (c function)": [[23, "c.PyErr_Restore"]], "pyerr_setexcfromwindowserr (c function)": [[23, "c.PyErr_SetExcFromWindowsErr"]], "pyerr_setexcfromwindowserrwithfilename (c function)": [[23, "c.PyErr_SetExcFromWindowsErrWithFilename"]], "pyerr_setexcfromwindowserrwithfilenameobject (c function)": [[23, "c.PyErr_SetExcFromWindowsErrWithFilenameObject"]], "pyerr_setexcfromwindowserrwithfilenameobjects (c function)": [[23, "c.PyErr_SetExcFromWindowsErrWithFilenameObjects"]], "pyerr_setexcinfo (c function)": [[23, "c.PyErr_SetExcInfo"]], "pyerr_setfromerrno (c function)": [[23, "c.PyErr_SetFromErrno"]], "pyerr_setfromerrnowithfilename (c function)": [[23, "c.PyErr_SetFromErrnoWithFilename"]], "pyerr_setfromerrnowithfilenameobject (c function)": [[23, "c.PyErr_SetFromErrnoWithFilenameObject"]], "pyerr_setfromerrnowithfilenameobjects (c function)": [[23, "c.PyErr_SetFromErrnoWithFilenameObjects"]], "pyerr_setfromwindowserr (c function)": [[23, "c.PyErr_SetFromWindowsErr"]], "pyerr_setfromwindowserrwithfilename (c function)": [[23, "c.PyErr_SetFromWindowsErrWithFilename"]], "pyerr_sethandledexception (c function)": [[23, "c.PyErr_SetHandledException"]], "pyerr_setimporterror (c function)": [[23, "c.PyErr_SetImportError"]], "pyerr_setimporterrorsubclass (c function)": [[23, "c.PyErr_SetImportErrorSubclass"]], "pyerr_setinterrupt (c function)": [[23, "c.PyErr_SetInterrupt"]], "pyerr_setinterruptex (c function)": [[23, "c.PyErr_SetInterruptEx"]], "pyerr_setnone (c function)": [[23, "c.PyErr_SetNone"]], "pyerr_setobject (c function)": [[23, "c.PyErr_SetObject"]], "pyerr_setraisedexception (c function)": [[23, "c.PyErr_SetRaisedException"]], "pyerr_setstring (c function)": [[23, "c.PyErr_SetString"]], "pyerr_syntaxlocation (c function)": [[23, "c.PyErr_SyntaxLocation"]], "pyerr_syntaxlocationex (c function)": [[23, "c.PyErr_SyntaxLocationEx"]], "pyerr_syntaxlocationobject (c function)": [[23, "c.PyErr_SyntaxLocationObject"]], "pyerr_warnex (c function)": [[23, "c.PyErr_WarnEx"]], "pyerr_warnexplicit (c function)": [[23, "c.PyErr_WarnExplicit"]], "pyerr_warnexplicitobject (c function)": [[23, "c.PyErr_WarnExplicitObject"]], "pyerr_warnformat (c function)": [[23, "c.PyErr_WarnFormat"]], "pyerr_writeunraisable (c function)": [[23, "c.PyErr_WriteUnraisable"]], "pyexc_arithmeticerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_assertionerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_attributeerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_baseexception\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_blockingioerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_brokenpipeerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_buffererror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_byteswarning\uff08c \u8b8a\u6578\uff09": [[23, "index-7"]], "pyexc_childprocesserror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_connectionabortederror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_connectionerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_connectionrefusederror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_connectionreseterror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_deprecationwarning\uff08c \u8b8a\u6578\uff09": [[23, "index-7"]], "pyexc_eoferror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_environmenterror\uff08c \u8b8a\u6578\uff09": [[23, "index-6"]], "pyexc_exception\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_fileexistserror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_filenotfounderror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_floatingpointerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_futurewarning\uff08c \u8b8a\u6578\uff09": [[23, "index-7"]], "pyexc_generatorexit\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_ioerror\uff08c \u8b8a\u6578\uff09": [[23, "index-6"]], "pyexc_importerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_importwarning\uff08c \u8b8a\u6578\uff09": [[23, "index-7"]], "pyexc_indentationerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_indexerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_interruptederror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_isadirectoryerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_keyerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_keyboardinterrupt\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_lookuperror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_memoryerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_modulenotfounderror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_nameerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_notadirectoryerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_notimplementederror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_oserror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_overflowerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_pendingdeprecationwarning\uff08c \u8b8a\u6578\uff09": [[23, "index-7"]], "pyexc_permissionerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_processlookuperror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_recursionerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_referenceerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_resourcewarning\uff08c \u8b8a\u6578\uff09": [[23, "index-7"]], "pyexc_runtimeerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_runtimewarning\uff08c \u8b8a\u6578\uff09": [[23, "index-7"]], "pyexc_stopasynciteration\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_stopiteration\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_syntaxerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_syntaxwarning\uff08c \u8b8a\u6578\uff09": [[23, "index-7"]], "pyexc_systemerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_systemexit\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_taberror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_timeouterror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_typeerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_unboundlocalerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_unicodedecodeerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_unicodeencodeerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_unicodeerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_unicodetranslateerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_unicodewarning\uff08c \u8b8a\u6578\uff09": [[23, "index-7"]], "pyexc_userwarning\uff08c \u8b8a\u6578\uff09": [[23, "index-7"]], "pyexc_valueerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexc_warning\uff08c \u8b8a\u6578\uff09": [[23, "index-7"]], "pyexc_windowserror\uff08c \u8b8a\u6578\uff09": [[23, "index-6"]], "pyexc_zerodivisionerror\uff08c \u8b8a\u6578\uff09": [[23, "index-4"]], "pyexception_getargs (c function)": [[23, "c.PyException_GetArgs"]], "pyexception_getcause (c function)": [[23, "c.PyException_GetCause"]], "pyexception_getcontext (c function)": [[23, "c.PyException_GetContext"]], "pyexception_gettraceback (c function)": [[23, "c.PyException_GetTraceback"]], "pyexception_setargs (c function)": [[23, "c.PyException_SetArgs"]], "pyexception_setcause (c function)": [[23, "c.PyException_SetCause"]], "pyexception_setcontext (c function)": [[23, "c.PyException_SetContext"]], "pyexception_settraceback (c function)": [[23, "c.PyException_SetTraceback"]], "pysignal_setwakeupfd (c function)": [[23, "c.PySignal_SetWakeupFd"]], "pyunicodedecodeerror_create (c function)": [[23, "c.PyUnicodeDecodeError_Create"]], "pyunicodedecodeerror_getencoding (c function)": [[23, "c.PyUnicodeDecodeError_GetEncoding"]], "pyunicodedecodeerror_getend (c function)": [[23, "c.PyUnicodeDecodeError_GetEnd"]], "pyunicodedecodeerror_getobject (c function)": [[23, "c.PyUnicodeDecodeError_GetObject"]], "pyunicodedecodeerror_getreason (c function)": [[23, "c.PyUnicodeDecodeError_GetReason"]], "pyunicodedecodeerror_getstart (c function)": [[23, "c.PyUnicodeDecodeError_GetStart"]], "pyunicodedecodeerror_setend (c function)": [[23, "c.PyUnicodeDecodeError_SetEnd"]], "pyunicodedecodeerror_setreason (c function)": [[23, "c.PyUnicodeDecodeError_SetReason"]], "pyunicodedecodeerror_setstart (c function)": [[23, "c.PyUnicodeDecodeError_SetStart"]], "pyunicodeencodeerror_getencoding (c function)": [[23, "c.PyUnicodeEncodeError_GetEncoding"]], "pyunicodeencodeerror_getend (c function)": [[23, "c.PyUnicodeEncodeError_GetEnd"]], "pyunicodeencodeerror_getobject (c function)": [[23, "c.PyUnicodeEncodeError_GetObject"]], "pyunicodeencodeerror_getreason (c function)": [[23, "c.PyUnicodeEncodeError_GetReason"]], "pyunicodeencodeerror_getstart (c function)": [[23, "c.PyUnicodeEncodeError_GetStart"]], "pyunicodeencodeerror_setend (c function)": [[23, "c.PyUnicodeEncodeError_SetEnd"]], "pyunicodeencodeerror_setreason (c function)": [[23, "c.PyUnicodeEncodeError_SetReason"]], "pyunicodeencodeerror_setstart (c function)": [[23, "c.PyUnicodeEncodeError_SetStart"]], "pyunicodetranslateerror_getend (c function)": [[23, "c.PyUnicodeTranslateError_GetEnd"]], "pyunicodetranslateerror_getobject (c function)": [[23, "c.PyUnicodeTranslateError_GetObject"]], "pyunicodetranslateerror_getreason (c function)": [[23, "c.PyUnicodeTranslateError_GetReason"]], "pyunicodetranslateerror_getstart (c function)": [[23, "c.PyUnicodeTranslateError_GetStart"]], "pyunicodetranslateerror_setend (c function)": [[23, "c.PyUnicodeTranslateError_SetEnd"]], "pyunicodetranslateerror_setreason (c function)": [[23, "c.PyUnicodeTranslateError_SetReason"]], "pyunicodetranslateerror_setstart (c function)": [[23, "c.PyUnicodeTranslateError_SetStart"]], "pyunstable_exc_prepreraisestar (c function)": [[23, "c.PyUnstable_Exc_PrepReraiseStar"]], "py_enterrecursivecall (c function)": [[23, "c.Py_EnterRecursiveCall"]], "py_leaverecursivecall (c function)": [[23, "c.Py_LeaveRecursiveCall"]], "py_reprenter (c function)": [[23, "c.Py_ReprEnter"]], "py_reprleave (c function)": [[23, "c.Py_ReprLeave"]], "sigint\uff08c \u5de8\u96c6\uff09": [[23, "index-1"], [23, "index-2"]], "module\uff08\u6a21\u7d44\uff09": [[23, "index-1"], [23, "index-2"], [23, "index-3"], [35, "index-18"], [45, "index-0"], [87, "term-module"], [115, "index-2"], [146, "index-0"], [154, "index-1"], [171, "index-0"], [172, "index-0"], [213, "index-5"], [220, "index-1"], [220, "index-3"], [225, "index-13"], [225, "index-8"], [242, "index-1"], [256, "index-1"], [265, "index-0"], [266, "index-0"], [274, "index-0"], [293, "index-23"], [293, "index-30"], [294, "index-2"], [297, "index-1"], [306, "index-0"], [310, "index-0"], [314, "index-1"], [324, "index-0"], [324, "index-4"], [330, "index-0"], [330, "index-1"], [334, "index-0"], [337, "index-14"], [352, "index-21"], [427, "index-11"], [428, "index-23"], [428, "index-24"], [428, "index-32"], [428, "index-4"], [428, "index-44"], [428, "index-45"], [428, "index-55"], [429, "index-10"], [430, "index-40"], [436, "index-34"], [437, "index-2"], [437, "index-3"], [446, "index-1"], [450, "index-0"], [450, "index-4"], [450, "index-7"]], "signal\uff08\u8a0a\u865f\uff09": [[23, "index-1"], [23, "index-2"], [23, "index-3"], [115, "index-2"]], "strerror\uff08c \u51fd\u5f0f\uff09": [[23, "index-0"]], "eoferror\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[24, "index-1"]], "pyfile_fromfd (c function)": [[24, "c.PyFile_FromFd"]], "pyfile_getline (c function)": [[24, "c.PyFile_GetLine"]], "pyfile_setopencodehook (c function)": [[24, "c.PyFile_SetOpenCodeHook"]], "pyfile_setopencodehook.py_opencodehookfunction (c type)": [[24, "c.PyFile_SetOpenCodeHook.Py_OpenCodeHookFunction"]], "pyfile_writeobject (c function)": [[24, "c.PyFile_WriteObject"]], "pyfile_writestring (c function)": [[24, "c.PyFile_WriteString"]], "pyobject_asfiledescriptor (c function)": [[24, "c.PyObject_AsFileDescriptor"]], "py_print_raw\uff08c \u5de8\u96c6\uff09": [[24, "index-2"]], "file\uff08\u6a94\u6848\uff09": [[24, "index-0"], [167, "index-0"], [225, "index-6"], [276, "index-2"], [297, "index-2"], [304, "index-0"], [306, "index-1"], [311, "index-0"], [332, "index-0"], [334, "index-4"], [360, "index-0"], [446, "index-0"]], "pyfloatobject (c type)": [[25, "c.PyFloatObject"]], "pyfloat_as_double (c function)": [[25, "c.PyFloat_AS_DOUBLE"]], "pyfloat_asdouble (c function)": [[25, "c.PyFloat_AsDouble"]], "pyfloat_check (c function)": [[25, "c.PyFloat_Check"]], "pyfloat_checkexact (c function)": [[25, "c.PyFloat_CheckExact"]], "pyfloat_fromdouble (c function)": [[25, "c.PyFloat_FromDouble"]], "pyfloat_fromstring (c function)": [[25, "c.PyFloat_FromString"]], "pyfloat_getinfo (c function)": [[25, "c.PyFloat_GetInfo"]], "pyfloat_getmax (c function)": [[25, "c.PyFloat_GetMax"]], "pyfloat_getmin (c function)": [[25, "c.PyFloat_GetMin"]], "pyfloat_pack2 (c function)": [[25, "c.PyFloat_Pack2"]], "pyfloat_pack4 (c function)": [[25, "c.PyFloat_Pack4"]], "pyfloat_pack8 (c function)": [[25, "c.PyFloat_Pack8"]], "pyfloat_type (c var)": [[25, "c.PyFloat_Type"]], "pyfloat_unpack2 (c function)": [[25, "c.PyFloat_Unpack2"]], "pyfloat_unpack4 (c function)": [[25, "c.PyFloat_Unpack4"]], "pyfloat_unpack8 (c function)": [[25, "c.PyFloat_Unpack8"]], "floating point\uff08\u6d6e\u9ede\uff09": [[25, "index-0"], [428, "index-13"]], "pep 523": [[26, "index-0"], [33, "index-39"], [33, "index-40"], [473, "index-118"], [474, "index-41"], [479, "index-25"], [479, "index-26"], [482, "index-24"], [483, "index-253"], [483, "index-258"], [483, "index-266"], [483, "index-6"]], "pyframeobject (c type)": [[26, "c.PyFrameObject"]], "pyframe_check (c function)": [[26, "c.PyFrame_Check"]], "pyframe_getback (c function)": [[26, "c.PyFrame_GetBack"]], "pyframe_getbuiltins (c function)": [[26, "c.PyFrame_GetBuiltins"]], "pyframe_getcode (c function)": [[26, "c.PyFrame_GetCode"]], "pyframe_getgenerator (c function)": [[26, "c.PyFrame_GetGenerator"]], "pyframe_getglobals (c function)": [[26, "c.PyFrame_GetGlobals"]], "pyframe_getlasti (c function)": [[26, "c.PyFrame_GetLasti"]], "pyframe_getlinenumber (c function)": [[26, "c.PyFrame_GetLineNumber"]], "pyframe_getlocals (c function)": [[26, "c.PyFrame_GetLocals"]], "pyframe_getvar (c function)": [[26, "c.PyFrame_GetVar"]], "pyframe_getvarstring (c function)": [[26, "c.PyFrame_GetVarString"]], "pyframe_type (c var)": [[26, "c.PyFrame_Type"]], "pyunstable_interpreterframe_getcode (c function)": [[26, "c.PyUnstable_InterpreterFrame_GetCode"]], "pyunstable_interpreterframe_getlasti (c function)": [[26, "c.PyUnstable_InterpreterFrame_GetLasti"]], "pyunstable_interpreterframe_getline (c function)": [[26, "c.PyUnstable_InterpreterFrame_GetLine"]], "_pyinterpreterframe (c struct)": [[26, "c._PyInterpreterFrame"]], "methodtype\uff08types \u6a21\u7d44\u4e2d\uff09": [[27, "index-1"], [44, "index-2"], [45, "index-1"]], "pyfunctionobject (c type)": [[27, "c.PyFunctionObject"]], "pyfunction_addwatcher (c function)": [[27, "c.PyFunction_AddWatcher"]], "pyfunction_check (c function)": [[27, "c.PyFunction_Check"]], "pyfunction_clearwatcher (c function)": [[27, "c.PyFunction_ClearWatcher"]], "pyfunction_getannotations (c function)": [[27, "c.PyFunction_GetAnnotations"]], "pyfunction_getclosure (c function)": [[27, "c.PyFunction_GetClosure"]], "pyfunction_getcode (c function)": [[27, "c.PyFunction_GetCode"]], "pyfunction_getdefaults (c function)": [[27, "c.PyFunction_GetDefaults"]], "pyfunction_getglobals (c function)": [[27, "c.PyFunction_GetGlobals"]], "pyfunction_getmodule (c function)": [[27, "c.PyFunction_GetModule"]], "pyfunction_new (c function)": [[27, "c.PyFunction_New"]], "pyfunction_newwithqualname (c function)": [[27, "c.PyFunction_NewWithQualName"]], "pyfunction_setannotations (c function)": [[27, "c.PyFunction_SetAnnotations"]], "pyfunction_setclosure (c function)": [[27, "c.PyFunction_SetClosure"]], "pyfunction_setdefaults (c function)": [[27, "c.PyFunction_SetDefaults"]], "pyfunction_setvectorcall (c function)": [[27, "c.PyFunction_SetVectorcall"]], "pyfunction_type (c var)": [[27, "c.PyFunction_Type"]], "pyfunction_watchcallback (c type)": [[27, "c.PyFunction_WatchCallback"]], "pyfunction_watchevent (c type)": [[27, "c.PyFunction_WatchEvent"]], "function\uff08\u51fd\u5f0f\uff09": [[27, "index-0"], [87, "term-function"], [441, "index-6"]], "pygc_collect (c function)": [[28, "c.PyGC_Collect"]], "pygc_disable (c function)": [[28, "c.PyGC_Disable"]], "pygc_enable (c function)": [[28, "c.PyGC_Enable"]], "pygc_isenabled (c function)": [[28, "c.PyGC_IsEnabled"]], "pyobject_gc_del (c function)": [[28, "c.PyObject_GC_Del"]], "pyobject_gc_isfinalized (c function)": [[28, "c.PyObject_GC_IsFinalized"]], "pyobject_gc_istracked (c function)": [[28, "c.PyObject_GC_IsTracked"]], "pyobject_gc_new (c macro)": [[28, "c.PyObject_GC_New"]], "pyobject_gc_newvar (c macro)": [[28, "c.PyObject_GC_NewVar"]], "pyobject_gc_resize (c macro)": [[28, "c.PyObject_GC_Resize"]], "pyobject_gc_track (c function)": [[28, "c.PyObject_GC_Track"]], "pyobject_gc_untrack (c function)": [[28, "c.PyObject_GC_UnTrack"]], "pyobject_is_gc (c function)": [[28, "c.PyObject_IS_GC"]], "pyunstable_gc_visitobjects (c function)": [[28, "c.PyUnstable_GC_VisitObjects"]], "pyunstable_object_gc_newwithextradata (c function)": [[28, "c.PyUnstable_Object_GC_NewWithExtraData"]], "py_visit (c function)": [[28, "c.Py_VISIT"]], "gcvisitobjects_t (c type)": [[28, "c.gcvisitobjects_t"]], "inquiry (c type)": [[28, "c.inquiry"]], "traverseproc (c type)": [[28, "c.traverseproc"]], "visitproc (c type)": [[28, "c.visitproc"]], "pygenobject (c type)": [[29, "c.PyGenObject"]], "pygen_check (c function)": [[29, "c.PyGen_Check"]], "pygen_checkexact (c function)": [[29, "c.PyGen_CheckExact"]], "pygen_new (c function)": [[29, "c.PyGen_New"]], "pygen_newwithqualname (c function)": [[29, "c.PyGen_NewWithQualName"]], "pygen_type (c var)": [[29, "c.PyGen_Type"]], "pep 456": [[30, "index-0"], [477, "index-13"], [477, "index-47"]], "pyhash_funcdef (c type)": [[30, "c.PyHash_FuncDef"]], "pyhash_funcdef.hash_bits (c member)": [[30, "c.PyHash_FuncDef.hash_bits"]], "pyhash_funcdef.name (c member)": [[30, "c.PyHash_FuncDef.name"]], "pyhash_funcdef.seed_bits (c member)": [[30, "c.PyHash_FuncDef.seed_bits"]], "pyhash_getfuncdef (c function)": [[30, "c.PyHash_GetFuncDef"]], "py_hash_t (c type)": [[30, "c.Py_hash_t"]], "py_uhash_t (c type)": [[30, "c.Py_uhash_t"]], "pep 3147": [[31, "index-3"], [85, "index-3"], [163, "index-0"], [163, "index-2"], [163, "index-3"], [250, "index-11"], [250, "index-21"], [250, "index-23"], [250, "index-24"], [311, "index-1"], [311, "index-4"], [324, "index-2"], [362, "index-3"], [432, "index-13"], [450, "index-16"], [475, "index-5"], [476, "index-18"]], "pyimport_addmodule (c function)": [[31, "c.PyImport_AddModule"]], "pyimport_addmoduleobject (c function)": [[31, "c.PyImport_AddModuleObject"]], "pyimport_appendinittab (c function)": [[31, "c.PyImport_AppendInittab"]], "pyimport_execcodemodule (c function)": [[31, "c.PyImport_ExecCodeModule"]], "pyimport_execcodemoduleex (c function)": [[31, "c.PyImport_ExecCodeModuleEx"]], "pyimport_execcodemoduleobject (c function)": [[31, "c.PyImport_ExecCodeModuleObject"]], "pyimport_execcodemodulewithpathnames (c function)": [[31, "c.PyImport_ExecCodeModuleWithPathnames"]], "pyimport_extendinittab (c function)": [[31, "c.PyImport_ExtendInittab"]], "pyimport_frozenmodules (c var)": [[31, "c.PyImport_FrozenModules"]], "pyimport_getimporter (c function)": [[31, "c.PyImport_GetImporter"]], "pyimport_getmagicnumber (c function)": [[31, "c.PyImport_GetMagicNumber"]], "pyimport_getmagictag (c function)": [[31, "c.PyImport_GetMagicTag"]], "pyimport_getmodule (c function)": [[31, "c.PyImport_GetModule"]], "pyimport_getmoduledict (c function)": [[31, "c.PyImport_GetModuleDict"]], "pyimport_import (c function)": [[31, "c.PyImport_Import"]], "pyimport_importfrozenmodule (c function)": [[31, "c.PyImport_ImportFrozenModule"]], "pyimport_importfrozenmoduleobject (c function)": [[31, "c.PyImport_ImportFrozenModuleObject"]], "pyimport_importmodule (c function)": [[31, "c.PyImport_ImportModule"]], "pyimport_importmoduleex (c function)": [[31, "c.PyImport_ImportModuleEx"]], "pyimport_importmodulelevel (c function)": [[31, "c.PyImport_ImportModuleLevel"]], "pyimport_importmodulelevelobject (c function)": [[31, "c.PyImport_ImportModuleLevelObject"]], "pyimport_importmodulenoblock (c function)": [[31, "c.PyImport_ImportModuleNoBlock"]], "pyimport_reloadmodule (c function)": [[31, "c.PyImport_ReloadModule"]], "__all__": [[31, "index-0"], [450, "index-8"]], "__all__\uff08\u5957\u4ef6\u8b8a\u6578\uff09": [[31, "index-0"]], "__import__": [[31, "index-1"]], "_frozen (c struct)": [[31, "c._frozen"]], "_inittab (c struct)": [[31, "c._inittab"]], "_inittab.initfunc (c member)": [[31, "c._inittab.initfunc"]], "_inittab.name (c member)": [[31, "c._inittab.name"]], "compile\uff08\u7de8\u8b6f\uff09": [[31, "index-2"], [344, "index-63"], [385, "index-4"], [436, "index-44"]], "freeze utility\uff08\u51cd\u7d50\u5de5\u5177\uff09": [[31, "index-4"]], "modules\uff08sys \u6a21\u7d44\u4e2d\uff09": [[31, "index-0"], [33, "index-15"]], "package variable\uff08\u5957\u4ef6\u8b8a\u6578\uff09": [[31, "index-0"]], "pep 489": [[33, "index-41"], [45, "index-8"], [71, "index-1"], [73, "index-0"], [250, "index-17"], [250, "index-18"], [250, "index-19"], [250, "index-20"], [250, "index-26"], [250, "index-8"], [478, "index-26"], [478, "index-28"], [478, "index-45"], [483, "index-111"], [483, "index-112"], [483, "index-114"], [483, "index-117"], [483, "index-119"], [483, "index-120"], [483, "index-121"], [483, "index-122"], [483, "index-123"], [483, "index-124"], [483, "index-125"], [483, "index-126"], [483, "index-127"], [483, "index-128"], [483, "index-129"], [483, "index-130"], [483, "index-131"], [483, "index-132"], [483, "index-134"], [483, "index-139"], [483, "index-140"], [483, "index-141"], [483, "index-142"], [483, "index-143"], [483, "index-144"], [483, "index-145"], [483, "index-146"], [483, "index-147"], [483, "index-148"], [483, "index-149"], [483, "index-153"], [483, "index-154"], [483, "index-155"], [483, "index-159"], [483, "index-160"], [483, "index-161"], [483, "index-165"], [483, "index-166"], [483, "index-167"], [483, "index-168"], [483, "index-169"], [483, "index-177"], [483, "index-178"], [483, "index-179"], [483, "index-182"], [483, "index-184"], [483, "index-186"], [483, "index-193"], [483, "index-194"], [483, "index-195"], [483, "index-196"], [483, "index-197"], [483, "index-202"], [483, "index-29"]], "pep 528": [[33, "index-70"], [34, "index-17"], [461, "index-16"], [479, "index-22"]], "pep 529": [[33, "index-69"], [64, "index-5"], [293, "index-27"], [352, "index-44"], [352, "index-9"], [455, "index-56"], [461, "index-17"], [479, "index-20"], [481, "index-19"], [483, "index-206"], [483, "index-260"], [483, "index-62"]], "pep 539": [[33, "index-48"], [480, "index-14"], [480, "index-15"], [483, "index-247"]], "pep 554": [[33, "index-47"], [474, "index-10"]], "pythondebug": [[33, "index-62"], [34, "index-22"], [455, "envvar-PYTHONDEBUG"], [455, "index-2"], [456, "index-6"]], "pythondontwritebytecode": [[33, "index-63"], [34, "index-32"], [85, "index-4"], [352, "index-6"], [455, "envvar-PYTHONDONTWRITEBYTECODE"], [455, "index-1"], [468, "index-20"], [468, "index-24"]], "pythonhashseed": [[33, "index-3"], [33, "index-64"], [34, "index-11"], [428, "index-114"], [455, "envvar-PYTHONHASHSEED"], [455, "index-13"], [455, "index-14"], [455, "index-37"], [476, "index-23"], [476, "index-35"], [483, "index-236"]], "pythonhome": [[33, "index-30"], [33, "index-31"], [33, "index-66"], [34, "index-12"], [35, "index-43"], [35, "index-45"], [354, "index-2"], [354, "index-4"], [362, "index-0"], [455, "envvar-PYTHONHOME"], [455, "index-30"], [455, "index-31"], [455, "index-34"], [455, "index-4"], [461, "index-33"], [461, "index-35"], [461, "index-37"], [474, "index-62"], [479, "index-2"]], "pythoninspect": [[33, "index-67"], [34, "index-14"], [455, "envvar-PYTHONINSPECT"], [455, "index-6"], [465, "index-28"]], "pythonioencoding": [[33, "index-17"], [33, "index-18"], [34, "index-26"], [293, "index-1"], [352, "index-35"], [455, "envvar-PYTHONIOENCODING"], [455, "index-43"], [468, "index-21"], [477, "index-53"]], "pythonlegacywindowsfsencoding": [[33, "index-68"], [34, "index-1"], [352, "index-33"], [455, "envvar-PYTHONLEGACYWINDOWSFSENCODING"], [479, "index-19"]], "pythonlegacywindowsstdio": [[33, "index-9"], [34, "index-16"], [352, "index-37"], [455, "envvar-PYTHONLEGACYWINDOWSSTDIO"], [455, "index-38"], [479, "index-21"]], "pythonnousersite": [[33, "index-71"], [34, "index-29"], [334, "index-6"], [455, "envvar-PYTHONNOUSERSITE"], [455, "index-15"], [468, "index-6"]], "pythonoptimize": [[33, "index-72"], [34, "index-21"], [455, "envvar-PYTHONOPTIMIZE"], [455, "index-8"]], "pythonpath": [[33, "index-65"], [34, "index-20"], [35, "index-44"], [35, "index-46"], [71, "index-0"], [151, "index-4"], [352, "index-22"], [352, "index-23"], [354, "index-0"], [354, "index-1"], [362, "index-1"], [432, "index-17"], [432, "index-18"], [450, "index-14"], [450, "index-17"], [450, "index-18"], [455, "envvar-PYTHONPATH"], [455, "index-3"], [455, "index-33"], [455, "index-35"], [455, "index-36"], [459, "index-2"], [461, "index-11"], [461, "index-32"], [461, "index-34"], [461, "index-36"], [477, "index-55"], [477, "index-56"]], "pythonunbuffered": [[33, "index-73"], [34, "index-5"], [352, "index-38"], [455, "envvar-PYTHONUNBUFFERED"], [455, "index-54"], [483, "index-203"]], "pythonverbose": [[33, "index-74"], [34, "index-30"], [455, "envvar-PYTHONVERBOSE"], [455, "index-55"]], "pyeval_acquirelock (c function)": [[33, "c.PyEval_AcquireLock"]], "pyeval_acquirethread (c function)": [[33, "c.PyEval_AcquireThread"]], "pyeval_acquirethread()": [[33, "index-37"]], "pyeval_initthreads (c function)": [[33, "c.PyEval_InitThreads"]], "pyeval_initthreads()": [[33, "index-15"]], "pyeval_releaselock (c function)": [[33, "c.PyEval_ReleaseLock"]], "pyeval_releasethread (c function)": [[33, "c.PyEval_ReleaseThread"]], "pyeval_releasethread()": [[33, "index-37"]], "pyeval_restorethread (c function)": [[33, "c.PyEval_RestoreThread"]], "pyeval_restorethread()": [[33, "index-37"]], "pyeval_restorethread\uff08c \u51fd\u5f0f\uff09": [[33, "index-36"]], "pyeval_savethread (c function)": [[33, "c.PyEval_SaveThread"]], "pyeval_savethread()": [[33, "index-37"]], "pyeval_savethread\uff08c \u51fd\u5f0f\uff09": [[33, "index-36"]], "pyeval_setprofile (c function)": [[33, "c.PyEval_SetProfile"]], "pyeval_setprofileallthreads (c function)": [[33, "c.PyEval_SetProfileAllThreads"]], "pyeval_settrace (c function)": [[33, "c.PyEval_SetTrace"]], "pyeval_settraceallthreads (c function)": [[33, "c.PyEval_SetTraceAllThreads"]], "pyeval_threadsinitialized (c function)": [[33, "c.PyEval_ThreadsInitialized"]], "pygilstate_check (c function)": [[33, "c.PyGILState_Check"]], "pygilstate_ensure (c function)": [[33, "c.PyGILState_Ensure"]], "pygilstate_getthisthreadstate (c function)": [[33, "c.PyGILState_GetThisThreadState"]], "pygilstate_release (c function)": [[33, "c.PyGILState_Release"]], "pyinterpreterconfig (c type)": [[33, "c.PyInterpreterConfig"]], "pyinterpreterconfig.allow_daemon_threads (c member)": [[33, "c.PyInterpreterConfig.allow_daemon_threads"]], "pyinterpreterconfig.allow_exec (c member)": [[33, "c.PyInterpreterConfig.allow_exec"]], "pyinterpreterconfig.allow_fork (c member)": [[33, "c.PyInterpreterConfig.allow_fork"]], "pyinterpreterconfig.allow_threads (c member)": [[33, "c.PyInterpreterConfig.allow_threads"]], "pyinterpreterconfig.check_multi_interp_extensions (c member)": [[33, "c.PyInterpreterConfig.check_multi_interp_extensions"]], "pyinterpreterconfig.gil (c member)": [[33, "c.PyInterpreterConfig.gil"]], "pyinterpreterconfig.use_main_obmalloc (c member)": [[33, "c.PyInterpreterConfig.use_main_obmalloc"]], "pyinterpreterconfig_default_gil (c macro)": [[33, "c.PyInterpreterConfig_DEFAULT_GIL"]], "pyinterpreterconfig_own_gil (c macro)": [[33, "c.PyInterpreterConfig_OWN_GIL"]], "pyinterpreterconfig_shared_gil (c macro)": [[33, "c.PyInterpreterConfig_SHARED_GIL"]], "pyinterpreterstate (c type)": [[33, "c.PyInterpreterState"]], "pyinterpreterstate_clear (c function)": [[33, "c.PyInterpreterState_Clear"]], "pyinterpreterstate_delete (c function)": [[33, "c.PyInterpreterState_Delete"]], "pyinterpreterstate_get (c function)": [[33, "c.PyInterpreterState_Get"]], "pyinterpreterstate_getdict (c function)": [[33, "c.PyInterpreterState_GetDict"]], "pyinterpreterstate_getid (c function)": [[33, "c.PyInterpreterState_GetID"]], "pyinterpreterstate_head (c function)": [[33, "c.PyInterpreterState_Head"]], "pyinterpreterstate_main (c function)": [[33, "c.PyInterpreterState_Main"]], "pyinterpreterstate_new (c function)": [[33, "c.PyInterpreterState_New"]], "pyinterpreterstate_next (c function)": [[33, "c.PyInterpreterState_Next"]], "pyinterpreterstate_threadhead (c function)": [[33, "c.PyInterpreterState_ThreadHead"]], "pysys_setargv (c function)": [[33, "c.PySys_SetArgv"]], "pysys_setargvex (c function)": [[33, "c.PySys_SetArgvEx"]], "pysys_setargvex\uff08c \u51fd\u5f0f\uff09": [[33, "index-15"]], "pysys_setargv\uff08c \u51fd\u5f0f\uff09": [[33, "index-15"]], "pythreadstate (c type)": [[33, "c.PyThreadState"]], "pythreadstate.interp (c member)": [[33, "c.PyThreadState.interp"]], "pythreadstate_clear (c function)": [[33, "c.PyThreadState_Clear"]], "pythreadstate_delete (c function)": [[33, "c.PyThreadState_Delete"]], "pythreadstate_deletecurrent (c function)": [[33, "c.PyThreadState_DeleteCurrent"]], "pythreadstate_entertracing (c function)": [[33, "c.PyThreadState_EnterTracing"]], "pythreadstate_get (c function)": [[33, "c.PyThreadState_Get"]], "pythreadstate_getdict (c function)": [[33, "c.PyThreadState_GetDict"]], "pythreadstate_getframe (c function)": [[33, "c.PyThreadState_GetFrame"]], "pythreadstate_getid (c function)": [[33, "c.PyThreadState_GetID"]], "pythreadstate_getinterpreter (c function)": [[33, "c.PyThreadState_GetInterpreter"]], "pythreadstate_leavetracing (c function)": [[33, "c.PyThreadState_LeaveTracing"]], "pythreadstate_new (c function)": [[33, "c.PyThreadState_New"]], "pythreadstate_next (c function)": [[33, "c.PyThreadState_Next"]], "pythreadstate_setasyncexc (c function)": [[33, "c.PyThreadState_SetAsyncExc"]], "pythreadstate_swap (c function)": [[33, "c.PyThreadState_Swap"]], "pythreadstate\uff08c \u578b\u5225\uff09": [[33, "index-34"]], "pythread_reinittls (c function)": [[33, "c.PyThread_ReInitTLS"]], "pythread_create_key (c function)": [[33, "c.PyThread_create_key"]], "pythread_delete_key (c function)": [[33, "c.PyThread_delete_key"]], "pythread_delete_key_value (c function)": [[33, "c.PyThread_delete_key_value"]], "pythread_get_key_value (c function)": [[33, "c.PyThread_get_key_value"]], "pythread_set_key_value (c function)": [[33, "c.PyThread_set_key_value"]], "pythread_tss_alloc (c function)": [[33, "c.PyThread_tss_alloc"]], "pythread_tss_create (c function)": [[33, "c.PyThread_tss_create"]], "pythread_tss_delete (c function)": [[33, "c.PyThread_tss_delete"]], "pythread_tss_free (c function)": [[33, "c.PyThread_tss_free"]], "pythread_tss_get (c function)": [[33, "c.PyThread_tss_get"]], "pythread_tss_is_created (c function)": [[33, "c.PyThread_tss_is_created"]], "pythread_tss_set (c function)": [[33, "c.PyThread_tss_set"]], "pytrace_call (c var)": [[33, "c.PyTrace_CALL"]], "pytrace_c_call (c var)": [[33, "c.PyTrace_C_CALL"]], "pytrace_c_exception (c var)": [[33, "c.PyTrace_C_EXCEPTION"]], "pytrace_c_return (c var)": [[33, "c.PyTrace_C_RETURN"]], "pytrace_exception (c var)": [[33, "c.PyTrace_EXCEPTION"]], "pytrace_line (c var)": [[33, "c.PyTrace_LINE"]], "pytrace_opcode (c var)": [[33, "c.PyTrace_OPCODE"]], "pytrace_return (c var)": [[33, "c.PyTrace_RETURN"]], "py_addpendingcall (c function)": [[33, "c.Py_AddPendingCall"]], "py_begin_allow_threads (c macro)": [[33, "c.Py_BEGIN_ALLOW_THREADS"]], "py_begin_allow_threads\uff08c \u5de8\u96c6\uff09": [[33, "index-35"]], "py_block_threads (c macro)": [[33, "c.Py_BLOCK_THREADS"]], "py_byteswarningflag (c var)": [[33, "c.Py_BytesWarningFlag"]], "py_debugflag (c var)": [[33, "c.Py_DebugFlag"]], "py_dontwritebytecodeflag (c var)": [[33, "c.Py_DontWriteBytecodeFlag"]], "py_end_allow_threads (c macro)": [[33, "c.Py_END_ALLOW_THREADS"]], "py_end_allow_threads\uff08c \u5de8\u96c6\uff09": [[33, "index-35"]], "py_endinterpreter (c function)": [[33, "c.Py_EndInterpreter"]], "py_fatalerror()": [[33, "index-29"]], "py_finalize (c function)": [[33, "c.Py_Finalize"]], "py_finalizeex (c function)": [[33, "c.Py_FinalizeEx"]], "py_finalizeex\uff08c \u51fd\u5f0f\uff09": [[33, "index-15"], [33, "index-43"], [33, "index-46"], [59, "index-3"], [59, "index-4"]], "py_frozenflag (c var)": [[33, "c.Py_FrozenFlag"]], "py_getbuildinfo (c function)": [[33, "c.Py_GetBuildInfo"]], "py_getcompiler (c function)": [[33, "c.Py_GetCompiler"]], "py_getcopyright (c function)": [[33, "c.Py_GetCopyright"]], "py_getexecprefix (c function)": [[33, "c.Py_GetExecPrefix"]], "py_getpath (c function)": [[33, "c.Py_GetPath"]], "py_getpath()": [[33, "index-19"], [33, "index-23"]], "py_getplatform (c function)": [[33, "c.Py_GetPlatform"]], "py_getprefix (c function)": [[33, "c.Py_GetPrefix"]], "py_getprogramfullpath (c function)": [[33, "c.Py_GetProgramFullPath"]], "py_getprogramname (c function)": [[33, "c.Py_GetProgramName"]], "py_getpythonhome (c function)": [[33, "c.Py_GetPythonHome"]], "py_getversion (c function)": [[33, "c.Py_GetVersion"]], "py_hashrandomizationflag (c var)": [[33, "c.Py_HashRandomizationFlag"]], "py_ignoreenvironmentflag (c var)": [[33, "c.Py_IgnoreEnvironmentFlag"]], "py_initialize (c function)": [[33, "c.Py_Initialize"]], "py_initialize()": [[33, "index-16"], [33, "index-19"]], "py_initializeex (c function)": [[33, "c.Py_InitializeEx"]], "py_initialize\uff08c \u51fd\u5f0f\uff09": [[33, "index-43"], [35, "index-18"]], "py_inspectflag (c var)": [[33, "c.Py_InspectFlag"]], "py_interactiveflag (c var)": [[33, "c.Py_InteractiveFlag"]], "py_isinitialized (c function)": [[33, "c.Py_IsInitialized"]], "py_isolatedflag (c var)": [[33, "c.Py_IsolatedFlag"]], "py_legacywindowsfsencodingflag (c var)": [[33, "c.Py_LegacyWindowsFSEncodingFlag"]], "py_legacywindowsstdioflag (c var)": [[33, "c.Py_LegacyWindowsStdioFlag"]], "py_newinterpreter (c function)": [[33, "c.Py_NewInterpreter"]], "py_newinterpreterfromconfig (c function)": [[33, "c.Py_NewInterpreterFromConfig"]], "py_nositeflag (c var)": [[33, "c.Py_NoSiteFlag"]], "py_nousersitedirectory (c var)": [[33, "c.Py_NoUserSiteDirectory"]], "py_optimizeflag (c var)": [[33, "c.Py_OptimizeFlag"]], "py_quietflag (c var)": [[33, "c.Py_QuietFlag"]], "py_setpath (c function)": [[33, "c.Py_SetPath"]], "py_setpath()": [[33, "index-22"]], "py_setprogramname (c function)": [[33, "c.Py_SetProgramName"]], "py_setprogramname()": [[33, "index-15"], [33, "index-20"], [33, "index-21"]], "py_setpythonhome (c function)": [[33, "c.Py_SetPythonHome"]], "py_setstandardstreamencoding (c function)": [[33, "c.Py_SetStandardStreamEncoding"]], "py_unblock_threads (c macro)": [[33, "c.Py_UNBLOCK_THREADS"]], "py_unbufferedstdioflag (c var)": [[33, "c.Py_UnbufferedStdioFlag"]], "py_verboseflag (c var)": [[33, "c.Py_VerboseFlag"]], "py_tracefunc (c type)": [[33, "c.Py_tracefunc"]], "py_tss_needs_init (c macro)": [[33, "c.Py_tss_NEEDS_INIT"]], "py_tss_t (c type)": [[33, "c.Py_tss_t"]], "_pyframeevalfunction (c type)": [[33, "c._PyFrameEvalFunction"]], "_pyinterpreterstate_getevalframefunc (c function)": [[33, "c._PyInterpreterState_GetEvalFrameFunc"]], "_pyinterpreterstate_setevalframefunc (c function)": [[33, "c._PyInterpreterState_SetEvalFrameFunc"]], "__main__": [[33, "index-15"], [33, "index-42"], [33, "index-45"], [35, "index-18"], [114, "module-__main__"], [324, "index-0"], [324, "index-4"], [429, "index-10"], [437, "index-2"], [437, "index-3"]], "_thread": [[33, "index-38"], [115, "module-_thread"]], "argv\uff08sys \u6a21\u7d44\u4e2d\uff09": [[33, "index-29"]], "builtins\uff08\u5167\u5efa\uff09": [[33, "index-15"], [33, "index-42"], [33, "index-45"], [35, "index-18"], [225, "index-13"], [437, "index-2"], [450, "index-7"]], "close\uff08os \u6a21\u7d44\u4e2d\uff09": [[33, "index-44"]], "copyright\uff08sys \u6a21\u7d44\u4e2d\uff09": [[33, "index-26"]], "executable\uff08sys \u6a21\u7d44\u4e2d\uff09": [[33, "index-21"]], "global interpreter lock\uff08\u5168\u57df\u76f4\u8b6f\u5668\u9396\uff09": [[33, "index-32"], [87, "term-global-interpreter-lock"]], "interpreter lock\uff08\u76f4\u8b6f\u5668\u9396\uff09": [[33, "index-32"]], "lock, interpreter\uff08\u9396\u3001\u76f4\u8b6f\u5668\uff09": [[33, "index-32"]], "main()": [[33, "index-16"], [33, "index-19"], [33, "index-29"]], "path\uff08sys \u6a21\u7d44\u4e2d\uff09": [[33, "index-15"], [33, "index-22"], [33, "index-23"], [35, "index-18"]], "path\uff08\u8def\u5f91\uff09": [[33, "index-15"], [33, "index-22"], [33, "index-23"], [35, "index-18"], [265, "index-0"], [294, "index-0"], [296, "index-0"], [334, "index-0"], [334, "index-4"], [352, "index-21"], [432, "index-9"], [450, "index-0"]], "platform\uff08sys \u6a21\u7d44\u4e2d\uff09": [[33, "index-25"]], "sdterr": [[33, "index-16"]], "search\uff08\u641c\u5c0b\uff09": [[33, "index-15"], [33, "index-22"], [33, "index-23"], [35, "index-18"], [265, "index-0"], [334, "index-0"], [352, "index-21"], [450, "index-0"]], "setswitchinterval \uff08sys \u6a21\u7d44\u4e2d\uff09": [[33, "index-33"]], "stderr\uff08sys \u6a21\u7d44\u4e2d\uff09": [[33, "index-42"], [33, "index-45"]], "stdin": [[33, "index-16"]], "stdin\uff08sys \u6a21\u7d44\u4e2d\uff09": [[33, "index-42"], [33, "index-45"]], "stdout": [[33, "index-16"]], "stdout\uff08sys \u6a21\u7d44\u4e2d\uff09": [[33, "index-42"], [33, "index-45"]], "sys": [[33, "index-15"], [33, "index-42"], [33, "index-45"], [35, "index-18"], [225, "index-8"], [352, "module-sys"], [427, "index-11"], [437, "index-2"], [450, "index-4"]], "version\uff08sys \u6a21\u7d44\u4e2d\uff09": [[33, "index-24"], [33, "index-27"], [33, "index-28"]], "\u6a21\u7d44": [[33, "index-15"], [33, "index-22"], [33, "index-23"], [33, "index-38"], [33, "index-42"], [33, "index-45"], [344, "index-15"], [344, "index-33"], [344, "index-40"], [344, "index-65"]], "\u74b0\u5883\u8b8a\u6578": [[33, "index-17"], [33, "index-18"], [33, "index-3"], [33, "index-30"], [33, "index-31"], [33, "index-62"], [33, "index-63"], [33, "index-64"], [33, "index-65"], [33, "index-66"], [33, "index-67"], [33, "index-68"], [33, "index-71"], [33, "index-72"], [33, "index-73"], [33, "index-74"], [33, "index-9"], [34, "index-1"], [34, "index-10"], [34, "index-11"], [34, "index-12"], [34, "index-13"], [34, "index-14"], [34, "index-15"], [34, "index-16"], [34, "index-18"], [34, "index-19"], [34, "index-2"], [34, "index-20"], [34, "index-21"], [34, "index-22"], [34, "index-23"], [34, "index-24"], [34, "index-25"], [34, "index-26"], [34, "index-27"], [34, "index-28"], [34, "index-29"], [34, "index-3"], [34, "index-30"], [34, "index-31"], [34, "index-32"], [34, "index-35"], [34, "index-36"], [34, "index-4"], [34, "index-5"], [34, "index-6"], [34, "index-8"], [34, "index-9"], [35, "index-41"], [35, "index-42"], [35, "index-43"], [35, "index-44"], [35, "index-45"], [35, "index-46"], [42, "index-1"], [42, "index-2"], [42, "index-3"], [42, "index-4"], [42, "index-5"], [63, "index-0"], [71, "index-0"], [84, "index-0"], [84, "index-1"], [85, "index-4"], [104, "index-2"], [125, "index-2"], [126, "index-5"], [151, "index-3"], [151, "index-4"], [151, "index-6"], [163, "index-1"], [177, "index-0"], [177, "index-1"], [177, "index-2"], [177, "index-3"], [177, "index-4"], [177, "index-5"], [177, "index-6"], [188, "index-0"], [188, "index-1"], [188, "index-2"], [188, "index-3"], [188, "index-4"], [188, "index-5"], [214, "index-0"], [225, "index-1"], [225, "index-16"], [228, "index-0"], [229, "index-6"], [229, "index-7"], [229, "index-8"], [230, "index-0"], [230, "index-1"], [230, "index-2"], [230, "index-3"], [230, "index-5"], [230, "index-6"], [230, "index-7"], [230, "index-8"], [247, "index-5"], [247, "index-6"], [258, "index-9"], [266, "index-1"], [266, "index-2"], [266, "index-3"], [293, "index-1"], [293, "index-10"], [293, "index-11"], [293, "index-2"], [293, "index-3"], [293, "index-33"], [293, "index-34"], [293, "index-35"], [293, "index-36"], [293, "index-39"], [293, "index-4"], [293, "index-40"], [293, "index-41"], [293, "index-42"], [293, "index-43"], [293, "index-52"], [294, "index-16"], [294, "index-17"], [294, "index-18"], [294, "index-19"], [294, "index-20"], [294, "index-21"], [295, "index-1"], [295, "index-2"], [311, "index-3"], [311, "index-6"], [311, "index-7"], [313, "index-1"], [320, "index-0"], [327, "index-6"], [334, "index-3"], [334, "index-5"], [334, "index-6"], [334, "index-7"], [334, "index-8"], [341, "index-29"], [341, "index-30"], [344, "index-67"], [344, "index-68"], [348, "index-2"], [348, "index-3"], [348, "index-4"], [352, "index-17"], [352, "index-18"], [352, "index-22"], [352, "index-23"], [352, "index-24"], [352, "index-3"], [352, "index-33"], [352, "index-35"], [352, "index-36"], [352, "index-37"], [352, "index-38"], [352, "index-4"], [352, "index-5"], [352, "index-6"], [352, "index-7"], [354, "index-0"], [354, "index-1"], [354, "index-2"], [354, "index-3"], [354, "index-4"], [360, "index-7"], [360, "index-8"], [360, "index-9"], [362, "index-0"], [362, "index-1"], [362, "index-2"], [366, "index-13"], [366, "index-14"], [366, "index-15"], [366, "index-16"], [366, "index-17"], [366, "index-18"], [369, "index-0"], [369, "index-1"], [382, "index-0"], [382, "index-1"], [382, "index-2"], [395, "index-3"], [399, "index-10"], [399, "index-11"], [399, "index-12"], [400, "index-1"], [400, "index-2"], [400, "index-3"], [400, "index-4"], [400, "index-5"], [403, "index-0"], [403, "index-1"], [403, "index-2"], [403, "index-3"], [410, "index-0"], [425, "envvar-PYTHONTZPATH"], [425, "index-2"], [428, "index-114"], [428, "index-61"], [432, "index-18"], [438, "index-12"], [438, "index-13"], [450, "index-14"], [450, "index-15"], [450, "index-17"], [450, "index-18"], [455, "envvar-PYTHONASYNCIODEBUG"], [455, "envvar-PYTHONBREAKPOINT"], [455, "envvar-PYTHONCASEOK"], [455, "envvar-PYTHONCOERCECLOCALE"], [455, "envvar-PYTHONDEBUG"], [455, "envvar-PYTHONDEVMODE"], [455, "envvar-PYTHONDONTWRITEBYTECODE"], [455, "envvar-PYTHONDUMPREFS"], [455, "envvar-PYTHONDUMPREFSFILE-FILENAME"], [455, "envvar-PYTHONEXECUTABLE"], [455, "envvar-PYTHONFAULTHANDLER"], [455, "envvar-PYTHONHASHSEED"], [455, "envvar-PYTHONHOME"], [455, "envvar-PYTHONINSPECT"], [455, "envvar-PYTHONINTMAXSTRDIGITS"], [455, "envvar-PYTHONIOENCODING"], [455, "envvar-PYTHONLEGACYWINDOWSFSENCODING"], [455, "envvar-PYTHONLEGACYWINDOWSSTDIO"], [455, "envvar-PYTHONMALLOC"], [455, "envvar-PYTHONMALLOCSTATS"], [455, "envvar-PYTHONNODEBUGRANGES"], [455, "envvar-PYTHONNOUSERSITE"], [455, "envvar-PYTHONOPTIMIZE"], [455, "envvar-PYTHONPATH"], [455, "envvar-PYTHONPERFSUPPORT"], [455, "envvar-PYTHONPLATLIBDIR"], [455, "envvar-PYTHONPROFILEIMPORTTIME"], [455, "envvar-PYTHONPYCACHEPREFIX"], [455, "envvar-PYTHONSAFEPATH"], [455, "envvar-PYTHONSTARTUP"], [455, "envvar-PYTHONTRACEMALLOC"], [455, "envvar-PYTHONUNBUFFERED"], [455, "envvar-PYTHONUSERBASE"], [455, "envvar-PYTHONUTF8"], [455, "envvar-PYTHONVERBOSE"], [455, "envvar-PYTHONWARNDEFAULTENCODING"], [455, "envvar-PYTHONWARNINGS"], [455, "index-1"], [455, "index-12"], [455, "index-13"], [455, "index-14"], [455, "index-15"], [455, "index-19"], [455, "index-2"], [455, "index-20"], [455, "index-21"], [455, "index-22"], [455, "index-23"], [455, "index-24"], [455, "index-25"], [455, "index-26"], [455, "index-27"], [455, "index-28"], [455, "index-29"], [455, "index-3"], [455, "index-30"], [455, "index-31"], [455, "index-32"], [455, "index-33"], [455, "index-34"], [455, "index-35"], [455, "index-36"], [455, "index-37"], [455, "index-38"], [455, "index-4"], [455, "index-41"], [455, "index-43"], [455, "index-44"], [455, "index-5"], [455, "index-54"], [455, "index-55"], [455, "index-6"], [455, "index-8"], [456, "envvar-BASECFLAGS"], [456, "envvar-BASECPPFLAGS"], [456, "envvar-BLDSHARED"], [456, "envvar-CC"], [456, "envvar-CCSHARED"], [456, "envvar-CFLAGS"], [456, "envvar-CFLAGSFORSHARED"], [456, "envvar-CFLAGS_ALIASING"], [456, "envvar-CFLAGS_NODIST"], [456, "envvar-COMPILEALL_OPTS"], [456, "envvar-CONFIGURE_CFLAGS"], [456, "envvar-CONFIGURE_CFLAGS_NODIST"], [456, "envvar-CONFIGURE_CPPFLAGS"], [456, "envvar-CONFIGURE_LDFLAGS"], [456, "envvar-CONFIGURE_LDFLAGS_NODIST"], [456, "envvar-CPPFLAGS"], [456, "envvar-CXX"], [456, "envvar-EXTRA_CFLAGS"], [456, "envvar-LDFLAGS"], [456, "envvar-LDFLAGS_NODIST"], [456, "envvar-LDSHARED"], [456, "envvar-LIBS"], [456, "envvar-LINKCC"], [456, "envvar-OPT"], [456, "envvar-PROFILE_TASK"], [456, "envvar-PURIFY"], [456, "envvar-PY_BUILTIN_MODULE_CFLAGS"], [456, "envvar-PY_CFLAGS"], [456, "envvar-PY_CFLAGS_NODIST"], [456, "envvar-PY_CORE_CFLAGS"], [456, "envvar-PY_CORE_LDFLAGS"], [456, "envvar-PY_CPPFLAGS"], [456, "envvar-PY_LDFLAGS"], [456, "envvar-PY_LDFLAGS_NODIST"], [456, "envvar-PY_STDMODULE_CFLAGS"], [456, "index-10"], [456, "index-11"], [456, "index-12"], [456, "index-13"], [456, "index-14"], [456, "index-15"], [456, "index-16"], [456, "index-17"], [456, "index-18"], [456, "index-19"], [456, "index-20"], [456, "index-21"], [456, "index-22"], [456, "index-23"], [456, "index-24"], [456, "index-25"], [456, "index-26"], [456, "index-27"], [456, "index-28"], [456, "index-33"], [456, "index-35"], [456, "index-36"], [456, "index-4"], [456, "index-6"], [456, "index-8"], [456, "index-9"], [459, "index-2"], [460, "index-2"], [461, "index-10"], [461, "index-11"], [461, "index-12"], [461, "index-13"], [461, "index-14"], [461, "index-15"], [461, "index-18"], [461, "index-2"], [461, "index-20"], [461, "index-22"], [461, "index-23"], [461, "index-24"], [461, "index-25"], [461, "index-26"], [461, "index-27"], [461, "index-28"], [461, "index-29"], [461, "index-3"], [461, "index-30"], [461, "index-31"], [461, "index-32"], [461, "index-33"], [461, "index-34"], [461, "index-35"], [461, "index-36"], [461, "index-37"], [461, "index-4"], [461, "index-40"], [461, "index-5"], [461, "index-6"], [461, "index-7"], [461, "index-8"], [461, "index-9"], [463, "index-11"], [465, "index-24"], [465, "index-25"], [465, "index-26"], [465, "index-27"], [465, "index-28"], [468, "index-20"], [468, "index-21"], [468, "index-24"], [468, "index-4"], [468, "index-5"], [468, "index-6"], [469, "index-1"], [469, "index-11"], [469, "index-8"], [472, "index-98"], [473, "index-103"], [473, "index-83"], [473, "index-88"], [474, "index-23"], [474, "index-62"], [475, "index-10"], [476, "index-23"], [476, "index-24"], [476, "index-35"], [477, "index-40"], [477, "index-41"], [477, "index-50"], [477, "index-53"], [477, "index-54"], [477, "index-55"], [477, "index-56"], [477, "index-57"], [477, "index-58"], [479, "index-19"], [479, "index-2"], [479, "index-21"], [479, "index-27"], [479, "index-38"], [480, "index-12"], [480, "index-26"], [480, "index-27"], [480, "index-31"], [480, "index-36"], [480, "index-4"], [480, "index-8"], [481, "index-13"], [481, "index-14"], [481, "index-2"], [481, "index-20"], [481, "index-21"], [481, "index-22"], [481, "index-3"], [482, "index-21"], [483, "index-0"], [483, "index-106"], [483, "index-136"], [483, "index-152"], [483, "index-191"], [483, "index-199"], [483, "index-200"], [483, "index-201"], [483, "index-203"], [483, "index-207"], [483, "index-211"], [483, "index-212"], [483, "index-214"], [483, "index-216"], [483, "index-218"], [483, "index-225"], [483, "index-226"], [483, "index-230"], [483, "index-231"], [483, "index-235"], [483, "index-236"], [483, "index-244"], [483, "index-255"], [483, "index-256"], [483, "index-285"], [483, "index-286"], [483, "index-40"], [483, "index-49"], [483, "index-50"], [483, "index-53"], [483, "index-54"], [483, "index-63"], [483, "index-75"], [483, "index-78"], [483, "index-86"], [483, "index-93"]], "pep 432": [[34, "index-37"], [34, "index-38"], [480, "index-38"], [483, "index-249"]], "pep 538": [[34, "index-33"], [266, "index-6"], [455, "index-57"], [456, "index-34"], [480, "index-10"], [480, "index-3"], [480, "index-6"], [480, "index-7"], [483, "index-223"], [483, "index-227"], [483, "index-248"]], "pep 540": [[34, "index-34"], [266, "index-7"], [293, "index-55"], [480, "index-11"], [480, "index-9"], [483, "index-237"]], "pep 552": [[34, "index-7"], [250, "index-9"], [311, "index-5"], [473, "index-105"], [480, "index-22"], [480, "index-23"], [483, "index-220"], [483, "index-240"]], "pep 587": [[34, "index-0"], [481, "index-36"], [481, "index-5"], [483, "index-204"], [483, "index-209"], [483, "index-94"]], "pythoncoerceclocale": [[34, "index-36"], [293, "index-4"], [455, "envvar-PYTHONCOERCECLOCALE"], [456, "index-33"], [480, "index-4"]], "pythondevmode": [[34, "index-8"], [188, "index-0"], [455, "envvar-PYTHONDEVMODE"], [455, "index-24"], [480, "index-26"]], "pythondumprefs": [[34, "index-9"], [63, "index-0"], [455, "envvar-PYTHONDUMPREFS"], [456, "index-36"], [481, "index-3"], [483, "index-214"]], "pythonexecutable": [[34, "index-23"], [455, "envvar-PYTHONEXECUTABLE"]], "pythonfaulthandler": [[34, "index-10"], [188, "index-4"], [214, "index-0"], [455, "envvar-PYTHONFAULTHANDLER"], [455, "index-20"], [476, "index-24"]], "pythonintmaxstrdigits": [[34, "index-15"], [344, "index-67"], [344, "index-68"], [352, "index-17"], [455, "envvar-PYTHONINTMAXSTRDIGITS"], [455, "index-22"], [483, "index-40"]], "pythonmallocstats": [[34, "index-18"], [42, "index-2"], [455, "envvar-PYTHONMALLOCSTATS"], [483, "index-286"]], "pythonnodebugranges": [[34, "index-6"], [428, "index-61"], [455, "envvar-PYTHONNODEBUGRANGES"], [455, "index-28"], [473, "index-88"]], "pythonperfsupport": [[34, "index-28"], [104, "index-2"], [455, "envvar-PYTHONPERFSUPPORT"], [455, "index-29"], [474, "index-23"]], "pythonplatlibdir": [[34, "index-19"], [354, "index-3"], [455, "envvar-PYTHONPLATLIBDIR"], [483, "index-152"]], "pythonprofileimporttime": [[34, "index-13"], [455, "envvar-PYTHONPROFILEIMPORTTIME"], [455, "index-23"], [480, "index-27"], [483, "index-244"]], "pythonpycacheprefix": [[34, "index-25"], [352, "index-7"], [455, "envvar-PYTHONPYCACHEPREFIX"], [455, "index-26"], [481, "index-2"], [483, "index-216"]], "pythonsafepath": [[34, "index-3"], [327, "index-6"], [352, "index-24"], [455, "envvar-PYTHONSAFEPATH"], [455, "index-12"], [473, "index-103"], [473, "index-83"], [483, "index-54"]], "pythontracemalloc": [[34, "index-27"], [382, "index-0"], [382, "index-1"], [382, "index-2"], [455, "envvar-PYTHONTRACEMALLOC"], [455, "index-21"]], "pythonutf8": [[34, "index-2"], [34, "index-35"], [293, "index-2"], [293, "index-3"], [352, "index-36"], [455, "envvar-PYTHONUTF8"], [455, "index-25"], [455, "index-44"], [461, "index-15"], [480, "index-8"]], "pythonwarnings": [[34, "index-31"], [188, "index-1"], [400, "index-1"], [400, "index-2"], [400, "index-3"], [400, "index-4"], [400, "index-5"], [455, "envvar-PYTHONWARNINGS"], [455, "index-19"], [469, "index-1"], [469, "index-8"], [475, "index-10"], [480, "index-36"], [483, "index-49"]], "pyconfig (c type)": [[34, "c.PyConfig"]], "pyconfig.argv (c member)": [[34, "c.PyConfig.argv"]], "pyconfig.base_exec_prefix (c member)": [[34, "c.PyConfig.base_exec_prefix"]], "pyconfig.base_executable (c member)": [[34, "c.PyConfig.base_executable"]], "pyconfig.base_prefix (c member)": [[34, "c.PyConfig.base_prefix"]], "pyconfig.buffered_stdio (c member)": [[34, "c.PyConfig.buffered_stdio"]], "pyconfig.bytes_warning (c member)": [[34, "c.PyConfig.bytes_warning"]], "pyconfig.check_hash_pycs_mode (c member)": [[34, "c.PyConfig.check_hash_pycs_mode"]], "pyconfig.code_debug_ranges (c member)": [[34, "c.PyConfig.code_debug_ranges"]], "pyconfig.configure_c_stdio (c member)": [[34, "c.PyConfig.configure_c_stdio"]], "pyconfig.dev_mode (c member)": [[34, "c.PyConfig.dev_mode"]], "pyconfig.dump_refs (c member)": [[34, "c.PyConfig.dump_refs"]], "pyconfig.exec_prefix (c member)": [[34, "c.PyConfig.exec_prefix"]], "pyconfig.executable (c member)": [[34, "c.PyConfig.executable"]], "pyconfig.faulthandler (c member)": [[34, "c.PyConfig.faulthandler"]], "pyconfig.filesystem_encoding (c member)": [[34, "c.PyConfig.filesystem_encoding"]], "pyconfig.filesystem_errors (c member)": [[34, "c.PyConfig.filesystem_errors"]], "pyconfig.hash_seed (c member)": [[34, "c.PyConfig.hash_seed"]], "pyconfig.home (c member)": [[34, "c.PyConfig.home"]], "pyconfig.import_time (c member)": [[34, "c.PyConfig.import_time"]], "pyconfig.inspect (c member)": [[34, "c.PyConfig.inspect"]], "pyconfig.install_signal_handlers (c member)": [[34, "c.PyConfig.install_signal_handlers"]], "pyconfig.int_max_str_digits (c member)": [[34, "c.PyConfig.int_max_str_digits"]], "pyconfig.interactive (c member)": [[34, "c.PyConfig.interactive"]], "pyconfig.isolated (c member)": [[34, "c.PyConfig.isolated"]], "pyconfig.legacy_windows_stdio (c member)": [[34, "c.PyConfig.legacy_windows_stdio"]], "pyconfig.malloc_stats (c member)": [[34, "c.PyConfig.malloc_stats"]], "pyconfig.module_search_paths (c member)": [[34, "c.PyConfig.module_search_paths"]], "pyconfig.module_search_paths_set (c member)": [[34, "c.PyConfig.module_search_paths_set"]], "pyconfig.optimization_level (c member)": [[34, "c.PyConfig.optimization_level"]], "pyconfig.orig_argv (c member)": [[34, "c.PyConfig.orig_argv"]], "pyconfig.parse_argv (c member)": [[34, "c.PyConfig.parse_argv"]], "pyconfig.parser_debug (c member)": [[34, "c.PyConfig.parser_debug"]], "pyconfig.pathconfig_warnings (c member)": [[34, "c.PyConfig.pathconfig_warnings"]], "pyconfig.perf_profiling (c member)": [[34, "c.PyConfig.perf_profiling"]], "pyconfig.platlibdir (c member)": [[34, "c.PyConfig.platlibdir"]], "pyconfig.prefix (c member)": [[34, "c.PyConfig.prefix"]], "pyconfig.program_name (c member)": [[34, "c.PyConfig.program_name"]], "pyconfig.pycache_prefix (c member)": [[34, "c.PyConfig.pycache_prefix"]], "pyconfig.pythonpath_env (c member)": [[34, "c.PyConfig.pythonpath_env"]], "pyconfig.quiet (c member)": [[34, "c.PyConfig.quiet"]], "pyconfig.run_command (c member)": [[34, "c.PyConfig.run_command"]], "pyconfig.run_filename (c member)": [[34, "c.PyConfig.run_filename"]], "pyconfig.run_module (c member)": [[34, "c.PyConfig.run_module"]], "pyconfig.safe_path (c member)": [[34, "c.PyConfig.safe_path"]], "pyconfig.show_ref_count (c member)": [[34, "c.PyConfig.show_ref_count"]], "pyconfig.site_import (c member)": [[34, "c.PyConfig.site_import"]], "pyconfig.skip_source_first_line (c member)": [[34, "c.PyConfig.skip_source_first_line"]], "pyconfig.stdio_encoding (c member)": [[34, "c.PyConfig.stdio_encoding"]], "pyconfig.stdio_errors (c member)": [[34, "c.PyConfig.stdio_errors"]], "pyconfig.tracemalloc (c member)": [[34, "c.PyConfig.tracemalloc"]], "pyconfig.use_environment (c member)": [[34, "c.PyConfig.use_environment"]], "pyconfig.use_hash_seed (c member)": [[34, "c.PyConfig.use_hash_seed"]], "pyconfig.user_site_directory (c member)": [[34, "c.PyConfig.user_site_directory"]], "pyconfig.verbose (c member)": [[34, "c.PyConfig.verbose"]], "pyconfig.warn_default_encoding (c member)": [[34, "c.PyConfig.warn_default_encoding"]], "pyconfig.warnoptions (c member)": [[34, "c.PyConfig.warnoptions"]], "pyconfig.write_bytecode (c member)": [[34, "c.PyConfig.write_bytecode"]], "pyconfig.xoptions (c member)": [[34, "c.PyConfig.xoptions"]], "pyconfig_clear (c function)": [[34, "c.PyConfig_Clear"]], "pyconfig_initisolatedconfig (c function)": [[34, "c.PyConfig_InitIsolatedConfig"]], "pyconfig_initpythonconfig (c function)": [[34, "c.PyConfig_InitPythonConfig"]], "pyconfig_read (c function)": [[34, "c.PyConfig_Read"]], "pyconfig_setargv (c function)": [[34, "c.PyConfig_SetArgv"]], "pyconfig_setbytesargv (c function)": [[34, "c.PyConfig_SetBytesArgv"]], "pyconfig_setbytesstring (c function)": [[34, "c.PyConfig_SetBytesString"]], "pyconfig_setstring (c function)": [[34, "c.PyConfig_SetString"]], "pyconfig_setwidestringlist (c function)": [[34, "c.PyConfig_SetWideStringList"]], "pypreconfig (c type)": [[34, "c.PyPreConfig"]], "pypreconfig.allocator (c member)": [[34, "c.PyPreConfig.allocator"]], "pypreconfig.coerce_c_locale (c member)": [[34, "c.PyPreConfig.coerce_c_locale"]], "pypreconfig.coerce_c_locale_warn (c member)": [[34, "c.PyPreConfig.coerce_c_locale_warn"]], "pypreconfig.configure_locale (c member)": [[34, "c.PyPreConfig.configure_locale"]], "pypreconfig.dev_mode (c member)": [[34, "c.PyPreConfig.dev_mode"]], "pypreconfig.isolated (c member)": [[34, "c.PyPreConfig.isolated"]], "pypreconfig.legacy_windows_fs_encoding (c member)": [[34, "c.PyPreConfig.legacy_windows_fs_encoding"]], "pypreconfig.parse_argv (c member)": [[34, "c.PyPreConfig.parse_argv"]], "pypreconfig.use_environment (c member)": [[34, "c.PyPreConfig.use_environment"]], "pypreconfig.utf8_mode (c member)": [[34, "c.PyPreConfig.utf8_mode"]], "pypreconfig_initisolatedconfig (c function)": [[34, "c.PyPreConfig_InitIsolatedConfig"]], "pypreconfig_initpythonconfig (c function)": [[34, "c.PyPreConfig_InitPythonConfig"]], "pystatus (c type)": [[34, "c.PyStatus"]], "pystatus.err_msg (c member)": [[34, "c.PyStatus.err_msg"]], "pystatus.exitcode (c member)": [[34, "c.PyStatus.exitcode"]], "pystatus.func (c member)": [[34, "c.PyStatus.func"]], "pystatus_error (c function)": [[34, "c.PyStatus_Error"]], "pystatus_exception (c function)": [[34, "c.PyStatus_Exception"]], "pystatus_exit (c function)": [[34, "c.PyStatus_Exit"]], "pystatus_iserror (c function)": [[34, "c.PyStatus_IsError"]], "pystatus_isexit (c function)": [[34, "c.PyStatus_IsExit"]], "pystatus_nomemory (c function)": [[34, "c.PyStatus_NoMemory"]], "pystatus_ok (c function)": [[34, "c.PyStatus_Ok"]], "pywidestringlist (c type)": [[34, "c.PyWideStringList"]], "pywidestringlist.items (c member)": [[34, "c.PyWideStringList.items"]], "pywidestringlist.length (c member)": [[34, "c.PyWideStringList.length"]], "pywidestringlist_append (c function)": [[34, "c.PyWideStringList_Append"]], "pywidestringlist_insert (c function)": [[34, "c.PyWideStringList_Insert"]], "py_exitstatusexception (c function)": [[34, "c.Py_ExitStatusException"]], "py_getargcargv (c function)": [[34, "c.Py_GetArgcArgv"]], "py_initializefromconfig (c function)": [[34, "c.Py_InitializeFromConfig"]], "py_preinitialize (c function)": [[34, "c.Py_PreInitialize"]], "py_preinitializefromargs (c function)": [[34, "c.Py_PreInitializeFromArgs"]], "py_preinitializefrombytesargs (c function)": [[34, "c.Py_PreInitializeFromBytesArgs"]], "py_runmain (c function)": [[34, "c.Py_RunMain"]], "_py_initializemain (c function)": [[34, "c._Py_InitializeMain"]], "__pyvenv_launcher__": [[34, "index-24"], [34, "index-4"]], "path": [[35, "index-41"], [35, "index-42"], [84, "index-0"], [84, "index-1"], [151, "index-3"], [151, "index-6"], [293, "index-33"], [293, "index-34"], [293, "index-35"], [293, "index-36"], [293, "index-39"], [293, "index-40"], [293, "index-41"], [293, "index-42"], [293, "index-52"], [334, "index-3"], [348, "index-2"], [399, "index-10"], [399, "index-11"], [399, "index-12"], [403, "index-3"], [438, "index-12"], [450, "index-15"], [455, "index-32"], [460, "index-2"], [461, "index-10"], [461, "index-12"], [461, "index-13"], [461, "index-14"], [461, "index-18"], [461, "index-2"], [461, "index-20"], [461, "index-22"], [461, "index-23"], [461, "index-25"], [461, "index-3"], [461, "index-40"], [461, "index-5"], [461, "index-9"], [477, "index-54"], [477, "index-57"], [477, "index-58"], [481, "index-22"], [483, "index-211"], [483, "index-212"], [483, "index-53"], [483, "index-78"]], "pep 353": [[35, "index-40"], [467, "index-16"], [467, "index-17"], [467, "index-29"], [472, "index-116"], [483, "index-157"]], "pep 7": [[35, "index-37"], [35, "index-38"], [35, "index-39"], [456, "index-0"], [479, "index-34"]], "pydoc_str (c macro)": [[35, "c.PyDoc_STR"]], "pydoc_strvar (c macro)": [[35, "c.PyDoc_STRVAR"]], "pyerr_clear\uff08c \u51fd\u5f0f\uff09": [[35, "index-12"], [35, "index-17"]], "pyerr_exceptionmatches\uff08c \u51fd\u5f0f\uff09": [[35, "index-17"]], "pyerr_occurred\uff08c \u51fd\u5f0f\uff09": [[35, "index-11"]], "pyerr_setstring\uff08c \u51fd\u5f0f\uff09": [[35, "index-12"]], "pylist_getitem\uff08c \u51fd\u5f0f\uff09": [[35, "index-7"]], "pylist_setitem\uff08c \u51fd\u5f0f\uff09": [[35, "index-5"]], "pymodinit_func (c macro)": [[35, "c.PyMODINIT_FUNC"]], "pysequence_getitem\uff08c \u51fd\u5f0f\uff09": [[35, "index-7"]], "pytuple_setitem\uff08c \u51fd\u5f0f\uff09": [[35, "index-5"]], "py_abs (c macro)": [[35, "c.Py_ABS"]], "py_always_inline (c macro)": [[35, "c.Py_ALWAYS_INLINE"]], "py_charmask (c macro)": [[35, "c.Py_CHARMASK"]], "py_debug (c macro)": [[35, "c.Py_DEBUG"]], "py_decref\uff08c \u51fd\u5f0f\uff09": [[35, "index-4"]], "py_deprecated (c macro)": [[35, "c.Py_DEPRECATED"]], "py_getenv (c macro)": [[35, "c.Py_GETENV"]], "py_getexecprefix\uff08c \u51fd\u5f0f\uff09": [[35, "index-23"]], "py_getpath\uff08c \u51fd\u5f0f\uff09": [[35, "index-23"]], "py_getprefix\uff08c \u51fd\u5f0f\uff09": [[35, "index-23"]], "py_getprogramfullpath\uff08c \u51fd\u5f0f\uff09": [[35, "index-23"]], "py_incref\uff08c \u51fd\u5f0f\uff09": [[35, "index-4"]], "py_isinitialized\uff08c \u51fd\u5f0f\uff09": [[35, "index-26"]], "py_max (c macro)": [[35, "c.Py_MAX"]], "py_member_size (c macro)": [[35, "c.Py_MEMBER_SIZE"]], "py_min (c macro)": [[35, "c.Py_MIN"]], "py_no_inline (c macro)": [[35, "c.Py_NO_INLINE"]], "py_stringify (c macro)": [[35, "c.Py_STRINGIFY"]], "py_setprogramname\uff08c \u51fd\u5f0f\uff09": [[35, "index-23"]], "py_unreachable (c macro)": [[35, "c.Py_UNREACHABLE"]], "py_unused (c macro)": [[35, "c.Py_UNUSED"]], "py_xdecref\uff08c \u51fd\u5f0f\uff09": [[35, "index-17"]], "py_ssize_t (c type)": [[35, "c.Py_ssize_t"]], "exc_info \uff08sys \u6a21\u7d44\u4e2d\uff09": [[35, "index-13"], [428, "index-66"]], "incr_item()": [[35, "index-15"], [35, "index-16"]], "set_all()": [[35, "index-6"]], "sum_list()": [[35, "index-8"]], "sum_sequence()": [[35, "index-14"], [35, "index-9"]], "type\uff08\u578b\u5225\uff09": [[35, "index-3"], [49, "index-7"], [61, "index-0"], [87, "term-type"], [225, "index-0"], [225, "index-12"], [344, "index-0"], [344, "index-14"], [344, "index-16"], [344, "index-20"], [344, "index-22"], [344, "index-23"], [344, "index-24"], [344, "index-52"], [344, "index-59"], [344, "index-65"], [428, "index-1"], [428, "index-4"], [428, "index-86"], [430, "index-7"]], "pyaiter_check (c function)": [[36, "c.PyAIter_Check"]], "pyiter_check (c function)": [[36, "c.PyIter_Check"]], "pyiter_next (c function)": [[36, "c.PyIter_Next"]], "pyiter_send (c function)": [[36, "c.PyIter_Send"]], "pysendresult (c type)": [[36, "c.PySendResult"]], "pycalliter_check (c function)": [[37, "c.PyCallIter_Check"]], "pycalliter_new (c function)": [[37, "c.PyCallIter_New"]], "pycalliter_type (c var)": [[37, "c.PyCallIter_Type"]], "pyseqiter_check (c function)": [[37, "c.PySeqIter_Check"]], "pyseqiter_new (c function)": [[37, "c.PySeqIter_New"]], "pyseqiter_type (c var)": [[37, "c.PySeqIter_Type"]], "pylistobject (c type)": [[38, "c.PyListObject"]], "pylist_append (c function)": [[38, "c.PyList_Append"]], "pylist_astuple (c function)": [[38, "c.PyList_AsTuple"]], "pylist_check (c function)": [[38, "c.PyList_Check"]], "pylist_checkexact (c function)": [[38, "c.PyList_CheckExact"]], "pylist_get_item (c function)": [[38, "c.PyList_GET_ITEM"]], "pylist_get_size (c function)": [[38, "c.PyList_GET_SIZE"]], "pylist_getitem (c function)": [[38, "c.PyList_GetItem"]], "pylist_getslice (c function)": [[38, "c.PyList_GetSlice"]], "pylist_insert (c function)": [[38, "c.PyList_Insert"]], "pylist_new (c function)": [[38, "c.PyList_New"]], "pylist_reverse (c function)": [[38, "c.PyList_Reverse"]], "pylist_set_item (c function)": [[38, "c.PyList_SET_ITEM"]], "pylist_setitem (c function)": [[38, "c.PyList_SetItem"]], "pylist_setslice (c function)": [[38, "c.PyList_SetSlice"]], "pylist_size (c function)": [[38, "c.PyList_Size"]], "pylist_sort (c function)": [[38, "c.PyList_Sort"]], "pylist_type (c var)": [[38, "c.PyList_Type"]], "list\uff08\u4e32\u5217\uff09": [[38, "index-0"], [87, "term-list"], [344, "index-23"], [344, "index-24"], [344, "index-25"], [427, "index-6"], [428, "index-25"], [430, "index-15"], [430, "index-40"], [430, "index-42"], [430, "index-45"], [430, "index-91"], [436, "index-1"], [436, "index-10"], [436, "index-2"], [436, "index-21"], [436, "index-5"], [436, "index-6"]], "tuple\uff08\u5143\u7d44\uff09": [[38, "index-2"], [60, "index-0"], [344, "index-22"], [344, "index-26"], [428, "index-20"]], "long_max\uff08c \u5de8\u96c6\uff09": [[39, "index-1"]], "overflowerror\uff08\u5185\u5efa\u4f8b\u5916\uff09": [[39, "index-1"], [39, "index-2"], [39, "index-3"], [39, "index-4"], [39, "index-5"], [39, "index-6"]], "py_ssize_t_max\uff08c \u5de8\u96c6\uff09": [[39, "index-3"]], "pylongobject (c type)": [[39, "c.PyLongObject"]], "pylong_asdouble (c function)": [[39, "c.PyLong_AsDouble"]], "pylong_aslong (c function)": [[39, "c.PyLong_AsLong"]], "pylong_aslongandoverflow (c function)": [[39, "c.PyLong_AsLongAndOverflow"]], "pylong_aslonglong (c function)": [[39, "c.PyLong_AsLongLong"]], "pylong_aslonglongandoverflow (c function)": [[39, "c.PyLong_AsLongLongAndOverflow"]], "pylong_assize_t (c function)": [[39, "c.PyLong_AsSize_t"]], "pylong_asssize_t (c function)": [[39, "c.PyLong_AsSsize_t"]], "pylong_asunsignedlong (c function)": [[39, "c.PyLong_AsUnsignedLong"]], "pylong_asunsignedlonglong (c function)": [[39, "c.PyLong_AsUnsignedLongLong"]], "pylong_asunsignedlonglongmask (c function)": [[39, "c.PyLong_AsUnsignedLongLongMask"]], "pylong_asunsignedlongmask (c function)": [[39, "c.PyLong_AsUnsignedLongMask"]], "pylong_asvoidptr (c function)": [[39, "c.PyLong_AsVoidPtr"]], "pylong_check (c function)": [[39, "c.PyLong_Check"]], "pylong_checkexact (c function)": [[39, "c.PyLong_CheckExact"]], "pylong_fromdouble (c function)": [[39, "c.PyLong_FromDouble"]], "pylong_fromlong (c function)": [[39, "c.PyLong_FromLong"]], "pylong_fromlonglong (c function)": [[39, "c.PyLong_FromLongLong"]], "pylong_fromsize_t (c function)": [[39, "c.PyLong_FromSize_t"]], "pylong_fromssize_t (c function)": [[39, "c.PyLong_FromSsize_t"]], "pylong_fromstring (c function)": [[39, "c.PyLong_FromString"]], "pylong_fromunicodeobject (c function)": [[39, "c.PyLong_FromUnicodeObject"]], "pylong_fromunsignedlong (c function)": [[39, "c.PyLong_FromUnsignedLong"]], "pylong_fromunsignedlonglong (c function)": [[39, "c.PyLong_FromUnsignedLongLong"]], "pylong_fromvoidptr (c function)": [[39, "c.PyLong_FromVoidPtr"]], "pylong_type (c var)": [[39, "c.PyLong_Type"]], "pyunstable_long_compactvalue (c function)": [[39, "c.PyUnstable_Long_CompactValue"]], "pyunstable_long_iscompact (c function)": [[39, "c.PyUnstable_Long_IsCompact"]], "size_max\uff08c \u5de8\u96c6\uff09": [[39, "index-5"]], "ulong_max\uff08c \u5de8\u96c6\uff09": [[39, "index-4"]], "integer\uff08\u6574\u6570\uff09": [[39, "index-0"]], "long integer\uff08\u9577\u6574\u6570\uff09": [[39, "index-0"]], "pymapping_check (c function)": [[40, "c.PyMapping_Check"]], "pymapping_delitem (c function)": [[40, "c.PyMapping_DelItem"]], "pymapping_delitemstring (c function)": [[40, "c.PyMapping_DelItemString"]], "pymapping_getitemstring (c function)": [[40, "c.PyMapping_GetItemString"]], "pymapping_haskey (c function)": [[40, "c.PyMapping_HasKey"]], "pymapping_haskeystring (c function)": [[40, "c.PyMapping_HasKeyString"]], "pymapping_items (c function)": [[40, "c.PyMapping_Items"]], "pymapping_keys (c function)": [[40, "c.PyMapping_Keys"]], "pymapping_length (c function)": [[40, "c.PyMapping_Length"]], "pymapping_setitemstring (c function)": [[40, "c.PyMapping_SetItemString"]], "pymapping_size (c function)": [[40, "c.PyMapping_Size"]], "pymapping_values (c function)": [[40, "c.PyMapping_Values"]], "pymarshal_readlastobjectfromfile (c function)": [[41, "c.PyMarshal_ReadLastObjectFromFile"]], "pymarshal_readlongfromfile (c function)": [[41, "c.PyMarshal_ReadLongFromFile"]], "pymarshal_readobjectfromfile (c function)": [[41, "c.PyMarshal_ReadObjectFromFile"]], "pymarshal_readobjectfromstring (c function)": [[41, "c.PyMarshal_ReadObjectFromString"]], "pymarshal_readshortfromfile (c function)": [[41, "c.PyMarshal_ReadShortFromFile"]], "pymarshal_writelongtofile (c function)": [[41, "c.PyMarshal_WriteLongToFile"]], "pymarshal_writeobjecttofile (c function)": [[41, "c.PyMarshal_WriteObjectToFile"]], "pymarshal_writeobjecttostring (c function)": [[41, "c.PyMarshal_WriteObjectToString"]], "pymem_domain_mem (c macro)": [[42, "c.PYMEM_DOMAIN_MEM"]], "pymem_domain_obj (c macro)": [[42, "c.PYMEM_DOMAIN_OBJ"]], "pymem_domain_raw (c macro)": [[42, "c.PYMEM_DOMAIN_RAW"]], "pythonmalloc": [[42, "index-1"], [42, "index-3"], [42, "index-4"], [42, "index-5"], [188, "index-2"], [188, "index-3"], [455, "envvar-PYTHONMALLOC"], [455, "index-41"], [456, "index-35"], [479, "index-27"], [479, "index-38"], [483, "index-285"]], "pymemallocatordomain (c type)": [[42, "c.PyMemAllocatorDomain"]], "pymemallocatorex (c type)": [[42, "c.PyMemAllocatorEx"]], "pymem_calloc (c function)": [[42, "c.PyMem_Calloc"]], "pymem_del (c function)": [[42, "c.PyMem_Del"]], "pymem_free (c function)": [[42, "c.PyMem_Free"]], "pymem_getallocator (c function)": [[42, "c.PyMem_GetAllocator"]], "pymem_malloc (c function)": [[42, "c.PyMem_Malloc"]], "pymem_new (c macro)": [[42, "c.PyMem_New"]], "pymem_rawcalloc (c function)": [[42, "c.PyMem_RawCalloc"]], "pymem_rawfree (c function)": [[42, "c.PyMem_RawFree"]], "pymem_rawmalloc (c function)": [[42, "c.PyMem_RawMalloc"]], "pymem_rawrealloc (c function)": [[42, "c.PyMem_RawRealloc"]], "pymem_realloc (c function)": [[42, "c.PyMem_Realloc"]], "pymem_resize (c macro)": [[42, "c.PyMem_Resize"]], "pymem_setallocator (c function)": [[42, "c.PyMem_SetAllocator"]], "pymem_setupdebughooks (c function)": [[42, "c.PyMem_SetupDebugHooks"]], "pyobjectarenaallocator (c type)": [[42, "c.PyObjectArenaAllocator"]], "pyobject_calloc (c function)": [[42, "c.PyObject_Calloc"]], "pyobject_free (c function)": [[42, "c.PyObject_Free"]], "pyobject_getarenaallocator (c function)": [[42, "c.PyObject_GetArenaAllocator"]], "pyobject_malloc (c function)": [[42, "c.PyObject_Malloc"]], "pyobject_realloc (c function)": [[42, "c.PyObject_Realloc"]], "pyobject_setarenaallocator (c function)": [[42, "c.PyObject_SetArenaAllocator"]], "pytracemalloc_track (c function)": [[42, "c.PyTraceMalloc_Track"]], "pytracemalloc_untrack (c function)": [[42, "c.PyTraceMalloc_Untrack"]], "calloc\uff08c \u51fd\u5f0f\uff09": [[42, "index-0"]], "free\uff08c \u51fd\u5f0f\uff09": [[42, "index-0"]], "malloc\uff08c \u51fd\u5f0f\uff09": [[42, "index-0"]], "realloc\uff08c \u51fd\u5f0f\uff09": [[42, "index-0"]], "pybuf_read (c macro)": [[43, "c.PyBUF_READ"]], "pybuf_write (c macro)": [[43, "c.PyBUF_WRITE"]], "pymemoryview_check (c function)": [[43, "c.PyMemoryView_Check"]], "pymemoryview_frombuffer (c function)": [[43, "c.PyMemoryView_FromBuffer"]], "pymemoryview_frommemory (c function)": [[43, "c.PyMemoryView_FromMemory"]], "pymemoryview_fromobject (c function)": [[43, "c.PyMemoryView_FromObject"]], "pymemoryview_get_base (c function)": [[43, "c.PyMemoryView_GET_BASE"]], "pymemoryview_get_buffer (c function)": [[43, "c.PyMemoryView_GET_BUFFER"]], "pymemoryview_getcontiguous (c function)": [[43, "c.PyMemoryView_GetContiguous"]], "memoryview\uff08\u8a18\u61b6\u9ad4\u8996\u5716\uff09": [[43, "index-0"], [344, "index-40"]], "pyinstancemethod_check (c function)": [[44, "c.PyInstanceMethod_Check"]], "pyinstancemethod_function (c function)": [[44, "c.PyInstanceMethod_Function"]], "pyinstancemethod_get_function (c function)": [[44, "c.PyInstanceMethod_GET_FUNCTION"]], "pyinstancemethod_new (c function)": [[44, "c.PyInstanceMethod_New"]], "pyinstancemethod_type (c var)": [[44, "c.PyInstanceMethod_Type"]], "pymethod_check (c function)": [[44, "c.PyMethod_Check"]], "pymethod_function (c function)": [[44, "c.PyMethod_Function"]], "pymethod_get_function (c function)": [[44, "c.PyMethod_GET_FUNCTION"]], "pymethod_get_self (c function)": [[44, "c.PyMethod_GET_SELF"]], "pymethod_new (c function)": [[44, "c.PyMethod_New"]], "pymethod_self (c function)": [[44, "c.PyMethod_Self"]], "pymethod_type (c var)": [[44, "c.PyMethod_Type"]], "instancemethod": [[44, "index-0"]], "method\uff08\u65b9\u6cd5\uff09": [[44, "index-1"], [87, "index-26"], [87, "index-34"], [87, "term-method"], [344, "index-61"], [428, "index-37"], [428, "index-43"], [430, "index-53"], [440, "index-0"]], "pep 3121": [[45, "index-10"], [470, "index-34"], [483, "index-151"]], "pep 451": [[45, "index-7"], [87, "index-92"], [250, "index-6"], [302, "index-10"], [302, "index-11"], [324, "index-3"], [324, "index-5"], [324, "index-8"], [352, "index-20"], [432, "index-27"], [472, "index-112"], [474, "index-36"], [477, "index-23"], [477, "index-3"], [478, "index-27"], [483, "index-284"], [483, "index-44"]], "pymoduledef (c type)": [[45, "c.PyModuleDef"]], "pymoduledef.m_base (c member)": [[45, "c.PyModuleDef.m_base"]], "pymoduledef.m_clear (c member)": [[45, "c.PyModuleDef.m_clear"]], "pymoduledef.m_doc (c member)": [[45, "c.PyModuleDef.m_doc"]], "pymoduledef.m_free (c member)": [[45, "c.PyModuleDef.m_free"]], "pymoduledef.m_methods (c member)": [[45, "c.PyModuleDef.m_methods"]], "pymoduledef.m_name (c member)": [[45, "c.PyModuleDef.m_name"]], "pymoduledef.m_size (c member)": [[45, "c.PyModuleDef.m_size"]], "pymoduledef.m_slots (c member)": [[45, "c.PyModuleDef.m_slots"]], "pymoduledef.m_slots.m_reload (c member)": [[45, "c.PyModuleDef.m_slots.m_reload"]], "pymoduledef.m_traverse (c member)": [[45, "c.PyModuleDef.m_traverse"]], "pymoduledef_init (c function)": [[45, "c.PyModuleDef_Init"]], "pymoduledef_slot (c type)": [[45, "c.PyModuleDef_Slot"]], "pymoduledef_slot.slot (c member)": [[45, "c.PyModuleDef_Slot.slot"]], "pymoduledef_slot.value (c member)": [[45, "c.PyModuleDef_Slot.value"]], "pymodule_addfunctions (c function)": [[45, "c.PyModule_AddFunctions"]], "pymodule_addintconstant (c function)": [[45, "c.PyModule_AddIntConstant"]], "pymodule_addintmacro (c macro)": [[45, "c.PyModule_AddIntMacro"]], "pymodule_addobject (c function)": [[45, "c.PyModule_AddObject"]], "pymodule_addobjectref (c function)": [[45, "c.PyModule_AddObjectRef"]], "pymodule_addstringconstant (c function)": [[45, "c.PyModule_AddStringConstant"]], "pymodule_addstringmacro (c macro)": [[45, "c.PyModule_AddStringMacro"]], "pymodule_addtype (c function)": [[45, "c.PyModule_AddType"]], "pymodule_check (c function)": [[45, "c.PyModule_Check"]], "pymodule_checkexact (c function)": [[45, "c.PyModule_CheckExact"]], "pymodule_create (c function)": [[45, "c.PyModule_Create"]], "pymodule_create2 (c function)": [[45, "c.PyModule_Create2"]], "pymodule_execdef (c function)": [[45, "c.PyModule_ExecDef"]], "pymodule_fromdefandspec (c function)": [[45, "c.PyModule_FromDefAndSpec"]], "pymodule_fromdefandspec2 (c function)": [[45, "c.PyModule_FromDefAndSpec2"]], "pymodule_getdef (c function)": [[45, "c.PyModule_GetDef"]], "pymodule_getdict (c function)": [[45, "c.PyModule_GetDict"]], "pymodule_getfilename (c function)": [[45, "c.PyModule_GetFilename"]], "pymodule_getfilenameobject (c function)": [[45, "c.PyModule_GetFilenameObject"]], "pymodule_getname (c function)": [[45, "c.PyModule_GetName"]], "pymodule_getnameobject (c function)": [[45, "c.PyModule_GetNameObject"]], "pymodule_getstate (c function)": [[45, "c.PyModule_GetState"]], "pymodule_new (c function)": [[45, "c.PyModule_New"]], "pymodule_newobject (c function)": [[45, "c.PyModule_NewObject"]], "pymodule_setdocstring (c function)": [[45, "c.PyModule_SetDocString"]], "pymodule_type (c var)": [[45, "c.PyModule_Type"]], "pystate_addmodule (c function)": [[45, "c.PyState_AddModule"]], "pystate_findmodule (c function)": [[45, "c.PyState_FindModule"]], "pystate_removemodule (c function)": [[45, "c.PyState_RemoveModule"]], "py_mod_multiple_interpreters_not_supported (c macro)": [[45, "c.Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED"]], "py_mod_multiple_interpreters_supported (c macro)": [[45, "c.Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED"]], "py_mod_per_interpreter_gil_supported (c macro)": [[45, "c.Py_MOD_PER_INTERPRETER_GIL_SUPPORTED"]], "py_mod_create (c macro)": [[45, "c.Py_mod_create"]], "py_mod_exec (c macro)": [[45, "c.Py_mod_exec"]], "py_mod_multiple_interpreters (c macro)": [[45, "c.Py_mod_multiple_interpreters"]], "systemerror\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[45, "index-4"], [45, "index-5"]], "__dict__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[45, "index-3"]], "__doc__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[45, "index-2"]], "__file__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[45, "index-2"], [45, "index-5"]], "__loader__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[45, "index-2"]], "__name__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[45, "index-2"], [45, "index-4"]], "__package__\uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[45, "index-2"]], "object\uff08\u6a21\u7d44\uff09": [[45, "index-0"]], "none": [[46, "index-0"], [428, "index-6"], [436, "index-3"]], "py_none (c var)": [[46, "c.Py_None"]], "py_return_none (c macro)": [[46, "c.Py_RETURN_NONE"]], "pyindex_check (c function)": [[47, "c.PyIndex_Check"]], "pynumber_absolute (c function)": [[47, "c.PyNumber_Absolute"]], "pynumber_add (c function)": [[47, "c.PyNumber_Add"]], "pynumber_and (c function)": [[47, "c.PyNumber_And"]], "pynumber_asssize_t (c function)": [[47, "c.PyNumber_AsSsize_t"]], "pynumber_check (c function)": [[47, "c.PyNumber_Check"]], "pynumber_divmod (c function)": [[47, "c.PyNumber_Divmod"]], "pynumber_float (c function)": [[47, "c.PyNumber_Float"]], "pynumber_floordivide (c function)": [[47, "c.PyNumber_FloorDivide"]], "pynumber_inplaceadd (c function)": [[47, "c.PyNumber_InPlaceAdd"]], "pynumber_inplaceand (c function)": [[47, "c.PyNumber_InPlaceAnd"]], "pynumber_inplacefloordivide (c function)": [[47, "c.PyNumber_InPlaceFloorDivide"]], "pynumber_inplacelshift (c function)": [[47, "c.PyNumber_InPlaceLshift"]], "pynumber_inplacematrixmultiply (c function)": [[47, "c.PyNumber_InPlaceMatrixMultiply"]], "pynumber_inplacemultiply (c function)": [[47, "c.PyNumber_InPlaceMultiply"]], "pynumber_inplaceor (c function)": [[47, "c.PyNumber_InPlaceOr"]], "pynumber_inplacepower (c function)": [[47, "c.PyNumber_InPlacePower"]], "pynumber_inplaceremainder (c function)": [[47, "c.PyNumber_InPlaceRemainder"]], "pynumber_inplacershift (c function)": [[47, "c.PyNumber_InPlaceRshift"]], "pynumber_inplacesubtract (c function)": [[47, "c.PyNumber_InPlaceSubtract"]], "pynumber_inplacetruedivide (c function)": [[47, "c.PyNumber_InPlaceTrueDivide"]], "pynumber_inplacexor (c function)": [[47, "c.PyNumber_InPlaceXor"]], "pynumber_index (c function)": [[47, "c.PyNumber_Index"]], "pynumber_invert (c function)": [[47, "c.PyNumber_Invert"]], "pynumber_long (c function)": [[47, "c.PyNumber_Long"]], "pynumber_lshift (c function)": [[47, "c.PyNumber_Lshift"]], "pynumber_matrixmultiply (c function)": [[47, "c.PyNumber_MatrixMultiply"]], "pynumber_multiply (c function)": [[47, "c.PyNumber_Multiply"]], "pynumber_negative (c function)": [[47, "c.PyNumber_Negative"]], "pynumber_or (c function)": [[47, "c.PyNumber_Or"]], "pynumber_positive (c function)": [[47, "c.PyNumber_Positive"]], "pynumber_power (c function)": [[47, "c.PyNumber_Power"]], "pynumber_remainder (c function)": [[47, "c.PyNumber_Remainder"]], "pynumber_rshift (c function)": [[47, "c.PyNumber_Rshift"]], "pynumber_subtract (c function)": [[47, "c.PyNumber_Subtract"]], "pynumber_tobase (c function)": [[47, "c.PyNumber_ToBase"]], "pynumber_truedivide (c function)": [[47, "c.PyNumber_TrueDivide"]], "pynumber_xor (c function)": [[47, "c.PyNumber_Xor"]], "abs": [[47, "index-2"], [428, "index-103"]], "divmod": [[47, "index-0"], [428, "index-100"], [428, "index-101"]], "float": [[47, "index-5"], [344, "index-13"], [428, "index-104"]], "int": [[47, "index-4"], [344, "index-13"], [428, "index-104"]], "pow": [[47, "index-1"], [47, "index-3"], [428, "index-100"], [428, "index-101"], [428, "index-102"]], "pyobject_ascharbuffer (c function)": [[48, "c.PyObject_AsCharBuffer"]], "pyobject_asreadbuffer (c function)": [[48, "c.PyObject_AsReadBuffer"]], "pyobject_aswritebuffer (c function)": [[48, "c.PyObject_AsWriteBuffer"]], "pyobject_checkreadbuffer (c function)": [[48, "c.PyObject_CheckReadBuffer"]], "pep 3119": [[49, "index-4"], [49, "index-5"], [116, "index-4"], [161, "index-7"], [428, "index-94"], [468, "index-16"]], "pyobject_ascii (c function)": [[49, "c.PyObject_ASCII"]], "pyobject_bytes (c function)": [[49, "c.PyObject_Bytes"]], "pyobject_delattr (c function)": [[49, "c.PyObject_DelAttr"]], "pyobject_delattrstring (c function)": [[49, "c.PyObject_DelAttrString"]], "pyobject_delitem (c function)": [[49, "c.PyObject_DelItem"]], "pyobject_dir (c function)": [[49, "c.PyObject_Dir"]], "pyobject_format (c function)": [[49, "c.PyObject_Format"]], "pyobject_genericgetattr (c function)": [[49, "c.PyObject_GenericGetAttr"]], "pyobject_genericgetdict (c function)": [[49, "c.PyObject_GenericGetDict"]], "pyobject_genericsetattr (c function)": [[49, "c.PyObject_GenericSetAttr"]], "pyobject_genericsetdict (c function)": [[49, "c.PyObject_GenericSetDict"]], "pyobject_getaiter (c function)": [[49, "c.PyObject_GetAIter"]], "pyobject_getattr (c function)": [[49, "c.PyObject_GetAttr"]], "pyobject_getattrstring (c function)": [[49, "c.PyObject_GetAttrString"]], "pyobject_getitem (c function)": [[49, "c.PyObject_GetItem"]], "pyobject_getitemdata (c function)": [[49, "c.PyObject_GetItemData"]], "pyobject_getiter (c function)": [[49, "c.PyObject_GetIter"]], "pyobject_gettypedata (c function)": [[49, "c.PyObject_GetTypeData"]], "pyobject_hasattr (c function)": [[49, "c.PyObject_HasAttr"]], "pyobject_hasattrstring (c function)": [[49, "c.PyObject_HasAttrString"]], "pyobject_hash (c function)": [[49, "c.PyObject_Hash"]], "pyobject_hashnotimplemented (c function)": [[49, "c.PyObject_HashNotImplemented"]], "pyobject_isinstance (c function)": [[49, "c.PyObject_IsInstance"]], "pyobject_issubclass (c function)": [[49, "c.PyObject_IsSubclass"]], "pyobject_istrue (c function)": [[49, "c.PyObject_IsTrue"]], "pyobject_length (c function)": [[49, "c.PyObject_Length"]], "pyobject_lengthhint (c function)": [[49, "c.PyObject_LengthHint"]], "pyobject_not (c function)": [[49, "c.PyObject_Not"]], "pyobject_print (c function)": [[49, "c.PyObject_Print"]], "pyobject_repr (c function)": [[49, "c.PyObject_Repr"]], "pyobject_richcompare (c function)": [[49, "c.PyObject_RichCompare"]], "pyobject_richcomparebool (c function)": [[49, "c.PyObject_RichCompareBool"]], "pyobject_setattr (c function)": [[49, "c.PyObject_SetAttr"]], "pyobject_setattrstring (c function)": [[49, "c.PyObject_SetAttrString"]], "pyobject_setitem (c function)": [[49, "c.PyObject_SetItem"]], "pyobject_size (c function)": [[49, "c.PyObject_Size"]], "pyobject_str (c function)": [[49, "c.PyObject_Str"]], "pyobject_str\uff08c \u51fd\u5f0f\uff09": [[49, "index-2"]], "pyobject_type (c function)": [[49, "c.PyObject_Type"]], "pyobject_typecheck (c function)": [[49, "c.PyObject_TypeCheck"]], "pytype_gettypedatasize (c function)": [[49, "c.PyType_GetTypeDataSize"]], "py_notimplemented (c var)": [[49, "c.Py_NotImplemented"]], "py_print_raw (c macro)": [[49, "c.Py_PRINT_RAW"]], "py_return_notimplemented (c macro)": [[49, "c.Py_RETURN_NOTIMPLEMENTED"]], "_pyobject_getdictptr (c function)": [[49, "c._PyObject_GetDictPtr"]], "ascii": [[49, "index-1"], [434, "index-1"], [435, "index-17"]], "bulit-in function\uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[49, "index-0"], [49, "index-1"], [49, "index-3"], [49, "index-6"], [49, "index-7"], [49, "index-8"]], "hash\uff08\u96dc\u6e4a\uff09": [[49, "index-6"], [63, "index-2"], [344, "index-22"], [428, "index-80"]], "repr": [[49, "index-0"], [63, "index-1"], [75, "index-3"], [436, "index-3"]], "string\uff08\u5b57\u4e32\uff09": [[49, "index-2"], [75, "index-3"], [225, "index-11"], [225, "index-4"], [344, "index-28"], [344, "index-30"], [344, "index-32"], [344, "index-35"], [428, "index-18"], [428, "index-76"], [428, "index-78"], [430, "index-42"], [430, "index-43"], [430, "index-45"], [435, "index-25"], [436, "index-3"]], "pyunstable_perfmapstate_fini (c function)": [[51, "c.PyUnstable_PerfMapState_Fini"]], "pyunstable_perfmapstate_init (c function)": [[51, "c.PyUnstable_PerfMapState_Init"]], "pyunstable_writeperfmapentry (c function)": [[51, "c.PyUnstable_WritePerfMapEntry"]], "py_clear (c function)": [[52, "c.Py_CLEAR"]], "py_decref (c function)": [[52, "c.Py_DECREF"], [52, "c.Py_DecRef"]], "py_incref (c function)": [[52, "c.Py_INCREF"], [52, "c.Py_IncRef"]], "py_newref (c function)": [[52, "c.Py_NewRef"]], "py_refcnt (c function)": [[52, "c.Py_REFCNT"]], "py_setref (c macro)": [[52, "c.Py_SETREF"]], "py_set_refcnt (c function)": [[52, "c.Py_SET_REFCNT"]], "py_xdecref (c function)": [[52, "c.Py_XDECREF"]], "py_xincref (c function)": [[52, "c.Py_XINCREF"]], "py_xnewref (c function)": [[52, "c.Py_XNewRef"]], "py_xsetref (c macro)": [[52, "c.Py_XSETREF"]], "pyeval_getbuiltins (c function)": [[53, "c.PyEval_GetBuiltins"]], "pyeval_getframe (c function)": [[53, "c.PyEval_GetFrame"]], "pyeval_getfuncdesc (c function)": [[53, "c.PyEval_GetFuncDesc"]], "pyeval_getfuncname (c function)": [[53, "c.PyEval_GetFuncName"]], "pyeval_getglobals (c function)": [[53, "c.PyEval_GetGlobals"]], "pyeval_getlocals (c function)": [[53, "c.PyEval_GetLocals"]], "pysequence_check (c function)": [[54, "c.PySequence_Check"]], "pysequence_concat (c function)": [[54, "c.PySequence_Concat"]], "pysequence_contains (c function)": [[54, "c.PySequence_Contains"]], "pysequence_count (c function)": [[54, "c.PySequence_Count"]], "pysequence_delitem (c function)": [[54, "c.PySequence_DelItem"]], "pysequence_delslice (c function)": [[54, "c.PySequence_DelSlice"]], "pysequence_fast (c function)": [[54, "c.PySequence_Fast"]], "pysequence_fast_get_item (c function)": [[54, "c.PySequence_Fast_GET_ITEM"]], "pysequence_fast_get_size (c function)": [[54, "c.PySequence_Fast_GET_SIZE"]], "pysequence_fast_items (c function)": [[54, "c.PySequence_Fast_ITEMS"]], "pysequence_getitem (c function)": [[54, "c.PySequence_GetItem"]], "pysequence_getslice (c function)": [[54, "c.PySequence_GetSlice"]], "pysequence_item (c function)": [[54, "c.PySequence_ITEM"]], "pysequence_inplaceconcat (c function)": [[54, "c.PySequence_InPlaceConcat"]], "pysequence_inplacerepeat (c function)": [[54, "c.PySequence_InPlaceRepeat"]], "pysequence_index (c function)": [[54, "c.PySequence_Index"]], "pysequence_length (c function)": [[54, "c.PySequence_Length"]], "pysequence_list (c function)": [[54, "c.PySequence_List"]], "pysequence_repeat (c function)": [[54, "c.PySequence_Repeat"]], "pysequence_setitem (c function)": [[54, "c.PySequence_SetItem"]], "pysequence_setslice (c function)": [[54, "c.PySequence_SetSlice"]], "pysequence_size (c function)": [[54, "c.PySequence_Size"]], "pysequence_tuple (c function)": [[54, "c.PySequence_Tuple"]], "built-in function\uff08\u5185\u5efa\u51fd\u5f0f\uff09": [[54, "index-0"], [54, "index-1"]], "tuple\uff08\u5143\u7ec4\uff09": [[54, "index-1"]], "pyanyset_check (c function)": [[55, "c.PyAnySet_Check"]], "pyanyset_checkexact (c function)": [[55, "c.PyAnySet_CheckExact"]], "pyfrozenset_check (c function)": [[55, "c.PyFrozenSet_Check"]], "pyfrozenset_checkexact (c function)": [[55, "c.PyFrozenSet_CheckExact"]], "pyfrozenset_new (c function)": [[55, "c.PyFrozenSet_New"]], "pyfrozenset_type (c var)": [[55, "c.PyFrozenSet_Type"]], "pysetobject (c type)": [[55, "c.PySetObject"]], "pyset_add (c function)": [[55, "c.PySet_Add"]], "pyset_check (c function)": [[55, "c.PySet_Check"]], "pyset_checkexact (c function)": [[55, "c.PySet_CheckExact"]], "pyset_clear (c function)": [[55, "c.PySet_Clear"]], "pyset_contains (c function)": [[55, "c.PySet_Contains"]], "pyset_discard (c function)": [[55, "c.PySet_Discard"]], "pyset_get_size (c function)": [[55, "c.PySet_GET_SIZE"]], "pyset_new (c function)": [[55, "c.PySet_New"]], "pyset_pop (c function)": [[55, "c.PySet_Pop"]], "pyset_size (c function)": [[55, "c.PySet_Size"]], "pyset_type (c var)": [[55, "c.PySet_Type"]], "frozenset\uff08\u51cd\u7d50\u96c6\u5408\uff09": [[55, "index-0"], [428, "index-29"]], "set\uff08\u96c6\u5408\uff09": [[55, "index-0"], [344, "index-51"], [428, "index-28"], [430, "index-16"]], "pyslice_adjustindices (c function)": [[56, "c.PySlice_AdjustIndices"]], "pyslice_check (c function)": [[56, "c.PySlice_Check"]], "pyslice_getindices (c function)": [[56, "c.PySlice_GetIndices"]], "pyslice_getindicesex (c function)": [[56, "c.PySlice_GetIndicesEx"]], "pyslice_new (c function)": [[56, "c.PySlice_New"]], "pyslice_type (c var)": [[56, "c.PySlice_Type"]], "pyslice_unpack (c function)": [[56, "c.PySlice_Unpack"]], "py_ellipsis (c var)": [[56, "c.Py_Ellipsis"]], "pep 387": [[57, "index-3"], [80, "index-0"], [213, "index-11"], [213, "index-12"]], "pyunstable": [[57, "index-1"]], "py_limited_api (c macro)": [[57, "c.Py_LIMITED_API"]], "meth_class (c macro)": [[58, "c.METH_CLASS"]], "meth_coexist (c macro)": [[58, "c.METH_COEXIST"]], "meth_fastcall (c macro)": [[58, "c.METH_FASTCALL"]], "meth_keywords (c macro)": [[58, "c.METH_KEYWORDS"]], "meth_method (c macro)": [[58, "c.METH_METHOD"]], "meth_noargs (c macro)": [[58, "c.METH_NOARGS"]], "meth_o (c macro)": [[58, "c.METH_O"]], "meth_static (c macro)": [[58, "c.METH_STATIC"]], "meth_varargs (c macro)": [[58, "c.METH_VARARGS"]], "pycfunction (c type)": [[58, "c.PyCFunction"]], "pycfunctionwithkeywords (c type)": [[58, "c.PyCFunctionWithKeywords"]], "pycfunction_new (c function)": [[58, "c.PyCFunction_New"]], "pycfunction_newex (c function)": [[58, "c.PyCFunction_NewEx"]], "pycmethod (c type)": [[58, "c.PyCMethod"]], "pycmethod_new (c function)": [[58, "c.PyCMethod_New"]], "pygetsetdef (c type)": [[58, "c.PyGetSetDef"]], "pygetsetdef.closure (c member)": [[58, "c.PyGetSetDef.closure"]], "pygetsetdef.doc (c member)": [[58, "c.PyGetSetDef.doc"]], "pygetsetdef.get (c member)": [[58, "c.PyGetSetDef.get"]], "pygetsetdef.name (c member)": [[58, "c.PyGetSetDef.name"]], "pygetsetdef.set (c member)": [[58, "c.PyGetSetDef.set"]], "pymemberdef (c type)": [[58, "c.PyMemberDef"]], "pymemberdef.doc (c member)": [[58, "c.PyMemberDef.doc"]], "pymemberdef.flags (c member)": [[58, "c.PyMemberDef.flags"]], "pymemberdef.name (c member)": [[58, "c.PyMemberDef.name"]], "pymemberdef.offset (c member)": [[58, "c.PyMemberDef.offset"]], "pymemberdef.type (c member)": [[58, "c.PyMemberDef.type"]], "pymember_getone (c function)": [[58, "c.PyMember_GetOne"]], "pymember_setone (c function)": [[58, "c.PyMember_SetOne"]], "pymethoddef (c type)": [[58, "c.PyMethodDef"]], "pymethoddef.ml_doc (c member)": [[58, "c.PyMethodDef.ml_doc"]], "pymethoddef.ml_flags (c member)": [[58, "c.PyMethodDef.ml_flags"]], "pymethoddef.ml_meth (c member)": [[58, "c.PyMethodDef.ml_meth"]], "pymethoddef.ml_name (c member)": [[58, "c.PyMethodDef.ml_name"]], "pyobject (c type)": [[58, "c.PyObject"]], "pyobject_head (c macro)": [[58, "c.PyObject_HEAD"]], "pyobject_head_init (c macro)": [[58, "c.PyObject_HEAD_INIT"]], "pyobject_var_head (c macro)": [[58, "c.PyObject_VAR_HEAD"]], "pyvarobject (c type)": [[58, "c.PyVarObject"]], "pyvarobject_head_init (c macro)": [[58, "c.PyVarObject_HEAD_INIT"]], "py_audit_read (c macro)": [[58, "c.Py_AUDIT_READ"]], "py_is_type (c function)": [[58, "c.Py_IS_TYPE"]], "py_is (c function)": [[58, "c.Py_Is"]], "py_isfalse (c function)": [[58, "c.Py_IsFalse"]], "py_isnone (c function)": [[58, "c.Py_IsNone"]], "py_istrue (c function)": [[58, "c.Py_IsTrue"]], "py_readonly (c macro)": [[58, "c.Py_READONLY"]], "py_relative_offset (c macro)": [[58, "c.Py_RELATIVE_OFFSET"]], "py_set_size (c function)": [[58, "c.Py_SET_SIZE"]], "py_set_type (c function)": [[58, "c.Py_SET_TYPE"]], "py_size (c function)": [[58, "c.Py_SIZE"]], "py_type (c function)": [[58, "c.Py_TYPE"]], "py_t_bool (c macro)": [[58, "c.Py_T_BOOL"]], "py_t_byte (c macro)": [[58, "c.Py_T_BYTE"]], "py_t_char (c macro)": [[58, "c.Py_T_CHAR"]], "py_t_double (c macro)": [[58, "c.Py_T_DOUBLE"]], "py_t_float (c macro)": [[58, "c.Py_T_FLOAT"]], "py_t_int (c macro)": [[58, "c.Py_T_INT"]], "py_t_long (c macro)": [[58, "c.Py_T_LONG"]], "py_t_longlong (c macro)": [[58, "c.Py_T_LONGLONG"]], "py_t_object_ex (c macro)": [[58, "c.Py_T_OBJECT_EX"]], "py_t_pyssizet (c macro)": [[58, "c.Py_T_PYSSIZET"]], "py_t_short (c macro)": [[58, "c.Py_T_SHORT"]], "py_t_string (c macro)": [[58, "c.Py_T_STRING"]], "py_t_string_inplace (c macro)": [[58, "c.Py_T_STRING_INPLACE"]], "py_t_ubyte (c macro)": [[58, "c.Py_T_UBYTE"]], "py_t_uint (c macro)": [[58, "c.Py_T_UINT"]], "py_t_ulong (c macro)": [[58, "c.Py_T_ULONG"]], "py_t_ulonglong (c macro)": [[58, "c.Py_T_ULONGLONG"]], "py_t_ushort (c macro)": [[58, "c.Py_T_USHORT"]], "readonly\uff08c \u5de8\u96c6\uff09": [[58, "index-3"]], "read_restricted\uff08c \u5de8\u96c6\uff09": [[58, "index-2"]], "restricted\uff08c \u5de8\u96c6\uff09": [[58, "index-2"]], "t_bool\uff08c \u5de8\u96c6\uff09": [[58, "index-4"]], "t_byte\uff08c \u5de8\u96c6\uff09": [[58, "index-4"]], "t_char\uff08c \u5de8\u96c6\uff09": [[58, "index-4"]], "t_double\uff08c \u5de8\u96c6\uff09": [[58, "index-4"]], "t_float\uff08c \u5de8\u96c6\uff09": [[58, "index-4"]], "t_int\uff08c \u5de8\u96c6\uff09": [[58, "index-4"]], "t_longlong\uff08c \u5de8\u96c6\uff09": [[58, "index-4"]], "t_long\uff08c \u5de8\u96c6\uff09": [[58, "index-4"]], "t_none (c macro)": [[58, "c.T_NONE"]], "t_object (c macro)": [[58, "c.T_OBJECT"]], "t_object_ex\uff08c \u5de8\u96c6\uff09": [[58, "index-4"]], "t_pyssizet\uff08c \u5de8\u96c6\uff09": [[58, "index-4"]], "t_short\uff08c \u5de8\u96c6\uff09": [[58, "index-4"]], "t_string_inplace\uff08c \u5de8\u96c6\uff09": [[58, "index-4"]], "t_string\uff08c \u5de8\u96c6\uff09": [[58, "index-4"]], "t_ubyte\uff08c \u5de8\u96c6\uff09": [[58, "index-4"]], "t_uint\uff08c \u5de8\u96c6\uff09": [[58, "index-4"]], "t_ulongulong\uff08c \u5de8\u96c6\uff09": [[58, "index-4"]], "t_ulong\uff08c \u5de8\u96c6\uff09": [[58, "index-4"]], "t_ushort\uff08c \u5de8\u96c6\uff09": [[58, "index-4"]], "write_restricted\uff08c \u5de8\u96c6\uff09": [[58, "index-2"]], "_pycfunctionfast (c type)": [[58, "c._PyCFunctionFast"]], "_pycfunctionfastwithkeywords (c type)": [[58, "c._PyCFunctionFastWithKeywords"]], "classmethod": [[58, "index-0"]], "getter (c type)": [[58, "c.getter"]], "setter (c type)": [[58, "c.setter"]], "staticmethod": [[58, "index-1"]], "structmember.h": [[58, "index-4"]], "pep 578": [[59, "index-1"], [142, "index-3"], [352, "index-42"], [481, "index-35"]], "pyos_afterfork (c function)": [[59, "c.PyOS_AfterFork"]], "pyos_afterfork_child (c function)": [[59, "c.PyOS_AfterFork_Child"]], "pyos_afterfork_parent (c function)": [[59, "c.PyOS_AfterFork_Parent"]], "pyos_beforefork (c function)": [[59, "c.PyOS_BeforeFork"]], "pyos_checkstack (c function)": [[59, "c.PyOS_CheckStack"]], "pyos_fspath (c function)": [[59, "c.PyOS_FSPath"]], "pyos_getsig (c function)": [[59, "c.PyOS_getsig"]], "pyos_setsig (c function)": [[59, "c.PyOS_setsig"]], "pyos_sighandler_t (c type)": [[59, "c.PyOS_sighandler_t"]], "pysys_addaudithook (c function)": [[59, "c.PySys_AddAuditHook"]], "pysys_addwarnoption (c function)": [[59, "c.PySys_AddWarnOption"]], "pysys_addwarnoptionunicode (c function)": [[59, "c.PySys_AddWarnOptionUnicode"]], "pysys_addxoption (c function)": [[59, "c.PySys_AddXOption"]], "pysys_audit (c function)": [[59, "c.PySys_Audit"]], "pysys_formatstderr (c function)": [[59, "c.PySys_FormatStderr"]], "pysys_formatstdout (c function)": [[59, "c.PySys_FormatStdout"]], "pysys_getobject (c function)": [[59, "c.PySys_GetObject"]], "pysys_getxoptions (c function)": [[59, "c.PySys_GetXOptions"]], "pysys_resetwarnoptions (c function)": [[59, "c.PySys_ResetWarnOptions"]], "pysys_setobject (c function)": [[59, "c.PySys_SetObject"]], "pysys_setpath (c function)": [[59, "c.PySys_SetPath"]], "pysys_writestderr (c function)": [[59, "c.PySys_WriteStderr"]], "pysys_writestdout (c function)": [[59, "c.PySys_WriteStdout"]], "py_atexit (c function)": [[59, "c.Py_AtExit"]], "py_audithookfunction (c type)": [[59, "c.Py_AuditHookFunction"]], "py_decodelocale (c function)": [[59, "c.Py_DecodeLocale"]], "py_encodelocale (c function)": [[59, "c.Py_EncodeLocale"]], "py_exit (c function)": [[59, "c.Py_Exit"]], "py_fatalerror (c function)": [[59, "c.Py_FatalError"]], "py_fdisinteractive (c function)": [[59, "c.Py_FdIsInteractive"]], "use_stackcheck\uff08c \u5de8\u96c6\uff09": [[59, "index-0"]], "abort\uff08c \u51fd\u5f0f\uff09": [[59, "index-2"]], "cleanup functions\uff08\u6e05\u7406\u51fd\u5f0f\uff09": [[59, "index-4"]], "exit\uff08c \u51fd\u5f0f\uff09": [[59, "index-3"]], "pystructsequence_desc (c type)": [[60, "c.PyStructSequence_Desc"]], "pystructsequence_desc.doc (c member)": [[60, "c.PyStructSequence_Desc.doc"]], "pystructsequence_desc.fields (c member)": [[60, "c.PyStructSequence_Desc.fields"]], "pystructsequence_desc.n_in_sequence (c member)": [[60, "c.PyStructSequence_Desc.n_in_sequence"]], "pystructsequence_desc.name (c member)": [[60, "c.PyStructSequence_Desc.name"]], "pystructsequence_field (c type)": [[60, "c.PyStructSequence_Field"]], "pystructsequence_field.doc (c member)": [[60, "c.PyStructSequence_Field.doc"]], "pystructsequence_field.name (c member)": [[60, "c.PyStructSequence_Field.name"]], "pystructsequence_get_item (c function)": [[60, "c.PyStructSequence_GET_ITEM"]], "pystructsequence_getitem (c function)": [[60, "c.PyStructSequence_GetItem"]], "pystructsequence_inittype (c function)": [[60, "c.PyStructSequence_InitType"]], "pystructsequence_inittype2 (c function)": [[60, "c.PyStructSequence_InitType2"]], "pystructsequence_new (c function)": [[60, "c.PyStructSequence_New"]], "pystructsequence_newtype (c function)": [[60, "c.PyStructSequence_NewType"]], "pystructsequence_set_item (c function)": [[60, "c.PyStructSequence_SET_ITEM"]], "pystructsequence_setitem (c function)": [[60, "c.PyStructSequence_SetItem"]], "pystructsequence_unnamedfield (c var)": [[60, "c.PyStructSequence_UnnamedField"]], "pytupleobject (c type)": [[60, "c.PyTupleObject"]], "pytuple_check (c function)": [[60, "c.PyTuple_Check"]], "pytuple_checkexact (c function)": [[60, "c.PyTuple_CheckExact"]], "pytuple_get_item (c function)": [[60, "c.PyTuple_GET_ITEM"]], "pytuple_get_size (c function)": [[60, "c.PyTuple_GET_SIZE"]], "pytuple_getitem (c function)": [[60, "c.PyTuple_GetItem"]], "pytuple_getslice (c function)": [[60, "c.PyTuple_GetSlice"]], "pytuple_new (c function)": [[60, "c.PyTuple_New"]], "pytuple_pack (c function)": [[60, "c.PyTuple_Pack"]], "pytuple_set_item (c function)": [[60, "c.PyTuple_SET_ITEM"]], "pytuple_setitem (c function)": [[60, "c.PyTuple_SetItem"]], "pytuple_size (c function)": [[60, "c.PyTuple_Size"]], "pytuple_type (c var)": [[60, "c.PyTuple_Type"]], "_pytuple_resize (c function)": [[60, "c._PyTuple_Resize"]], "pytypeobject (c type)": [[61, "c.PyTypeObject"]], "pytype_addwatcher (c function)": [[61, "c.PyType_AddWatcher"]], "pytype_check (c function)": [[61, "c.PyType_Check"]], "pytype_checkexact (c function)": [[61, "c.PyType_CheckExact"]], "pytype_clearcache (c function)": [[61, "c.PyType_ClearCache"]], "pytype_clearwatcher (c function)": [[61, "c.PyType_ClearWatcher"]], "pytype_frommetaclass (c function)": [[61, "c.PyType_FromMetaclass"]], "pytype_frommoduleandspec (c function)": [[61, "c.PyType_FromModuleAndSpec"]], "pytype_fromspec (c function)": [[61, "c.PyType_FromSpec"]], "pytype_fromspecwithbases (c function)": [[61, "c.PyType_FromSpecWithBases"]], "pytype_genericalloc (c function)": [[61, "c.PyType_GenericAlloc"]], "pytype_genericnew (c function)": [[61, "c.PyType_GenericNew"]], "pytype_getdict (c function)": [[61, "c.PyType_GetDict"]], "pytype_getflags (c function)": [[61, "c.PyType_GetFlags"]], "pytype_getmodule (c function)": [[61, "c.PyType_GetModule"]], "pytype_getmodulebydef (c function)": [[61, "c.PyType_GetModuleByDef"]], "pytype_getmodulestate (c function)": [[61, "c.PyType_GetModuleState"]], "pytype_getname (c function)": [[61, "c.PyType_GetName"]], "pytype_getqualname (c function)": [[61, "c.PyType_GetQualName"]], "pytype_getslot (c function)": [[61, "c.PyType_GetSlot"]], "pytype_hasfeature (c function)": [[61, "c.PyType_HasFeature"]], "pytype_is_gc (c function)": [[61, "c.PyType_IS_GC"]], "pytype_issubtype (c function)": [[61, "c.PyType_IsSubtype"]], "pytype_modified (c function)": [[61, "c.PyType_Modified"]], "pytype_ready (c function)": [[61, "c.PyType_Ready"]], "pytype_slot (c type)": [[61, "c.PyType_Slot"]], "pytype_slot.pfunc (c member)": [[61, "c.PyType_Slot.pfunc"]], "pytype_slot.slot (c member)": [[61, "c.PyType_Slot.slot"]], "pytype_spec (c type)": [[61, "c.PyType_Spec"]], "pytype_spec.basicsize (c member)": [[61, "c.PyType_Spec.basicsize"]], "pytype_spec.flags (c member)": [[61, "c.PyType_Spec.flags"]], "pytype_spec.itemsize (c member)": [[61, "c.PyType_Spec.itemsize"]], "pytype_spec.name (c member)": [[61, "c.PyType_Spec.name"]], "pytype_spec.slots (c member)": [[61, "c.PyType_Spec.slots"]], "pytype_type (c var)": [[61, "c.PyType_Type"]], "pytype_watch (c function)": [[61, "c.PyType_Watch"]], "pytype_watchcallback (c type)": [[61, "c.PyType_WatchCallback"]], "pyunstable_type_assignversiontag (c function)": [[61, "c.PyUnstable_Type_AssignVersionTag"]], "py_genericalias (c function)": [[62, "c.Py_GenericAlias"]], "py_genericaliastype (c var)": [[62, "c.Py_GenericAliasType"]], "pep 442": [[63, "index-5"], [75, "index-2"], [227, "index-2"], [477, "index-15"], [477, "index-16"], [477, "index-45"], [477, "index-46"], [482, "index-20"], [483, "index-208"]], "pep 634": [[63, "index-3"], [63, "index-4"], [112, "index-1"], [427, "index-19"], [427, "index-25"], [428, "index-108"], [472, "index-80"], [472, "index-95"], [483, "index-109"], [483, "index-55"], [483, "index-97"]], "pyasyncmethods (c type)": [[63, "c.PyAsyncMethods"]], "pyasyncmethods.am_aiter (c member)": [[63, "c.PyAsyncMethods.am_aiter"]], "pyasyncmethods.am_anext (c member)": [[63, "c.PyAsyncMethods.am_anext"]], "pyasyncmethods.am_await (c member)": [[63, "c.PyAsyncMethods.am_await"]], "pyasyncmethods.am_send (c member)": [[63, "c.PyAsyncMethods.am_send"]], "pybufferprocs (c type)": [[63, "c.PyBufferProcs"]], "pybufferprocs.bf_getbuffer (c member)": [[63, "c.PyBufferProcs.bf_getbuffer"]], "pybufferprocs.bf_releasebuffer (c member)": [[63, "c.PyBufferProcs.bf_releasebuffer"]], "pymappingmethods (c type)": [[63, "c.PyMappingMethods"]], "pymappingmethods.mp_ass_subscript (c member)": [[63, "c.PyMappingMethods.mp_ass_subscript"]], "pymappingmethods.mp_length (c member)": [[63, "c.PyMappingMethods.mp_length"]], "pymappingmethods.mp_subscript (c member)": [[63, "c.PyMappingMethods.mp_subscript"]], "pynumbermethods (c type)": [[63, "c.PyNumberMethods"]], "pynumbermethods.nb_absolute (c member)": [[63, "c.PyNumberMethods.nb_absolute"]], "pynumbermethods.nb_add (c member)": [[63, "c.PyNumberMethods.nb_add"]], "pynumbermethods.nb_and (c member)": [[63, "c.PyNumberMethods.nb_and"]], "pynumbermethods.nb_bool (c member)": [[63, "c.PyNumberMethods.nb_bool"]], "pynumbermethods.nb_divmod (c member)": [[63, "c.PyNumberMethods.nb_divmod"]], "pynumbermethods.nb_float (c member)": [[63, "c.PyNumberMethods.nb_float"]], "pynumbermethods.nb_floor_divide (c member)": [[63, "c.PyNumberMethods.nb_floor_divide"]], "pynumbermethods.nb_index (c member)": [[63, "c.PyNumberMethods.nb_index"]], "pynumbermethods.nb_inplace_add (c member)": [[63, "c.PyNumberMethods.nb_inplace_add"]], "pynumbermethods.nb_inplace_and (c member)": [[63, "c.PyNumberMethods.nb_inplace_and"]], "pynumbermethods.nb_inplace_floor_divide (c member)": [[63, "c.PyNumberMethods.nb_inplace_floor_divide"]], "pynumbermethods.nb_inplace_lshift (c member)": [[63, "c.PyNumberMethods.nb_inplace_lshift"]], "pynumbermethods.nb_inplace_matrix_multiply (c member)": [[63, "c.PyNumberMethods.nb_inplace_matrix_multiply"]], "pynumbermethods.nb_inplace_multiply (c member)": [[63, "c.PyNumberMethods.nb_inplace_multiply"]], "pynumbermethods.nb_inplace_or (c member)": [[63, "c.PyNumberMethods.nb_inplace_or"]], "pynumbermethods.nb_inplace_power (c member)": [[63, "c.PyNumberMethods.nb_inplace_power"]], "pynumbermethods.nb_inplace_remainder (c member)": [[63, "c.PyNumberMethods.nb_inplace_remainder"]], "pynumbermethods.nb_inplace_rshift (c member)": [[63, "c.PyNumberMethods.nb_inplace_rshift"]], "pynumbermethods.nb_inplace_subtract (c member)": [[63, "c.PyNumberMethods.nb_inplace_subtract"]], "pynumbermethods.nb_inplace_true_divide (c member)": [[63, "c.PyNumberMethods.nb_inplace_true_divide"]], "pynumbermethods.nb_inplace_xor (c member)": [[63, "c.PyNumberMethods.nb_inplace_xor"]], "pynumbermethods.nb_int (c member)": [[63, "c.PyNumberMethods.nb_int"]], "pynumbermethods.nb_invert (c member)": [[63, "c.PyNumberMethods.nb_invert"]], "pynumbermethods.nb_lshift (c member)": [[63, "c.PyNumberMethods.nb_lshift"]], "pynumbermethods.nb_matrix_multiply (c member)": [[63, "c.PyNumberMethods.nb_matrix_multiply"]], "pynumbermethods.nb_multiply (c member)": [[63, "c.PyNumberMethods.nb_multiply"]], "pynumbermethods.nb_negative (c member)": [[63, "c.PyNumberMethods.nb_negative"]], "pynumbermethods.nb_or (c member)": [[63, "c.PyNumberMethods.nb_or"]], "pynumbermethods.nb_positive (c member)": [[63, "c.PyNumberMethods.nb_positive"]], "pynumbermethods.nb_power (c member)": [[63, "c.PyNumberMethods.nb_power"]], "pynumbermethods.nb_remainder (c member)": [[63, "c.PyNumberMethods.nb_remainder"]], "pynumbermethods.nb_reserved (c member)": [[63, "c.PyNumberMethods.nb_reserved"]], "pynumbermethods.nb_rshift (c member)": [[63, "c.PyNumberMethods.nb_rshift"]], "pynumbermethods.nb_subtract (c member)": [[63, "c.PyNumberMethods.nb_subtract"]], "pynumbermethods.nb_true_divide (c member)": [[63, "c.PyNumberMethods.nb_true_divide"]], "pynumbermethods.nb_xor (c member)": [[63, "c.PyNumberMethods.nb_xor"]], "pyobject._ob_next (c member)": [[63, "c.PyObject._ob_next"]], "pyobject._ob_prev (c member)": [[63, "c.PyObject._ob_prev"]], "pyobject.ob_refcnt (c member)": [[63, "c.PyObject.ob_refcnt"]], "pyobject.ob_type (c member)": [[63, "c.PyObject.ob_type"]], "pysequencemethods (c type)": [[63, "c.PySequenceMethods"]], "pysequencemethods.sq_ass_item (c member)": [[63, "c.PySequenceMethods.sq_ass_item"]], "pysequencemethods.sq_concat (c member)": [[63, "c.PySequenceMethods.sq_concat"]], "pysequencemethods.sq_contains (c member)": [[63, "c.PySequenceMethods.sq_contains"]], "pysequencemethods.sq_inplace_concat (c member)": [[63, "c.PySequenceMethods.sq_inplace_concat"]], "pysequencemethods.sq_inplace_repeat (c member)": [[63, "c.PySequenceMethods.sq_inplace_repeat"]], "pysequencemethods.sq_item (c member)": [[63, "c.PySequenceMethods.sq_item"]], "pysequencemethods.sq_length (c member)": [[63, "c.PySequenceMethods.sq_length"]], "pysequencemethods.sq_repeat (c member)": [[63, "c.PySequenceMethods.sq_repeat"]], "pytypeobject.tp_alloc (c member)": [[63, "c.PyTypeObject.tp_alloc"]], "pytypeobject.tp_as_async (c member)": [[63, "c.PyTypeObject.tp_as_async"]], "pytypeobject.tp_as_buffer (c member)": [[63, "c.PyTypeObject.tp_as_buffer"]], "pytypeobject.tp_as_mapping (c member)": [[63, "c.PyTypeObject.tp_as_mapping"]], "pytypeobject.tp_as_number (c member)": [[63, "c.PyTypeObject.tp_as_number"]], "pytypeobject.tp_as_sequence (c member)": [[63, "c.PyTypeObject.tp_as_sequence"]], "pytypeobject.tp_base (c member)": [[63, "c.PyTypeObject.tp_base"]], "pytypeobject.tp_bases (c member)": [[63, "c.PyTypeObject.tp_bases"]], "pytypeobject.tp_basicsize (c member)": [[63, "c.PyTypeObject.tp_basicsize"]], "pytypeobject.tp_cache (c member)": [[63, "c.PyTypeObject.tp_cache"]], "pytypeobject.tp_call (c member)": [[63, "c.PyTypeObject.tp_call"]], "pytypeobject.tp_clear (c member)": [[63, "c.PyTypeObject.tp_clear"]], "pytypeobject.tp_dealloc (c member)": [[63, "c.PyTypeObject.tp_dealloc"]], "pytypeobject.tp_del (c member)": [[63, "c.PyTypeObject.tp_del"]], "pytypeobject.tp_descr_get (c member)": [[63, "c.PyTypeObject.tp_descr_get"]], "pytypeobject.tp_descr_set (c member)": [[63, "c.PyTypeObject.tp_descr_set"]], "pytypeobject.tp_dict (c member)": [[63, "c.PyTypeObject.tp_dict"]], "pytypeobject.tp_dictoffset (c member)": [[63, "c.PyTypeObject.tp_dictoffset"]], "pytypeobject.tp_doc (c member)": [[63, "c.PyTypeObject.tp_doc"]], "pytypeobject.tp_finalize (c member)": [[63, "c.PyTypeObject.tp_finalize"]], "pytypeobject.tp_flags (c member)": [[63, "c.PyTypeObject.tp_flags"]], "pytypeobject.tp_free (c member)": [[63, "c.PyTypeObject.tp_free"]], "pytypeobject.tp_getattr (c member)": [[63, "c.PyTypeObject.tp_getattr"]], "pytypeobject.tp_getattro (c member)": [[63, "c.PyTypeObject.tp_getattro"]], "pytypeobject.tp_getset (c member)": [[63, "c.PyTypeObject.tp_getset"]], "pytypeobject.tp_hash (c member)": [[63, "c.PyTypeObject.tp_hash"]], "pytypeobject.tp_init (c member)": [[63, "c.PyTypeObject.tp_init"]], "pytypeobject.tp_is_gc (c member)": [[63, "c.PyTypeObject.tp_is_gc"]], "pytypeobject.tp_itemsize (c member)": [[63, "c.PyTypeObject.tp_itemsize"]], "pytypeobject.tp_iter (c member)": [[63, "c.PyTypeObject.tp_iter"]], "pytypeobject.tp_iternext (c member)": [[63, "c.PyTypeObject.tp_iternext"]], "pytypeobject.tp_members (c member)": [[63, "c.PyTypeObject.tp_members"]], "pytypeobject.tp_methods (c member)": [[63, "c.PyTypeObject.tp_methods"]], "pytypeobject.tp_mro (c member)": [[63, "c.PyTypeObject.tp_mro"]], "pytypeobject.tp_name (c member)": [[63, "c.PyTypeObject.tp_name"]], "pytypeobject.tp_new (c member)": [[63, "c.PyTypeObject.tp_new"]], "pytypeobject.tp_repr (c member)": [[63, "c.PyTypeObject.tp_repr"]], "pytypeobject.tp_richcompare (c member)": [[63, "c.PyTypeObject.tp_richcompare"]], "pytypeobject.tp_setattr (c member)": [[63, "c.PyTypeObject.tp_setattr"]], "pytypeobject.tp_setattro (c member)": [[63, "c.PyTypeObject.tp_setattro"]], "pytypeobject.tp_str (c member)": [[63, "c.PyTypeObject.tp_str"]], "pytypeobject.tp_subclasses (c member)": [[63, "c.PyTypeObject.tp_subclasses"]], "pytypeobject.tp_traverse (c member)": [[63, "c.PyTypeObject.tp_traverse"]], "pytypeobject.tp_vectorcall (c member)": [[63, "c.PyTypeObject.tp_vectorcall"]], "pytypeobject.tp_vectorcall_offset (c member)": [[63, "c.PyTypeObject.tp_vectorcall_offset"]], "pytypeobject.tp_version_tag (c member)": [[63, "c.PyTypeObject.tp_version_tag"]], "pytypeobject.tp_watched (c member)": [[63, "c.PyTypeObject.tp_watched"]], "pytypeobject.tp_weaklist (c member)": [[63, "c.PyTypeObject.tp_weaklist"]], "pytypeobject.tp_weaklistoffset (c member)": [[63, "c.PyTypeObject.tp_weaklistoffset"]], "pyvarobject.ob_size (c member)": [[63, "c.PyVarObject.ob_size"]], "py_eq (c macro)": [[63, "c.Py_EQ"]], "py_ge (c macro)": [[63, "c.Py_GE"]], "py_gt (c macro)": [[63, "c.Py_GT"]], "py_le (c macro)": [[63, "c.Py_LE"]], "py_lt (c macro)": [[63, "c.Py_LT"]], "py_ne (c macro)": [[63, "c.Py_NE"]], "py_return_richcompare (c macro)": [[63, "c.Py_RETURN_RICHCOMPARE"]], "py_tpflags_basetype (c macro)": [[63, "c.Py_TPFLAGS_BASETYPE"]], "py_tpflags_base_exc_subclass (c macro)": [[63, "c.Py_TPFLAGS_BASE_EXC_SUBCLASS"]], "py_tpflags_bytes_subclass (c macro)": [[63, "c.Py_TPFLAGS_BYTES_SUBCLASS"]], "py_tpflags_default (c macro)": [[63, "c.Py_TPFLAGS_DEFAULT"]], "py_tpflags_dict_subclass (c macro)": [[63, "c.Py_TPFLAGS_DICT_SUBCLASS"]], "py_tpflags_disallow_instantiation (c macro)": [[63, "c.Py_TPFLAGS_DISALLOW_INSTANTIATION"]], "py_tpflags_have_finalize (c macro)": [[63, "c.Py_TPFLAGS_HAVE_FINALIZE"]], "py_tpflags_have_gc (c macro)": [[63, "c.Py_TPFLAGS_HAVE_GC"]], "py_tpflags_have_vectorcall (c macro)": [[63, "c.Py_TPFLAGS_HAVE_VECTORCALL"]], "py_tpflags_heaptype (c macro)": [[63, "c.Py_TPFLAGS_HEAPTYPE"]], "py_tpflags_immutabletype (c macro)": [[63, "c.Py_TPFLAGS_IMMUTABLETYPE"]], "py_tpflags_items_at_end (c macro)": [[63, "c.Py_TPFLAGS_ITEMS_AT_END"]], "py_tpflags_list_subclass (c macro)": [[63, "c.Py_TPFLAGS_LIST_SUBCLASS"]], "py_tpflags_long_subclass (c macro)": [[63, "c.Py_TPFLAGS_LONG_SUBCLASS"]], "py_tpflags_managed_dict (c macro)": [[63, "c.Py_TPFLAGS_MANAGED_DICT"]], "py_tpflags_managed_weakref (c macro)": [[63, "c.Py_TPFLAGS_MANAGED_WEAKREF"]], "py_tpflags_mapping (c macro)": [[63, "c.Py_TPFLAGS_MAPPING"]], "py_tpflags_method_descriptor (c macro)": [[63, "c.Py_TPFLAGS_METHOD_DESCRIPTOR"]], "py_tpflags_ready (c macro)": [[63, "c.Py_TPFLAGS_READY"]], "py_tpflags_readying (c macro)": [[63, "c.Py_TPFLAGS_READYING"]], "py_tpflags_sequence (c macro)": [[63, "c.Py_TPFLAGS_SEQUENCE"]], "py_tpflags_tuple_subclass (c macro)": [[63, "c.Py_TPFLAGS_TUPLE_SUBCLASS"]], "py_tpflags_type_subclass (c macro)": [[63, "c.Py_TPFLAGS_TYPE_SUBCLASS"]], "py_tpflags_unicode_subclass (c macro)": [[63, "c.Py_TPFLAGS_UNICODE_SUBCLASS"]], "py_tpflags_valid_version_tag (c macro)": [[63, "c.Py_TPFLAGS_VALID_VERSION_TAG"]], "allocfunc (c type)": [[63, "c.allocfunc"]], "binaryfunc (c type)": [[63, "c.binaryfunc"]], "descrgetfunc (c type)": [[63, "c.descrgetfunc"]], "descrsetfunc (c type)": [[63, "c.descrsetfunc"]], "destructor (c type)": [[63, "c.destructor"]], "freefunc (c type)": [[63, "c.freefunc"]], "getattrfunc (c type)": [[63, "c.getattrfunc"]], "getattrofunc (c type)": [[63, "c.getattrofunc"]], "getbufferproc (c type)": [[63, "c.getbufferproc"]], "getiterfunc (c type)": [[63, "c.getiterfunc"]], "hashfunc (c type)": [[63, "c.hashfunc"]], "initproc (c type)": [[63, "c.initproc"]], "iternextfunc (c type)": [[63, "c.iternextfunc"]], "lenfunc (c type)": [[63, "c.lenfunc"]], "newfunc (c type)": [[63, "c.newfunc"]], "objobjargproc (c type)": [[63, "c.objobjargproc"]], "objobjproc (c type)": [[63, "c.objobjproc"]], "releasebufferproc (c type)": [[63, "c.releasebufferproc"]], "reprfunc (c type)": [[63, "c.reprfunc"]], "richcmpfunc (c type)": [[63, "c.richcmpfunc"]], "sendfunc (c type)": [[63, "c.sendfunc"]], "setattrfunc (c type)": [[63, "c.setattrfunc"]], "setattrofunc (c type)": [[63, "c.setattrofunc"]], "ssizeargfunc (c type)": [[63, "c.ssizeargfunc"]], "ssizeobjargproc (c type)": [[63, "c.ssizeobjargproc"]], "ternaryfunc (c type)": [[63, "c.ternaryfunc"]], "unaryfunc (c type)": [[63, "c.unaryfunc"]], "pep 383": [[64, "index-2"], [64, "index-3"], [64, "index-4"], [158, "index-2"], [337, "index-1"], [483, "index-61"]], "pep 393": [[64, "index-0"], [158, "index-5"], [352, "index-19"], [472, "index-117"], [476, "index-30"], [476, "index-32"], [476, "index-33"], [476, "index-38"], [476, "index-54"], [476, "index-6"], [476, "index-62"], [476, "index-8"], [482, "index-25"], [482, "index-26"], [483, "index-95"]], "pep 623": [[64, "index-1"], [472, "index-91"], [474, "index-1"], [474, "index-26"], [474, "index-48"], [483, "index-108"], [483, "index-110"], [483, "index-64"]], "pyasciiobject (c type)": [[64, "c.PyASCIIObject"]], "pycompactunicodeobject (c type)": [[64, "c.PyCompactUnicodeObject"]], "pyunicodeobject (c type)": [[64, "c.PyUnicodeObject"]], "pyunicode_1byte_data (c function)": [[64, "c.PyUnicode_1BYTE_DATA"]], "pyunicode_1byte_kind (c macro)": [[64, "c.PyUnicode_1BYTE_KIND"]], "pyunicode_2byte_data (c function)": [[64, "c.PyUnicode_2BYTE_DATA"]], "pyunicode_2byte_kind (c macro)": [[64, "c.PyUnicode_2BYTE_KIND"]], "pyunicode_4byte_data (c function)": [[64, "c.PyUnicode_4BYTE_DATA"]], "pyunicode_4byte_kind (c macro)": [[64, "c.PyUnicode_4BYTE_KIND"]], "pyunicode_asasciistring (c function)": [[64, "c.PyUnicode_AsASCIIString"]], "pyunicode_ascharmapstring (c function)": [[64, "c.PyUnicode_AsCharmapString"]], "pyunicode_asencodedstring (c function)": [[64, "c.PyUnicode_AsEncodedString"]], "pyunicode_aslatin1string (c function)": [[64, "c.PyUnicode_AsLatin1String"]], "pyunicode_asmbcsstring (c function)": [[64, "c.PyUnicode_AsMBCSString"]], "pyunicode_asrawunicodeescapestring (c function)": [[64, "c.PyUnicode_AsRawUnicodeEscapeString"]], "pyunicode_asucs4 (c function)": [[64, "c.PyUnicode_AsUCS4"]], "pyunicode_asucs4copy (c function)": [[64, "c.PyUnicode_AsUCS4Copy"]], "pyunicode_asutf16string (c function)": [[64, "c.PyUnicode_AsUTF16String"]], "pyunicode_asutf32string (c function)": [[64, "c.PyUnicode_AsUTF32String"]], "pyunicode_asutf8 (c function)": [[64, "c.PyUnicode_AsUTF8"]], "pyunicode_asutf8andsize (c function)": [[64, "c.PyUnicode_AsUTF8AndSize"]], "pyunicode_asutf8string (c function)": [[64, "c.PyUnicode_AsUTF8String"]], "pyunicode_asunicodeescapestring (c function)": [[64, "c.PyUnicode_AsUnicodeEscapeString"]], "pyunicode_aswidechar (c function)": [[64, "c.PyUnicode_AsWideChar"]], "pyunicode_aswidecharstring (c function)": [[64, "c.PyUnicode_AsWideCharString"]], "pyunicode_check (c function)": [[64, "c.PyUnicode_Check"]], "pyunicode_checkexact (c function)": [[64, "c.PyUnicode_CheckExact"]], "pyunicode_compare (c function)": [[64, "c.PyUnicode_Compare"]], "pyunicode_comparewithasciistring (c function)": [[64, "c.PyUnicode_CompareWithASCIIString"]], "pyunicode_concat (c function)": [[64, "c.PyUnicode_Concat"]], "pyunicode_contains (c function)": [[64, "c.PyUnicode_Contains"]], "pyunicode_copycharacters (c function)": [[64, "c.PyUnicode_CopyCharacters"]], "pyunicode_count (c function)": [[64, "c.PyUnicode_Count"]], "pyunicode_data (c function)": [[64, "c.PyUnicode_DATA"]], "pyunicode_decode (c function)": [[64, "c.PyUnicode_Decode"]], "pyunicode_decodeascii (c function)": [[64, "c.PyUnicode_DecodeASCII"]], "pyunicode_decodecharmap (c function)": [[64, "c.PyUnicode_DecodeCharmap"]], "pyunicode_decodefsdefault (c function)": [[64, "c.PyUnicode_DecodeFSDefault"]], "pyunicode_decodefsdefaultandsize (c function)": [[64, "c.PyUnicode_DecodeFSDefaultAndSize"]], "pyunicode_decodelatin1 (c function)": [[64, "c.PyUnicode_DecodeLatin1"]], "pyunicode_decodelocale (c function)": [[64, "c.PyUnicode_DecodeLocale"]], "pyunicode_decodelocaleandsize (c function)": [[64, "c.PyUnicode_DecodeLocaleAndSize"]], "pyunicode_decodembcs (c function)": [[64, "c.PyUnicode_DecodeMBCS"]], "pyunicode_decodembcsstateful (c function)": [[64, "c.PyUnicode_DecodeMBCSStateful"]], "pyunicode_decoderawunicodeescape (c function)": [[64, "c.PyUnicode_DecodeRawUnicodeEscape"]], "pyunicode_decodeutf16 (c function)": [[64, "c.PyUnicode_DecodeUTF16"]], "pyunicode_decodeutf16stateful (c function)": [[64, "c.PyUnicode_DecodeUTF16Stateful"]], "pyunicode_decodeutf32 (c function)": [[64, "c.PyUnicode_DecodeUTF32"]], "pyunicode_decodeutf32stateful (c function)": [[64, "c.PyUnicode_DecodeUTF32Stateful"]], "pyunicode_decodeutf7 (c function)": [[64, "c.PyUnicode_DecodeUTF7"]], "pyunicode_decodeutf7stateful (c function)": [[64, "c.PyUnicode_DecodeUTF7Stateful"]], "pyunicode_decodeutf8 (c function)": [[64, "c.PyUnicode_DecodeUTF8"]], "pyunicode_decodeutf8stateful (c function)": [[64, "c.PyUnicode_DecodeUTF8Stateful"]], "pyunicode_decodeunicodeescape (c function)": [[64, "c.PyUnicode_DecodeUnicodeEscape"]], "pyunicode_encodecodepage (c function)": [[64, "c.PyUnicode_EncodeCodePage"]], "pyunicode_encodefsdefault (c function)": [[64, "c.PyUnicode_EncodeFSDefault"]], "pyunicode_encodelocale (c function)": [[64, "c.PyUnicode_EncodeLocale"]], "pyunicode_fsconverter (c function)": [[64, "c.PyUnicode_FSConverter"]], "pyunicode_fsdecoder (c function)": [[64, "c.PyUnicode_FSDecoder"]], "pyunicode_fill (c function)": [[64, "c.PyUnicode_Fill"]], "pyunicode_find (c function)": [[64, "c.PyUnicode_Find"]], "pyunicode_findchar (c function)": [[64, "c.PyUnicode_FindChar"]], "pyunicode_format (c function)": [[64, "c.PyUnicode_Format"]], "pyunicode_fromencodedobject (c function)": [[64, "c.PyUnicode_FromEncodedObject"]], "pyunicode_fromformat (c function)": [[64, "c.PyUnicode_FromFormat"]], "pyunicode_fromformatv (c function)": [[64, "c.PyUnicode_FromFormatV"]], "pyunicode_fromkindanddata (c function)": [[64, "c.PyUnicode_FromKindAndData"]], "pyunicode_fromobject (c function)": [[64, "c.PyUnicode_FromObject"]], "pyunicode_fromstring (c function)": [[64, "c.PyUnicode_FromString"]], "pyunicode_fromstringandsize (c function)": [[64, "c.PyUnicode_FromStringAndSize"]], "pyunicode_fromwidechar (c function)": [[64, "c.PyUnicode_FromWideChar"]], "pyunicode_get_length (c function)": [[64, "c.PyUnicode_GET_LENGTH"]], "pyunicode_getlength (c function)": [[64, "c.PyUnicode_GetLength"]], "pyunicode_internfromstring (c function)": [[64, "c.PyUnicode_InternFromString"]], "pyunicode_interninplace (c function)": [[64, "c.PyUnicode_InternInPlace"]], "pyunicode_isidentifier (c function)": [[64, "c.PyUnicode_IsIdentifier"]], "pyunicode_join (c function)": [[64, "c.PyUnicode_Join"]], "pyunicode_kind (c function)": [[64, "c.PyUnicode_KIND"]], "pyunicode_max_char_value (c function)": [[64, "c.PyUnicode_MAX_CHAR_VALUE"]], "pyunicode_new (c function)": [[64, "c.PyUnicode_New"]], "pyunicode_read (c function)": [[64, "c.PyUnicode_READ"]], "pyunicode_ready (c function)": [[64, "c.PyUnicode_READY"]], "pyunicode_read_char (c function)": [[64, "c.PyUnicode_READ_CHAR"]], "pyunicode_readchar (c function)": [[64, "c.PyUnicode_ReadChar"]], "pyunicode_replace (c function)": [[64, "c.PyUnicode_Replace"]], "pyunicode_richcompare (c function)": [[64, "c.PyUnicode_RichCompare"]], "pyunicode_split (c function)": [[64, "c.PyUnicode_Split"]], "pyunicode_splitlines (c function)": [[64, "c.PyUnicode_Splitlines"]], "pyunicode_substring (c function)": [[64, "c.PyUnicode_Substring"]], "pyunicode_tailmatch (c function)": [[64, "c.PyUnicode_Tailmatch"]], "pyunicode_translate (c function)": [[64, "c.PyUnicode_Translate"]], "pyunicode_type (c var)": [[64, "c.PyUnicode_Type"]], "pyunicode_write (c function)": [[64, "c.PyUnicode_WRITE"]], "pyunicode_writechar (c function)": [[64, "c.PyUnicode_WriteChar"]], "py_ucs1 (c type)": [[64, "c.Py_UCS1"]], "py_ucs2 (c type)": [[64, "c.Py_UCS2"]], "py_ucs4 (c type)": [[64, "c.Py_UCS4"]], "py_unicode (c type)": [[64, "c.Py_UNICODE"]], "py_unicode_isalnum (c function)": [[64, "c.Py_UNICODE_ISALNUM"]], "py_unicode_isalpha (c function)": [[64, "c.Py_UNICODE_ISALPHA"]], "py_unicode_isdecimal (c function)": [[64, "c.Py_UNICODE_ISDECIMAL"]], "py_unicode_isdigit (c function)": [[64, "c.Py_UNICODE_ISDIGIT"]], "py_unicode_islinebreak (c function)": [[64, "c.Py_UNICODE_ISLINEBREAK"]], "py_unicode_islower (c function)": [[64, "c.Py_UNICODE_ISLOWER"]], "py_unicode_isnumeric (c function)": [[64, "c.Py_UNICODE_ISNUMERIC"]], "py_unicode_isprintable (c function)": [[64, "c.Py_UNICODE_ISPRINTABLE"]], "py_unicode_isspace (c function)": [[64, "c.Py_UNICODE_ISSPACE"]], "py_unicode_istitle (c function)": [[64, "c.Py_UNICODE_ISTITLE"]], "py_unicode_isupper (c function)": [[64, "c.Py_UNICODE_ISUPPER"]], "py_unicode_is_high_surrogate (c function)": [[64, "c.Py_UNICODE_IS_HIGH_SURROGATE"]], "py_unicode_is_low_surrogate (c function)": [[64, "c.Py_UNICODE_IS_LOW_SURROGATE"]], "py_unicode_is_surrogate (c function)": [[64, "c.Py_UNICODE_IS_SURROGATE"]], "py_unicode_join_surrogates (c function)": [[64, "c.Py_UNICODE_JOIN_SURROGATES"]], "py_unicode_todecimal (c function)": [[64, "c.Py_UNICODE_TODECIMAL"]], "py_unicode_todigit (c function)": [[64, "c.Py_UNICODE_TODIGIT"]], "py_unicode_tolower (c function)": [[64, "c.Py_UNICODE_TOLOWER"]], "py_unicode_tonumeric (c function)": [[64, "c.Py_UNICODE_TONUMERIC"]], "py_unicode_totitle (c function)": [[64, "c.Py_UNICODE_TOTITLE"]], "py_unicode_toupper (c function)": [[64, "c.Py_UNICODE_TOUPPER"]], "co_future_division (c var)": [[66, "c.CO_FUTURE_DIVISION"]], "pep 238": [[66, "index-3"], [87, "index-93"], [113, "index-26"], [464, "index-11"], [464, "index-12"], [464, "index-13"], [470, "index-2"]], "pycompilerflags (c struct)": [[66, "c.PyCompilerFlags"]], "pycompilerflags.cf_feature_version (c member)": [[66, "c.PyCompilerFlags.cf_feature_version"]], "pycompilerflags.cf_flags (c member)": [[66, "c.PyCompilerFlags.cf_flags"]], "pyeval_evalcode (c function)": [[66, "c.PyEval_EvalCode"]], "pyeval_evalcodeex (c function)": [[66, "c.PyEval_EvalCodeEx"]], "pyeval_evalframe (c function)": [[66, "c.PyEval_EvalFrame"]], "pyeval_evalframeex (c function)": [[66, "c.PyEval_EvalFrameEx"]], "pyeval_mergecompilerflags (c function)": [[66, "c.PyEval_MergeCompilerFlags"]], "pyos_inputhook (c var)": [[66, "c.PyOS_InputHook"]], "pyos_readlinefunctionpointer (c var)": [[66, "c.PyOS_ReadlineFunctionPointer"]], "pyrun_anyfile (c function)": [[66, "c.PyRun_AnyFile"]], "pyrun_anyfileex (c function)": [[66, "c.PyRun_AnyFileEx"]], "pyrun_anyfileexflags (c function)": [[66, "c.PyRun_AnyFileExFlags"]], "pyrun_anyfileflags (c function)": [[66, "c.PyRun_AnyFileFlags"]], "pyrun_file (c function)": [[66, "c.PyRun_File"]], "pyrun_fileex (c function)": [[66, "c.PyRun_FileEx"]], "pyrun_fileexflags (c function)": [[66, "c.PyRun_FileExFlags"]], "pyrun_fileflags (c function)": [[66, "c.PyRun_FileFlags"]], "pyrun_interactiveloop (c function)": [[66, "c.PyRun_InteractiveLoop"]], "pyrun_interactiveloopflags (c function)": [[66, "c.PyRun_InteractiveLoopFlags"]], "pyrun_interactiveone (c function)": [[66, "c.PyRun_InteractiveOne"]], "pyrun_interactiveoneflags (c function)": [[66, "c.PyRun_InteractiveOneFlags"]], "pyrun_simplefile (c function)": [[66, "c.PyRun_SimpleFile"]], "pyrun_simplefileex (c function)": [[66, "c.PyRun_SimpleFileEx"]], "pyrun_simplefileexflags (c function)": [[66, "c.PyRun_SimpleFileExFlags"]], "pyrun_simplestring (c function)": [[66, "c.PyRun_SimpleString"]], "pyrun_simplestringflags (c function)": [[66, "c.PyRun_SimpleStringFlags"]], "pyrun_string (c function)": [[66, "c.PyRun_String"]], "pyrun_stringflags (c function)": [[66, "c.PyRun_StringFlags"]], "py_bytesmain (c function)": [[66, "c.Py_BytesMain"]], "py_compilestring (c function)": [[66, "c.Py_CompileString"]], "py_compilestringexflags (c function)": [[66, "c.Py_CompileStringExFlags"]], "py_compilestringflags (c function)": [[66, "c.Py_CompileStringFlags"]], "py_compilestringobject (c function)": [[66, "c.Py_CompileStringObject"]], "py_compilestring\uff08c \u51fd\u5f0f\uff09": [[66, "index-0"], [66, "index-1"], [66, "index-2"]], "py_main (c function)": [[66, "c.Py_Main"]], "py_eval_input (c var)": [[66, "c.Py_eval_input"]], "py_file_input (c var)": [[66, "c.Py_file_input"]], "py_single_input (c var)": [[66, "c.Py_single_input"]], "pyobject_clearweakrefs (c function)": [[67, "c.PyObject_ClearWeakRefs"]], "pyweakref_check (c function)": [[67, "c.PyWeakref_Check"]], "pyweakref_checkproxy (c function)": [[67, "c.PyWeakref_CheckProxy"]], "pyweakref_checkref (c function)": [[67, "c.PyWeakref_CheckRef"]], "pyweakref_get_object (c function)": [[67, "c.PyWeakref_GET_OBJECT"]], "pyweakref_getobject (c function)": [[67, "c.PyWeakref_GetObject"]], "pyweakref_newproxy (c function)": [[67, "c.PyWeakref_NewProxy"]], "pyweakref_newref (c function)": [[67, "c.PyWeakref_NewRef"]], "pep 3101": [[68, "index-23"], [345, "index-1"], [345, "index-19"], [468, "index-9"], [470, "index-23"], [470, "index-24"], [484, "index-23"]], "rfc": [[68, "index-12"], [101, "index-0"], [102, "index-0"], [102, "index-1"], [102, "index-2"], [102, "index-3"], [102, "index-4"], [102, "index-5"], [110, "index-1"], [110, "index-2"], [110, "index-4"], [126, "index-3"], [126, "index-4"], [143, "index-10"], [143, "index-11"], [143, "index-12"], [143, "index-15"], [143, "index-16"], [143, "index-3"], [143, "index-4"], [143, "index-5"], [143, "index-6"], [143, "index-7"], [143, "index-8"], [143, "index-9"], [146, "index-1"], [146, "index-2"], [146, "index-3"], [158, "index-10"], [158, "index-11"], [158, "index-12"], [158, "index-13"], [158, "index-14"], [158, "index-6"], [158, "index-7"], [158, "index-8"], [158, "index-9"], [175, "index-6"], [194, "index-0"], [194, "index-1"], [194, "index-2"], [194, "index-3"], [194, "index-4"], [194, "index-5"], [194, "index-6"], [194, "index-7"], [196, "index-0"], [196, "index-1"], [196, "index-10"], [196, "index-11"], [196, "index-2"], [196, "index-3"], [196, "index-4"], [196, "index-5"], [196, "index-6"], [196, "index-7"], [196, "index-8"], [196, "index-9"], [197, "index-0"], [199, "index-0"], [200, "index-0"], [201, "index-0"], [201, "index-1"], [202, "index-0"], [202, "index-1"], [202, "index-10"], [202, "index-11"], [202, "index-12"], [202, "index-13"], [202, "index-2"], [202, "index-3"], [202, "index-4"], [202, "index-5"], [202, "index-6"], [202, "index-7"], [202, "index-8"], [202, "index-9"], [203, "index-0"], [203, "index-1"], [203, "index-10"], [203, "index-11"], [203, "index-12"], [203, "index-13"], [203, "index-14"], [203, "index-2"], [203, "index-3"], [203, "index-4"], [203, "index-5"], [203, "index-6"], [203, "index-7"], [203, "index-8"], [203, "index-9"], [205, "index-0"], [205, "index-1"], [205, "index-10"], [205, "index-2"], [205, "index-3"], [205, "index-4"], [205, "index-5"], [205, "index-6"], [205, "index-7"], [205, "index-8"], [205, "index-9"], [207, "index-0"], [207, "index-1"], [208, "index-0"], [208, "index-1"], [208, "index-2"], [208, "index-3"], [208, "index-4"], [208, "index-5"], [208, "index-6"], [208, "index-7"], [208, "index-8"], [208, "index-9"], [209, "index-0"], [209, "index-1"], [209, "index-10"], [209, "index-2"], [209, "index-3"], [209, "index-4"], [209, "index-5"], [209, "index-6"], [209, "index-7"], [209, "index-8"], [209, "index-9"], [223, "index-12"], [223, "index-13"], [223, "index-14"], [223, "index-15"], [223, "index-16"], [223, "index-5"], [230, "index-9"], [235, "index-1"], [235, "index-3"], [235, "index-5"], [237, "index-2"], [241, "index-152"], [241, "index-153"], [241, "index-154"], [241, "index-155"], [241, "index-156"], [241, "index-157"], [241, "index-158"], [241, "index-159"], [241, "index-160"], [241, "index-161"], [241, "index-162"], [241, "index-163"], [241, "index-164"], [241, "index-165"], [241, "index-166"], [241, "index-167"], [241, "index-168"], [241, "index-169"], [241, "index-170"], [241, "index-171"], [241, "index-172"], [241, "index-173"], [241, "index-174"], [241, "index-175"], [241, "index-176"], [241, "index-177"], [241, "index-178"], [241, "index-179"], [241, "index-180"], [241, "index-181"], [241, "index-182"], [241, "index-183"], [241, "index-184"], [241, "index-185"], [241, "index-186"], [241, "index-187"], [241, "index-188"], [241, "index-189"], [241, "index-190"], [241, "index-191"], [241, "index-192"], [241, "index-193"], [241, "index-194"], [241, "index-195"], [241, "index-196"], [241, "index-197"], [241, "index-198"], [241, "index-199"], [241, "index-200"], [241, "index-201"], [241, "index-202"], [241, "index-203"], [241, "index-204"], [241, "index-205"], [241, "index-206"], [241, "index-207"], [241, "index-208"], [241, "index-209"], [241, "index-210"], [241, "index-211"], [241, "index-212"], [241, "index-213"], [241, "index-214"], [241, "index-215"], [241, "index-216"], [241, "index-217"], [241, "index-218"], [241, "index-219"], [241, "index-220"], [241, "index-221"], [241, "index-222"], [241, "index-223"], [241, "index-224"], [241, "index-225"], [241, "index-226"], [241, "index-76"], [242, "index-2"], [242, "index-3"], [242, "index-4"], [242, "index-5"], [242, "index-6"], [242, "index-7"], [243, "index-0"], [243, "index-1"], [243, "index-10"], [243, "index-11"], [243, "index-12"], [243, "index-13"], [243, "index-14"], [243, "index-15"], [243, "index-16"], [243, "index-17"], [243, "index-18"], [243, "index-19"], [243, "index-2"], [243, "index-20"], [243, "index-21"], [243, "index-22"], [243, "index-23"], [243, "index-24"], [243, "index-25"], [243, "index-3"], [243, "index-4"], [243, "index-5"], [243, "index-6"], [243, "index-7"], [243, "index-8"], [243, "index-9"], [244, "index-0"], [244, "index-1"], [244, "index-2"], [244, "index-3"], [244, "index-4"], [244, "index-5"], [244, "index-6"], [244, "index-7"], [245, "index-1"], [245, "index-2"], [248, "index-1"], [248, "index-2"], [248, "index-3"], [248, "index-4"], [248, "index-5"], [248, "index-6"], [248, "index-7"], [248, "index-8"], [254, "index-12"], [256, "index-12"], [259, "index-0"], [259, "index-1"], [259, "index-10"], [259, "index-11"], [259, "index-12"], [259, "index-13"], [259, "index-2"], [259, "index-3"], [259, "index-4"], [259, "index-5"], [259, "index-6"], [259, "index-7"], [259, "index-8"], [259, "index-9"], [262, "index-2"], [262, "index-3"], [262, "index-4"], [262, "index-7"], [262, "index-8"], [266, "index-4"], [266, "index-5"], [269, "index-0"], [271, "index-0"], [272, "index-1"], [272, "index-2"], [288, "index-10"], [288, "index-2"], [288, "index-3"], [288, "index-4"], [288, "index-5"], [288, "index-6"], [288, "index-7"], [288, "index-8"], [288, "index-9"], [305, "index-1"], [305, "index-2"], [305, "index-3"], [305, "index-4"], [305, "index-5"], [305, "index-6"], [317, "index-10"], [317, "index-11"], [317, "index-12"], [317, "index-9"], [327, "index-5"], [335, "index-1"], [335, "index-10"], [335, "index-11"], [335, "index-12"], [335, "index-2"], [335, "index-3"], [335, "index-4"], [335, "index-5"], [335, "index-6"], [335, "index-7"], [335, "index-8"], [335, "index-9"], [337, "index-15"], [337, "index-3"], [341, "index-10"], [341, "index-11"], [341, "index-12"], [341, "index-13"], [341, "index-16"], [341, "index-17"], [341, "index-18"], [341, "index-19"], [341, "index-20"], [341, "index-21"], [341, "index-22"], [341, "index-31"], [341, "index-32"], [341, "index-7"], [341, "index-8"], [341, "index-9"], [346, "index-0"], [346, "index-1"], [359, "index-2"], [359, "index-3"], [366, "index-10"], [366, "index-19"], [366, "index-20"], [366, "index-21"], [366, "index-22"], [393, "index-2"], [394, "index-1"], [394, "index-10"], [394, "index-11"], [394, "index-16"], [394, "index-17"], [394, "index-2"], [394, "index-3"], [394, "index-4"], [394, "index-5"], [394, "index-6"], [394, "index-7"], [394, "index-8"], [394, "index-9"], [395, "index-15"], [395, "index-16"], [395, "index-17"], [395, "index-4"], [395, "index-5"], [395, "index-6"], [395, "index-7"], [395, "index-8"], [398, "index-12"], [398, "index-19"], [398, "index-20"], [398, "index-21"], [398, "index-22"], [398, "index-23"], [398, "index-24"], [407, "index-43"], [407, "index-48"], [408, "index-2"], [408, "index-3"], [408, "index-4"], [408, "index-5"], [419, "index-0"], [451, "index-3"], [464, "index-17"], [464, "index-18"], [464, "index-19"], [464, "index-20"], [464, "index-21"], [466, "index-18"], [467, "index-22"], [467, "index-23"], [468, "index-22"], [468, "index-23"], [469, "index-10"], [469, "index-12"], [469, "index-9"], [472, "index-32"], [475, "index-11"], [475, "index-12"], [475, "index-13"], [475, "index-7"], [475, "index-8"], [476, "index-26"], [476, "index-27"], [478, "index-31"], [478, "index-32"], [478, "index-33"], [478, "index-34"], [478, "index-35"], [478, "index-36"], [478, "index-37"], [478, "index-38"], [478, "index-39"], [478, "index-40"], [478, "index-41"], [478, "index-42"], [478, "index-43"], [478, "index-44"], [478, "index-51"], [480, "index-34"], [480, "index-35"], [481, "index-25"], [482, "index-22"], [482, "index-28"], [483, "index-176"], [483, "index-217"], [483, "index-33"], [483, "index-34"], [483, "index-35"], [483, "index-43"], [483, "index-84"], [483, "index-90"], [483, "index-92"]], "rfc 4122": [[68, "index-12"], [254, "index-12"], [256, "index-12"], [398, "index-12"], [398, "index-19"], [398, "index-20"], [398, "index-21"], [398, "index-22"], [398, "index-23"], [398, "index-24"], [467, "index-22"], [467, "index-23"]], "pyinit_modulename (c function)": [[71, "c.PyInit_modulename"]], "philbrick, geoff": [[73, "index-4"]], "pyarg_parsetupleandkeywords\uff08c \u51fd\u5f0f\uff09": [[73, "index-3"]], "pyarg_parsetuple\uff08c \u51fd\u5f0f\uff09": [[73, "index-2"]], "pyobject_callobject\uff08c \u51fd\u5f0f\uff09": [[73, "index-1"]], "pyerr_fetch\uff08c \u51fd\u5f0f\uff09": [[75, "index-1"]], "pyerr_restore\uff08c \u51fd\u5f0f\uff09": [[75, "index-1"]], "deallocation": [[75, "index-0"]], "deallocation, object": [[75, "index-0"]], "finalization": [[75, "index-0"]], "finalization, of objects": [[75, "index-0"]], "object representation\uff08\u7269\u4ef6\u8868\u793a\uff09": [[75, "index-3"]], "pep 572": [[78, "index-2"], [427, "index-24"], [430, "index-21"], [430, "index-87"], [474, "index-20"], [481, "index-24"], [481, "index-33"], [483, "index-192"], [483, "index-205"], [483, "index-215"], [483, "index-31"]], "pep 5": [[80, "index-6"], [463, "index-6"]], "pep 602": [[80, "index-5"], [482, "index-10"]], "pep 8": [[85, "index-2"], [85, "index-7"], [86, "index-2"], [108, "index-0"], [225, "index-10"], [430, "index-79"], [441, "index-18"], [457, "index-0"], [470, "index-38"], [483, "index-241"], [483, "index-303"]], "argument\uff08\u5f15\u6578\uff09": [[85, "index-1"], [87, "term-argument"], [427, "index-31"], [428, "index-33"], [430, "index-47"]], "parameter\uff08\u53c3\u6578\uff09": [[85, "index-1"], [87, "term-parameter"], [427, "index-27"], [427, "index-31"], [430, "index-48"]], "\u8207 argument\uff08\u5f15\u6578\uff09\u7684\u5dee\u7570": [[85, "index-1"]], "\u8207 parameter\uff08\u53c3\u6578\uff09\u7684\u5dee\u7570": [[85, "index-1"]], "...": [[87, "term-..."], [168, "index-0"], [193, "index-0"], [193, "index-3"], [307, "index-1"], [321, "index-0"], [344, "index-66"], [352, "index-27"], [364, "index-0"], [428, "index-8"]], "2to3": [[87, "term-2to3"]], ">>>": [[87, "term-0"], [193, "index-0"], [352, "index-27"]], "bdfl": [[87, "term-BDFL"]], "cpython": [[87, "term-CPython"]], "eafp": [[87, "term-EAFP"]], "gil": [[87, "term-GIL"]], "idle": [[87, "term-IDLE"], [247, "index-0"]], "lbyl": [[87, "term-LBYL"]], "mro": [[87, "term-MRO"]], "pep": [[87, "term-PEP"]], "pep 1": [[87, "index-103"], [462, "index-0"], [462, "index-1"]], "pep 278": [[87, "index-109"], [465, "index-9"]], "pep 302": [[87, "index-90"], [87, "index-99"], [225, "index-14"], [250, "index-12"], [250, "index-13"], [250, "index-14"], [250, "index-16"], [250, "index-2"], [265, "index-1"], [302, "index-0"], [302, "index-2"], [302, "index-3"], [302, "index-5"], [302, "index-6"], [302, "index-7"], [324, "index-1"], [352, "index-25"], [352, "index-26"], [423, "index-2"], [432, "index-1"], [432, "index-19"], [465, "index-17"], [465, "index-18"], [465, "index-19"], [465, "index-6"], [467, "index-21"], [471, "index-2"], [476, "index-20"], [476, "index-21"], [476, "index-37"]], "pep 3116": [[87, "index-110"], [468, "index-14"], [471, "index-3"]], "pep 3155": [[87, "index-106"], [476, "index-15"]], "pep 343": [[87, "index-86"], [113, "index-28"], [169, "index-2"], [427, "index-17"], [428, "index-107"], [467, "index-10"], [467, "index-14"], [468, "index-3"]], "pep 362": [[87, "index-101"], [87, "index-79"], [255, "index-0"], [476, "index-57"]], "pep 411": [[87, "index-105"], [352, "index-13"], [352, "index-14"], [352, "index-31"], [352, "index-32"]], "pep 420": [[87, "index-100"], [87, "index-104"], [87, "index-91"], [250, "index-5"], [432, "index-14"], [432, "index-15"], [432, "index-2"], [432, "index-20"], [432, "index-21"], [432, "index-22"], [432, "index-6"], [476, "index-2"], [476, "index-3"], [483, "index-283"], [483, "index-290"]], "pep 443": [[87, "index-95"], [477, "index-11"], [477, "index-36"]], "pep 483": [[87, "index-96"], [478, "index-12"]], "pep 484": [[87, "index-107"], [87, "index-108"], [87, "index-111"], [87, "index-77"], [87, "index-94"], [87, "index-97"], [122, "index-14"], [122, "index-15"], [122, "index-17"], [122, "index-18"], [344, "index-57"], [386, "index-18"], [386, "index-31"], [386, "index-93"], [386, "index-96"], [386, "index-97"], [427, "index-37"], [428, "index-95"], [436, "index-17"], [441, "index-17"], [472, "index-101"], [472, "index-103"], [472, "index-99"], [473, "index-93"], [473, "index-94"], [474, "index-15"], [474, "index-16"], [474, "index-3"], [478, "index-10"], [478, "index-11"], [479, "index-5"], [480, "index-20"], [481, "index-10"], [481, "index-12"]], "pep 492": [[87, "index-80"], [87, "index-81"], [87, "index-83"], [87, "index-84"], [87, "index-85"], [87, "index-87"], [87, "index-88"], [161, "index-3"], [255, "index-1"], [255, "index-2"], [427, "index-52"], [428, "index-111"], [430, "index-30"], [478, "index-1"], [478, "index-2"], [478, "index-47"], [478, "index-52"], [479, "index-35"], [479, "index-9"], [483, "index-246"], [483, "index-280"], [483, "index-291"], [483, "index-295"]], "pep 498": [[87, "index-89"], [435, "index-26"], [479, "index-3"], [479, "index-4"], [483, "index-287"]], "pep 519": [[87, "index-102"], [479, "index-16"], [483, "index-271"], [483, "index-276"], [483, "index-277"], [483, "index-278"], [483, "index-279"], [483, "index-282"]], "pep 525": [[87, "index-82"], [161, "index-2"], [255, "index-3"], [352, "index-30"], [352, "index-43"], [430, "index-29"], [479, "index-10"], [483, "index-264"]], "pep 526": [[87, "index-112"], [87, "index-78"], [122, "index-16"], [122, "index-19"], [181, "index-1"], [181, "index-2"], [386, "index-11"], [386, "index-25"], [386, "index-27"], [427, "index-38"], [436, "index-16"], [472, "index-107"], [479, "index-33"], [479, "index-6"], [480, "index-1"], [481, "index-11"], [483, "index-265"]], "pep 585": [[87, "index-98"], [161, "index-0"], [344, "index-58"], [385, "index-5"], [386, "index-36"], [386, "index-38"], [386, "index-39"], [386, "index-40"], [386, "index-41"], [386, "index-42"], [386, "index-43"], [386, "index-44"], [386, "index-45"], [386, "index-46"], [386, "index-47"], [386, "index-48"], [386, "index-49"], [386, "index-50"], [386, "index-51"], [386, "index-52"], [386, "index-53"], [386, "index-54"], [386, "index-55"], [386, "index-56"], [386, "index-57"], [386, "index-58"], [386, "index-59"], [386, "index-60"], [386, "index-61"], [386, "index-62"], [386, "index-63"], [386, "index-64"], [386, "index-65"], [386, "index-66"], [386, "index-67"], [386, "index-68"], [386, "index-69"], [386, "index-70"], [386, "index-72"], [386, "index-73"], [386, "index-74"], [386, "index-75"], [386, "index-76"], [482, "index-13"], [482, "index-2"], [483, "index-32"], [483, "index-81"], [483, "index-85"]], "python 3000": [[87, "term-Python-3000"]], "pythonic\uff08python \u98a8\u683c\u7684\uff09": [[87, "term-Pythonic"]], "zen of python\uff08python \u4e4b\u79aa\uff09": [[87, "term-Zen-of-Python"]], "__future__": [[87, "term-__future__"], [113, "module-__future__"], [436, "index-40"]], "__slots__": [[87, "term-__slots__"]], "abstract base class\uff08\u62bd\u8c61\u57fa\u5e95\u985e\u5225\uff09": [[87, "term-abstract-base-class"]], "annotation\uff08\u8a3b\u91cb\uff09": [[87, "term-annotation"]], "asynchronous context manager\uff08\u975e\u540c\u6b65\u60c5\u5883\u7ba1\u7406\u5668\uff09": [[87, "term-asynchronous-context-manager"]], "asynchronous generator iterator\uff08\u975e\u540c\u6b65\u7522\u751f\u5668\u758a\u4ee3\u5668\uff09": [[87, "term-asynchronous-generator-iterator"]], "asynchronous generator\uff08\u975e\u540c\u6b65\u7522\u751f\u5668\uff09": [[87, "term-asynchronous-generator"], [428, "index-41"]], "asynchronous iterable\uff08\u975e\u540c\u6b65\u53ef\u758a\u4ee3\u7269\u4ef6\uff09": [[87, "term-asynchronous-iterable"]], "asynchronous iterator\uff08\u975e\u540c\u6b65\u758a\u4ee3\u5668\uff09": [[87, "term-asynchronous-iterator"], [428, "index-41"]], "attribute\uff08\u5c6c\u6027\uff09": [[87, "term-attribute"], [428, "index-47"], [428, "index-48"], [428, "index-5"], [428, "index-51"], [428, "index-52"], [430, "index-39"], [436, "index-23"], [436, "index-4"], [436, "index-8"]], "awaitable\uff08\u53ef\u7b49\u5f85\u7269\u4ef6\uff09": [[87, "term-awaitable"]], "binary file\uff08\u4e8c\u9032\u4f4d\u6a94\u6848\uff09": [[87, "term-binary-file"]], "borrowed reference\uff08\u501f\u7528\u53c3\u7167\uff09": [[87, "term-borrowed-reference"]], "bytecode\uff08\u4f4d\u5143\u7d44\u78bc\uff09": [[87, "term-bytecode"], [428, "index-57"]], "bytes-like object\uff08\u985e\u4f4d\u5143\u7d44\u4e32\u7269\u4ef6\uff09": [[87, "term-bytes-like-object"]], "callable\uff08\u53ef\u547c\u53eb\u7269\u4ef6\uff09": [[87, "term-callable"], [428, "index-33"], [430, "index-47"]], "callback\uff08\u56de\u547c\uff09": [[87, "term-callback"]], "class variable\uff08\u985e\u5225\u8b8a\u6578\uff09": [[87, "term-class-variable"]], "class\uff08\u985e\u5225\uff09": [[87, "term-class"], [427, "index-42"], [428, "index-47"], [428, "index-48"], [428, "index-51"], [428, "index-73"], [428, "index-91"], [430, "index-54"], [436, "index-24"]], "context manager\uff08\u60c5\u5883\u7ba1\u7406\u5668\uff09": [[87, "term-context-manager"], [344, "index-54"], [428, "index-106"]], "context variable\uff08\u60c5\u5883\u8b8a\u6578\uff09": [[87, "term-context-variable"]], "coroutine function\uff08\u5354\u7a0b\u51fd\u5f0f\uff09": [[87, "term-coroutine-function"]], "coroutine\uff08\u5354\u7a0b\uff09": [[87, "term-coroutine"], [428, "index-110"], [428, "index-40"], [430, "index-24"]], "decorator\uff08\u88dd\u98fe\u5668\uff09": [[87, "term-decorator"]], "descriptor\uff08\u63cf\u8ff0\u5668\uff09": [[87, "term-descriptor"]], "dictionary comprehension\uff08\u5b57\u5178\u7d9c\u5408\u904b\u7b97\uff09": [[87, "term-dictionary-comprehension"]], "dictionary view\uff08\u5b57\u5178\u6aa2\u8996\uff09": [[87, "term-dictionary-view"]], "docstring\uff08\u8aaa\u660e\u5b57\u4e32\uff09": [[87, "term-docstring"], [427, "index-42"]], "duck-typing\uff08\u9d28\u5b50\u578b\u5225\uff09": [[87, "term-duck-typing"]], "expression\uff08\u904b\u7b97\u5f0f\uff09": [[87, "term-expression"], [427, "index-35"]], "extension module\uff08\u64f4\u5145\u6a21\u7d44\uff09": [[87, "term-extension-module"]], "f-string\uff08f \u5b57\u4e32\uff09": [[87, "term-f-string"], [435, "index-25"]], "file object\uff08\u6a94\u6848\u7269\u4ef6\uff09": [[87, "term-file-object"], [225, "index-5"], [258, "index-0"]], "file-like object\uff08\u985e\u6a94\u6848\u7269\u4ef6\uff09": [[87, "term-file-like-object"]], "filesystem encoding and error handler\uff08\u6a94\u6848\u7cfb\u7d71\u7de8\u78bc\u548c\u932f\u8aa4\u8655\u7406\u51fd\u5f0f\uff09": [[87, "term-filesystem-encoding-and-error-handler"]], "finder\uff08\u5c0b\u6aa2\u5668\uff09": [[87, "term-finder"]], "floor division\uff08\u5411\u4e0b\u53d6\u6574\u9664\u6cd5\uff09": [[87, "term-floor-division"]], "function annotation\uff08\u51fd\u5f0f\u8a3b\u91cb\uff09": [[87, "term-function-annotation"]], "garbage collection\uff08\u5783\u573e\u56de\u6536\uff09": [[87, "term-garbage-collection"], [428, "index-2"]], "generator expression\uff08\u7522\u751f\u5668\u904b\u7b97\u5f0f\uff09": [[87, "index-20"], [87, "term-generator-expression"], [430, "index-22"]], "generator iterator\uff08\u7522\u751f\u5668\u758a\u4ee3\u5668\uff09": [[87, "term-generator-iterator"]], "generator\uff08\u7522\u751f\u5668\uff09": [[87, "index-19"], [87, "term-generator"], [428, "index-39"], [428, "index-59"], [430, "index-22"], [430, "index-23"], [430, "index-31"], [436, "index-26"]], "generic function\uff08\u6cdb\u578b\u51fd\u5f0f\uff09": [[87, "term-generic-function"]], "generic type\uff08\u6cdb\u578b\u578b\u5225\uff09": [[87, "term-generic-type"]], "hash-based pyc\uff08\u96dc\u6e4a\u67b6\u69cb\u7684 pyc\uff09": [[87, "term-hash-based-pyc"]], "hashable\uff08\u53ef\u96dc\u6e4a\u7684\uff09": [[87, "term-hashable"]], "immutable\uff08\u4e0d\u53ef\u8b8a\u7269\u4ef6\uff09": [[87, "term-immutable"]], "import path\uff08\u5f15\u5165\u8def\u5f91\uff09": [[87, "term-import-path"]], "importer\uff08\u5f15\u5165\u5668\uff09": [[87, "term-importer"]], "importing\uff08\u5f15\u5165\uff09": [[87, "term-importing"], [436, "index-34"]], "interactive\uff08\u4e92\u52d5\u7684\uff09": [[87, "term-interactive"]], "interpreted\uff08\u76f4\u8b6f\u7684\uff09": [[87, "term-interpreted"]], "interpreter shutdown\uff08\u76f4\u8b6f\u5668\u95dc\u9589\uff09": [[87, "term-interpreter-shutdown"]], "iterable\uff08\u53ef\u758a\u4ee3\u7269\u4ef6\uff09": [[87, "term-iterable"]], "iterator\uff08\u758a\u4ee3\u5668\uff09": [[87, "term-iterator"], [344, "index-18"], [436, "index-26"]], "key function\uff08\u9375\u51fd\u5f0f\uff09": [[87, "term-key-function"]], "keyword argument\uff08\u95dc\u9375\u5b57\u5f15\u6578\uff09": [[87, "term-keyword-argument"]], "lambda": [[87, "term-lambda"], [427, "index-35"], [430, "index-90"]], "list comprehension\uff08\u4e32\u5217\u7d9c\u5408\u904b\u7b97\uff09": [[87, "term-list-comprehension"]], "loader\uff08\u8f09\u5165\u5668\uff09": [[87, "term-loader"], [432, "index-8"]], "locale encoding\uff08\u5340\u57df\u7de8\u78bc\uff09": [[87, "term-locale-encoding"]], "magic": [[87, "index-26"]], "magic method\uff08\u9b54\u8853\u65b9\u6cd5\uff09": [[87, "term-magic-method"]], "meta path finder\uff08\u5143\u8def\u5f91\u5c0b\u6aa2\u5668\uff09": [[87, "term-meta-path-finder"]], "metaclass\uff08\u5143\u985e\u5225\uff09": [[87, "term-metaclass"], [428, "index-86"]], "method resolution order\uff08\u65b9\u6cd5\u89e3\u6790\u9806\u5e8f\uff09": [[87, "term-method-resolution-order"]], "module spec\uff08\u6a21\u7d44\u898f\u683c\uff09": [[87, "term-module-spec"]], "mutable\uff08\u53ef\u8b8a\u7269\u4ef6\uff09": [[87, "term-mutable"]], "named tuple\uff08\u9644\u540d\u5143\u7d44\uff09": [[87, "term-named-tuple"]], "namespace package\uff08\u547d\u540d\u7a7a\u9593\u5957\u4ef6\uff09": [[87, "term-namespace-package"]], "namespace\uff08\u547d\u540d\u7a7a\u9593\uff09": [[87, "term-namespace"], [428, "index-35"], [428, "index-45"], [429, "index-3"], [432, "index-5"]], "nested scope\uff08\u5de2\u72c0\u4f5c\u7528\u57df\uff09": [[87, "term-nested-scope"]], "new-style class\uff08\u65b0\u5f0f\u985e\u5225\uff09": [[87, "term-new-style-class"]], "package\uff08\u5957\u4ef6\uff09": [[87, "term-package"], [334, "index-4"], [432, "index-3"], [432, "index-4"], [432, "index-5"]], "path based finder\uff08\u57fa\u65bc\u8def\u5f91\u7684\u5c0b\u6aa2\u5668\uff09": [[87, "term-path-based-finder"]], "path entry finder\uff08\u8def\u5f91\u9805\u76ee\u5c0b\u6aa2\u5668\uff09": [[87, "term-path-entry-finder"]], "path entry hook\uff08\u8def\u5f91\u9805\u76ee\u9264\uff09": [[87, "term-path-entry-hook"]], "path entry\uff08\u8def\u5f91\u9805\u76ee\uff09": [[87, "term-path-entry"]], "path-like object\uff08\u985e\u8def\u5f91\u7269\u4ef6\uff09": [[87, "term-path-like-object"]], "portion\uff08\u90e8\u5206\uff09": [[87, "term-portion"], [432, "index-5"]], "positional argument\uff08\u4f4d\u7f6e\u5f15\u6578\uff09": [[87, "term-positional-argument"]], "provisional api\uff08\u66ab\u884c api\uff09": [[87, "term-provisional-API"]], "provisional package\uff08\u66ab\u884c\u5957\u4ef6\uff09": [[87, "term-provisional-package"]], "qualified name\uff08\u9650\u5b9a\u540d\u7a31\uff09": [[87, "term-qualified-name"]], "reference count\uff08\u53c3\u7167\u8a08\u6578\uff09": [[87, "term-reference-count"]], "regular package\uff08\u6b63\u898f\u5957\u4ef6\uff09": [[87, "term-regular-package"]], "set comprehension\uff08\u96c6\u5408\u7d9c\u5408\u904b\u7b97\uff09": [[87, "term-set-comprehension"]], "single dispatch\uff08\u55ae\u4e00\u8abf\u5ea6\uff09": [[87, "term-single-dispatch"]], "slice\uff08\u5207\u7247\uff09": [[87, "term-slice"], [191, "index-1"], [344, "index-20"], [344, "index-24"], [428, "index-16"], [428, "index-22"], [428, "index-69"], [428, "index-99"], [430, "index-44"], [436, "index-12"]], "special": [[87, "index-34"], [428, "index-5"]], "special method\uff08\u7279\u6b8a\u65b9\u6cd5\uff09": [[87, "term-special-method"]], "statement\uff08\u9673\u8ff0\u5f0f\uff09": [[87, "term-statement"], [213, "index-0"], [213, "index-1"], [213, "index-4"], [225, "index-13"], [334, "index-2"], [344, "index-1"], [344, "index-24"], [344, "index-52"], [427, "index-0"], [427, "index-13"], [427, "index-15"], [427, "index-16"], [427, "index-18"], [427, "index-28"], [427, "index-3"], [427, "index-4"], [427, "index-4"], [427, "index-42"], [427, "index-48"], [427, "index-5"], [427, "index-50"], [427, "index-51"], [427, "index-6"], [427, "index-6"], [427, "index-7"], [427, "index-9"], [428, "index-106"], [428, "index-22"], [428, "index-44"], [428, "index-67"], [428, "index-74"], [436, "index-0"], [436, "index-1"], [436, "index-14"], [436, "index-15"], [436, "index-18"], [436, "index-20"], [436, "index-21"], [436, "index-22"], [436, "index-24"], [436, "index-26"], [436, "index-27"], [436, "index-30"], [436, "index-30"], [436, "index-33"], [436, "index-33"], [436, "index-34"], [436, "index-4"], [436, "index-40"], [436, "index-43"], [436, "index-45"], [436, "index-47"], [441, "index-0"]], "static type checker\uff08\u975c\u614b\u578b\u5225\u6aa2\u67e5\u5668\uff09": [[87, "term-static-type-checker"]], "strong reference\uff08\u5f37\u53c3\u7167\uff09": [[87, "term-strong-reference"]], "text encoding\uff08\u6587\u5b57\u7de8\u78bc\uff09": [[87, "term-text-encoding"]], "text file\uff08\u6587\u5b57\u6a94\u6848\uff09": [[87, "term-text-file"]], "triple-quoted string\uff08\u4e09\u5f15\u865f\u5167\u5b57\u4e32\uff09": [[87, "term-triple-quoted-string"]], "type alias\uff08\u578b\u5225\u5225\u540d\uff09": [[87, "term-type-alias"]], "type hint\uff08\u578b\u5225\u63d0\u793a\uff09": [[87, "term-type-hint"]], "universal newlines\uff08\u901a\u7528\u63db\u884c\u5b57\u5143\uff09": [[87, "term-universal-newlines"]], "variable annotation\uff08\u8b8a\u6578\u8a3b\u91cb\uff09": [[87, "term-variable-annotation"]], "virtual environment\uff08\u865b\u64ec\u74b0\u5883\uff09": [[87, "term-virtual-environment"]], "virtual machine\uff08\u865b\u64ec\u6a5f\u5668\uff09": [[87, "term-virtual-machine"]], "pep 604": [[88, "index-2"], [344, "index-60"], [472, "index-100"], [472, "index-85"], [483, "index-115"], [483, "index-156"]], "pep 289": [[95, "index-4"], [466, "index-15"], [466, "index-2"]], "pep 342": [[95, "index-0"], [95, "index-2"], [161, "index-1"], [430, "index-27"], [467, "index-11"], [467, "index-31"], [467, "index-9"]], "rfc 3339": [[101, "index-0"]], "__init__() (logging.logging.formatter \u7684\u65b9\u6cd5)": [[101, "logging.logging.Formatter.__init__"]], "rfc 3164": [[102, "index-5"]], "rfc 5424": [[102, "index-0"], [102, "index-2"], [102, "index-3"], [102, "index-4"], [269, "index-0"]], "rfc 5424#section-6": [[102, "index-1"]], "pep 373": [[105, "index-0"], [469, "index-0"]], "pep 263": [[109, "index-0"], [250, "index-1"], [378, "index-0"], [378, "index-1"], [465, "index-3"], [467, "index-19"], [483, "index-80"]], "rfc 2616": [[110, "index-1"], [110, "index-2"], [110, "index-4"], [393, "index-2"], [395, "index-5"], [395, "index-6"], [395, "index-8"], [407, "index-43"], [407, "index-48"], [475, "index-7"]], "pep 617": [[112, "index-0"], [431, "index-0"], [472, "index-94"], [473, "index-114"], [474, "index-8"], [482, "index-14"], [482, "index-19"], [482, "index-7"], [483, "index-172"], [483, "index-89"]], "apply (2to3 fixer)": [[112, "to3fixer-apply"]], "asserts (2to3 fixer)": [[112, "to3fixer-asserts"]], "basestring (2to3 fixer)": [[112, "to3fixer-basestring"]], "buffer (2to3 fixer)": [[112, "to3fixer-buffer"]], "dict (2to3 fixer)": [[112, "to3fixer-dict"]], "except (2to3 fixer)": [[112, "to3fixer-except"]], "exec (2to3 fixer)": [[112, "to3fixer-exec"]], "execfile (2to3 fixer)": [[112, "to3fixer-execfile"]], "exitfunc (2to3 fixer)": [[112, "to3fixer-exitfunc"]], "filter (2to3 fixer)": [[112, "to3fixer-filter"]], "funcattrs (2to3 fixer)": [[112, "to3fixer-funcattrs"]], "future (2to3 fixer)": [[112, "to3fixer-future"]], "getcwdu (2to3 fixer)": [[112, "to3fixer-getcwdu"]], "has_key (2to3 fixer)": [[112, "to3fixer-has_key"]], "idioms (2to3 fixer)": [[112, "to3fixer-idioms"]], "import (2to3 fixer)": [[112, "to3fixer-import"]], "imports (2to3 fixer)": [[112, "to3fixer-imports"]], "imports2 (2to3 fixer)": [[112, "to3fixer-imports2"]], "input (2to3 fixer)": [[112, "to3fixer-input"]], "intern (2to3 fixer)": [[112, "to3fixer-intern"]], "isinstance (2to3 fixer)": [[112, "to3fixer-isinstance"]], "itertools (2to3 fixer)": [[112, "to3fixer-itertools"]], "itertools_imports (2to3 fixer)": [[112, "to3fixer-itertools_imports"]], "lib2to3": [[112, "module-lib2to3"]], "long (2to3 fixer)": [[112, "to3fixer-long"]], "map (2to3 fixer)": [[112, "to3fixer-map"]], "metaclass (2to3 fixer)": [[112, "to3fixer-metaclass"]], "methodattrs (2to3 fixer)": [[112, "to3fixer-methodattrs"]], "module": [[112, "module-lib2to3"], [113, "module-__future__"], [114, "module-__main__"], [115, "module-_thread"], [116, "module-abc"], [117, "module-aifc"], [120, "module-argparse"], [121, "module-array"], [122, "module-ast"], [123, "module-asyncio"], [140, "module-atexit"], [141, "module-audioop"], [143, "module-base64"], [144, "module-bdb"], [146, "module-binascii"], [147, "module-bisect"], [148, "module-builtins"], [149, "module-bz2"], [150, "module-calendar"], [151, "module-cgi"], [152, "module-cgitb"], [153, "module-chunk"], [154, "module-cmath"], [155, "module-cmd"], [157, "module-code"], [158, "module-codecs"], [158, "module-encodings.idna"], [158, "module-encodings.mbcs"], [158, "module-encodings.utf_8_sig"], [159, "module-codeop"], [160, "module-collections"], [161, "module-collections.abc"], [162, "module-colorsys"], [163, "module-compileall"], [166, "module-concurrent.futures"], [167, "module-configparser"], [169, "module-contextlib"], [170, "module-contextvars"], [171, "module-copy"], [172, "module-copyreg"], [173, "module-crypt"], [175, "module-csv"], [176, "module-ctypes"], [177, "module-curses"], [177, "module-curses.textpad"], [178, "module-curses.ascii"], [179, "module-curses.panel"], [181, "module-dataclasses"], [183, "module-datetime"], [184, "module-dbm"], [184, "module-dbm.dumb"], [184, "module-dbm.gnu"], [184, "module-dbm.ndbm"], [186, "module-decimal"], [189, "module-tkinter.commondialog"], [189, "module-tkinter.filedialog"], [189, "module-tkinter.simpledialog"], [190, "module-difflib"], [191, "module-dis"], [193, "module-doctest"], [194, "module-email"], [195, "module-email.charset"], [197, "module-email.contentmanager"], [198, "module-email.encoders"], [199, "module-email.errors"], [201, "module-email.generator"], [202, "module-email.header"], [203, "module-email.headerregistry"], [204, "module-email.iterators"], [205, "module-email.message"], [206, "module-email.mime"], [206, "module-email.mime.application"], [206, "module-email.mime.audio"], [206, "module-email.mime.base"], [206, "module-email.mime.image"], [206, "module-email.mime.message"], [206, "module-email.mime.multipart"], [206, "module-email.mime.nonmultipart"], [206, "module-email.mime.text"], [207, "module-email.parser"], [208, "module-email.policy"], [209, "module-email.utils"], [210, "module-ensurepip"], [211, "module-enum"], [212, "module-errno"], [214, "module-faulthandler"], [215, "module-fcntl"], [216, "module-filecmp"], [218, "module-fileinput"], [220, "module-fnmatch"], [221, "module-fractions"], [223, "module-ftplib"], [226, "module-functools"], [227, "module-gc"], [228, "module-getopt"], [229, "module-getpass"], [230, "module-gettext"], [231, "module-glob"], [232, "module-graphlib"], [233, "module-grp"], [234, "module-gzip"], [235, "module-hashlib"], [236, "module-heapq"], [237, "module-hmac"], [238, "module-html"], [239, "module-html.entities"], [240, "module-html.parser"], [241, "module-http"], [242, "module-http.client"], [243, "module-http.cookiejar"], [244, "module-http.cookies"], [245, "module-http.server"], [247, "module-idlelib"], [248, "module-imaplib"], [249, "module-imghdr"], [250, "module-importlib"], [250, "module-importlib.abc"], [250, "module-importlib.machinery"], [250, "module-importlib.util"], [251, "module-importlib.metadata"], [252, "module-importlib.resources"], [253, "module-importlib.resources.abc"], [255, "module-inspect"], [258, "module-io"], [259, "module-ipaddress"], [261, "module-itertools"], [262, "module-json"], [262, "module-json.tool"], [263, "module-keyword"], [265, "module-linecache"], [266, "module-locale"], [267, "module-logging"], [268, "module-logging.config"], [269, "module-logging.handlers"], [270, "module-lzma"], [271, "module-mailbox"], [272, "module-mailcap"], [274, "module-marshal"], [275, "module-math"], [276, "module-mimetypes"], [278, "module-mmap"], [279, "module-modulefinder"], [281, "module-msilib"], [282, "module-msvcrt"], [283, "module-multiprocessing"], [283, "module-multiprocessing.connection"], [283, "module-multiprocessing.dummy"], [283, "module-multiprocessing.managers"], [283, "module-multiprocessing.pool"], [283, "module-multiprocessing.sharedctypes"], [284, "module-multiprocessing.shared_memory"], [286, "module-netrc"], [287, "module-nis"], [288, "module-nntplib"], [289, "module-numbers"], [291, "module-operator"], [292, "module-optparse"], [293, "module-os"], [294, "module-os.path"], [295, "module-ossaudiodev"], [296, "module-pathlib"], [297, "module-pdb"], [299, "module-pickle"], [300, "module-pickletools"], [301, "module-pipes"], [302, "module-pkgutil"], [303, "module-platform"], [304, "module-plistlib"], [305, "module-poplib"], [306, "module-posix"], [307, "module-pprint"], [308, "module-cProfile"], [308, "module-profile"], [308, "module-pstats"], [309, "module-pty"], [310, "module-pwd"], [311, "module-py_compile"], [312, "module-pyclbr"], [313, "module-pydoc"], [314, "module-xml.parsers.expat"], [314, "module-xml.parsers.expat.errors"], [314, "module-xml.parsers.expat.model"], [316, "module-queue"], [317, "module-quopri"], [318, "module-random"], [319, "module-re"], [320, "module-readline"], [321, "module-reprlib"], [322, "module-resource"], [323, "module-rlcompleter"], [324, "module-runpy"], [325, "module-sched"], [326, "module-secrets"], [328, "module-select"], [329, "module-selectors"], [330, "module-shelve"], [331, "module-shlex"], [332, "module-shutil"], [333, "module-signal"], [334, "module-site"], [334, "module-sitecustomize"], [334, "module-usercustomize"], [335, "module-smtplib"], [336, "module-sndhdr"], [337, "module-socket"], [338, "module-socketserver"], [339, "module-spwd"], [340, "module-sqlite3"], [341, "module-ssl"], [342, "module-stat"], [343, "module-statistics"], [345, "module-string"], [346, "module-stringprep"], [347, "module-struct"], [348, "module-subprocess"], [349, "module-sunau"], [351, "module-symtable"], [352, "module-sys"], [353, "module-sys.monitoring"], [355, "module-sysconfig"], [356, "module-syslog"], [357, "module-tabnanny"], [358, "module-tarfile"], [359, "module-telnetlib"], [360, "module-tempfile"], [361, "module-termios"], [362, "module-test"], [362, "module-test.regrtest"], [362, "module-test.support"], [362, "module-test.support.bytecode_helper"], [362, "module-test.support.import_helper"], [362, "module-test.support.os_helper"], [362, "module-test.support.script_helper"], [362, "module-test.support.socket_helper"], [362, "module-test.support.threading_helper"], [362, "module-test.support.warnings_helper"], [364, "module-textwrap"], [365, "module-threading"], [366, "module-time"], [367, "module-timeit"], [369, "module-_tkinter"], [369, "module-tkinter"], [370, "module-tkinter.colorchooser"], [371, "module-tkinter.dnd"], [372, "module-tkinter.font"], [373, "module-tkinter.messagebox"], [374, "module-tkinter.scrolledtext"], [375, "module-tkinter.tix"], [376, "module-tkinter.ttk"], [377, "module-token"], [378, "module-tokenize"], [379, "module-tomllib"], [380, "module-trace"], [381, "module-traceback"], [382, "module-tracemalloc"], [383, "module-tty"], [384, "module-turtle"], [384, "module-turtledemo"], [385, "module-types"], [386, "module-typing"], [387, "module-unicodedata"], [388, "module-unittest"], [389, "module-unittest.mock"], [392, "module-urllib"], [393, "module-urllib.error"], [394, "module-urllib.parse"], [395, "module-urllib.request"], [395, "module-urllib.response"], [396, "module-urllib.robotparser"], [397, "module-uu"], [398, "module-uuid"], [399, "module-venv"], [400, "module-warnings"], [401, "module-wave"], [402, "module-weakref"], [403, "module-webbrowser"], [405, "module-winreg"], [406, "module-winsound"], [407, "module-wsgiref"], [407, "module-wsgiref.handlers"], [407, "module-wsgiref.headers"], [407, "module-wsgiref.simple_server"], [407, "module-wsgiref.types"], [407, "module-wsgiref.util"], [407, "module-wsgiref.validate"], [408, "module-xdrlib"], [409, "module-xml"], [410, "module-xml.dom"], [411, "module-xml.dom.minidom"], [412, "module-xml.dom.pulldom"], [413, "module-xml.etree.ElementInclude"], [413, "module-xml.etree.ElementTree"], [414, "module-xml.sax"], [415, "module-xml.sax.handler"], [416, "module-xml.sax.xmlreader"], [417, "module-xml.sax.saxutils"], [419, "module-xmlrpc.client"], [420, "module-xmlrpc.server"], [421, "module-zipapp"], [422, "module-zipfile"], [423, "module-zipimport"], [424, "module-zlib"], [425, "module-zoneinfo"]], "ne (2to3 fixer)": [[112, "to3fixer-ne"]], "next (2to3 fixer)": [[112, "to3fixer-next"]], "nonzero (2to3 fixer)": [[112, "to3fixer-nonzero"]], "numliterals (2to3 fixer)": [[112, "to3fixer-numliterals"]], "operator (2to3 fixer)": [[112, "to3fixer-operator"]], "paren (2to3 fixer)": [[112, "to3fixer-paren"]], "print (2to3 fixer)": [[112, "to3fixer-print"]], "raise (2to3 fixer)": [[112, "to3fixer-raise"]], "raw_input (2to3 fixer)": [[112, "to3fixer-raw_input"]], "reduce (2to3 fixer)": [[112, "to3fixer-reduce"]], "reload (2to3 fixer)": [[112, "to3fixer-reload"]], "renames (2to3 fixer)": [[112, "to3fixer-renames"]], "repr (2to3 fixer)": [[112, "to3fixer-repr"]], "set_literal (2to3 fixer)": [[112, "to3fixer-set_literal"]], "standarderror (2to3 fixer)": [[112, "to3fixer-standarderror"]], "sys_exc (2to3 fixer)": [[112, "to3fixer-sys_exc"]], "throw (2to3 fixer)": [[112, "to3fixer-throw"]], "tuple_params (2to3 fixer)": [[112, "to3fixer-tuple_params"]], "types (2to3 fixer)": [[112, "to3fixer-types"]], "unicode (2to3 fixer)": [[112, "to3fixer-unicode"]], "urllib (2to3 fixer)": [[112, "to3fixer-urllib"]], "ws_comma (2to3 fixer)": [[112, "to3fixer-ws_comma"]], "xrange (2to3 fixer)": [[112, "to3fixer-xrange"]], "xreadlines (2to3 fixer)": [[112, "to3fixer-xreadlines"]], "zip (2to3 fixer)": [[112, "to3fixer-zip"]], "pep 227": [[113, "index-24"], [463, "index-2"], [464, "index-16"]], "pep 236": [[113, "index-35"], [436, "index-42"], [463, "index-0"], [463, "index-1"], [463, "index-3"]], "pep 255": [[113, "index-25"], [430, "index-26"], [464, "index-8"], [464, "index-9"], [465, "index-1"], [465, "index-2"]], "pep 3105": [[113, "index-29"], [468, "index-10"], [470, "index-0"]], "pep 3112": [[113, "index-30"], [468, "index-12"]], "pep 328": [[113, "index-27"], [225, "index-15"], [250, "index-3"], [432, "index-24"], [466, "index-10"], [466, "index-17"], [467, "index-5"], [467, "index-6"], [470, "index-16"], [476, "index-36"]], "pep 479": [[113, "index-31"], [213, "index-6"], [213, "index-7"], [478, "index-17"], [478, "index-18"], [480, "index-37"], [483, "index-221"], [483, "index-229"], [483, "index-232"], [483, "index-254"], [483, "index-275"], [483, "index-289"]], "pep 563": [[113, "index-32"], [113, "index-33"], [386, "index-34"], [386, "index-37"], [427, "index-39"], [436, "index-41"], [473, "index-102"], [480, "index-2"], [483, "index-100"], [483, "index-133"]], "pep 649": [[113, "index-34"], [429, "index-11"]], "_feature (__future__ \u4e2d\u7684\u985e\u5225)": [[113, "future__._Feature"]], "compiler_flag (__future__._feature \u7684\u5c6c\u6027)": [[113, "future__._Feature.compiler_flag"]], "getmandatoryrelease() (__future__._feature \u7684\u65b9\u6cd5)": [[113, "future__._Feature.getMandatoryRelease"]], "getoptionalrelease() (__future__._feature \u7684\u65b9\u6cd5)": [[113, "future__._Feature.getOptionalRelease"]], "locktype (\u65bc _thread \u6a21\u7d44\u4e2d)": [[115, "thread.LockType"]], "posix": [[115, "index-1"], [306, "module-posix"], [361, "index-0"]], "timeout_max (\u65bc _thread \u6a21\u7d44\u4e2d)": [[115, "thread.TIMEOUT_MAX"]], "acquire() (_thread.lock \u7684\u65b9\u6cd5)": [[115, "thread.lock.acquire"]], "allocate_lock() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[115, "thread.allocate_lock"]], "binary semaphores": [[115, "index-0"]], "error": [[115, "thread.error"], [141, "audioop.error"], [146, "binascii.Error"], [167, "configparser.Error"], [171, "copy.Error"], [175, "csv.Error"], [177, "curses.error"], [184, "dbm.dumb.error"], [184, "dbm.error"], [184, "dbm.gnu.error"], [184, "dbm.ndbm.error"], [228, "getopt.error"], [266, "locale.Error"], [271, "mailbox.Error"], [287, "nis.error"], [293, "os.error"], [314, "xml.parsers.expat.error"], [319, "re.error"], [322, "resource.error"], [328, "select.error"], [332, "shutil.Error"], [337, "socket.error"], [340, "sqlite3.Error"], [347, "struct.error"], [349, "sunau.Error"], [397, "uu.Error"], [401, "wave.Error"], [403, "webbrowser.Error"], [408, "xdrlib.Error"], [424, "zlib.error"]], "exit() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[115, "thread.exit"]], "get_ident() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[115, "thread.get_ident"]], "get_native_id() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[115, "thread.get_native_id"]], "interrupt_main() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[115, "thread.interrupt_main"]], "light-weight processes": [[115, "index-0"]], "locked() (_thread.lock \u7684\u65b9\u6cd5)": [[115, "thread.lock.locked"]], "processes, light-weight": [[115, "index-0"]], "pthreads": [[115, "index-1"]], "release() (_thread.lock \u7684\u65b9\u6cd5)": [[115, "thread.lock.release"]], "semaphores, binary": [[115, "index-0"]], "stack_size() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[115, "thread.stack_size"]], "start_new_thread() (\u65bc _thread \u6a21\u7d44\u4e2d)": [[115, "thread.start_new_thread"]], "threads": [[115, "index-1"]], "abc (abc \u4e2d\u7684\u985e\u5225)": [[116, "abc.ABC"]], "abcmeta (abc \u4e2d\u7684\u985e\u5225)": [[116, "abc.ABCMeta"]], "pep 3141": [[116, "index-5"], [289, "index-2"], [468, "index-19"]], "__subclasshook__() (abc.abcmeta \u7684\u65b9\u6cd5)": [[116, "abc.ABCMeta.__subclasshook__"]], "abc": [[116, "module-abc"]], "abstractclassmethod() (\u65bc abc \u6a21\u7d44\u4e2d)": [[116, "abc.abstractclassmethod"]], "abstractmethod() (\u65bc abc \u6a21\u7d44\u4e2d)": [[116, "abc.abstractmethod"]], "abstractproperty() (\u65bc abc \u6a21\u7d44\u4e2d)": [[116, "abc.abstractproperty"]], "abstractstaticmethod() (\u65bc abc \u6a21\u7d44\u4e2d)": [[116, "abc.abstractstaticmethod"]], "get_cache_token() (\u65bc abc \u6a21\u7d44\u4e2d)": [[116, "abc.get_cache_token"]], "register() (abc.abcmeta \u7684\u65b9\u6cd5)": [[116, "abc.ABCMeta.register"]], "update_abstractmethods() (\u65bc abc \u6a21\u7d44\u4e2d)": [[116, "abc.update_abstractmethods"]], "a-law": [[117, "index-2"], [141, "index-1"], [336, "index-0"]], "aiff": [[117, "index-0"], [153, "index-0"]], "aiff-c": [[117, "index-0"], [153, "index-0"]], "audio interchange file format\uff08\u97f3\u8a0a\u4ea4\u63db\u6a94\u6848\u683c\u5f0f\uff09": [[117, "index-0"], [153, "index-0"]], "g.722": [[117, "index-2"]], "pep 594#aifc": [[117, "index-4"]], "aifc": [[117, "module-aifc"]], "aifc() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.aifc"]], "aiff() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.aiff"]], "close() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.close"]], "getcompname() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.getcompname"]], "getcomptype() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.getcomptype"]], "getframerate() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.getframerate"]], "getmark() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.getmark"]], "getmarkers() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.getmarkers"]], "getnchannels() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.getnchannels"]], "getnframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.getnframes"]], "getparams() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.getparams"]], "getsampwidth() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.getsampwidth"]], "open() (\u65bc aifc \u6a21\u7d44\u4e2d)": [[117, "aifc.open"]], "readframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.readframes"]], "rewind() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.rewind"]], "setcomptype() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.setcomptype"]], "setframerate() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.setframerate"]], "setmark() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.setmark"]], "setnchannels() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.setnchannels"]], "setnframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.setnframes"]], "setparams() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.setparams"]], "setpos() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.setpos"]], "setsampwidth() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.setsampwidth"]], "tell() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.tell"]], "u-law": [[117, "index-2"], [141, "index-1"], [336, "index-0"]], "writeframes() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.writeframes"]], "writeframesraw() (aifc.aifc \u7684\u65b9\u6cd5)": [[117, "aifc.aifc.writeframesraw"]], "* \uff08\u661f\u865f\uff09": [[120, "index-1"], [122, "index-1"], [220, "index-2"], [231, "index-1"], [319, "index-3"], [344, "index-13"], [344, "index-36"], [344, "index-46"], [427, "index-32"], [430, "index-49"], [430, "index-65"], [430, "index-93"], [436, "index-37"], [436, "index-6"], [441, "index-3"]], "+ \uff08\u52a0\u865f\uff09": [[120, "index-2"], [193, "index-4"], [319, "index-4"], [344, "index-13"], [344, "index-37"], [344, "index-47"], [345, "index-4"], [430, "index-61"], [430, "index-69"]], "? \uff08\u554f\u865f\uff09": [[120, "index-0"], [122, "index-0"], [155, "index-0"], [158, "index-1"], [220, "index-2"], [231, "index-1"], [319, "index-5"], [340, "index-6"], [347, "index-2"], [347, "index-3"]], "action (argparse \u4e2d\u7684\u985e\u5225)": [[120, "argparse.Action"]], "argumentdefaultshelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[120, "argparse.ArgumentDefaultsHelpFormatter"]], "argumenterror": [[120, "argparse.ArgumentError"], [176, "ctypes.ArgumentError"]], "argumentparser (argparse \u4e2d\u7684\u985e\u5225)": [[120, "argparse.ArgumentParser"]], "argumenttypeerror": [[120, "argparse.ArgumentTypeError"]], "filetype (argparse \u4e2d\u7684\u985e\u5225)": [[120, "argparse.FileType"]], "metavartypehelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[120, "argparse.MetavarTypeHelpFormatter"]], "namespace (argparse \u4e2d\u7684\u985e\u5225)": [[120, "argparse.Namespace"]], "rawdescriptionhelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[120, "argparse.RawDescriptionHelpFormatter"]], "rawtexthelpformatter (argparse \u4e2d\u7684\u985e\u5225)": [[120, "argparse.RawTextHelpFormatter"]], "add_argument() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[120, "argparse.ArgumentParser.add_argument"]], "add_argument_group() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[120, "argparse.ArgumentParser.add_argument_group"]], "add_mutually_exclusive_group() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[120, "argparse.ArgumentParser.add_mutually_exclusive_group"]], "add_subparsers() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[120, "argparse.ArgumentParser.add_subparsers"]], "argparse": [[120, "module-argparse"]], "convert_arg_line_to_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[120, "argparse.ArgumentParser.convert_arg_line_to_args"]], "error() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[120, "argparse.ArgumentParser.error"]], "exit() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[120, "argparse.ArgumentParser.exit"]], "format_help() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[120, "argparse.ArgumentParser.format_help"]], "format_usage() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[120, "argparse.ArgumentParser.format_usage"]], "get_default() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[120, "argparse.ArgumentParser.get_default"]], "parse_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[120, "argparse.ArgumentParser.parse_args"]], "parse_intermixed_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[120, "argparse.ArgumentParser.parse_intermixed_args"]], "parse_known_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[120, "argparse.ArgumentParser.parse_known_args"]], "parse_known_intermixed_args() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[120, "argparse.ArgumentParser.parse_known_intermixed_args"]], "print_help() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[120, "argparse.ArgumentParser.print_help"]], "print_usage() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[120, "argparse.ArgumentParser.print_usage"]], "set_defaults() (argparse.argumentparser \u7684\u65b9\u6cd5)": [[120, "argparse.ArgumentParser.set_defaults"]], "\u65bc argparse \u6a21\u7d44\u4e2d": [[120, "index-0"], [120, "index-1"], [120, "index-2"]], "append() (array.array \u7684\u65b9\u6cd5)": [[121, "array.array.append"]], "array": [[121, "module-array"]], "array (array \u4e2d\u7684\u985e\u5225)": [[121, "array.array"]], "arrays\uff08\u9663\u5217\uff09": [[121, "index-0"]], "buffer_info() (array.array \u7684\u65b9\u6cd5)": [[121, "array.array.buffer_info"]], "byteswap() (array.array \u7684\u65b9\u6cd5)": [[121, "array.array.byteswap"]], "count() (array.array \u7684\u65b9\u6cd5)": [[121, "array.array.count"]], "extend() (array.array \u7684\u65b9\u6cd5)": [[121, "array.array.extend"]], "frombytes() (array.array \u7684\u65b9\u6cd5)": [[121, "array.array.frombytes"]], "fromfile() (array.array \u7684\u65b9\u6cd5)": [[121, "array.array.fromfile"]], "fromlist() (array.array \u7684\u65b9\u6cd5)": [[121, "array.array.fromlist"]], "fromunicode() (array.array \u7684\u65b9\u6cd5)": [[121, "array.array.fromunicode"]], "index() (array.array \u7684\u65b9\u6cd5)": [[121, "array.array.index"]], "insert() (array.array \u7684\u65b9\u6cd5)": [[121, "array.array.insert"]], "itemsize (array.array \u7684\u5c6c\u6027)": [[121, "array.array.itemsize"]], "pop() (array.array \u7684\u65b9\u6cd5)": [[121, "array.array.pop"]], "remove() (array.array \u7684\u65b9\u6cd5)": [[121, "array.array.remove"]], "reverse() (array.array \u7684\u65b9\u6cd5)": [[121, "array.array.reverse"]], "tobytes() (array.array \u7684\u65b9\u6cd5)": [[121, "array.array.tobytes"]], "tofile() (array.array \u7684\u65b9\u6cd5)": [[121, "array.array.tofile"]], "tolist() (array.array \u7684\u65b9\u6cd5)": [[121, "array.array.tolist"]], "tounicode() (array.array \u7684\u65b9\u6cd5)": [[121, "array.array.tounicode"]], "typecode (array.array \u7684\u5c6c\u6027)": [[121, "array.array.typecode"]], "typecodes (\u65bc array \u6a21\u7d44\u4e2d)": [[121, "array.typecodes"]], "--help": [[122, "cmdoption-ast-h"], [150, "cmdoption-calendar-help"], [191, "cmdoption-dis-h"], [234, "cmdoption-gzip-h"], [262, "cmdoption-json.tool-h"], [340, "cmdoption-python-m-sqlite3-h-v-filename-sql-h"], [367, "cmdoption-timeit-h"], [378, "cmdoption-tokenize-h"], [380, "cmdoption-trace-help"], [398, "cmdoption-uuid-h"], [421, "cmdoption-zipapp-h"], [455, "cmdoption-help"]], "--include-attributes": [[122, "cmdoption-ast-a"]], "--indent": [[122, "cmdoption-ast-indent"], [262, "cmdoption-json.tool-indent"]], "--mode": [[122, "cmdoption-ast-mode"]], "--no-type-comments": [[122, "cmdoption-ast-no-type-comments"]], "-a": [[122, "cmdoption-ast-a"], [300, "cmdoption-pickletools-a"]], "-h": [[122, "cmdoption-ast-h"], [150, "cmdoption-calendar-help"], [191, "cmdoption-dis-h"], [234, "cmdoption-gzip-h"], [262, "cmdoption-json.tool-h"], [340, "cmdoption-python-m-sqlite3-h-v-filename-sql-h"], [367, "cmdoption-timeit-h"], [378, "cmdoption-tokenize-h"], [398, "cmdoption-uuid-h"], [421, "cmdoption-zipapp-h"], [455, "cmdoption-h"]], "-i": [[122, "cmdoption-ast-i"], [163, "cmdoption-compileall-i"], [455, "cmdoption-I"], [455, "cmdoption-i"]], "-m": [[122, "cmdoption-ast-m"], [150, "cmdoption-calendar-months"], [300, "cmdoption-pickletools-m"], [380, "cmdoption-trace-m"], [421, "cmdoption-zipapp-m"], [455, "cmdoption-m"]], "ast (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.AST"]], "add (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Add"]], "and (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.And"]], "annassign (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.AnnAssign"]], "assert (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Assert"]], "assign (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Assign"]], "asyncfor (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.AsyncFor"]], "asyncfunctiondef (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.AsyncFunctionDef"]], "asyncwith (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.AsyncWith"]], "attribute (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Attribute"]], "augassign (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.AugAssign"]], "await (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Await"]], "binop (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.BinOp"]], "bitand (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.BitAnd"]], "bitor (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.BitOr"]], "bitxor (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.BitXor"]], "boolop (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.BoolOp"]], "break (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Break"]], "call (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Call"]], "classdef (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.ClassDef"]], "compare (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Compare"]], "constant (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Constant"]], "continue (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Continue"]], "del (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Del"]], "delete (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Delete"]], "dict (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Dict"]], "dictcomp (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.DictComp"]], "div (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Div"]], "eq (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Eq"]], "excepthandler (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.ExceptHandler"]], "expr (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Expr"]], "expression (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Expression"]], "floordiv (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.FloorDiv"]], "for (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.For"]], "formattedvalue (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.FormattedValue"]], "functiondef (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.FunctionDef"]], "functiontype (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.FunctionType"]], "generatorexp (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.GeneratorExp"]], "global (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Global"]], "gt (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Gt"]], "gte (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.GtE"]], "if (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.If"]], "ifexp (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.IfExp"]], "import (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Import"]], "importfrom (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.ImportFrom"]], "in (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.In"]], "interactive (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Interactive"]], "invert (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Invert"]], "is (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Is"]], "isnot (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.IsNot"]], "joinedstr (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.JoinedStr"]], "lshift (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.LShift"]], "lambda (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Lambda"]], "list (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.List"]], "listcomp (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.ListComp"]], "load (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Load"]], "lt (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Lt"]], "lte (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.LtE"]], "matmult (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.MatMult"]], "match (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Match"]], "matchas (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.MatchAs"]], "matchclass (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.MatchClass"]], "matchmapping (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.MatchMapping"]], "matchor (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.MatchOr"]], "matchsequence (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.MatchSequence"]], "matchsingleton (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.MatchSingleton"]], "matchstar (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.MatchStar"]], "matchvalue (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.MatchValue"]], "mod (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Mod"]], "module (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Module"]], "mult (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Mult"]], "name (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Name"]], "namedexpr (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.NamedExpr"]], "nodetransformer (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.NodeTransformer"]], "nodevisitor (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.NodeVisitor"]], "nonlocal (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Nonlocal"]], "not (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Not"]], "noteq (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.NotEq"]], "notin (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.NotIn"]], "or (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Or"]], "paramspec (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.ParamSpec"]], "pass (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Pass"]], "pow (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Pow"]], "pycf_allow_top_level_await (\u65bc ast \u6a21\u7d44\u4e2d)": [[122, "ast.PyCF_ALLOW_TOP_LEVEL_AWAIT"]], "pycf_only_ast (\u65bc ast \u6a21\u7d44\u4e2d)": [[122, "ast.PyCF_ONLY_AST"]], "pycf_type_comments (\u65bc ast \u6a21\u7d44\u4e2d)": [[122, "ast.PyCF_TYPE_COMMENTS"]], "rshift (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.RShift"]], "raise (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Raise"]], "return (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Return"]], "set (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Set"]], "setcomp (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.SetComp"]], "slice (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Slice"]], "starred (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Starred"]], "store (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Store"]], "sub (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Sub"]], "subscript (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Subscript"]], "try (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Try"]], "trystar (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.TryStar"]], "tuple (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Tuple"]], "typealias (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.TypeAlias"]], "typevar (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.TypeVar"]], "typevartuple (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.TypeVarTuple"]], "uadd (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.UAdd"]], "usub (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.USub"]], "unaryop (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.UnaryOp"]], "while (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.While"]], "with (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.With"]], "yield (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.Yield"]], "yieldfrom (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.YieldFrom"]], "_fields (ast.ast \u7684\u5c6c\u6027)": [[122, "ast.AST._fields"]], "alias (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.alias"]], "arg (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.arg"]], "arguments (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.arguments"]], "ast": [[122, "module-ast"]], "ast \u547d\u4ee4\u5217\u9078\u9805": [[122, "cmdoption-ast-a"], [122, "cmdoption-ast-h"], [122, "cmdoption-ast-i"], [122, "cmdoption-ast-indent"], [122, "cmdoption-ast-m"], [122, "cmdoption-ast-mode"], [122, "cmdoption-ast-no-type-comments"]], "col_offset (ast.ast \u7684\u5c6c\u6027)": [[122, "ast.AST.col_offset"]], "comprehension (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.comprehension"]], "copy_location() (\u65bc ast \u6a21\u7d44\u4e2d)": [[122, "ast.copy_location"]], "dump() (\u65bc ast \u6a21\u7d44\u4e2d)": [[122, "ast.dump"]], "end_col_offset (ast.ast \u7684\u5c6c\u6027)": [[122, "ast.AST.end_col_offset"]], "end_lineno (ast.ast \u7684\u5c6c\u6027)": [[122, "ast.AST.end_lineno"]], "fix_missing_locations() (\u65bc ast \u6a21\u7d44\u4e2d)": [[122, "ast.fix_missing_locations"]], "generic_visit() (ast.nodevisitor \u7684\u65b9\u6cd5)": [[122, "ast.NodeVisitor.generic_visit"]], "get_docstring() (\u65bc ast \u6a21\u7d44\u4e2d)": [[122, "ast.get_docstring"]], "get_source_segment() (\u65bc ast \u6a21\u7d44\u4e2d)": [[122, "ast.get_source_segment"]], "increment_lineno() (\u65bc ast \u6a21\u7d44\u4e2d)": [[122, "ast.increment_lineno"]], "iter_child_nodes() (\u65bc ast \u6a21\u7d44\u4e2d)": [[122, "ast.iter_child_nodes"]], "iter_fields() (\u65bc ast \u6a21\u7d44\u4e2d)": [[122, "ast.iter_fields"]], "keyword (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.keyword"]], "lineno (ast.ast \u7684\u5c6c\u6027)": [[122, "ast.AST.lineno"]], "literal_eval() (\u65bc ast \u6a21\u7d44\u4e2d)": [[122, "ast.literal_eval"]], "match_case (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.match_case"]], "parse() (\u65bc ast \u6a21\u7d44\u4e2d)": [[122, "ast.parse"]], "type_comment (ast.assign \u7684\u5c6c\u6027)": [[122, "ast.Assign.type_comment"]], "type_comment (ast.for \u7684\u5c6c\u6027)": [[122, "ast.For.type_comment"]], "type_comment (ast.functiondef \u7684\u5c6c\u6027)": [[122, "ast.FunctionDef.type_comment"]], "type_comment (ast.with \u7684\u5c6c\u6027)": [[122, "ast.With.type_comment"]], "type_comment (ast.arg \u7684\u5c6c\u6027)": [[122, "ast.arg.type_comment"]], "unparse() (\u65bc ast \u6a21\u7d44\u4e2d)": [[122, "ast.unparse"]], "visit() (ast.nodevisitor \u7684\u65b9\u6cd5)": [[122, "ast.NodeVisitor.visit"]], "visit_constant() (ast.nodevisitor \u7684\u65b9\u6cd5)": [[122, "ast.NodeVisitor.visit_Constant"]], "walk() (\u65bc ast \u6a21\u7d44\u4e2d)": [[122, "ast.walk"]], "withitem (ast \u4e2d\u7684\u985e\u5225)": [[122, "ast.withitem"]], "\u65bc ast \u6587\u6cd5\u4e2d": [[122, "index-0"], [122, "index-1"]], "asyncio": [[123, "module-asyncio"]], "pythonasynciodebug": [[125, "index-2"], [126, "index-5"], [188, "index-5"], [455, "envvar-PYTHONASYNCIODEBUG"]], "abstracteventloop (asyncio \u4e2d\u7684\u985e\u5225)": [[126, "asyncio.AbstractEventLoop"]], "handle (asyncio \u4e2d\u7684\u985e\u5225)": [[126, "asyncio.Handle"]], "pep 567": [[126, "index-0"], [126, "index-1"], [126, "index-2"], [129, "index-2"], [170, "index-2"], [480, "index-28"], [480, "index-30"], [483, "index-224"], [483, "index-228"], [483, "index-233"]], "proactoreventloop (asyncio \u4e2d\u7684\u985e\u5225)": [[126, "asyncio.ProactorEventLoop"]], "rfc 8305": [[126, "index-3"], [126, "index-4"]], "selectoreventloop (asyncio \u4e2d\u7684\u985e\u5225)": [[126, "asyncio.SelectorEventLoop"]], "server (asyncio \u4e2d\u7684\u985e\u5225)": [[126, "asyncio.Server"]], "timerhandle (asyncio \u4e2d\u7684\u985e\u5225)": [[126, "asyncio.TimerHandle"]], "add_reader() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.add_reader"]], "add_signal_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.add_signal_handler"]], "add_writer() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.add_writer"]], "call_at() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.call_at"]], "call_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.call_exception_handler"]], "call_later() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.call_later"]], "call_soon() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.call_soon"]], "call_soon_threadsafe() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.call_soon_threadsafe"]], "cancel() (asyncio.handle \u7684\u65b9\u6cd5)": [[126, "asyncio.Handle.cancel"]], "cancelled() (asyncio.handle \u7684\u65b9\u6cd5)": [[126, "asyncio.Handle.cancelled"]], "close() (asyncio.server \u7684\u65b9\u6cd5)": [[126, "asyncio.Server.close"]], "close() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.close"]], "connect_accepted_socket() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.connect_accepted_socket"]], "connect_read_pipe() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.connect_read_pipe"]], "connect_write_pipe() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.connect_write_pipe"]], "create_connection() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.create_connection"]], "create_datagram_endpoint() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.create_datagram_endpoint"]], "create_future() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.create_future"]], "create_server() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.create_server"]], "create_task() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.create_task"]], "create_unix_connection() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.create_unix_connection"]], "create_unix_server() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.create_unix_server"]], "default_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.default_exception_handler"]], "get_context() (asyncio.handle \u7684\u65b9\u6cd5)": [[126, "asyncio.Handle.get_context"]], "get_debug() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.get_debug"]], "get_event_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[126, "asyncio.get_event_loop"]], "get_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.get_exception_handler"]], "get_loop() (asyncio.server \u7684\u65b9\u6cd5)": [[126, "asyncio.Server.get_loop"]], "get_running_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[126, "asyncio.get_running_loop"]], "get_task_factory() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.get_task_factory"]], "getaddrinfo() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.getaddrinfo"]], "getnameinfo() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.getnameinfo"]], "is_closed() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.is_closed"]], "is_running() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.is_running"]], "is_serving() (asyncio.server \u7684\u65b9\u6cd5)": [[126, "asyncio.Server.is_serving"]], "new_event_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[126, "asyncio.new_event_loop"]], "remove_reader() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.remove_reader"]], "remove_signal_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.remove_signal_handler"]], "remove_writer() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.remove_writer"]], "run_forever() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.run_forever"]], "run_in_executor() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.run_in_executor"]], "run_until_complete() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.run_until_complete"]], "sendfile() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.sendfile"]], "serve_forever() (asyncio.server \u7684\u65b9\u6cd5)": [[126, "asyncio.Server.serve_forever"]], "set_debug() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.set_debug"]], "set_default_executor() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.set_default_executor"]], "set_event_loop() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[126, "asyncio.set_event_loop"]], "set_exception_handler() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.set_exception_handler"]], "set_task_factory() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.set_task_factory"]], "shutdown_asyncgens() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.shutdown_asyncgens"]], "shutdown_default_executor() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.shutdown_default_executor"]], "slow_callback_duration (asyncio.loop \u7684\u5c6c\u6027)": [[126, "asyncio.loop.slow_callback_duration"]], "sock_accept() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.sock_accept"]], "sock_connect() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.sock_connect"]], "sock_recv() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.sock_recv"]], "sock_recv_into() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.sock_recv_into"]], "sock_recvfrom() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.sock_recvfrom"]], "sock_recvfrom_into() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.sock_recvfrom_into"]], "sock_sendall() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.sock_sendall"]], "sock_sendfile() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.sock_sendfile"]], "sock_sendto() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.sock_sendto"]], "sockets (asyncio.server \u7684\u5c6c\u6027)": [[126, "asyncio.Server.sockets"]], "start_serving() (asyncio.server \u7684\u65b9\u6cd5)": [[126, "asyncio.Server.start_serving"]], "start_tls() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.start_tls"]], "stop() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.stop"]], "subprocess_exec() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.subprocess_exec"]], "subprocess_shell() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.subprocess_shell"]], "time() (asyncio.loop \u7684\u65b9\u6cd5)": [[126, "asyncio.loop.time"]], "wait_closed() (asyncio.server \u7684\u65b9\u6cd5)": [[126, "asyncio.Server.wait_closed"]], "when() (asyncio.timerhandle \u7684\u65b9\u6cd5)": [[126, "asyncio.TimerHandle.when"]], "cancellederror": [[127, "asyncio.CancelledError"], [166, "concurrent.futures.CancelledError"]], "incompletereaderror": [[127, "asyncio.IncompleteReadError"]], "invalidstateerror": [[127, "asyncio.InvalidStateError"], [166, "concurrent.futures.InvalidStateError"]], "limitoverrunerror": [[127, "asyncio.LimitOverrunError"]], "sendfilenotavailableerror": [[127, "asyncio.SendfileNotAvailableError"]], "timeouterror": [[127, "asyncio.TimeoutError"], [166, "concurrent.futures.TimeoutError"], [213, "TimeoutError"], [283, "multiprocessing.TimeoutError"]], "consumed (asyncio.limitoverrunerror \u7684\u5c6c\u6027)": [[127, "asyncio.LimitOverrunError.consumed"]], "expected (asyncio.incompletereaderror \u7684\u5c6c\u6027)": [[127, "asyncio.IncompleteReadError.expected"]], "partial (asyncio.incompletereaderror \u7684\u5c6c\u6027)": [[127, "asyncio.IncompleteReadError.partial"]], "__init__() (asyncio.future \u7684\u65b9\u6cd5)": [[128, "asyncio.Future.__init__"]], "__init__() (asyncio.task \u7684\u65b9\u6cd5)": [[128, "asyncio.Task.__init__"]], "_enter_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[128, "asyncio._enter_task"]], "_leave_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[128, "asyncio._leave_task"]], "_register_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[128, "asyncio._register_task"]], "_unregister_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[128, "asyncio._unregister_task"]], "future (asyncio \u4e2d\u7684\u985e\u5225)": [[129, "asyncio.Future"]], "add_done_callback() (asyncio.future \u7684\u65b9\u6cd5)": [[129, "asyncio.Future.add_done_callback"]], "cancel() (asyncio.future \u7684\u65b9\u6cd5)": [[129, "asyncio.Future.cancel"]], "cancelled() (asyncio.future \u7684\u65b9\u6cd5)": [[129, "asyncio.Future.cancelled"]], "done() (asyncio.future \u7684\u65b9\u6cd5)": [[129, "asyncio.Future.done"]], "ensure_future() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[129, "asyncio.ensure_future"]], "exception() (asyncio.future \u7684\u65b9\u6cd5)": [[129, "asyncio.Future.exception"]], "get_loop() (asyncio.future \u7684\u65b9\u6cd5)": [[129, "asyncio.Future.get_loop"]], "isfuture() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[129, "asyncio.isfuture"]], "remove_done_callback() (asyncio.future \u7684\u65b9\u6cd5)": [[129, "asyncio.Future.remove_done_callback"]], "result() (asyncio.future \u7684\u65b9\u6cd5)": [[129, "asyncio.Future.result"]], "set_exception() (asyncio.future \u7684\u65b9\u6cd5)": [[129, "asyncio.Future.set_exception"]], "set_result() (asyncio.future \u7684\u65b9\u6cd5)": [[129, "asyncio.Future.set_result"]], "wrap_future() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[129, "asyncio.wrap_future"]], "abstractchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.AbstractChildWatcher"]], "abstracteventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.AbstractEventLoopPolicy"]], "defaulteventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.DefaultEventLoopPolicy"]], "fastchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.FastChildWatcher"]], "multiloopchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.MultiLoopChildWatcher"]], "pidfdchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.PidfdChildWatcher"]], "safechildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.SafeChildWatcher"]], "threadedchildwatcher (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.ThreadedChildWatcher"]], "windowsproactoreventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.WindowsProactorEventLoopPolicy"]], "windowsselectoreventlooppolicy (asyncio \u4e2d\u7684\u985e\u5225)": [[132, "asyncio.WindowsSelectorEventLoopPolicy"]], "add_child_handler() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[132, "asyncio.AbstractChildWatcher.add_child_handler"]], "attach_loop() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[132, "asyncio.AbstractChildWatcher.attach_loop"]], "close() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[132, "asyncio.AbstractChildWatcher.close"]], "get_child_watcher() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[132, "asyncio.AbstractEventLoopPolicy.get_child_watcher"]], "get_child_watcher() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[132, "asyncio.get_child_watcher"]], "get_event_loop() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[132, "asyncio.AbstractEventLoopPolicy.get_event_loop"]], "get_event_loop_policy() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[132, "asyncio.get_event_loop_policy"]], "is_active() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[132, "asyncio.AbstractChildWatcher.is_active"]], "new_event_loop() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[132, "asyncio.AbstractEventLoopPolicy.new_event_loop"]], "remove_child_handler() (asyncio.abstractchildwatcher \u7684\u65b9\u6cd5)": [[132, "asyncio.AbstractChildWatcher.remove_child_handler"]], "set_child_watcher() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[132, "asyncio.AbstractEventLoopPolicy.set_child_watcher"]], "set_child_watcher() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[132, "asyncio.set_child_watcher"]], "set_event_loop() (asyncio.abstracteventlooppolicy \u7684\u65b9\u6cd5)": [[132, "asyncio.AbstractEventLoopPolicy.set_event_loop"]], "set_event_loop_policy() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[132, "asyncio.set_event_loop_policy"]], "baseprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.BaseProtocol"]], "basetransport (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.BaseTransport"]], "bufferedprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.BufferedProtocol"]], "datagramprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.DatagramProtocol"]], "datagramtransport (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.DatagramTransport"]], "protocol (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.Protocol"]], "readtransport (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.ReadTransport"]], "subprocessprotocol (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.SubprocessProtocol"]], "subprocesstransport (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.SubprocessTransport"]], "transport (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.Transport"]], "writetransport (asyncio \u4e2d\u7684\u985e\u5225)": [[133, "asyncio.WriteTransport"]], "abort() (asyncio.datagramtransport \u7684\u65b9\u6cd5)": [[133, "asyncio.DatagramTransport.abort"]], "abort() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[133, "asyncio.WriteTransport.abort"]], "buffer_updated() (asyncio.bufferedprotocol \u7684\u65b9\u6cd5)": [[133, "asyncio.BufferedProtocol.buffer_updated"]], "can_write_eof() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[133, "asyncio.WriteTransport.can_write_eof"]], "close() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[133, "asyncio.BaseTransport.close"]], "close() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[133, "asyncio.SubprocessTransport.close"]], "connection_lost() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[133, "asyncio.BaseProtocol.connection_lost"]], "connection_made() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[133, "asyncio.BaseProtocol.connection_made"]], "data_received() (asyncio.protocol \u7684\u65b9\u6cd5)": [[133, "asyncio.Protocol.data_received"]], "datagram_received() (asyncio.datagramprotocol \u7684\u65b9\u6cd5)": [[133, "asyncio.DatagramProtocol.datagram_received"]], "eof_received() (asyncio.bufferedprotocol \u7684\u65b9\u6cd5)": [[133, "asyncio.BufferedProtocol.eof_received"]], "eof_received() (asyncio.protocol \u7684\u65b9\u6cd5)": [[133, "asyncio.Protocol.eof_received"]], "error_received() (asyncio.datagramprotocol \u7684\u65b9\u6cd5)": [[133, "asyncio.DatagramProtocol.error_received"]], "get_buffer() (asyncio.bufferedprotocol \u7684\u65b9\u6cd5)": [[133, "asyncio.BufferedProtocol.get_buffer"]], "get_extra_info() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[133, "asyncio.BaseTransport.get_extra_info"]], "get_pid() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[133, "asyncio.SubprocessTransport.get_pid"]], "get_pipe_transport() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[133, "asyncio.SubprocessTransport.get_pipe_transport"]], "get_protocol() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[133, "asyncio.BaseTransport.get_protocol"]], "get_returncode() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[133, "asyncio.SubprocessTransport.get_returncode"]], "get_write_buffer_limits() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[133, "asyncio.WriteTransport.get_write_buffer_limits"]], "get_write_buffer_size() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[133, "asyncio.WriteTransport.get_write_buffer_size"]], "is_closing() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[133, "asyncio.BaseTransport.is_closing"]], "is_reading() (asyncio.readtransport \u7684\u65b9\u6cd5)": [[133, "asyncio.ReadTransport.is_reading"]], "kill() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[133, "asyncio.SubprocessTransport.kill"]], "pause_reading() (asyncio.readtransport \u7684\u65b9\u6cd5)": [[133, "asyncio.ReadTransport.pause_reading"]], "pause_writing() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[133, "asyncio.BaseProtocol.pause_writing"]], "pipe_connection_lost() (asyncio.subprocessprotocol \u7684\u65b9\u6cd5)": [[133, "asyncio.SubprocessProtocol.pipe_connection_lost"]], "pipe_data_received() (asyncio.subprocessprotocol \u7684\u65b9\u6cd5)": [[133, "asyncio.SubprocessProtocol.pipe_data_received"]], "process_exited() (asyncio.subprocessprotocol \u7684\u65b9\u6cd5)": [[133, "asyncio.SubprocessProtocol.process_exited"]], "resume_reading() (asyncio.readtransport \u7684\u65b9\u6cd5)": [[133, "asyncio.ReadTransport.resume_reading"]], "resume_writing() (asyncio.baseprotocol \u7684\u65b9\u6cd5)": [[133, "asyncio.BaseProtocol.resume_writing"]], "send_signal() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[133, "asyncio.SubprocessTransport.send_signal"]], "sendto() (asyncio.datagramtransport \u7684\u65b9\u6cd5)": [[133, "asyncio.DatagramTransport.sendto"]], "set_protocol() (asyncio.basetransport \u7684\u65b9\u6cd5)": [[133, "asyncio.BaseTransport.set_protocol"]], "set_write_buffer_limits() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[133, "asyncio.WriteTransport.set_write_buffer_limits"]], "terminate() (asyncio.subprocesstransport \u7684\u65b9\u6cd5)": [[133, "asyncio.SubprocessTransport.terminate"]], "write() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[133, "asyncio.WriteTransport.write"]], "write_eof() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[133, "asyncio.WriteTransport.write_eof"]], "writelines() (asyncio.writetransport \u7684\u65b9\u6cd5)": [[133, "asyncio.WriteTransport.writelines"]], "lifoqueue (asyncio \u4e2d\u7684\u985e\u5225)": [[134, "asyncio.LifoQueue"]], "priorityqueue (asyncio \u4e2d\u7684\u985e\u5225)": [[134, "asyncio.PriorityQueue"]], "queue (asyncio \u4e2d\u7684\u985e\u5225)": [[134, "asyncio.Queue"]], "queueempty": [[134, "asyncio.QueueEmpty"]], "queuefull": [[134, "asyncio.QueueFull"]], "empty() (asyncio.queue \u7684\u65b9\u6cd5)": [[134, "asyncio.Queue.empty"]], "full() (asyncio.queue \u7684\u65b9\u6cd5)": [[134, "asyncio.Queue.full"]], "get() (asyncio.queue \u7684\u65b9\u6cd5)": [[134, "asyncio.Queue.get"]], "get_nowait() (asyncio.queue \u7684\u65b9\u6cd5)": [[134, "asyncio.Queue.get_nowait"]], "join() (asyncio.queue \u7684\u65b9\u6cd5)": [[134, "asyncio.Queue.join"]], "maxsize (asyncio.queue \u7684\u5c6c\u6027)": [[134, "asyncio.Queue.maxsize"]], "put() (asyncio.queue \u7684\u65b9\u6cd5)": [[134, "asyncio.Queue.put"]], "put_nowait() (asyncio.queue \u7684\u65b9\u6cd5)": [[134, "asyncio.Queue.put_nowait"]], "qsize() (asyncio.queue \u7684\u65b9\u6cd5)": [[134, "asyncio.Queue.qsize"]], "task_done() (asyncio.queue \u7684\u65b9\u6cd5)": [[134, "asyncio.Queue.task_done"]], "runner (asyncio \u4e2d\u7684\u985e\u5225)": [[135, "asyncio.Runner"]], "close() (asyncio.runner \u7684\u65b9\u6cd5)": [[135, "asyncio.Runner.close"]], "get_loop() (asyncio.runner \u7684\u65b9\u6cd5)": [[135, "asyncio.Runner.get_loop"]], "run() (asyncio.runner \u7684\u65b9\u6cd5)": [[135, "asyncio.Runner.run"]], "run() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[135, "asyncio.run"]], "streamreader (asyncio \u4e2d\u7684\u985e\u5225)": [[136, "asyncio.StreamReader"]], "streamwriter (asyncio \u4e2d\u7684\u985e\u5225)": [[136, "asyncio.StreamWriter"]], "at_eof() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[136, "asyncio.StreamReader.at_eof"]], "can_write_eof() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[136, "asyncio.StreamWriter.can_write_eof"]], "close() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[136, "asyncio.StreamWriter.close"]], "drain() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[136, "asyncio.StreamWriter.drain"]], "feed_eof() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[136, "asyncio.StreamReader.feed_eof"]], "get_extra_info() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[136, "asyncio.StreamWriter.get_extra_info"]], "is_closing() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[136, "asyncio.StreamWriter.is_closing"]], "open_connection() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.open_connection"]], "open_unix_connection() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.open_unix_connection"]], "read() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[136, "asyncio.StreamReader.read"]], "readexactly() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[136, "asyncio.StreamReader.readexactly"]], "readline() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[136, "asyncio.StreamReader.readline"]], "readuntil() (asyncio.streamreader \u7684\u65b9\u6cd5)": [[136, "asyncio.StreamReader.readuntil"]], "start_server() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.start_server"]], "start_tls() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[136, "asyncio.StreamWriter.start_tls"]], "start_unix_server() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[136, "asyncio.start_unix_server"]], "transport (asyncio.streamwriter \u7684\u5c6c\u6027)": [[136, "asyncio.StreamWriter.transport"]], "wait_closed() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[136, "asyncio.StreamWriter.wait_closed"]], "write() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[136, "asyncio.StreamWriter.write"]], "write_eof() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[136, "asyncio.StreamWriter.write_eof"]], "writelines() (asyncio.streamwriter \u7684\u65b9\u6cd5)": [[136, "asyncio.StreamWriter.writelines"]], "asyncio.subprocess.devnull (\u5167\u5efa\u8b8a\u6578)": [[137, "asyncio.subprocess.DEVNULL"]], "asyncio.subprocess.pipe (\u5167\u5efa\u8b8a\u6578)": [[137, "asyncio.subprocess.PIPE"]], "asyncio.subprocess.process (\u5167\u5efa\u985e\u5225)": [[137, "asyncio.subprocess.Process"]], "asyncio.subprocess.stdout (\u5167\u5efa\u8b8a\u6578)": [[137, "asyncio.subprocess.STDOUT"]], "communicate() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[137, "asyncio.subprocess.Process.communicate"]], "create_subprocess_exec() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.create_subprocess_exec"]], "create_subprocess_shell() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[137, "asyncio.create_subprocess_shell"]], "kill() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[137, "asyncio.subprocess.Process.kill"]], "pid (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[137, "asyncio.subprocess.Process.pid"]], "returncode (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[137, "asyncio.subprocess.Process.returncode"]], "send_signal() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[137, "asyncio.subprocess.Process.send_signal"]], "stderr (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[137, "asyncio.subprocess.Process.stderr"]], "stdin (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[137, "asyncio.subprocess.Process.stdin"]], "stdout (asyncio.subprocess.process \u7684\u5c6c\u6027)": [[137, "asyncio.subprocess.Process.stdout"]], "terminate() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[137, "asyncio.subprocess.Process.terminate"]], "wait() (asyncio.subprocess.process \u7684\u65b9\u6cd5)": [[137, "asyncio.subprocess.Process.wait"]], "barrier (asyncio \u4e2d\u7684\u985e\u5225)": [[138, "asyncio.Barrier"]], "boundedsemaphore (asyncio \u4e2d\u7684\u985e\u5225)": [[138, "asyncio.BoundedSemaphore"]], "brokenbarriererror": [[138, "asyncio.BrokenBarrierError"], [365, "threading.BrokenBarrierError"]], "condition (asyncio \u4e2d\u7684\u985e\u5225)": [[138, "asyncio.Condition"]], "event (asyncio \u4e2d\u7684\u985e\u5225)": [[138, "asyncio.Event"]], "lock (asyncio \u4e2d\u7684\u985e\u5225)": [[138, "asyncio.Lock"]], "semaphore (asyncio \u4e2d\u7684\u985e\u5225)": [[138, "asyncio.Semaphore"]], "abort() (asyncio.barrier \u7684\u65b9\u6cd5)": [[138, "asyncio.Barrier.abort"]], "acquire() (asyncio.condition \u7684\u65b9\u6cd5)": [[138, "asyncio.Condition.acquire"]], "acquire() (asyncio.lock \u7684\u65b9\u6cd5)": [[138, "asyncio.Lock.acquire"]], "acquire() (asyncio.semaphore \u7684\u65b9\u6cd5)": [[138, "asyncio.Semaphore.acquire"]], "broken (asyncio.barrier \u7684\u5c6c\u6027)": [[138, "asyncio.Barrier.broken"]], "clear() (asyncio.event \u7684\u65b9\u6cd5)": [[138, "asyncio.Event.clear"]], "is_set() (asyncio.event \u7684\u65b9\u6cd5)": [[138, "asyncio.Event.is_set"]], "locked() (asyncio.condition \u7684\u65b9\u6cd5)": [[138, "asyncio.Condition.locked"]], "locked() (asyncio.lock \u7684\u65b9\u6cd5)": [[138, "asyncio.Lock.locked"]], "locked() (asyncio.semaphore \u7684\u65b9\u6cd5)": [[138, "asyncio.Semaphore.locked"]], "n_waiting (asyncio.barrier \u7684\u5c6c\u6027)": [[138, "asyncio.Barrier.n_waiting"]], "notify() (asyncio.condition \u7684\u65b9\u6cd5)": [[138, "asyncio.Condition.notify"]], "notify_all() (asyncio.condition \u7684\u65b9\u6cd5)": [[138, "asyncio.Condition.notify_all"]], "parties (asyncio.barrier \u7684\u5c6c\u6027)": [[138, "asyncio.Barrier.parties"]], "release() (asyncio.condition \u7684\u65b9\u6cd5)": [[138, "asyncio.Condition.release"]], "release() (asyncio.lock \u7684\u65b9\u6cd5)": [[138, "asyncio.Lock.release"]], "release() (asyncio.semaphore \u7684\u65b9\u6cd5)": [[138, "asyncio.Semaphore.release"]], "reset() (asyncio.barrier \u7684\u65b9\u6cd5)": [[138, "asyncio.Barrier.reset"]], "set() (asyncio.event \u7684\u65b9\u6cd5)": [[138, "asyncio.Event.set"]], "wait() (asyncio.barrier \u7684\u65b9\u6cd5)": [[138, "asyncio.Barrier.wait"]], "wait() (asyncio.condition \u7684\u65b9\u6cd5)": [[138, "asyncio.Condition.wait"]], "wait() (asyncio.event \u7684\u65b9\u6cd5)": [[138, "asyncio.Event.wait"]], "wait_for() (asyncio.condition \u7684\u65b9\u6cd5)": [[138, "asyncio.Condition.wait_for"]], "all_completed (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[139, "asyncio.ALL_COMPLETED"]], "first_completed (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[139, "asyncio.FIRST_COMPLETED"]], "first_exception (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[139, "asyncio.FIRST_EXCEPTION"]], "task (asyncio \u4e2d\u7684\u985e\u5225)": [[139, "asyncio.Task"]], "taskgroup (asyncio \u4e2d\u7684\u985e\u5225)": [[139, "asyncio.TaskGroup"]], "timeout (asyncio \u4e2d\u7684\u985e\u5225)": [[139, "asyncio.Timeout"]], "add_done_callback() (asyncio.task \u7684\u65b9\u6cd5)": [[139, "asyncio.Task.add_done_callback"]], "all_tasks() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[139, "asyncio.all_tasks"]], "as_completed() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[139, "asyncio.as_completed"]], "cancel() (asyncio.task \u7684\u65b9\u6cd5)": [[139, "asyncio.Task.cancel"]], "cancelled() (asyncio.task \u7684\u65b9\u6cd5)": [[139, "asyncio.Task.cancelled"]], "cancelling() (asyncio.task \u7684\u65b9\u6cd5)": [[139, "asyncio.Task.cancelling"]], "create_eager_task_factory() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[139, "asyncio.create_eager_task_factory"]], "create_task() (asyncio.taskgroup \u7684\u65b9\u6cd5)": [[139, "asyncio.TaskGroup.create_task"]], "create_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[139, "asyncio.create_task"]], "current_task() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[139, "asyncio.current_task"]], "done() (asyncio.task \u7684\u65b9\u6cd5)": [[139, "asyncio.Task.done"]], "eager_task_factory() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[139, "asyncio.eager_task_factory"]], "exception() (asyncio.task \u7684\u65b9\u6cd5)": [[139, "asyncio.Task.exception"]], "expired() (asyncio.timeout \u7684\u65b9\u6cd5)": [[139, "asyncio.Timeout.expired"]], "gather() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[139, "asyncio.gather"]], "get_context() (asyncio.task \u7684\u65b9\u6cd5)": [[139, "asyncio.Task.get_context"]], "get_coro() (asyncio.task \u7684\u65b9\u6cd5)": [[139, "asyncio.Task.get_coro"]], "get_name() (asyncio.task \u7684\u65b9\u6cd5)": [[139, "asyncio.Task.get_name"]], "get_stack() (asyncio.task \u7684\u65b9\u6cd5)": [[139, "asyncio.Task.get_stack"]], "iscoroutine() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[139, "asyncio.iscoroutine"]], "print_stack() (asyncio.task \u7684\u65b9\u6cd5)": [[139, "asyncio.Task.print_stack"]], "remove_done_callback() (asyncio.task \u7684\u65b9\u6cd5)": [[139, "asyncio.Task.remove_done_callback"]], "reschedule() (asyncio.timeout \u7684\u65b9\u6cd5)": [[139, "asyncio.Timeout.reschedule"]], "result() (asyncio.task \u7684\u65b9\u6cd5)": [[139, "asyncio.Task.result"]], "run_coroutine_threadsafe() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[139, "asyncio.run_coroutine_threadsafe"]], "set_name() (asyncio.task \u7684\u65b9\u6cd5)": [[139, "asyncio.Task.set_name"]], "shield() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[139, "asyncio.shield"]], "sleep() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[139, "asyncio.sleep"]], "timeout() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[139, "asyncio.timeout"]], "timeout_at() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[139, "asyncio.timeout_at"]], "to_thread() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[139, "asyncio.to_thread"]], "uncancel() (asyncio.task \u7684\u65b9\u6cd5)": [[139, "asyncio.Task.uncancel"]], "wait() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[139, "asyncio.wait"]], "wait_for() (\u65bc asyncio \u6a21\u7d44\u4e2d)": [[139, "asyncio.wait_for"]], "when() (asyncio.timeout \u7684\u65b9\u6cd5)": [[139, "asyncio.Timeout.when"]], "atexit": [[140, "module-atexit"]], "register() (\u65bc atexit \u6a21\u7d44\u4e2d)": [[140, "atexit.register"]], "unregister() (\u65bc atexit \u6a21\u7d44\u4e2d)": [[140, "atexit.unregister"]], "adpcm, intel/dvi": [[141, "index-1"]], "intel/dvi adpcm": [[141, "index-1"]], "pep 594#audioop": [[141, "index-3"]], "add() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.add"]], "adpcm2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.adpcm2lin"]], "alaw2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.alaw2lin"]], "audioop": [[141, "module-audioop"]], "avg() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.avg"]], "avgpp() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.avgpp"]], "bias() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.bias"]], "byteswap() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.byteswap"]], "cross() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.cross"]], "findfactor() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.findfactor"]], "findfit() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.findfit"]], "findmax() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.findmax"]], "getsample() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.getsample"]], "lin2adpcm() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.lin2adpcm"]], "lin2alaw() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.lin2alaw"]], "lin2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.lin2lin"]], "lin2ulaw() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.lin2ulaw"]], "max() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.max"]], "maxpp() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.maxpp"]], "minmax() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.minmax"]], "mul() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.mul"]], "ratecv() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.ratecv"]], "reverse() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.reverse"]], "rms() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.rms"]], "tomono() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.tomono"]], "tostereo() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.tostereo"]], "ulaw2lin() (\u65bc audioop \u6a21\u7d44\u4e2d)": [[141, "audioop.ulaw2lin"]], "audit events\uff08\u7a3d\u6838\u4e8b\u4ef6\uff09": [[142, "index-0"]], "mime": [[143, "index-0"], [151, "index-0"], [276, "index-0"], [276, "index-1"], [317, "index-0"]], "rfc 1521": [[143, "index-12"], [317, "index-11"], [317, "index-9"]], "rfc 2045": [[143, "index-10"], [143, "index-4"], [143, "index-5"], [143, "index-9"], [194, "index-3"], [196, "index-4"], [196, "index-5"], [196, "index-6"], [196, "index-9"], [202, "index-4"], [203, "index-10"], [203, "index-9"], [205, "index-6"], [205, "index-7"], [205, "index-8"]], "rfc 4648": [[143, "index-11"], [143, "index-15"], [143, "index-16"], [143, "index-3"], [143, "index-6"], [143, "index-7"], [143, "index-8"], [327, "index-5"], [483, "index-92"]], "a85decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.a85decode"]], "a85encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.a85encode"]], "b16decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b16decode"]], "b16encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b16encode"]], "b32decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b32decode"]], "b32encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b32encode"]], "b32hexdecode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b32hexdecode"]], "b32hexencode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b32hexencode"]], "b64decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b64decode"]], "b64encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b64encode"]], "b85decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b85decode"]], "b85encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.b85encode"]], "base64": [[143, "index-0"], [143, "module-base64"], [146, "index-0"]], "base64 encoding\uff08base64 \u7de8\u78bc\uff09": [[143, "index-0"]], "decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.decode"]], "decodebytes() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.decodebytes"]], "encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.encode"]], "encodebytes() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.encodebytes"]], "encoding\uff08\u7de8\u78bc\uff09": [[143, "index-0"], [317, "index-0"]], "standard_b64decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.standard_b64decode"]], "standard_b64encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.standard_b64encode"]], "urlsafe_b64decode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.urlsafe_b64decode"]], "urlsafe_b64encode() (\u65bc base64 \u6a21\u7d44\u4e2d)": [[143, "base64.urlsafe_b64encode"]], "bdb (bdb \u4e2d\u7684\u985e\u5225)": [[144, "bdb.Bdb"]], "bdbquit": [[144, "bdb.BdbQuit"]], "breakpoint (bdb \u4e2d\u7684\u985e\u5225)": [[144, "bdb.Breakpoint"]], "bdb": [[144, "module-bdb"], [297, "index-1"]], "bpbynumber (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.bpbynumber"]], "bpformat() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[144, "bdb.Breakpoint.bpformat"]], "bplist (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.bplist"]], "bpprint() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[144, "bdb.Breakpoint.bpprint"]], "break_anywhere() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.break_anywhere"]], "break_here() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.break_here"]], "canonic() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.canonic"]], "checkfuncname() (\u65bc bdb \u6a21\u7d44\u4e2d)": [[144, "bdb.checkfuncname"]], "clear_all_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.clear_all_breaks"]], "clear_all_file_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.clear_all_file_breaks"]], "clear_bpbynumber() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.clear_bpbynumber"]], "clear_break() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.clear_break"]], "cond (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.cond"]], "deleteme() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[144, "bdb.Breakpoint.deleteMe"]], "disable() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[144, "bdb.Breakpoint.disable"]], "dispatch_call() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.dispatch_call"]], "dispatch_exception() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.dispatch_exception"]], "dispatch_line() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.dispatch_line"]], "dispatch_return() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.dispatch_return"]], "do_clear() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.do_clear"]], "effective() (\u65bc bdb \u6a21\u7d44\u4e2d)": [[144, "bdb.effective"]], "enable() (bdb.breakpoint \u7684\u65b9\u6cd5)": [[144, "bdb.Breakpoint.enable"]], "enabled (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.enabled"]], "file (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.file"]], "format_stack_entry() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.format_stack_entry"]], "funcname (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.funcname"]], "get_all_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.get_all_breaks"]], "get_bpbynumber() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.get_bpbynumber"]], "get_break() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.get_break"]], "get_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.get_breaks"]], "get_file_breaks() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.get_file_breaks"]], "get_stack() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.get_stack"]], "hits (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.hits"]], "ignore (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.ignore"]], "is_skipped_line() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.is_skipped_line"]], "line (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.line"]], "quitting (bdb.bdb attribute)": [[144, "index-0"]], "reset() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.reset"]], "run() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.run"]], "runcall() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.runcall"]], "runctx() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.runctx"]], "runeval() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.runeval"]], "set_break() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.set_break"]], "set_continue() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.set_continue"]], "set_next() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.set_next"]], "set_quit() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.set_quit"]], "set_return() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.set_return"]], "set_step() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.set_step"]], "set_trace() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.set_trace"]], "set_trace() (\u65bc bdb \u6a21\u7d44\u4e2d)": [[144, "bdb.set_trace"]], "set_until() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.set_until"]], "stop_here() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.stop_here"]], "temporary (bdb.breakpoint \u7684\u5c6c\u6027)": [[144, "bdb.Breakpoint.temporary"]], "trace_dispatch() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.trace_dispatch"]], "user_call() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.user_call"]], "user_exception() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.user_exception"]], "user_line() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.user_line"]], "user_return() (bdb.bdb \u7684\u65b9\u6cd5)": [[144, "bdb.Bdb.user_return"]], "incomplete": [[146, "binascii.Incomplete"]], "rfc 1522": [[146, "index-3"], [317, "index-10"], [317, "index-12"]], "rfc 3548": [[146, "index-1"], [146, "index-2"], [466, "index-18"]], "a2b_base64() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.a2b_base64"]], "a2b_hex() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.a2b_hex"]], "a2b_qp() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.a2b_qp"]], "a2b_uu() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.a2b_uu"]], "b2a_base64() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.b2a_base64"]], "b2a_hex() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.b2a_hex"]], "b2a_qp() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.b2a_qp"]], "b2a_uu() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.b2a_uu"]], "binascii": [[146, "module-binascii"]], "crc32() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.crc32"]], "crc_hqx() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.crc_hqx"]], "hexlify() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.hexlify"]], "unhexlify() (\u65bc binascii \u6a21\u7d44\u4e2d)": [[146, "binascii.unhexlify"]], "uu": [[146, "index-0"], [397, "module-uu"]], "bisect": [[147, "module-bisect"]], "bisect() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[147, "bisect.bisect"]], "bisect_left() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[147, "bisect.bisect_left"]], "bisect_right() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[147, "bisect.bisect_right"]], "insort() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[147, "bisect.insort"]], "insort_left() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[147, "bisect.insort_left"]], "insort_right() (\u65bc bisect \u6a21\u7d44\u4e2d)": [[147, "bisect.insort_right"]], "builtins": [[148, "module-builtins"]], "bz2compressor (bz2 \u4e2d\u7684\u985e\u5225)": [[149, "bz2.BZ2Compressor"]], "bz2decompressor (bz2 \u4e2d\u7684\u985e\u5225)": [[149, "bz2.BZ2Decompressor"]], "bz2file (bz2 \u4e2d\u7684\u985e\u5225)": [[149, "bz2.BZ2File"]], "bz2": [[149, "module-bz2"]], "compress() (bz2.bz2compressor \u7684\u65b9\u6cd5)": [[149, "bz2.BZ2Compressor.compress"]], "compress() (\u65bc bz2 \u6a21\u7d44\u4e2d)": [[149, "bz2.compress"]], "decompress() (bz2.bz2decompressor \u7684\u65b9\u6cd5)": [[149, "bz2.BZ2Decompressor.decompress"]], "decompress() (\u65bc bz2 \u6a21\u7d44\u4e2d)": [[149, "bz2.decompress"]], "eof (bz2.bz2decompressor \u7684\u5c6c\u6027)": [[149, "bz2.BZ2Decompressor.eof"]], "fileno() (bz2.bz2file \u7684\u65b9\u6cd5)": [[149, "bz2.BZ2File.fileno"]], "flush() (bz2.bz2compressor \u7684\u65b9\u6cd5)": [[149, "bz2.BZ2Compressor.flush"]], "needs_input (bz2.bz2decompressor \u7684\u5c6c\u6027)": [[149, "bz2.BZ2Decompressor.needs_input"]], "open() (\u65bc bz2 \u6a21\u7d44\u4e2d)": [[149, "bz2.open"]], "peek() (bz2.bz2file \u7684\u65b9\u6cd5)": [[149, "bz2.BZ2File.peek"]], "read1() (bz2.bz2file \u7684\u65b9\u6cd5)": [[149, "bz2.BZ2File.read1"]], "readable() (bz2.bz2file \u7684\u65b9\u6cd5)": [[149, "bz2.BZ2File.readable"]], "readinto() (bz2.bz2file \u7684\u65b9\u6cd5)": [[149, "bz2.BZ2File.readinto"]], "seekable() (bz2.bz2file \u7684\u65b9\u6cd5)": [[149, "bz2.BZ2File.seekable"]], "unused_data (bz2.bz2decompressor \u7684\u5c6c\u6027)": [[149, "bz2.BZ2Decompressor.unused_data"]], "writable() (bz2.bz2file \u7684\u65b9\u6cd5)": [[149, "bz2.BZ2File.writable"]], "--css": [[150, "cmdoption-calendar-css"]], "--encoding": [[150, "cmdoption-calendar-encoding"]], "--lines": [[150, "cmdoption-calendar-lines"]], "--locale": [[150, "cmdoption-calendar-locale"]], "--months": [[150, "cmdoption-calendar-months"]], "--spacing": [[150, "cmdoption-calendar-spacing"]], "--type": [[150, "cmdoption-calendar-type"]], "--width": [[150, "cmdoption-calendar-width"]], "-l": [[150, "cmdoption-calendar-locale"], [150, "cmdoption-calendar-lines"], [163, "cmdoption-compileall-l"], [300, "cmdoption-pickletools-l"], [358, "cmdoption-tarfile-l"], [380, "cmdoption-trace-l"], [422, "cmdoption-zipfile-l"]], "-c": [[150, "cmdoption-calendar-css"], [358, "cmdoption-tarfile-c"], [380, "cmdoption-trace-C"], [380, "cmdoption-trace-c"], [388, "cmdoption-unittest-c"], [421, "cmdoption-zipapp-c"], [422, "cmdoption-zipfile-c"], [455, "cmdoption-c"]], "-e": [[150, "cmdoption-calendar-encoding"], [163, "cmdoption-compileall-e"], [358, "cmdoption-tarfile-e"], [378, "cmdoption-tokenize-e"], [422, "cmdoption-zipfile-e"], [455, "cmdoption-E"]], "-s": [[150, "cmdoption-calendar-spacing"], [163, "cmdoption-compileall-s"], [367, "cmdoption-timeit-s"], [380, "cmdoption-trace-s"], [388, "cmdoption-unittest-discover-s"], [455, "cmdoption-S"], [455, "cmdoption-s"]], "-t": [[150, "cmdoption-calendar-type"], [358, "cmdoption-tarfile-t"], [380, "cmdoption-trace-T"], [380, "cmdoption-trace-t"], [388, "cmdoption-unittest-discover-t"], [422, "cmdoption-zipfile-t"]], "-w": [[150, "cmdoption-calendar-width"], [455, "cmdoption-W"]], "april (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.APRIL"]], "august (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.AUGUST"]], "calendar (calendar \u4e2d\u7684\u985e\u5225)": [[150, "calendar.Calendar"]], "december (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.DECEMBER"]], "day (calendar \u4e2d\u7684\u985e\u5225)": [[150, "calendar.Day"]], "february (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.FEBRUARY"]], "friday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.FRIDAY"]], "htmlcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[150, "calendar.HTMLCalendar"]], "illegalmontherror": [[150, "calendar.IllegalMonthError"]], "illegalweekdayerror": [[150, "calendar.IllegalWeekdayError"]], "january (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.JANUARY"]], "july (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.JULY"]], "june (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.JUNE"]], "localehtmlcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[150, "calendar.LocaleHTMLCalendar"]], "localetextcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[150, "calendar.LocaleTextCalendar"]], "march (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.MARCH"]], "may (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.MAY"]], "monday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.MONDAY"]], "month (calendar \u4e2d\u7684\u985e\u5225)": [[150, "calendar.Month"]], "november (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.NOVEMBER"]], "october (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.OCTOBER"]], "saturday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.SATURDAY"]], "september (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.SEPTEMBER"]], "sunday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.SUNDAY"]], "thursday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.THURSDAY"]], "tuesday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.TUESDAY"]], "textcalendar (calendar \u4e2d\u7684\u985e\u5225)": [[150, "calendar.TextCalendar"]], "wednesday (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.WEDNESDAY"]], "calendar": [[150, "module-calendar"]], "calendar \u547d\u4ee4\u5217\u9078\u9805": [[150, "cmdoption-calendar-arg-month"], [150, "cmdoption-calendar-arg-year"], [150, "cmdoption-calendar-css"], [150, "cmdoption-calendar-encoding"], [150, "cmdoption-calendar-help"], [150, "cmdoption-calendar-lines"], [150, "cmdoption-calendar-locale"], [150, "cmdoption-calendar-months"], [150, "cmdoption-calendar-spacing"], [150, "cmdoption-calendar-type"], [150, "cmdoption-calendar-width"]], "calendar() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.calendar"]], "cssclass_month (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[150, "calendar.HTMLCalendar.cssclass_month"]], "cssclass_month_head (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[150, "calendar.HTMLCalendar.cssclass_month_head"]], "cssclass_noday (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[150, "calendar.HTMLCalendar.cssclass_noday"]], "cssclass_year (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[150, "calendar.HTMLCalendar.cssclass_year"]], "cssclass_year_head (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[150, "calendar.HTMLCalendar.cssclass_year_head"]], "cssclasses (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[150, "calendar.HTMLCalendar.cssclasses"]], "cssclasses_weekday_head (calendar.htmlcalendar \u7684\u5c6c\u6027)": [[150, "calendar.HTMLCalendar.cssclasses_weekday_head"]], "day_abbr (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.day_abbr"]], "day_name (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.day_name"]], "firstweekday() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.firstweekday"]], "formatmonth() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[150, "calendar.HTMLCalendar.formatmonth"]], "formatmonth() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[150, "calendar.TextCalendar.formatmonth"]], "formatmonthname() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[150, "calendar.HTMLCalendar.formatmonthname"]], "formatyear() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[150, "calendar.HTMLCalendar.formatyear"]], "formatyear() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[150, "calendar.TextCalendar.formatyear"]], "formatyearpage() (calendar.htmlcalendar \u7684\u65b9\u6cd5)": [[150, "calendar.HTMLCalendar.formatyearpage"]], "isleap() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.isleap"]], "itermonthdates() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.itermonthdates"]], "itermonthdays() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.itermonthdays"]], "itermonthdays2() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.itermonthdays2"]], "itermonthdays3() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.itermonthdays3"]], "itermonthdays4() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.itermonthdays4"]], "iterweekdays() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.iterweekdays"]], "leapdays() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.leapdays"]], "month": [[150, "cmdoption-calendar-arg-month"]], "month (calendar.illegalmontherror \u7684\u5c6c\u6027)": [[150, "calendar.IllegalMonthError.month"]], "month() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.month"]], "month_abbr (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.month_abbr"]], "month_name (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.month_name"]], "monthcalendar() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.monthcalendar"]], "monthdatescalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.monthdatescalendar"]], "monthdays2calendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.monthdays2calendar"]], "monthdayscalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.monthdayscalendar"]], "monthrange() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.monthrange"]], "prcal() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.prcal"]], "prmonth() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[150, "calendar.TextCalendar.prmonth"]], "prmonth() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.prmonth"]], "pryear() (calendar.textcalendar \u7684\u65b9\u6cd5)": [[150, "calendar.TextCalendar.pryear"]], "setfirstweekday() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.setfirstweekday"]], "timegm() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.timegm"]], "weekday (calendar.illegalweekdayerror \u7684\u5c6c\u6027)": [[150, "calendar.IllegalWeekdayError.weekday"]], "weekday() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.weekday"]], "weekheader() (\u65bc calendar \u6a21\u7d44\u4e2d)": [[150, "calendar.weekheader"]], "year": [[150, "cmdoption-calendar-arg-year"]], "yeardatescalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.yeardatescalendar"]], "yeardays2calendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.yeardays2calendar"]], "yeardayscalendar() (calendar.calendar \u7684\u65b9\u6cd5)": [[150, "calendar.Calendar.yeardayscalendar"]], "cgi": [[151, "index-0"], [151, "index-2"], [151, "index-5"], [151, "module-cgi"], [152, "index-0"]], "common gateway interface\uff08\u901a\u7528\u9598\u9053\u5668\u4ecb\u9762\uff09": [[151, "index-0"]], "http": [[151, "index-0"], [241, "index-0"], [241, "module-http"], [242, "index-0"], [245, "index-0"], [395, "index-10"], [395, "index-9"]], "pep 594#cgi": [[151, "index-8"]], "url\uff08\u7d71\u4e00\u8cc7\u6e90\u5b9a\u4f4d\u5668\uff09": [[151, "index-0"], [245, "index-0"], [394, "index-0"], [396, "index-0"]], "www": [[151, "index-0"], [245, "index-0"], [256, "index-0"], [394, "index-0"], [396, "index-0"]], "debugging\uff08\u9664\u932f\uff09": [[151, "index-5"], [297, "index-0"], [436, "index-18"]], "getfirst() (cgi.fieldstorage \u7684\u65b9\u6cd5)": [[151, "cgi.FieldStorage.getfirst"]], "getlist() (cgi.fieldstorage \u7684\u65b9\u6cd5)": [[151, "cgi.FieldStorage.getlist"]], "headers\uff08\u6a19\u982d\uff09": [[151, "index-0"], [276, "index-1"]], "parse() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[151, "cgi.parse"]], "parse_header() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[151, "cgi.parse_header"]], "parse_multipart() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[151, "cgi.parse_multipart"]], "print_directory() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[151, "cgi.print_directory"]], "print_environ() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[151, "cgi.print_environ"]], "print_environ_usage() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[151, "cgi.print_environ_usage"]], "print_form() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[151, "cgi.print_form"]], "protocol\uff08\u5354\u5b9a\uff09": [[151, "index-0"], [223, "index-0"], [241, "index-0"], [242, "index-0"], [245, "index-0"], [248, "index-0"], [288, "index-0"], [299, "index-5"], [305, "index-0"], [335, "index-0"], [344, "index-18"], [344, "index-54"], [359, "index-0"], [395, "index-10"], [395, "index-9"]], "security\uff08\u5b89\u5168\uff09": [[151, "index-2"], [245, "index-3"]], "server\uff08\u4f3a\u670d\u5668\uff09": [[151, "index-0"], [245, "index-0"]], "test() (\u65bc cgi \u6a21\u7d44\u4e2d)": [[151, "cgi.test"]], "pep 594#cgitb": [[152, "index-4"]], "cgitb": [[152, "module-cgitb"]], "enable() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[152, "cgitb.enable"]], "excepthook() \uff08sys \u6a21\u7d44\u4e2d\uff09": [[152, "index-2"]], "exceptions\uff08\u4f8b\u5916\uff09": [[152, "index-0"]], "handler() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[152, "cgitb.handler"]], "html() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[152, "cgitb.html"]], "text() (\u65bc cgitb \u6a21\u7d44\u4e2d)": [[152, "cgitb.text"]], "tracebacks\uff08\u56de\u6eaf\uff09": [[152, "index-0"]], "\u65bc cgi \u8173\u672c\u4e2d": [[152, "index-0"]], "chunk (chunk \u4e2d\u7684\u985e\u5225)": [[153, "chunk.Chunk"]], "pep 594#chunk": [[153, "index-3"]], "rmff": [[153, "index-0"]], "real media file format\uff08real media \u6a94\u6848\u683c\u5f0f\uff09": [[153, "index-0"]], "chunk": [[153, "module-chunk"]], "close() (chunk.chunk \u7684\u65b9\u6cd5)": [[153, "chunk.Chunk.close"]], "getname() (chunk.chunk \u7684\u65b9\u6cd5)": [[153, "chunk.Chunk.getname"]], "getsize() (chunk.chunk \u7684\u65b9\u6cd5)": [[153, "chunk.Chunk.getsize"]], "isatty() (chunk.chunk \u7684\u65b9\u6cd5)": [[153, "chunk.Chunk.isatty"]], "read() (chunk.chunk \u7684\u65b9\u6cd5)": [[153, "chunk.Chunk.read"]], "seek() (chunk.chunk \u7684\u65b9\u6cd5)": [[153, "chunk.Chunk.seek"]], "skip() (chunk.chunk \u7684\u65b9\u6cd5)": [[153, "chunk.Chunk.skip"]], "tell() (chunk.chunk \u7684\u65b9\u6cd5)": [[153, "chunk.Chunk.tell"]], "pep 485": [[154, "index-3"], [275, "index-0"], [478, "index-19"], [478, "index-20"], [483, "index-296"]], "acos() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.acos"]], "acosh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.acosh"]], "asin() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.asin"]], "asinh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.asinh"]], "atan() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.atan"]], "atanh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.atanh"]], "cmath": [[154, "module-cmath"]], "cos() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.cos"]], "cosh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.cosh"]], "e (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.e"]], "exp() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.exp"]], "inf (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.inf"]], "infj (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.infj"]], "isclose() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.isclose"]], "isfinite() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.isfinite"]], "isinf() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.isinf"]], "isnan() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.isnan"]], "log() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.log"]], "log10() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.log10"]], "math\uff08\u6578\u5b78\uff09": [[154, "index-1"]], "nan (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.nan"]], "nanj (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.nanj"]], "phase() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.phase"]], "pi (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.pi"]], "polar() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.polar"]], "rect() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.rect"]], "sin() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.sin"]], "sinh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.sinh"]], "sqrt() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.sqrt"]], "tan() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.tan"]], "tanh() (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.tanh"]], "tau (\u65bc cmath \u6a21\u7d44\u4e2d)": [[154, "cmath.tau"]], "! \uff08\u9a5a\u5606\u865f\uff09": [[155, "index-0"], [178, "index-0"], [220, "index-2"], [231, "index-1"], [345, "index-2"], [347, "index-1"], [435, "index-25"]], "cmd (cmd \u4e2d\u7684\u985e\u5225)": [[155, "cmd.Cmd"]], "cmd": [[155, "module-cmd"], [297, "index-1"]], "cmdloop() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.cmdloop"]], "cmdqueue (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.cmdqueue"]], "columnize() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.columnize"]], "completedefault() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.completedefault"]], "default() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.default"]], "do_help() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.do_help"]], "doc_header (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.doc_header"]], "emptyline() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.emptyline"]], "identchars (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.identchars"]], "intro (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.intro"]], "lastcmd (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.lastcmd"]], "misc_header (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.misc_header"]], "onecmd() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.onecmd"]], "postcmd() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.postcmd"]], "postloop() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.postloop"]], "precmd() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.precmd"]], "preloop() (cmd.cmd \u7684\u65b9\u6cd5)": [[155, "cmd.Cmd.preloop"]], "prompt (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.prompt"]], "ruler (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.ruler"]], "undoc_header (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.undoc_header"]], "use_rawinput (cmd.cmd \u7684\u5c6c\u6027)": [[155, "cmd.Cmd.use_rawinput"]], "\u65bc command interpreter\uff08\u6307\u4ee4\u76f4\u8b6f\u5668\uff09\u4e2d": [[155, "index-0"]], "interactiveconsole (code \u4e2d\u7684\u985e\u5225)": [[157, "code.InteractiveConsole"]], "interactiveinterpreter (code \u4e2d\u7684\u985e\u5225)": [[157, "code.InteractiveInterpreter"]], "code": [[157, "module-code"]], "compile_command() (\u65bc code \u6a21\u7d44\u4e2d)": [[157, "code.compile_command"]], "interact() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[157, "code.InteractiveConsole.interact"]], "interact() (\u65bc code \u6a21\u7d44\u4e2d)": [[157, "code.interact"]], "push() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[157, "code.InteractiveConsole.push"]], "raw_input() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[157, "code.InteractiveConsole.raw_input"]], "resetbuffer() (code.interactiveconsole \u7684\u65b9\u6cd5)": [[157, "code.InteractiveConsole.resetbuffer"]], "runcode() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[157, "code.InteractiveInterpreter.runcode"]], "runsource() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[157, "code.InteractiveInterpreter.runsource"]], "showsyntaxerror() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[157, "code.InteractiveInterpreter.showsyntaxerror"]], "showtraceback() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[157, "code.InteractiveInterpreter.showtraceback"]], "write() (code.interactiveinterpreter \u7684\u65b9\u6cd5)": [[157, "code.InteractiveInterpreter.write"]], "bom (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.BOM"]], "bom_be (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.BOM_BE"]], "bom_le (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.BOM_LE"]], "bom_utf16 (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.BOM_UTF16"]], "bom_utf16_be (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.BOM_UTF16_BE"]], "bom_utf16_le (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.BOM_UTF16_LE"]], "bom_utf32 (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.BOM_UTF32"]], "bom_utf32_be (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.BOM_UTF32_BE"]], "bom_utf32_le (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.BOM_UTF32_LE"]], "bom_utf8 (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.BOM_UTF8"]], "codec (codecs \u4e2d\u7684\u985e\u5225)": [[158, "codecs.Codec"]], "codecinfo (codecs \u4e2d\u7684\u985e\u5225)": [[158, "codecs.CodecInfo"]], "codecs": [[158, "index-0"], [158, "module-codecs"]], "encodedfile() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.EncodedFile"]], "incrementaldecoder (codecs \u4e2d\u7684\u985e\u5225)": [[158, "codecs.IncrementalDecoder"]], "incrementalencoder (codecs \u4e2d\u7684\u985e\u5225)": [[158, "codecs.IncrementalEncoder"]], "rfc 3490": [[158, "index-13"], [158, "index-14"], [158, "index-6"], [158, "index-8"]], "rfc 3490#section-3.1": [[158, "index-12"]], "rfc 3492": [[158, "index-7"], [158, "index-9"]], "rfc 5891": [[158, "index-10"]], "rfc 5895": [[158, "index-11"]], "streamreader (codecs \u4e2d\u7684\u985e\u5225)": [[158, "codecs.StreamReader"]], "streamreaderwriter (codecs \u4e2d\u7684\u985e\u5225)": [[158, "codecs.StreamReaderWriter"]], "streamrecoder (codecs \u4e2d\u7684\u985e\u5225)": [[158, "codecs.StreamRecoder"]], "streamwriter (codecs \u4e2d\u7684\u985e\u5225)": [[158, "codecs.StreamWriter"]], "toascii() (\u65bc encodings.idna \u6a21\u7d44\u4e2d)": [[158, "encodings.idna.ToASCII"]], "tounicode() (\u65bc encodings.idna \u6a21\u7d44\u4e2d)": [[158, "encodings.idna.ToUnicode"]], "unicode": [[158, "index-0"], [387, "index-0"], [428, "index-19"]], "\\ \uff08\u53cd\u659c\u7dda\uff09": [[158, "index-1"], [293, "index-48"], [319, "index-12"], [319, "index-26"], [319, "index-9"], [435, "index-23"]], "\\n": [[158, "index-3"], [319, "index-37"], [319, "index-37"], [435, "index-23"], [435, "index-23"]], "\\u": [[158, "index-1"], [158, "index-1"], [319, "index-37"], [319, "index-37"], [435, "index-23"], [435, "index-23"]], "\\x": [[158, "index-1"], [319, "index-37"], [435, "index-23"]], "backslashreplace": [[158, "index-1"]], "backslashreplace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.backslashreplace_errors"]], "decode (codecs.codecinfo \u7684\u5c6c\u6027)": [[158, "codecs.CodecInfo.decode"]], "decode() (codecs.codec \u7684\u65b9\u6cd5)": [[158, "codecs.Codec.decode"]], "decode() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[158, "codecs.IncrementalDecoder.decode"]], "decode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.decode"]], "decode\uff08\u89e3\u78bc\uff09": [[158, "index-0"]], "encode (codecs.codecinfo \u7684\u5c6c\u6027)": [[158, "codecs.CodecInfo.encode"]], "encode() (codecs.codec \u7684\u65b9\u6cd5)": [[158, "codecs.Codec.encode"]], "encode() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[158, "codecs.IncrementalEncoder.encode"]], "encode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.encode"]], "encode\uff08\u7de8\u78bc\uff09": [[158, "index-0"]], "encodings.idna": [[158, "module-encodings.idna"]], "encodings.mbcs": [[158, "module-encodings.mbcs"]], "encodings.utf_8_sig": [[158, "module-encodings.utf_8_sig"]], "error handler's name\uff08\u932f\u8aa4\u8655\u7406\u5668\u540d\u7a31\uff09": [[158, "index-1"], [158, "index-3"], [158, "index-4"]], "escape sequence\uff08\u8df3\u812b\u5e8f\u5217\uff09": [[158, "index-1"], [158, "index-3"], [435, "index-23"]], "getdecoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.getdecoder"]], "getencoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.getencoder"]], "getincrementaldecoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.getincrementaldecoder"]], "getincrementalencoder() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.getincrementalencoder"]], "getreader() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.getreader"]], "getstate() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[158, "codecs.IncrementalDecoder.getstate"]], "getstate() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[158, "codecs.IncrementalEncoder.getstate"]], "getwriter() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.getwriter"]], "ignore": [[158, "index-1"]], "ignore_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.ignore_errors"]], "incrementaldecoder (codecs.codecinfo \u7684\u5c6c\u6027)": [[158, "codecs.CodecInfo.incrementaldecoder"]], "incrementalencoder (codecs.codecinfo \u7684\u5c6c\u6027)": [[158, "codecs.CodecInfo.incrementalencoder"]], "iterdecode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.iterdecode"]], "iterencode() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.iterencode"]], "lookup() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.lookup"]], "lookup_error() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.lookup_error"]], "name (codecs.codecinfo \u7684\u5c6c\u6027)": [[158, "codecs.CodecInfo.name"]], "nameprep() (\u65bc encodings.idna \u6a21\u7d44\u4e2d)": [[158, "encodings.idna.nameprep"]], "namereplace": [[158, "index-3"]], "namereplace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.namereplace_errors"]], "open() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.open"]], "read() (codecs.streamreader \u7684\u65b9\u6cd5)": [[158, "codecs.StreamReader.read"]], "readline() (codecs.streamreader \u7684\u65b9\u6cd5)": [[158, "codecs.StreamReader.readline"]], "readlines() (codecs.streamreader \u7684\u65b9\u6cd5)": [[158, "codecs.StreamReader.readlines"]], "register() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.register"]], "register_error() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.register_error"]], "replace": [[158, "index-1"]], "replace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.replace_errors"]], "replacement character\uff08\u66ff\u4ee3\u5b57\u5143\uff09": [[158, "index-1"]], "reset() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[158, "codecs.IncrementalDecoder.reset"]], "reset() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[158, "codecs.IncrementalEncoder.reset"]], "reset() (codecs.streamreader \u7684\u65b9\u6cd5)": [[158, "codecs.StreamReader.reset"]], "reset() (codecs.streamwriter \u7684\u65b9\u6cd5)": [[158, "codecs.StreamWriter.reset"]], "setstate() (codecs.incrementaldecoder \u7684\u65b9\u6cd5)": [[158, "codecs.IncrementalDecoder.setstate"]], "setstate() (codecs.incrementalencoder \u7684\u65b9\u6cd5)": [[158, "codecs.IncrementalEncoder.setstate"]], "stackable\uff08\u53ef\u5806\u758a\uff09": [[158, "index-0"]], "streamreader (codecs.codecinfo \u7684\u5c6c\u6027)": [[158, "codecs.CodecInfo.streamreader"]], "streams\uff08\u4e32\u6d41\uff09": [[158, "index-0"]], "streamwriter (codecs.codecinfo \u7684\u5c6c\u6027)": [[158, "codecs.CodecInfo.streamwriter"]], "strict": [[158, "index-1"]], "strict_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.strict_errors"]], "surrogateescape": [[158, "index-1"]], "surrogatepass": [[158, "index-4"]], "unregister() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.unregister"]], "write() (codecs.streamwriter \u7684\u65b9\u6cd5)": [[158, "codecs.StreamWriter.write"]], "writelines() (codecs.streamwriter \u7684\u65b9\u6cd5)": [[158, "codecs.StreamWriter.writelines"]], "xmlcharrefreplace": [[158, "index-3"]], "xmlcharrefreplace_errors() (\u65bc codecs \u6a21\u7d44\u4e2d)": [[158, "codecs.xmlcharrefreplace_errors"]], "commandcompiler (codeop \u4e2d\u7684\u985e\u5225)": [[159, "codeop.CommandCompiler"]], "compile (codeop \u4e2d\u7684\u985e\u5225)": [[159, "codeop.Compile"]], "codeop": [[159, "module-codeop"]], "compile_command() (\u65bc codeop \u6a21\u7d44\u4e2d)": [[159, "codeop.compile_command"]], "chainmap (collections \u4e2d\u7684\u985e\u5225)": [[160, "collections.ChainMap"]], "counter (collections \u4e2d\u7684\u985e\u5225)": [[160, "collections.Counter"]], "ordereddict (collections \u4e2d\u7684\u985e\u5225)": [[160, "collections.OrderedDict"]], "pep 468": [[160, "index-10"], [479, "index-24"], [483, "index-259"]], "pep 584": [[160, "index-11"], [160, "index-8"], [160, "index-9"], [293, "index-6"], [293, "index-7"], [385, "index-6"], [402, "index-1"], [402, "index-4"], [482, "index-1"], [482, "index-11"], [483, "index-173"], [483, "index-174"], [483, "index-175"], [483, "index-187"], [483, "index-188"], [483, "index-189"], [483, "index-190"]], "userdict (collections \u4e2d\u7684\u985e\u5225)": [[160, "collections.UserDict"]], "userlist (collections \u4e2d\u7684\u985e\u5225)": [[160, "collections.UserList"]], "userstring (collections \u4e2d\u7684\u985e\u5225)": [[160, "collections.UserString"]], "__missing__() (collections.defaultdict \u7684\u65b9\u6cd5)": [[160, "collections.defaultdict.__missing__"]], "_asdict() (collections.somenamedtuple \u7684\u65b9\u6cd5)": [[160, "collections.somenamedtuple._asdict"]], "_field_defaults (collections.somenamedtuple \u7684\u5c6c\u6027)": [[160, "collections.somenamedtuple._field_defaults"]], "_fields (collections.somenamedtuple \u7684\u5c6c\u6027)": [[160, "collections.somenamedtuple._fields"]], "_make() (collections.somenamedtuple \u7684\u985e\u5225\u65b9\u6cd5)": [[160, "collections.somenamedtuple._make"]], "_replace() (collections.somenamedtuple \u7684\u65b9\u6cd5)": [[160, "collections.somenamedtuple._replace"]], "append() (collections.deque \u7684\u65b9\u6cd5)": [[160, "collections.deque.append"]], "appendleft() (collections.deque \u7684\u65b9\u6cd5)": [[160, "collections.deque.appendleft"]], "clear() (collections.deque \u7684\u65b9\u6cd5)": [[160, "collections.deque.clear"]], "collections": [[160, "module-collections"], [428, "index-24"]], "copy() (collections.deque \u7684\u65b9\u6cd5)": [[160, "collections.deque.copy"]], "count() (collections.deque \u7684\u65b9\u6cd5)": [[160, "collections.deque.count"]], "data (collections.userdict \u7684\u5c6c\u6027)": [[160, "collections.UserDict.data"]], "data (collections.userlist \u7684\u5c6c\u6027)": [[160, "collections.UserList.data"]], "data (collections.userstring \u7684\u5c6c\u6027)": [[160, "collections.UserString.data"]], "default_factory (collections.defaultdict \u7684\u5c6c\u6027)": [[160, "collections.defaultdict.default_factory"]], "defaultdict (collections \u4e2d\u7684\u985e\u5225)": [[160, "collections.defaultdict"]], "deque (collections \u4e2d\u7684\u985e\u5225)": [[160, "collections.deque"]], "elements() (collections.counter \u7684\u65b9\u6cd5)": [[160, "collections.Counter.elements"]], "extend() (collections.deque \u7684\u65b9\u6cd5)": [[160, "collections.deque.extend"]], "extendleft() (collections.deque \u7684\u65b9\u6cd5)": [[160, "collections.deque.extendleft"]], "fromkeys() (collections.counter \u7684\u65b9\u6cd5)": [[160, "collections.Counter.fromkeys"]], "index() (collections.deque \u7684\u65b9\u6cd5)": [[160, "collections.deque.index"]], "insert() (collections.deque \u7684\u65b9\u6cd5)": [[160, "collections.deque.insert"]], "maps (collections.chainmap \u7684\u5c6c\u6027)": [[160, "collections.ChainMap.maps"]], "maxlen (collections.deque \u7684\u5c6c\u6027)": [[160, "collections.deque.maxlen"]], "most_common() (collections.counter \u7684\u65b9\u6cd5)": [[160, "collections.Counter.most_common"]], "move_to_end() (collections.ordereddict \u7684\u65b9\u6cd5)": [[160, "collections.OrderedDict.move_to_end"]], "namedtuple() (\u65bc collections \u6a21\u7d44\u4e2d)": [[160, "collections.namedtuple"]], "new_child() (collections.chainmap \u7684\u65b9\u6cd5)": [[160, "collections.ChainMap.new_child"]], "parents (collections.chainmap \u7684\u5c6c\u6027)": [[160, "collections.ChainMap.parents"]], "pop() (collections.deque \u7684\u65b9\u6cd5)": [[160, "collections.deque.pop"]], "popitem() (collections.ordereddict \u7684\u65b9\u6cd5)": [[160, "collections.OrderedDict.popitem"]], "popleft() (collections.deque \u7684\u65b9\u6cd5)": [[160, "collections.deque.popleft"]], "remove() (collections.deque \u7684\u65b9\u6cd5)": [[160, "collections.deque.remove"]], "reverse() (collections.deque \u7684\u65b9\u6cd5)": [[160, "collections.deque.reverse"]], "rotate() (collections.deque \u7684\u65b9\u6cd5)": [[160, "collections.deque.rotate"]], "subtract() (collections.counter \u7684\u65b9\u6cd5)": [[160, "collections.Counter.subtract"]], "total() (collections.counter \u7684\u65b9\u6cd5)": [[160, "collections.Counter.total"]], "update() (collections.counter \u7684\u65b9\u6cd5)": [[160, "collections.Counter.update"]], "asyncgenerator (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.AsyncGenerator"]], "asynciterable (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.AsyncIterable"]], "asynciterator (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.AsyncIterator"]], "awaitable (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.Awaitable"]], "buffer (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.Buffer"]], "bytestring (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.ByteString"]], "callable (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.Callable"]], "collection (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.Collection"]], "container (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.Container"]], "coroutine (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.Coroutine"]], "generator (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.Generator"]], "hashable (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.Hashable"]], "itemsview (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.ItemsView"]], "iterable (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.Iterable"]], "iterator (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.Iterator"]], "keysview (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.KeysView"]], "mapping (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.Mapping"]], "mappingview (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.MappingView"]], "mutablemapping (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.MutableMapping"]], "mutablesequence (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.MutableSequence"]], "mutableset (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.MutableSet"]], "pep 688": [[161, "index-4"], [428, "index-109"], [474, "index-12"], [483, "index-11"]], "reversible (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.Reversible"]], "sequence (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.Sequence"]], "set (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.Set"]], "sized (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.Sized"]], "valuesview (collections.abc \u4e2d\u7684\u985e\u5225)": [[161, "collections.abc.ValuesView"]], "collections.abc": [[161, "module-collections.abc"]], "colorsys": [[162, "module-colorsys"]], "hls_to_rgb() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[162, "colorsys.hls_to_rgb"]], "hsv_to_rgb() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[162, "colorsys.hsv_to_rgb"]], "rgb_to_hls() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[162, "colorsys.rgb_to_hls"]], "rgb_to_hsv() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[162, "colorsys.rgb_to_hsv"]], "rgb_to_yiq() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[162, "colorsys.rgb_to_yiq"]], "yiq_to_rgb() (\u65bc colorsys \u6a21\u7d44\u4e2d)": [[162, "colorsys.yiq_to_rgb"]], "--hardlink-dupes": [[163, "cmdoption-compileall-hardlink-dupes"]], "--invalidation-mode": [[163, "cmdoption-compileall-invalidation-mode"]], "-b": [[163, "cmdoption-compileall-b"], [388, "cmdoption-unittest-b"], [455, "cmdoption-B"], [455, "cmdoption-b"]], "-d": [[163, "cmdoption-compileall-d"], [234, "cmdoption-gzip-d"], [455, "cmdoption-d"]], "-f": [[163, "cmdoption-compileall-f"], [380, "cmdoption-trace-f"], [388, "cmdoption-unittest-f"]], "-j": [[163, "cmdoption-compileall-j"], [455, "cmdoption-J"]], "-o": [[163, "cmdoption-compileall-o"], [300, "cmdoption-pickletools-o"], [421, "cmdoption-zipapp-o"], [455, "cmdoption-O"]], "-p": [[163, "cmdoption-compileall-p"], [300, "cmdoption-pickletools-p"], [367, "cmdoption-timeit-p"], [388, "cmdoption-unittest-discover-p"], [421, "cmdoption-zipapp-p"], [455, "cmdoption-P"]], "-q": [[163, "cmdoption-compileall-q"], [311, "cmdoption-python-m-py_compile-q"], [455, "cmdoption-q"]], "-r": [[163, "cmdoption-compileall-r"], [367, "cmdoption-timeit-r"], [380, "cmdoption-trace-R"], [380, "cmdoption-trace-r"], [455, "cmdoption-R"]], "-x": [[163, "cmdoption-compileall-x"], [455, "cmdoption-X"], [455, "cmdoption-x"]], "source_date_epoch": [[163, "index-1"], [311, "index-3"], [311, "index-6"], [311, "index-7"], [480, "index-31"], [483, "index-218"], [483, "index-235"]], "compile_dir() (\u65bc compileall \u6a21\u7d44\u4e2d)": [[163, "compileall.compile_dir"]], "compile_file() (\u65bc compileall \u6a21\u7d44\u4e2d)": [[163, "compileall.compile_file"]], "compile_path() (\u65bc compileall \u6a21\u7d44\u4e2d)": [[163, "compileall.compile_path"]], "compileall": [[163, "module-compileall"]], "compileall \u547d\u4ee4\u5217\u9078\u9805": [[163, "cmdoption-compileall-arg-directory"], [163, "cmdoption-compileall-arg-file"], [163, "cmdoption-compileall-b"], [163, "cmdoption-compileall-d"], [163, "cmdoption-compileall-e"], [163, "cmdoption-compileall-f"], [163, "cmdoption-compileall-hardlink-dupes"], [163, "cmdoption-compileall-i"], [163, "cmdoption-compileall-invalidation-mode"], [163, "cmdoption-compileall-j"], [163, "cmdoption-compileall-l"], [163, "cmdoption-compileall-o"], [163, "cmdoption-compileall-p"], [163, "cmdoption-compileall-q"], [163, "cmdoption-compileall-r"], [163, "cmdoption-compileall-s"], [163, "cmdoption-compileall-x"]], "directory": [[163, "cmdoption-compileall-arg-directory"]], "file": [[163, "cmdoption-compileall-arg-file"], [234, "cmdoption-gzip-arg-file"]], "all_completed (\u65bc concurrent.futures \u6a21\u7d44\u4e2d)": [[166, "concurrent.futures.ALL_COMPLETED"]], "brokenexecutor": [[166, "concurrent.futures.BrokenExecutor"]], "brokenprocesspool": [[166, "concurrent.futures.process.BrokenProcessPool"]], "brokenthreadpool": [[166, "concurrent.futures.thread.BrokenThreadPool"]], "executor (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[166, "concurrent.futures.Executor"]], "first_completed (\u65bc concurrent.futures \u6a21\u7d44\u4e2d)": [[166, "concurrent.futures.FIRST_COMPLETED"]], "first_exception (\u65bc concurrent.futures \u6a21\u7d44\u4e2d)": [[166, "concurrent.futures.FIRST_EXCEPTION"]], "future (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[166, "concurrent.futures.Future"]], "pep 3148": [[166, "index-2"], [475, "index-4"]], "processpoolexecutor (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[166, "concurrent.futures.ProcessPoolExecutor"]], "threadpoolexecutor (concurrent.futures \u4e2d\u7684\u985e\u5225)": [[166, "concurrent.futures.ThreadPoolExecutor"]], "add_done_callback() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[166, "concurrent.futures.Future.add_done_callback"]], "as_completed() (\u65bc concurrent.futures \u6a21\u7d44\u4e2d)": [[166, "concurrent.futures.as_completed"]], "cancel() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[166, "concurrent.futures.Future.cancel"]], "cancelled() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[166, "concurrent.futures.Future.cancelled"]], "concurrent.futures": [[166, "module-concurrent.futures"]], "done() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[166, "concurrent.futures.Future.done"]], "exception() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[166, "concurrent.futures.Future.exception"]], "map() (concurrent.futures.executor \u7684\u65b9\u6cd5)": [[166, "concurrent.futures.Executor.map"]], "result() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[166, "concurrent.futures.Future.result"]], "running() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[166, "concurrent.futures.Future.running"]], "set_exception() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[166, "concurrent.futures.Future.set_exception"]], "set_result() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[166, "concurrent.futures.Future.set_result"]], "set_running_or_notify_cancel() (concurrent.futures.future \u7684\u65b9\u6cd5)": [[166, "concurrent.futures.Future.set_running_or_notify_cancel"]], "shutdown() (concurrent.futures.executor \u7684\u65b9\u6cd5)": [[166, "concurrent.futures.Executor.shutdown"]], "submit() (concurrent.futures.executor \u7684\u65b9\u6cd5)": [[166, "concurrent.futures.Executor.submit"]], "wait() (\u65bc concurrent.futures \u6a21\u7d44\u4e2d)": [[166, "concurrent.futures.wait"]], "$ \uff08\u91d1\u9322\u7b26\u865f\uff09": [[167, "index-2"], [294, "index-9"], [319, "index-2"], [345, "index-13"]], "% \uff08\u767e\u5206\u865f\uff09": [[167, "index-1"], [183, "index-0"], [294, "index-9"], [344, "index-13"], [344, "index-35"], [344, "index-45"], [366, "index-11"], [366, "index-9"], [405, "index-0"], [430, "index-68"]], ".ini": [[167, "index-0"]], "boolean_states (configparser.configparser \u7684\u5c6c\u6027)": [[167, "configparser.ConfigParser.BOOLEAN_STATES"]], "basicinterpolation (configparser \u4e2d\u7684\u985e\u5225)": [[167, "configparser.BasicInterpolation"]], "configparser (configparser \u4e2d\u7684\u985e\u5225)": [[167, "configparser.ConfigParser"]], "duplicateoptionerror": [[167, "configparser.DuplicateOptionError"]], "duplicatesectionerror": [[167, "configparser.DuplicateSectionError"]], "extendedinterpolation (configparser \u4e2d\u7684\u985e\u5225)": [[167, "configparser.ExtendedInterpolation"]], "interpolationdeptherror": [[167, "configparser.InterpolationDepthError"]], "interpolationerror": [[167, "configparser.InterpolationError"]], "interpolationmissingoptionerror": [[167, "configparser.InterpolationMissingOptionError"]], "interpolationsyntaxerror": [[167, "configparser.InterpolationSyntaxError"]], "max_interpolation_depth (\u65bc configparser \u6a21\u7d44\u4e2d)": [[167, "configparser.MAX_INTERPOLATION_DEPTH"]], "missingsectionheadererror": [[167, "configparser.MissingSectionHeaderError"]], "nooptionerror": [[167, "configparser.NoOptionError"]], "nosectionerror": [[167, "configparser.NoSectionError"]], "parsingerror": [[167, "configparser.ParsingError"]], "rawconfigparser (configparser \u4e2d\u7684\u985e\u5225)": [[167, "configparser.RawConfigParser"]], "sectcre (configparser.configparser \u7684\u5c6c\u6027)": [[167, "configparser.ConfigParser.SECTCRE"]], "windows ini file\uff08windows ini \u6a94\u6848\uff09": [[167, "index-0"]], "add_section() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.add_section"]], "add_section() (configparser.rawconfigparser \u7684\u65b9\u6cd5)": [[167, "configparser.RawConfigParser.add_section"]], "configparser": [[167, "module-configparser"]], "configuration\uff08\u8a2d\u5b9a\uff09": [[167, "index-0"], [297, "index-2"], [334, "index-4"]], "defaults() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.defaults"]], "get() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.get"]], "getboolean() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.getboolean"]], "getfloat() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.getfloat"]], "getint() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.getint"]], "has_option() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.has_option"]], "has_section() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.has_section"]], "ini file\uff08ini \u6a94\u6848\uff09": [[167, "index-0"]], "interpolation in configuration files\uff08\u8a2d\u5b9a\u6a94\u4e2d\u7684\u63d2\u503c\uff09": [[167, "index-1"], [167, "index-2"]], "items() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.items"]], "options() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.options"]], "optionxform() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.optionxform"]], "read() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.read"]], "read_dict() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.read_dict"]], "read_file() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.read_file"]], "read_string() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.read_string"]], "remove_option() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.remove_option"]], "remove_section() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.remove_section"]], "sections() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.sections"]], "set() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.set"]], "set() (configparser.rawconfigparser \u7684\u65b9\u6cd5)": [[167, "configparser.RawConfigParser.set"]], "write() (configparser.configparser \u7684\u65b9\u6cd5)": [[167, "configparser.ConfigParser.write"]], "ellipsis (\u5167\u5efa\u8b8a\u6578)": [[168, "Ellipsis"]], "false (\u5167\u5efa\u8b8a\u6578)": [[168, "False"]], "none (\u5167\u5efa\u8b8a\u6578)": [[168, "None"]], "notimplemented (\u5167\u5efa\u8b8a\u6578)": [[168, "NotImplemented"]], "true (\u5167\u5efa\u8b8a\u6578)": [[168, "True"]], "__debug__ (\u5167\u5efa\u8b8a\u6578)": [[168, "debug__"]], "copyright (\u5167\u5efa\u8b8a\u6578)": [[168, "copyright"]], "credits (\u5167\u5efa\u8b8a\u6578)": [[168, "credits"]], "ellipsis literal\uff08\u522a\u7bc0\u865f\uff09": [[168, "index-0"], [344, "index-66"], [428, "index-8"]], "exit (\u5167\u5efa\u8b8a\u6578)": [[168, "exit"]], "license (\u5167\u5efa\u8b8a\u6578)": [[168, "license"]], "quit (\u5167\u5efa\u8b8a\u6578)": [[168, "quit"]], "abstractasynccontextmanager (contextlib \u4e2d\u7684\u985e\u5225)": [[169, "contextlib.AbstractAsyncContextManager"]], "abstractcontextmanager (contextlib \u4e2d\u7684\u985e\u5225)": [[169, "contextlib.AbstractContextManager"]], "asynccontextdecorator (contextlib \u4e2d\u7684\u985e\u5225)": [[169, "contextlib.AsyncContextDecorator"]], "asyncexitstack (contextlib \u4e2d\u7684\u985e\u5225)": [[169, "contextlib.AsyncExitStack"]], "contextdecorator (contextlib \u4e2d\u7684\u985e\u5225)": [[169, "contextlib.ContextDecorator"]], "exitstack (contextlib \u4e2d\u7684\u985e\u5225)": [[169, "contextlib.ExitStack"]], "aclose() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[169, "contextlib.AsyncExitStack.aclose"]], "aclosing() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[169, "contextlib.aclosing"]], "asynccontextmanager() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[169, "contextlib.asynccontextmanager"]], "callback() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[169, "contextlib.ExitStack.callback"]], "chdir() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[169, "contextlib.chdir"]], "close() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[169, "contextlib.ExitStack.close"]], "closing() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[169, "contextlib.closing"]], "contextlib": [[169, "module-contextlib"]], "contextmanager() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[169, "contextlib.contextmanager"]], "enter_async_context() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[169, "contextlib.AsyncExitStack.enter_async_context"]], "enter_context() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[169, "contextlib.ExitStack.enter_context"]], "nullcontext() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[169, "contextlib.nullcontext"]], "pop_all() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[169, "contextlib.ExitStack.pop_all"]], "push() (contextlib.exitstack \u7684\u65b9\u6cd5)": [[169, "contextlib.ExitStack.push"]], "push_async_callback() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[169, "contextlib.AsyncExitStack.push_async_callback"]], "push_async_exit() (contextlib.asyncexitstack \u7684\u65b9\u6cd5)": [[169, "contextlib.AsyncExitStack.push_async_exit"]], "redirect_stderr() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[169, "contextlib.redirect_stderr"]], "redirect_stdout() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[169, "contextlib.redirect_stdout"]], "suppress() (\u65bc contextlib \u6a21\u7d44\u4e2d)": [[169, "contextlib.suppress"]], "context (contextvars \u4e2d\u7684\u985e\u5225)": [[170, "contextvars.Context"]], "contextvar (contextvars \u4e2d\u7684\u985e\u5225)": [[170, "contextvars.ContextVar"]], "missing (contextvars.token \u7684\u5c6c\u6027)": [[170, "contextvars.Token.MISSING"]], "token (contextvars \u4e2d\u7684\u985e\u5225)": [[170, "contextvars.Token"]], "contextvars": [[170, "module-contextvars"]], "copy() (contextvars.context \u7684\u65b9\u6cd5)": [[170, "contextvars.Context.copy"]], "copy_context() (\u65bc contextvars \u6a21\u7d44\u4e2d)": [[170, "contextvars.copy_context"]], "get() (contextvars.context \u7684\u65b9\u6cd5)": [[170, "contextvars.Context.get"]], "get() (contextvars.contextvar \u7684\u65b9\u6cd5)": [[170, "contextvars.ContextVar.get"]], "items() (contextvars.context \u7684\u65b9\u6cd5)": [[170, "contextvars.Context.items"]], "keys() (contextvars.context \u7684\u65b9\u6cd5)": [[170, "contextvars.Context.keys"]], "name (contextvars.contextvar \u7684\u5c6c\u6027)": [[170, "contextvars.ContextVar.name"]], "old_value (contextvars.token \u7684\u5c6c\u6027)": [[170, "contextvars.Token.old_value"]], "reset() (contextvars.contextvar \u7684\u65b9\u6cd5)": [[170, "contextvars.ContextVar.reset"]], "run() (contextvars.context \u7684\u65b9\u6cd5)": [[170, "contextvars.Context.run"]], "set() (contextvars.contextvar \u7684\u65b9\u6cd5)": [[170, "contextvars.ContextVar.set"]], "values() (contextvars.context \u7684\u65b9\u6cd5)": [[170, "contextvars.Context.values"]], "var (contextvars.token \u7684\u5c6c\u6027)": [[170, "contextvars.Token.var"]], "__copy__() \uff08\u8907\u88fd\u5354\u5b9a\uff09": [[171, "index-1"]], "__deepcopy__() \uff08\u8907\u88fd\u5354\u5b9a\uff09": [[171, "index-1"]], "copy": [[171, "module-copy"]], "copy() (\u65bc copy \u6a21\u7d44\u4e2d)": [[171, "copy.copy"]], "deepcopy() (\u65bc copy \u6a21\u7d44\u4e2d)": [[171, "copy.deepcopy"]], "pickle": [[171, "index-0"], [172, "index-0"], [274, "index-0"], [299, "module-pickle"], [330, "index-0"]], "constructor() (\u65bc copyreg \u6a21\u7d44\u4e2d)": [[172, "copyreg.constructor"]], "copyreg": [[172, "module-copyreg"]], "copy\uff08\u8907\u88fd\uff09": [[172, "index-0"], [247, "index-4"], [299, "index-5"]], "pickle() (\u65bc copyreg \u6a21\u7d44\u4e2d)": [[172, "copyreg.pickle"]], "des": [[173, "index-0"]], "method_blowfish (\u65bc crypt \u6a21\u7d44\u4e2d)": [[173, "crypt.METHOD_BLOWFISH"]], "method_crypt (\u65bc crypt \u6a21\u7d44\u4e2d)": [[173, "crypt.METHOD_CRYPT"]], "method_md5 (\u65bc crypt \u6a21\u7d44\u4e2d)": [[173, "crypt.METHOD_MD5"]], "method_sha256 (\u65bc crypt \u6a21\u7d44\u4e2d)": [[173, "crypt.METHOD_SHA256"]], "method_sha512 (\u65bc crypt \u6a21\u7d44\u4e2d)": [[173, "crypt.METHOD_SHA512"]], "pep 594#crypt": [[173, "index-1"]], "cipher": [[173, "index-0"]], "crypt": [[173, "module-crypt"], [310, "index-0"]], "crypt() (\u65bc crypt \u6a21\u7d44\u4e2d)": [[173, "crypt.crypt"]], "crypt(3)": [[173, "index-0"], [173, "index-2"], [173, "index-3"]], "methods (\u65bc crypt \u6a21\u7d44\u4e2d)": [[173, "crypt.methods"]], "mksalt() (\u65bc crypt \u6a21\u7d44\u4e2d)": [[173, "crypt.mksalt"]], "cryptography\uff08\u5bc6\u78bc\u5b78\uff09": [[174, "index-0"]], "dialect (csv \u4e2d\u7684\u985e\u5225)": [[175, "csv.Dialect"]], "dictreader (csv \u4e2d\u7684\u985e\u5225)": [[175, "csv.DictReader"]], "dictwriter (csv \u4e2d\u7684\u985e\u5225)": [[175, "csv.DictWriter"]], "pep 305": [[175, "index-7"], [465, "index-20"]], "quote_all (\u65bc csv \u6a21\u7d44\u4e2d)": [[175, "csv.QUOTE_ALL"]], "quote_minimal (\u65bc csv \u6a21\u7d44\u4e2d)": [[175, "csv.QUOTE_MINIMAL"]], "quote_none (\u65bc csv \u6a21\u7d44\u4e2d)": [[175, "csv.QUOTE_NONE"]], "quote_nonnumeric (\u65bc csv \u6a21\u7d44\u4e2d)": [[175, "csv.QUOTE_NONNUMERIC"]], "quote_notnull (\u65bc csv \u6a21\u7d44\u4e2d)": [[175, "csv.QUOTE_NOTNULL"]], "quote_strings (\u65bc csv \u6a21\u7d44\u4e2d)": [[175, "csv.QUOTE_STRINGS"]], "rfc 4180": [[175, "index-6"]], "sniffer (csv \u4e2d\u7684\u985e\u5225)": [[175, "csv.Sniffer"]], "__next__() (csv.csvreader \u7684\u65b9\u6cd5)": [[175, "csv.csvreader.__next__"]], "csv": [[175, "index-0"], [175, "module-csv"]], "csv.reader \u51fd\u5f0f": [[175, "index-3"]], "data\uff08\u8cc7\u6599\uff09": [[175, "index-0"], [347, "index-0"], [428, "index-0"], [428, "index-4"], [430, "index-7"]], "delimiter (csv.dialect \u7684\u5c6c\u6027)": [[175, "csv.Dialect.delimiter"]], "dialect (csv.csvreader \u7684\u5c6c\u6027)": [[175, "csv.csvreader.dialect"]], "dialect (csv.csvwriter \u7684\u5c6c\u6027)": [[175, "csv.csvwriter.dialect"]], "doublequote (csv.dialect \u7684\u5c6c\u6027)": [[175, "csv.Dialect.doublequote"]], "escapechar (csv.dialect \u7684\u5c6c\u6027)": [[175, "csv.Dialect.escapechar"]], "excel (csv \u4e2d\u7684\u985e\u5225)": [[175, "csv.excel"]], "excel_tab (csv \u4e2d\u7684\u985e\u5225)": [[175, "csv.excel_tab"]], "field_size_limit() (\u65bc csv \u6a21\u7d44\u4e2d)": [[175, "csv.field_size_limit"]], "fieldnames (csv.dictreader \u7684\u5c6c\u6027)": [[175, "csv.DictReader.fieldnames"]], "get_dialect() (\u65bc csv \u6a21\u7d44\u4e2d)": [[175, "csv.get_dialect"]], "has_header() (csv.sniffer \u7684\u65b9\u6cd5)": [[175, "csv.Sniffer.has_header"]], "line_num (csv.csvreader \u7684\u5c6c\u6027)": [[175, "csv.csvreader.line_num"]], "lineterminator (csv.dialect \u7684\u5c6c\u6027)": [[175, "csv.Dialect.lineterminator"]], "list_dialects() (\u65bc csv \u6a21\u7d44\u4e2d)": [[175, "csv.list_dialects"]], "quotechar (csv.dialect \u7684\u5c6c\u6027)": [[175, "csv.Dialect.quotechar"]], "quoting (csv.dialect \u7684\u5c6c\u6027)": [[175, "csv.Dialect.quoting"]], "reader() (\u65bc csv \u6a21\u7d44\u4e2d)": [[175, "csv.reader"]], "register_dialect() (\u65bc csv \u6a21\u7d44\u4e2d)": [[175, "csv.register_dialect"]], "skipinitialspace (csv.dialect \u7684\u5c6c\u6027)": [[175, "csv.Dialect.skipinitialspace"]], "sniff() (csv.sniffer \u7684\u65b9\u6cd5)": [[175, "csv.Sniffer.sniff"]], "strict (csv.dialect \u7684\u5c6c\u6027)": [[175, "csv.Dialect.strict"]], "tabular\uff08\u8868\u683c\uff09": [[175, "index-0"]], "universal newlines": [[175, "index-3"], [225, "index-7"], [250, "index-15"], [258, "index-4"], [258, "index-5"], [344, "index-34"], [344, "index-44"], [348, "index-1"], [465, "index-8"], [466, "index-7"], [467, "index-20"], [468, "index-13"]], "unix_dialect (csv \u4e2d\u7684\u985e\u5225)": [[175, "csv.unix_dialect"]], "unregister_dialect() (\u65bc csv \u6a21\u7d44\u4e2d)": [[175, "csv.unregister_dialect"]], "writeheader() (csv.dictwriter \u7684\u65b9\u6cd5)": [[175, "csv.DictWriter.writeheader"]], "writer() (\u65bc csv \u6a21\u7d44\u4e2d)": [[175, "csv.writer"]], "writerow() (csv.csvwriter \u7684\u65b9\u6cd5)": [[175, "csv.csvwriter.writerow"]], "writerows() (csv.csvwriter \u7684\u65b9\u6cd5)": [[175, "csv.csvwriter.writerows"]], "array (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.Array"]], "bigendianstructure (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.BigEndianStructure"]], "bigendianunion (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.BigEndianUnion"]], "cdll (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.CDLL"]], "cfunctype() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.CFUNCTYPE"]], "dllcanunloadnow() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.DllCanUnloadNow"]], "dllgetclassobject() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.DllGetClassObject"]], "formaterror() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.FormatError"]], "getlasterror() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.GetLastError"]], "hresult (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.HRESULT"]], "libraryloader (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.LibraryLoader"]], "littleendianstructure (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.LittleEndianStructure"]], "littleendianunion (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.LittleEndianUnion"]], "loadlibrary() (ctypes.libraryloader \u7684\u65b9\u6cd5)": [[176, "ctypes.LibraryLoader.LoadLibrary"]], "oledll (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.OleDLL"]], "pointer() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.POINTER"], [176, "ctypes.pointer"]], "pyfunctype() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.PYFUNCTYPE"]], "pydll (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.PyDLL"]], "structure (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.Structure"]], "union (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.Union"]], "winfunctype() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.WINFUNCTYPE"]], "windll (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.WinDLL"]], "winerror() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.WinError"]], "_cdata (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes._CData"]], "_funcptr (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes._FuncPtr"]], "_pointer (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes._Pointer"]], "_simplecdata (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes._SimpleCData"]], "_anonymous_ (ctypes.structure \u7684\u5c6c\u6027)": [[176, "ctypes.Structure._anonymous_"]], "_b_base_ (ctypes._cdata \u7684\u5c6c\u6027)": [[176, "ctypes._CData._b_base_"]], "_b_needsfree_ (ctypes._cdata \u7684\u5c6c\u6027)": [[176, "ctypes._CData._b_needsfree_"]], "_fields_ (ctypes.structure \u7684\u5c6c\u6027)": [[176, "ctypes.Structure._fields_"]], "_handle (ctypes.pydll \u7684\u5c6c\u6027)": [[176, "ctypes.PyDLL._handle"]], "_length_ (ctypes.array \u7684\u5c6c\u6027)": [[176, "ctypes.Array._length_"]], "_name (ctypes.pydll \u7684\u5c6c\u6027)": [[176, "ctypes.PyDLL._name"]], "_objects (ctypes._cdata \u7684\u5c6c\u6027)": [[176, "ctypes._CData._objects"]], "_pack_ (ctypes.structure \u7684\u5c6c\u6027)": [[176, "ctypes.Structure._pack_"]], "_type_ (ctypes.array \u7684\u5c6c\u6027)": [[176, "ctypes.Array._type_"]], "_type_ (ctypes._pointer \u7684\u5c6c\u6027)": [[176, "ctypes._Pointer._type_"]], "addressof() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.addressof"]], "alignment() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.alignment"]], "argtypes (ctypes._funcptr \u7684\u5c6c\u6027)": [[176, "ctypes._FuncPtr.argtypes"]], "byref() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.byref"]], "c_bool (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_bool"]], "c_byte (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_byte"]], "c_char (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_char"]], "c_char_p (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_char_p"]], "c_double (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_double"]], "c_float (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_float"]], "c_int (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_int"]], "c_int16 (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_int16"]], "c_int32 (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_int32"]], "c_int64 (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_int64"]], "c_int8 (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_int8"]], "c_long (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_long"]], "c_longdouble (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_longdouble"]], "c_longlong (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_longlong"]], "c_short (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_short"]], "c_size_t (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_size_t"]], "c_ssize_t (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_ssize_t"]], "c_time_t (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_time_t"]], "c_ubyte (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_ubyte"]], "c_uint (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_uint"]], "c_uint16 (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_uint16"]], "c_uint32 (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_uint32"]], "c_uint64 (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_uint64"]], "c_uint8 (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_uint8"]], "c_ulong (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_ulong"]], "c_ulonglong (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_ulonglong"]], "c_ushort (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_ushort"]], "c_void_p (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_void_p"]], "c_wchar (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_wchar"]], "c_wchar_p (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.c_wchar_p"]], "cast() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.cast"]], "contents (ctypes._pointer \u7684\u5c6c\u6027)": [[176, "ctypes._Pointer.contents"]], "create_string_buffer() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.create_string_buffer"]], "create_unicode_buffer() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.create_unicode_buffer"]], "ctypes": [[176, "module-ctypes"]], "errcheck (ctypes._funcptr \u7684\u5c6c\u6027)": [[176, "ctypes._FuncPtr.errcheck"]], "find_library() (\u65bc ctypes.util \u6a21\u7d44\u4e2d)": [[176, "ctypes.util.find_library"]], "find_msvcrt() (\u65bc ctypes.util \u6a21\u7d44\u4e2d)": [[176, "ctypes.util.find_msvcrt"]], "from_address() (ctypes._cdata \u7684\u65b9\u6cd5)": [[176, "ctypes._CData.from_address"]], "from_buffer() (ctypes._cdata \u7684\u65b9\u6cd5)": [[176, "ctypes._CData.from_buffer"]], "from_buffer_copy() (ctypes._cdata \u7684\u65b9\u6cd5)": [[176, "ctypes._CData.from_buffer_copy"]], "from_param() (ctypes._cdata \u7684\u65b9\u6cd5)": [[176, "ctypes._CData.from_param"]], "get_errno() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.get_errno"]], "get_last_error() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.get_last_error"]], "in_dll() (ctypes._cdata \u7684\u65b9\u6cd5)": [[176, "ctypes._CData.in_dll"]], "memmove() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.memmove"]], "memset() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.memset"]], "py_object (ctypes \u4e2d\u7684\u985e\u5225)": [[176, "ctypes.py_object"]], "resize() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.resize"]], "restype (ctypes._funcptr \u7684\u5c6c\u6027)": [[176, "ctypes._FuncPtr.restype"]], "set_errno() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.set_errno"]], "set_last_error() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.set_last_error"]], "sizeof() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.sizeof"]], "string_at() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.string_at"]], "value (ctypes._simplecdata \u7684\u5c6c\u6027)": [[176, "ctypes._SimpleCData.value"]], "wstring_at() (\u65bc ctypes \u6a21\u7d44\u4e2d)": [[176, "ctypes.wstring_at"]], "acs_bbss (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_BBSS"]], "acs_block (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_BLOCK"]], "acs_board (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_BOARD"]], "acs_bsbs (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_BSBS"]], "acs_bssb (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_BSSB"]], "acs_bsss (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_BSSS"]], "acs_btee (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_BTEE"]], "acs_bullet (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_BULLET"]], "acs_ckboard (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_CKBOARD"]], "acs_darrow (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_DARROW"]], "acs_degree (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_DEGREE"]], "acs_diamond (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_DIAMOND"]], "acs_gequal (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_GEQUAL"]], "acs_hline (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_HLINE"]], "acs_lantern (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_LANTERN"]], "acs_larrow (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_LARROW"]], "acs_lequal (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_LEQUAL"]], "acs_llcorner (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_LLCORNER"]], "acs_lrcorner (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_LRCORNER"]], "acs_ltee (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_LTEE"]], "acs_nequal (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_NEQUAL"]], "acs_pi (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_PI"]], "acs_plminus (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_PLMINUS"]], "acs_plus (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_PLUS"]], "acs_rarrow (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_RARROW"]], "acs_rtee (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_RTEE"]], "acs_s1 (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_S1"]], "acs_s3 (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_S3"]], "acs_s7 (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_S7"]], "acs_s9 (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_S9"]], "acs_sbbs (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_SBBS"]], "acs_sbsb (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_SBSB"]], "acs_sbss (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_SBSS"]], "acs_ssbb (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_SSBB"]], "acs_ssbs (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_SSBS"]], "acs_sssb (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_SSSB"]], "acs_ssss (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_SSSS"]], "acs_sterling (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_STERLING"]], "acs_ttee (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_TTEE"]], "acs_uarrow (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_UARROW"]], "acs_ulcorner (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_ULCORNER"]], "acs_urcorner (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_URCORNER"]], "acs_vline (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ACS_VLINE"]], "a_altcharset (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_ALTCHARSET"]], "a_attributes (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_ATTRIBUTES"]], "a_blink (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_BLINK"]], "a_bold (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_BOLD"]], "a_chartext (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_CHARTEXT"]], "a_color (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_COLOR"]], "a_dim (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_DIM"]], "a_horizontal (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_HORIZONTAL"]], "a_invis (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_INVIS"]], "a_italic (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_ITALIC"]], "a_left (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_LEFT"]], "a_low (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_LOW"]], "a_normal (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_NORMAL"]], "a_protect (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_PROTECT"]], "a_reverse (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_REVERSE"]], "a_right (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_RIGHT"]], "a_standout (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_STANDOUT"]], "a_top (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_TOP"]], "a_underline (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_UNDERLINE"]], "a_vertical (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.A_VERTICAL"]], "button_alt (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.BUTTON_ALT"]], "button_ctrl (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.BUTTON_CTRL"]], "button_shift (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.BUTTON_SHIFT"]], "buttonn_clicked (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.BUTTONn_CLICKED"]], "buttonn_double_clicked (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.BUTTONn_DOUBLE_CLICKED"]], "buttonn_pressed (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.BUTTONn_PRESSED"]], "buttonn_released (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.BUTTONn_RELEASED"]], "buttonn_triple_clicked (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.BUTTONn_TRIPLE_CLICKED"]], "colors (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.COLORS"]], "color_black (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.COLOR_BLACK"]], "color_blue (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.COLOR_BLUE"]], "color_cyan (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.COLOR_CYAN"]], "color_green (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.COLOR_GREEN"]], "color_magenta (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.COLOR_MAGENTA"]], "color_pairs (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.COLOR_PAIRS"]], "color_red (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.COLOR_RED"]], "color_white (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.COLOR_WHITE"]], "color_yellow (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.COLOR_YELLOW"]], "cols (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.COLS"]], "columns": [[177, "index-4"], [177, "index-6"]], "err (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ERR"]], "key_a1 (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_A1"]], "key_a3 (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_A3"]], "key_b2 (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_B2"]], "key_backspace (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_BACKSPACE"]], "key_beg (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_BEG"]], "key_break (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_BREAK"]], "key_btab (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_BTAB"]], "key_c1 (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_C1"]], "key_c3 (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_C3"]], "key_cancel (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_CANCEL"]], "key_catab (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_CATAB"]], "key_clear (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_CLEAR"]], "key_close (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_CLOSE"]], "key_command (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_COMMAND"]], "key_copy (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_COPY"]], "key_create (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_CREATE"]], "key_ctab (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_CTAB"]], "key_dc (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_DC"]], "key_dl (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_DL"]], "key_down (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_DOWN"]], "key_eic (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_EIC"]], "key_end (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_END"]], "key_enter (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_ENTER"]], "key_eol (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_EOL"]], "key_eos (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_EOS"]], "key_exit (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_EXIT"]], "key_f0 (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_F0"]], "key_find (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_FIND"]], "key_fn (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_Fn"]], "key_help (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_HELP"]], "key_home (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_HOME"]], "key_ic (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_IC"]], "key_il (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_IL"]], "key_left (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_LEFT"]], "key_ll (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_LL"]], "key_mark (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_MARK"]], "key_max (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_MAX"]], "key_message (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_MESSAGE"]], "key_min (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_MIN"]], "key_mouse (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_MOUSE"]], "key_move (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_MOVE"]], "key_next (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_NEXT"]], "key_npage (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_NPAGE"]], "key_open (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_OPEN"]], "key_options (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_OPTIONS"]], "key_ppage (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_PPAGE"]], "key_previous (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_PREVIOUS"]], "key_print (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_PRINT"]], "key_redo (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_REDO"]], "key_reference (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_REFERENCE"]], "key_refresh (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_REFRESH"]], "key_replace (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_REPLACE"]], "key_reset (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_RESET"]], "key_resize (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_RESIZE"]], "key_restart (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_RESTART"]], "key_resume (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_RESUME"]], "key_right (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_RIGHT"]], "key_save (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SAVE"]], "key_sbeg (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SBEG"]], "key_scancel (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SCANCEL"]], "key_scommand (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SCOMMAND"]], "key_scopy (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SCOPY"]], "key_screate (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SCREATE"]], "key_sdc (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SDC"]], "key_sdl (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SDL"]], "key_select (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SELECT"]], "key_send (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SEND"]], "key_seol (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SEOL"]], "key_sexit (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SEXIT"]], "key_sf (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SF"]], "key_sfind (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SFIND"]], "key_shelp (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SHELP"]], "key_shome (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SHOME"]], "key_sic (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SIC"]], "key_sleft (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SLEFT"]], "key_smessage (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SMESSAGE"]], "key_smove (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SMOVE"]], "key_snext (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SNEXT"]], "key_soptions (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SOPTIONS"]], "key_sprevious (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SPREVIOUS"]], "key_sprint (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SPRINT"]], "key_sr (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SR"]], "key_sredo (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SREDO"]], "key_sreplace (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SREPLACE"]], "key_sreset (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SRESET"]], "key_sright (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SRIGHT"]], "key_srsume (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SRSUME"]], "key_ssave (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SSAVE"]], "key_ssuspend (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SSUSPEND"]], "key_stab (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_STAB"]], "key_sundo (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SUNDO"]], "key_suspend (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_SUSPEND"]], "key_undo (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_UNDO"]], "key_up (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.KEY_UP"]], "lines": [[177, "index-0"], [177, "index-3"], [177, "index-5"]], "lines (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.LINES"]], "ok (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.OK"]], "term": [[177, "index-1"], [177, "index-2"]], "textbox (curses.textpad \u4e2d\u7684\u985e\u5225)": [[177, "curses.textpad.Textbox"]], "__version__ (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.__version__"]], "addch() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.addch"]], "addnstr() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.addnstr"]], "addstr() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.addstr"]], "attroff() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.attroff"]], "attron() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.attron"]], "attrset() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.attrset"]], "baudrate() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.baudrate"]], "beep() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.beep"]], "bkgd() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.bkgd"]], "bkgdset() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.bkgdset"]], "border() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.border"]], "box() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.box"]], "can_change_color() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.can_change_color"]], "cbreak() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.cbreak"]], "chgat() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.chgat"]], "clear() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.clear"]], "clearok() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.clearok"]], "clrtobot() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.clrtobot"]], "clrtoeol() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.clrtoeol"]], "color_content() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.color_content"]], "color_pair() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.color_pair"]], "curs_set() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.curs_set"]], "curses": [[177, "module-curses"]], "curses.textpad": [[177, "module-curses.textpad"]], "cursyncup() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.cursyncup"]], "def_prog_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.def_prog_mode"]], "def_shell_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.def_shell_mode"]], "delay_output() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.delay_output"]], "delch() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.delch"]], "deleteln() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.deleteln"]], "derwin() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.derwin"]], "do_command() (curses.textpad.textbox \u7684\u65b9\u6cd5)": [[177, "curses.textpad.Textbox.do_command"]], "doupdate() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.doupdate"]], "echo() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.echo"]], "echochar() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.echochar"]], "edit() (curses.textpad.textbox \u7684\u65b9\u6cd5)": [[177, "curses.textpad.Textbox.edit"]], "enclose() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.enclose"]], "encoding (curses.window \u7684\u5c6c\u6027)": [[177, "curses.window.encoding"]], "endwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.endwin"]], "erase() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.erase"]], "erasechar() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.erasechar"]], "filter() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.filter"]], "flash() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.flash"]], "flushinp() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.flushinp"]], "gather() (curses.textpad.textbox \u7684\u65b9\u6cd5)": [[177, "curses.textpad.Textbox.gather"]], "get_escdelay() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.get_escdelay"]], "get_tabsize() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.get_tabsize"]], "get_wch() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.get_wch"]], "getbegyx() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.getbegyx"]], "getbkgd() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.getbkgd"]], "getch() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.getch"]], "getkey() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.getkey"]], "getmaxyx() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.getmaxyx"]], "getmouse() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.getmouse"]], "getparyx() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.getparyx"]], "getstr() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.getstr"]], "getsyx() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.getsyx"]], "getwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.getwin"]], "getyx() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.getyx"]], "halfdelay() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.halfdelay"]], "has_colors() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.has_colors"]], "has_extended_color_support() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.has_extended_color_support"]], "has_ic() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.has_ic"]], "has_il() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.has_il"]], "has_key() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.has_key"]], "hline() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.hline"]], "idcok() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.idcok"]], "idlok() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.idlok"]], "immedok() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.immedok"]], "inch() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.inch"]], "init_color() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.init_color"]], "init_pair() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.init_pair"]], "initscr() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.initscr"]], "insch() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.insch"]], "insdelln() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.insdelln"]], "insertln() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.insertln"]], "insnstr() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.insnstr"]], "insstr() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.insstr"]], "instr() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.instr"]], "is_linetouched() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.is_linetouched"]], "is_term_resized() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.is_term_resized"]], "is_wintouched() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.is_wintouched"]], "isendwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.isendwin"]], "keyname() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.keyname"]], "keypad() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.keypad"]], "killchar() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.killchar"]], "leaveok() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.leaveok"]], "longname() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.longname"]], "meta() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.meta"]], "mouseinterval() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.mouseinterval"]], "mousemask() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.mousemask"]], "move() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.move"]], "mvderwin() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.mvderwin"]], "mvwin() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.mvwin"]], "napms() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.napms"]], "ncurses_version (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ncurses_version"]], "newpad() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.newpad"]], "newwin() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.newwin"]], "nl() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.nl"]], "nocbreak() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.nocbreak"]], "nodelay() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.nodelay"]], "noecho() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.noecho"]], "nonl() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.nonl"]], "noqiflush() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.noqiflush"]], "noraw() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.noraw"]], "notimeout() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.notimeout"]], "noutrefresh() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.noutrefresh"]], "overlay() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.overlay"]], "overwrite() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.overwrite"]], "pair_content() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.pair_content"]], "pair_number() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.pair_number"]], "putp() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.putp"]], "putwin() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.putwin"]], "qiflush() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.qiflush"]], "raw() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.raw"]], "rectangle() (\u65bc curses.textpad \u6a21\u7d44\u4e2d)": [[177, "curses.textpad.rectangle"]], "redrawln() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.redrawln"]], "redrawwin() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.redrawwin"]], "refresh() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.refresh"]], "reset_prog_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.reset_prog_mode"]], "reset_shell_mode() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.reset_shell_mode"]], "resetty() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.resetty"]], "resize() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.resize"]], "resize_term() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.resize_term"]], "resizeterm() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.resizeterm"]], "savetty() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.savetty"]], "scroll() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.scroll"]], "scrollok() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.scrollok"]], "set_escdelay() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.set_escdelay"]], "set_tabsize() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.set_tabsize"]], "setscrreg() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.setscrreg"]], "setsyx() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.setsyx"]], "setupterm() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.setupterm"]], "standend() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.standend"]], "standout() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.standout"]], "start_color() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.start_color"]], "stripspaces (curses.textpad.textbox \u7684\u5c6c\u6027)": [[177, "curses.textpad.Textbox.stripspaces"]], "subpad() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.subpad"]], "subwin() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.subwin"]], "syncdown() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.syncdown"]], "syncok() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.syncok"]], "syncup() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.syncup"]], "termattrs() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.termattrs"]], "termname() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.termname"]], "tigetflag() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.tigetflag"]], "tigetnum() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.tigetnum"]], "tigetstr() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.tigetstr"]], "timeout() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.timeout"]], "touchline() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.touchline"]], "touchwin() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.touchwin"]], "tparm() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.tparm"]], "typeahead() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.typeahead"]], "unctrl() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.unctrl"]], "unget_wch() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.unget_wch"]], "ungetch() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ungetch"]], "ungetmouse() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.ungetmouse"]], "untouchwin() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.untouchwin"]], "update_lines_cols() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.update_lines_cols"]], "use_default_colors() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.use_default_colors"]], "use_env() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.use_env"]], "version (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.version"]], "vline() (curses.window \u7684\u65b9\u6cd5)": [[177, "curses.window.vline"]], "wrapper() (\u65bc curses \u6a21\u7d44\u4e2d)": [[177, "curses.wrapper"]], "ack (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.ACK"]], "bel (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.BEL"]], "bs (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.BS"]], "can (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.CAN"]], "cr (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.CR"]], "dc1 (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.DC1"]], "dc2 (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.DC2"]], "dc3 (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.DC3"]], "dc4 (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.DC4"]], "del (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.DEL"]], "dle (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.DLE"]], "em (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.EM"]], "enq (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.ENQ"]], "eot (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.EOT"]], "esc (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.ESC"]], "etb (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.ETB"]], "etx (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.ETX"]], "ff (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.FF"]], "fs (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.FS"]], "gs (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.GS"]], "ht (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.HT"]], "lf (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.LF"]], "nak (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.NAK"]], "nl (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.NL"]], "nul (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.NUL"]], "rs (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.RS"]], "si (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.SI"]], "so (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.SO"]], "soh (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.SOH"]], "sp (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.SP"]], "stx (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.STX"]], "sub (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.SUB"]], "syn (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.SYN"]], "tab (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.TAB"]], "us (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.US"]], "vt (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.VT"]], "^ \uff08\u63d2\u5165\u7b26\u865f\uff09": [[178, "index-0"], [193, "index-1"], [319, "index-1"], [319, "index-13"], [344, "index-16"], [345, "index-3"], [381, "index-1"], [430, "index-75"]], "alt() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.alt"]], "ascii() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.ascii"]], "controlnames (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.controlnames"]], "ctrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.ctrl"]], "curses.ascii": [[178, "module-curses.ascii"]], "isalnum() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.isalnum"]], "isalpha() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.isalpha"]], "isascii() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.isascii"]], "isblank() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.isblank"]], "iscntrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.iscntrl"]], "isctrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.isctrl"]], "isdigit() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.isdigit"]], "isgraph() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.isgraph"]], "islower() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.islower"]], "ismeta() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.ismeta"]], "isprint() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.isprint"]], "ispunct() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.ispunct"]], "isspace() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.isspace"]], "isupper() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.isupper"]], "isxdigit() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.isxdigit"]], "unctrl() (\u65bc curses.ascii \u6a21\u7d44\u4e2d)": [[178, "curses.ascii.unctrl"]], "\u65bc curses \u6a21\u7d44\u4e2d": [[178, "index-0"]], "above() (curses.panel.panel \u7684\u65b9\u6cd5)": [[179, "curses.panel.Panel.above"]], "below() (curses.panel.panel \u7684\u65b9\u6cd5)": [[179, "curses.panel.Panel.below"]], "bottom() (curses.panel.panel \u7684\u65b9\u6cd5)": [[179, "curses.panel.Panel.bottom"]], "bottom_panel() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[179, "curses.panel.bottom_panel"]], "curses.panel": [[179, "module-curses.panel"]], "hidden() (curses.panel.panel \u7684\u65b9\u6cd5)": [[179, "curses.panel.Panel.hidden"]], "hide() (curses.panel.panel \u7684\u65b9\u6cd5)": [[179, "curses.panel.Panel.hide"]], "move() (curses.panel.panel \u7684\u65b9\u6cd5)": [[179, "curses.panel.Panel.move"]], "new_panel() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[179, "curses.panel.new_panel"]], "replace() (curses.panel.panel \u7684\u65b9\u6cd5)": [[179, "curses.panel.Panel.replace"]], "set_userptr() (curses.panel.panel \u7684\u65b9\u6cd5)": [[179, "curses.panel.Panel.set_userptr"]], "show() (curses.panel.panel \u7684\u65b9\u6cd5)": [[179, "curses.panel.Panel.show"]], "top() (curses.panel.panel \u7684\u65b9\u6cd5)": [[179, "curses.panel.Panel.top"]], "top_panel() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[179, "curses.panel.top_panel"]], "update_panels() (\u65bc curses.panel \u6a21\u7d44\u4e2d)": [[179, "curses.panel.update_panels"]], "userptr() (curses.panel.panel \u7684\u65b9\u6cd5)": [[179, "curses.panel.Panel.userptr"]], "window() (curses.panel.panel \u7684\u65b9\u6cd5)": [[179, "curses.panel.Panel.window"]], "field (dataclasses \u4e2d\u7684\u985e\u5225)": [[181, "dataclasses.Field"]], "frozeninstanceerror": [[181, "dataclasses.FrozenInstanceError"]], "kw_only (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[181, "dataclasses.KW_ONLY"]], "missing (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[181, "dataclasses.MISSING"]], "pep 557": [[181, "index-0"], [480, "index-29"]], "__post_init__() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[181, "dataclasses.__post_init__"]], "asdict() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[181, "dataclasses.asdict"]], "astuple() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[181, "dataclasses.astuple"]], "dataclass() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[181, "dataclasses.dataclass"]], "dataclasses": [[181, "module-dataclasses"]], "field() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[181, "dataclasses.field"]], "fields() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[181, "dataclasses.fields"]], "is_dataclass() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[181, "dataclasses.is_dataclass"]], "make_dataclass() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[181, "dataclasses.make_dataclass"]], "replace() (\u65bc dataclasses \u6a21\u7d44\u4e2d)": [[181, "dataclasses.replace"]], "maxyear (\u65bc datetime \u6a21\u7d44\u4e2d)": [[183, "datetime.MAXYEAR"]], "minyear (\u65bc datetime \u6a21\u7d44\u4e2d)": [[183, "datetime.MINYEAR"]], "utc (\u65bc datetime \u6a21\u7d44\u4e2d)": [[183, "datetime.UTC"]], "__format__() (datetime.date \u7684\u65b9\u6cd5)": [[183, "datetime.date.__format__"]], "__format__() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.__format__"]], "__format__() (datetime.time \u7684\u65b9\u6cd5)": [[183, "datetime.time.__format__"]], "__str__() (datetime.date \u7684\u65b9\u6cd5)": [[183, "datetime.date.__str__"]], "__str__() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.__str__"]], "__str__() (datetime.time \u7684\u65b9\u6cd5)": [[183, "datetime.time.__str__"]], "astimezone() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.astimezone"]], "combine() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[183, "datetime.datetime.combine"]], "ctime() (datetime.date \u7684\u65b9\u6cd5)": [[183, "datetime.date.ctime"]], "ctime() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.ctime"]], "date (datetime \u4e2d\u7684\u985e\u5225)": [[183, "datetime.date"]], "date() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.date"]], "datetime": [[183, "module-datetime"]], "datetime (datetime \u4e2d\u7684\u985e\u5225)": [[183, "datetime.datetime"]], "datetime format\uff08\u65e5\u671f\u6642\u9593\u683c\u5f0f\uff09": [[183, "index-0"], [366, "index-11"], [366, "index-9"]], "day (datetime.date \u7684\u5c6c\u6027)": [[183, "datetime.date.day"]], "day (datetime.datetime \u7684\u5c6c\u6027)": [[183, "datetime.datetime.day"]], "dst() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.dst"]], "dst() (datetime.time \u7684\u65b9\u6cd5)": [[183, "datetime.time.dst"]], "dst() (datetime.timezone \u7684\u65b9\u6cd5)": [[183, "datetime.timezone.dst"]], "dst() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[183, "datetime.tzinfo.dst"]], "fold (datetime.datetime \u7684\u5c6c\u6027)": [[183, "datetime.datetime.fold"]], "fold (datetime.time \u7684\u5c6c\u6027)": [[183, "datetime.time.fold"]], "fromisocalendar() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[183, "datetime.date.fromisocalendar"]], "fromisocalendar() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[183, "datetime.datetime.fromisocalendar"]], "fromisoformat() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[183, "datetime.date.fromisoformat"]], "fromisoformat() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[183, "datetime.datetime.fromisoformat"]], "fromisoformat() (datetime.time \u7684\u985e\u5225\u65b9\u6cd5)": [[183, "datetime.time.fromisoformat"]], "fromordinal() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[183, "datetime.date.fromordinal"]], "fromordinal() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[183, "datetime.datetime.fromordinal"]], "fromtimestamp() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[183, "datetime.date.fromtimestamp"]], "fromtimestamp() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[183, "datetime.datetime.fromtimestamp"]], "fromutc() (datetime.timezone \u7684\u65b9\u6cd5)": [[183, "datetime.timezone.fromutc"]], "fromutc() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[183, "datetime.tzinfo.fromutc"]], "hour (datetime.datetime \u7684\u5c6c\u6027)": [[183, "datetime.datetime.hour"]], "hour (datetime.time \u7684\u5c6c\u6027)": [[183, "datetime.time.hour"]], "isocalendar() (datetime.date \u7684\u65b9\u6cd5)": [[183, "datetime.date.isocalendar"]], "isocalendar() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.isocalendar"]], "isoformat() (datetime.date \u7684\u65b9\u6cd5)": [[183, "datetime.date.isoformat"]], "isoformat() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.isoformat"]], "isoformat() (datetime.time \u7684\u65b9\u6cd5)": [[183, "datetime.time.isoformat"]], "isoweekday() (datetime.date \u7684\u65b9\u6cd5)": [[183, "datetime.date.isoweekday"]], "isoweekday() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.isoweekday"]], "max (datetime.date \u7684\u5c6c\u6027)": [[183, "datetime.date.max"]], "max (datetime.datetime \u7684\u5c6c\u6027)": [[183, "datetime.datetime.max"]], "max (datetime.time \u7684\u5c6c\u6027)": [[183, "datetime.time.max"]], "max (datetime.timedelta \u7684\u5c6c\u6027)": [[183, "datetime.timedelta.max"]], "microsecond (datetime.datetime \u7684\u5c6c\u6027)": [[183, "datetime.datetime.microsecond"]], "microsecond (datetime.time \u7684\u5c6c\u6027)": [[183, "datetime.time.microsecond"]], "min (datetime.date \u7684\u5c6c\u6027)": [[183, "datetime.date.min"]], "min (datetime.datetime \u7684\u5c6c\u6027)": [[183, "datetime.datetime.min"]], "min (datetime.time \u7684\u5c6c\u6027)": [[183, "datetime.time.min"]], "min (datetime.timedelta \u7684\u5c6c\u6027)": [[183, "datetime.timedelta.min"]], "minute (datetime.datetime \u7684\u5c6c\u6027)": [[183, "datetime.datetime.minute"]], "minute (datetime.time \u7684\u5c6c\u6027)": [[183, "datetime.time.minute"]], "month (datetime.date \u7684\u5c6c\u6027)": [[183, "datetime.date.month"]], "month (datetime.datetime \u7684\u5c6c\u6027)": [[183, "datetime.datetime.month"]], "now() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[183, "datetime.datetime.now"]], "replace() (datetime.date \u7684\u65b9\u6cd5)": [[183, "datetime.date.replace"]], "replace() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.replace"]], "replace() (datetime.time \u7684\u65b9\u6cd5)": [[183, "datetime.time.replace"]], "resolution (datetime.date \u7684\u5c6c\u6027)": [[183, "datetime.date.resolution"]], "resolution (datetime.datetime \u7684\u5c6c\u6027)": [[183, "datetime.datetime.resolution"]], "resolution (datetime.time \u7684\u5c6c\u6027)": [[183, "datetime.time.resolution"]], "resolution (datetime.timedelta \u7684\u5c6c\u6027)": [[183, "datetime.timedelta.resolution"]], "second (datetime.datetime \u7684\u5c6c\u6027)": [[183, "datetime.datetime.second"]], "second (datetime.time \u7684\u5c6c\u6027)": [[183, "datetime.time.second"]], "strftime() (datetime.date \u7684\u65b9\u6cd5)": [[183, "datetime.date.strftime"]], "strftime() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.strftime"]], "strftime() (datetime.time \u7684\u65b9\u6cd5)": [[183, "datetime.time.strftime"]], "strptime() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[183, "datetime.datetime.strptime"]], "time (datetime \u4e2d\u7684\u985e\u5225)": [[183, "datetime.time"]], "time() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.time"]], "timedelta (datetime \u4e2d\u7684\u985e\u5225)": [[183, "datetime.timedelta"]], "timestamp() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.timestamp"]], "timetuple() (datetime.date \u7684\u65b9\u6cd5)": [[183, "datetime.date.timetuple"]], "timetuple() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.timetuple"]], "timetz() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.timetz"]], "timezone (datetime \u4e2d\u7684\u985e\u5225)": [[183, "datetime.timezone"]], "today() (datetime.date \u7684\u985e\u5225\u65b9\u6cd5)": [[183, "datetime.date.today"]], "today() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[183, "datetime.datetime.today"]], "toordinal() (datetime.date \u7684\u65b9\u6cd5)": [[183, "datetime.date.toordinal"]], "toordinal() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.toordinal"]], "total_seconds() (datetime.timedelta \u7684\u65b9\u6cd5)": [[183, "datetime.timedelta.total_seconds"]], "tzinfo (datetime \u4e2d\u7684\u985e\u5225)": [[183, "datetime.tzinfo"]], "tzinfo (datetime.datetime \u7684\u5c6c\u6027)": [[183, "datetime.datetime.tzinfo"]], "tzinfo (datetime.time \u7684\u5c6c\u6027)": [[183, "datetime.time.tzinfo"]], "tzname() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.tzname"]], "tzname() (datetime.time \u7684\u65b9\u6cd5)": [[183, "datetime.time.tzname"]], "tzname() (datetime.timezone \u7684\u65b9\u6cd5)": [[183, "datetime.timezone.tzname"]], "tzname() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[183, "datetime.tzinfo.tzname"]], "utc (datetime.timezone \u7684\u5c6c\u6027)": [[183, "datetime.timezone.utc"]], "utcfromtimestamp() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[183, "datetime.datetime.utcfromtimestamp"]], "utcnow() (datetime.datetime \u7684\u985e\u5225\u65b9\u6cd5)": [[183, "datetime.datetime.utcnow"]], "utcoffset() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.utcoffset"]], "utcoffset() (datetime.time \u7684\u65b9\u6cd5)": [[183, "datetime.time.utcoffset"]], "utcoffset() (datetime.timezone \u7684\u65b9\u6cd5)": [[183, "datetime.timezone.utcoffset"]], "utcoffset() (datetime.tzinfo \u7684\u65b9\u6cd5)": [[183, "datetime.tzinfo.utcoffset"]], "utctimetuple() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.utctimetuple"]], "weekday() (datetime.date \u7684\u65b9\u6cd5)": [[183, "datetime.date.weekday"]], "weekday() (datetime.datetime \u7684\u65b9\u6cd5)": [[183, "datetime.datetime.weekday"]], "year (datetime.date \u7684\u5c6c\u6027)": [[183, "datetime.date.year"]], "year (datetime.datetime \u7684\u5c6c\u6027)": [[183, "datetime.datetime.year"]], "close() (dbm.dumb.dumbdbm \u7684\u65b9\u6cd5)": [[184, "dbm.dumb.dumbdbm.close"]], "close() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[184, "dbm.gnu.gdbm.close"]], "close() (dbm.ndbm.ndbm \u7684\u65b9\u6cd5)": [[184, "dbm.ndbm.ndbm.close"]], "databases\uff08\u8cc7\u6599\u5eab\uff09": [[184, "index-0"]], "dbm": [[184, "module-dbm"]], "dbm.dumb": [[184, "module-dbm.dumb"]], "dbm.gnu": [[184, "module-dbm.gnu"], [330, "index-1"], [428, "index-32"]], "dbm.ndbm": [[184, "module-dbm.ndbm"], [330, "index-1"], [428, "index-32"]], "firstkey() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[184, "dbm.gnu.gdbm.firstkey"]], "library (\u65bc dbm.ndbm \u6a21\u7d44\u4e2d)": [[184, "dbm.ndbm.library"]], "nextkey() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[184, "dbm.gnu.gdbm.nextkey"]], "open() (\u65bc dbm \u6a21\u7d44\u4e2d)": [[184, "dbm.open"]], "open() (\u65bc dbm.dumb \u6a21\u7d44\u4e2d)": [[184, "dbm.dumb.open"]], "open() (\u65bc dbm.gnu \u6a21\u7d44\u4e2d)": [[184, "dbm.gnu.open"]], "open() (\u65bc dbm.ndbm \u6a21\u7d44\u4e2d)": [[184, "dbm.ndbm.open"]], "open_flags (\u65bc dbm.gnu \u6a21\u7d44\u4e2d)": [[184, "dbm.gnu.open_flags"]], "reorganize() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[184, "dbm.gnu.gdbm.reorganize"]], "sync() (dbm.dumb.dumbdbm \u7684\u65b9\u6cd5)": [[184, "dbm.dumb.dumbdbm.sync"]], "sync() (dbm.gnu.gdbm \u7684\u65b9\u6cd5)": [[184, "dbm.gnu.gdbm.sync"]], "whichdb() (\u65bc dbm \u6a21\u7d44\u4e2d)": [[184, "dbm.whichdb"]], "basiccontext (decimal \u4e2d\u7684\u985e\u5225)": [[186, "decimal.BasicContext"]], "clamped (decimal \u4e2d\u7684\u985e\u5225)": [[186, "decimal.Clamped"]], "context (decimal \u4e2d\u7684\u985e\u5225)": [[186, "decimal.Context"]], "decimal (decimal \u4e2d\u7684\u985e\u5225)": [[186, "decimal.Decimal"]], "decimalexception (decimal \u4e2d\u7684\u985e\u5225)": [[186, "decimal.DecimalException"]], "defaultcontext (decimal \u4e2d\u7684\u985e\u5225)": [[186, "decimal.DefaultContext"]], "divisionbyzero (decimal \u4e2d\u7684\u985e\u5225)": [[186, "decimal.DivisionByZero"]], "etiny() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.Etiny"]], "etop() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.Etop"]], "extendedcontext (decimal \u4e2d\u7684\u985e\u5225)": [[186, "decimal.ExtendedContext"]], "floatoperation (decimal \u4e2d\u7684\u985e\u5225)": [[186, "decimal.FloatOperation"]], "have_contextvar (\u65bc decimal \u6a21\u7d44\u4e2d)": [[186, "decimal.HAVE_CONTEXTVAR"]], "have_threads (\u65bc decimal \u6a21\u7d44\u4e2d)": [[186, "decimal.HAVE_THREADS"]], "inexact (decimal \u4e2d\u7684\u985e\u5225)": [[186, "decimal.Inexact"]], "invalidoperation (decimal \u4e2d\u7684\u985e\u5225)": [[186, "decimal.InvalidOperation"]], "max_emax (\u65bc decimal \u6a21\u7d44\u4e2d)": [[186, "decimal.MAX_EMAX"]], "max_prec (\u65bc decimal \u6a21\u7d44\u4e2d)": [[186, "decimal.MAX_PREC"]], "min_emin (\u65bc decimal \u6a21\u7d44\u4e2d)": [[186, "decimal.MIN_EMIN"]], "min_etiny (\u65bc decimal \u6a21\u7d44\u4e2d)": [[186, "decimal.MIN_ETINY"]], "overflow (decimal \u4e2d\u7684\u985e\u5225)": [[186, "decimal.Overflow"]], "round_05up (\u65bc decimal \u6a21\u7d44\u4e2d)": [[186, "decimal.ROUND_05UP"]], "round_ceiling (\u65bc decimal \u6a21\u7d44\u4e2d)": [[186, "decimal.ROUND_CEILING"]], "round_down (\u65bc decimal \u6a21\u7d44\u4e2d)": [[186, "decimal.ROUND_DOWN"]], "round_floor (\u65bc decimal \u6a21\u7d44\u4e2d)": [[186, "decimal.ROUND_FLOOR"]], "round_half_down (\u65bc decimal \u6a21\u7d44\u4e2d)": [[186, "decimal.ROUND_HALF_DOWN"]], "round_half_even (\u65bc decimal \u6a21\u7d44\u4e2d)": [[186, "decimal.ROUND_HALF_EVEN"]], "round_half_up (\u65bc decimal \u6a21\u7d44\u4e2d)": [[186, "decimal.ROUND_HALF_UP"]], "round_up (\u65bc decimal \u6a21\u7d44\u4e2d)": [[186, "decimal.ROUND_UP"]], "rounded (decimal \u4e2d\u7684\u985e\u5225)": [[186, "decimal.Rounded"]], "subnormal (decimal \u4e2d\u7684\u985e\u5225)": [[186, "decimal.Subnormal"]], "underflow (decimal \u4e2d\u7684\u985e\u5225)": [[186, "decimal.Underflow"]], "abs() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.abs"]], "add() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.add"]], "adjusted() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.adjusted"]], "as_integer_ratio() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.as_integer_ratio"]], "as_tuple() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.as_tuple"]], "canonical() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.canonical"]], "canonical() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.canonical"]], "clear_flags() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.clear_flags"]], "clear_traps() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.clear_traps"]], "compare() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.compare"]], "compare() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.compare"]], "compare_signal() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.compare_signal"]], "compare_signal() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.compare_signal"]], "compare_total() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.compare_total"]], "compare_total() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.compare_total"]], "compare_total_mag() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.compare_total_mag"]], "compare_total_mag() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.compare_total_mag"]], "conjugate() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.conjugate"]], "copy() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.copy"]], "copy_abs() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.copy_abs"]], "copy_abs() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.copy_abs"]], "copy_decimal() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.copy_decimal"]], "copy_negate() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.copy_negate"]], "copy_negate() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.copy_negate"]], "copy_sign() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.copy_sign"]], "copy_sign() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.copy_sign"]], "create_decimal() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.create_decimal"]], "create_decimal_from_float() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.create_decimal_from_float"]], "decimal": [[186, "module-decimal"]], "divide() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.divide"]], "divide_int() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.divide_int"]], "divmod() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.divmod"]], "exp() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.exp"]], "exp() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.exp"]], "fma() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.fma"]], "fma() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.fma"]], "from_float() (decimal.decimal \u7684\u985e\u5225\u65b9\u6cd5)": [[186, "decimal.Decimal.from_float"]], "getcontext() (\u65bc decimal \u6a21\u7d44\u4e2d)": [[186, "decimal.getcontext"]], "is_canonical() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.is_canonical"]], "is_canonical() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.is_canonical"]], "is_finite() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.is_finite"]], "is_finite() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.is_finite"]], "is_infinite() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.is_infinite"]], "is_infinite() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.is_infinite"]], "is_nan() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.is_nan"]], "is_nan() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.is_nan"]], "is_normal() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.is_normal"]], "is_normal() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.is_normal"]], "is_qnan() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.is_qnan"]], "is_qnan() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.is_qnan"]], "is_signed() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.is_signed"]], "is_signed() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.is_signed"]], "is_snan() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.is_snan"]], "is_snan() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.is_snan"]], "is_subnormal() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.is_subnormal"]], "is_subnormal() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.is_subnormal"]], "is_zero() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.is_zero"]], "is_zero() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.is_zero"]], "ln() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.ln"]], "ln() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.ln"]], "localcontext() (\u65bc decimal \u6a21\u7d44\u4e2d)": [[186, "decimal.localcontext"]], "log10() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.log10"]], "log10() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.log10"]], "logb() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.logb"]], "logb() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.logb"]], "logical_and() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.logical_and"]], "logical_and() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.logical_and"]], "logical_invert() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.logical_invert"]], "logical_invert() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.logical_invert"]], "logical_or() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.logical_or"]], "logical_or() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.logical_or"]], "logical_xor() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.logical_xor"]], "logical_xor() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.logical_xor"]], "max() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.max"]], "max() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.max"]], "max_mag() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.max_mag"]], "max_mag() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.max_mag"]], "min() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.min"]], "min() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.min"]], "min_mag() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.min_mag"]], "min_mag() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.min_mag"]], "minus() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.minus"]], "multiply() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.multiply"]], "next_minus() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.next_minus"]], "next_minus() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.next_minus"]], "next_plus() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.next_plus"]], "next_plus() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.next_plus"]], "next_toward() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.next_toward"]], "next_toward() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.next_toward"]], "normalize() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.normalize"]], "normalize() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.normalize"]], "number_class() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.number_class"]], "number_class() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.number_class"]], "plus() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.plus"]], "power() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.power"]], "quantize() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.quantize"]], "quantize() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.quantize"]], "radix() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.radix"]], "radix() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.radix"]], "remainder() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.remainder"]], "remainder_near() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.remainder_near"]], "remainder_near() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.remainder_near"]], "rotate() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.rotate"]], "rotate() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.rotate"]], "same_quantum() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.same_quantum"]], "same_quantum() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.same_quantum"]], "scaleb() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.scaleb"]], "scaleb() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.scaleb"]], "setcontext() (\u65bc decimal \u6a21\u7d44\u4e2d)": [[186, "decimal.setcontext"]], "shift() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.shift"]], "shift() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.shift"]], "sqrt() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.sqrt"]], "sqrt() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.sqrt"]], "subtract() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.subtract"]], "to_eng_string() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.to_eng_string"]], "to_eng_string() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.to_eng_string"]], "to_integral() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.to_integral"]], "to_integral_exact() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.to_integral_exact"]], "to_integral_exact() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.to_integral_exact"]], "to_integral_value() (decimal.decimal \u7684\u65b9\u6cd5)": [[186, "decimal.Decimal.to_integral_value"]], "to_sci_string() (decimal.context \u7684\u65b9\u6cd5)": [[186, "decimal.Context.to_sci_string"]], "dialog (tkinter.commondialog \u4e2d\u7684\u985e\u5225)": [[189, "tkinter.commondialog.Dialog"]], "dialog (tkinter.simpledialog \u4e2d\u7684\u985e\u5225)": [[189, "tkinter.simpledialog.Dialog"]], "directory (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[189, "tkinter.filedialog.Directory"]], "filedialog (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[189, "tkinter.filedialog.FileDialog"]], "loadfiledialog (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[189, "tkinter.filedialog.LoadFileDialog"]], "open (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[189, "tkinter.filedialog.Open"]], "saveas (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[189, "tkinter.filedialog.SaveAs"]], "savefiledialog (tkinter.filedialog \u4e2d\u7684\u985e\u5225)": [[189, "tkinter.filedialog.SaveFileDialog"]], "askdirectory() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[189, "tkinter.filedialog.askdirectory"]], "askfloat() (\u65bc tkinter.simpledialog \u6a21\u7d44\u4e2d)": [[189, "tkinter.simpledialog.askfloat"]], "askinteger() (\u65bc tkinter.simpledialog \u6a21\u7d44\u4e2d)": [[189, "tkinter.simpledialog.askinteger"]], "askopenfile() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[189, "tkinter.filedialog.askopenfile"]], "askopenfilename() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[189, "tkinter.filedialog.askopenfilename"]], "askopenfilenames() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[189, "tkinter.filedialog.askopenfilenames"]], "askopenfiles() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[189, "tkinter.filedialog.askopenfiles"]], "asksaveasfile() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[189, "tkinter.filedialog.asksaveasfile"]], "asksaveasfilename() (\u65bc tkinter.filedialog \u6a21\u7d44\u4e2d)": [[189, "tkinter.filedialog.asksaveasfilename"]], "askstring() (\u65bc tkinter.simpledialog \u6a21\u7d44\u4e2d)": [[189, "tkinter.simpledialog.askstring"]], "body() (tkinter.simpledialog.dialog \u7684\u65b9\u6cd5)": [[189, "tkinter.simpledialog.Dialog.body"]], "buttonbox() (tkinter.simpledialog.dialog \u7684\u65b9\u6cd5)": [[189, "tkinter.simpledialog.Dialog.buttonbox"]], "cancel_command() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[189, "tkinter.filedialog.FileDialog.cancel_command"]], "dirs_double_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[189, "tkinter.filedialog.FileDialog.dirs_double_event"]], "dirs_select_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[189, "tkinter.filedialog.FileDialog.dirs_select_event"]], "files_double_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[189, "tkinter.filedialog.FileDialog.files_double_event"]], "files_select_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[189, "tkinter.filedialog.FileDialog.files_select_event"]], "filter_command() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[189, "tkinter.filedialog.FileDialog.filter_command"]], "get_filter() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[189, "tkinter.filedialog.FileDialog.get_filter"]], "get_selection() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[189, "tkinter.filedialog.FileDialog.get_selection"]], "go() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[189, "tkinter.filedialog.FileDialog.go"]], "ok_command() (tkinter.filedialog.loadfiledialog \u7684\u65b9\u6cd5)": [[189, "tkinter.filedialog.LoadFileDialog.ok_command"]], "ok_command() (tkinter.filedialog.savefiledialog \u7684\u65b9\u6cd5)": [[189, "tkinter.filedialog.SaveFileDialog.ok_command"]], "ok_event() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[189, "tkinter.filedialog.FileDialog.ok_event"]], "quit() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[189, "tkinter.filedialog.FileDialog.quit"]], "set_filter() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[189, "tkinter.filedialog.FileDialog.set_filter"]], "set_selection() (tkinter.filedialog.filedialog \u7684\u65b9\u6cd5)": [[189, "tkinter.filedialog.FileDialog.set_selection"]], "show() (tkinter.commondialog.dialog \u7684\u65b9\u6cd5)": [[189, "tkinter.commondialog.Dialog.show"]], "tkinter.commondialog": [[189, "module-tkinter.commondialog"]], "tkinter.filedialog": [[189, "module-tkinter.filedialog"]], "tkinter.simpledialog": [[189, "module-tkinter.simpledialog"]], "differ (difflib \u4e2d\u7684\u985e\u5225)": [[190, "difflib.Differ"]], "htmldiff (difflib \u4e2d\u7684\u985e\u5225)": [[190, "difflib.HtmlDiff"]], "is_character_junk() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[190, "difflib.IS_CHARACTER_JUNK"]], "is_line_junk() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[190, "difflib.IS_LINE_JUNK"]], "sequencematcher (difflib \u4e2d\u7684\u985e\u5225)": [[190, "difflib.SequenceMatcher"]], "__init__() (difflib.htmldiff \u7684\u65b9\u6cd5)": [[190, "difflib.HtmlDiff.__init__"]], "compare() (difflib.differ \u7684\u65b9\u6cd5)": [[190, "difflib.Differ.compare"]], "context_diff() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[190, "difflib.context_diff"]], "diff_bytes() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[190, "difflib.diff_bytes"]], "difflib": [[190, "module-difflib"]], "find_longest_match() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[190, "difflib.SequenceMatcher.find_longest_match"]], "get_close_matches() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[190, "difflib.get_close_matches"]], "get_grouped_opcodes() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[190, "difflib.SequenceMatcher.get_grouped_opcodes"]], "get_matching_blocks() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[190, "difflib.SequenceMatcher.get_matching_blocks"]], "get_opcodes() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[190, "difflib.SequenceMatcher.get_opcodes"]], "make_file() (difflib.htmldiff \u7684\u65b9\u6cd5)": [[190, "difflib.HtmlDiff.make_file"]], "make_table() (difflib.htmldiff \u7684\u65b9\u6cd5)": [[190, "difflib.HtmlDiff.make_table"]], "ndiff() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[190, "difflib.ndiff"]], "quick_ratio() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[190, "difflib.SequenceMatcher.quick_ratio"]], "ratio() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[190, "difflib.SequenceMatcher.ratio"]], "real_quick_ratio() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[190, "difflib.SequenceMatcher.real_quick_ratio"]], "restore() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[190, "difflib.restore"]], "set_seq1() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[190, "difflib.SequenceMatcher.set_seq1"]], "set_seq2() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[190, "difflib.SequenceMatcher.set_seq2"]], "set_seqs() (difflib.sequencematcher \u7684\u65b9\u6cd5)": [[190, "difflib.SequenceMatcher.set_seqs"]], "unified_diff() (\u65bc difflib \u6a21\u7d44\u4e2d)": [[190, "difflib.unified_diff"]], "before_async_with (opcode)": [[191, "opcode-BEFORE_ASYNC_WITH"]], "before_with (opcode)": [[191, "opcode-BEFORE_WITH"]], "binary_op (opcode)": [[191, "opcode-BINARY_OP"]], "binary_slice (opcode)": [[191, "opcode-BINARY_SLICE"]], "binary_subscr (opcode)": [[191, "opcode-BINARY_SUBSCR"]], "build_const_key_map (opcode)": [[191, "opcode-BUILD_CONST_KEY_MAP"]], "build_list (opcode)": [[191, "opcode-BUILD_LIST"]], "build_map (opcode)": [[191, "opcode-BUILD_MAP"]], "build_set (opcode)": [[191, "opcode-BUILD_SET"]], "build_slice (opcode)": [[191, "opcode-BUILD_SLICE"]], "build_string (opcode)": [[191, "opcode-BUILD_STRING"]], "build_tuple (opcode)": [[191, "opcode-BUILD_TUPLE"]], "bytecode (dis \u4e2d\u7684\u985e\u5225)": [[191, "dis.Bytecode"]], "bytecode.codeobj (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.Bytecode.codeobj"]], "bytecode.first_line (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.Bytecode.first_line"]], "cache (opcode)": [[191, "opcode-CACHE"]], "call (opcode)": [[191, "opcode-CALL"]], "call_function_ex (opcode)": [[191, "opcode-CALL_FUNCTION_EX"]], "call_intrinsic_1 (opcode)": [[191, "opcode-CALL_INTRINSIC_1"]], "call_intrinsic_2 (opcode)": [[191, "opcode-CALL_INTRINSIC_2"]], "check_eg_match (opcode)": [[191, "opcode-CHECK_EG_MATCH"]], "check_exc_match (opcode)": [[191, "opcode-CHECK_EXC_MATCH"]], "cleanup_throw (opcode)": [[191, "opcode-CLEANUP_THROW"]], "compare_op (opcode)": [[191, "opcode-COMPARE_OP"]], "contains_op (opcode)": [[191, "opcode-CONTAINS_OP"]], "copy (opcode)": [[191, "opcode-COPY"]], "copy_free_vars (opcode)": [[191, "opcode-COPY_FREE_VARS"]], "delete_attr (opcode)": [[191, "opcode-DELETE_ATTR"]], "delete_deref (opcode)": [[191, "opcode-DELETE_DEREF"]], "delete_fast (opcode)": [[191, "opcode-DELETE_FAST"]], "delete_global (opcode)": [[191, "opcode-DELETE_GLOBAL"]], "delete_name (opcode)": [[191, "opcode-DELETE_NAME"]], "delete_subscr (opcode)": [[191, "opcode-DELETE_SUBSCR"]], "dict_merge (opcode)": [[191, "opcode-DICT_MERGE"]], "dict_update (opcode)": [[191, "opcode-DICT_UPDATE"]], "end_async_for (opcode)": [[191, "opcode-END_ASYNC_FOR"]], "end_for (opcode)": [[191, "opcode-END_FOR"]], "end_send (opcode)": [[191, "opcode-END_SEND"]], "extended_arg (opcode)": [[191, "opcode-EXTENDED_ARG"]], "format_value (opcode)": [[191, "opcode-FORMAT_VALUE"]], "for_iter (opcode)": [[191, "opcode-FOR_ITER"]], "get_aiter (opcode)": [[191, "opcode-GET_AITER"]], "get_anext (opcode)": [[191, "opcode-GET_ANEXT"]], "get_awaitable (opcode)": [[191, "opcode-GET_AWAITABLE"]], "get_iter (opcode)": [[191, "opcode-GET_ITER"]], "get_len (opcode)": [[191, "opcode-GET_LEN"]], "get_yield_from_iter (opcode)": [[191, "opcode-GET_YIELD_FROM_ITER"]], "have_argument (opcode)": [[191, "opcode-HAVE_ARGUMENT"]], "import_from (opcode)": [[191, "opcode-IMPORT_FROM"]], "import_name (opcode)": [[191, "opcode-IMPORT_NAME"]], "is_op (opcode)": [[191, "opcode-IS_OP"]], "instruction (dis \u4e2d\u7684\u985e\u5225)": [[191, "dis.Instruction"]], "instruction.arg (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.Instruction.arg"]], "instruction.argrepr (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.Instruction.argrepr"]], "instruction.argval (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.Instruction.argval"]], "instruction.is_jump_target (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.Instruction.is_jump_target"]], "instruction.offset (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.Instruction.offset"]], "instruction.opcode (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.Instruction.opcode"]], "instruction.opname (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.Instruction.opname"]], "instruction.positions (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.Instruction.positions"]], "instruction.starts_line (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.Instruction.starts_line"]], "jump (opcode)": [[191, "opcode-JUMP"]], "jump_backward (opcode)": [[191, "opcode-JUMP_BACKWARD"]], "jump_backward_no_interrupt (opcode)": [[191, "opcode-JUMP_BACKWARD_NO_INTERRUPT"]], "jump_forward (opcode)": [[191, "opcode-JUMP_FORWARD"]], "jump_no_interrupt (opcode)": [[191, "opcode-JUMP_NO_INTERRUPT"]], "kw_names (opcode)": [[191, "opcode-KW_NAMES"]], "list_append (opcode)": [[191, "opcode-LIST_APPEND"]], "list_extend (opcode)": [[191, "opcode-LIST_EXTEND"]], "load_assertion_error (opcode)": [[191, "opcode-LOAD_ASSERTION_ERROR"]], "load_attr (opcode)": [[191, "opcode-LOAD_ATTR"]], "load_build_class (opcode)": [[191, "opcode-LOAD_BUILD_CLASS"]], "load_closure (opcode)": [[191, "opcode-LOAD_CLOSURE"]], "load_const (opcode)": [[191, "opcode-LOAD_CONST"]], "load_deref (opcode)": [[191, "opcode-LOAD_DEREF"]], "load_fast (opcode)": [[191, "opcode-LOAD_FAST"]], "load_fast_and_clear (opcode)": [[191, "opcode-LOAD_FAST_AND_CLEAR"]], "load_fast_check (opcode)": [[191, "opcode-LOAD_FAST_CHECK"]], "load_from_dict_or_deref (opcode)": [[191, "opcode-LOAD_FROM_DICT_OR_DEREF"]], "load_from_dict_or_globals (opcode)": [[191, "opcode-LOAD_FROM_DICT_OR_GLOBALS"]], "load_global (opcode)": [[191, "opcode-LOAD_GLOBAL"]], "load_locals (opcode)": [[191, "opcode-LOAD_LOCALS"]], "load_method (opcode)": [[191, "opcode-LOAD_METHOD"]], "load_name (opcode)": [[191, "opcode-LOAD_NAME"]], "load_super_attr (opcode)": [[191, "opcode-LOAD_SUPER_ATTR"]], "make_cell (opcode)": [[191, "opcode-MAKE_CELL"]], "make_function (opcode)": [[191, "opcode-MAKE_FUNCTION"]], "map_add (opcode)": [[191, "opcode-MAP_ADD"]], "match_class (opcode)": [[191, "opcode-MATCH_CLASS"]], "match_keys (opcode)": [[191, "opcode-MATCH_KEYS"]], "match_mapping (opcode)": [[191, "opcode-MATCH_MAPPING"]], "match_sequence (opcode)": [[191, "opcode-MATCH_SEQUENCE"]], "nop (opcode)": [[191, "opcode-NOP"]], "pep 626": [[191, "index-0"], [428, "index-62"], [472, "index-84"], [474, "index-30"], [483, "index-42"]], "pop_block (opcode)": [[191, "opcode-POP_BLOCK"]], "pop_except (opcode)": [[191, "opcode-POP_EXCEPT"]], "pop_jump_if_false (opcode)": [[191, "opcode-POP_JUMP_IF_FALSE"]], "pop_jump_if_none (opcode)": [[191, "opcode-POP_JUMP_IF_NONE"]], "pop_jump_if_not_none (opcode)": [[191, "opcode-POP_JUMP_IF_NOT_NONE"]], "pop_jump_if_true (opcode)": [[191, "opcode-POP_JUMP_IF_TRUE"]], "pop_top (opcode)": [[191, "opcode-POP_TOP"]], "push_exc_info (opcode)": [[191, "opcode-PUSH_EXC_INFO"]], "push_null (opcode)": [[191, "opcode-PUSH_NULL"]], "positions (dis \u4e2d\u7684\u985e\u5225)": [[191, "dis.Positions"]], "positions.col_offset (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.Positions.col_offset"]], "positions.end_col_offset (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.Positions.end_col_offset"]], "positions.end_lineno (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.Positions.end_lineno"]], "positions.lineno (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.Positions.lineno"]], "raise_varargs (opcode)": [[191, "opcode-RAISE_VARARGS"]], "reraise (opcode)": [[191, "opcode-RERAISE"]], "resume (opcode)": [[191, "opcode-RESUME"]], "return_const (opcode)": [[191, "opcode-RETURN_CONST"]], "return_generator (opcode)": [[191, "opcode-RETURN_GENERATOR"]], "return_value (opcode)": [[191, "opcode-RETURN_VALUE"]], "send (opcode)": [[191, "opcode-SEND"]], "setup_annotations (opcode)": [[191, "opcode-SETUP_ANNOTATIONS"]], "setup_cleanup (opcode)": [[191, "opcode-SETUP_CLEANUP"]], "setup_finally (opcode)": [[191, "opcode-SETUP_FINALLY"]], "setup_with (opcode)": [[191, "opcode-SETUP_WITH"]], "set_add (opcode)": [[191, "opcode-SET_ADD"]], "set_update (opcode)": [[191, "opcode-SET_UPDATE"]], "store_attr (opcode)": [[191, "opcode-STORE_ATTR"]], "store_deref (opcode)": [[191, "opcode-STORE_DEREF"]], "store_fast (opcode)": [[191, "opcode-STORE_FAST"]], "store_global (opcode)": [[191, "opcode-STORE_GLOBAL"]], "store_name (opcode)": [[191, "opcode-STORE_NAME"]], "store_slice (opcode)": [[191, "opcode-STORE_SLICE"]], "store_subscr (opcode)": [[191, "opcode-STORE_SUBSCR"]], "swap (opcode)": [[191, "opcode-SWAP"]], "unary_invert (opcode)": [[191, "opcode-UNARY_INVERT"]], "unary_negative (opcode)": [[191, "opcode-UNARY_NEGATIVE"]], "unary_not (opcode)": [[191, "opcode-UNARY_NOT"]], "unpack_ex (opcode)": [[191, "opcode-UNPACK_EX"]], "unpack_sequence (opcode)": [[191, "opcode-UNPACK_SEQUENCE"]], "with_except_start (opcode)": [[191, "opcode-WITH_EXCEPT_START"]], "yield_value (opcode)": [[191, "opcode-YIELD_VALUE"]], "cmp_op (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.cmp_op"]], "code_info() (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.code_info"]], "dis": [[191, "module-dis"]], "dis \u547d\u4ee4\u5217\u9078\u9805": [[191, "cmdoption-dis-h"]], "dis() (dis.bytecode \u7684\u65b9\u6cd5)": [[191, "dis.Bytecode.dis"]], "dis() (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.dis"]], "disassemble() (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.disassemble"]], "disco() (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.disco"]], "distb() (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.distb"]], "findlabels() (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.findlabels"]], "findlinestarts() (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.findlinestarts"]], "from_traceback() (dis.bytecode \u7684\u985e\u5225\u65b9\u6cd5)": [[191, "dis.Bytecode.from_traceback"]], "get_instructions() (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.get_instructions"]], "hasarg (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.hasarg"]], "hascompare (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.hascompare"]], "hasconst (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.hasconst"]], "hasexc (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.hasexc"]], "hasfree (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.hasfree"]], "hasjabs (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.hasjabs"]], "hasjrel (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.hasjrel"]], "haslocal (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.haslocal"]], "hasname (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.hasname"]], "info() (dis.bytecode \u7684\u65b9\u6cd5)": [[191, "dis.Bytecode.info"]], "opmap (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.opmap"]], "opname (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.opname"]], "show_code() (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.show_code"]], "stack_effect() (\u65bc dis \u6a21\u7d44\u4e2d)": [[191, "dis.stack_effect"]], "# \uff08\u4e95\u5b57\u865f\uff09": [[193, "index-4"], [319, "index-38"], [334, "index-2"], [344, "index-37"], [344, "index-47"], [345, "index-7"], [435, "index-4"], [435, "index-5"]], "- \uff08\u6e1b\u865f\uff09": [[193, "index-4"], [220, "index-2"], [231, "index-1"], [319, "index-11"], [344, "index-13"], [344, "index-37"], [344, "index-47"], [345, "index-4"], [430, "index-60"], [430, "index-70"]], "<blankline>": [[193, "index-2"]], "comparison_flags (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.COMPARISON_FLAGS"]], "dont_accept_blankline (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.DONT_ACCEPT_BLANKLINE"]], "dont_accept_true_for_1 (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.DONT_ACCEPT_TRUE_FOR_1"]], "debugrunner (doctest \u4e2d\u7684\u985e\u5225)": [[193, "doctest.DebugRunner"]], "docfilesuite() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.DocFileSuite"]], "doctest (doctest \u4e2d\u7684\u985e\u5225)": [[193, "doctest.DocTest"]], "doctestfailure": [[193, "doctest.DocTestFailure"]], "doctestfinder (doctest \u4e2d\u7684\u985e\u5225)": [[193, "doctest.DocTestFinder"]], "doctestparser (doctest \u4e2d\u7684\u985e\u5225)": [[193, "doctest.DocTestParser"]], "doctestrunner (doctest \u4e2d\u7684\u985e\u5225)": [[193, "doctest.DocTestRunner"]], "doctestsuite() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.DocTestSuite"]], "ellipsis (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.ELLIPSIS"]], "example (doctest \u4e2d\u7684\u985e\u5225)": [[193, "doctest.Example"]], "fail_fast (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.FAIL_FAST"]], "ignore_exception_detail (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.IGNORE_EXCEPTION_DETAIL"]], "normalize_whitespace (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.NORMALIZE_WHITESPACE"]], "outputchecker (doctest \u4e2d\u7684\u985e\u5225)": [[193, "doctest.OutputChecker"]], "reporting_flags (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.REPORTING_FLAGS"]], "report_cdiff (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.REPORT_CDIFF"]], "report_ndiff (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.REPORT_NDIFF"]], "report_only_first_failure (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.REPORT_ONLY_FIRST_FAILURE"]], "report_udiff (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.REPORT_UDIFF"]], "skip (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.SKIP"]], "unexpectedexception": [[193, "doctest.UnexpectedException"]], "check_output() (doctest.outputchecker \u7684\u65b9\u6cd5)": [[193, "doctest.OutputChecker.check_output"]], "debug() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.debug"]], "debug_src() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.debug_src"]], "docstring (doctest.doctest \u7684\u5c6c\u6027)": [[193, "doctest.DocTest.docstring"]], "doctest": [[193, "module-doctest"]], "example (doctest.doctestfailure \u7684\u5c6c\u6027)": [[193, "doctest.DocTestFailure.example"]], "example (doctest.unexpectedexception \u7684\u5c6c\u6027)": [[193, "doctest.UnexpectedException.example"]], "examples (doctest.doctest \u7684\u5c6c\u6027)": [[193, "doctest.DocTest.examples"]], "exc_info (doctest.unexpectedexception \u7684\u5c6c\u6027)": [[193, "doctest.UnexpectedException.exc_info"]], "exc_msg (doctest.example \u7684\u5c6c\u6027)": [[193, "doctest.Example.exc_msg"]], "failureexception": [[193, "doctest.failureException"]], "filename (doctest.doctest \u7684\u5c6c\u6027)": [[193, "doctest.DocTest.filename"]], "find() (doctest.doctestfinder \u7684\u65b9\u6cd5)": [[193, "doctest.DocTestFinder.find"]], "get_doctest() (doctest.doctestparser \u7684\u65b9\u6cd5)": [[193, "doctest.DocTestParser.get_doctest"]], "get_examples() (doctest.doctestparser \u7684\u65b9\u6cd5)": [[193, "doctest.DocTestParser.get_examples"]], "globs (doctest.doctest \u7684\u5c6c\u6027)": [[193, "doctest.DocTest.globs"]], "got (doctest.doctestfailure \u7684\u5c6c\u6027)": [[193, "doctest.DocTestFailure.got"]], "indent (doctest.example \u7684\u5c6c\u6027)": [[193, "doctest.Example.indent"]], "interpreter prompt\uff08\u76f4\u8b6f\u5668\u63d0\u793a\uff09": [[193, "index-0"], [352, "index-27"]], "lineno (doctest.doctest \u7684\u5c6c\u6027)": [[193, "doctest.DocTest.lineno"]], "lineno (doctest.example \u7684\u5c6c\u6027)": [[193, "doctest.Example.lineno"]], "marker\uff08\u6a19\u8a18\uff09": [[193, "index-1"], [381, "index-1"]], "name (doctest.doctest \u7684\u5c6c\u6027)": [[193, "doctest.DocTest.name"]], "options (doctest.example \u7684\u5c6c\u6027)": [[193, "doctest.Example.options"]], "output_difference() (doctest.outputchecker \u7684\u65b9\u6cd5)": [[193, "doctest.OutputChecker.output_difference"]], "parse() (doctest.doctestparser \u7684\u65b9\u6cd5)": [[193, "doctest.DocTestParser.parse"]], "register_optionflag() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.register_optionflag"]], "report_failure() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[193, "doctest.DocTestRunner.report_failure"]], "report_start() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[193, "doctest.DocTestRunner.report_start"]], "report_success() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[193, "doctest.DocTestRunner.report_success"]], "report_unexpected_exception() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[193, "doctest.DocTestRunner.report_unexpected_exception"]], "run() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[193, "doctest.DocTestRunner.run"]], "run_docstring_examples() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.run_docstring_examples"]], "script_from_examples() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.script_from_examples"]], "set_unittest_reportflags() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.set_unittest_reportflags"]], "source (doctest.example \u7684\u5c6c\u6027)": [[193, "doctest.Example.source"]], "summarize() (doctest.doctestrunner \u7684\u65b9\u6cd5)": [[193, "doctest.DocTestRunner.summarize"]], "test (doctest.doctestfailure \u7684\u5c6c\u6027)": [[193, "doctest.DocTestFailure.test"]], "test (doctest.unexpectedexception \u7684\u5c6c\u6027)": [[193, "doctest.UnexpectedException.test"]], "testfile() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.testfile"]], "testmod() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.testmod"]], "testsource() (\u65bc doctest \u6a21\u7d44\u4e2d)": [[193, "doctest.testsource"]], "want (doctest.example \u7684\u5c6c\u6027)": [[193, "doctest.Example.want"]], "\u65bc doctests \u4e2d": [[193, "index-3"], [193, "index-4"]], "rfc 2046": [[194, "index-4"], [197, "index-0"], [202, "index-5"]], "rfc 2047": [[194, "index-5"], [202, "index-11"], [202, "index-13"], [202, "index-6"], [202, "index-8"], [203, "index-1"], [203, "index-4"], [203, "index-6"], [208, "index-3"], [208, "index-4"], [209, "index-1"], [475, "index-11"], [475, "index-8"]], "rfc 2183": [[194, "index-6"], [196, "index-11"], [205, "index-10"]], "rfc 2231": [[194, "index-7"], [196, "index-10"], [196, "index-2"], [196, "index-3"], [196, "index-7"], [196, "index-8"], [202, "index-7"], [205, "index-4"], [205, "index-5"], [205, "index-9"], [209, "index-5"], [209, "index-6"], [209, "index-7"], [209, "index-8"], [209, "index-9"]], "rfc 2821": [[194, "index-0"]], "rfc 5322": [[194, "index-1"], [196, "index-0"], [199, "index-0"], [201, "index-0"], [201, "index-1"], [203, "index-0"], [203, "index-11"], [203, "index-12"], [203, "index-14"], [203, "index-2"], [203, "index-3"], [203, "index-5"], [203, "index-7"], [203, "index-8"], [205, "index-0"], [205, "index-2"], [207, "index-0"], [208, "index-0"], [208, "index-1"], [208, "index-2"], [208, "index-5"], [208, "index-6"], [208, "index-9"], [335, "index-11"]], "rfc 6532": [[194, "index-2"], [205, "index-1"], [207, "index-1"], [208, "index-7"], [478, "index-31"]], "email": [[194, "module-email"]], "charset (email.charset \u4e2d\u7684\u985e\u5225)": [[195, "email.charset.Charset"]], "__eq__() (email.charset.charset \u7684\u65b9\u6cd5)": [[195, "email.charset.Charset.__eq__"]], "__ne__() (email.charset.charset \u7684\u65b9\u6cd5)": [[195, "email.charset.Charset.__ne__"]], "__str__() (email.charset.charset \u7684\u65b9\u6cd5)": [[195, "email.charset.Charset.__str__"]], "add_alias() (\u65bc email.charset \u6a21\u7d44\u4e2d)": [[195, "email.charset.add_alias"]], "add_charset() (\u65bc email.charset \u6a21\u7d44\u4e2d)": [[195, "email.charset.add_charset"]], "add_codec() (\u65bc email.charset \u6a21\u7d44\u4e2d)": [[195, "email.charset.add_codec"]], "body_encode() (email.charset.charset \u7684\u65b9\u6cd5)": [[195, "email.charset.Charset.body_encode"]], "body_encoding (email.charset.charset \u7684\u5c6c\u6027)": [[195, "email.charset.Charset.body_encoding"]], "email.charset": [[195, "module-email.charset"]], "get_body_encoding() (email.charset.charset \u7684\u65b9\u6cd5)": [[195, "email.charset.Charset.get_body_encoding"]], "get_output_charset() (email.charset.charset \u7684\u65b9\u6cd5)": [[195, "email.charset.Charset.get_output_charset"]], "header_encode() (email.charset.charset \u7684\u65b9\u6cd5)": [[195, "email.charset.Charset.header_encode"]], "header_encode_lines() (email.charset.charset \u7684\u65b9\u6cd5)": [[195, "email.charset.Charset.header_encode_lines"]], "header_encoding (email.charset.charset \u7684\u5c6c\u6027)": [[195, "email.charset.Charset.header_encoding"]], "input_charset (email.charset.charset \u7684\u5c6c\u6027)": [[195, "email.charset.Charset.input_charset"]], "input_codec (email.charset.charset \u7684\u5c6c\u6027)": [[195, "email.charset.Charset.input_codec"]], "output_charset (email.charset.charset \u7684\u5c6c\u6027)": [[195, "email.charset.Charset.output_charset"]], "output_codec (email.charset.charset \u7684\u5c6c\u6027)": [[195, "email.charset.Charset.output_codec"]], "message (email.message \u4e2d\u7684\u985e\u5225)": [[196, "email.message.Message"]], "rfc 2822": [[196, "index-1"], [202, "index-0"], [202, "index-10"], [202, "index-12"], [202, "index-2"], [202, "index-3"], [202, "index-9"], [209, "index-0"], [209, "index-10"], [209, "index-2"], [209, "index-3"], [209, "index-4"], [242, "index-2"], [245, "index-2"], [271, "index-0"], [366, "index-10"], [366, "index-22"], [451, "index-3"], [464, "index-20"]], "__bytes__() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.__bytes__"]], "__contains__() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.__contains__"]], "__delitem__() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.__delitem__"]], "__getitem__() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.__getitem__"]], "__len__() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.__len__"]], "__setitem__() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.__setitem__"]], "__str__() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.__str__"]], "add_header() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.add_header"]], "as_bytes() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.as_bytes"]], "as_string() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.as_string"]], "attach() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.attach"]], "defects (email.message.message \u7684\u5c6c\u6027)": [[196, "email.message.Message.defects"]], "del_param() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.del_param"]], "epilogue (email.message.message \u7684\u5c6c\u6027)": [[196, "email.message.Message.epilogue"]], "get() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.get"]], "get_all() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.get_all"]], "get_boundary() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.get_boundary"]], "get_charset() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.get_charset"]], "get_charsets() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.get_charsets"]], "get_content_charset() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.get_content_charset"]], "get_content_disposition() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.get_content_disposition"]], "get_content_maintype() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.get_content_maintype"]], "get_content_subtype() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.get_content_subtype"]], "get_content_type() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.get_content_type"]], "get_default_type() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.get_default_type"]], "get_filename() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.get_filename"]], "get_param() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.get_param"]], "get_params() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.get_params"]], "get_payload() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.get_payload"]], "get_unixfrom() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.get_unixfrom"]], "is_multipart() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.is_multipart"]], "items() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.items"]], "keys() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.keys"]], "preamble (email.message.message \u7684\u5c6c\u6027)": [[196, "email.message.Message.preamble"]], "replace_header() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.replace_header"]], "set_boundary() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.set_boundary"]], "set_charset() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.set_charset"]], "set_default_type() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.set_default_type"]], "set_param() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.set_param"]], "set_payload() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.set_payload"]], "set_type() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.set_type"]], "set_unixfrom() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.set_unixfrom"]], "values() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.values"]], "walk() (email.message.message \u7684\u65b9\u6cd5)": [[196, "email.message.Message.walk"]], "contentmanager (email.contentmanager \u4e2d\u7684\u985e\u5225)": [[197, "email.contentmanager.ContentManager"]], "add_get_handler() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[197, "email.contentmanager.ContentManager.add_get_handler"]], "add_set_handler() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[197, "email.contentmanager.ContentManager.add_set_handler"]], "email.contentmanager": [[197, "module-email.contentmanager"]], "get_content() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[197, "email.contentmanager.ContentManager.get_content"]], "get_content() (\u65bc email.contentmanager \u6a21\u7d44\u4e2d)": [[197, "email.contentmanager.get_content"]], "raw_data_manager (\u65bc email.contentmanager \u6a21\u7d44\u4e2d)": [[197, "email.contentmanager.raw_data_manager"]], "set_content() (email.contentmanager.contentmanager \u7684\u65b9\u6cd5)": [[197, "email.contentmanager.ContentManager.set_content"]], "set_content() (\u65bc email.contentmanager \u6a21\u7d44\u4e2d)": [[197, "email.contentmanager.set_content"]], "email.encoders": [[198, "module-email.encoders"]], "encode_7or8bit() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[198, "email.encoders.encode_7or8bit"]], "encode_base64() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[198, "email.encoders.encode_base64"]], "encode_noop() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[198, "email.encoders.encode_noop"]], "encode_quopri() (\u65bc email.encoders \u6a21\u7d44\u4e2d)": [[198, "email.encoders.encode_quopri"]], "boundaryerror": [[199, "email.errors.BoundaryError"]], "headerdefect": [[199, "email.errors.HeaderDefect"]], "headerparseerror": [[199, "email.errors.HeaderParseError"]], "messagedefect": [[199, "email.errors.MessageDefect"]], "messageerror": [[199, "email.errors.MessageError"]], "messageparseerror": [[199, "email.errors.MessageParseError"]], "multipartconversionerror": [[199, "email.errors.MultipartConversionError"]], "email.errors": [[199, "module-email.errors"]], "rfc 822": [[200, "index-0"], [202, "index-1"], [230, "index-9"], [242, "index-6"], [335, "index-10"], [335, "index-12"], [335, "index-6"], [335, "index-9"], [366, "index-19"], [366, "index-20"], [464, "index-21"]], "bytesgenerator (email.generator \u4e2d\u7684\u985e\u5225)": [[201, "email.generator.BytesGenerator"]], "decodedgenerator (email.generator \u4e2d\u7684\u985e\u5225)": [[201, "email.generator.DecodedGenerator"]], "generator (email.generator \u4e2d\u7684\u985e\u5225)": [[201, "email.generator.Generator"]], "clone() (email.generator.bytesgenerator \u7684\u65b9\u6cd5)": [[201, "email.generator.BytesGenerator.clone"]], "clone() (email.generator.generator \u7684\u65b9\u6cd5)": [[201, "email.generator.Generator.clone"]], "email.generator": [[201, "module-email.generator"]], "flatten() (email.generator.bytesgenerator \u7684\u65b9\u6cd5)": [[201, "email.generator.BytesGenerator.flatten"]], "flatten() (email.generator.generator \u7684\u65b9\u6cd5)": [[201, "email.generator.Generator.flatten"]], "write() (email.generator.bytesgenerator \u7684\u65b9\u6cd5)": [[201, "email.generator.BytesGenerator.write"]], "write() (email.generator.generator \u7684\u65b9\u6cd5)": [[201, "email.generator.Generator.write"]], "header (email.header \u4e2d\u7684\u985e\u5225)": [[202, "email.header.Header"]], "__eq__() (email.header.header \u7684\u65b9\u6cd5)": [[202, "email.header.Header.__eq__"]], "__ne__() (email.header.header \u7684\u65b9\u6cd5)": [[202, "email.header.Header.__ne__"]], "__str__() (email.header.header \u7684\u65b9\u6cd5)": [[202, "email.header.Header.__str__"]], "append() (email.header.header \u7684\u65b9\u6cd5)": [[202, "email.header.Header.append"]], "decode_header() (\u65bc email.header \u6a21\u7d44\u4e2d)": [[202, "email.header.decode_header"]], "email.header": [[202, "module-email.header"]], "encode() (email.header.header \u7684\u65b9\u6cd5)": [[202, "email.header.Header.encode"]], "make_header() (\u65bc email.header \u6a21\u7d44\u4e2d)": [[202, "email.header.make_header"]], "address (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[203, "email.headerregistry.Address"]], "addressheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[203, "email.headerregistry.AddressHeader"]], "baseheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[203, "email.headerregistry.BaseHeader"]], "contentdispositionheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[203, "email.headerregistry.ContentDispositionHeader"]], "contenttransferencoding (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[203, "email.headerregistry.ContentTransferEncoding"]], "contenttypeheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[203, "email.headerregistry.ContentTypeHeader"]], "dateheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[203, "email.headerregistry.DateHeader"]], "group (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[203, "email.headerregistry.Group"]], "headerregistry (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[203, "email.headerregistry.HeaderRegistry"]], "mimeversionheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[203, "email.headerregistry.MIMEVersionHeader"]], "parameterizedmimeheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[203, "email.headerregistry.ParameterizedMIMEHeader"]], "rfc 5321": [[203, "index-13"], [476, "index-26"]], "singleaddressheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[203, "email.headerregistry.SingleAddressHeader"]], "unstructuredheader (email.headerregistry \u4e2d\u7684\u985e\u5225)": [[203, "email.headerregistry.UnstructuredHeader"]], "__call__() (email.headerregistry.headerregistry \u7684\u65b9\u6cd5)": [[203, "email.headerregistry.HeaderRegistry.__call__"]], "__getitem__() (email.headerregistry.headerregistry \u7684\u65b9\u6cd5)": [[203, "email.headerregistry.HeaderRegistry.__getitem__"]], "__str__() (email.headerregistry.address \u7684\u65b9\u6cd5)": [[203, "email.headerregistry.Address.__str__"]], "__str__() (email.headerregistry.group \u7684\u65b9\u6cd5)": [[203, "email.headerregistry.Group.__str__"]], "addr_spec (email.headerregistry.address \u7684\u5c6c\u6027)": [[203, "email.headerregistry.Address.addr_spec"]], "address (email.headerregistry.singleaddressheader \u7684\u5c6c\u6027)": [[203, "email.headerregistry.SingleAddressHeader.address"]], "addresses (email.headerregistry.addressheader \u7684\u5c6c\u6027)": [[203, "email.headerregistry.AddressHeader.addresses"]], "addresses (email.headerregistry.group \u7684\u5c6c\u6027)": [[203, "email.headerregistry.Group.addresses"]], "content_disposition (email.headerregistry.contentdispositionheader \u7684\u5c6c\u6027)": [[203, "email.headerregistry.ContentDispositionHeader.content_disposition"]], "content_type (email.headerregistry.contenttypeheader \u7684\u5c6c\u6027)": [[203, "email.headerregistry.ContentTypeHeader.content_type"]], "cte (email.headerregistry.contenttransferencoding \u7684\u5c6c\u6027)": [[203, "email.headerregistry.ContentTransferEncoding.cte"]], "datetime (email.headerregistry.dateheader \u7684\u5c6c\u6027)": [[203, "email.headerregistry.DateHeader.datetime"]], "defects (email.headerregistry.baseheader \u7684\u5c6c\u6027)": [[203, "email.headerregistry.BaseHeader.defects"]], "display_name (email.headerregistry.address \u7684\u5c6c\u6027)": [[203, "email.headerregistry.Address.display_name"]], "display_name (email.headerregistry.group \u7684\u5c6c\u6027)": [[203, "email.headerregistry.Group.display_name"]], "domain (email.headerregistry.address \u7684\u5c6c\u6027)": [[203, "email.headerregistry.Address.domain"]], "email.headerregistry": [[203, "module-email.headerregistry"]], "fold() (email.headerregistry.baseheader \u7684\u65b9\u6cd5)": [[203, "email.headerregistry.BaseHeader.fold"]], "groups (email.headerregistry.addressheader \u7684\u5c6c\u6027)": [[203, "email.headerregistry.AddressHeader.groups"]], "maintype (email.headerregistry.contenttypeheader \u7684\u5c6c\u6027)": [[203, "email.headerregistry.ContentTypeHeader.maintype"]], "major (email.headerregistry.mimeversionheader \u7684\u5c6c\u6027)": [[203, "email.headerregistry.MIMEVersionHeader.major"]], "map_to_type() (email.headerregistry.headerregistry \u7684\u65b9\u6cd5)": [[203, "email.headerregistry.HeaderRegistry.map_to_type"]], "max_count (email.headerregistry.baseheader \u7684\u5c6c\u6027)": [[203, "email.headerregistry.BaseHeader.max_count"]], "minor (email.headerregistry.mimeversionheader \u7684\u5c6c\u6027)": [[203, "email.headerregistry.MIMEVersionHeader.minor"]], "name (email.headerregistry.baseheader \u7684\u5c6c\u6027)": [[203, "email.headerregistry.BaseHeader.name"]], "params (email.headerregistry.parameterizedmimeheader \u7684\u5c6c\u6027)": [[203, "email.headerregistry.ParameterizedMIMEHeader.params"]], "subtype (email.headerregistry.contenttypeheader \u7684\u5c6c\u6027)": [[203, "email.headerregistry.ContentTypeHeader.subtype"]], "username (email.headerregistry.address \u7684\u5c6c\u6027)": [[203, "email.headerregistry.Address.username"]], "version (email.headerregistry.mimeversionheader \u7684\u5c6c\u6027)": [[203, "email.headerregistry.MIMEVersionHeader.version"]], "_structure() (\u65bc email.iterators \u6a21\u7d44\u4e2d)": [[204, "email.iterators._structure"]], "body_line_iterator() (\u65bc email.iterators \u6a21\u7d44\u4e2d)": [[204, "email.iterators.body_line_iterator"]], "email.iterators": [[204, "module-email.iterators"]], "typed_subpart_iterator() (\u65bc email.iterators \u6a21\u7d44\u4e2d)": [[204, "email.iterators.typed_subpart_iterator"]], "emailmessage (email.message \u4e2d\u7684\u985e\u5225)": [[205, "email.message.EmailMessage"]], "mimepart (email.message \u4e2d\u7684\u985e\u5225)": [[205, "email.message.MIMEPart"]], "rfc 6531": [[205, "index-3"], [208, "index-8"], [335, "index-3"], [478, "index-32"], [478, "index-38"], [478, "index-39"]], "__bytes__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.__bytes__"]], "__contains__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.__contains__"]], "__delitem__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.__delitem__"]], "__getitem__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.__getitem__"]], "__len__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.__len__"]], "__setitem__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.__setitem__"]], "__str__() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.__str__"]], "add_alternative() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.add_alternative"]], "add_attachment() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.add_attachment"]], "add_header() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.add_header"]], "add_related() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.add_related"]], "as_bytes() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.as_bytes"]], "as_string() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.as_string"]], "clear() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.clear"]], "clear_content() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.clear_content"]], "defects (email.message.emailmessage \u7684\u5c6c\u6027)": [[205, "email.message.EmailMessage.defects"]], "del_param() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.del_param"]], "email.message": [[205, "module-email.message"]], "epilogue (email.message.emailmessage \u7684\u5c6c\u6027)": [[205, "email.message.EmailMessage.epilogue"]], "get() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.get"]], "get_all() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.get_all"]], "get_body() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.get_body"]], "get_boundary() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.get_boundary"]], "get_charsets() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.get_charsets"]], "get_content() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.get_content"]], "get_content_charset() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.get_content_charset"]], "get_content_disposition() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.get_content_disposition"]], "get_content_maintype() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.get_content_maintype"]], "get_content_subtype() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.get_content_subtype"]], "get_content_type() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.get_content_type"]], "get_default_type() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.get_default_type"]], "get_filename() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.get_filename"]], "get_unixfrom() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.get_unixfrom"]], "is_attachment() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.is_attachment"]], "is_multipart() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.is_multipart"]], "items() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.items"]], "iter_attachments() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.iter_attachments"]], "iter_parts() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.iter_parts"]], "keys() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.keys"]], "make_alternative() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.make_alternative"]], "make_mixed() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.make_mixed"]], "make_related() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.make_related"]], "preamble (email.message.emailmessage \u7684\u5c6c\u6027)": [[205, "email.message.EmailMessage.preamble"]], "replace_header() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.replace_header"]], "set_boundary() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.set_boundary"]], "set_content() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.set_content"]], "set_default_type() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.set_default_type"]], "set_param() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.set_param"]], "set_unixfrom() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.set_unixfrom"]], "values() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.values"]], "walk() (email.message.emailmessage \u7684\u65b9\u6cd5)": [[205, "email.message.EmailMessage.walk"]], "mimeapplication (email.mime.application \u4e2d\u7684\u985e\u5225)": [[206, "email.mime.application.MIMEApplication"]], "mimeaudio (email.mime.audio \u4e2d\u7684\u985e\u5225)": [[206, "email.mime.audio.MIMEAudio"]], "mimebase (email.mime.base \u4e2d\u7684\u985e\u5225)": [[206, "email.mime.base.MIMEBase"]], "mimeimage (email.mime.image \u4e2d\u7684\u985e\u5225)": [[206, "email.mime.image.MIMEImage"]], "mimemessage (email.mime.message \u4e2d\u7684\u985e\u5225)": [[206, "email.mime.message.MIMEMessage"]], "mimemultipart (email.mime.multipart \u4e2d\u7684\u985e\u5225)": [[206, "email.mime.multipart.MIMEMultipart"]], "mimenonmultipart (email.mime.nonmultipart \u4e2d\u7684\u985e\u5225)": [[206, "email.mime.nonmultipart.MIMENonMultipart"]], "mimetext (email.mime.text \u4e2d\u7684\u985e\u5225)": [[206, "email.mime.text.MIMEText"]], "email.mime": [[206, "module-email.mime"]], "email.mime.application": [[206, "module-email.mime.application"]], "email.mime.audio": [[206, "module-email.mime.audio"]], "email.mime.base": [[206, "module-email.mime.base"]], "email.mime.image": [[206, "module-email.mime.image"]], "email.mime.message": [[206, "module-email.mime.message"]], "email.mime.multipart": [[206, "module-email.mime.multipart"]], "email.mime.nonmultipart": [[206, "module-email.mime.nonmultipart"]], "email.mime.text": [[206, "module-email.mime.text"]], "bytesfeedparser (email.parser \u4e2d\u7684\u985e\u5225)": [[207, "email.parser.BytesFeedParser"]], "bytesheaderparser (email.parser \u4e2d\u7684\u985e\u5225)": [[207, "email.parser.BytesHeaderParser"]], "bytesparser (email.parser \u4e2d\u7684\u985e\u5225)": [[207, "email.parser.BytesParser"]], "feedparser (email.parser \u4e2d\u7684\u985e\u5225)": [[207, "email.parser.FeedParser"]], "headerparser (email.parser \u4e2d\u7684\u985e\u5225)": [[207, "email.parser.HeaderParser"]], "parser (email.parser \u4e2d\u7684\u985e\u5225)": [[207, "email.parser.Parser"]], "close() (email.parser.bytesfeedparser \u7684\u65b9\u6cd5)": [[207, "email.parser.BytesFeedParser.close"]], "email.parser": [[207, "module-email.parser"]], "feed() (email.parser.bytesfeedparser \u7684\u65b9\u6cd5)": [[207, "email.parser.BytesFeedParser.feed"]], "message_from_binary_file() (\u65bc email \u6a21\u7d44\u4e2d)": [[207, "email.message_from_binary_file"]], "message_from_bytes() (\u65bc email \u6a21\u7d44\u4e2d)": [[207, "email.message_from_bytes"]], "message_from_file() (\u65bc email \u6a21\u7d44\u4e2d)": [[207, "email.message_from_file"]], "message_from_string() (\u65bc email \u6a21\u7d44\u4e2d)": [[207, "email.message_from_string"]], "parse() (email.parser.bytesparser \u7684\u65b9\u6cd5)": [[207, "email.parser.BytesParser.parse"]], "parse() (email.parser.parser \u7684\u65b9\u6cd5)": [[207, "email.parser.Parser.parse"]], "parsebytes() (email.parser.bytesparser \u7684\u65b9\u6cd5)": [[207, "email.parser.BytesParser.parsebytes"]], "parsestr() (email.parser.parser \u7684\u65b9\u6cd5)": [[207, "email.parser.Parser.parsestr"]], "compat32 (email.policy \u4e2d\u7684\u985e\u5225)": [[208, "email.policy.Compat32"]], "emailpolicy (email.policy \u4e2d\u7684\u985e\u5225)": [[208, "email.policy.EmailPolicy"]], "http (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[208, "email.policy.HTTP"]], "policy (email.policy \u4e2d\u7684\u985e\u5225)": [[208, "email.policy.Policy"]], "smtp (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[208, "email.policy.SMTP"]], "smtputf8 (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[208, "email.policy.SMTPUTF8"]], "clone() (email.policy.policy \u7684\u65b9\u6cd5)": [[208, "email.policy.Policy.clone"]], "compat32 (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[208, "email.policy.compat32"]], "content_manager (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[208, "email.policy.EmailPolicy.content_manager"]], "cte_type (email.policy.policy \u7684\u5c6c\u6027)": [[208, "email.policy.Policy.cte_type"]], "default (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[208, "email.policy.default"]], "email.policy": [[208, "module-email.policy"]], "fold() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[208, "email.policy.Compat32.fold"]], "fold() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[208, "email.policy.EmailPolicy.fold"]], "fold() (email.policy.policy \u7684\u65b9\u6cd5)": [[208, "email.policy.Policy.fold"]], "fold_binary() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[208, "email.policy.Compat32.fold_binary"]], "fold_binary() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[208, "email.policy.EmailPolicy.fold_binary"]], "fold_binary() (email.policy.policy \u7684\u65b9\u6cd5)": [[208, "email.policy.Policy.fold_binary"]], "handle_defect() (email.policy.policy \u7684\u65b9\u6cd5)": [[208, "email.policy.Policy.handle_defect"]], "header_factory (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[208, "email.policy.EmailPolicy.header_factory"]], "header_fetch_parse() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[208, "email.policy.Compat32.header_fetch_parse"]], "header_fetch_parse() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[208, "email.policy.EmailPolicy.header_fetch_parse"]], "header_fetch_parse() (email.policy.policy \u7684\u65b9\u6cd5)": [[208, "email.policy.Policy.header_fetch_parse"]], "header_max_count() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[208, "email.policy.EmailPolicy.header_max_count"]], "header_max_count() (email.policy.policy \u7684\u65b9\u6cd5)": [[208, "email.policy.Policy.header_max_count"]], "header_source_parse() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[208, "email.policy.Compat32.header_source_parse"]], "header_source_parse() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[208, "email.policy.EmailPolicy.header_source_parse"]], "header_source_parse() (email.policy.policy \u7684\u65b9\u6cd5)": [[208, "email.policy.Policy.header_source_parse"]], "header_store_parse() (email.policy.compat32 \u7684\u65b9\u6cd5)": [[208, "email.policy.Compat32.header_store_parse"]], "header_store_parse() (email.policy.emailpolicy \u7684\u65b9\u6cd5)": [[208, "email.policy.EmailPolicy.header_store_parse"]], "header_store_parse() (email.policy.policy \u7684\u65b9\u6cd5)": [[208, "email.policy.Policy.header_store_parse"]], "linesep (email.policy.policy \u7684\u5c6c\u6027)": [[208, "email.policy.Policy.linesep"]], "mangle_from_ (email.policy.compat32 \u7684\u5c6c\u6027)": [[208, "email.policy.Compat32.mangle_from_"]], "mangle_from_ (email.policy.policy \u7684\u5c6c\u6027)": [[208, "email.policy.Policy.mangle_from_"]], "max_line_length (email.policy.policy \u7684\u5c6c\u6027)": [[208, "email.policy.Policy.max_line_length"]], "message_factory (email.policy.policy \u7684\u5c6c\u6027)": [[208, "email.policy.Policy.message_factory"]], "raise_on_defect (email.policy.policy \u7684\u5c6c\u6027)": [[208, "email.policy.Policy.raise_on_defect"]], "refold_source (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[208, "email.policy.EmailPolicy.refold_source"]], "register_defect() (email.policy.policy \u7684\u65b9\u6cd5)": [[208, "email.policy.Policy.register_defect"]], "strict (\u65bc email.policy \u6a21\u7d44\u4e2d)": [[208, "email.policy.strict"]], "utf8 (email.policy.emailpolicy \u7684\u5c6c\u6027)": [[208, "email.policy.EmailPolicy.utf8"]], "collapse_rfc2231_value() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[209, "email.utils.collapse_rfc2231_value"]], "decode_params() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[209, "email.utils.decode_params"]], "decode_rfc2231() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[209, "email.utils.decode_rfc2231"]], "email.utils": [[209, "module-email.utils"]], "encode_rfc2231() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[209, "email.utils.encode_rfc2231"]], "format_datetime() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[209, "email.utils.format_datetime"]], "formataddr() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[209, "email.utils.formataddr"]], "formatdate() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[209, "email.utils.formatdate"]], "getaddresses() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[209, "email.utils.getaddresses"]], "localtime() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[209, "email.utils.localtime"]], "make_msgid() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[209, "email.utils.make_msgid"]], "mktime_tz() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[209, "email.utils.mktime_tz"]], "parseaddr() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[209, "email.utils.parseaddr"]], "parsedate() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[209, "email.utils.parsedate"]], "parsedate_to_datetime() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[209, "email.utils.parsedate_to_datetime"]], "parsedate_tz() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[209, "email.utils.parsedate_tz"]], "quote() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[209, "email.utils.quote"]], "unquote() (\u65bc email.utils \u6a21\u7d44\u4e2d)": [[209, "email.utils.unquote"]], "pep 453": [[210, "index-2"], [469, "index-19"], [469, "index-20"], [469, "index-21"], [477, "index-1"], [477, "index-19"], [477, "index-20"], [477, "index-27"], [477, "index-42"], [477, "index-5"], [477, "index-52"]], "bootstrap() (\u65bc ensurepip \u6a21\u7d44\u4e2d)": [[210, "ensurepip.bootstrap"]], "ensurepip": [[210, "module-ensurepip"]], "version() (\u65bc ensurepip \u6a21\u7d44\u4e2d)": [[210, "ensurepip.version"]], "conform (enum.flagboundary \u7684\u5c6c\u6027)": [[211, "enum.FlagBoundary.CONFORM"]], "continuous (enum.enumcheck \u7684\u5c6c\u6027)": [[211, "enum.EnumCheck.CONTINUOUS"]], "eject (enum.flagboundary \u7684\u5c6c\u6027)": [[211, "enum.FlagBoundary.EJECT"]], "enum (enum \u4e2d\u7684\u985e\u5225)": [[211, "enum.Enum"]], "enumcheck (enum \u4e2d\u7684\u985e\u5225)": [[211, "enum.EnumCheck"]], "enumtype (enum \u4e2d\u7684\u985e\u5225)": [[211, "enum.EnumType"]], "flag (enum \u4e2d\u7684\u985e\u5225)": [[211, "enum.Flag"]], "flagboundary (enum \u4e2d\u7684\u985e\u5225)": [[211, "enum.FlagBoundary"]], "intenum (enum \u4e2d\u7684\u985e\u5225)": [[211, "enum.IntEnum"]], "intflag (enum \u4e2d\u7684\u985e\u5225)": [[211, "enum.IntFlag"]], "keep (enum.flagboundary \u7684\u5c6c\u6027)": [[211, "enum.FlagBoundary.KEEP"]], "named_flags (enum.enumcheck \u7684\u5c6c\u6027)": [[211, "enum.EnumCheck.NAMED_FLAGS"]], "reprenum (enum \u4e2d\u7684\u985e\u5225)": [[211, "enum.ReprEnum"]], "strict (enum.flagboundary \u7684\u5c6c\u6027)": [[211, "enum.FlagBoundary.STRICT"]], "strenum (enum \u4e2d\u7684\u985e\u5225)": [[211, "enum.StrEnum"]], "unique (enum.enumcheck \u7684\u5c6c\u6027)": [[211, "enum.EnumCheck.UNIQUE"]], "__and__() (enum.flag \u7684\u65b9\u6cd5)": [[211, "enum.Flag.__and__"]], "__call__() (enum.enumtype \u7684\u65b9\u6cd5)": [[211, "enum.EnumType.__call__"]], "__contains__() (enum.enumtype \u7684\u65b9\u6cd5)": [[211, "enum.EnumType.__contains__"]], "__contains__() (enum.flag \u7684\u65b9\u6cd5)": [[211, "enum.Flag.__contains__"]], "__dir__() (enum.enum \u7684\u65b9\u6cd5)": [[211, "enum.Enum.__dir__"]], "__dir__() (enum.enumtype \u7684\u65b9\u6cd5)": [[211, "enum.EnumType.__dir__"]], "__format__() (enum.enum \u7684\u65b9\u6cd5)": [[211, "enum.Enum.__format__"]], "__getitem__() (enum.enumtype \u7684\u65b9\u6cd5)": [[211, "enum.EnumType.__getitem__"]], "__init__() (enum.enum \u7684\u65b9\u6cd5)": [[211, "enum.Enum.__init__"]], "__init_subclass__() (enum.enum \u7684\u65b9\u6cd5)": [[211, "enum.Enum.__init_subclass__"]], "__iter__() (enum.enumtype \u7684\u65b9\u6cd5)": [[211, "enum.EnumType.__iter__"]], "__len__() (enum.enumtype \u7684\u65b9\u6cd5)": [[211, "enum.EnumType.__len__"]], "__members__ (enum.enumtype \u7684\u5c6c\u6027)": [[211, "enum.EnumType.__members__"]], "__new__() (enum.enum \u7684\u65b9\u6cd5)": [[211, "enum.Enum.__new__"]], "__or__() (enum.flag \u7684\u65b9\u6cd5)": [[211, "enum.Flag.__or__"]], "__repr__() (enum.enum \u7684\u65b9\u6cd5)": [[211, "enum.Enum.__repr__"]], "__reversed__() (enum.enumtype \u7684\u65b9\u6cd5)": [[211, "enum.EnumType.__reversed__"]], "__str__() (enum.enum \u7684\u65b9\u6cd5)": [[211, "enum.Enum.__str__"]], "__xor__() (enum.flag \u7684\u65b9\u6cd5)": [[211, "enum.Flag.__xor__"]], "_generate_next_value_() (enum.enum \u7684\u65b9\u6cd5)": [[211, "enum.Enum._generate_next_value_"]], "_ignore_ (enum.enum \u7684\u5c6c\u6027)": [[211, "enum.Enum._ignore_"]], "_missing_() (enum.enum \u7684\u65b9\u6cd5)": [[211, "enum.Enum._missing_"]], "_name_ (enum.enum \u7684\u5c6c\u6027)": [[211, "enum.Enum._name_"]], "_numeric_repr_() (enum.flag \u7684\u65b9\u6cd5)": [[211, "enum.Flag._numeric_repr_"]], "_order_ (enum.enum \u7684\u5c6c\u6027)": [[211, "enum.Enum._order_"]], "_value_ (enum.enum \u7684\u5c6c\u6027)": [[211, "enum.Enum._value_"]], "auto (enum \u4e2d\u7684\u985e\u5225)": [[211, "enum.auto"]], "enum": [[211, "module-enum"]], "global_enum() (\u65bc enum \u6a21\u7d44\u4e2d)": [[211, "enum.global_enum"]], "member() (\u65bc enum \u6a21\u7d44\u4e2d)": [[211, "enum.member"]], "name (enum.enum \u7684\u5c6c\u6027)": [[211, "enum.Enum.name"]], "nonmember() (\u65bc enum \u6a21\u7d44\u4e2d)": [[211, "enum.nonmember"]], "property() (\u65bc enum \u6a21\u7d44\u4e2d)": [[211, "enum.property"]], "show_flag_values() (\u65bc enum \u6a21\u7d44\u4e2d)": [[211, "enum.show_flag_values"]], "unique() (\u65bc enum \u6a21\u7d44\u4e2d)": [[211, "enum.unique"]], "value (enum.enum \u7684\u5c6c\u6027)": [[211, "enum.Enum.value"]], "verify() (\u65bc enum \u6a21\u7d44\u4e2d)": [[211, "enum.verify"]], "e2big (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.E2BIG"]], "eacces (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EACCES"]], "eaddrinuse (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EADDRINUSE"]], "eaddrnotavail (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EADDRNOTAVAIL"]], "eadv (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EADV"]], "eafnosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EAFNOSUPPORT"]], "eagain (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EAGAIN"]], "ealready (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EALREADY"]], "ebade (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EBADE"]], "ebadf (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EBADF"]], "ebadfd (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EBADFD"]], "ebadmsg (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EBADMSG"]], "ebadr (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EBADR"]], "ebadrqc (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EBADRQC"]], "ebadslt (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EBADSLT"]], "ebfont (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EBFONT"]], "ebusy (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EBUSY"]], "ecanceled (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ECANCELED"]], "echild (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ECHILD"]], "echrng (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ECHRNG"]], "ecomm (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ECOMM"]], "econnaborted (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ECONNABORTED"]], "econnrefused (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ECONNREFUSED"]], "econnreset (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ECONNRESET"]], "edeadlk (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EDEADLK"]], "edeadlock (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EDEADLOCK"]], "edestaddrreq (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EDESTADDRREQ"]], "edom (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EDOM"]], "edotdot (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EDOTDOT"]], "edquot (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EDQUOT"]], "eexist (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EEXIST"]], "efault (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EFAULT"]], "efbig (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EFBIG"]], "ehostdown (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EHOSTDOWN"]], "ehostunreach (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EHOSTUNREACH"]], "eidrm (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EIDRM"]], "eilseq (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EILSEQ"]], "einprogress (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EINPROGRESS"]], "eintr (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EINTR"]], "einval (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EINVAL"]], "eio (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EIO"]], "eisconn (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EISCONN"]], "eisdir (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EISDIR"]], "eisnam (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EISNAM"]], "el2hlt (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EL2HLT"]], "el2nsync (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EL2NSYNC"]], "el3hlt (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EL3HLT"]], "el3rst (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EL3RST"]], "elibacc (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ELIBACC"]], "elibbad (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ELIBBAD"]], "elibexec (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ELIBEXEC"]], "elibmax (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ELIBMAX"]], "elibscn (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ELIBSCN"]], "elnrng (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ELNRNG"]], "eloop (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ELOOP"]], "emfile (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EMFILE"]], "emlink (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EMLINK"]], "emsgsize (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EMSGSIZE"]], "emultihop (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EMULTIHOP"]], "enametoolong (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENAMETOOLONG"]], "enavail (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENAVAIL"]], "enetdown (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENETDOWN"]], "enetreset (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENETRESET"]], "enetunreach (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENETUNREACH"]], "enfile (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENFILE"]], "enoano (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOANO"]], "enobufs (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOBUFS"]], "enocsi (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOCSI"]], "enodata (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENODATA"]], "enodev (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENODEV"]], "enoent (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOENT"]], "enoexec (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOEXEC"]], "enolck (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOLCK"]], "enolink (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOLINK"]], "enomem (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOMEM"]], "enomsg (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOMSG"]], "enonet (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENONET"]], "enopkg (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOPKG"]], "enoprotoopt (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOPROTOOPT"]], "enospc (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOSPC"]], "enosr (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOSR"]], "enostr (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOSTR"]], "enosys (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOSYS"]], "enotblk (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOTBLK"]], "enotcapable (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOTCAPABLE"]], "enotconn (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOTCONN"]], "enotdir (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOTDIR"]], "enotempty (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOTEMPTY"]], "enotnam (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOTNAM"]], "enotrecoverable (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOTRECOVERABLE"]], "enotsock (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOTSOCK"]], "enotsup (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOTSUP"]], "enotty (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOTTY"]], "enotuniq (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENOTUNIQ"]], "enxio (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ENXIO"]], "eopnotsupp (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EOPNOTSUPP"]], "eoverflow (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EOVERFLOW"]], "eownerdead (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EOWNERDEAD"]], "eperm (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EPERM"]], "epfnosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EPFNOSUPPORT"]], "epipe (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EPIPE"]], "eproto (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EPROTO"]], "eprotonosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EPROTONOSUPPORT"]], "eprototype (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EPROTOTYPE"]], "eqfull (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EQFULL"]], "erange (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ERANGE"]], "eremchg (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EREMCHG"]], "eremote (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EREMOTE"]], "eremoteio (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EREMOTEIO"]], "erestart (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ERESTART"]], "erofs (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EROFS"]], "eshutdown (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ESHUTDOWN"]], "esocktnosupport (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ESOCKTNOSUPPORT"]], "espipe (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ESPIPE"]], "esrch (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ESRCH"]], "esrmnt (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ESRMNT"]], "estale (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ESTALE"]], "estrpipe (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ESTRPIPE"]], "etime (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ETIME"]], "etimedout (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ETIMEDOUT"]], "etoomanyrefs (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ETOOMANYREFS"]], "etxtbsy (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.ETXTBSY"]], "euclean (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EUCLEAN"]], "eunatch (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EUNATCH"]], "eusers (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EUSERS"]], "ewouldblock (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EWOULDBLOCK"]], "exdev (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EXDEV"]], "exfull (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.EXFULL"]], "errno": [[212, "module-errno"], [213, "index-5"]], "errorcode (\u65bc errno \u6a21\u7d44\u4e2d)": [[212, "errno.errorcode"]], "arithmeticerror": [[213, "ArithmeticError"]], "assertionerror": [[213, "AssertionError"], [436, "index-19"]], "attributeerror": [[213, "AttributeError"], [430, "index-40"]], "baseexception": [[213, "BaseException"]], "baseexceptiongroup": [[213, "BaseExceptionGroup"]], "blockingioerror": [[213, "BlockingIOError"], [258, "io.BlockingIOError"]], "brokenpipeerror": [[213, "BrokenPipeError"]], "buffererror": [[213, "BufferError"]], "byteswarning": [[213, "BytesWarning"]], "childprocesserror": [[213, "ChildProcessError"]], "connectionabortederror": [[213, "ConnectionAbortedError"]], "connectionerror": [[213, "ConnectionError"]], "connectionrefusederror": [[213, "ConnectionRefusedError"]], "connectionreseterror": [[213, "ConnectionResetError"]], "deprecationwarning": [[213, "DeprecationWarning"]], "eoferror": [[213, "EOFError"]], "encodingwarning": [[213, "EncodingWarning"]], "environmenterror": [[213, "EnvironmentError"]], "exception": [[213, "Exception"], [430, "index-32"], [430, "index-33"], [430, "index-36"], [430, "index-37"], [430, "index-4"], [430, "index-40"], [430, "index-63"], [430, "index-67"], [430, "index-72"]], "exceptiongroup": [[213, "ExceptionGroup"]], "fileexistserror": [[213, "FileExistsError"]], "filenotfounderror": [[213, "FileNotFoundError"]], "floatingpointerror": [[213, "FloatingPointError"]], "futurewarning": [[213, "FutureWarning"]], "generatorexit": [[213, "GeneratorExit"], [430, "index-33"], [430, "index-37"]], "ioerror": [[213, "IOError"]], "importerror": [[213, "ImportError"], [436, "index-34"]], "importwarning": [[213, "ImportWarning"]], "indentationerror": [[213, "IndentationError"]], "indexerror": [[213, "IndexError"]], "interruptederror": [[213, "InterruptedError"]], "isadirectoryerror": [[213, "IsADirectoryError"]], "keyerror": [[213, "KeyError"]], "keyboardinterrupt": [[213, "KeyboardInterrupt"]], "lookuperror": [[213, "LookupError"]], "memoryerror": [[213, "MemoryError"]], "modulenotfounderror": [[213, "ModuleNotFoundError"]], "nameerror": [[213, "NameError"], [430, "index-4"]], "notadirectoryerror": [[213, "NotADirectoryError"]], "notimplementederror": [[213, "NotImplementedError"]], "oserror": [[213, "OSError"]], "overflowerror": [[213, "OverflowError"]], "pep 3134": [[213, "index-14"], [470, "index-12"], [470, "index-28"], [470, "index-29"], [483, "index-65"]], "pep 475": [[213, "index-8"], [225, "index-18"], [293, "index-22"], [293, "index-24"], [293, "index-25"], [293, "index-44"], [328, "index-3"], [328, "index-4"], [328, "index-5"], [328, "index-6"], [328, "index-7"], [329, "index-0"], [333, "index-0"], [333, "index-1"], [337, "index-10"], [337, "index-11"], [337, "index-12"], [337, "index-13"], [337, "index-4"], [337, "index-5"], [337, "index-7"], [337, "index-8"], [337, "index-9"], [366, "index-8"], [478, "index-15"], [478, "index-16"], [478, "index-49"], [483, "index-242"], [483, "index-299"]], "pep 565": [[213, "index-10"], [480, "index-19"]], "pendingdeprecationwarning": [[213, "PendingDeprecationWarning"]], "permissionerror": [[213, "PermissionError"]], "processlookuperror": [[213, "ProcessLookupError"]], "recursionerror": [[213, "RecursionError"]], "referenceerror": [[213, "ReferenceError"]], "resourcewarning": [[213, "ResourceWarning"]], "runtimeerror": [[213, "RuntimeError"]], "runtimewarning": [[213, "RuntimeWarning"]], "stopasynciteration": [[213, "StopAsyncIteration"], [430, "index-36"]], "stopiteration": [[213, "StopIteration"], [430, "index-32"], [436, "index-26"]], "syntaxerror": [[213, "SyntaxError"]], "syntaxwarning": [[213, "SyntaxWarning"]], "systemerror": [[213, "SystemError"]], "systemexit": [[213, "SystemExit"]], "taberror": [[213, "TabError"]], "typeerror": [[213, "TypeError"], [430, "index-63"]], "unboundlocalerror": [[213, "UnboundLocalError"], [429, "index-9"]], "unicodedecodeerror": [[213, "UnicodeDecodeError"]], "unicodeencodeerror": [[213, "UnicodeEncodeError"]], "unicodeerror": [[213, "UnicodeError"]], "unicodetranslateerror": [[213, "UnicodeTranslateError"]], "unicodewarning": [[213, "UnicodeWarning"]], "userwarning": [[213, "UserWarning"]], "valueerror": [[213, "ValueError"], [430, "index-72"]], "warning": [[213, "Warning"], [340, "sqlite3.Warning"]], "windowserror": [[213, "WindowsError"]], "zerodivisionerror": [[213, "ZeroDivisionError"], [430, "index-67"]], "__cause__ (baseexception \u7684\u5c6c\u6027)": [[213, "BaseException.__cause__"]], "__cause__ (exception attribute)": [[213, "index-2"]], "__context__ (baseexception \u7684\u5c6c\u6027)": [[213, "BaseException.__context__"]], "__context__ (exception attribute)": [[213, "index-2"]], "__notes__ (baseexception \u7684\u5c6c\u6027)": [[213, "BaseException.__notes__"]], "__suppress_context__ (baseexception \u7684\u5c6c\u6027)": [[213, "BaseException.__suppress_context__"]], "__suppress_context__ (exception attribute)": [[213, "index-2"]], "__traceback__ (baseexception \u7684\u5c6c\u6027)": [[213, "BaseException.__traceback__"]], "add_note() (baseexception \u7684\u65b9\u6cd5)": [[213, "BaseException.add_note"]], "args (baseexception \u7684\u5c6c\u6027)": [[213, "BaseException.args"]], "assert": [[213, "index-4"], [436, "index-18"]], "chaining": [[213, "index-2"]], "characters_written (blockingioerror \u7684\u5c6c\u6027)": [[213, "BlockingIOError.characters_written"]], "code (systemexit \u7684\u5c6c\u6027)": [[213, "SystemExit.code"]], "derive() (baseexceptiongroup \u7684\u65b9\u6cd5)": [[213, "BaseExceptionGroup.derive"]], "encoding (unicodeerror \u7684\u5c6c\u6027)": [[213, "UnicodeError.encoding"]], "end (unicodeerror \u7684\u5c6c\u6027)": [[213, "UnicodeError.end"]], "end_lineno (syntaxerror \u7684\u5c6c\u6027)": [[213, "SyntaxError.end_lineno"]], "end_offset (syntaxerror \u7684\u5c6c\u6027)": [[213, "SyntaxError.end_offset"]], "errno (oserror \u7684\u5c6c\u6027)": [[213, "OSError.errno"]], "except": [[213, "index-0"], [427, "index-9"]], "exceptions (baseexceptiongroup \u7684\u5c6c\u6027)": [[213, "BaseExceptionGroup.exceptions"]], "exception\uff08\u4f8b\u5916\uff09": [[213, "index-2"], [428, "index-66"], [429, "index-14"], [436, "index-19"], [436, "index-26"], [436, "index-27"], [436, "index-29"], [436, "index-34"]], "filename (oserror \u7684\u5c6c\u6027)": [[213, "OSError.filename"]], "filename (syntaxerror \u7684\u5c6c\u6027)": [[213, "SyntaxError.filename"]], "filename2 (oserror \u7684\u5c6c\u6027)": [[213, "OSError.filename2"]], "lineno (syntaxerror \u7684\u5c6c\u6027)": [[213, "SyntaxError.lineno"]], "message (baseexceptiongroup \u7684\u5c6c\u6027)": [[213, "BaseExceptionGroup.message"]], "name (importerror \u7684\u5c6c\u6027)": [[213, "ImportError.name"]], "object (unicodeerror \u7684\u5c6c\u6027)": [[213, "UnicodeError.object"]], "offset (syntaxerror \u7684\u5c6c\u6027)": [[213, "SyntaxError.offset"]], "path (importerror \u7684\u5c6c\u6027)": [[213, "ImportError.path"]], "raise": [[213, "index-1"], [436, "index-27"]], "reason (unicodeerror \u7684\u5c6c\u6027)": [[213, "UnicodeError.reason"]], "split() (baseexceptiongroup \u7684\u65b9\u6cd5)": [[213, "BaseExceptionGroup.split"]], "start (unicodeerror \u7684\u5c6c\u6027)": [[213, "UnicodeError.start"]], "strerror (oserror \u7684\u5c6c\u6027)": [[213, "OSError.strerror"]], "subgroup() (baseexceptiongroup \u7684\u65b9\u6cd5)": [[213, "BaseExceptionGroup.subgroup"]], "text (syntaxerror \u7684\u5c6c\u6027)": [[213, "SyntaxError.text"]], "try": [[213, "index-0"], [427, "index-9"], [428, "index-67"]], "value (stopiteration \u7684\u5c6c\u6027)": [[213, "StopIteration.value"]], "winerror (oserror \u7684\u5c6c\u6027)": [[213, "OSError.winerror"]], "with_traceback() (baseexception \u7684\u65b9\u6cd5)": [[213, "BaseException.with_traceback"]], "cancel_dump_traceback_later() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[214, "faulthandler.cancel_dump_traceback_later"]], "disable() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[214, "faulthandler.disable"]], "dump_traceback() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[214, "faulthandler.dump_traceback"]], "dump_traceback_later() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[214, "faulthandler.dump_traceback_later"]], "enable() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[214, "faulthandler.enable"]], "faulthandler": [[214, "module-faulthandler"]], "is_enabled() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[214, "faulthandler.is_enabled"]], "register() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[214, "faulthandler.register"]], "unregister() (\u65bc faulthandler \u6a21\u7d44\u4e2d)": [[214, "faulthandler.unregister"]], "i/o control\uff08i/o \u63a7\u5236\uff09": [[215, "index-0"], [225, "index-8"], [337, "index-6"], [361, "index-0"]], "lock_ex (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[215, "fcntl.LOCK_EX"]], "lock_nb (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[215, "fcntl.LOCK_NB"]], "lock_sh (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[215, "fcntl.LOCK_SH"]], "lock_un (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[215, "fcntl.LOCK_UN"]], "unix": [[215, "index-0"], [437, "index-4"]], "fcntl": [[215, "module-fcntl"]], "fcntl() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[215, "fcntl.fcntl"]], "file control\uff08\u6a94\u6848\u63a7\u5236\uff09": [[215, "index-0"]], "flock() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[215, "fcntl.flock"]], "ioctl() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[215, "fcntl.ioctl"]], "lockf() (\u65bc fcntl \u6a21\u7d44\u4e2d)": [[215, "fcntl.lockf"]], "default_ignores (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[216, "filecmp.DEFAULT_IGNORES"]], "clear_cache() (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[216, "filecmp.clear_cache"]], "cmp() (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[216, "filecmp.cmp"]], "cmpfiles() (\u65bc filecmp \u6a21\u7d44\u4e2d)": [[216, "filecmp.cmpfiles"]], "common (filecmp.dircmp \u7684\u5c6c\u6027)": [[216, "filecmp.dircmp.common"]], "common_dirs (filecmp.dircmp \u7684\u5c6c\u6027)": [[216, "filecmp.dircmp.common_dirs"]], "common_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[216, "filecmp.dircmp.common_files"]], "common_funny (filecmp.dircmp \u7684\u5c6c\u6027)": [[216, "filecmp.dircmp.common_funny"]], "diff_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[216, "filecmp.dircmp.diff_files"]], "dircmp (filecmp \u4e2d\u7684\u985e\u5225)": [[216, "filecmp.dircmp"]], "filecmp": [[216, "module-filecmp"]], "funny_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[216, "filecmp.dircmp.funny_files"]], "left (filecmp.dircmp \u7684\u5c6c\u6027)": [[216, "filecmp.dircmp.left"]], "left_list (filecmp.dircmp \u7684\u5c6c\u6027)": [[216, "filecmp.dircmp.left_list"]], "left_only (filecmp.dircmp \u7684\u5c6c\u6027)": [[216, "filecmp.dircmp.left_only"]], "report() (filecmp.dircmp \u7684\u65b9\u6cd5)": [[216, "filecmp.dircmp.report"]], "report_full_closure() (filecmp.dircmp \u7684\u65b9\u6cd5)": [[216, "filecmp.dircmp.report_full_closure"]], "report_partial_closure() (filecmp.dircmp \u7684\u65b9\u6cd5)": [[216, "filecmp.dircmp.report_partial_closure"]], "right (filecmp.dircmp \u7684\u5c6c\u6027)": [[216, "filecmp.dircmp.right"]], "right_list (filecmp.dircmp \u7684\u5c6c\u6027)": [[216, "filecmp.dircmp.right_list"]], "right_only (filecmp.dircmp \u7684\u5c6c\u6027)": [[216, "filecmp.dircmp.right_only"]], "same_files (filecmp.dircmp \u7684\u5c6c\u6027)": [[216, "filecmp.dircmp.same_files"]], "subdirs (filecmp.dircmp \u7684\u5c6c\u6027)": [[216, "filecmp.dircmp.subdirs"]], "fileinput (fileinput \u4e2d\u7684\u985e\u5225)": [[218, "fileinput.FileInput"]], "close() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[218, "fileinput.close"]], "fileinput": [[218, "module-fileinput"]], "filelineno() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[218, "fileinput.filelineno"]], "filename() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[218, "fileinput.filename"]], "fileno() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[218, "fileinput.fileno"]], "hook_compressed() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[218, "fileinput.hook_compressed"]], "hook_encoded() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[218, "fileinput.hook_encoded"]], "input() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[218, "fileinput.input"]], "isfirstline() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[218, "fileinput.isfirstline"]], "isstdin() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[218, "fileinput.isstdin"]], "lineno() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[218, "fileinput.lineno"]], "nextfile() (\u65bc fileinput \u6a21\u7d44\u4e2d)": [[218, "fileinput.nextfile"]], "[] \uff08\u65b9\u62ec\u865f\uff09": [[220, "index-2"], [231, "index-1"], [319, "index-10"], [345, "index-2"], [430, "index-15"], [430, "index-41"], [436, "index-6"]], "filenames\uff08\u6a94\u6848\u540d\u7a31\uff09": [[220, "index-0"], [231, "index-0"]], "filter() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[220, "fnmatch.filter"]], "fnmatch": [[220, "module-fnmatch"]], "fnmatch() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[220, "fnmatch.fnmatch"]], "fnmatchcase() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[220, "fnmatch.fnmatchcase"]], "glob": [[220, "index-3"], [231, "module-glob"]], "re": [[220, "index-1"], [319, "module-re"], [344, "index-33"]], "translate() (\u65bc fnmatch \u6a21\u7d44\u4e2d)": [[220, "fnmatch.translate"]], "wildcard expansion\uff08\u842c\u7528\u5b57\u5143\u5c55\u958b\uff09": [[220, "index-0"]], "\u65bc glob \u98a8\u683c\u7684\u842c\u7528\u5b57\u5143\u4e2d": [[220, "index-2"], [231, "index-1"], [231, "index-2"]], "fraction (fractions \u4e2d\u7684\u985e\u5225)": [[221, "fractions.Fraction"]], "pep 515": [[221, "index-0"], [345, "index-22"], [473, "index-108"], [479, "index-7"], [479, "index-8"], [483, "index-262"], [483, "index-263"]], "__ceil__() (fractions.fraction \u7684\u65b9\u6cd5)": [[221, "fractions.Fraction.__ceil__"]], "__floor__() (fractions.fraction \u7684\u65b9\u6cd5)": [[221, "fractions.Fraction.__floor__"]], "__format__() (fractions.fraction \u7684\u65b9\u6cd5)": [[221, "fractions.Fraction.__format__"]], "__round__() (fractions.fraction \u7684\u65b9\u6cd5)": [[221, "fractions.Fraction.__round__"]], "as_integer_ratio() (fractions.fraction \u7684\u65b9\u6cd5)": [[221, "fractions.Fraction.as_integer_ratio"]], "denominator (fractions.fraction \u7684\u5c6c\u6027)": [[221, "fractions.Fraction.denominator"]], "fractions": [[221, "module-fractions"]], "from_decimal() (fractions.fraction \u7684\u985e\u5225\u65b9\u6cd5)": [[221, "fractions.Fraction.from_decimal"]], "from_float() (fractions.fraction \u7684\u985e\u5225\u65b9\u6cd5)": [[221, "fractions.Fraction.from_float"]], "is_integer() (fractions.fraction \u7684\u65b9\u6cd5)": [[221, "fractions.Fraction.is_integer"]], "limit_denominator() (fractions.fraction \u7684\u65b9\u6cd5)": [[221, "fractions.Fraction.limit_denominator"]], "numerator (fractions.fraction \u7684\u5c6c\u6027)": [[221, "fractions.Fraction.numerator"]], "ftp": [[223, "index-0"], [395, "index-11"], [395, "index-9"]], "ftp (ftplib \u4e2d\u7684\u985e\u5225)": [[223, "ftplib.FTP"]], "ftp_tls (ftplib \u4e2d\u7684\u985e\u5225)": [[223, "ftplib.FTP_TLS"]], "rfc 2640": [[223, "index-13"], [223, "index-14"], [223, "index-16"], [482, "index-22"], [483, "index-176"]], "rfc 3659": [[223, "index-15"]], "rfc 4217": [[223, "index-5"]], "rfc 959": [[223, "index-12"]], "abort() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.abort"]], "all_errors (\u65bc ftplib \u6a21\u7d44\u4e2d)": [[223, "ftplib.all_errors"]], "auth() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP_TLS.auth"]], "ccc() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP_TLS.ccc"]], "close() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.close"]], "connect() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.connect"]], "cwd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.cwd"]], "delete() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.delete"]], "dir() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.dir"]], "error_perm": [[223, "ftplib.error_perm"]], "error_proto": [[223, "ftplib.error_proto"], [305, "poplib.error_proto"]], "error_reply": [[223, "ftplib.error_reply"]], "error_temp": [[223, "ftplib.error_temp"]], "ftplib": [[223, "module-ftplib"]], "ftplib\uff08\u6a19\u6e96\u6a21\u7d44\uff09": [[223, "index-0"]], "getwelcome() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.getwelcome"]], "login() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.login"]], "mkd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.mkd"]], "mlsd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.mlsd"]], "nlst() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.nlst"]], "ntransfercmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.ntransfercmd"]], "prot_c() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP_TLS.prot_c"]], "prot_p() (ftplib.ftp_tls \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP_TLS.prot_p"]], "pwd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.pwd"]], "quit() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.quit"]], "rename() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.rename"]], "retrbinary() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.retrbinary"]], "retrlines() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.retrlines"]], "rmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.rmd"]], "sendcmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.sendcmd"]], "set_debuglevel() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.set_debuglevel"]], "set_pasv() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.set_pasv"]], "size() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.size"]], "ssl_version (ftplib.ftp_tls \u7684\u5c6c\u6027)": [[223, "ftplib.FTP_TLS.ssl_version"]], "storbinary() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.storbinary"]], "storlines() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.storlines"]], "transfercmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.transfercmd"]], "voidcmd() (ftplib.ftp \u7684\u65b9\u6cd5)": [[223, "ftplib.FTP.voidcmd"]], "boolean\uff08\u5e03\u6797\u503c\uff09": [[225, "index-0"]], "infinity\uff08\u7121\u7aae\uff09": [[225, "index-3"]], "nan": [[225, "index-3"]], "pythonbreakpoint": [[225, "index-1"], [352, "index-3"], [352, "index-4"], [352, "index-5"], [455, "envvar-PYTHONBREAKPOINT"], [480, "index-12"]], "pythoncaseok": [[225, "index-16"], [455, "envvar-PYTHONCASEOK"], [463, "index-11"], [482, "index-21"], [483, "index-191"]], "__format__": [[225, "index-4"]], "__import__()": [[225, "import__"]], "abs()": [[225, "abs"]], "aiter()": [[225, "aiter"]], "all()": [[225, "all"]], "anext()": [[225, "anext"]], "any()": [[225, "any"]], "ascii()": [[225, "ascii"]], "bin()": [[225, "bin"]], "binary mode\uff08\u4e8c\u9032\u4f4d\u6a21\u5f0f\uff09": [[225, "index-8"]], "bool (\u5167\u5efa\u985e\u5225)": [[225, "bool"]], "breakpoint()": [[225, "breakpoint"]], "buffer size, i/o\uff08\u7de9\u885d\u5340\u5927\u5c0f\u3001i/o\uff09": [[225, "index-8"]], "buffering\uff08\u7de9\u885d\uff09": [[225, "index-8"], [337, "index-6"]], "built-in function": [[225, "abs"], [225, "aiter"], [225, "all"], [225, "anext"], [225, "any"], [225, "ascii"], [225, "bin"], [225, "breakpoint"], [225, "callable"], [225, "chr"], [225, "classmethod"], [225, "compile"], [225, "delattr"], [225, "dir"], [225, "divmod"], [225, "enumerate"], [225, "eval"], [225, "exec"], [225, "filter"], [225, "format"], [225, "getattr"], [225, "globals"], [225, "hasattr"], [225, "hash"], [225, "help"], [225, "hex"], [225, "id"], [225, "import__"], [225, "input"], [225, "isinstance"], [225, "issubclass"], [225, "iter"], [225, "len"], [225, "locals"], [225, "map"], [225, "max"], [225, "min"], [225, "next"], [225, "oct"], [225, "open"], [225, "ord"], [225, "pow"], [225, "print"], [225, "property.deleter"], [225, "property.getter"], [225, "property.setter"], [225, "repr"], [225, "reversed"], [225, "round"], [225, "setattr"], [225, "sorted"], [225, "staticmethod"], [225, "sum"], [225, "vars"], [225, "zip"], [283, "multiprocessing.Manager"]], "callable()": [[225, "callable"]], "chr()": [[225, "chr"]], "classmethod()": [[225, "classmethod"]], "compile()": [[225, "compile"]], "complex (\u5167\u5efa\u985e\u5225)": [[225, "complex"]], "delattr()": [[225, "delattr"]], "dir()": [[225, "dir"]], "divmod()": [[225, "divmod"]], "enumerate()": [[225, "enumerate"]], "eval()": [[225, "eval"]], "exec": [[225, "index-2"], [344, "index-64"], [436, "index-44"]], "exec()": [[225, "exec"]], "filter()": [[225, "filter"]], "float (\u5167\u5efa\u985e\u5225)": [[225, "float"]], "format()": [[225, "format"]], "format()\uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[225, "index-4"]], "getattr()": [[225, "getattr"]], "globals()": [[225, "globals"]], "hasattr()": [[225, "hasattr"]], "hash()": [[225, "hash"]], "help()": [[225, "help"]], "hex()": [[225, "hex"]], "id()": [[225, "id"]], "import\uff08\u5f15\u5165\uff09": [[225, "index-13"], [334, "index-2"], [428, "index-44"], [432, "index-9"], [436, "index-34"], [436, "index-39"]], "input()": [[225, "input"]], "int (\u5167\u5efa\u985e\u5225)": [[225, "int"]], "isinstance()": [[225, "isinstance"]], "issubclass()": [[225, "issubclass"]], "iter()": [[225, "iter"]], "len()": [[225, "len"]], "line-buffered i/o\uff08\u5217\u7de9\u885d i/o\uff09": [[225, "index-8"]], "locals()": [[225, "locals"]], "map()": [[225, "map"]], "max()": [[225, "max"]], "min()": [[225, "min"]], "modes\uff08\u6a21\u5f0f\uff09": [[225, "index-6"]], "next()": [[225, "next"]], "object (\u5167\u5efa\u985e\u5225)": [[225, "object"]], "oct()": [[225, "oct"]], "open()": [[225, "open"]], "open() \u5167\u5efa\u51fd\u5f0f": [[225, "index-5"], [225, "index-7"]], "ord()": [[225, "ord"]], "pow()": [[225, "pow"]], "print()": [[225, "print"]], "property (\u5167\u5efa\u985e\u5225)": [[225, "property"]], "property.deleter()": [[225, "property.deleter"]], "property.getter()": [[225, "property.getter"]], "property.setter()": [[225, "property.setter"]], "repr()": [[225, "repr"]], "reversed()": [[225, "reversed"]], "round()": [[225, "round"]], "setattr()": [[225, "setattr"]], "slice (\u5167\u5efa\u985e\u5225)": [[225, "slice"]], "sorted()": [[225, "sorted"]], "start (slice \u7684\u5c6c\u6027)": [[225, "slice.start"]], "staticmethod()": [[225, "staticmethod"]], "step (slice \u7684\u5c6c\u6027)": [[225, "slice.step"]], "stop (slice \u7684\u5c6c\u6027)": [[225, "slice.stop"]], "str() \uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[225, "index-11"]], "sum()": [[225, "sum"]], "super (\u5167\u5efa\u985e\u5225)": [[225, "super"]], "text mode\uff08\u6587\u5b57\u6a21\u5f0f\uff09": [[225, "index-8"]], "type (\u5167\u5efa\u985e\u5225)": [[225, "type"]], "unbuffered i/o\uff08\u975e\u7de9\u885d i/o\uff09": [[225, "index-8"]], "vars()": [[225, "vars"]], "zip()": [[225, "zip"]], "pep 412": [[226, "index-0"], [476, "index-56"]], "args (functools.partial \u7684\u5c6c\u6027)": [[226, "functools.partial.args"]], "cache() (\u65bc functools \u6a21\u7d44\u4e2d)": [[226, "functools.cache"]], "cached_property() (\u65bc functools \u6a21\u7d44\u4e2d)": [[226, "functools.cached_property"]], "cmp_to_key() (\u65bc functools \u6a21\u7d44\u4e2d)": [[226, "functools.cmp_to_key"]], "func (functools.partial \u7684\u5c6c\u6027)": [[226, "functools.partial.func"]], "functools": [[226, "module-functools"]], "keywords (functools.partial \u7684\u5c6c\u6027)": [[226, "functools.partial.keywords"]], "lru_cache() (\u65bc functools \u6a21\u7d44\u4e2d)": [[226, "functools.lru_cache"]], "partial() (\u65bc functools \u6a21\u7d44\u4e2d)": [[226, "functools.partial"]], "partialmethod (functools \u4e2d\u7684\u985e\u5225)": [[226, "functools.partialmethod"]], "reduce() (\u65bc functools \u6a21\u7d44\u4e2d)": [[226, "functools.reduce"]], "singledispatch() (\u65bc functools \u6a21\u7d44\u4e2d)": [[226, "functools.singledispatch"]], "singledispatchmethod (functools \u4e2d\u7684\u985e\u5225)": [[226, "functools.singledispatchmethod"]], "total_ordering() (\u65bc functools \u6a21\u7d44\u4e2d)": [[226, "functools.total_ordering"]], "update_wrapper() (\u65bc functools \u6a21\u7d44\u4e2d)": [[226, "functools.update_wrapper"]], "wraps() (\u65bc functools \u6a21\u7d44\u4e2d)": [[226, "functools.wraps"]], "debug_collectable (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.DEBUG_COLLECTABLE"]], "debug_leak (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.DEBUG_LEAK"]], "debug_saveall (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.DEBUG_SAVEALL"]], "debug_stats (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.DEBUG_STATS"]], "debug_uncollectable (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.DEBUG_UNCOLLECTABLE"]], "callbacks (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.callbacks"]], "collect() (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.collect"]], "disable() (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.disable"]], "enable() (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.enable"]], "freeze() (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.freeze"]], "garbage (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.garbage"]], "gc": [[227, "module-gc"]], "get_count() (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.get_count"]], "get_debug() (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.get_debug"]], "get_freeze_count() (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.get_freeze_count"]], "get_objects() (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.get_objects"]], "get_referents() (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.get_referents"]], "get_referrers() (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.get_referrers"]], "get_stats() (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.get_stats"]], "get_threshold() (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.get_threshold"]], "is_finalized() (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.is_finalized"]], "is_tracked() (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.is_tracked"]], "isenabled() (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.isenabled"]], "set_debug() (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.set_debug"]], "set_threshold() (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.set_threshold"]], "unfreeze() (\u65bc gc \u6a21\u7d44\u4e2d)": [[227, "gc.unfreeze"]], "getopterror": [[228, "getopt.GetoptError"]], "posixly_correct": [[228, "index-0"]], "getopt": [[228, "module-getopt"]], "getopt() (\u65bc getopt \u6a21\u7d44\u4e2d)": [[228, "getopt.getopt"]], "gnu_getopt() (\u65bc getopt \u6a21\u7d44\u4e2d)": [[228, "getopt.gnu_getopt"]], "getpasswarning": [[229, "getpass.GetPassWarning"]], "logname": [[229, "index-6"], [293, "index-10"]], "user": [[229, "index-7"]], "username": [[229, "index-8"], [293, "index-11"], [294, "index-20"]], "getpass": [[229, "module-getpass"]], "getpass() (\u65bc getpass \u6a21\u7d44\u4e2d)": [[229, "getpass.getpass"]], "getuser() (\u65bc getpass \u6a21\u7d44\u4e2d)": [[229, "getpass.getuser"]], "gnome": [[230, "index-10"]], "gnutranslations (gettext \u4e2d\u7684\u985e\u5225)": [[230, "gettext.GNUTranslations"]], "lang": [[230, "index-3"], [230, "index-8"], [266, "index-1"], [266, "index-2"], [266, "index-3"]], "language": [[230, "index-0"], [230, "index-5"]], "lc_all": [[230, "index-1"], [230, "index-6"]], "lc_messages": [[230, "index-2"], [230, "index-7"]], "nulltranslations (gettext \u4e2d\u7684\u985e\u5225)": [[230, "gettext.NullTranslations"]], "_ \uff08\u5e95\u7dda\uff09": [[230, "index-4"], [345, "index-10"], [435, "index-28"], [435, "index-29"]], "_parse() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[230, "gettext.NullTranslations._parse"]], "add_fallback() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[230, "gettext.NullTranslations.add_fallback"]], "bindtextdomain() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[230, "gettext.bindtextdomain"]], "charset() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[230, "gettext.NullTranslations.charset"]], "dgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[230, "gettext.dgettext"]], "dngettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[230, "gettext.dngettext"]], "dnpgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[230, "gettext.dnpgettext"]], "dpgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[230, "gettext.dpgettext"]], "find() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[230, "gettext.find"]], "gettext": [[230, "index-4"], [230, "module-gettext"]], "gettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[230, "gettext.GNUTranslations.gettext"]], "gettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[230, "gettext.NullTranslations.gettext"]], "gettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[230, "gettext.gettext"]], "info() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[230, "gettext.NullTranslations.info"]], "install() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[230, "gettext.NullTranslations.install"]], "install() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[230, "gettext.install"]], "ngettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[230, "gettext.GNUTranslations.ngettext"]], "ngettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[230, "gettext.NullTranslations.ngettext"]], "ngettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[230, "gettext.ngettext"]], "npgettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[230, "gettext.GNUTranslations.npgettext"]], "npgettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[230, "gettext.NullTranslations.npgettext"]], "npgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[230, "gettext.npgettext"]], "pgettext() (gettext.gnutranslations \u7684\u65b9\u6cd5)": [[230, "gettext.GNUTranslations.pgettext"]], "pgettext() (gettext.nulltranslations \u7684\u65b9\u6cd5)": [[230, "gettext.NullTranslations.pgettext"]], "pgettext() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[230, "gettext.pgettext"]], "textdomain() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[230, "gettext.textdomain"]], "translation() (\u65bc gettext \u6a21\u7d44\u4e2d)": [[230, "gettext.translation"]], "**": [[231, "index-2"], [344, "index-13"], [427, "index-32"], [430, "index-18"], [430, "index-50"], [430, "index-58"], [441, "index-4"]], ". \uff08\u9ede\uff09": [[231, "index-1"], [293, "index-45"], [293, "index-50"], [319, "index-0"], [344, "index-36"], [344, "index-46"], [345, "index-2"], [430, "index-39"], [435, "index-29"]], "escape() (\u65bc glob \u6a21\u7d44\u4e2d)": [[231, "glob.escape"]], "glob() (\u65bc glob \u6a21\u7d44\u4e2d)": [[231, "glob.glob"]], "iglob() (\u65bc glob \u6a21\u7d44\u4e2d)": [[231, "glob.iglob"]], "pathname expansion\uff08\u8def\u5f91\u540d\u7a31\u5c55\u958b\uff09": [[231, "index-0"]], "cycleerror": [[232, "graphlib.CycleError"]], "topologicalsorter (graphlib \u4e2d\u7684\u985e\u5225)": [[232, "graphlib.TopologicalSorter"]], "add() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[232, "graphlib.TopologicalSorter.add"]], "done() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[232, "graphlib.TopologicalSorter.done"]], "get_ready() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[232, "graphlib.TopologicalSorter.get_ready"]], "graphlib": [[232, "module-graphlib"]], "is_active() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[232, "graphlib.TopologicalSorter.is_active"]], "prepare() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[232, "graphlib.TopologicalSorter.prepare"]], "static_order() (graphlib.topologicalsorter \u7684\u65b9\u6cd5)": [[232, "graphlib.TopologicalSorter.static_order"]], "getgrall() (\u65bc grp \u6a21\u7d44\u4e2d)": [[233, "grp.getgrall"]], "getgrgid() (\u65bc grp \u6a21\u7d44\u4e2d)": [[233, "grp.getgrgid"]], "getgrnam() (\u65bc grp \u6a21\u7d44\u4e2d)": [[233, "grp.getgrnam"]], "grp": [[233, "module-grp"]], "--best": [[234, "cmdoption-gzip-best"]], "--decompress": [[234, "cmdoption-gzip-d"]], "--fast": [[234, "cmdoption-gzip-fast"]], "badgzipfile": [[234, "gzip.BadGzipFile"]], "gzipfile (gzip \u4e2d\u7684\u985e\u5225)": [[234, "gzip.GzipFile"]], "compress() (\u65bc gzip \u6a21\u7d44\u4e2d)": [[234, "gzip.compress"]], "decompress() (\u65bc gzip \u6a21\u7d44\u4e2d)": [[234, "gzip.decompress"]], "gzip": [[234, "module-gzip"]], "gzip \u547d\u4ee4\u5217\u9078\u9805": [[234, "cmdoption-gzip-arg-file"], [234, "cmdoption-gzip-best"], [234, "cmdoption-gzip-d"], [234, "cmdoption-gzip-fast"], [234, "cmdoption-gzip-h"]], "mtime (gzip.gzipfile \u7684\u5c6c\u6027)": [[234, "gzip.GzipFile.mtime"]], "name (gzip.gzipfile \u7684\u5c6c\u6027)": [[234, "gzip.GzipFile.name"]], "open() (\u65bc gzip \u6a21\u7d44\u4e2d)": [[234, "gzip.open"]], "peek() (gzip.gzipfile \u7684\u65b9\u6cd5)": [[234, "gzip.GzipFile.peek"]], "openssl": [[235, "index-2"], [341, "index-0"]], "rfc 1321": [[235, "index-1"]], "rfc 7693": [[235, "index-5"]], "rfc 7914": [[235, "index-3"]], "algorithms_available (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.algorithms_available"]], "algorithms_guaranteed (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.algorithms_guaranteed"]], "blake2b() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.blake2b"]], "blake2b, blake2s": [[235, "index-4"]], "blake2b.max_digest_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.blake2b.MAX_DIGEST_SIZE"]], "blake2b.max_key_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.blake2b.MAX_KEY_SIZE"]], "blake2b.person_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.blake2b.PERSON_SIZE"]], "blake2b.salt_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.blake2b.SALT_SIZE"]], "blake2s() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.blake2s"]], "blake2s.max_digest_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.blake2s.MAX_DIGEST_SIZE"]], "blake2s.max_key_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.blake2s.MAX_KEY_SIZE"]], "blake2s.person_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.blake2s.PERSON_SIZE"]], "blake2s.salt_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.blake2s.SALT_SIZE"]], "copy() (hashlib.hash \u7684\u65b9\u6cd5)": [[235, "hashlib.hash.copy"]], "digest() (hashlib.hash \u7684\u65b9\u6cd5)": [[235, "hashlib.hash.digest"]], "digest() (hashlib.shake \u7684\u65b9\u6cd5)": [[235, "hashlib.shake.digest"]], "file_digest() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.file_digest"]], "hash.block_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.hash.block_size"]], "hash.digest_size (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.hash.digest_size"]], "hashlib": [[235, "module-hashlib"]], "hexdigest() (hashlib.hash \u7684\u65b9\u6cd5)": [[235, "hashlib.hash.hexdigest"]], "hexdigest() (hashlib.shake \u7684\u65b9\u6cd5)": [[235, "hashlib.shake.hexdigest"]], "md5() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.md5"]], "message digest, md5": [[235, "index-0"]], "name (hashlib.hash \u7684\u5c6c\u6027)": [[235, "hashlib.hash.name"]], "new() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.new"]], "pbkdf2_hmac() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.pbkdf2_hmac"]], "scrypt() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.scrypt"]], "secure hash algorithm, sha1, sha2, sha224, sha256, sha384, sha512, sha3, shake, blake2": [[235, "index-0"]], "sha1() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.sha1"]], "sha224() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.sha224"]], "sha256() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.sha256"]], "sha384() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.sha384"]], "sha3_224() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.sha3_224"]], "sha3_256() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.sha3_256"]], "sha3_384() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.sha3_384"]], "sha3_512() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.sha3_512"]], "sha512() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.sha512"]], "shake_128() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.shake_128"]], "shake_256() (\u65bc hashlib \u6a21\u7d44\u4e2d)": [[235, "hashlib.shake_256"]], "update() (hashlib.hash \u7684\u65b9\u6cd5)": [[235, "hashlib.hash.update"]], "\uff08\u4f7f\u7528\u65bc hashlib \u6a21\u7d44\u4e2d\uff09": [[235, "index-2"]], "heapify() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[236, "heapq.heapify"]], "heappop() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[236, "heapq.heappop"]], "heappush() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[236, "heapq.heappush"]], "heappushpop() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[236, "heapq.heappushpop"]], "heapq": [[236, "module-heapq"]], "heapreplace() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[236, "heapq.heapreplace"]], "merge() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[236, "heapq.merge"]], "nlargest() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[236, "heapq.nlargest"]], "nsmallest() (\u65bc heapq \u6a21\u7d44\u4e2d)": [[236, "heapq.nsmallest"]], "rfc 2014": [[237, "index-2"]], "block_size (hmac.hmac \u7684\u5c6c\u6027)": [[237, "hmac.HMAC.block_size"]], "compare_digest() (\u65bc hmac \u6a21\u7d44\u4e2d)": [[237, "hmac.compare_digest"]], "copy() (hmac.hmac \u7684\u65b9\u6cd5)": [[237, "hmac.HMAC.copy"]], "digest() (hmac.hmac \u7684\u65b9\u6cd5)": [[237, "hmac.HMAC.digest"]], "digest() (\u65bc hmac \u6a21\u7d44\u4e2d)": [[237, "hmac.digest"]], "digest_size (hmac.hmac \u7684\u5c6c\u6027)": [[237, "hmac.HMAC.digest_size"]], "hexdigest() (hmac.hmac \u7684\u65b9\u6cd5)": [[237, "hmac.HMAC.hexdigest"]], "hmac": [[237, "module-hmac"]], "name (hmac.hmac \u7684\u5c6c\u6027)": [[237, "hmac.HMAC.name"]], "new() (\u65bc hmac \u6a21\u7d44\u4e2d)": [[237, "hmac.new"]], "update() (hmac.hmac \u7684\u65b9\u6cd5)": [[237, "hmac.HMAC.update"]], "escape() (\u65bc html \u6a21\u7d44\u4e2d)": [[238, "html.escape"]], "html": [[238, "module-html"], [240, "index-0"], [395, "index-10"]], "unescape() (\u65bc html \u6a21\u7d44\u4e2d)": [[238, "html.unescape"]], "codepoint2name (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[239, "html.entities.codepoint2name"]], "entitydefs (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[239, "html.entities.entitydefs"]], "html.entities": [[239, "module-html.entities"]], "html5 (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[239, "html.entities.html5"]], "name2codepoint (\u65bc html.entities \u6a21\u7d44\u4e2d)": [[239, "html.entities.name2codepoint"]], "htmlparser (html.parser \u4e2d\u7684\u985e\u5225)": [[240, "html.parser.HTMLParser"]], "xhtml": [[240, "index-0"]], "close() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[240, "html.parser.HTMLParser.close"]], "feed() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[240, "html.parser.HTMLParser.feed"]], "get_starttag_text() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[240, "html.parser.HTMLParser.get_starttag_text"]], "getpos() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[240, "html.parser.HTMLParser.getpos"]], "handle_charref() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[240, "html.parser.HTMLParser.handle_charref"]], "handle_comment() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[240, "html.parser.HTMLParser.handle_comment"]], "handle_data() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[240, "html.parser.HTMLParser.handle_data"]], "handle_decl() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[240, "html.parser.HTMLParser.handle_decl"]], "handle_endtag() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[240, "html.parser.HTMLParser.handle_endtag"]], "handle_entityref() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[240, "html.parser.HTMLParser.handle_entityref"]], "handle_pi() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[240, "html.parser.HTMLParser.handle_pi"]], "handle_startendtag() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[240, "html.parser.HTMLParser.handle_startendtag"]], "handle_starttag() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[240, "html.parser.HTMLParser.handle_starttag"]], "html.parser": [[240, "module-html.parser"]], "reset() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[240, "html.parser.HTMLParser.reset"]], "unknown_decl() (html.parser.htmlparser \u7684\u65b9\u6cd5)": [[240, "html.parser.HTMLParser.unknown_decl"]], "httpmethod (http \u4e2d\u7684\u985e\u5225)": [[241, "http.HTTPMethod"]], "httpstatus (http \u4e2d\u7684\u985e\u5225)": [[241, "http.HTTPStatus"]], "rfc 2295": [[241, "index-209"]], "rfc 2324": [[241, "index-192"]], "rfc 2518": [[241, "index-154"]], "rfc 2774": [[241, "index-212"]], "rfc 3229": [[241, "index-165"]], "rfc 4918": [[241, "index-163"], [241, "index-194"], [241, "index-195"], [241, "index-196"], [241, "index-210"]], "rfc 5789": [[241, "index-76"]], "rfc 5842": [[241, "index-164"], [241, "index-211"]], "rfc 6585": [[241, "index-199"], [241, "index-200"], [241, "index-201"], [241, "index-213"]], "rfc 7231": [[241, "index-152"], [241, "index-153"], [241, "index-156"], [241, "index-157"], [241, "index-158"], [241, "index-159"], [241, "index-160"], [241, "index-161"], [241, "index-166"], [241, "index-167"], [241, "index-168"], [241, "index-169"], [241, "index-171"], [241, "index-172"], [241, "index-174"], [241, "index-176"], [241, "index-177"], [241, "index-178"], [241, "index-179"], [241, "index-180"], [241, "index-182"], [241, "index-183"], [241, "index-184"], [241, "index-185"], [241, "index-187"], [241, "index-188"], [241, "index-189"], [241, "index-191"], [241, "index-198"], [241, "index-203"], [241, "index-204"], [241, "index-205"], [241, "index-206"], [241, "index-207"], [241, "index-208"], [241, "index-214"], [241, "index-215"], [241, "index-216"], [241, "index-217"], [241, "index-218"], [241, "index-219"], [241, "index-220"], [241, "index-221"], [241, "index-222"], [241, "index-223"], [241, "index-224"], [241, "index-225"], [241, "index-226"]], "rfc 7232": [[241, "index-170"], [241, "index-186"]], "rfc 7233": [[241, "index-162"], [241, "index-190"]], "rfc 7235": [[241, "index-175"], [241, "index-181"]], "rfc 7238": [[241, "index-173"]], "rfc 7540": [[241, "index-193"]], "rfc 7725": [[241, "index-202"]], "rfc 8297": [[241, "index-155"]], "rfc 8470": [[241, "index-197"]], "http\uff08\u6a19\u6e96\u6a21\u7d44\uff09": [[241, "index-0"]], "badstatusline": [[242, "http.client.BadStatusLine"]], "cannotsendheader": [[242, "http.client.CannotSendHeader"]], "cannotsendrequest": [[242, "http.client.CannotSendRequest"]], "httpconnection (http.client \u4e2d\u7684\u985e\u5225)": [[242, "http.client.HTTPConnection"]], "httpexception": [[242, "http.client.HTTPException"]], "httpmessage (http.client \u4e2d\u7684\u985e\u5225)": [[242, "http.client.HTTPMessage"]], "httpresponse (http.client \u4e2d\u7684\u985e\u5225)": [[242, "http.client.HTTPResponse"]], "httpsconnection (http.client \u4e2d\u7684\u985e\u5225)": [[242, "http.client.HTTPSConnection"]], "https_port (\u65bc http.client \u6a21\u7d44\u4e2d)": [[242, "http.client.HTTPS_PORT"]], "http_port (\u65bc http.client \u6a21\u7d44\u4e2d)": [[242, "http.client.HTTP_PORT"]], "improperconnectionstate": [[242, "http.client.ImproperConnectionState"]], "incompleteread": [[242, "http.client.IncompleteRead"]], "invalidurl": [[242, "http.client.InvalidURL"]], "linetoolong": [[242, "http.client.LineTooLong"]], "notconnected": [[242, "http.client.NotConnected"]], "rfc 2616#section-14.23": [[242, "index-4"]], "rfc 2616#section-5.1.2": [[242, "index-3"], [242, "index-5"]], "rfc 7230": [[242, "index-7"], [395, "index-15"]], "remotedisconnected": [[242, "http.client.RemoteDisconnected"]], "responsenotready": [[242, "http.client.ResponseNotReady"]], "unimplementedfilemode": [[242, "http.client.UnimplementedFileMode"]], "unknownprotocol": [[242, "http.client.UnknownProtocol"]], "unknowntransferencoding": [[242, "http.client.UnknownTransferEncoding"]], "blocksize (http.client.httpconnection \u7684\u5c6c\u6027)": [[242, "http.client.HTTPConnection.blocksize"]], "close() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[242, "http.client.HTTPConnection.close"]], "closed (http.client.httpresponse \u7684\u5c6c\u6027)": [[242, "http.client.HTTPResponse.closed"]], "connect() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[242, "http.client.HTTPConnection.connect"]], "debuglevel (http.client.httpresponse \u7684\u5c6c\u6027)": [[242, "http.client.HTTPResponse.debuglevel"]], "endheaders() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[242, "http.client.HTTPConnection.endheaders"]], "fileno() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[242, "http.client.HTTPResponse.fileno"]], "get_proxy_response_headers() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[242, "http.client.HTTPConnection.get_proxy_response_headers"]], "getcode() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[242, "http.client.HTTPResponse.getcode"]], "getheader() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[242, "http.client.HTTPResponse.getheader"]], "getheaders() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[242, "http.client.HTTPResponse.getheaders"]], "getresponse() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[242, "http.client.HTTPConnection.getresponse"]], "geturl() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[242, "http.client.HTTPResponse.geturl"]], "headers (http.client.httpresponse \u7684\u5c6c\u6027)": [[242, "http.client.HTTPResponse.headers"]], "http.client": [[242, "module-http.client"]], "http.client\uff08\u6a19\u6e96\u6a21\u7d44\uff09": [[242, "index-0"]], "info() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[242, "http.client.HTTPResponse.info"]], "msg (http.client.httpresponse \u7684\u5c6c\u6027)": [[242, "http.client.HTTPResponse.msg"]], "parse_headers() (\u65bc http.client \u6a21\u7d44\u4e2d)": [[242, "http.client.parse_headers"]], "putheader() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[242, "http.client.HTTPConnection.putheader"]], "putrequest() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[242, "http.client.HTTPConnection.putrequest"]], "read() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[242, "http.client.HTTPResponse.read"]], "readinto() (http.client.httpresponse \u7684\u65b9\u6cd5)": [[242, "http.client.HTTPResponse.readinto"]], "reason (http.client.httpresponse \u7684\u5c6c\u6027)": [[242, "http.client.HTTPResponse.reason"]], "request() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[242, "http.client.HTTPConnection.request"]], "responses (\u65bc http.client \u6a21\u7d44\u4e2d)": [[242, "http.client.responses"]], "send() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[242, "http.client.HTTPConnection.send"]], "set_debuglevel() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[242, "http.client.HTTPConnection.set_debuglevel"]], "set_tunnel() (http.client.httpconnection \u7684\u65b9\u6cd5)": [[242, "http.client.HTTPConnection.set_tunnel"]], "status (http.client.httpresponse \u7684\u5c6c\u6027)": [[242, "http.client.HTTPResponse.status"]], "url (http.client.httpresponse \u7684\u5c6c\u6027)": [[242, "http.client.HTTPResponse.url"]], "urllib.request": [[242, "index-1"], [395, "module-urllib.request"]], "version (http.client.httpresponse \u7684\u5c6c\u6027)": [[242, "http.client.HTTPResponse.version"]], "cookie (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[243, "http.cookiejar.Cookie"]], "cookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[243, "http.cookiejar.CookieJar"]], "cookiepolicy (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[243, "http.cookiejar.CookiePolicy"]], "defaultcookiepolicy (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[243, "http.cookiejar.DefaultCookiePolicy"]], "domainliberal (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[243, "http.cookiejar.DefaultCookiePolicy.DomainLiberal"]], "domainrfc2965match (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[243, "http.cookiejar.DefaultCookiePolicy.DomainRFC2965Match"]], "domainstrict (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[243, "http.cookiejar.DefaultCookiePolicy.DomainStrict"]], "domainstrictnodots (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[243, "http.cookiejar.DefaultCookiePolicy.DomainStrictNoDots"]], "domainstrictnondomain (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[243, "http.cookiejar.DefaultCookiePolicy.DomainStrictNonDomain"]], "filecookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[243, "http.cookiejar.FileCookieJar"]], "lwpcookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[243, "http.cookiejar.LWPCookieJar"]], "loaderror": [[243, "http.cookiejar.LoadError"]], "mozillacookiejar (http.cookiejar \u4e2d\u7684\u985e\u5225)": [[243, "http.cookiejar.MozillaCookieJar"]], "rfc 2109": [[243, "index-1"], [243, "index-15"], [243, "index-21"], [243, "index-23"], [243, "index-24"], [243, "index-3"], [243, "index-4"], [243, "index-6"], [244, "index-0"], [244, "index-2"], [244, "index-3"], [244, "index-4"], [244, "index-5"], [244, "index-6"], [244, "index-7"]], "rfc 2964": [[243, "index-10"]], "rfc 2965": [[243, "index-0"], [243, "index-11"], [243, "index-12"], [243, "index-13"], [243, "index-14"], [243, "index-16"], [243, "index-17"], [243, "index-18"], [243, "index-19"], [243, "index-2"], [243, "index-20"], [243, "index-22"], [243, "index-25"], [243, "index-5"], [243, "index-7"], [243, "index-8"], [243, "index-9"], [395, "index-16"], [395, "index-17"], [395, "index-4"]], "add_cookie_header() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.CookieJar.add_cookie_header"]], "allowed_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.DefaultCookiePolicy.allowed_domains"]], "blocked_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.DefaultCookiePolicy.blocked_domains"]], "clear() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.CookieJar.clear"]], "clear_session_cookies() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.CookieJar.clear_session_cookies"]], "comment (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[243, "http.cookiejar.Cookie.comment"]], "comment_url (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[243, "http.cookiejar.Cookie.comment_url"]], "delayload (http.cookiejar.filecookiejar \u7684\u5c6c\u6027)": [[243, "http.cookiejar.FileCookieJar.delayload"]], "discard (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[243, "http.cookiejar.Cookie.discard"]], "domain (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[243, "http.cookiejar.Cookie.domain"]], "domain_initial_dot (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[243, "http.cookiejar.Cookie.domain_initial_dot"]], "domain_return_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.CookiePolicy.domain_return_ok"]], "domain_specified (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[243, "http.cookiejar.Cookie.domain_specified"]], "expires (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[243, "http.cookiejar.Cookie.expires"]], "extract_cookies() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.CookieJar.extract_cookies"]], "filename (http.cookiejar.filecookiejar \u7684\u5c6c\u6027)": [[243, "http.cookiejar.FileCookieJar.filename"]], "get_nonstandard_attr() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.Cookie.get_nonstandard_attr"]], "has_nonstandard_attr() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.Cookie.has_nonstandard_attr"]], "hide_cookie2 (http.cookiejar.cookiepolicy \u7684\u5c6c\u6027)": [[243, "http.cookiejar.CookiePolicy.hide_cookie2"]], "http.cookiejar": [[243, "module-http.cookiejar"]], "is_blocked() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.DefaultCookiePolicy.is_blocked"]], "is_expired() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.Cookie.is_expired"]], "is_not_allowed() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.DefaultCookiePolicy.is_not_allowed"]], "load() (http.cookiejar.filecookiejar \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.FileCookieJar.load"]], "make_cookies() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.CookieJar.make_cookies"]], "name (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[243, "http.cookiejar.Cookie.name"]], "netscape (http.cookiejar.cookiepolicy \u7684\u5c6c\u6027)": [[243, "http.cookiejar.CookiePolicy.netscape"]], "path (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[243, "http.cookiejar.Cookie.path"]], "path_return_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.CookiePolicy.path_return_ok"]], "port (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[243, "http.cookiejar.Cookie.port"]], "port_specified (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[243, "http.cookiejar.Cookie.port_specified"]], "return_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.CookiePolicy.return_ok"]], "revert() (http.cookiejar.filecookiejar \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.FileCookieJar.revert"]], "rfc2109 (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[243, "http.cookiejar.Cookie.rfc2109"]], "rfc2109_as_netscape (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[243, "http.cookiejar.DefaultCookiePolicy.rfc2109_as_netscape"]], "rfc2965 (http.cookiejar.cookiepolicy \u7684\u5c6c\u6027)": [[243, "http.cookiejar.CookiePolicy.rfc2965"]], "save() (http.cookiejar.filecookiejar \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.FileCookieJar.save"]], "secure (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[243, "http.cookiejar.Cookie.secure"]], "set_allowed_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.DefaultCookiePolicy.set_allowed_domains"]], "set_blocked_domains() (http.cookiejar.defaultcookiepolicy \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.DefaultCookiePolicy.set_blocked_domains"]], "set_cookie() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.CookieJar.set_cookie"]], "set_cookie_if_ok() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.CookieJar.set_cookie_if_ok"]], "set_nonstandard_attr() (http.cookiejar.cookie \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.Cookie.set_nonstandard_attr"]], "set_ok() (http.cookiejar.cookiepolicy \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.CookiePolicy.set_ok"]], "set_policy() (http.cookiejar.cookiejar \u7684\u65b9\u6cd5)": [[243, "http.cookiejar.CookieJar.set_policy"]], "strict_domain (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[243, "http.cookiejar.DefaultCookiePolicy.strict_domain"]], "strict_ns_domain (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[243, "http.cookiejar.DefaultCookiePolicy.strict_ns_domain"]], "strict_ns_set_initial_dollar (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[243, "http.cookiejar.DefaultCookiePolicy.strict_ns_set_initial_dollar"]], "strict_ns_set_path (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[243, "http.cookiejar.DefaultCookiePolicy.strict_ns_set_path"]], "strict_ns_unverifiable (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[243, "http.cookiejar.DefaultCookiePolicy.strict_ns_unverifiable"]], "strict_rfc2965_unverifiable (http.cookiejar.defaultcookiepolicy \u7684\u5c6c\u6027)": [[243, "http.cookiejar.DefaultCookiePolicy.strict_rfc2965_unverifiable"]], "value (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[243, "http.cookiejar.Cookie.value"]], "version (http.cookiejar.cookie \u7684\u5c6c\u6027)": [[243, "http.cookiejar.Cookie.version"]], "basecookie (http.cookies \u4e2d\u7684\u985e\u5225)": [[244, "http.cookies.BaseCookie"]], "cookieerror": [[244, "http.cookies.CookieError"]], "morsel (http.cookies \u4e2d\u7684\u985e\u5225)": [[244, "http.cookies.Morsel"]], "outputstring() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[244, "http.cookies.Morsel.OutputString"]], "rfc 2068": [[244, "index-1"]], "simplecookie (http.cookies \u4e2d\u7684\u985e\u5225)": [[244, "http.cookies.SimpleCookie"]], "coded_value (http.cookies.morsel \u7684\u5c6c\u6027)": [[244, "http.cookies.Morsel.coded_value"]], "comment (http.cookies.morsel \u7684\u5c6c\u6027)": [[244, "http.cookies.Morsel.comment"]], "copy() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[244, "http.cookies.Morsel.copy"]], "domain (http.cookies.morsel \u7684\u5c6c\u6027)": [[244, "http.cookies.Morsel.domain"]], "expires (http.cookies.morsel \u7684\u5c6c\u6027)": [[244, "http.cookies.Morsel.expires"]], "http.cookies": [[244, "module-http.cookies"]], "httponly (http.cookies.morsel \u7684\u5c6c\u6027)": [[244, "http.cookies.Morsel.httponly"]], "isreservedkey() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[244, "http.cookies.Morsel.isReservedKey"]], "js_output() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[244, "http.cookies.BaseCookie.js_output"]], "js_output() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[244, "http.cookies.Morsel.js_output"]], "key (http.cookies.morsel \u7684\u5c6c\u6027)": [[244, "http.cookies.Morsel.key"]], "load() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[244, "http.cookies.BaseCookie.load"]], "output() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[244, "http.cookies.BaseCookie.output"]], "output() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[244, "http.cookies.Morsel.output"]], "path (http.cookies.morsel \u7684\u5c6c\u6027)": [[244, "http.cookies.Morsel.path"]], "samesite (http.cookies.morsel \u7684\u5c6c\u6027)": [[244, "http.cookies.Morsel.samesite"]], "secure (http.cookies.morsel \u7684\u5c6c\u6027)": [[244, "http.cookies.Morsel.secure"]], "set() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[244, "http.cookies.Morsel.set"]], "setdefault() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[244, "http.cookies.Morsel.setdefault"]], "update() (http.cookies.morsel \u7684\u65b9\u6cd5)": [[244, "http.cookies.Morsel.update"]], "value (http.cookies.morsel \u7684\u5c6c\u6027)": [[244, "http.cookies.Morsel.value"]], "value_decode() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[244, "http.cookies.BaseCookie.value_decode"]], "value_encode() (http.cookies.basecookie \u7684\u65b9\u6cd5)": [[244, "http.cookies.BaseCookie.value_encode"]], "version (http.cookies.morsel \u7684\u5c6c\u6027)": [[244, "http.cookies.Morsel.version"]], "basehttprequesthandler (http.server \u4e2d\u7684\u985e\u5225)": [[245, "http.server.BaseHTTPRequestHandler"]], "cgihttprequesthandler (http.server \u4e2d\u7684\u985e\u5225)": [[245, "http.server.CGIHTTPRequestHandler"]], "httpserver (http.server \u4e2d\u7684\u985e\u5225)": [[245, "http.server.HTTPServer"]], "messageclass (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.BaseHTTPRequestHandler.MessageClass"]], "rfc 3986": [[245, "index-1"], [394, "index-2"], [394, "index-4"], [394, "index-5"], [394, "index-7"], [394, "index-8"], [469, "index-12"], [469, "index-9"], [472, "index-32"], [478, "index-42"], [480, "index-35"], [481, "index-25"], [482, "index-28"]], "simplehttprequesthandler (http.server \u4e2d\u7684\u985e\u5225)": [[245, "http.server.SimpleHTTPRequestHandler"]], "threadinghttpserver (http.server \u4e2d\u7684\u985e\u5225)": [[245, "http.server.ThreadingHTTPServer"]], "address_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[245, "http.server.BaseHTTPRequestHandler.address_string"]], "cgi_directories (http.server.cgihttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.CGIHTTPRequestHandler.cgi_directories"]], "client_address (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.BaseHTTPRequestHandler.client_address"]], "close_connection (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.BaseHTTPRequestHandler.close_connection"]], "command (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.BaseHTTPRequestHandler.command"]], "date_time_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[245, "http.server.BaseHTTPRequestHandler.date_time_string"]], "do_get() (http.server.simplehttprequesthandler \u7684\u65b9\u6cd5)": [[245, "http.server.SimpleHTTPRequestHandler.do_GET"]], "do_head() (http.server.simplehttprequesthandler \u7684\u65b9\u6cd5)": [[245, "http.server.SimpleHTTPRequestHandler.do_HEAD"]], "do_post() (http.server.cgihttprequesthandler \u7684\u65b9\u6cd5)": [[245, "http.server.CGIHTTPRequestHandler.do_POST"]], "end_headers() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[245, "http.server.BaseHTTPRequestHandler.end_headers"]], "error_content_type (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.BaseHTTPRequestHandler.error_content_type"]], "error_message_format (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.BaseHTTPRequestHandler.error_message_format"]], "extensions_map (http.server.simplehttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.SimpleHTTPRequestHandler.extensions_map"]], "flush_headers() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[245, "http.server.BaseHTTPRequestHandler.flush_headers"]], "handle() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[245, "http.server.BaseHTTPRequestHandler.handle"]], "handle_expect_100() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[245, "http.server.BaseHTTPRequestHandler.handle_expect_100"]], "handle_one_request() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[245, "http.server.BaseHTTPRequestHandler.handle_one_request"]], "headers (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.BaseHTTPRequestHandler.headers"]], "http.server": [[245, "index-3"], [245, "module-http.server"]], "httpd": [[245, "index-0"]], "log_date_time_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[245, "http.server.BaseHTTPRequestHandler.log_date_time_string"]], "log_error() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[245, "http.server.BaseHTTPRequestHandler.log_error"]], "log_message() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[245, "http.server.BaseHTTPRequestHandler.log_message"]], "log_request() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[245, "http.server.BaseHTTPRequestHandler.log_request"]], "path (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.BaseHTTPRequestHandler.path"]], "protocol_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.BaseHTTPRequestHandler.protocol_version"]], "request_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.BaseHTTPRequestHandler.request_version"]], "requestline (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.BaseHTTPRequestHandler.requestline"]], "responses (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.BaseHTTPRequestHandler.responses"]], "rfile (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.BaseHTTPRequestHandler.rfile"]], "send_error() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[245, "http.server.BaseHTTPRequestHandler.send_error"]], "send_header() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[245, "http.server.BaseHTTPRequestHandler.send_header"]], "send_response() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[245, "http.server.BaseHTTPRequestHandler.send_response"]], "send_response_only() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[245, "http.server.BaseHTTPRequestHandler.send_response_only"]], "server (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.BaseHTTPRequestHandler.server"]], "server_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.BaseHTTPRequestHandler.server_version"]], "server_version (http.server.simplehttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.SimpleHTTPRequestHandler.server_version"]], "sys_version (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.BaseHTTPRequestHandler.sys_version"]], "version_string() (http.server.basehttprequesthandler \u7684\u65b9\u6cd5)": [[245, "http.server.BaseHTTPRequestHandler.version_string"]], "wfile (http.server.basehttprequesthandler \u7684\u5c6c\u6027)": [[245, "http.server.BaseHTTPRequestHandler.wfile"]], "clear breakpoint": [[247, "index-4"]], "cut\uff08\u526a\u4e0b\uff09": [[247, "index-4"]], "idlestartup": [[247, "index-5"], [483, "index-225"], [483, "index-230"], [483, "index-255"]], "integrated development environment\uff08\u6574\u5408\u958b\u767c\u74b0\u5883\uff09": [[247, "index-0"]], "module browser\uff08\u6a21\u7d44\u700f\u89bd\u5668\uff09": [[247, "index-1"]], "pep 434": [[247, "index-7"], [469, "index-13"]], "pythonstartup": [[247, "index-6"], [320, "index-0"], [334, "index-5"], [352, "index-18"], [438, "index-13"], [455, "envvar-PYTHONSTARTUP"], [455, "index-5"], [477, "index-40"], [477, "index-41"], [483, "index-226"], [483, "index-231"], [483, "index-256"]], "paste\uff08\u8cbc\u4e0a\uff09": [[247, "index-4"]], "path browser\uff08\u8def\u5f91\u700f\u89bd\u5668\uff09": [[247, "index-1"]], "python editor\uff08python \u7de8\u8f2f\u5668\uff09": [[247, "index-0"]], "run script\uff08\u57f7\u884c\u8173\u672c\uff09": [[247, "index-2"]], "set breakpoint": [[247, "index-4"]], "breakpoints\uff08\u4e2d\u65b7\u9ede\uff09": [[247, "index-4"]], "debugger\uff08\u9664\u932f\u5668\uff09": [[247, "index-3"], [297, "index-2"], [352, "index-11"], [352, "index-29"], [365, "index-1"]], "idlelib": [[247, "module-idlelib"]], "stack viewer\uff08\u5806\u758a\u6aa2\u8996\u5668\uff09": [[247, "index-3"]], "imap4": [[248, "index-0"]], "imap4 (imaplib \u4e2d\u7684\u985e\u5225)": [[248, "imaplib.IMAP4"]], "imap4.abort": [[248, "imaplib.IMAP4.abort"]], "imap4.error": [[248, "imaplib.IMAP4.error"]], "imap4.readonly": [[248, "imaplib.IMAP4.readonly"]], "imap4_ssl": [[248, "index-0"]], "imap4_ssl (imaplib \u4e2d\u7684\u985e\u5225)": [[248, "imaplib.IMAP4_SSL"]], "imap4_stream": [[248, "index-0"]], "imap4_stream (imaplib \u4e2d\u7684\u985e\u5225)": [[248, "imaplib.IMAP4_stream"]], "int2ap() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[248, "imaplib.Int2AP"]], "internaldate2tuple() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[248, "imaplib.Internaldate2tuple"]], "protocol_version (imaplib.imap4 \u7684\u5c6c\u6027)": [[248, "imaplib.IMAP4.PROTOCOL_VERSION"]], "parseflags() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[248, "imaplib.ParseFlags"]], "rfc 1730": [[248, "index-2"]], "rfc 2060": [[248, "index-1"], [248, "index-7"]], "rfc 2342": [[248, "index-6"], [464, "index-19"]], "rfc 3501": [[248, "index-8"]], "rfc 5161": [[248, "index-3"], [478, "index-33"]], "rfc 6855": [[248, "index-4"], [248, "index-5"], [478, "index-34"], [478, "index-35"]], "time2internaldate() (\u65bc imaplib \u6a21\u7d44\u4e2d)": [[248, "imaplib.Time2Internaldate"]], "append() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.append"]], "authenticate() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.authenticate"]], "check() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.check"]], "close() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.close"]], "copy() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.copy"]], "create() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.create"]], "debug (imaplib.imap4 \u7684\u5c6c\u6027)": [[248, "imaplib.IMAP4.debug"]], "delete() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.delete"]], "deleteacl() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.deleteacl"]], "enable() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.enable"]], "expunge() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.expunge"]], "fetch() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.fetch"]], "getacl() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.getacl"]], "getannotation() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.getannotation"]], "getquota() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.getquota"]], "getquotaroot() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.getquotaroot"]], "imaplib": [[248, "module-imaplib"]], "list() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.list"]], "login() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.login"]], "login_cram_md5() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.login_cram_md5"]], "logout() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.logout"]], "lsub() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.lsub"]], "myrights() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.myrights"]], "namespace() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.namespace"]], "noop() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.noop"]], "open() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.open"]], "partial() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.partial"]], "proxyauth() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.proxyauth"]], "read() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.read"]], "readline() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.readline"]], "recent() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.recent"]], "rename() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.rename"]], "response() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.response"]], "search() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.search"]], "select() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.select"]], "send() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.send"]], "setacl() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.setacl"]], "setannotation() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.setannotation"]], "setquota() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.setquota"]], "shutdown() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.shutdown"]], "socket() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.socket"]], "sort() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.sort"]], "starttls() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.starttls"]], "status() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.status"]], "store() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.store"]], "subscribe() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.subscribe"]], "thread() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.thread"]], "uid() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.uid"]], "unselect() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.unselect"]], "unsubscribe() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.unsubscribe"]], "utf8_enabled (imaplib.imap4 \u7684\u5c6c\u6027)": [[248, "imaplib.IMAP4.utf8_enabled"]], "xatom() (imaplib.imap4 \u7684\u65b9\u6cd5)": [[248, "imaplib.IMAP4.xatom"]], "pep 594#imghdr": [[249, "index-2"]], "imghdr": [[249, "module-imghdr"]], "tests (\u65bc imghdr \u6a21\u7d44\u4e2d)": [[249, "imghdr.tests"]], "what() (\u65bc imghdr \u6a21\u7d44\u4e2d)": [[249, "imghdr.what"]], "bytecode_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[250, "importlib.machinery.BYTECODE_SUFFIXES"]], "builtinimporter (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[250, "importlib.machinery.BuiltinImporter"]], "debug_bytecode_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[250, "importlib.machinery.DEBUG_BYTECODE_SUFFIXES"]], "extension_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[250, "importlib.machinery.EXTENSION_SUFFIXES"]], "executionloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.ExecutionLoader"]], "extensionfileloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[250, "importlib.machinery.ExtensionFileLoader"]], "filefinder (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[250, "importlib.machinery.FileFinder"]], "fileloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.FileLoader"]], "frozenimporter (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[250, "importlib.machinery.FrozenImporter"]], "inspectloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.InspectLoader"]], "lazyloader (importlib.util \u4e2d\u7684\u985e\u5225)": [[250, "importlib.util.LazyLoader"]], "loader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.Loader"]], "magic_number (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.MAGIC_NUMBER"]], "metapathfinder (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.MetaPathFinder"]], "modulespec (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[250, "importlib.machinery.ModuleSpec"]], "namespaceloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[250, "importlib.machinery.NamespaceLoader"]], "optimized_bytecode_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[250, "importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES"]], "pep 235": [[250, "index-0"]], "pep 3120": [[250, "index-10"], [435, "index-1"], [470, "index-4"]], "pep 366": [[250, "index-4"], [324, "index-7"], [432, "index-11"], [432, "index-12"], [432, "index-23"], [432, "index-25"], [476, "index-22"]], "pep 488": [[250, "index-22"], [250, "index-25"], [250, "index-7"], [311, "index-2"], [362, "index-4"], [455, "index-10"], [455, "index-52"], [455, "index-53"], [455, "index-7"], [478, "index-24"], [478, "index-25"], [478, "index-50"], [483, "index-298"]], "pathentryfinder (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.PathEntryFinder"]], "pathfinder (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[250, "importlib.machinery.PathFinder"]], "resourceloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.ResourceLoader"]], "resourcereader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.ResourceReader"]], "source_suffixes (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[250, "importlib.machinery.SOURCE_SUFFIXES"]], "sourcefileloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[250, "importlib.machinery.SourceFileLoader"]], "sourceloader (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.SourceLoader"]], "sourcelessfileloader (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[250, "importlib.machinery.SourcelessFileLoader"]], "traversable (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.Traversable"]], "traversableresources (importlib.abc \u4e2d\u7684\u985e\u5225)": [[250, "importlib.abc.TraversableResources"]], "windowsregistryfinder (importlib.machinery \u4e2d\u7684\u985e\u5225)": [[250, "importlib.machinery.WindowsRegistryFinder"]], "__import__() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[250, "importlib.__import__"]], "__truediv__() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[250, "importlib.abc.Traversable.__truediv__"]], "_incompatible_extension_module_restrictions() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util._incompatible_extension_module_restrictions"]], "all_suffixes() (\u65bc importlib.machinery \u6a21\u7d44\u4e2d)": [[250, "importlib.machinery.all_suffixes"]], "cache_from_source() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.cache_from_source"]], "cached (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ModuleSpec.cached"]], "contents() (importlib.abc.resourcereader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.ResourceReader.contents"]], "create_module() (importlib.abc.loader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.Loader.create_module"]], "create_module() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.ExtensionFileLoader.create_module"]], "decode_source() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.decode_source"]], "exec_module() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.InspectLoader.exec_module"]], "exec_module() (importlib.abc.loader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.Loader.exec_module"]], "exec_module() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.SourceLoader.exec_module"]], "exec_module() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.ExtensionFileLoader.exec_module"]], "factory() (importlib.util.lazyloader \u7684\u985e\u5225\u65b9\u6cd5)": [[250, "importlib.util.LazyLoader.factory"]], "files() (importlib.abc.traversableresources \u7684\u65b9\u6cd5)": [[250, "importlib.abc.TraversableResources.files"]], "find_spec() (importlib.abc.metapathfinder \u7684\u65b9\u6cd5)": [[250, "importlib.abc.MetaPathFinder.find_spec"]], "find_spec() (importlib.abc.pathentryfinder \u7684\u65b9\u6cd5)": [[250, "importlib.abc.PathEntryFinder.find_spec"]], "find_spec() (importlib.machinery.filefinder \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.FileFinder.find_spec"]], "find_spec() (importlib.machinery.pathfinder \u7684\u985e\u5225\u65b9\u6cd5)": [[250, "importlib.machinery.PathFinder.find_spec"]], "find_spec() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.find_spec"]], "get_code() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.InspectLoader.get_code"]], "get_code() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.SourceLoader.get_code"]], "get_code() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.ExtensionFileLoader.get_code"]], "get_code() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.SourcelessFileLoader.get_code"]], "get_data() (importlib.abc.fileloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.FileLoader.get_data"]], "get_data() (importlib.abc.resourceloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.ResourceLoader.get_data"]], "get_filename() (importlib.abc.executionloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.ExecutionLoader.get_filename"]], "get_filename() (importlib.abc.fileloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.FileLoader.get_filename"]], "get_filename() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.ExtensionFileLoader.get_filename"]], "get_source() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.InspectLoader.get_source"]], "get_source() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.SourceLoader.get_source"]], "get_source() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.ExtensionFileLoader.get_source"]], "get_source() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.SourcelessFileLoader.get_source"]], "has_location (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ModuleSpec.has_location"]], "import_module() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[250, "importlib.import_module"]], "importlib": [[250, "module-importlib"]], "importlib.abc": [[250, "module-importlib.abc"]], "importlib.abc.inspectloader.get_source \u65b9\u6cd5": [[250, "index-15"]], "importlib.machinery": [[250, "module-importlib.machinery"]], "importlib.util": [[250, "module-importlib.util"]], "invalidate_caches() (importlib.abc.metapathfinder \u7684\u65b9\u6cd5)": [[250, "importlib.abc.MetaPathFinder.invalidate_caches"]], "invalidate_caches() (importlib.abc.pathentryfinder \u7684\u65b9\u6cd5)": [[250, "importlib.abc.PathEntryFinder.invalidate_caches"]], "invalidate_caches() (importlib.machinery.filefinder \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.FileFinder.invalidate_caches"]], "invalidate_caches() (importlib.machinery.pathfinder \u7684\u985e\u5225\u65b9\u6cd5)": [[250, "importlib.machinery.PathFinder.invalidate_caches"]], "invalidate_caches() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[250, "importlib.invalidate_caches"]], "is_dir() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[250, "importlib.abc.Traversable.is_dir"]], "is_file() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[250, "importlib.abc.Traversable.is_file"]], "is_package() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.InspectLoader.is_package"]], "is_package() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.SourceLoader.is_package"]], "is_package() (importlib.machinery.extensionfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.ExtensionFileLoader.is_package"]], "is_package() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.SourceFileLoader.is_package"]], "is_package() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.SourcelessFileLoader.is_package"]], "is_resource() (importlib.abc.resourcereader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.ResourceReader.is_resource"]], "iterdir() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[250, "importlib.abc.Traversable.iterdir"]], "joinpath() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[250, "importlib.abc.Traversable.joinpath"]], "load_module() (importlib.abc.fileloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.FileLoader.load_module"]], "load_module() (importlib.abc.inspectloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.InspectLoader.load_module"]], "load_module() (importlib.abc.loader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.Loader.load_module"]], "load_module() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.SourceLoader.load_module"]], "load_module() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.SourceFileLoader.load_module"]], "load_module() (importlib.machinery.sourcelessfileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.SourcelessFileLoader.load_module"]], "loader (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ModuleSpec.loader"]], "loader_state (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ModuleSpec.loader_state"]], "module_from_spec() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.module_from_spec"]], "name (importlib.abc.fileloader \u7684\u5c6c\u6027)": [[250, "importlib.abc.FileLoader.name"]], "name (importlib.abc.traversable \u7684\u5c6c\u6027)": [[250, "importlib.abc.Traversable.name"]], "name (importlib.machinery.extensionfileloader \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ExtensionFileLoader.name"]], "name (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ModuleSpec.name"]], "name (importlib.machinery.sourcefileloader \u7684\u5c6c\u6027)": [[250, "importlib.machinery.SourceFileLoader.name"]], "name (importlib.machinery.sourcelessfileloader \u7684\u5c6c\u6027)": [[250, "importlib.machinery.SourcelessFileLoader.name"]], "open() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[250, "importlib.abc.Traversable.open"]], "open_resource() (importlib.abc.resourcereader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.ResourceReader.open_resource"]], "origin (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ModuleSpec.origin"]], "parent (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ModuleSpec.parent"]], "path (importlib.abc.fileloader \u7684\u5c6c\u6027)": [[250, "importlib.abc.FileLoader.path"]], "path (importlib.machinery.extensionfileloader \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ExtensionFileLoader.path"]], "path (importlib.machinery.filefinder \u7684\u5c6c\u6027)": [[250, "importlib.machinery.FileFinder.path"]], "path (importlib.machinery.sourcefileloader \u7684\u5c6c\u6027)": [[250, "importlib.machinery.SourceFileLoader.path"]], "path (importlib.machinery.sourcelessfileloader \u7684\u5c6c\u6027)": [[250, "importlib.machinery.SourcelessFileLoader.path"]], "path_hook() (importlib.machinery.filefinder \u7684\u985e\u5225\u65b9\u6cd5)": [[250, "importlib.machinery.FileFinder.path_hook"]], "path_mtime() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.SourceLoader.path_mtime"]], "path_stats() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.SourceLoader.path_stats"]], "path_stats() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.SourceFileLoader.path_stats"]], "read_bytes() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[250, "importlib.abc.Traversable.read_bytes"]], "read_text() (importlib.abc.traversable \u7684\u65b9\u6cd5)": [[250, "importlib.abc.Traversable.read_text"]], "reload() (\u65bc importlib \u6a21\u7d44\u4e2d)": [[250, "importlib.reload"]], "resolve_name() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.resolve_name"]], "resource_path() (importlib.abc.resourcereader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.ResourceReader.resource_path"]], "set_data() (importlib.abc.sourceloader \u7684\u65b9\u6cd5)": [[250, "importlib.abc.SourceLoader.set_data"]], "set_data() (importlib.machinery.sourcefileloader \u7684\u65b9\u6cd5)": [[250, "importlib.machinery.SourceFileLoader.set_data"]], "source_from_cache() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.source_from_cache"]], "source_hash() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.source_hash"]], "source_to_code() (importlib.abc.inspectloader \u7684\u975c\u614b\u65b9\u6cd5)": [[250, "importlib.abc.InspectLoader.source_to_code"]], "spec_from_file_location() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.spec_from_file_location"]], "spec_from_loader() (\u65bc importlib.util \u6a21\u7d44\u4e2d)": [[250, "importlib.util.spec_from_loader"]], "submodule_search_locations (importlib.machinery.modulespec \u7684\u5c6c\u6027)": [[250, "importlib.machinery.ModuleSpec.submodule_search_locations"]], "pep 566": [[251, "index-0"]], "importlib.metadata": [[251, "module-importlib.metadata"]], "anchor (importlib.resources \u4e2d\u7684\u985e\u5225)": [[252, "importlib.resources.Anchor"]], "package (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.Package"]], "resource (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.Resource"]], "as_file() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.as_file"]], "contents() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.contents"]], "files() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.files"]], "importlib.resources": [[252, "module-importlib.resources"]], "is_resource() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.is_resource"]], "open_binary() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.open_binary"]], "open_text() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.open_text"]], "path() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.path"]], "read_binary() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.read_binary"]], "read_text() (\u65bc importlib.resources \u6a21\u7d44\u4e2d)": [[252, "importlib.resources.read_text"]], "resourcereader (importlib.resources.abc \u4e2d\u7684\u985e\u5225)": [[253, "importlib.resources.abc.ResourceReader"]], "traversable (importlib.resources.abc \u4e2d\u7684\u985e\u5225)": [[253, "importlib.resources.abc.Traversable"]], "traversableresources (importlib.resources.abc \u4e2d\u7684\u985e\u5225)": [[253, "importlib.resources.abc.TraversableResources"]], "__truediv__() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.Traversable.__truediv__"]], "contents() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.ResourceReader.contents"]], "files() (importlib.resources.abc.traversableresources \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.TraversableResources.files"]], "importlib.resources.abc": [[253, "module-importlib.resources.abc"]], "is_dir() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.Traversable.is_dir"]], "is_file() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.Traversable.is_file"]], "is_resource() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.ResourceReader.is_resource"]], "iterdir() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.Traversable.iterdir"]], "joinpath() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.Traversable.joinpath"]], "name (importlib.resources.abc.traversable \u7684\u5c6c\u6027)": [[253, "importlib.resources.abc.Traversable.name"]], "open() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.Traversable.open"]], "open_resource() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.ResourceReader.open_resource"]], "read_bytes() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.Traversable.read_bytes"]], "read_text() (importlib.resources.abc.traversable \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.Traversable.read_text"]], "resource_path() (importlib.resources.abc.resourcereader \u7684\u65b9\u6cd5)": [[253, "importlib.resources.abc.ResourceReader.resource_path"]], "--details": [[255, "cmdoption-inspect-details"]], "any_contiguous (inspect.bufferflags \u7684\u5c6c\u6027)": [[255, "inspect.BufferFlags.ANY_CONTIGUOUS"]], "boundarguments (inspect \u4e2d\u7684\u985e\u5225)": [[255, "inspect.BoundArguments"]], "bufferflags (inspect \u4e2d\u7684\u985e\u5225)": [[255, "inspect.BufferFlags"]], "contig (inspect.bufferflags \u7684\u5c6c\u6027)": [[255, "inspect.BufferFlags.CONTIG"]], "contig_ro (inspect.bufferflags \u7684\u5c6c\u6027)": [[255, "inspect.BufferFlags.CONTIG_RO"]], "co_async_generator (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.CO_ASYNC_GENERATOR"]], "co_coroutine (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.CO_COROUTINE"]], "co_generator (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.CO_GENERATOR"]], "co_iterable_coroutine (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.CO_ITERABLE_COROUTINE"]], "co_nested (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.CO_NESTED"]], "co_newlocals (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.CO_NEWLOCALS"]], "co_optimized (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.CO_OPTIMIZED"]], "co_varargs (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.CO_VARARGS"]], "co_varkeywords (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.CO_VARKEYWORDS"]], "c_contiguous (inspect.bufferflags \u7684\u5c6c\u6027)": [[255, "inspect.BufferFlags.C_CONTIGUOUS"]], "format (inspect.bufferflags \u7684\u5c6c\u6027)": [[255, "inspect.BufferFlags.FORMAT"]], "full (inspect.bufferflags \u7684\u5c6c\u6027)": [[255, "inspect.BufferFlags.FULL"]], "full_ro (inspect.bufferflags \u7684\u5c6c\u6027)": [[255, "inspect.BufferFlags.FULL_RO"]], "f_contiguous (inspect.bufferflags \u7684\u5c6c\u6027)": [[255, "inspect.BufferFlags.F_CONTIGUOUS"]], "frameinfo (inspect \u4e2d\u7684\u985e\u5225)": [[255, "inspect.FrameInfo"]], "indirect (inspect.bufferflags \u7684\u5c6c\u6027)": [[255, "inspect.BufferFlags.INDIRECT"]], "nd (inspect.bufferflags \u7684\u5c6c\u6027)": [[255, "inspect.BufferFlags.ND"]], "parameter (inspect \u4e2d\u7684\u985e\u5225)": [[255, "inspect.Parameter"]], "read (inspect.bufferflags \u7684\u5c6c\u6027)": [[255, "inspect.BufferFlags.READ"]], "records (inspect.bufferflags \u7684\u5c6c\u6027)": [[255, "inspect.BufferFlags.RECORDS"]], "records_ro (inspect.bufferflags \u7684\u5c6c\u6027)": [[255, "inspect.BufferFlags.RECORDS_RO"]], "simple (inspect.bufferflags \u7684\u5c6c\u6027)": [[255, "inspect.BufferFlags.SIMPLE"]], "strided (inspect.bufferflags \u7684\u5c6c\u6027)": [[255, "inspect.BufferFlags.STRIDED"]], "strided_ro (inspect.bufferflags \u7684\u5c6c\u6027)": [[255, "inspect.BufferFlags.STRIDED_RO"]], "strides (inspect.bufferflags \u7684\u5c6c\u6027)": [[255, "inspect.BufferFlags.STRIDES"]], "signature (inspect \u4e2d\u7684\u985e\u5225)": [[255, "inspect.Signature"]], "traceback (inspect \u4e2d\u7684\u985e\u5225)": [[255, "inspect.Traceback"]], "writable (inspect.bufferflags \u7684\u5c6c\u6027)": [[255, "inspect.BufferFlags.WRITABLE"]], "write (inspect.bufferflags \u7684\u5c6c\u6027)": [[255, "inspect.BufferFlags.WRITE"]], "annotation (inspect.parameter \u7684\u5c6c\u6027)": [[255, "inspect.Parameter.annotation"]], "apply_defaults() (inspect.boundarguments \u7684\u65b9\u6cd5)": [[255, "inspect.BoundArguments.apply_defaults"]], "args (inspect.boundarguments \u7684\u5c6c\u6027)": [[255, "inspect.BoundArguments.args"]], "arguments (inspect.boundarguments \u7684\u5c6c\u6027)": [[255, "inspect.BoundArguments.arguments"]], "bind() (inspect.signature \u7684\u65b9\u6cd5)": [[255, "inspect.Signature.bind"]], "bind_partial() (inspect.signature \u7684\u65b9\u6cd5)": [[255, "inspect.Signature.bind_partial"]], "cleandoc() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.cleandoc"]], "code_context (inspect.frameinfo \u7684\u5c6c\u6027)": [[255, "inspect.FrameInfo.code_context"]], "code_context (inspect.traceback \u7684\u5c6c\u6027)": [[255, "inspect.Traceback.code_context"]], "currentframe() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.currentframe"]], "default (inspect.parameter \u7684\u5c6c\u6027)": [[255, "inspect.Parameter.default"]], "description (inspect.parameter.kind \u7684\u5c6c\u6027)": [[255, "inspect.Parameter.kind.description"]], "empty (inspect.parameter \u7684\u5c6c\u6027)": [[255, "inspect.Parameter.empty"]], "empty (inspect.signature \u7684\u5c6c\u6027)": [[255, "inspect.Signature.empty"]], "filename (inspect.frameinfo \u7684\u5c6c\u6027)": [[255, "inspect.FrameInfo.filename"]], "filename (inspect.traceback \u7684\u5c6c\u6027)": [[255, "inspect.Traceback.filename"]], "formatargvalues() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.formatargvalues"]], "frame (inspect.frameinfo \u7684\u5c6c\u6027)": [[255, "inspect.FrameInfo.frame"]], "from_callable() (inspect.signature \u7684\u985e\u5225\u65b9\u6cd5)": [[255, "inspect.Signature.from_callable"]], "function (inspect.frameinfo \u7684\u5c6c\u6027)": [[255, "inspect.FrameInfo.function"]], "function (inspect.traceback \u7684\u5c6c\u6027)": [[255, "inspect.Traceback.function"]], "get_annotations() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.get_annotations"]], "getargvalues() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getargvalues"]], "getasyncgenlocals() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getasyncgenlocals"]], "getasyncgenstate() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getasyncgenstate"]], "getattr_static() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getattr_static"]], "getcallargs() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getcallargs"]], "getclasstree() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getclasstree"]], "getclosurevars() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getclosurevars"]], "getcomments() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getcomments"]], "getcoroutinelocals() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getcoroutinelocals"]], "getcoroutinestate() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getcoroutinestate"]], "getdoc() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getdoc"]], "getfile() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getfile"]], "getframeinfo() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getframeinfo"]], "getfullargspec() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getfullargspec"]], "getgeneratorlocals() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getgeneratorlocals"]], "getgeneratorstate() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getgeneratorstate"]], "getinnerframes() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getinnerframes"]], "getmembers() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getmembers"]], "getmembers_static() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getmembers_static"]], "getmodule() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getmodule"]], "getmodulename() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getmodulename"]], "getmro() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getmro"]], "getouterframes() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getouterframes"]], "getsource() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getsource"]], "getsourcefile() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getsourcefile"]], "getsourcelines() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.getsourcelines"]], "index (inspect.frameinfo \u7684\u5c6c\u6027)": [[255, "inspect.FrameInfo.index"]], "index (inspect.traceback \u7684\u5c6c\u6027)": [[255, "inspect.Traceback.index"]], "inspect": [[255, "module-inspect"]], "inspect \u547d\u4ee4\u5217\u9078\u9805": [[255, "cmdoption-inspect-details"]], "isabstract() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isabstract"]], "isasyncgen() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isasyncgen"]], "isasyncgenfunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isasyncgenfunction"]], "isawaitable() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isawaitable"]], "isbuiltin() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isbuiltin"]], "isclass() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isclass"]], "iscode() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.iscode"]], "iscoroutine() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.iscoroutine"]], "iscoroutinefunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.iscoroutinefunction"]], "isdatadescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isdatadescriptor"]], "isframe() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isframe"]], "isfunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isfunction"]], "isgenerator() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isgenerator"]], "isgeneratorfunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isgeneratorfunction"]], "isgetsetdescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isgetsetdescriptor"]], "ismemberdescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.ismemberdescriptor"]], "ismethod() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.ismethod"]], "ismethoddescriptor() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.ismethoddescriptor"]], "ismethodwrapper() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.ismethodwrapper"]], "ismodule() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.ismodule"]], "isroutine() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.isroutine"]], "istraceback() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.istraceback"]], "kind (inspect.parameter \u7684\u5c6c\u6027)": [[255, "inspect.Parameter.kind"]], "kwargs (inspect.boundarguments \u7684\u5c6c\u6027)": [[255, "inspect.BoundArguments.kwargs"]], "lineno (inspect.frameinfo \u7684\u5c6c\u6027)": [[255, "inspect.FrameInfo.lineno"]], "lineno (inspect.traceback \u7684\u5c6c\u6027)": [[255, "inspect.Traceback.lineno"]], "markcoroutinefunction() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.markcoroutinefunction"]], "name (inspect.parameter \u7684\u5c6c\u6027)": [[255, "inspect.Parameter.name"]], "parameters (inspect.signature \u7684\u5c6c\u6027)": [[255, "inspect.Signature.parameters"]], "positions (inspect.frameinfo \u7684\u5c6c\u6027)": [[255, "inspect.FrameInfo.positions"]], "positions (inspect.traceback \u7684\u5c6c\u6027)": [[255, "inspect.Traceback.positions"]], "replace() (inspect.parameter \u7684\u65b9\u6cd5)": [[255, "inspect.Parameter.replace"]], "replace() (inspect.signature \u7684\u65b9\u6cd5)": [[255, "inspect.Signature.replace"]], "return_annotation (inspect.signature \u7684\u5c6c\u6027)": [[255, "inspect.Signature.return_annotation"]], "signature (inspect.boundarguments \u7684\u5c6c\u6027)": [[255, "inspect.BoundArguments.signature"]], "signature() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.signature"]], "stack() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.stack"]], "trace() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.trace"]], "unwrap() (\u65bc inspect \u6a21\u7d44\u4e2d)": [[255, "inspect.unwrap"]], "internet\uff08\u7db2\u969b\u7db2\u8def\uff09": [[256, "index-0"]], "world wide web \uff08\u5168\u7403\u8cc7\u8a0a\u7db2\uff09": [[256, "index-0"], [394, "index-0"], [396, "index-0"]], "socket": [[256, "index-1"], [337, "index-0"], [337, "module-socket"]], "bufferediobase (io \u4e2d\u7684\u985e\u5225)": [[258, "io.BufferedIOBase"]], "bufferedrwpair (io \u4e2d\u7684\u985e\u5225)": [[258, "io.BufferedRWPair"]], "bufferedrandom (io \u4e2d\u7684\u985e\u5225)": [[258, "io.BufferedRandom"]], "bufferedreader (io \u4e2d\u7684\u985e\u5225)": [[258, "io.BufferedReader"]], "bufferedwriter (io \u4e2d\u7684\u985e\u5225)": [[258, "io.BufferedWriter"]], "bytesio (io \u4e2d\u7684\u985e\u5225)": [[258, "io.BytesIO"]], "default_buffer_size (\u65bc io \u6a21\u7d44\u4e2d)": [[258, "io.DEFAULT_BUFFER_SIZE"]], "fileio (io \u4e2d\u7684\u985e\u5225)": [[258, "io.FileIO"]], "iobase (io \u4e2d\u7684\u985e\u5225)": [[258, "io.IOBase"]], "incrementalnewlinedecoder (io \u4e2d\u7684\u985e\u5225)": [[258, "io.IncrementalNewlineDecoder"]], "pep 597": [[258, "index-8"], [472, "index-93"], [483, "index-105"]], "pep 686": [[258, "index-1"], [293, "index-5"]], "pythonwarndefaultencoding": [[258, "index-9"], [455, "envvar-PYTHONWARNDEFAULTENCODING"], [455, "index-27"], [472, "index-98"], [483, "index-106"]], "rawiobase (io \u4e2d\u7684\u985e\u5225)": [[258, "io.RawIOBase"]], "stringio (io \u4e2d\u7684\u985e\u5225)": [[258, "io.StringIO"]], "textiobase (io \u4e2d\u7684\u985e\u5225)": [[258, "io.TextIOBase"]], "textiowrapper (io \u4e2d\u7684\u985e\u5225)": [[258, "io.TextIOWrapper"]], "unsupportedoperation": [[258, "io.UnsupportedOperation"]], "__del__() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.__del__"]], "buffer (io.textiobase \u7684\u5c6c\u6027)": [[258, "io.TextIOBase.buffer"]], "close() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.close"]], "closed (io.iobase \u7684\u5c6c\u6027)": [[258, "io.IOBase.closed"]], "detach() (io.bufferediobase \u7684\u65b9\u6cd5)": [[258, "io.BufferedIOBase.detach"]], "detach() (io.textiobase \u7684\u65b9\u6cd5)": [[258, "io.TextIOBase.detach"]], "encoding (io.textiobase \u7684\u5c6c\u6027)": [[258, "io.TextIOBase.encoding"]], "errors (io.textiobase \u7684\u5c6c\u6027)": [[258, "io.TextIOBase.errors"]], "fileno() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.fileno"]], "flush() (io.bufferedwriter \u7684\u65b9\u6cd5)": [[258, "io.BufferedWriter.flush"]], "flush() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.flush"]], "getbuffer() (io.bytesio \u7684\u65b9\u6cd5)": [[258, "io.BytesIO.getbuffer"]], "getvalue() (io.bytesio \u7684\u65b9\u6cd5)": [[258, "io.BytesIO.getvalue"]], "getvalue() (io.stringio \u7684\u65b9\u6cd5)": [[258, "io.StringIO.getvalue"]], "io": [[258, "module-io"], [428, "index-55"]], "io \u6a21\u7d44": [[258, "index-0"]], "io.incrementalnewlinedecoder \u985e\u5225": [[258, "index-5"]], "io.textiowrapper \u985e\u5225": [[258, "index-4"]], "isatty() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.isatty"]], "line_buffering (io.textiowrapper \u7684\u5c6c\u6027)": [[258, "io.TextIOWrapper.line_buffering"]], "mode (io.fileio \u7684\u5c6c\u6027)": [[258, "io.FileIO.mode"]], "name (io.fileio \u7684\u5c6c\u6027)": [[258, "io.FileIO.name"]], "newlines (io.textiobase \u7684\u5c6c\u6027)": [[258, "io.TextIOBase.newlines"]], "open() (\u65bc io \u6a21\u7d44\u4e2d)": [[258, "io.open"]], "open_code() (\u65bc io \u6a21\u7d44\u4e2d)": [[258, "io.open_code"]], "peek() (io.bufferedreader \u7684\u65b9\u6cd5)": [[258, "io.BufferedReader.peek"]], "raw (io.bufferediobase \u7684\u5c6c\u6027)": [[258, "io.BufferedIOBase.raw"]], "read() (io.bufferediobase \u7684\u65b9\u6cd5)": [[258, "io.BufferedIOBase.read"]], "read() (io.bufferedreader \u7684\u65b9\u6cd5)": [[258, "io.BufferedReader.read"]], "read() (io.rawiobase \u7684\u65b9\u6cd5)": [[258, "io.RawIOBase.read"]], "read() (io.textiobase \u7684\u65b9\u6cd5)": [[258, "io.TextIOBase.read"]], "read1() (io.bufferediobase \u7684\u65b9\u6cd5)": [[258, "io.BufferedIOBase.read1"]], "read1() (io.bufferedreader \u7684\u65b9\u6cd5)": [[258, "io.BufferedReader.read1"]], "read1() (io.bytesio \u7684\u65b9\u6cd5)": [[258, "io.BytesIO.read1"]], "readable() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.readable"]], "readall() (io.rawiobase \u7684\u65b9\u6cd5)": [[258, "io.RawIOBase.readall"]], "readinto() (io.bufferediobase \u7684\u65b9\u6cd5)": [[258, "io.BufferedIOBase.readinto"]], "readinto() (io.rawiobase \u7684\u65b9\u6cd5)": [[258, "io.RawIOBase.readinto"]], "readinto1() (io.bufferediobase \u7684\u65b9\u6cd5)": [[258, "io.BufferedIOBase.readinto1"]], "readinto1() (io.bytesio \u7684\u65b9\u6cd5)": [[258, "io.BytesIO.readinto1"]], "readline() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.readline"]], "readline() (io.textiobase \u7684\u65b9\u6cd5)": [[258, "io.TextIOBase.readline"]], "readlines() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.readlines"]], "reconfigure() (io.textiowrapper \u7684\u65b9\u6cd5)": [[258, "io.TextIOWrapper.reconfigure"]], "seek() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.seek"]], "seek() (io.textiobase \u7684\u65b9\u6cd5)": [[258, "io.TextIOBase.seek"]], "seek() (io.textiowrapper \u7684\u65b9\u6cd5)": [[258, "io.TextIOWrapper.seek"]], "seekable() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.seekable"]], "tell() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.tell"]], "tell() (io.textiobase \u7684\u65b9\u6cd5)": [[258, "io.TextIOBase.tell"]], "tell() (io.textiowrapper \u7684\u65b9\u6cd5)": [[258, "io.TextIOWrapper.tell"]], "text_encoding() (\u65bc io \u6a21\u7d44\u4e2d)": [[258, "io.text_encoding"]], "truncate() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.truncate"]], "writable() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.writable"]], "write() (io.bufferediobase \u7684\u65b9\u6cd5)": [[258, "io.BufferedIOBase.write"]], "write() (io.bufferedwriter \u7684\u65b9\u6cd5)": [[258, "io.BufferedWriter.write"]], "write() (io.rawiobase \u7684\u65b9\u6cd5)": [[258, "io.RawIOBase.write"]], "write() (io.textiobase \u7684\u65b9\u6cd5)": [[258, "io.TextIOBase.write"]], "write_through (io.textiowrapper \u7684\u5c6c\u6027)": [[258, "io.TextIOWrapper.write_through"]], "writelines() (io.iobase \u7684\u65b9\u6cd5)": [[258, "io.IOBase.writelines"]], "addressvalueerror": [[259, "ipaddress.AddressValueError"]], "ipv4address (ipaddress \u4e2d\u7684\u985e\u5225)": [[259, "ipaddress.IPv4Address"]], "ipv4interface (ipaddress \u4e2d\u7684\u985e\u5225)": [[259, "ipaddress.IPv4Interface"]], "ipv4network (ipaddress \u4e2d\u7684\u985e\u5225)": [[259, "ipaddress.IPv4Network"]], "ipv6address (ipaddress \u4e2d\u7684\u985e\u5225)": [[259, "ipaddress.IPv6Address"]], "ipv6interface (ipaddress \u4e2d\u7684\u985e\u5225)": [[259, "ipaddress.IPv6Interface"]], "ipv6network (ipaddress \u4e2d\u7684\u985e\u5225)": [[259, "ipaddress.IPv6Network"]], "netmaskvalueerror": [[259, "ipaddress.NetmaskValueError"]], "rfc 2373": [[259, "index-1"], [259, "index-3"], [259, "index-5"]], "rfc 3056": [[259, "index-12"]], "rfc 3171": [[259, "index-0"]], "rfc 3330": [[259, "index-4"]], "rfc 3879": [[259, "index-9"]], "rfc 3927": [[259, "index-6"]], "rfc 4007": [[259, "index-11"], [259, "index-8"]], "rfc 4193": [[259, "index-10"]], "rfc 4291": [[259, "index-7"], [483, "index-90"]], "rfc 4380": [[259, "index-13"]], "rfc 5735": [[259, "index-2"]], "__format__() (ipaddress.ipv4address \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv4Address.__format__"]], "__format__() (ipaddress.ipv6address \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv6Address.__format__"]], "address_exclude() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv4Network.address_exclude"]], "address_exclude() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv6Network.address_exclude"]], "broadcast_address (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.broadcast_address"]], "broadcast_address (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.broadcast_address"]], "collapse_addresses() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[259, "ipaddress.collapse_addresses"]], "compare_networks() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv4Network.compare_networks"]], "compare_networks() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv6Network.compare_networks"]], "compressed (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.compressed"]], "compressed (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.compressed"]], "compressed (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.compressed"]], "compressed (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.compressed"]], "exploded (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.exploded"]], "exploded (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.exploded"]], "exploded (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.exploded"]], "exploded (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.exploded"]], "get_mixed_type_key() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[259, "ipaddress.get_mixed_type_key"]], "hostmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.hostmask"]], "hostmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.hostmask"]], "hosts() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv4Network.hosts"]], "hosts() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv6Network.hosts"]], "ip (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Interface.ip"]], "ip (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Interface.ip"]], "ip_address() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[259, "ipaddress.ip_address"]], "ip_interface() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[259, "ipaddress.ip_interface"]], "ip_network() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[259, "ipaddress.ip_network"]], "ipaddress": [[259, "module-ipaddress"]], "ipv4_mapped (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.ipv4_mapped"]], "is_global (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.is_global"]], "is_global (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.is_global"]], "is_link_local (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.is_link_local"]], "is_link_local (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.is_link_local"]], "is_link_local (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.is_link_local"]], "is_link_local (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.is_link_local"]], "is_loopback (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.is_loopback"]], "is_loopback (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.is_loopback"]], "is_loopback (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.is_loopback"]], "is_loopback (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.is_loopback"]], "is_multicast (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.is_multicast"]], "is_multicast (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.is_multicast"]], "is_multicast (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.is_multicast"]], "is_multicast (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.is_multicast"]], "is_private (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.is_private"]], "is_private (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.is_private"]], "is_private (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.is_private"]], "is_private (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.is_private"]], "is_reserved (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.is_reserved"]], "is_reserved (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.is_reserved"]], "is_reserved (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.is_reserved"]], "is_reserved (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.is_reserved"]], "is_site_local (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.is_site_local"]], "is_site_local (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.is_site_local"]], "is_unspecified (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.is_unspecified"]], "is_unspecified (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.is_unspecified"]], "is_unspecified (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.is_unspecified"]], "is_unspecified (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.is_unspecified"]], "max_prefixlen (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.max_prefixlen"]], "max_prefixlen (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.max_prefixlen"]], "max_prefixlen (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.max_prefixlen"]], "max_prefixlen (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.max_prefixlen"]], "netmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.netmask"]], "netmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.netmask"]], "network (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Interface.network"]], "network (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Interface.network"]], "network_address (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.network_address"]], "network_address (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.network_address"]], "num_addresses (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.num_addresses"]], "num_addresses (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.num_addresses"]], "overlaps() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv4Network.overlaps"]], "overlaps() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv6Network.overlaps"]], "packed (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.packed"]], "packed (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.packed"]], "prefixlen (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.prefixlen"]], "prefixlen (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.prefixlen"]], "reverse_pointer (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.reverse_pointer"]], "reverse_pointer (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.reverse_pointer"]], "scope_id (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.scope_id"]], "sixtofour (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.sixtofour"]], "subnet_of() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv4Network.subnet_of"]], "subnet_of() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv6Network.subnet_of"]], "subnets() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv4Network.subnets"]], "subnets() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv6Network.subnets"]], "summarize_address_range() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[259, "ipaddress.summarize_address_range"]], "supernet() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv4Network.supernet"]], "supernet() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv6Network.supernet"]], "supernet_of() (ipaddress.ipv4network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv4Network.supernet_of"]], "supernet_of() (ipaddress.ipv6network \u7684\u65b9\u6cd5)": [[259, "ipaddress.IPv6Network.supernet_of"]], "teredo (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.teredo"]], "v4_int_to_packed() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[259, "ipaddress.v4_int_to_packed"]], "v6_int_to_packed() (\u65bc ipaddress \u6a21\u7d44\u4e2d)": [[259, "ipaddress.v6_int_to_packed"]], "version (ipaddress.ipv4address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Address.version"]], "version (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.version"]], "version (ipaddress.ipv6address \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Address.version"]], "version (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.version"]], "with_hostmask (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Interface.with_hostmask"]], "with_hostmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.with_hostmask"]], "with_hostmask (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Interface.with_hostmask"]], "with_hostmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.with_hostmask"]], "with_netmask (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Interface.with_netmask"]], "with_netmask (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.with_netmask"]], "with_netmask (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Interface.with_netmask"]], "with_netmask (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.with_netmask"]], "with_prefixlen (ipaddress.ipv4interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Interface.with_prefixlen"]], "with_prefixlen (ipaddress.ipv4network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv4Network.with_prefixlen"]], "with_prefixlen (ipaddress.ipv6interface \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Interface.with_prefixlen"]], "with_prefixlen (ipaddress.ipv6network \u7684\u5c6c\u6027)": [[259, "ipaddress.IPv6Network.with_prefixlen"]], "accumulate() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.accumulate"]], "batched() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.batched"]], "chain() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.chain"]], "combinations() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.combinations"]], "combinations_with_replacement() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.combinations_with_replacement"]], "compress() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.compress"]], "count() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.count"]], "cycle() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.cycle"]], "dropwhile() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.dropwhile"]], "filterfalse() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.filterfalse"]], "from_iterable() (itertools.chain \u7684\u985e\u5225\u65b9\u6cd5)": [[261, "itertools.chain.from_iterable"]], "groupby() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.groupby"]], "islice() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.islice"]], "itertools": [[261, "module-itertools"]], "pairwise() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.pairwise"]], "permutations() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.permutations"]], "product() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.product"]], "repeat() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.repeat"]], "starmap() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.starmap"]], "takewhile() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.takewhile"]], "tee() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.tee"]], "zip_longest() (\u65bc itertools \u6a21\u7d44\u4e2d)": [[261, "itertools.zip_longest"]], "--compact": [[262, "cmdoption-json.tool-indent"]], "--json-lines": [[262, "cmdoption-json.tool-json-lines"]], "--no-ensure-ascii": [[262, "cmdoption-json.tool-no-ensure-ascii"]], "--no-indent": [[262, "cmdoption-json.tool-indent"]], "--sort-keys": [[262, "cmdoption-json.tool-sort-keys"]], "--tab": [[262, "cmdoption-json.tool-indent"]], "jsondecodeerror": [[262, "json.JSONDecodeError"]], "jsondecoder (json \u4e2d\u7684\u985e\u5225)": [[262, "json.JSONDecoder"]], "jsonencoder (json \u4e2d\u7684\u985e\u5225)": [[262, "json.JSONEncoder"]], "rfc 4627": [[262, "index-3"], [262, "index-8"]], "rfc 7159": [[262, "index-2"], [262, "index-4"], [262, "index-7"]], "colno (json.jsondecodeerror \u7684\u5c6c\u6027)": [[262, "json.JSONDecodeError.colno"]], "decode() (json.jsondecoder \u7684\u65b9\u6cd5)": [[262, "json.JSONDecoder.decode"]], "default() (json.jsonencoder \u7684\u65b9\u6cd5)": [[262, "json.JSONEncoder.default"]], "doc (json.jsondecodeerror \u7684\u5c6c\u6027)": [[262, "json.JSONDecodeError.doc"]], "dump() (\u65bc json \u6a21\u7d44\u4e2d)": [[262, "json.dump"]], "dumps() (\u65bc json \u6a21\u7d44\u4e2d)": [[262, "json.dumps"]], "encode() (json.jsonencoder \u7684\u65b9\u6cd5)": [[262, "json.JSONEncoder.encode"]], "infile": [[262, "cmdoption-json.tool-arg-infile"]], "iterencode() (json.jsonencoder \u7684\u65b9\u6cd5)": [[262, "json.JSONEncoder.iterencode"]], "json": [[262, "module-json"], [446, "index-1"]], "json.tool": [[262, "module-json.tool"]], "json.tool \u547d\u4ee4\u5217\u9078\u9805": [[262, "cmdoption-json.tool-arg-infile"], [262, "cmdoption-json.tool-arg-outfile"], [262, "cmdoption-json.tool-h"], [262, "cmdoption-json.tool-indent"], [262, "cmdoption-json.tool-json-lines"], [262, "cmdoption-json.tool-no-ensure-ascii"], [262, "cmdoption-json.tool-sort-keys"]], "lineno (json.jsondecodeerror \u7684\u5c6c\u6027)": [[262, "json.JSONDecodeError.lineno"]], "load() (\u65bc json \u6a21\u7d44\u4e2d)": [[262, "json.load"]], "loads() (\u65bc json \u6a21\u7d44\u4e2d)": [[262, "json.loads"]], "msg (json.jsondecodeerror \u7684\u5c6c\u6027)": [[262, "json.JSONDecodeError.msg"]], "outfile": [[262, "cmdoption-json.tool-arg-outfile"]], "pos (json.jsondecodeerror \u7684\u5c6c\u6027)": [[262, "json.JSONDecodeError.pos"]], "raw_decode() (json.jsondecoder \u7684\u65b9\u6cd5)": [[262, "json.JSONDecoder.raw_decode"]], "iskeyword() (\u65bc keyword \u6a21\u7d44\u4e2d)": [[263, "keyword.iskeyword"]], "issoftkeyword() (\u65bc keyword \u6a21\u7d44\u4e2d)": [[263, "keyword.issoftkeyword"]], "keyword": [[263, "module-keyword"]], "kwlist (\u65bc keyword \u6a21\u7d44\u4e2d)": [[263, "keyword.kwlist"]], "softkwlist (\u65bc keyword \u6a21\u7d44\u4e2d)": [[263, "keyword.softkwlist"]], "checkcache() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[265, "linecache.checkcache"]], "clearcache() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[265, "linecache.clearcache"]], "getline() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[265, "linecache.getline"]], "lazycache() (\u65bc linecache \u6a21\u7d44\u4e2d)": [[265, "linecache.lazycache"]], "linecache": [[265, "module-linecache"]], "abday_1 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ABDAY_1"]], "abday_2 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ABDAY_2"]], "abday_3 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ABDAY_3"]], "abday_4 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ABDAY_4"]], "abday_5 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ABDAY_5"]], "abday_6 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ABDAY_6"]], "abday_7 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ABDAY_7"]], "abmon_1 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ABMON_1"]], "abmon_10 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ABMON_10"]], "abmon_11 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ABMON_11"]], "abmon_12 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ABMON_12"]], "abmon_2 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ABMON_2"]], "abmon_3 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ABMON_3"]], "abmon_4 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ABMON_4"]], "abmon_5 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ABMON_5"]], "abmon_6 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ABMON_6"]], "abmon_7 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ABMON_7"]], "abmon_8 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ABMON_8"]], "abmon_9 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ABMON_9"]], "alt_digits (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ALT_DIGITS"]], "char_max (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.CHAR_MAX"]], "codeset (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.CODESET"]], "crncystr (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.CRNCYSTR"]], "day_1 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.DAY_1"]], "day_2 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.DAY_2"]], "day_3 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.DAY_3"]], "day_4 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.DAY_4"]], "day_5 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.DAY_5"]], "day_6 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.DAY_6"]], "day_7 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.DAY_7"]], "d_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.D_FMT"]], "d_t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.D_T_FMT"]], "era (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ERA"]], "era_d_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ERA_D_FMT"]], "era_d_t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ERA_D_T_FMT"]], "era_t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.ERA_T_FMT"]], "lc_all (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.LC_ALL"]], "lc_collate (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.LC_COLLATE"]], "lc_ctype (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.LC_CTYPE"]], "lc_messages (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.LC_MESSAGES"]], "lc_monetary (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.LC_MONETARY"]], "lc_numeric (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.LC_NUMERIC"]], "lc_time (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.LC_TIME"]], "mon_1 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.MON_1"]], "mon_10 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.MON_10"]], "mon_11 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.MON_11"]], "mon_12 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.MON_12"]], "mon_2 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.MON_2"]], "mon_3 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.MON_3"]], "mon_4 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.MON_4"]], "mon_5 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.MON_5"]], "mon_6 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.MON_6"]], "mon_7 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.MON_7"]], "mon_8 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.MON_8"]], "mon_9 (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.MON_9"]], "noexpr (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.NOEXPR"]], "radixchar (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.RADIXCHAR"]], "rfc 1766": [[266, "index-4"], [266, "index-5"]], "thousep (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.THOUSEP"]], "t_fmt (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.T_FMT"]], "t_fmt_ampm (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.T_FMT_AMPM"]], "yesexpr (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.YESEXPR"]], "_locale": [[266, "index-0"]], "atof() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.atof"]], "atoi() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.atoi"]], "bind_textdomain_codeset() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.bind_textdomain_codeset"]], "bindtextdomain() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.bindtextdomain"]], "currency() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.currency"]], "dcgettext() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.dcgettext"]], "delocalize() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.delocalize"]], "dgettext() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.dgettext"]], "format_string() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.format_string"]], "getdefaultlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.getdefaultlocale"]], "getencoding() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.getencoding"]], "getlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.getlocale"]], "getpreferredencoding() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.getpreferredencoding"]], "gettext() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.gettext"]], "locale": [[266, "module-locale"]], "localeconv() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.localeconv"]], "localize() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.localize"]], "nl_langinfo() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.nl_langinfo"]], "normalize() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.normalize"]], "resetlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.resetlocale"]], "setlocale() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.setlocale"]], "str() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.str"]], "strcoll() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.strcoll"]], "strxfrm() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.strxfrm"]], "textdomain() (\u65bc locale \u6a21\u7d44\u4e2d)": [[266, "locale.textdomain"]], "bufferingformatter (logging \u4e2d\u7684\u985e\u5225)": [[267, "logging.BufferingFormatter"]], "critical (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.CRITICAL"]], "debug (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.DEBUG"]], "error (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.ERROR"]], "errors\uff08\u932f\u8aa4\uff09": [[267, "index-0"], [429, "index-15"]], "filter (logging \u4e2d\u7684\u985e\u5225)": [[267, "logging.Filter"]], "formatter (logging \u4e2d\u7684\u985e\u5225)": [[267, "logging.Formatter"]], "handler (logging \u4e2d\u7684\u985e\u5225)": [[267, "logging.Handler"]], "info (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.INFO"]], "logrecord (logging \u4e2d\u7684\u985e\u5225)": [[267, "logging.LogRecord"]], "logger (logging \u4e2d\u7684\u985e\u5225)": [[267, "logging.Logger"]], "loggeradapter (logging \u4e2d\u7684\u985e\u5225)": [[267, "logging.LoggerAdapter"]], "notset (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.NOTSET"]], "pep 282": [[267, "index-1"], [332, "index-2"], [465, "index-11"], [465, "index-12"]], "warning (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.WARNING"]], "__init__() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.__init__"]], "_log (logging.loggeradapter \u7684\u5c6c\u6027)": [[267, "logging.LoggerAdapter._log"]], "acquire() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.acquire"]], "addfilter() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.addFilter"]], "addfilter() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.addFilter"]], "addhandler() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.addHandler"]], "addlevelname() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.addLevelName"]], "basicconfig() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.basicConfig"]], "capturewarnings() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.captureWarnings"]], "close() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.close"]], "createlock() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.createLock"]], "critical() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.critical"]], "critical() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.critical"]], "debug() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.debug"]], "debug() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.debug"]], "disable() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.disable"]], "disabled (logging.logger \u7684\u5c6c\u6027)": [[267, "logging.Logger.disabled"]], "emit() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.emit"]], "error() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.error"]], "error() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.error"]], "exception() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.exception"]], "exception() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.exception"]], "filter() (logging.filter \u7684\u65b9\u6cd5)": [[267, "logging.Filter.filter"]], "filter() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.filter"]], "filter() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.filter"]], "findcaller() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.findCaller"]], "flush() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.flush"]], "format() (logging.bufferingformatter \u7684\u65b9\u6cd5)": [[267, "logging.BufferingFormatter.format"]], "format() (logging.formatter \u7684\u65b9\u6cd5)": [[267, "logging.Formatter.format"]], "format() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.format"]], "formatexception() (logging.formatter \u7684\u65b9\u6cd5)": [[267, "logging.Formatter.formatException"]], "formatfooter() (logging.bufferingformatter \u7684\u65b9\u6cd5)": [[267, "logging.BufferingFormatter.formatFooter"]], "formatheader() (logging.bufferingformatter \u7684\u65b9\u6cd5)": [[267, "logging.BufferingFormatter.formatHeader"]], "formatstack() (logging.formatter \u7684\u65b9\u6cd5)": [[267, "logging.Formatter.formatStack"]], "formattime() (logging.formatter \u7684\u65b9\u6cd5)": [[267, "logging.Formatter.formatTime"]], "getchild() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.getChild"]], "getchildren() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.getChildren"]], "geteffectivelevel() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.getEffectiveLevel"]], "gethandlerbyname() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.getHandlerByName"]], "gethandlernames() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.getHandlerNames"]], "getlevelname() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.getLevelName"]], "getlevelnamesmapping() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.getLevelNamesMapping"]], "getlogrecordfactory() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.getLogRecordFactory"]], "getlogger() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.getLogger"]], "getloggerclass() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.getLoggerClass"]], "getmessage() (logging.logrecord \u7684\u65b9\u6cd5)": [[267, "logging.LogRecord.getMessage"]], "handle() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.handle"]], "handle() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.handle"]], "handleerror() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.handleError"]], "handlers (logging.logger \u7684\u5c6c\u6027)": [[267, "logging.Logger.handlers"]], "hashandlers() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.hasHandlers"]], "info() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.info"]], "info() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.info"]], "isenabledfor() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.isEnabledFor"]], "lastresort (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.lastResort"]], "level (logging.logger \u7684\u5c6c\u6027)": [[267, "logging.Logger.level"]], "log() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.log"]], "log() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.log"]], "logging": [[267, "module-logging"]], "logging\uff08\u65e5\u8a8c\uff09": [[267, "index-0"]], "makelogrecord() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.makeLogRecord"]], "makerecord() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.makeRecord"]], "manager (logging.loggeradapter \u7684\u5c6c\u6027)": [[267, "logging.LoggerAdapter.manager"]], "name (logging.logger \u7684\u5c6c\u6027)": [[267, "logging.Logger.name"]], "parent (logging.logger \u7684\u5c6c\u6027)": [[267, "logging.Logger.parent"]], "process() (logging.loggeradapter \u7684\u65b9\u6cd5)": [[267, "logging.LoggerAdapter.process"]], "propagate (logging.logger \u7684\u5c6c\u6027)": [[267, "logging.Logger.propagate"]], "raiseexceptions (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.raiseExceptions"]], "release() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.release"]], "removefilter() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.removeFilter"]], "removefilter() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.removeFilter"]], "removehandler() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.removeHandler"]], "setformatter() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.setFormatter"]], "setlevel() (logging.handler \u7684\u65b9\u6cd5)": [[267, "logging.Handler.setLevel"]], "setlevel() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.setLevel"]], "setlogrecordfactory() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.setLogRecordFactory"]], "setloggerclass() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.setLoggerClass"]], "shutdown() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.shutdown"]], "warning() (logging.logger \u7684\u65b9\u6cd5)": [[267, "logging.Logger.warning"]], "warning() (\u65bc logging \u6a21\u7d44\u4e2d)": [[267, "logging.warning"]], "dictconfig() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[268, "logging.config.dictConfig"]], "fileconfig() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[268, "logging.config.fileConfig"]], "listen() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[268, "logging.config.listen"]], "logging.config": [[268, "module-logging.config"]], "stoplistening() (\u65bc logging.config \u6a21\u7d44\u4e2d)": [[268, "logging.config.stopListening"]], "baserotatinghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.BaseRotatingHandler"]], "bufferinghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.BufferingHandler"]], "datagramhandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.DatagramHandler"]], "filehandler (logging \u4e2d\u7684\u985e\u5225)": [[269, "logging.FileHandler"]], "httphandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.HTTPHandler"]], "memoryhandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.MemoryHandler"]], "nteventloghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.NTEventLogHandler"]], "nullhandler (logging \u4e2d\u7684\u985e\u5225)": [[269, "logging.NullHandler"]], "queuehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.QueueHandler"]], "queuelistener (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.QueueListener"]], "rotatingfilehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.RotatingFileHandler"]], "smtphandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.SMTPHandler"]], "sockethandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.SocketHandler"]], "streamhandler (logging \u4e2d\u7684\u985e\u5225)": [[269, "logging.StreamHandler"]], "sysloghandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.SysLogHandler"]], "timedrotatingfilehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.TimedRotatingFileHandler"]], "watchedfilehandler (logging.handlers \u4e2d\u7684\u985e\u5225)": [[269, "logging.handlers.WatchedFileHandler"]], "close() (logging.filehandler \u7684\u65b9\u6cd5)": [[269, "logging.FileHandler.close"]], "close() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.MemoryHandler.close"]], "close() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.NTEventLogHandler.close"]], "close() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SocketHandler.close"]], "close() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SysLogHandler.close"]], "createlock() (logging.nullhandler \u7684\u65b9\u6cd5)": [[269, "logging.NullHandler.createLock"]], "createsocket() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SocketHandler.createSocket"]], "createsocket() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SysLogHandler.createSocket"]], "dequeue() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[269, "logging.handlers.QueueListener.dequeue"]], "dorollover() (logging.handlers.rotatingfilehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.RotatingFileHandler.doRollover"]], "dorollover() (logging.handlers.timedrotatingfilehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.TimedRotatingFileHandler.doRollover"]], "emit() (logging.filehandler \u7684\u65b9\u6cd5)": [[269, "logging.FileHandler.emit"]], "emit() (logging.nullhandler \u7684\u65b9\u6cd5)": [[269, "logging.NullHandler.emit"]], "emit() (logging.streamhandler \u7684\u65b9\u6cd5)": [[269, "logging.StreamHandler.emit"]], "emit() (logging.handlers.bufferinghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.BufferingHandler.emit"]], "emit() (logging.handlers.datagramhandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.DatagramHandler.emit"]], "emit() (logging.handlers.httphandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.HTTPHandler.emit"]], "emit() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.NTEventLogHandler.emit"]], "emit() (logging.handlers.queuehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.QueueHandler.emit"]], "emit() (logging.handlers.rotatingfilehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.RotatingFileHandler.emit"]], "emit() (logging.handlers.smtphandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SMTPHandler.emit"]], "emit() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SocketHandler.emit"]], "emit() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SysLogHandler.emit"]], "emit() (logging.handlers.timedrotatingfilehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.TimedRotatingFileHandler.emit"]], "emit() (logging.handlers.watchedfilehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.WatchedFileHandler.emit"]], "encodepriority() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SysLogHandler.encodePriority"]], "enqueue() (logging.handlers.queuehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.QueueHandler.enqueue"]], "enqueue_sentinel() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[269, "logging.handlers.QueueListener.enqueue_sentinel"]], "flush() (logging.streamhandler \u7684\u65b9\u6cd5)": [[269, "logging.StreamHandler.flush"]], "flush() (logging.handlers.bufferinghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.BufferingHandler.flush"]], "flush() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.MemoryHandler.flush"]], "geteventcategory() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.NTEventLogHandler.getEventCategory"]], "geteventtype() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.NTEventLogHandler.getEventType"]], "getfilestodelete() (logging.handlers.timedrotatingfilehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.TimedRotatingFileHandler.getFilesToDelete"]], "getmessageid() (logging.handlers.nteventloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.NTEventLogHandler.getMessageID"]], "getsubject() (logging.handlers.smtphandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SMTPHandler.getSubject"]], "handle() (logging.nullhandler \u7684\u65b9\u6cd5)": [[269, "logging.NullHandler.handle"]], "handle() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[269, "logging.handlers.QueueListener.handle"]], "handleerror() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SocketHandler.handleError"]], "listener (logging.handlers.queuehandler \u7684\u5c6c\u6027)": [[269, "logging.handlers.QueueHandler.listener"]], "logging.handlers": [[269, "module-logging.handlers"]], "makepickle() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SocketHandler.makePickle"]], "makesocket() (logging.handlers.datagramhandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.DatagramHandler.makeSocket"]], "makesocket() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SocketHandler.makeSocket"]], "maplogrecord() (logging.handlers.httphandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.HTTPHandler.mapLogRecord"]], "mappriority() (logging.handlers.sysloghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SysLogHandler.mapPriority"]], "namer (logging.handlers.baserotatinghandler \u7684\u5c6c\u6027)": [[269, "logging.handlers.BaseRotatingHandler.namer"]], "prepare() (logging.handlers.queuehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.QueueHandler.prepare"]], "prepare() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[269, "logging.handlers.QueueListener.prepare"]], "reopenifneeded() (logging.handlers.watchedfilehandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.WatchedFileHandler.reopenIfNeeded"]], "rotate() (logging.handlers.baserotatinghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.BaseRotatingHandler.rotate"]], "rotation_filename() (logging.handlers.baserotatinghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.BaseRotatingHandler.rotation_filename"]], "rotator (logging.handlers.baserotatinghandler \u7684\u5c6c\u6027)": [[269, "logging.handlers.BaseRotatingHandler.rotator"]], "send() (logging.handlers.datagramhandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.DatagramHandler.send"]], "send() (logging.handlers.sockethandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.SocketHandler.send"]], "setstream() (logging.streamhandler \u7684\u65b9\u6cd5)": [[269, "logging.StreamHandler.setStream"]], "settarget() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.MemoryHandler.setTarget"]], "shouldflush() (logging.handlers.bufferinghandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.BufferingHandler.shouldFlush"]], "shouldflush() (logging.handlers.memoryhandler \u7684\u65b9\u6cd5)": [[269, "logging.handlers.MemoryHandler.shouldFlush"]], "start() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[269, "logging.handlers.QueueListener.start"]], "stop() (logging.handlers.queuelistener \u7684\u65b9\u6cd5)": [[269, "logging.handlers.QueueListener.stop"]], "terminator (logging.streamhandler \u7684\u5c6c\u6027)": [[269, "logging.StreamHandler.terminator"]], "lzmacompressor (lzma \u4e2d\u7684\u985e\u5225)": [[270, "lzma.LZMACompressor"]], "lzmadecompressor (lzma \u4e2d\u7684\u985e\u5225)": [[270, "lzma.LZMADecompressor"]], "lzmaerror": [[270, "lzma.LZMAError"]], "lzmafile (lzma \u4e2d\u7684\u985e\u5225)": [[270, "lzma.LZMAFile"]], "check (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[270, "lzma.LZMADecompressor.check"]], "compress() (lzma.lzmacompressor \u7684\u65b9\u6cd5)": [[270, "lzma.LZMACompressor.compress"]], "compress() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[270, "lzma.compress"]], "decompress() (lzma.lzmadecompressor \u7684\u65b9\u6cd5)": [[270, "lzma.LZMADecompressor.decompress"]], "decompress() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[270, "lzma.decompress"]], "eof (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[270, "lzma.LZMADecompressor.eof"]], "flush() (lzma.lzmacompressor \u7684\u65b9\u6cd5)": [[270, "lzma.LZMACompressor.flush"]], "is_check_supported() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[270, "lzma.is_check_supported"]], "lzma": [[270, "module-lzma"]], "needs_input (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[270, "lzma.LZMADecompressor.needs_input"]], "open() (\u65bc lzma \u6a21\u7d44\u4e2d)": [[270, "lzma.open"]], "peek() (lzma.lzmafile \u7684\u65b9\u6cd5)": [[270, "lzma.LZMAFile.peek"]], "unused_data (lzma.lzmadecompressor \u7684\u5c6c\u6027)": [[270, "lzma.LZMADecompressor.unused_data"]], "babyl (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.Babyl"]], "babylmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.BabylMessage"]], "externalclasherror": [[271, "mailbox.ExternalClashError"]], "formaterror": [[271, "mailbox.FormatError"]], "mh (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.MH"]], "mhmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.MHMessage"]], "mmdf (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.MMDF"]], "mmdfmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.MMDFMessage"]], "mailbox (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.Mailbox"]], "maildir (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.Maildir"]], "maildirmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.MaildirMessage"]], "message (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.Message"]], "nosuchmailboxerror": [[271, "mailbox.NoSuchMailboxError"]], "notemptyerror": [[271, "mailbox.NotEmptyError"]], "__contains__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.__contains__"]], "__delitem__() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.__delitem__"]], "__delitem__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.__delitem__"]], "__getitem__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.__getitem__"]], "__iter__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.__iter__"]], "__len__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.__len__"]], "__setitem__() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.__setitem__"]], "__setitem__() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.__setitem__"]], "add() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.add"]], "add() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.add"]], "add_flag() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MMDFMessage.add_flag"]], "add_flag() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.add_flag"]], "add_flag() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.mboxMessage.add_flag"]], "add_folder() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.add_folder"]], "add_folder() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.add_folder"]], "add_label() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.BabylMessage.add_label"]], "add_sequence() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MHMessage.add_sequence"]], "clean() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.clean"]], "clear() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.clear"]], "close() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.close"]], "close() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.close"]], "close() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.close"]], "colon (mailbox.maildir \u7684\u5c6c\u6027)": [[271, "mailbox.Maildir.colon"]], "discard() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.discard"]], "discard() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.discard"]], "flush() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.flush"]], "flush() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.flush"]], "flush() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.flush"]], "get() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.get"]], "get_bytes() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.get_bytes"]], "get_date() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.get_date"]], "get_file() (mailbox.babyl \u7684\u65b9\u6cd5)": [[271, "mailbox.Babyl.get_file"]], "get_file() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.get_file"]], "get_file() (mailbox.mmdf \u7684\u65b9\u6cd5)": [[271, "mailbox.MMDF.get_file"]], "get_file() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.get_file"]], "get_file() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.get_file"]], "get_file() (mailbox.mbox \u7684\u65b9\u6cd5)": [[271, "mailbox.mbox.get_file"]], "get_flags() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MMDFMessage.get_flags"]], "get_flags() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.get_flags"]], "get_flags() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.mboxMessage.get_flags"]], "get_folder() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.get_folder"]], "get_folder() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.get_folder"]], "get_from() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MMDFMessage.get_from"]], "get_from() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.mboxMessage.get_from"]], "get_info() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.get_info"]], "get_labels() (mailbox.babyl \u7684\u65b9\u6cd5)": [[271, "mailbox.Babyl.get_labels"]], "get_labels() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.BabylMessage.get_labels"]], "get_message() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.get_message"]], "get_sequences() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.get_sequences"]], "get_sequences() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MHMessage.get_sequences"]], "get_string() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.get_string"]], "get_subdir() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.get_subdir"]], "get_visible() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.BabylMessage.get_visible"]], "items() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.items"]], "iteritems() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.iteritems"]], "iterkeys() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.iterkeys"]], "itervalues() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.itervalues"]], "keys() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.keys"]], "list_folders() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.list_folders"]], "list_folders() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.list_folders"]], "lock() (mailbox.babyl \u7684\u65b9\u6cd5)": [[271, "mailbox.Babyl.lock"]], "lock() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.lock"]], "lock() (mailbox.mmdf \u7684\u65b9\u6cd5)": [[271, "mailbox.MMDF.lock"]], "lock() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.lock"]], "lock() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.lock"]], "lock() (mailbox.mbox \u7684\u65b9\u6cd5)": [[271, "mailbox.mbox.lock"]], "mailbox": [[271, "module-mailbox"]], "mbox (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.mbox"]], "mboxmessage (mailbox \u4e2d\u7684\u985e\u5225)": [[271, "mailbox.mboxMessage"]], "pack() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.pack"]], "pop() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.pop"]], "popitem() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.popitem"]], "remove() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.remove"]], "remove() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.remove"]], "remove_flag() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MMDFMessage.remove_flag"]], "remove_flag() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.remove_flag"]], "remove_flag() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.mboxMessage.remove_flag"]], "remove_folder() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.remove_folder"]], "remove_folder() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.remove_folder"]], "remove_label() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.BabylMessage.remove_label"]], "remove_sequence() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MHMessage.remove_sequence"]], "set_date() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.set_date"]], "set_flags() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MMDFMessage.set_flags"]], "set_flags() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.set_flags"]], "set_flags() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.mboxMessage.set_flags"]], "set_from() (mailbox.mmdfmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MMDFMessage.set_from"]], "set_from() (mailbox.mboxmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.mboxMessage.set_from"]], "set_info() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.set_info"]], "set_labels() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.BabylMessage.set_labels"]], "set_sequences() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.set_sequences"]], "set_sequences() (mailbox.mhmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MHMessage.set_sequences"]], "set_subdir() (mailbox.maildirmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.MaildirMessage.set_subdir"]], "set_visible() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.BabylMessage.set_visible"]], "unlock() (mailbox.babyl \u7684\u65b9\u6cd5)": [[271, "mailbox.Babyl.unlock"]], "unlock() (mailbox.mh \u7684\u65b9\u6cd5)": [[271, "mailbox.MH.unlock"]], "unlock() (mailbox.mmdf \u7684\u65b9\u6cd5)": [[271, "mailbox.MMDF.unlock"]], "unlock() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.unlock"]], "unlock() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.unlock"]], "unlock() (mailbox.mbox \u7684\u65b9\u6cd5)": [[271, "mailbox.mbox.unlock"]], "update() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.update"]], "update() (mailbox.maildir \u7684\u65b9\u6cd5)": [[271, "mailbox.Maildir.update"]], "update_visible() (mailbox.babylmessage \u7684\u65b9\u6cd5)": [[271, "mailbox.BabylMessage.update_visible"]], "values() (mailbox.mailbox \u7684\u65b9\u6cd5)": [[271, "mailbox.Mailbox.values"]], "pep 594#mailcap": [[272, "index-0"]], "rfc 1524": [[272, "index-1"], [272, "index-2"]], "findmatch() (\u65bc mailcap \u6a21\u7d44\u4e2d)": [[272, "mailcap.findmatch"]], "getcaps() (\u65bc mailcap \u6a21\u7d44\u4e2d)": [[272, "mailcap.getcaps"]], "mailcap": [[272, "module-mailcap"]], "dump() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[274, "marshal.dump"]], "dumps() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[274, "marshal.dumps"]], "load() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[274, "marshal.load"]], "loads() (\u65bc marshal \u6a21\u7d44\u4e2d)": [[274, "marshal.loads"]], "marshal": [[274, "module-marshal"]], "shelve": [[274, "index-0"], [330, "module-shelve"]], "version (\u65bc marshal \u6a21\u7d44\u4e2d)": [[274, "marshal.version"]], "acos() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.acos"]], "acosh() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.acosh"]], "asin() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.asin"]], "asinh() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.asinh"]], "atan() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.atan"]], "atan2() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.atan2"]], "atanh() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.atanh"]], "cbrt() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.cbrt"]], "ceil() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.ceil"]], "comb() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.comb"]], "copysign() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.copysign"]], "cos() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.cos"]], "cosh() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.cosh"]], "degrees() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.degrees"]], "dist() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.dist"]], "e (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.e"]], "erf() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.erf"]], "erfc() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.erfc"]], "exp() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.exp"]], "exp2() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.exp2"]], "expm1() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.expm1"]], "fabs() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.fabs"]], "factorial() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.factorial"]], "floor() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.floor"]], "fmod() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.fmod"]], "frexp() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.frexp"]], "fsum() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.fsum"]], "gamma() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.gamma"]], "gcd() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.gcd"]], "hypot() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.hypot"]], "inf (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.inf"]], "isclose() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.isclose"]], "isfinite() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.isfinite"]], "isinf() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.isinf"]], "isnan() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.isnan"]], "isqrt() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.isqrt"]], "lcm() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.lcm"]], "ldexp() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.ldexp"]], "lgamma() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.lgamma"]], "log() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.log"]], "log10() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.log10"]], "log1p() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.log1p"]], "log2() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.log2"]], "math": [[275, "module-math"], [344, "index-15"]], "modf() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.modf"]], "nan (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.nan"]], "nextafter() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.nextafter"]], "perm() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.perm"]], "pi (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.pi"]], "pow() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.pow"]], "prod() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.prod"]], "radians() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.radians"]], "remainder() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.remainder"]], "sin() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.sin"]], "sinh() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.sinh"]], "sqrt() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.sqrt"]], "sumprod() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.sumprod"]], "tan() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.tan"]], "tanh() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.tanh"]], "tau (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.tau"]], "trunc() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.trunc"]], "ulp() (\u65bc math \u6a21\u7d44\u4e2d)": [[275, "math.ulp"]], "mimetypes (mimetypes \u4e2d\u7684\u985e\u5225)": [[276, "mimetypes.MimeTypes"]], "add_type() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.add_type"]], "common_types (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.common_types"]], "content type\uff08\u5167\u5bb9\u985e\u578b\uff09": [[276, "index-0"]], "encodings_map (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[276, "mimetypes.MimeTypes.encodings_map"]], "encodings_map (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.encodings_map"]], "guess_all_extensions() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[276, "mimetypes.MimeTypes.guess_all_extensions"]], "guess_all_extensions() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.guess_all_extensions"]], "guess_extension() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[276, "mimetypes.MimeTypes.guess_extension"]], "guess_extension() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.guess_extension"]], "guess_type() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[276, "mimetypes.MimeTypes.guess_type"]], "guess_type() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.guess_type"]], "init() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.init"]], "inited (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.inited"]], "knownfiles (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.knownfiles"]], "mime.types": [[276, "index-2"]], "mimetypes": [[276, "module-mimetypes"]], "read() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[276, "mimetypes.MimeTypes.read"]], "read_mime_types() (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.read_mime_types"]], "read_windows_registry() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[276, "mimetypes.MimeTypes.read_windows_registry"]], "readfp() (mimetypes.mimetypes \u7684\u65b9\u6cd5)": [[276, "mimetypes.MimeTypes.readfp"]], "suffix_map (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[276, "mimetypes.MimeTypes.suffix_map"]], "suffix_map (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.suffix_map"]], "types_map (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[276, "mimetypes.MimeTypes.types_map"]], "types_map (\u65bc mimetypes \u6a21\u7d44\u4e2d)": [[276, "mimetypes.types_map"]], "types_map_inv (mimetypes.mimetypes \u7684\u5c6c\u6027)": [[276, "mimetypes.MimeTypes.types_map_inv"]], "madv_autosync (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_AUTOSYNC"]], "madv_core (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_CORE"]], "madv_dodump (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_DODUMP"]], "madv_dofork (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_DOFORK"]], "madv_dontdump (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_DONTDUMP"]], "madv_dontfork (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_DONTFORK"]], "madv_dontneed (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_DONTNEED"]], "madv_free (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_FREE"]], "madv_free_reusable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_FREE_REUSABLE"]], "madv_free_reuse (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_FREE_REUSE"]], "madv_hugepage (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_HUGEPAGE"]], "madv_hwpoison (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_HWPOISON"]], "madv_mergeable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_MERGEABLE"]], "madv_nocore (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_NOCORE"]], "madv_nohugepage (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_NOHUGEPAGE"]], "madv_normal (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_NORMAL"]], "madv_nosync (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_NOSYNC"]], "madv_protect (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_PROTECT"]], "madv_random (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_RANDOM"]], "madv_remove (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_REMOVE"]], "madv_sequential (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_SEQUENTIAL"]], "madv_soft_offline (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_SOFT_OFFLINE"]], "madv_unmergeable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_UNMERGEABLE"]], "madv_willneed (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MADV_WILLNEED"]], "map_aligned_super (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MAP_ALIGNED_SUPER"]], "map_anon (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MAP_ANON"]], "map_anonymous (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MAP_ANONYMOUS"]], "map_conceal (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MAP_CONCEAL"]], "map_denywrite (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MAP_DENYWRITE"]], "map_executable (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MAP_EXECUTABLE"]], "map_populate (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MAP_POPULATE"]], "map_private (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MAP_PRIVATE"]], "map_shared (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MAP_SHARED"]], "map_stack (\u65bc mmap \u6a21\u7d44\u4e2d)": [[278, "mmap.MAP_STACK"]], "close() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.close"]], "closed (mmap.mmap \u7684\u5c6c\u6027)": [[278, "mmap.mmap.closed"]], "find() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.find"]], "flush() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.flush"]], "madvise() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.madvise"]], "mmap": [[278, "module-mmap"]], "mmap (mmap \u4e2d\u7684\u985e\u5225)": [[278, "mmap.mmap"]], "move() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.move"]], "read() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.read"]], "read_byte() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.read_byte"]], "readline() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.readline"]], "resize() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.resize"]], "rfind() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.rfind"]], "seek() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.seek"]], "size() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.size"]], "tell() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.tell"]], "write() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.write"]], "write_byte() (mmap.mmap \u7684\u65b9\u6cd5)": [[278, "mmap.mmap.write_byte"]], "addpackagepath() (\u65bc modulefinder \u6a21\u7d44\u4e2d)": [[279, "modulefinder.AddPackagePath"]], "modulefinder (modulefinder \u4e2d\u7684\u985e\u5225)": [[279, "modulefinder.ModuleFinder"]], "replacepackage() (\u65bc modulefinder \u6a21\u7d44\u4e2d)": [[279, "modulefinder.ReplacePackage"]], "modulefinder": [[279, "module-modulefinder"]], "modules (modulefinder.modulefinder \u7684\u5c6c\u6027)": [[279, "modulefinder.ModuleFinder.modules"]], "report() (modulefinder.modulefinder \u7684\u65b9\u6cd5)": [[279, "modulefinder.ModuleFinder.report"]], "run_script() (modulefinder.modulefinder \u7684\u65b9\u6cd5)": [[279, "modulefinder.ModuleFinder.run_script"]], "binary (msilib \u4e2d\u7684\u985e\u5225)": [[281, "msilib.Binary"]], "cab (msilib \u4e2d\u7684\u985e\u5225)": [[281, "msilib.CAB"]], "cleardata() (msilib.record \u7684\u65b9\u6cd5)": [[281, "msilib.Record.ClearData"]], "close() (msilib.database \u7684\u65b9\u6cd5)": [[281, "msilib.Database.Close"]], "close() (msilib.view \u7684\u65b9\u6cd5)": [[281, "msilib.View.Close"]], "commit() (msilib.database \u7684\u65b9\u6cd5)": [[281, "msilib.Database.Commit"]], "control (msilib \u4e2d\u7684\u985e\u5225)": [[281, "msilib.Control"]], "createrecord() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.CreateRecord"]], "dialog (msilib \u4e2d\u7684\u985e\u5225)": [[281, "msilib.Dialog"]], "directory (msilib \u4e2d\u7684\u985e\u5225)": [[281, "msilib.Directory"]], "execute() (msilib.view \u7684\u65b9\u6cd5)": [[281, "msilib.View.Execute"]], "fcicreate() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.FCICreate"]], "feature (msilib \u4e2d\u7684\u985e\u5225)": [[281, "msilib.Feature"]], "fetch() (msilib.view \u7684\u65b9\u6cd5)": [[281, "msilib.View.Fetch"]], "getcolumninfo() (msilib.view \u7684\u65b9\u6cd5)": [[281, "msilib.View.GetColumnInfo"]], "getfieldcount() (msilib.record \u7684\u65b9\u6cd5)": [[281, "msilib.Record.GetFieldCount"]], "getinteger() (msilib.record \u7684\u65b9\u6cd5)": [[281, "msilib.Record.GetInteger"]], "getproperty() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[281, "msilib.SummaryInformation.GetProperty"]], "getpropertycount() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[281, "msilib.SummaryInformation.GetPropertyCount"]], "getstring() (msilib.record \u7684\u65b9\u6cd5)": [[281, "msilib.Record.GetString"]], "getsummaryinformation() (msilib.database \u7684\u65b9\u6cd5)": [[281, "msilib.Database.GetSummaryInformation"]], "modify() (msilib.view \u7684\u65b9\u6cd5)": [[281, "msilib.View.Modify"]], "opendatabase() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.OpenDatabase"]], "openview() (msilib.database \u7684\u65b9\u6cd5)": [[281, "msilib.Database.OpenView"]], "pep 594#msilib": [[281, "index-3"]], "persist() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[281, "msilib.SummaryInformation.Persist"]], "radiobuttongroup (msilib \u4e2d\u7684\u985e\u5225)": [[281, "msilib.RadioButtonGroup"]], "setinteger() (msilib.record \u7684\u65b9\u6cd5)": [[281, "msilib.Record.SetInteger"]], "setproperty() (msilib.summaryinformation \u7684\u65b9\u6cd5)": [[281, "msilib.SummaryInformation.SetProperty"]], "setstream() (msilib.record \u7684\u65b9\u6cd5)": [[281, "msilib.Record.SetStream"]], "setstring() (msilib.record \u7684\u65b9\u6cd5)": [[281, "msilib.Record.SetString"]], "uuidcreate() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.UuidCreate"]], "add() (msilib.radiobuttongroup \u7684\u65b9\u6cd5)": [[281, "msilib.RadioButtonGroup.add"]], "add_data() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.add_data"]], "add_file() (msilib.directory \u7684\u65b9\u6cd5)": [[281, "msilib.Directory.add_file"]], "add_stream() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.add_stream"]], "add_tables() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.add_tables"]], "append() (msilib.cab \u7684\u65b9\u6cd5)": [[281, "msilib.CAB.append"]], "bitmap() (msilib.dialog \u7684\u65b9\u6cd5)": [[281, "msilib.Dialog.bitmap"]], "checkbox() (msilib.dialog \u7684\u65b9\u6cd5)": [[281, "msilib.Dialog.checkbox"]], "commit() (msilib.cab \u7684\u65b9\u6cd5)": [[281, "msilib.CAB.commit"]], "condition() (msilib.control \u7684\u65b9\u6cd5)": [[281, "msilib.Control.condition"]], "control() (msilib.dialog \u7684\u65b9\u6cd5)": [[281, "msilib.Dialog.control"]], "event() (msilib.control \u7684\u65b9\u6cd5)": [[281, "msilib.Control.event"]], "gen_uuid() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.gen_uuid"]], "glob() (msilib.directory \u7684\u65b9\u6cd5)": [[281, "msilib.Directory.glob"]], "init_database() (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.init_database"]], "line() (msilib.dialog \u7684\u65b9\u6cd5)": [[281, "msilib.Dialog.line"]], "mapping() (msilib.control \u7684\u65b9\u6cd5)": [[281, "msilib.Control.mapping"]], "msi": [[281, "index-0"]], "msilib": [[281, "module-msilib"]], "pushbutton() (msilib.dialog \u7684\u65b9\u6cd5)": [[281, "msilib.Dialog.pushbutton"]], "radiogroup() (msilib.dialog \u7684\u65b9\u6cd5)": [[281, "msilib.Dialog.radiogroup"]], "remove_pyc() (msilib.directory \u7684\u65b9\u6cd5)": [[281, "msilib.Directory.remove_pyc"]], "schema (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.schema"]], "sequence (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.sequence"]], "set_current() (msilib.feature \u7684\u65b9\u6cd5)": [[281, "msilib.Feature.set_current"]], "start_component() (msilib.directory \u7684\u65b9\u6cd5)": [[281, "msilib.Directory.start_component"]], "text (\u65bc msilib \u6a21\u7d44\u4e2d)": [[281, "msilib.text"]], "text() (msilib.dialog \u7684\u65b9\u6cd5)": [[281, "msilib.Dialog.text"]], "crt_assembly_version (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.CRT_ASSEMBLY_VERSION"]], "libraries_assembly_name_prefix (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.LIBRARIES_ASSEMBLY_NAME_PREFIX"]], "lk_lock (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.LK_LOCK"]], "lk_nblck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.LK_NBLCK"]], "lk_nbrlck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.LK_NBRLCK"]], "lk_rlck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.LK_RLCK"]], "lk_unlck (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.LK_UNLCK"]], "vc_assembly_publickeytoken (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.VC_ASSEMBLY_PUBLICKEYTOKEN"]], "get_osfhandle() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.get_osfhandle"]], "getch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.getch"]], "getche() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.getche"]], "getwch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.getwch"]], "getwche() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.getwche"]], "heapmin() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.heapmin"]], "kbhit() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.kbhit"]], "locking() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.locking"]], "msvcrt": [[282, "module-msvcrt"]], "open_osfhandle() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.open_osfhandle"]], "putch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.putch"]], "putwch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.putwch"]], "setmode() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.setmode"]], "ungetch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.ungetch"]], "ungetwch() (\u65bc msvcrt \u6a21\u7d44\u4e2d)": [[282, "msvcrt.ungetwch"]], "array() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.Array"]], "array() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.Array"]], "array() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.sharedctypes.Array"]], "asyncresult (multiprocessing.pool \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.pool.AsyncResult"]], "authenticationerror": [[283, "multiprocessing.AuthenticationError"]], "barrier (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.Barrier"]], "barrier() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.Barrier"]], "basemanager (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.managers.BaseManager"]], "baseproxy (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.managers.BaseProxy"]], "boundedsemaphore (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.BoundedSemaphore"]], "boundedsemaphore() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.BoundedSemaphore"]], "buffertooshort": [[283, "multiprocessing.BufferTooShort"]], "client() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.connection.Client"]], "condition (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.Condition"]], "condition() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.Condition"]], "connection (multiprocessing.connection \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.connection.Connection"]], "event (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.Event"]], "event() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.Event"]], "joinablequeue (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.JoinableQueue"]], "listener (multiprocessing.connection \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.connection.Listener"]], "lock (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.Lock"]], "lock() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.Lock"]], "namespace (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.managers.Namespace"]], "namespace() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.Namespace"]], "pipe() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.Pipe"]], "pool (multiprocessing.pool \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.pool.Pool"]], "process (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.Process"]], "processerror": [[283, "multiprocessing.ProcessError"]], "queue (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.Queue"]], "queue() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.Queue"]], "rlock (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.RLock"]], "rlock() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.RLock"]], "rawarray() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.sharedctypes.RawArray"]], "rawvalue() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.sharedctypes.RawValue"]], "semaphore (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.Semaphore"]], "semaphore() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.Semaphore"]], "simplequeue (multiprocessing \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.SimpleQueue"]], "syncmanager (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.managers.SyncManager"]], "threadpool (multiprocessing.pool \u4e2d\u7684\u985e\u5225)": [[283, "multiprocessing.pool.ThreadPool"]], "value() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.Value"]], "value() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.Value"]], "value() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.sharedctypes.Value"]], "__repr__() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.BaseProxy.__repr__"]], "__str__() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.BaseProxy.__str__"]], "_callmethod() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.BaseProxy._callmethod"]], "_getvalue() (multiprocessing.managers.baseproxy \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.BaseProxy._getvalue"]], "accept() (multiprocessing.connection.listener \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Listener.accept"]], "acquire() (multiprocessing.lock \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Lock.acquire"]], "acquire() (multiprocessing.rlock \u7684\u65b9\u6cd5)": [[283, "multiprocessing.RLock.acquire"]], "active_children() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.active_children"]], "address (multiprocessing.connection.listener \u7684\u5c6c\u6027)": [[283, "multiprocessing.connection.Listener.address"]], "address (multiprocessing.managers.basemanager \u7684\u5c6c\u6027)": [[283, "multiprocessing.managers.BaseManager.address"]], "answer_challenge() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.connection.answer_challenge"]], "apply() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.apply"]], "apply_async() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.apply_async"]], "authkey (multiprocessing.process \u7684\u5c6c\u6027)": [[283, "multiprocessing.Process.authkey"]], "cancel_join_thread() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.cancel_join_thread"]], "close() (multiprocessing.process \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Process.close"]], "close() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.close"]], "close() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.SimpleQueue.close"]], "close() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Connection.close"]], "close() (multiprocessing.connection.listener \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Listener.close"]], "close() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.close"]], "connect() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.BaseManager.connect"]], "copy() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.sharedctypes.copy"]], "cpu_count() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.cpu_count"]], "current_process() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.current_process"]], "daemon (multiprocessing.process \u7684\u5c6c\u6027)": [[283, "multiprocessing.Process.daemon"]], "deliver_challenge() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.connection.deliver_challenge"]], "dict() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.dict"]], "empty() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.empty"]], "empty() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.SimpleQueue.empty"]], "exitcode (multiprocessing.process \u7684\u5c6c\u6027)": [[283, "multiprocessing.Process.exitcode"]], "fileno() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Connection.fileno"]], "freeze_support() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.freeze_support"]], "full() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.full"]], "get() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.get"]], "get() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.SimpleQueue.get"]], "get() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.AsyncResult.get"]], "get_all_start_methods() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.get_all_start_methods"]], "get_context() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.get_context"]], "get_logger() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.get_logger"]], "get_nowait() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.get_nowait"]], "get_server() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.BaseManager.get_server"]], "get_start_method() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.get_start_method"]], "imap() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.imap"]], "imap_unordered() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.imap_unordered"]], "is_alive() (multiprocessing.process \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Process.is_alive"]], "join() (multiprocessing.joinablequeue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.JoinableQueue.join"]], "join() (multiprocessing.process \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Process.join"]], "join() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.join"]], "join_thread() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.join_thread"]], "kill() (multiprocessing.process \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Process.kill"]], "last_accepted (multiprocessing.connection.listener \u7684\u5c6c\u6027)": [[283, "multiprocessing.connection.Listener.last_accepted"]], "list() (multiprocessing.managers.syncmanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.SyncManager.list"]], "log_to_stderr() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.log_to_stderr"]], "map() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.map"]], "map_async() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.map_async"]], "multiprocessing": [[283, "module-multiprocessing"]], "multiprocessing.manager()": [[283, "multiprocessing.Manager"]], "multiprocessing.connection": [[283, "module-multiprocessing.connection"]], "multiprocessing.dummy": [[283, "module-multiprocessing.dummy"]], "multiprocessing.managers": [[283, "module-multiprocessing.managers"]], "multiprocessing.pool": [[283, "module-multiprocessing.pool"]], "multiprocessing.sharedctypes": [[283, "module-multiprocessing.sharedctypes"]], "name (multiprocessing.process \u7684\u5c6c\u6027)": [[283, "multiprocessing.Process.name"]], "parent_process() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.parent_process"]], "pid (multiprocessing.process \u7684\u5c6c\u6027)": [[283, "multiprocessing.Process.pid"]], "poll() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Connection.poll"]], "put() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.put"]], "put() (multiprocessing.simplequeue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.SimpleQueue.put"]], "put_nowait() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.put_nowait"]], "qsize() (multiprocessing.queue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Queue.qsize"]], "ready() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.AsyncResult.ready"]], "recv() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Connection.recv"]], "recv_bytes() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Connection.recv_bytes"]], "recv_bytes_into() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Connection.recv_bytes_into"]], "register() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.BaseManager.register"]], "release() (multiprocessing.lock \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Lock.release"]], "release() (multiprocessing.rlock \u7684\u65b9\u6cd5)": [[283, "multiprocessing.RLock.release"]], "run() (multiprocessing.process \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Process.run"]], "send() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Connection.send"]], "send_bytes() (multiprocessing.connection.connection \u7684\u65b9\u6cd5)": [[283, "multiprocessing.connection.Connection.send_bytes"]], "sentinel (multiprocessing.process \u7684\u5c6c\u6027)": [[283, "multiprocessing.Process.sentinel"]], "set_executable() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.set_executable"]], "set_forkserver_preload() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.set_forkserver_preload"]], "set_start_method() (\u65bc multiprocessing \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.set_start_method"]], "shutdown() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.BaseManager.shutdown"]], "starmap() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.starmap"]], "starmap_async() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.starmap_async"]], "start() (multiprocessing.process \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Process.start"]], "start() (multiprocessing.managers.basemanager \u7684\u65b9\u6cd5)": [[283, "multiprocessing.managers.BaseManager.start"]], "successful() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.AsyncResult.successful"]], "synchronized() (\u65bc multiprocessing.sharedctypes \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.sharedctypes.synchronized"]], "task_done() (multiprocessing.joinablequeue \u7684\u65b9\u6cd5)": [[283, "multiprocessing.JoinableQueue.task_done"]], "terminate() (multiprocessing.process \u7684\u65b9\u6cd5)": [[283, "multiprocessing.Process.terminate"]], "terminate() (multiprocessing.pool.pool \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.Pool.terminate"]], "wait() (multiprocessing.pool.asyncresult \u7684\u65b9\u6cd5)": [[283, "multiprocessing.pool.AsyncResult.wait"]], "wait() (\u65bc multiprocessing.connection \u6a21\u7d44\u4e2d)": [[283, "multiprocessing.connection.wait"]], "named shared memory\uff08\u9644\u540d\u5171\u4eab\u8a18\u61b6\u9ad4\uff09": [[284, "index-0"]], "posix shared memory\uff08posix \u5171\u4eab\u8a18\u61b6\u9ad4\uff09": [[284, "index-0"]], "shareablelist (multiprocessing.shared_memory \u4e2d\u7684\u985e\u5225)": [[284, "multiprocessing.shared_memory.ShareableList"]], "shareablelist() (multiprocessing.managers.sharedmemorymanager \u7684\u65b9\u6cd5)": [[284, "multiprocessing.managers.SharedMemoryManager.ShareableList"]], "shared memory\uff08\u5171\u4eab\u8a18\u61b6\u9ad4\uff09": [[284, "index-0"]], "sharedmemory (multiprocessing.shared_memory \u4e2d\u7684\u985e\u5225)": [[284, "multiprocessing.shared_memory.SharedMemory"]], "sharedmemory() (multiprocessing.managers.sharedmemorymanager \u7684\u65b9\u6cd5)": [[284, "multiprocessing.managers.SharedMemoryManager.SharedMemory"]], "sharedmemorymanager (multiprocessing.managers \u4e2d\u7684\u985e\u5225)": [[284, "multiprocessing.managers.SharedMemoryManager"]], "buf (multiprocessing.shared_memory.sharedmemory \u7684\u5c6c\u6027)": [[284, "multiprocessing.shared_memory.SharedMemory.buf"]], "close() (multiprocessing.shared_memory.sharedmemory \u7684\u65b9\u6cd5)": [[284, "multiprocessing.shared_memory.SharedMemory.close"]], "count() (multiprocessing.shared_memory.shareablelist \u7684\u65b9\u6cd5)": [[284, "multiprocessing.shared_memory.ShareableList.count"]], "format (multiprocessing.shared_memory.shareablelist \u7684\u5c6c\u6027)": [[284, "multiprocessing.shared_memory.ShareableList.format"]], "index() (multiprocessing.shared_memory.shareablelist \u7684\u65b9\u6cd5)": [[284, "multiprocessing.shared_memory.ShareableList.index"]], "multiprocessing.shared_memory": [[284, "module-multiprocessing.shared_memory"]], "name (multiprocessing.shared_memory.sharedmemory \u7684\u5c6c\u6027)": [[284, "multiprocessing.shared_memory.SharedMemory.name"]], "shm (multiprocessing.shared_memory.shareablelist \u7684\u5c6c\u6027)": [[284, "multiprocessing.shared_memory.ShareableList.shm"]], "size (multiprocessing.shared_memory.sharedmemory \u7684\u5c6c\u6027)": [[284, "multiprocessing.shared_memory.SharedMemory.size"]], "unlink() (multiprocessing.shared_memory.sharedmemory \u7684\u65b9\u6cd5)": [[284, "multiprocessing.shared_memory.SharedMemory.unlink"]], "netrcparseerror": [[286, "netrc.NetrcParseError"]], "__repr__() (netrc.netrc \u7684\u65b9\u6cd5)": [[286, "netrc.netrc.__repr__"]], "authenticators() (netrc.netrc \u7684\u65b9\u6cd5)": [[286, "netrc.netrc.authenticators"]], "filename (netrc.netrcparseerror \u7684\u5c6c\u6027)": [[286, "netrc.NetrcParseError.filename"]], "hosts (netrc.netrc \u7684\u5c6c\u6027)": [[286, "netrc.netrc.hosts"]], "lineno (netrc.netrcparseerror \u7684\u5c6c\u6027)": [[286, "netrc.NetrcParseError.lineno"]], "macros (netrc.netrc \u7684\u5c6c\u6027)": [[286, "netrc.netrc.macros"]], "msg (netrc.netrcparseerror \u7684\u5c6c\u6027)": [[286, "netrc.NetrcParseError.msg"]], "netrc": [[286, "module-netrc"]], "netrc (netrc \u4e2d\u7684\u985e\u5225)": [[286, "netrc.netrc"]], "pep 594#nis": [[287, "index-2"]], "cat() (\u65bc nis \u6a21\u7d44\u4e2d)": [[287, "nis.cat"]], "get_default_domain() (\u65bc nis \u6a21\u7d44\u4e2d)": [[287, "nis.get_default_domain"]], "maps() (\u65bc nis \u6a21\u7d44\u4e2d)": [[287, "nis.maps"]], "match() (\u65bc nis \u6a21\u7d44\u4e2d)": [[287, "nis.match"]], "nis": [[287, "module-nis"]], "nntp": [[288, "index-0"]], "nntp (nntplib \u4e2d\u7684\u985e\u5225)": [[288, "nntplib.NNTP"]], "nntpdataerror": [[288, "nntplib.NNTPDataError"]], "nntperror": [[288, "nntplib.NNTPError"]], "nntppermanenterror": [[288, "nntplib.NNTPPermanentError"]], "nntpprotocolerror": [[288, "nntplib.NNTPProtocolError"]], "nntpreplyerror": [[288, "nntplib.NNTPReplyError"]], "nntptemporaryerror": [[288, "nntplib.NNTPTemporaryError"]], "nntp_ssl (nntplib \u4e2d\u7684\u985e\u5225)": [[288, "nntplib.NNTP_SSL"]], "network news transfer protocol\uff08\u7db2\u8def\u65b0\u805e\u50b3\u8f38\u5354\u5b9a\uff09": [[288, "index-0"]], "pep 594": [[288, "index-12"], [473, "index-113"], [473, "index-84"], [474, "index-31"], [474, "index-32"], [474, "index-35"], [483, "index-38"], [483, "index-47"], [483, "index-57"], [483, "index-68"], [483, "index-69"], [483, "index-73"]], "rfc 2980": [[288, "index-4"], [288, "index-9"]], "rfc 3977": [[288, "index-10"], [288, "index-2"], [288, "index-6"], [288, "index-7"], [288, "index-8"]], "rfc 4642": [[288, "index-5"]], "rfc 977": [[288, "index-3"]], "article() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.article"]], "body() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.body"]], "date() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.date"]], "decode_header() (\u65bc nntplib \u6a21\u7d44\u4e2d)": [[288, "nntplib.decode_header"]], "description() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.description"]], "descriptions() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.descriptions"]], "getcapabilities() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.getcapabilities"]], "getwelcome() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.getwelcome"]], "group() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.group"]], "head() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.head"]], "help() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.help"]], "ihave() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.ihave"]], "last() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.last"]], "list() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.list"]], "login() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.login"]], "newgroups() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.newgroups"]], "newnews() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.newnews"]], "next() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.next"]], "nntp_implementation (nntplib.nntp \u7684\u5c6c\u6027)": [[288, "nntplib.NNTP.nntp_implementation"]], "nntp_version (nntplib.nntp \u7684\u5c6c\u6027)": [[288, "nntplib.NNTP.nntp_version"]], "nntplib": [[288, "module-nntplib"]], "over() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.over"]], "post() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.post"]], "quit() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.quit"]], "response (nntplib.nntperror \u7684\u5c6c\u6027)": [[288, "nntplib.NNTPError.response"]], "set_debuglevel() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.set_debuglevel"]], "slave() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.slave"]], "starttls() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.starttls"]], "stat() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.stat"]], "xhdr() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.xhdr"]], "xover() (nntplib.nntp \u7684\u65b9\u6cd5)": [[288, "nntplib.NNTP.xover"]], "complex (numbers \u4e2d\u7684\u985e\u5225)": [[289, "numbers.Complex"]], "integral (numbers \u4e2d\u7684\u985e\u5225)": [[289, "numbers.Integral"]], "number (numbers \u4e2d\u7684\u985e\u5225)": [[289, "numbers.Number"]], "rational (numbers \u4e2d\u7684\u985e\u5225)": [[289, "numbers.Rational"]], "real (numbers \u4e2d\u7684\u985e\u5225)": [[289, "numbers.Real"]], "conjugate() (numbers.complex \u7684\u65b9\u6cd5)": [[289, "numbers.Complex.conjugate"]], "denominator (numbers.rational \u7684\u5c6c\u6027)": [[289, "numbers.Rational.denominator"]], "imag (numbers.complex \u7684\u5c6c\u6027)": [[289, "numbers.Complex.imag"]], "numbers": [[289, "module-numbers"]], "numerator (numbers.rational \u7684\u5c6c\u6027)": [[289, "numbers.Rational.numerator"]], "real (numbers.complex \u7684\u5c6c\u6027)": [[289, "numbers.Complex.real"]], "__abs__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__abs__"]], "__add__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__add__"]], "__and__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__and__"]], "__call__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__call__"]], "__concat__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__concat__"]], "__contains__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__contains__"]], "__delitem__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__delitem__"]], "__eq__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__eq__"]], "__floordiv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__floordiv__"]], "__ge__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__ge__"]], "__getitem__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__getitem__"]], "__gt__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__gt__"]], "__iadd__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__iadd__"]], "__iand__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__iand__"]], "__iconcat__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__iconcat__"]], "__ifloordiv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__ifloordiv__"]], "__ilshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__ilshift__"]], "__imatmul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__imatmul__"]], "__imod__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__imod__"]], "__imul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__imul__"]], "__index__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__index__"]], "__inv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__inv__"]], "__invert__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__invert__"]], "__ior__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__ior__"]], "__ipow__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__ipow__"]], "__irshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__irshift__"]], "__isub__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__isub__"]], "__itruediv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__itruediv__"]], "__ixor__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__ixor__"]], "__le__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__le__"]], "__lshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__lshift__"]], "__lt__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__lt__"]], "__matmul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__matmul__"]], "__mod__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__mod__"]], "__mul__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__mul__"]], "__ne__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__ne__"]], "__neg__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__neg__"]], "__not__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__not__"]], "__or__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__or__"]], "__pos__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__pos__"]], "__pow__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__pow__"]], "__rshift__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__rshift__"]], "__setitem__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__setitem__"]], "__sub__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__sub__"]], "__truediv__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__truediv__"]], "__xor__() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.__xor__"]], "abs() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.abs"]], "add() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.add"]], "and_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.and_"]], "attrgetter() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.attrgetter"]], "call() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.call"]], "concat() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.concat"]], "contains() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.contains"]], "countof() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.countOf"]], "delitem() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.delitem"]], "eq() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.eq"]], "floordiv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.floordiv"]], "ge() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.ge"]], "getitem() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.getitem"]], "gt() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.gt"]], "iadd() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.iadd"]], "iand() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.iand"]], "iconcat() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.iconcat"]], "ifloordiv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.ifloordiv"]], "ilshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.ilshift"]], "imatmul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.imatmul"]], "imod() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.imod"]], "imul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.imul"]], "index() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.index"]], "indexof() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.indexOf"]], "inv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.inv"]], "invert() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.invert"]], "ior() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.ior"]], "ipow() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.ipow"]], "irshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.irshift"]], "is_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.is_"]], "is_not() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.is_not"]], "isub() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.isub"]], "itemgetter() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.itemgetter"]], "itruediv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.itruediv"]], "ixor() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.ixor"]], "le() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.le"]], "length_hint() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.length_hint"]], "lshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.lshift"]], "lt() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.lt"]], "matmul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.matmul"]], "methodcaller() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.methodcaller"]], "mod() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.mod"]], "mul() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.mul"]], "ne() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.ne"]], "neg() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.neg"]], "not_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.not_"]], "operator": [[291, "module-operator"]], "or_() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.or_"]], "pos() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.pos"]], "pow() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.pow"]], "rshift() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.rshift"]], "setitem() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.setitem"]], "sub() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.sub"]], "truediv() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.truediv"]], "truth() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.truth"]], "xor() (\u65bc operator \u6a21\u7d44\u4e2d)": [[291, "operator.xor"]], "actions (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.ACTIONS"]], "always_typed_actions (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.ALWAYS_TYPED_ACTIONS"]], "ambiguousoptionerror": [[292, "optparse.AmbiguousOptionError"]], "badoptionerror": [[292, "optparse.BadOptionError"]], "option (optparse \u4e2d\u7684\u985e\u5225)": [[292, "optparse.Option"]], "optionconflicterror": [[292, "optparse.OptionConflictError"]], "optionerror": [[292, "optparse.OptionError"]], "optiongroup (optparse \u4e2d\u7684\u985e\u5225)": [[292, "optparse.OptionGroup"]], "optionparser (optparse \u4e2d\u7684\u985e\u5225)": [[292, "optparse.OptionParser"]], "optionvalueerror": [[292, "optparse.OptionValueError"]], "store_actions (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.STORE_ACTIONS"]], "typed_actions (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.TYPED_ACTIONS"]], "types (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.TYPES"]], "type_checker (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.TYPE_CHECKER"]], "values (optparse \u4e2d\u7684\u985e\u5225)": [[292, "optparse.Values"]], "action (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.action"]], "add_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.add_option"]], "callback (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.callback"]], "callback_args (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.callback_args"]], "callback_kwargs (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.callback_kwargs"]], "choices (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.choices"]], "const (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.const"]], "default (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.default"]], "dest (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.dest"]], "disable_interspersed_args() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.disable_interspersed_args"]], "enable_interspersed_args() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.enable_interspersed_args"]], "get_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.get_option"]], "get_option_group() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.get_option_group"]], "get_usage() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.get_usage"]], "get_version() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.get_version"]], "has_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.has_option"]], "help (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.help"]], "metavar (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.metavar"]], "nargs (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.nargs"]], "optparse": [[292, "module-optparse"]], "parse_args() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.parse_args"]], "print_usage() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.print_usage"]], "print_version() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.print_version"]], "remove_option() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.remove_option"]], "set_defaults() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.set_defaults"]], "set_usage() (optparse.optionparser \u7684\u65b9\u6cd5)": [[292, "optparse.OptionParser.set_usage"]], "type (optparse.option \u7684\u5c6c\u6027)": [[292, "optparse.Option.type"]], "..": [[293, "index-46"]], "/ \uff08\u659c\u7dda\uff09": [[293, "index-47"], [293, "index-49"], [344, "index-13"], [427, "index-32"], [430, "index-67"]], ": \uff08\u5192\u865f\uff09": [[293, "index-51"], [340, "index-7"], [345, "index-2"], [427, "index-16"], [427, "index-18"], [427, "index-28"], [427, "index-3"], [427, "index-34"], [427, "index-4"], [427, "index-42"], [427, "index-6"], [427, "index-9"], [430, "index-17"], [430, "index-44"], [430, "index-90"], [435, "index-25"], [436, "index-15"], [441, "index-6"]], "; \uff08\u5206\u865f\uff09": [[293, "index-51"], [427, "index-1"]], "cld_continued (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLD_CONTINUED"]], "cld_dumped (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLD_DUMPED"]], "cld_exited (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLD_EXITED"]], "cld_killed (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLD_KILLED"]], "cld_stopped (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLD_STOPPED"]], "cld_trapped (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLD_TRAPPED"]], "clone_files (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_FILES"]], "clone_fs (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_FS"]], "clone_newcgroup (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_NEWCGROUP"]], "clone_newipc (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_NEWIPC"]], "clone_newnet (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_NEWNET"]], "clone_newns (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_NEWNS"]], "clone_newpid (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_NEWPID"]], "clone_newtime (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_NEWTIME"]], "clone_newuser (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_NEWUSER"]], "clone_newuts (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_NEWUTS"]], "clone_sighand (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_SIGHAND"]], "clone_sysvsem (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_SYSVSEM"]], "clone_thread (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_THREAD"]], "clone_vm (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.CLONE_VM"]], "comspec": [[293, "index-43"], [348, "index-3"]], "direntry (os \u4e2d\u7684\u985e\u5225)": [[293, "os.DirEntry"]], "efd_cloexec (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EFD_CLOEXEC"]], "efd_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EFD_NONBLOCK"]], "efd_semaphore (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EFD_SEMAPHORE"]], "ex_cantcreat (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_CANTCREAT"]], "ex_config (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_CONFIG"]], "ex_dataerr (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_DATAERR"]], "ex_ioerr (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_IOERR"]], "ex_nohost (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_NOHOST"]], "ex_noinput (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_NOINPUT"]], "ex_noperm (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_NOPERM"]], "ex_notfound (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_NOTFOUND"]], "ex_nouser (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_NOUSER"]], "ex_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_OK"]], "ex_oserr (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_OSERR"]], "ex_osfile (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_OSFILE"]], "ex_protocol (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_PROTOCOL"]], "ex_software (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_SOFTWARE"]], "ex_tempfail (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_TEMPFAIL"]], "ex_unavailable (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_UNAVAILABLE"]], "ex_usage (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.EX_USAGE"]], "f_lock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.F_LOCK"]], "f_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.F_OK"]], "f_test (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.F_TEST"]], "f_tlock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.F_TLOCK"]], "f_ulock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.F_ULOCK"]], "grnd_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.GRND_NONBLOCK"]], "grnd_random (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.GRND_RANDOM"]], "mfd_allow_sealing (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_ALLOW_SEALING"]], "mfd_cloexec (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_CLOEXEC"]], "mfd_hugetlb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGETLB"]], "mfd_huge_16gb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_16GB"]], "mfd_huge_16mb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_16MB"]], "mfd_huge_1gb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_1GB"]], "mfd_huge_1mb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_1MB"]], "mfd_huge_256mb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_256MB"]], "mfd_huge_2gb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_2GB"]], "mfd_huge_2mb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_2MB"]], "mfd_huge_32mb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_32MB"]], "mfd_huge_512kb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_512KB"]], "mfd_huge_512mb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_512MB"]], "mfd_huge_64kb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_64KB"]], "mfd_huge_8mb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_8MB"]], "mfd_huge_mask (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_MASK"]], "mfd_huge_shift (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.MFD_HUGE_SHIFT"]], "o_append (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_APPEND"]], "o_async (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_ASYNC"]], "o_binary (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_BINARY"]], "o_cloexec (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_CLOEXEC"]], "o_creat (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_CREAT"]], "o_direct (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_DIRECT"]], "o_directory (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_DIRECTORY"]], "o_dsync (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_DSYNC"]], "o_evtonly (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_EVTONLY"]], "o_excl (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_EXCL"]], "o_exlock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_EXLOCK"]], "o_fsync (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_FSYNC"]], "o_ndelay (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_NDELAY"]], "o_noatime (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_NOATIME"]], "o_noctty (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_NOCTTY"]], "o_nofollow (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_NOFOLLOW"]], "o_nofollow_any (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_NOFOLLOW_ANY"]], "o_noinherit (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_NOINHERIT"]], "o_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_NONBLOCK"]], "o_path (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_PATH"]], "o_random (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_RANDOM"]], "o_rdonly (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_RDONLY"]], "o_rdwr (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_RDWR"]], "o_rsync (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_RSYNC"]], "o_sequential (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_SEQUENTIAL"]], "o_shlock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_SHLOCK"]], "o_short_lived (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_SHORT_LIVED"]], "o_symlink (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_SYMLINK"]], "o_sync (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_SYNC"]], "o_temporary (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_TEMPORARY"]], "o_text (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_TEXT"]], "o_tmpfile (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_TMPFILE"]], "o_trunc (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_TRUNC"]], "o_wronly (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.O_WRONLY"]], "pep 524": [[293, "index-53"], [479, "index-1"], [479, "index-31"], [479, "index-32"], [483, "index-268"], [483, "index-269"]], "pidfd_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.PIDFD_NONBLOCK"]], "posix_fadv_dontneed (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.POSIX_FADV_DONTNEED"]], "posix_fadv_noreuse (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.POSIX_FADV_NOREUSE"]], "posix_fadv_normal (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.POSIX_FADV_NORMAL"]], "posix_fadv_random (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.POSIX_FADV_RANDOM"]], "posix_fadv_sequential (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.POSIX_FADV_SEQUENTIAL"]], "posix_fadv_willneed (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.POSIX_FADV_WILLNEED"]], "posix_spawn_close (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.POSIX_SPAWN_CLOSE"]], "posix_spawn_dup2 (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.POSIX_SPAWN_DUP2"]], "posix_spawn_open (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.POSIX_SPAWN_OPEN"]], "prio_darwin_bg (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.PRIO_DARWIN_BG"]], "prio_darwin_nonui (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.PRIO_DARWIN_NONUI"]], "prio_darwin_process (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.PRIO_DARWIN_PROCESS"]], "prio_darwin_thread (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.PRIO_DARWIN_THREAD"]], "prio_pgrp (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.PRIO_PGRP"]], "prio_process (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.PRIO_PROCESS"]], "prio_user (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.PRIO_USER"]], "p_all (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.P_ALL"]], "p_detach (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.P_DETACH"]], "p_nowait (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.P_NOWAIT"]], "p_nowaito (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.P_NOWAITO"]], "p_overlay (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.P_OVERLAY"]], "p_pgid (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.P_PGID"]], "p_pid (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.P_PID"]], "p_pidfd (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.P_PIDFD"]], "p_wait (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.P_WAIT"]], "pathlike (os \u4e2d\u7684\u985e\u5225)": [[293, "os.PathLike"]], "rtld_deepbind (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RTLD_DEEPBIND"]], "rtld_global (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RTLD_GLOBAL"]], "rtld_lazy (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RTLD_LAZY"]], "rtld_local (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RTLD_LOCAL"]], "rtld_nodelete (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RTLD_NODELETE"]], "rtld_noload (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RTLD_NOLOAD"]], "rtld_now (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RTLD_NOW"]], "rwf_append (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RWF_APPEND"]], "rwf_dsync (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RWF_DSYNC"]], "rwf_hipri (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RWF_HIPRI"]], "rwf_nowait (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RWF_NOWAIT"]], "rwf_sync (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.RWF_SYNC"]], "r_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.R_OK"]], "sched_batch (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SCHED_BATCH"]], "sched_fifo (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SCHED_FIFO"]], "sched_idle (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SCHED_IDLE"]], "sched_other (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SCHED_OTHER"]], "sched_reset_on_fork (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SCHED_RESET_ON_FORK"]], "sched_rr (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SCHED_RR"]], "sched_sporadic (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SCHED_SPORADIC"]], "seek_cur (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SEEK_CUR"]], "seek_data (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SEEK_DATA"]], "seek_end (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SEEK_END"]], "seek_hole (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SEEK_HOLE"]], "seek_set (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SEEK_SET"]], "sf_mnowait (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SF_MNOWAIT"]], "sf_nocache (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SF_NOCACHE"]], "sf_nodiskio (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SF_NODISKIO"]], "sf_sync (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SF_SYNC"]], "splice_f_more (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SPLICE_F_MORE"]], "splice_f_move (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SPLICE_F_MOVE"]], "splice_f_nonblock (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.SPLICE_F_NONBLOCK"]], "unc paths\uff08unc \u8def\u5f91\uff09": [[293, "index-28"]], "wcontinued (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WCONTINUED"]], "wcoredump() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WCOREDUMP"]], "wexited (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WEXITED"]], "wexitstatus() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WEXITSTATUS"]], "wifcontinued() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WIFCONTINUED"]], "wifexited() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WIFEXITED"]], "wifsignaled() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WIFSIGNALED"]], "wifstopped() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WIFSTOPPED"]], "wnohang (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WNOHANG"]], "wnowait (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WNOWAIT"]], "wstopped (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WSTOPPED"]], "wstopsig() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WSTOPSIG"]], "wtermsig() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WTERMSIG"]], "wuntraced (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.WUNTRACED"]], "w_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.W_OK"]], "xattr_create (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.XATTR_CREATE"]], "xattr_replace (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.XATTR_REPLACE"]], "xattr_size_max (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.XATTR_SIZE_MAX"]], "x_ok (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.X_OK"]], "__fspath__() (os.pathlike \u7684\u65b9\u6cd5)": [[293, "os.PathLike.__fspath__"]], "_exit() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os._exit"]], "abort() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.abort"]], "access() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.access"]], "add_dll_directory() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.add_dll_directory"]], "altsep (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.altsep"]], "changing\uff08\u6539\u8b8a\uff09": [[293, "index-26"]], "chdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.chdir"]], "chflags() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.chflags"]], "chmod() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.chmod"]], "chown() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.chown"]], "chroot() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.chroot"]], "close() (os.scandir \u7684\u65b9\u6cd5)": [[293, "os.scandir.close"]], "close() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.close"]], "closerange() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.closerange"]], "columns (os.terminal_size \u7684\u5c6c\u6027)": [[293, "os.terminal_size.columns"]], "confstr() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.confstr"]], "confstr_names (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.confstr_names"]], "copy_file_range() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.copy_file_range"]], "cpu_count() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.cpu_count"]], "creating\uff08\u5efa\u7acb\uff09": [[293, "index-28"]], "ctermid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.ctermid"]], "curdir (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.curdir"]], "defpath (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.defpath"]], "deleting\uff08\u522a\u9664\uff09": [[293, "index-21"], [293, "index-29"], [332, "index-1"]], "device_encoding() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.device_encoding"]], "devnull (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.devnull"]], "directory\uff08\u76ee\u9304\uff09": [[293, "index-26"], [293, "index-28"], [293, "index-29"], [293, "index-31"], [293, "index-32"], [332, "index-1"], [334, "index-1"]], "dup() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.dup"]], "dup2() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.dup2"]], "effective id": [[293, "index-8"]], "environ (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.environ"]], "environb (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.environb"]], "environment variables\uff08\u74b0\u5883\u8b8a\u6578\uff09": [[293, "index-17"], [293, "index-21"]], "eventfd() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.eventfd"]], "eventfd_read() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.eventfd_read"]], "eventfd_write() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.eventfd_write"]], "execl() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.execl"]], "execle() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.execle"]], "execlp() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.execlp"]], "execlpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.execlpe"]], "execv() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.execv"]], "execve() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.execve"]], "execvp() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.execvp"]], "execvpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.execvpe"]], "extsep (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.extsep"]], "fchdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fchdir"]], "fchmod() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fchmod"]], "fchown() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fchown"]], "fdatasync() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fdatasync"]], "fdopen() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fdopen"]], "fork() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fork"]], "forkpty() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.forkpty"]], "fpathconf() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fpathconf"]], "fsdecode() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fsdecode"]], "fsencode() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fsencode"]], "fspath() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fspath"]], "fstat() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fstat"]], "fstatvfs() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fstatvfs"]], "fsync() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fsync"]], "ftruncate() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.ftruncate"]], "fwalk() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.fwalk"]], "get_blocking() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.get_blocking"]], "get_exec_path() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.get_exec_path"]], "get_handle_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.get_handle_inheritable"]], "get_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.get_inheritable"]], "get_terminal_size() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.get_terminal_size"]], "getcwd() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getcwd"]], "getcwdb() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getcwdb"]], "getegid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getegid"]], "getenv() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getenv"]], "getenvb() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getenvb"]], "geteuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.geteuid"]], "getgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getgid"]], "getgrouplist() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getgrouplist"]], "getgroups() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getgroups"]], "gethostbyaddr()\uff08\u65bc socket \u6a21\u7d44\uff09": [[293, "index-20"]], "gethostname()\uff08\u65bc socket \u6a21\u7d44\uff09": [[293, "index-20"]], "getloadavg() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getloadavg"]], "getlogin() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getlogin"]], "getpgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getpgid"]], "getpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getpgrp"]], "getpid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getpid"]], "getppid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getppid"]], "getpriority() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getpriority"]], "getrandom() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getrandom"]], "getresgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getresgid"]], "getresuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getresuid"]], "getsid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getsid"]], "getuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getuid"]], "getxattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.getxattr"]], "group\uff08\u7fa4\u7d44\uff09": [[293, "index-12"], [293, "index-9"]], "id": [[293, "index-13"], [293, "index-16"], [428, "index-1"]], "id of parent": [[293, "index-14"]], "id, setting\uff08\u8a2d\u5b9a\uff09": [[293, "index-19"]], "in pathnames (windows)\uff08\u5728\u8def\u5f91\u540d\u7a31\u4e2d (windows)\uff09": [[293, "index-48"]], "initgroups() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.initgroups"]], "inode() (os.direntry \u7684\u65b9\u6cd5)": [[293, "os.DirEntry.inode"]], "is_dir() (os.direntry \u7684\u65b9\u6cd5)": [[293, "os.DirEntry.is_dir"]], "is_file() (os.direntry \u7684\u65b9\u6cd5)": [[293, "os.DirEntry.is_file"]], "is_junction() (os.direntry \u7684\u65b9\u6cd5)": [[293, "os.DirEntry.is_junction"]], "is_symlink() (os.direntry \u7684\u65b9\u6cd5)": [[293, "os.DirEntry.is_symlink"]], "isatty() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.isatty"]], "kill() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.kill"]], "killing": [[293, "index-37"], [293, "index-38"]], "killpg() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.killpg"]], "lchflags() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.lchflags"]], "lchmod() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.lchmod"]], "lchown() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.lchown"]], "lines (os.terminal_size \u7684\u5c6c\u6027)": [[293, "os.terminal_size.lines"]], "linesep (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.linesep"]], "link() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.link"]], "listdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.listdir"]], "listdrives() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.listdrives"]], "listmounts() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.listmounts"]], "listvolumes() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.listvolumes"]], "listxattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.listxattr"]], "lockf() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.lockf"]], "login_tty() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.login_tty"]], "lseek() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.lseek"]], "lstat() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.lstat"]], "major() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.major"]], "makedev() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.makedev"]], "makedirs() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.makedirs"]], "memfd_create() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.memfd_create"]], "minor() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.minor"]], "mkdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.mkdir"]], "mkfifo() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.mkfifo"]], "mknod() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.mknod"]], "name (os.direntry \u7684\u5c6c\u6027)": [[293, "os.DirEntry.name"]], "name (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.name"]], "nice() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.nice"]], "open() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.open"]], "openpty() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.openpty"]], "os": [[293, "module-os"], [306, "index-0"]], "pardir (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pardir"]], "path (os.direntry \u7684\u5c6c\u6027)": [[293, "os.DirEntry.path"]], "path separator (posix)\uff08\u8def\u5f91\u5206\u9694\u5668 (posix)\uff09": [[293, "index-51"]], "pathconf() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pathconf"]], "pathconf_names (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pathconf_names"]], "pathsep (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pathsep"]], "pidfd_open() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pidfd_open"]], "pipe() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pipe"]], "pipe2() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pipe2"]], "plock() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.plock"]], "popen() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.popen"]], "posix_fadvise() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.posix_fadvise"]], "posix_fallocate() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.posix_fallocate"]], "posix_spawn() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.posix_spawn"]], "posix_spawnp() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.posix_spawnp"]], "pread() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pread"]], "preadv() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.preadv"]], "process": [[293, "index-12"], [293, "index-13"], [293, "index-14"], [293, "index-15"], [293, "index-18"], [293, "index-37"], [293, "index-38"], [293, "index-9"]], "pty": [[293, "index-23"], [309, "module-pty"]], "putenv() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.putenv"]], "pwrite() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pwrite"]], "pwritev() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.pwritev"]], "read() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.read"]], "readlink() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.readlink"]], "readv() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.readv"]], "register_at_fork() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.register_at_fork"]], "remove() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.remove"]], "removedirs() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.removedirs"]], "removexattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.removexattr"]], "rename() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.rename"]], "renames() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.renames"]], "replace() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.replace"]], "rmdir() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.rmdir"]], "scandir() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.scandir"]], "sched_get_priority_max() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_get_priority_max"]], "sched_get_priority_min() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_get_priority_min"]], "sched_getaffinity() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_getaffinity"]], "sched_getparam() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_getparam"]], "sched_getscheduler() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_getscheduler"]], "sched_param (os \u4e2d\u7684\u985e\u5225)": [[293, "os.sched_param"]], "sched_priority (os.sched_param \u7684\u5c6c\u6027)": [[293, "os.sched_param.sched_priority"]], "sched_rr_get_interval() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_rr_get_interval"]], "sched_setaffinity() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_setaffinity"]], "sched_setparam() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_setparam"]], "sched_setscheduler() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_setscheduler"]], "sched_yield() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sched_yield"]], "scheduling priority\uff08\u6392\u7a0b\u512a\u5148\u6b0a\uff09": [[293, "index-15"], [293, "index-18"]], "sendfile() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sendfile"]], "sep (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sep"]], "set_blocking() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.set_blocking"]], "set_handle_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.set_handle_inheritable"]], "set_inheritable() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.set_inheritable"]], "setegid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setegid"]], "seteuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.seteuid"]], "setgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setgid"]], "setgroups() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setgroups"]], "setns() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setns"]], "setpgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setpgid"]], "setpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setpgrp"]], "setpriority() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setpriority"]], "setregid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setregid"]], "setresgid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setresgid"]], "setresuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setresuid"]], "setreuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setreuid"]], "setsid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setsid"]], "setting\uff08\u8a2d\u5b9a\uff09": [[293, "index-17"]], "setuid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setuid"]], "setxattr() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.setxattr"]], "signalling\uff08\u4fe1\u865f\uff09": [[293, "index-37"], [293, "index-38"]], "spawnl() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.spawnl"]], "spawnle() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.spawnle"]], "spawnlp() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.spawnlp"]], "spawnlpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.spawnlpe"]], "spawnv() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.spawnv"]], "spawnve() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.spawnve"]], "spawnvp() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.spawnvp"]], "spawnvpe() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.spawnvpe"]], "splice() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.splice"]], "st_atime (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_atime"]], "st_atime_ns (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_atime_ns"]], "st_birthtime (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_birthtime"]], "st_birthtime_ns (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_birthtime_ns"]], "st_blksize (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_blksize"]], "st_blocks (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_blocks"]], "st_creator (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_creator"]], "st_ctime (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_ctime"]], "st_ctime_ns (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_ctime_ns"]], "st_dev (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_dev"]], "st_file_attributes (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_file_attributes"]], "st_flags (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_flags"]], "st_fstype (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_fstype"]], "st_gen (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_gen"]], "st_gid (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_gid"]], "st_ino (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_ino"]], "st_mode (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_mode"]], "st_mtime (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_mtime"]], "st_mtime_ns (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_mtime_ns"]], "st_nlink (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_nlink"]], "st_rdev (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_rdev"]], "st_reparse_tag (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_reparse_tag"]], "st_rsize (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_rsize"]], "st_size (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_size"]], "st_type (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_type"]], "st_uid (os.stat_result \u7684\u5c6c\u6027)": [[293, "os.stat_result.st_uid"]], "startfile() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.startfile"]], "stat": [[293, "index-30"], [342, "module-stat"]], "stat() (os.direntry \u7684\u65b9\u6cd5)": [[293, "os.DirEntry.stat"]], "stat() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.stat"]], "stat_result (os \u4e2d\u7684\u985e\u5225)": [[293, "os.stat_result"]], "statvfs() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.statvfs"]], "strerror() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.strerror"]], "supports_bytes_environ (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.supports_bytes_environ"]], "supports_dir_fd (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.supports_dir_fd"]], "supports_effective_ids (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.supports_effective_ids"]], "supports_fd (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.supports_fd"]], "supports_follow_symlinks (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.supports_follow_symlinks"]], "symlink() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.symlink"]], "sync() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sync"]], "sysconf() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sysconf"]], "sysconf_names (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.sysconf_names"]], "system() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.system"]], "tcgetpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.tcgetpgrp"]], "tcsetpgrp() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.tcsetpgrp"]], "terminal_size (os \u4e2d\u7684\u985e\u5225)": [[293, "os.terminal_size"]], "times() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.times"]], "traversal\uff08\u904d\u6b77\uff09": [[293, "index-31"], [293, "index-32"]], "truncate() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.truncate"]], "ttyname() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.ttyname"]], "umask() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.umask"]], "uname() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.uname"]], "unlink() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.unlink"]], "unsetenv() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.unsetenv"]], "unshare() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.unshare"]], "urandom() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.urandom"]], "user\uff08\u4f7f\u7528\u8005\uff09": [[293, "index-16"], [293, "index-19"], [293, "index-8"]], "utime() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.utime"]], "wait() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.wait"]], "wait3() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.wait3"]], "wait4() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.wait4"]], "waitid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.waitid"]], "waitpid() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.waitpid"]], "waitstatus_to_exitcode() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.waitstatus_to_exitcode"]], "walk() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.walk"]], "walking": [[293, "index-31"], [293, "index-32"]], "write() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.write"]], "writev() (\u65bc os \u6a21\u7d44\u4e2d)": [[293, "os.writev"]], "\u4ee5\u53ca os.makedirs()": [[293, "index-28"]], "\u65bc pathnames\uff08\u8def\u5f91\u540d\u7a31\uff09\u4e2d": [[293, "index-45"], [293, "index-46"], [293, "index-47"], [293, "index-49"], [293, "index-50"]], "home": [[294, "index-16"], [294, "index-21"], [369, "index-1"], [481, "index-14"], [481, "index-21"], [483, "index-200"], [483, "index-201"]], "homedrive": [[294, "index-19"]], "homepath": [[294, "index-18"]], "userprofile": [[294, "index-17"], [481, "index-13"], [481, "index-20"], [483, "index-199"]], "abspath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.abspath"]], "basename() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.basename"]], "commonpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.commonpath"]], "commonprefix() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.commonprefix"]], "dirname() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.dirname"]], "environment variables expansion (windows)\uff08\u74b0\u5883\u8b8a\u6578\u5c55\u958b (windows)\uff09": [[294, "index-9"]], "environment variables expansion\uff08\u74b0\u5883\u8b8a\u6578\u5c55\u958b\uff09": [[294, "index-9"]], "exists() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.exists"]], "expanduser() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.expanduser"]], "expandvars() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.expandvars"]], "getatime() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.getatime"]], "getctime() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.getctime"]], "getmtime() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.getmtime"]], "getsize() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.getsize"]], "home directory expansion\uff08\u5bb6\u76ee\u9304\u5c55\u958b\uff09": [[294, "index-1"]], "isabs() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.isabs"]], "isdevdrive() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.isdevdrive"]], "isdir() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.isdir"]], "isfile() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.isfile"]], "isjunction() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.isjunction"]], "islink() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.islink"]], "ismount() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.ismount"]], "join() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.join"]], "lexists() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.lexists"]], "normcase() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.normcase"]], "normpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.normpath"]], "operations\uff08\u64cd\u4f5c\uff09": [[294, "index-0"], [296, "index-0"], [344, "index-1"], [344, "index-16"], [344, "index-5"]], "os.path": [[294, "module-os.path"]], "pwd": [[294, "index-2"], [310, "module-pwd"]], "realpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.realpath"]], "relpath() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.relpath"]], "samefile() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.samefile"]], "sameopenfile() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.sameopenfile"]], "samestat() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.samestat"]], "split() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.split"]], "splitdrive() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.splitdrive"]], "splitext() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.splitext"]], "splitroot() (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.splitroot"]], "supports_unicode_filenames (\u65bc os.path \u6a21\u7d44\u4e2d)": [[294, "os.path.supports_unicode_filenames"]], "~ \uff08\u6ce2\u6d6a\u865f\uff09": [[294, "index-1"], [344, "index-16"], [430, "index-62"]], "audiodev": [[295, "index-1"]], "mixerdev": [[295, "index-2"]], "ossaudioerror": [[295, "ossaudiodev.OSSAudioError"]], "pep 594#ossaudiodev": [[295, "index-4"]], "bufsize() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.bufsize"]], "channels() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.channels"]], "close() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.close"]], "close() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_mixer_device.close"]], "closed (ossaudiodev.oss_audio_device \u7684\u5c6c\u6027)": [[295, "ossaudiodev.oss_audio_device.closed"]], "controls() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_mixer_device.controls"]], "fileno() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.fileno"]], "fileno() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_mixer_device.fileno"]], "get() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_mixer_device.get"]], "get_recsrc() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_mixer_device.get_recsrc"]], "getfmts() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.getfmts"]], "mode (ossaudiodev.oss_audio_device \u7684\u5c6c\u6027)": [[295, "ossaudiodev.oss_audio_device.mode"]], "name (ossaudiodev.oss_audio_device \u7684\u5c6c\u6027)": [[295, "ossaudiodev.oss_audio_device.name"]], "nonblock() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.nonblock"]], "obufcount() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.obufcount"]], "obuffree() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.obuffree"]], "open() (\u65bc ossaudiodev \u6a21\u7d44\u4e2d)": [[295, "ossaudiodev.open"]], "openmixer() (\u65bc ossaudiodev \u6a21\u7d44\u4e2d)": [[295, "ossaudiodev.openmixer"]], "ossaudiodev": [[295, "module-ossaudiodev"]], "post() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.post"]], "read() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.read"]], "reccontrols() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_mixer_device.reccontrols"]], "reset() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.reset"]], "set() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_mixer_device.set"]], "set_recsrc() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_mixer_device.set_recsrc"]], "setfmt() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.setfmt"]], "setparameters() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.setparameters"]], "speed() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.speed"]], "stereocontrols() (ossaudiodev.oss_mixer_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_mixer_device.stereocontrols"]], "sync() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.sync"]], "write() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.write"]], "writeall() (ossaudiodev.oss_audio_device \u7684\u65b9\u6cd5)": [[295, "ossaudiodev.oss_audio_device.writeall"]], "pep 428": [[296, "index-3"], [477, "index-30"], [477, "index-7"]], "path (pathlib \u4e2d\u7684\u985e\u5225)": [[296, "pathlib.Path"]], "posixpath (pathlib \u4e2d\u7684\u985e\u5225)": [[296, "pathlib.PosixPath"]], "purepath (pathlib \u4e2d\u7684\u985e\u5225)": [[296, "pathlib.PurePath"]], "pureposixpath (pathlib \u4e2d\u7684\u985e\u5225)": [[296, "pathlib.PurePosixPath"]], "purewindowspath (pathlib \u4e2d\u7684\u985e\u5225)": [[296, "pathlib.PureWindowsPath"]], "windowspath (pathlib \u4e2d\u7684\u985e\u5225)": [[296, "pathlib.WindowsPath"]], "absolute() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.absolute"]], "anchor (pathlib.purepath \u7684\u5c6c\u6027)": [[296, "pathlib.PurePath.anchor"]], "as_posix() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.as_posix"]], "as_uri() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.as_uri"]], "chmod() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.chmod"]], "cwd() (pathlib.path \u7684\u985e\u5225\u65b9\u6cd5)": [[296, "pathlib.Path.cwd"]], "drive (pathlib.purepath \u7684\u5c6c\u6027)": [[296, "pathlib.PurePath.drive"]], "exists() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.exists"]], "expanduser() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.expanduser"]], "glob() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.glob"]], "group() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.group"]], "hardlink_to() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.hardlink_to"]], "home() (pathlib.path \u7684\u985e\u5225\u65b9\u6cd5)": [[296, "pathlib.Path.home"]], "is_absolute() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.is_absolute"]], "is_block_device() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.is_block_device"]], "is_char_device() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.is_char_device"]], "is_dir() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.is_dir"]], "is_fifo() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.is_fifo"]], "is_file() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.is_file"]], "is_junction() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.is_junction"]], "is_mount() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.is_mount"]], "is_relative_to() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.is_relative_to"]], "is_reserved() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.is_reserved"]], "is_socket() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.is_socket"]], "is_symlink() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.is_symlink"]], "iterdir() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.iterdir"]], "joinpath() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.joinpath"]], "lchmod() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.lchmod"]], "lstat() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.lstat"]], "match() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.match"]], "mkdir() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.mkdir"]], "name (pathlib.purepath \u7684\u5c6c\u6027)": [[296, "pathlib.PurePath.name"]], "open() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.open"]], "owner() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.owner"]], "parent (pathlib.purepath \u7684\u5c6c\u6027)": [[296, "pathlib.PurePath.parent"]], "parents (pathlib.purepath \u7684\u5c6c\u6027)": [[296, "pathlib.PurePath.parents"]], "parts (pathlib.purepath \u7684\u5c6c\u6027)": [[296, "pathlib.PurePath.parts"]], "pathlib": [[296, "module-pathlib"]], "read_bytes() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.read_bytes"]], "read_text() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.read_text"]], "readlink() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.readlink"]], "relative_to() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.relative_to"]], "rename() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.rename"]], "replace() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.replace"]], "resolve() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.resolve"]], "rglob() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.rglob"]], "rmdir() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.rmdir"]], "root (pathlib.purepath \u7684\u5c6c\u6027)": [[296, "pathlib.PurePath.root"]], "samefile() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.samefile"]], "stat() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.stat"]], "stem (pathlib.purepath \u7684\u5c6c\u6027)": [[296, "pathlib.PurePath.stem"]], "suffix (pathlib.purepath \u7684\u5c6c\u6027)": [[296, "pathlib.PurePath.suffix"]], "suffixes (pathlib.purepath \u7684\u5c6c\u6027)": [[296, "pathlib.PurePath.suffixes"]], "symlink_to() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.symlink_to"]], "touch() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.touch"]], "unlink() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.unlink"]], "walk() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.walk"]], "with_name() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.with_name"]], "with_segments() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.with_segments"]], "with_stem() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.with_stem"]], "with_suffix() (pathlib.purepath \u7684\u65b9\u6cd5)": [[296, "pathlib.PurePath.with_suffix"]], "write_bytes() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.write_bytes"]], "write_text() (pathlib.path \u7684\u65b9\u6cd5)": [[296, "pathlib.Path.write_text"]], "! (pdb command)": [[297, "pdbcommand-0"]], ".pdbrc": [[297, "index-2"]], "pdb (pdb \u4e2d\u7684\u985e\u5225)": [[297, "pdb.Pdb"]], "pdb\uff08pdb \u4e2d\u7684\u985e\u5225\uff09": [[297, "index-1"]], "alias (pdb command)": [[297, "pdbcommand-alias"]], "args (pdb command)": [[297, "pdbcommand-args"]], "break (pdb command)": [[297, "pdbcommand-break"]], "clear (pdb command)": [[297, "pdbcommand-clear"]], "commands (pdb command)": [[297, "pdbcommand-commands"]], "condition (pdb command)": [[297, "pdbcommand-condition"]], "continue (pdb command)": [[297, "pdbcommand-continue"]], "debug (pdb command)": [[297, "pdbcommand-debug"]], "disable (pdb command)": [[297, "pdbcommand-disable"]], "display (pdb command)": [[297, "pdbcommand-display"]], "down (pdb command)": [[297, "pdbcommand-down"]], "enable (pdb command)": [[297, "pdbcommand-enable"]], "help (pdb command)": [[297, "pdbcommand-help"]], "ignore (pdb command)": [[297, "pdbcommand-ignore"]], "interact (pdb command)": [[297, "pdbcommand-interact"]], "jump (pdb command)": [[297, "pdbcommand-jump"]], "list (pdb command)": [[297, "pdbcommand-list"]], "ll (pdb command)": [[297, "pdbcommand-ll"]], "next (pdb command)": [[297, "pdbcommand-next"]], "p (pdb command)": [[297, "pdbcommand-p"]], "pdb": [[297, "module-pdb"]], "pm() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[297, "pdb.pm"]], "post_mortem() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[297, "pdb.post_mortem"]], "pp (pdb command)": [[297, "pdbcommand-pp"]], "quit (pdb command)": [[297, "pdbcommand-quit"]], "restart (pdb command)": [[297, "pdbcommand-restart"]], "return (pdb command)": [[297, "pdbcommand-return"]], "retval (pdb command)": [[297, "pdbcommand-retval"]], "run (pdb command)": [[297, "pdbcommand-run"]], "run() (pdb.pdb \u7684\u65b9\u6cd5)": [[297, "pdb.Pdb.run"]], "run() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[297, "pdb.run"]], "runcall() (pdb.pdb \u7684\u65b9\u6cd5)": [[297, "pdb.Pdb.runcall"]], "runcall() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[297, "pdb.runcall"]], "runeval() (pdb.pdb \u7684\u65b9\u6cd5)": [[297, "pdb.Pdb.runeval"]], "runeval() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[297, "pdb.runeval"]], "set_trace() (pdb.pdb \u7684\u65b9\u6cd5)": [[297, "pdb.Pdb.set_trace"]], "set_trace() (\u65bc pdb \u6a21\u7d44\u4e2d)": [[297, "pdb.set_trace"]], "source (pdb command)": [[297, "pdbcommand-source"]], "step (pdb command)": [[297, "pdbcommand-step"]], "tbreak (pdb command)": [[297, "pdbcommand-tbreak"]], "unalias (pdb command)": [[297, "pdbcommand-unalias"]], "undisplay (pdb command)": [[297, "pdbcommand-undisplay"]], "until (pdb command)": [[297, "pdbcommand-until"]], "up (pdb command)": [[297, "pdbcommand-up"]], "whatis (pdb command)": [[297, "pdbcommand-whatis"]], "where (pdb command)": [[297, "pdbcommand-where"]], "default_protocol (\u65bc pickle \u6a21\u7d44\u4e2d)": [[299, "pickle.DEFAULT_PROTOCOL"]], "external data representation\uff08\u5916\u90e8\u8cc7\u6599\u8868\u793a\u6cd5\uff09": [[299, "index-1"]], "highest_protocol (\u65bc pickle \u6a21\u7d44\u4e2d)": [[299, "pickle.HIGHEST_PROTOCOL"]], "pep 307": [[299, "index-2"], [465, "index-21"], [465, "index-22"], [465, "index-23"]], "pep 3154": [[299, "index-3"], [477, "index-12"], [477, "index-39"], [483, "index-222"]], "pep 574": [[299, "index-4"], [299, "index-8"], [481, "index-38"]], "picklebuffer (pickle \u4e2d\u7684\u985e\u5225)": [[299, "pickle.PickleBuffer"]], "pickleerror": [[299, "pickle.PickleError"]], "pickler (pickle \u4e2d\u7684\u985e\u5225)": [[299, "pickle.Pickler"]], "picklingerror": [[299, "pickle.PicklingError"]], "unpickler (pickle \u4e2d\u7684\u985e\u5225)": [[299, "pickle.Unpickler"]], "unpicklingerror": [[299, "pickle.UnpicklingError"]], "__getnewargs__() (object \u7684\u65b9\u6cd5)": [[299, "object.__getnewargs__"]], "__getnewargs_ex__() (object \u7684\u65b9\u6cd5)": [[299, "object.__getnewargs_ex__"]], "__getstate__() (object \u7684\u65b9\u6cd5)": [[299, "object.__getstate__"]], "__getstate__()\uff08copy \u5354\u5b9a\uff09": [[299, "index-7"]], "__reduce__() (object \u7684\u65b9\u6cd5)": [[299, "object.__reduce__"]], "__reduce_ex__() (object \u7684\u65b9\u6cd5)": [[299, "object.__reduce_ex__"]], "__setstate__() (object \u7684\u65b9\u6cd5)": [[299, "object.__setstate__"]], "__setstate__()\uff08copy \u5354\u5b9a\uff09": [[299, "index-7"]], "dispatch_table (pickle.pickler \u7684\u5c6c\u6027)": [[299, "pickle.Pickler.dispatch_table"]], "dump() (pickle.pickler \u7684\u65b9\u6cd5)": [[299, "pickle.Pickler.dump"]], "dump() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[299, "pickle.dump"]], "dumps() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[299, "pickle.dumps"]], "fast (pickle.pickler \u7684\u5c6c\u6027)": [[299, "pickle.Pickler.fast"]], "find_class() (pickle.unpickler \u7684\u65b9\u6cd5)": [[299, "pickle.Unpickler.find_class"]], "find_class()\uff08pickle \u5354\u5b9a\uff09": [[299, "index-9"]], "flattening\uff08\u6524\u5e73\uff09": [[299, "index-0"]], "load() (pickle.unpickler \u7684\u65b9\u6cd5)": [[299, "pickle.Unpickler.load"]], "load() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[299, "pickle.load"]], "loads() (\u65bc pickle \u6a21\u7d44\u4e2d)": [[299, "pickle.loads"]], "marshalling": [[299, "index-0"]], "objects\uff08\u7269\u4ef6\uff09": [[299, "index-0"], [344, "index-8"]], "persistence\uff08\u6301\u7e8c\u6027\uff09": [[299, "index-0"]], "persistent_id() (pickle.pickler \u7684\u65b9\u6cd5)": [[299, "pickle.Pickler.persistent_id"]], "persistent_id\uff08pickle \u5354\u5b9a\uff09": [[299, "index-6"]], "persistent_load() (pickle.unpickler \u7684\u65b9\u6cd5)": [[299, "pickle.Unpickler.persistent_load"]], "persistent_load\uff08pickle \u5354\u5b9a\uff09": [[299, "index-6"]], "persistent\uff08\u6301\u7e8c\uff09": [[299, "index-0"]], "pickling": [[299, "index-0"]], "raw() (pickle.picklebuffer \u7684\u65b9\u6cd5)": [[299, "pickle.PickleBuffer.raw"]], "reducer_override() (pickle.pickler \u7684\u65b9\u6cd5)": [[299, "pickle.Pickler.reducer_override"]], "release() (pickle.picklebuffer \u7684\u65b9\u6cd5)": [[299, "pickle.PickleBuffer.release"]], "serializing\uff08\u5e8f\u5217\u5316\uff09": [[299, "index-0"]], "--annotate": [[300, "cmdoption-pickletools-a"]], "--indentlevel": [[300, "cmdoption-pickletools-l"]], "--memo": [[300, "cmdoption-pickletools-m"]], "--output": [[300, "cmdoption-pickletools-o"], [421, "cmdoption-zipapp-o"]], "--preamble": [[300, "cmdoption-pickletools-p"]], "dis() (\u65bc pickletools \u6a21\u7d44\u4e2d)": [[300, "pickletools.dis"]], "genops() (\u65bc pickletools \u6a21\u7d44\u4e2d)": [[300, "pickletools.genops"]], "optimize() (\u65bc pickletools \u6a21\u7d44\u4e2d)": [[300, "pickletools.optimize"]], "pickletools": [[300, "module-pickletools"]], "pickletools \u547d\u4ee4\u5217\u9078\u9805": [[300, "cmdoption-pickletools-a"], [300, "cmdoption-pickletools-l"], [300, "cmdoption-pickletools-m"], [300, "cmdoption-pickletools-o"], [300, "cmdoption-pickletools-p"]], "pep 594#pipes": [[301, "index-2"]], "template (pipes \u4e2d\u7684\u985e\u5225)": [[301, "pipes.Template"]], "append() (pipes.template \u7684\u65b9\u6cd5)": [[301, "pipes.Template.append"]], "clone() (pipes.template \u7684\u65b9\u6cd5)": [[301, "pipes.Template.clone"]], "copy() (pipes.template \u7684\u65b9\u6cd5)": [[301, "pipes.Template.copy"]], "debug() (pipes.template \u7684\u65b9\u6cd5)": [[301, "pipes.Template.debug"]], "open() (pipes.template \u7684\u65b9\u6cd5)": [[301, "pipes.Template.open"]], "pipes": [[301, "module-pipes"]], "prepend() (pipes.template \u7684\u65b9\u6cd5)": [[301, "pipes.Template.prepend"]], "reset() (pipes.template \u7684\u65b9\u6cd5)": [[301, "pipes.Template.reset"]], "moduleinfo (pkgutil \u4e2d\u7684\u985e\u5225)": [[302, "pkgutil.ModuleInfo"]], "extend_path() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[302, "pkgutil.extend_path"]], "find_loader() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[302, "pkgutil.find_loader"]], "get_data() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[302, "pkgutil.get_data"]], "get_importer() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[302, "pkgutil.get_importer"]], "get_loader() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[302, "pkgutil.get_loader"]], "iter_importers() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[302, "pkgutil.iter_importers"]], "iter_modules() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[302, "pkgutil.iter_modules"]], "pkgutil": [[302, "module-pkgutil"]], "resolve_name() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[302, "pkgutil.resolve_name"]], "walk_packages() (\u65bc pkgutil \u6a21\u7d44\u4e2d)": [[302, "pkgutil.walk_packages"]], "architecture() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.architecture"]], "freedesktop_os_release() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.freedesktop_os_release"]], "java_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.java_ver"]], "libc_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.libc_ver"]], "mac_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.mac_ver"]], "machine() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.machine"]], "node() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.node"]], "platform": [[303, "module-platform"]], "platform() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.platform"]], "processor() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.processor"]], "python_branch() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.python_branch"]], "python_build() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.python_build"]], "python_compiler() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.python_compiler"]], "python_implementation() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.python_implementation"]], "python_revision() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.python_revision"]], "python_version() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.python_version"]], "python_version_tuple() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.python_version_tuple"]], "release() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.release"]], "system() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.system"]], "system_alias() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.system_alias"]], "uname() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.uname"]], "version() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.version"]], "win32_edition() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.win32_edition"]], "win32_is_iot() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.win32_is_iot"]], "win32_ver() (\u65bc platform \u6a21\u7d44\u4e2d)": [[303, "platform.win32_ver"]], "fmt_binary (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[304, "plistlib.FMT_BINARY"]], "fmt_xml (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[304, "plistlib.FMT_XML"]], "uid (plistlib \u4e2d\u7684\u985e\u5225)": [[304, "plistlib.UID"]], "dump() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[304, "plistlib.dump"]], "dumps() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[304, "plistlib.dumps"]], "load() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[304, "plistlib.load"]], "loads() (\u65bc plistlib \u6a21\u7d44\u4e2d)": [[304, "plistlib.loads"]], "plist": [[304, "index-0"]], "plistlib": [[304, "module-plistlib"]], "property list\uff08\u5c6c\u6027\u6e05\u55ae\uff09": [[304, "index-0"]], "pop3": [[305, "index-0"]], "pop3 (poplib \u4e2d\u7684\u985e\u5225)": [[305, "poplib.POP3"]], "pop3_ssl (poplib \u4e2d\u7684\u985e\u5225)": [[305, "poplib.POP3_SSL"]], "rfc 1939": [[305, "index-1"], [305, "index-2"]], "rfc 2449": [[305, "index-4"]], "rfc 2595": [[305, "index-3"], [305, "index-6"]], "rfc 6856": [[305, "index-5"], [478, "index-36"]], "apop() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.apop"]], "capa() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.capa"]], "dele() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.dele"]], "getwelcome() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.getwelcome"]], "list() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.list"]], "noop() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.noop"]], "pass_() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.pass_"]], "poplib": [[305, "module-poplib"]], "quit() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.quit"]], "retr() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.retr"]], "rpop() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.rpop"]], "rset() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.rset"]], "set_debuglevel() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.set_debuglevel"]], "stat() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.stat"]], "stls() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.stls"]], "top() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.top"]], "uidl() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.uidl"]], "user() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.user"]], "utf8() (poplib.pop3 \u7684\u65b9\u6cd5)": [[305, "poplib.POP3.utf8"]], "environ (\u65bc posix \u6a21\u7d44\u4e2d)": [[306, "posix.environ"]], "large files\uff08\u5927\u578b\u6a94\u6848\uff09": [[306, "index-1"]], "prettyprinter (pprint \u4e2d\u7684\u985e\u5225)": [[307, "pprint.PrettyPrinter"]], "eval": [[307, "index-0"], [307, "index-2"], [344, "index-64"], [436, "index-44"], [437, "index-6"]], "format() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[307, "pprint.PrettyPrinter.format"]], "isreadable() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[307, "pprint.PrettyPrinter.isreadable"]], "isreadable() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[307, "pprint.isreadable"]], "isrecursive() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[307, "pprint.PrettyPrinter.isrecursive"]], "isrecursive() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[307, "pprint.isrecursive"]], "pformat() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[307, "pprint.PrettyPrinter.pformat"]], "pformat() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[307, "pprint.pformat"]], "placeholder\uff08\u4f54\u4f4d\u7b26\u865f\uff09": [[307, "index-1"], [321, "index-0"], [364, "index-0"]], "pp() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[307, "pprint.pp"]], "pprint": [[307, "module-pprint"]], "pprint() (pprint.prettyprinter \u7684\u65b9\u6cd5)": [[307, "pprint.PrettyPrinter.pprint"]], "pprint() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[307, "pprint.pprint"]], "saferepr() (\u65bc pprint \u6a21\u7d44\u4e2d)": [[307, "pprint.saferepr"]], "profile (profile \u4e2d\u7684\u985e\u5225)": [[308, "profile.Profile"]], "stats (pstats \u4e2d\u7684\u985e\u5225)": [[308, "pstats.Stats"]], "add() (pstats.stats \u7684\u65b9\u6cd5)": [[308, "pstats.Stats.add"]], "cprofile": [[308, "module-cProfile"]], "create_stats() (profile.profile \u7684\u65b9\u6cd5)": [[308, "profile.Profile.create_stats"]], "deterministic profiling": [[308, "index-0"]], "disable() (profile.profile \u7684\u65b9\u6cd5)": [[308, "profile.Profile.disable"]], "dump_stats() (profile.profile \u7684\u65b9\u6cd5)": [[308, "profile.Profile.dump_stats"]], "dump_stats() (pstats.stats \u7684\u65b9\u6cd5)": [[308, "pstats.Stats.dump_stats"]], "enable() (profile.profile \u7684\u65b9\u6cd5)": [[308, "profile.Profile.enable"]], "get_stats_profile() (pstats.stats \u7684\u65b9\u6cd5)": [[308, "pstats.Stats.get_stats_profile"]], "print_callees() (pstats.stats \u7684\u65b9\u6cd5)": [[308, "pstats.Stats.print_callees"]], "print_callers() (pstats.stats \u7684\u65b9\u6cd5)": [[308, "pstats.Stats.print_callers"]], "print_stats() (profile.profile \u7684\u65b9\u6cd5)": [[308, "profile.Profile.print_stats"]], "print_stats() (pstats.stats \u7684\u65b9\u6cd5)": [[308, "pstats.Stats.print_stats"]], "profile": [[308, "module-profile"]], "profiling, deterministic": [[308, "index-0"]], "pstats": [[308, "module-pstats"]], "reverse_order() (pstats.stats \u7684\u65b9\u6cd5)": [[308, "pstats.Stats.reverse_order"]], "run() (profile.profile \u7684\u65b9\u6cd5)": [[308, "profile.Profile.run"]], "run() (\u65bc profile \u6a21\u7d44\u4e2d)": [[308, "profile.run"]], "runcall() (profile.profile \u7684\u65b9\u6cd5)": [[308, "profile.Profile.runcall"]], "runctx() (profile.profile \u7684\u65b9\u6cd5)": [[308, "profile.Profile.runctx"]], "runctx() (\u65bc profile \u6a21\u7d44\u4e2d)": [[308, "profile.runctx"]], "sort_stats() (pstats.stats \u7684\u65b9\u6cd5)": [[308, "pstats.Stats.sort_stats"]], "strip_dirs() (pstats.stats \u7684\u65b9\u6cd5)": [[308, "pstats.Stats.strip_dirs"]], "fork() (\u65bc pty \u6a21\u7d44\u4e2d)": [[309, "pty.fork"]], "openpty() (\u65bc pty \u6a21\u7d44\u4e2d)": [[309, "pty.openpty"]], "spawn() (\u65bc pty \u6a21\u7d44\u4e2d)": [[309, "pty.spawn"]], "getpwall() (\u65bc pwd \u6a21\u7d44\u4e2d)": [[310, "pwd.getpwall"]], "getpwnam() (\u65bc pwd \u6a21\u7d44\u4e2d)": [[310, "pwd.getpwnam"]], "getpwuid() (\u65bc pwd \u6a21\u7d44\u4e2d)": [[310, "pwd.getpwuid"]], "-": [[311, "cmdoption-python-m-py_compile"]], "--quiet": [[311, "cmdoption-python-m-py_compile-q"]], "<file>": [[311, "cmdoption-python-m-py_compile-arg-file"]], "checked_hash (py_compile.pycinvalidationmode \u7684\u5c6c\u6027)": [[311, "py_compile.PycInvalidationMode.CHECKED_HASH"]], "pycompileerror": [[311, "py_compile.PyCompileError"]], "pycinvalidationmode (py_compile \u4e2d\u7684\u985e\u5225)": [[311, "py_compile.PycInvalidationMode"]], "timestamp (py_compile.pycinvalidationmode \u7684\u5c6c\u6027)": [[311, "py_compile.PycInvalidationMode.TIMESTAMP"]], "unchecked_hash (py_compile.pycinvalidationmode \u7684\u5c6c\u6027)": [[311, "py_compile.PycInvalidationMode.UNCHECKED_HASH"]], "byte-code\uff08\u4f4d\u5143\u7d44\u78bc\uff09": [[311, "index-0"]], "compile() (\u65bc py_compile \u6a21\u7d44\u4e2d)": [[311, "py_compile.compile"]], "py_compile": [[311, "module-py_compile"]], "python--m-py_compile \u547d\u4ee4\u5217\u9078\u9805": [[311, "cmdoption-python-m-py_compile"], [311, "cmdoption-python-m-py_compile-arg-file"], [311, "cmdoption-python-m-py_compile-q"]], "class (pyclbr \u4e2d\u7684\u985e\u5225)": [[312, "pyclbr.Class"]], "function (pyclbr \u4e2d\u7684\u985e\u5225)": [[312, "pyclbr.Function"]], "children (pyclbr.class \u7684\u5c6c\u6027)": [[312, "pyclbr.Class.children"]], "children (pyclbr.function \u7684\u5c6c\u6027)": [[312, "pyclbr.Function.children"]], "file (pyclbr.class \u7684\u5c6c\u6027)": [[312, "pyclbr.Class.file"]], "file (pyclbr.function \u7684\u5c6c\u6027)": [[312, "pyclbr.Function.file"]], "is_async (pyclbr.function \u7684\u5c6c\u6027)": [[312, "pyclbr.Function.is_async"]], "lineno (pyclbr.class \u7684\u5c6c\u6027)": [[312, "pyclbr.Class.lineno"]], "lineno (pyclbr.function \u7684\u5c6c\u6027)": [[312, "pyclbr.Function.lineno"]], "methods (pyclbr.class \u7684\u5c6c\u6027)": [[312, "pyclbr.Class.methods"]], "module (pyclbr.class \u7684\u5c6c\u6027)": [[312, "pyclbr.Class.module"]], "module (pyclbr.function \u7684\u5c6c\u6027)": [[312, "pyclbr.Function.module"]], "name (pyclbr.class \u7684\u5c6c\u6027)": [[312, "pyclbr.Class.name"]], "name (pyclbr.function \u7684\u5c6c\u6027)": [[312, "pyclbr.Function.name"]], "parent (pyclbr.class \u7684\u5c6c\u6027)": [[312, "pyclbr.Class.parent"]], "parent (pyclbr.function \u7684\u5c6c\u6027)": [[312, "pyclbr.Function.parent"]], "pyclbr": [[312, "module-pyclbr"]], "readmodule() (\u65bc pyclbr \u6a21\u7d44\u4e2d)": [[312, "pyclbr.readmodule"]], "readmodule_ex() (\u65bc pyclbr \u6a21\u7d44\u4e2d)": [[312, "pyclbr.readmodule_ex"]], "super (pyclbr.class \u7684\u5c6c\u6027)": [[312, "pyclbr.Class.super"]], "pager": [[313, "index-1"]], "documentation\uff08\u6587\u4ef6\uff09": [[313, "index-0"]], "generation\uff08\u7522\u751f\uff09": [[313, "index-0"]], "help\uff08\u5e6b\u52a9\uff09": [[313, "index-0"], [451, "index-0"]], "online\uff08\u7dda\u4e0a\uff09": [[313, "index-0"]], "pydoc": [[313, "module-pydoc"]], "attlistdeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.AttlistDeclHandler"]], "characterdatahandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.CharacterDataHandler"]], "commenthandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.CommentHandler"]], "currentbyteindex (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.CurrentByteIndex"]], "currentcolumnnumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.CurrentColumnNumber"]], "currentlinenumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.CurrentLineNumber"]], "defaulthandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.DefaultHandler"]], "defaulthandlerexpand() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.DefaultHandlerExpand"]], "elementdeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.ElementDeclHandler"]], "endcdatasectionhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.EndCdataSectionHandler"]], "enddoctypedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.EndDoctypeDeclHandler"]], "endelementhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.EndElementHandler"]], "endnamespacedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.EndNamespaceDeclHandler"]], "entitydeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.EntityDeclHandler"]], "errorbyteindex (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.ErrorByteIndex"]], "errorcode (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.ErrorCode"]], "errorcolumnnumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.ErrorColumnNumber"]], "errorlinenumber (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.ErrorLineNumber"]], "errorstring() (\u65bc xml.parsers.expat \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.ErrorString"]], "expat": [[314, "index-0"]], "expaterror": [[314, "xml.parsers.expat.ExpatError"]], "externalentityparsercreate() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.ExternalEntityParserCreate"]], "externalentityrefhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.ExternalEntityRefHandler"]], "getbase() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.GetBase"]], "getinputcontext() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.GetInputContext"]], "getreparsedeferralenabled() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.GetReparseDeferralEnabled"]], "notstandalonehandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.NotStandaloneHandler"]], "notationdeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.NotationDeclHandler"]], "parse() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.Parse"]], "parsefile() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.ParseFile"]], "parsercreate() (\u65bc xml.parsers.expat \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.ParserCreate"]], "processinginstructionhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.ProcessingInstructionHandler"]], "setbase() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.SetBase"]], "setparamentityparsing() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.SetParamEntityParsing"]], "setreparsedeferralenabled() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.SetReparseDeferralEnabled"]], "startcdatasectionhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.StartCdataSectionHandler"]], "startdoctypedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.StartDoctypeDeclHandler"]], "startelementhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.StartElementHandler"]], "startnamespacedeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.StartNamespaceDeclHandler"]], "unparsedentitydeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.UnparsedEntityDeclHandler"]], "useforeigndtd() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.UseForeignDTD"]], "xmlparsertype (\u65bc xml.parsers.expat \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.XMLParserType"]], "xml_error_aborted (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_ABORTED"]], "xml_error_amplification_limit_breach (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_AMPLIFICATION_LIMIT_BREACH"]], "xml_error_async_entity (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_ASYNC_ENTITY"]], "xml_error_attribute_external_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_ATTRIBUTE_EXTERNAL_ENTITY_REF"]], "xml_error_bad_char_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_BAD_CHAR_REF"]], "xml_error_binary_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_BINARY_ENTITY_REF"]], "xml_error_cant_change_feature_once_parsing (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_CANT_CHANGE_FEATURE_ONCE_PARSING"]], "xml_error_duplicate_attribute (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_DUPLICATE_ATTRIBUTE"]], "xml_error_entity_declared_in_pe (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_ENTITY_DECLARED_IN_PE"]], "xml_error_external_entity_handling (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_EXTERNAL_ENTITY_HANDLING"]], "xml_error_feature_requires_xml_dtd (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_FEATURE_REQUIRES_XML_DTD"]], "xml_error_finished (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_FINISHED"]], "xml_error_incomplete_pe (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_INCOMPLETE_PE"]], "xml_error_incorrect_encoding (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_INCORRECT_ENCODING"]], "xml_error_invalid_argument (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_INVALID_ARGUMENT"]], "xml_error_invalid_token (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_INVALID_TOKEN"]], "xml_error_junk_after_doc_element (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_JUNK_AFTER_DOC_ELEMENT"]], "xml_error_misplaced_xml_pi (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_MISPLACED_XML_PI"]], "xml_error_not_standalone (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_NOT_STANDALONE"]], "xml_error_not_suspended (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_NOT_SUSPENDED"]], "xml_error_no_buffer (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_NO_BUFFER"]], "xml_error_no_elements (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_NO_ELEMENTS"]], "xml_error_no_memory (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_NO_MEMORY"]], "xml_error_param_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_PARAM_ENTITY_REF"]], "xml_error_partial_char (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_PARTIAL_CHAR"]], "xml_error_publicid (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_PUBLICID"]], "xml_error_recursive_entity_ref (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_RECURSIVE_ENTITY_REF"]], "xml_error_reserved_namespace_uri (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_RESERVED_NAMESPACE_URI"]], "xml_error_reserved_prefix_xml (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_RESERVED_PREFIX_XML"]], "xml_error_reserved_prefix_xmlns (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_RESERVED_PREFIX_XMLNS"]], "xml_error_suspended (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_SUSPENDED"]], "xml_error_suspend_pe (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_SUSPEND_PE"]], "xml_error_syntax (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_SYNTAX"]], "xml_error_tag_mismatch (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_TAG_MISMATCH"]], "xml_error_text_decl (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_TEXT_DECL"]], "xml_error_unbound_prefix (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_UNBOUND_PREFIX"]], "xml_error_unclosed_cdata_section (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_CDATA_SECTION"]], "xml_error_unclosed_token (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_UNCLOSED_TOKEN"]], "xml_error_undeclaring_prefix (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_UNDECLARING_PREFIX"]], "xml_error_undefined_entity (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_UNDEFINED_ENTITY"]], "xml_error_unexpected_state (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_UNEXPECTED_STATE"]], "xml_error_unknown_encoding (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_UNKNOWN_ENCODING"]], "xml_error_xml_decl (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.XML_ERROR_XML_DECL"]], "xmldeclhandler() (xml.parsers.expat.xmlparser \u7684\u65b9\u6cd5)": [[314, "xml.parsers.expat.xmlparser.XmlDeclHandler"]], "buffer_size (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.buffer_size"]], "buffer_text (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.buffer_text"]], "buffer_used (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.buffer_used"]], "code (xml.parsers.expat.expaterror \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.ExpatError.code"]], "codes (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.codes"]], "lineno (xml.parsers.expat.expaterror \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.ExpatError.lineno"]], "messages (\u65bc xml.parsers.expat.errors \u6a21\u7d44\u4e2d)": [[314, "xml.parsers.expat.errors.messages"]], "offset (xml.parsers.expat.expaterror \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.ExpatError.offset"]], "ordered_attributes (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.ordered_attributes"]], "pyexpat": [[314, "index-1"]], "specified_attributes (xml.parsers.expat.xmlparser \u7684\u5c6c\u6027)": [[314, "xml.parsers.expat.xmlparser.specified_attributes"]], "xml.parsers.expat": [[314, "module-xml.parsers.expat"]], "xml.parsers.expat.errors": [[314, "module-xml.parsers.expat.errors"]], "xml.parsers.expat.model": [[314, "module-xml.parsers.expat.model"]], "empty": [[316, "queue.Empty"], [430, "index-15"], [430, "index-9"]], "full": [[316, "queue.Full"]], "lifoqueue (queue \u4e2d\u7684\u985e\u5225)": [[316, "queue.LifoQueue"]], "priorityqueue (queue \u4e2d\u7684\u985e\u5225)": [[316, "queue.PriorityQueue"]], "queue (queue \u4e2d\u7684\u985e\u5225)": [[316, "queue.Queue"]], "simplequeue (queue \u4e2d\u7684\u985e\u5225)": [[316, "queue.SimpleQueue"]], "empty() (queue.queue \u7684\u65b9\u6cd5)": [[316, "queue.Queue.empty"]], "empty() (queue.simplequeue \u7684\u65b9\u6cd5)": [[316, "queue.SimpleQueue.empty"]], "full() (queue.queue \u7684\u65b9\u6cd5)": [[316, "queue.Queue.full"]], "get() (queue.queue \u7684\u65b9\u6cd5)": [[316, "queue.Queue.get"]], "get() (queue.simplequeue \u7684\u65b9\u6cd5)": [[316, "queue.SimpleQueue.get"]], "get_nowait() (queue.queue \u7684\u65b9\u6cd5)": [[316, "queue.Queue.get_nowait"]], "get_nowait() (queue.simplequeue \u7684\u65b9\u6cd5)": [[316, "queue.SimpleQueue.get_nowait"]], "join() (queue.queue \u7684\u65b9\u6cd5)": [[316, "queue.Queue.join"]], "put() (queue.queue \u7684\u65b9\u6cd5)": [[316, "queue.Queue.put"]], "put() (queue.simplequeue \u7684\u65b9\u6cd5)": [[316, "queue.SimpleQueue.put"]], "put_nowait() (queue.queue \u7684\u65b9\u6cd5)": [[316, "queue.Queue.put_nowait"]], "put_nowait() (queue.simplequeue \u7684\u65b9\u6cd5)": [[316, "queue.SimpleQueue.put_nowait"]], "qsize() (queue.queue \u7684\u65b9\u6cd5)": [[316, "queue.Queue.qsize"]], "qsize() (queue.simplequeue \u7684\u65b9\u6cd5)": [[316, "queue.SimpleQueue.qsize"]], "queue": [[316, "module-queue"]], "task_done() (queue.queue \u7684\u65b9\u6cd5)": [[316, "queue.Queue.task_done"]], "decode() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[317, "quopri.decode"]], "decodestring() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[317, "quopri.decodestring"]], "encode() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[317, "quopri.encode"]], "encodestring() (\u65bc quopri \u6a21\u7d44\u4e2d)": [[317, "quopri.encodestring"]], "quopri": [[317, "module-quopri"]], "quoted-printable encoding\uff08\u53ef\u5217\u5370\u5b57\u5143\u7de8\u78bc\uff09": [[317, "index-0"]], "quoted-printable\uff08\u53ef\u5217\u5370\u5b57\u5143\uff09": [[317, "index-0"]], "random (random \u4e2d\u7684\u985e\u5225)": [[318, "random.Random"]], "systemrandom (random \u4e2d\u7684\u985e\u5225)": [[318, "random.SystemRandom"]], "betavariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.betavariate"]], "binomialvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.binomialvariate"]], "choice() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.choice"]], "choices() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.choices"]], "expovariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.expovariate"]], "gammavariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.gammavariate"]], "gauss() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.gauss"]], "getrandbits() (random.random \u7684\u65b9\u6cd5)": [[318, "random.Random.getrandbits"]], "getrandbits() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.getrandbits"]], "getstate() (random.random \u7684\u65b9\u6cd5)": [[318, "random.Random.getstate"]], "getstate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.getstate"]], "lognormvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.lognormvariate"]], "normalvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.normalvariate"]], "paretovariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.paretovariate"]], "randbytes() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.randbytes"]], "randint() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.randint"]], "random": [[318, "module-random"]], "random() (random.random \u7684\u65b9\u6cd5)": [[318, "random.Random.random"]], "random() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.random"]], "randrange() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.randrange"]], "sample() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.sample"]], "seed() (random.random \u7684\u65b9\u6cd5)": [[318, "random.Random.seed"]], "seed() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.seed"]], "setstate() (random.random \u7684\u65b9\u6cd5)": [[318, "random.Random.setstate"]], "setstate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.setstate"]], "shuffle() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.shuffle"]], "triangular() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.triangular"]], "uniform() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.uniform"]], "vonmisesvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.vonmisesvariate"]], "weibullvariate() (\u65bc random \u6a21\u7d44\u4e2d)": [[318, "random.weibullvariate"]], "() \uff08\u5713\u62ec\u865f\uff09": [[319, "index-15"], [344, "index-36"], [344, "index-46"], [427, "index-28"], [427, "index-42"], [430, "index-22"], [430, "index-47"], [430, "index-8"], [436, "index-6"]], "(?": [[319, "index-16"]], "(?!": [[319, "index-22"]], "(?#": [[319, "index-20"]], "(?(": [[319, "index-25"]], "(?:": [[319, "index-17"]], "(?<!": [[319, "index-24"]], "(?<=": [[319, "index-23"]], "(?=": [[319, "index-21"]], "(?p<": [[319, "index-18"]], "(?p=": [[319, "index-19"]], "*+": [[319, "index-7"]], "*?": [[319, "index-6"]], "++": [[319, "index-7"]], "+?": [[319, "index-6"]], "?+": [[319, "index-7"]], "??": [[319, "index-6"]], "a (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.A"]], "ascii (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.ASCII"]], "debug (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.DEBUG"]], "dotall (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.DOTALL"]], "i (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.I"]], "ignorecase (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.IGNORECASE"]], "l (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.L"]], "locale (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.LOCALE"]], "m (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.M"]], "multiline (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.MULTILINE"]], "match (re \u4e2d\u7684\u985e\u5225)": [[319, "re.Match"]], "noflag (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.NOFLAG"]], "pattern (re \u4e2d\u7684\u985e\u5225)": [[319, "re.Pattern"]], "regexflag (re \u4e2d\u7684\u985e\u5225)": [[319, "re.RegexFlag"]], "s (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.S"]], "u (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.U"]], "unicode (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.UNICODE"]], "verbose (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.VERBOSE"]], "x (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.X"]], "\\a": [[319, "index-27"], [319, "index-37"], [435, "index-23"]], "\\b": [[319, "index-29"], [319, "index-28"], [319, "index-37"], [435, "index-23"]], "\\d": [[319, "index-31"], [319, "index-30"]], "\\s": [[319, "index-33"], [319, "index-32"]], "\\w": [[319, "index-35"], [319, "index-34"]], "\\z": [[319, "index-36"]], "\\\\": [[319, "index-37"], [435, "index-23"]], "\\f": [[319, "index-37"], [435, "index-23"]], "\\g": [[319, "index-39"]], "\\r": [[319, "index-37"], [435, "index-23"]], "\\t": [[319, "index-37"], [435, "index-23"]], "\\v": [[319, "index-37"], [435, "index-23"]], "__getitem__() (re.match \u7684\u65b9\u6cd5)": [[319, "re.Match.__getitem__"]], "colno (re.error \u7684\u5c6c\u6027)": [[319, "re.error.colno"]], "compile() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.compile"]], "end() (re.match \u7684\u65b9\u6cd5)": [[319, "re.Match.end"]], "endpos (re.match \u7684\u5c6c\u6027)": [[319, "re.Match.endpos"]], "escape() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.escape"]], "expand() (re.match \u7684\u65b9\u6cd5)": [[319, "re.Match.expand"]], "findall() (re.pattern \u7684\u65b9\u6cd5)": [[319, "re.Pattern.findall"]], "findall() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.findall"]], "finditer() (re.pattern \u7684\u65b9\u6cd5)": [[319, "re.Pattern.finditer"]], "finditer() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.finditer"]], "flags (re.pattern \u7684\u5c6c\u6027)": [[319, "re.Pattern.flags"]], "fullmatch() (re.pattern \u7684\u65b9\u6cd5)": [[319, "re.Pattern.fullmatch"]], "fullmatch() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.fullmatch"]], "group() (re.match \u7684\u65b9\u6cd5)": [[319, "re.Match.group"]], "groupdict() (re.match \u7684\u65b9\u6cd5)": [[319, "re.Match.groupdict"]], "groupindex (re.pattern \u7684\u5c6c\u6027)": [[319, "re.Pattern.groupindex"]], "groups (re.pattern \u7684\u5c6c\u6027)": [[319, "re.Pattern.groups"]], "groups() (re.match \u7684\u65b9\u6cd5)": [[319, "re.Match.groups"]], "lastgroup (re.match \u7684\u5c6c\u6027)": [[319, "re.Match.lastgroup"]], "lastindex (re.match \u7684\u5c6c\u6027)": [[319, "re.Match.lastindex"]], "lineno (re.error \u7684\u5c6c\u6027)": [[319, "re.error.lineno"]], "match() (re.pattern \u7684\u65b9\u6cd5)": [[319, "re.Pattern.match"]], "match() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.match"]], "msg (re.error \u7684\u5c6c\u6027)": [[319, "re.error.msg"]], "pattern (re.pattern \u7684\u5c6c\u6027)": [[319, "re.Pattern.pattern"]], "pattern (re.error \u7684\u5c6c\u6027)": [[319, "re.error.pattern"]], "pos (re.match \u7684\u5c6c\u6027)": [[319, "re.Match.pos"]], "pos (re.error \u7684\u5c6c\u6027)": [[319, "re.error.pos"]], "purge() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.purge"]], "re (re.match \u7684\u5c6c\u6027)": [[319, "re.Match.re"]], "scanf\uff08c \u51fd\u5f0f\uff09": [[319, "index-40"]], "search() (re.pattern \u7684\u65b9\u6cd5)": [[319, "re.Pattern.search"]], "search() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.search"]], "span() (re.match \u7684\u65b9\u6cd5)": [[319, "re.Match.span"]], "split() (re.pattern \u7684\u65b9\u6cd5)": [[319, "re.Pattern.split"]], "split() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.split"]], "start() (re.match \u7684\u65b9\u6cd5)": [[319, "re.Match.start"]], "string (re.match \u7684\u5c6c\u6027)": [[319, "re.Match.string"]], "sub() (re.pattern \u7684\u65b9\u6cd5)": [[319, "re.Pattern.sub"]], "sub() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.sub"]], "subn() (re.pattern \u7684\u65b9\u6cd5)": [[319, "re.Pattern.subn"]], "subn() (\u65bc re \u6a21\u7d44\u4e2d)": [[319, "re.subn"]], "{} \uff08\u82b1\u62ec\u865f\uff09": [[319, "index-8"], [345, "index-2"], [430, "index-16"], [430, "index-17"], [435, "index-25"]], "| \uff08\u5782\u76f4\u7dda\uff09": [[319, "index-14"], [344, "index-16"], [430, "index-76"]], "\u65bc\u6b63\u898f\u8868\u793a\u5f0f\u4e2d": [[319, "index-0"], [319, "index-1"], [319, "index-10"], [319, "index-11"], [319, "index-12"], [319, "index-13"], [319, "index-14"], [319, "index-15"], [319, "index-16"], [319, "index-17"], [319, "index-18"], [319, "index-19"], [319, "index-2"], [319, "index-20"], [319, "index-21"], [319, "index-22"], [319, "index-23"], [319, "index-24"], [319, "index-25"], [319, "index-26"], [319, "index-27"], [319, "index-28"], [319, "index-29"], [319, "index-3"], [319, "index-30"], [319, "index-31"], [319, "index-32"], [319, "index-33"], [319, "index-34"], [319, "index-35"], [319, "index-36"], [319, "index-37"], [319, "index-38"], [319, "index-39"], [319, "index-4"], [319, "index-5"], [319, "index-6"], [319, "index-7"], [319, "index-8"], [319, "index-9"]], "add_history() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.add_history"]], "append_history_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.append_history_file"]], "clear_history() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.clear_history"]], "get_begidx() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.get_begidx"]], "get_completer() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.get_completer"]], "get_completer_delims() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.get_completer_delims"]], "get_completion_type() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.get_completion_type"]], "get_current_history_length() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.get_current_history_length"]], "get_endidx() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.get_endidx"]], "get_history_item() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.get_history_item"]], "get_history_length() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.get_history_length"]], "get_line_buffer() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.get_line_buffer"]], "insert_text() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.insert_text"]], "parse_and_bind() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.parse_and_bind"]], "read_history_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.read_history_file"]], "read_init_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.read_init_file"]], "readline": [[320, "module-readline"]], "redisplay() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.redisplay"]], "remove_history_item() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.remove_history_item"]], "replace_history_item() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.replace_history_item"]], "set_auto_history() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.set_auto_history"]], "set_completer() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.set_completer"]], "set_completer_delims() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.set_completer_delims"]], "set_completion_display_matches_hook() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.set_completion_display_matches_hook"]], "set_history_length() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.set_history_length"]], "set_pre_input_hook() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.set_pre_input_hook"]], "set_startup_hook() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.set_startup_hook"]], "write_history_file() (\u65bc readline \u6a21\u7d44\u4e2d)": [[320, "readline.write_history_file"]], "repr (reprlib \u4e2d\u7684\u985e\u5225)": [[321, "reprlib.Repr"]], "arepr (\u65bc reprlib \u6a21\u7d44\u4e2d)": [[321, "reprlib.aRepr"]], "fillvalue (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.fillvalue"]], "indent (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.indent"]], "maxarray (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxarray"]], "maxdeque (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxdeque"]], "maxdict (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxdict"]], "maxfrozenset (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxfrozenset"]], "maxlevel (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxlevel"]], "maxlist (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxlist"]], "maxlong (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxlong"]], "maxother (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxother"]], "maxset (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxset"]], "maxstring (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxstring"]], "maxtuple (reprlib.repr \u7684\u5c6c\u6027)": [[321, "reprlib.Repr.maxtuple"]], "recursive_repr() (\u65bc reprlib \u6a21\u7d44\u4e2d)": [[321, "reprlib.recursive_repr"]], "repr() (reprlib.repr \u7684\u65b9\u6cd5)": [[321, "reprlib.Repr.repr"]], "repr() (\u65bc reprlib \u6a21\u7d44\u4e2d)": [[321, "reprlib.repr"]], "repr1() (reprlib.repr \u7684\u65b9\u6cd5)": [[321, "reprlib.Repr.repr1"]], "reprlib": [[321, "module-reprlib"]], "rlimit_as (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_AS"]], "rlimit_core (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_CORE"]], "rlimit_cpu (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_CPU"]], "rlimit_data (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_DATA"]], "rlimit_fsize (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_FSIZE"]], "rlimit_kqueues (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_KQUEUES"]], "rlimit_memlock (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_MEMLOCK"]], "rlimit_msgqueue (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_MSGQUEUE"]], "rlimit_nice (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_NICE"]], "rlimit_nofile (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_NOFILE"]], "rlimit_nproc (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_NPROC"]], "rlimit_npts (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_NPTS"]], "rlimit_ofile (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_OFILE"]], "rlimit_rss (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_RSS"]], "rlimit_rtprio (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_RTPRIO"]], "rlimit_rttime (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_RTTIME"]], "rlimit_sbsize (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_SBSIZE"]], "rlimit_sigpending (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_SIGPENDING"]], "rlimit_stack (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_STACK"]], "rlimit_swap (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_SWAP"]], "rlimit_vmem (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIMIT_VMEM"]], "rlim_infinity (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RLIM_INFINITY"]], "rusage_both (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RUSAGE_BOTH"]], "rusage_children (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RUSAGE_CHILDREN"]], "rusage_self (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RUSAGE_SELF"]], "rusage_thread (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.RUSAGE_THREAD"]], "getpagesize() (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.getpagesize"]], "getrlimit() (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.getrlimit"]], "getrusage() (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.getrusage"]], "prlimit() (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.prlimit"]], "resource": [[322, "module-resource"]], "setrlimit() (\u65bc resource \u6a21\u7d44\u4e2d)": [[322, "resource.setrlimit"]], "completer (rlcompleter \u4e2d\u7684\u985e\u5225)": [[323, "rlcompleter.Completer"]], "complete() (rlcompleter.completer \u7684\u65b9\u6cd5)": [[323, "rlcompleter.Completer.complete"]], "rlcompleter": [[323, "module-rlcompleter"]], "pep 338": [[324, "index-6"], [432, "index-26"], [455, "index-0"], [467, "index-7"]], "run_module() (\u65bc runpy \u6a21\u7d44\u4e2d)": [[324, "runpy.run_module"]], "run_path() (\u65bc runpy \u6a21\u7d44\u4e2d)": [[324, "runpy.run_path"]], "runpy": [[324, "module-runpy"]], "cancel() (sched.scheduler \u7684\u65b9\u6cd5)": [[325, "sched.scheduler.cancel"]], "empty() (sched.scheduler \u7684\u65b9\u6cd5)": [[325, "sched.scheduler.empty"]], "enter() (sched.scheduler \u7684\u65b9\u6cd5)": [[325, "sched.scheduler.enter"]], "enterabs() (sched.scheduler \u7684\u65b9\u6cd5)": [[325, "sched.scheduler.enterabs"]], "event scheduling\uff08\u4e8b\u4ef6\u6392\u7a0b\uff09": [[325, "index-0"]], "queue (sched.scheduler \u7684\u5c6c\u6027)": [[325, "sched.scheduler.queue"]], "run() (sched.scheduler \u7684\u65b9\u6cd5)": [[325, "sched.scheduler.run"]], "sched": [[325, "module-sched"]], "scheduler (sched \u4e2d\u7684\u985e\u5225)": [[325, "sched.scheduler"]], "pep 506": [[326, "index-0"], [479, "index-28"], [483, "index-288"]], "systemrandom (secrets \u4e2d\u7684\u985e\u5225)": [[326, "secrets.SystemRandom"]], "choice() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[326, "secrets.choice"]], "compare_digest() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[326, "secrets.compare_digest"]], "randbelow() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[326, "secrets.randbelow"]], "randbits() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[326, "secrets.randbits"]], "secrets": [[326, "module-secrets"]], "token_bytes() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[326, "secrets.token_bytes"]], "token_hex() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[326, "secrets.token_hex"]], "token_urlsafe() (\u65bc secrets \u6a21\u7d44\u4e2d)": [[326, "secrets.token_urlsafe"]], "security considerations\uff08\u5b89\u5168\u6027\u6ce8\u610f\u4e8b\u9805\uff09": [[327, "index-0"]], "pipe_buf (\u65bc select \u6a21\u7d44\u4e2d)": [[328, "select.PIPE_BUF"]], "winsock": [[328, "index-2"]], "close() (select.devpoll \u7684\u65b9\u6cd5)": [[328, "select.devpoll.close"]], "close() (select.epoll \u7684\u65b9\u6cd5)": [[328, "select.epoll.close"]], "close() (select.kqueue \u7684\u65b9\u6cd5)": [[328, "select.kqueue.close"]], "closed (select.devpoll \u7684\u5c6c\u6027)": [[328, "select.devpoll.closed"]], "closed (select.epoll \u7684\u5c6c\u6027)": [[328, "select.epoll.closed"]], "closed (select.kqueue \u7684\u5c6c\u6027)": [[328, "select.kqueue.closed"]], "control() (select.kqueue \u7684\u65b9\u6cd5)": [[328, "select.kqueue.control"]], "data (select.kevent \u7684\u5c6c\u6027)": [[328, "select.kevent.data"]], "devpoll() (\u65bc select \u6a21\u7d44\u4e2d)": [[328, "select.devpoll"]], "epoll() (\u65bc select \u6a21\u7d44\u4e2d)": [[328, "select.epoll"]], "fflags (select.kevent \u7684\u5c6c\u6027)": [[328, "select.kevent.fflags"]], "fileno() (select.devpoll \u7684\u65b9\u6cd5)": [[328, "select.devpoll.fileno"]], "fileno() (select.epoll \u7684\u65b9\u6cd5)": [[328, "select.epoll.fileno"]], "fileno() (select.kqueue \u7684\u65b9\u6cd5)": [[328, "select.kqueue.fileno"]], "filter (select.kevent \u7684\u5c6c\u6027)": [[328, "select.kevent.filter"]], "flags (select.kevent \u7684\u5c6c\u6027)": [[328, "select.kevent.flags"]], "fromfd() (select.epoll \u7684\u65b9\u6cd5)": [[328, "select.epoll.fromfd"]], "fromfd() (select.kqueue \u7684\u65b9\u6cd5)": [[328, "select.kqueue.fromfd"]], "ident (select.kevent \u7684\u5c6c\u6027)": [[328, "select.kevent.ident"]], "kevent() (\u65bc select \u6a21\u7d44\u4e2d)": [[328, "select.kevent"]], "kqueue() (\u65bc select \u6a21\u7d44\u4e2d)": [[328, "select.kqueue"]], "modify() (select.devpoll \u7684\u65b9\u6cd5)": [[328, "select.devpoll.modify"]], "modify() (select.epoll \u7684\u65b9\u6cd5)": [[328, "select.epoll.modify"]], "modify() (select.poll \u7684\u65b9\u6cd5)": [[328, "select.poll.modify"]], "poll() (select.devpoll \u7684\u65b9\u6cd5)": [[328, "select.devpoll.poll"]], "poll() (select.epoll \u7684\u65b9\u6cd5)": [[328, "select.epoll.poll"]], "poll() (select.poll \u7684\u65b9\u6cd5)": [[328, "select.poll.poll"]], "poll() (\u65bc select \u6a21\u7d44\u4e2d)": [[328, "select.poll"]], "popen() (\u65bc os \u6a21\u7d44)": [[328, "index-1"]], "register() (select.devpoll \u7684\u65b9\u6cd5)": [[328, "select.devpoll.register"]], "register() (select.epoll \u7684\u65b9\u6cd5)": [[328, "select.epoll.register"]], "register() (select.poll \u7684\u65b9\u6cd5)": [[328, "select.poll.register"]], "select": [[328, "module-select"]], "select() (\u65bc select \u6a21\u7d44\u4e2d)": [[328, "select.select"]], "socket() (\u65bc socket \u6a21\u7d44)": [[328, "index-1"]], "udata (select.kevent \u7684\u5c6c\u6027)": [[328, "select.kevent.udata"]], "unregister() (select.devpoll \u7684\u65b9\u6cd5)": [[328, "select.devpoll.unregister"]], "unregister() (select.epoll \u7684\u65b9\u6cd5)": [[328, "select.epoll.unregister"]], "unregister() (select.poll \u7684\u65b9\u6cd5)": [[328, "select.poll.unregister"]], "baseselector (selectors \u4e2d\u7684\u985e\u5225)": [[329, "selectors.BaseSelector"]], "defaultselector (selectors \u4e2d\u7684\u985e\u5225)": [[329, "selectors.DefaultSelector"]], "devpollselector (selectors \u4e2d\u7684\u985e\u5225)": [[329, "selectors.DevpollSelector"]], "event_read (\u65bc selectors \u6a21\u7d44\u4e2d)": [[329, "selectors.EVENT_READ"]], "event_write (\u65bc selectors \u6a21\u7d44\u4e2d)": [[329, "selectors.EVENT_WRITE"]], "epollselector (selectors \u4e2d\u7684\u985e\u5225)": [[329, "selectors.EpollSelector"]], "kqueueselector (selectors \u4e2d\u7684\u985e\u5225)": [[329, "selectors.KqueueSelector"]], "pollselector (selectors \u4e2d\u7684\u985e\u5225)": [[329, "selectors.PollSelector"]], "selectselector (selectors \u4e2d\u7684\u985e\u5225)": [[329, "selectors.SelectSelector"]], "selectorkey (selectors \u4e2d\u7684\u985e\u5225)": [[329, "selectors.SelectorKey"]], "close() (selectors.baseselector \u7684\u65b9\u6cd5)": [[329, "selectors.BaseSelector.close"]], "data (selectors.selectorkey \u7684\u5c6c\u6027)": [[329, "selectors.SelectorKey.data"]], "events (selectors.selectorkey \u7684\u5c6c\u6027)": [[329, "selectors.SelectorKey.events"]], "fd (selectors.selectorkey \u7684\u5c6c\u6027)": [[329, "selectors.SelectorKey.fd"]], "fileno() (selectors.devpollselector \u7684\u65b9\u6cd5)": [[329, "selectors.DevpollSelector.fileno"]], "fileno() (selectors.epollselector \u7684\u65b9\u6cd5)": [[329, "selectors.EpollSelector.fileno"]], "fileno() (selectors.kqueueselector \u7684\u65b9\u6cd5)": [[329, "selectors.KqueueSelector.fileno"]], "fileobj (selectors.selectorkey \u7684\u5c6c\u6027)": [[329, "selectors.SelectorKey.fileobj"]], "get_key() (selectors.baseselector \u7684\u65b9\u6cd5)": [[329, "selectors.BaseSelector.get_key"]], "get_map() (selectors.baseselector \u7684\u65b9\u6cd5)": [[329, "selectors.BaseSelector.get_map"]], "modify() (selectors.baseselector \u7684\u65b9\u6cd5)": [[329, "selectors.BaseSelector.modify"]], "register() (selectors.baseselector \u7684\u65b9\u6cd5)": [[329, "selectors.BaseSelector.register"]], "select() (selectors.baseselector \u7684\u65b9\u6cd5)": [[329, "selectors.BaseSelector.select"]], "selectors": [[329, "module-selectors"]], "unregister() (selectors.baseselector \u7684\u65b9\u6cd5)": [[329, "selectors.BaseSelector.unregister"]], "bsddbshelf (shelve \u4e2d\u7684\u985e\u5225)": [[330, "shelve.BsdDbShelf"]], "dbfilenameshelf (shelve \u4e2d\u7684\u985e\u5225)": [[330, "shelve.DbfilenameShelf"]], "shelf (shelve \u4e2d\u7684\u985e\u5225)": [[330, "shelve.Shelf"]], "close() (shelve.shelf \u7684\u65b9\u6cd5)": [[330, "shelve.Shelf.close"]], "open() (\u65bc shelve \u6a21\u7d44\u4e2d)": [[330, "shelve.open"]], "sync() (shelve.shelf \u7684\u65b9\u6cd5)": [[330, "shelve.Shelf.sync"]], "commenters (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.commenters"]], "debug (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.debug"]], "eof (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.eof"]], "error_leader() (shlex.shlex \u7684\u65b9\u6cd5)": [[331, "shlex.shlex.error_leader"]], "escape (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.escape"]], "escapedquotes (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.escapedquotes"]], "get_token() (shlex.shlex \u7684\u65b9\u6cd5)": [[331, "shlex.shlex.get_token"]], "infile (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.infile"]], "instream (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.instream"]], "join() (\u65bc shlex \u6a21\u7d44\u4e2d)": [[331, "shlex.join"]], "lineno (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.lineno"]], "pop_source() (shlex.shlex \u7684\u65b9\u6cd5)": [[331, "shlex.shlex.pop_source"]], "punctuation_chars (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.punctuation_chars"]], "push_source() (shlex.shlex \u7684\u65b9\u6cd5)": [[331, "shlex.shlex.push_source"]], "push_token() (shlex.shlex \u7684\u65b9\u6cd5)": [[331, "shlex.shlex.push_token"]], "quote() (\u65bc shlex \u6a21\u7d44\u4e2d)": [[331, "shlex.quote"]], "quotes (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.quotes"]], "read_token() (shlex.shlex \u7684\u65b9\u6cd5)": [[331, "shlex.shlex.read_token"]], "shlex": [[331, "module-shlex"]], "shlex (shlex \u4e2d\u7684\u985e\u5225)": [[331, "shlex.shlex"]], "source (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.source"]], "sourcehook() (shlex.shlex \u7684\u65b9\u6cd5)": [[331, "shlex.shlex.sourcehook"]], "split() (\u65bc shlex \u6a21\u7d44\u4e2d)": [[331, "shlex.split"]], "token (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.token"]], "whitespace (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.whitespace"]], "whitespace_split (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.whitespace_split"]], "wordchars (shlex.shlex \u7684\u5c6c\u6027)": [[331, "shlex.shlex.wordchars"]], "samefileerror": [[332, "shutil.SameFileError"]], "avoids_symlink_attacks (shutil.rmtree \u7684\u5c6c\u6027)": [[332, "shutil.rmtree.avoids_symlink_attacks"]], "chown() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.chown"]], "copy() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.copy"]], "copy2() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.copy2"]], "copyfile() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.copyfile"]], "copyfileobj() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.copyfileobj"]], "copying files\uff08\u8907\u88fd\u6a94\u6848\uff09": [[332, "index-0"]], "copying\uff08\u8907\u88fd\uff09": [[332, "index-0"]], "copymode() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.copymode"]], "copystat() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.copystat"]], "copytree() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.copytree"]], "disk_usage() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.disk_usage"]], "get_archive_formats() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.get_archive_formats"]], "get_terminal_size() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.get_terminal_size"]], "get_unpack_formats() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.get_unpack_formats"]], "ignore_patterns() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.ignore_patterns"]], "make_archive() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.make_archive"]], "move() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.move"]], "register_archive_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.register_archive_format"]], "register_unpack_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.register_unpack_format"]], "rmtree() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.rmtree"]], "shutil": [[332, "module-shutil"]], "unpack_archive() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.unpack_archive"]], "unregister_archive_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.unregister_archive_format"]], "unregister_unpack_format() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.unregister_unpack_format"]], "which() (\u65bc shutil \u6a21\u7d44\u4e2d)": [[332, "shutil.which"]], "ctrl_break_event (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.CTRL_BREAK_EVENT"]], "ctrl_c_event (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.CTRL_C_EVENT"]], "handlers (signal \u4e2d\u7684\u985e\u5225)": [[333, "signal.Handlers"]], "itimer_prof (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.ITIMER_PROF"]], "itimer_real (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.ITIMER_REAL"]], "itimer_virtual (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.ITIMER_VIRTUAL"]], "itimererror": [[333, "signal.ItimerError"]], "nsig (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.NSIG"]], "sigabrt (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGABRT"]], "sigalrm (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGALRM"]], "sigbreak (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGBREAK"]], "sigbus (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGBUS"]], "sigchld (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGCHLD"]], "sigcld (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGCLD"]], "sigcont (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGCONT"]], "sigfpe (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGFPE"]], "sighup (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGHUP"]], "sigill (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGILL"]], "sigint (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGINT"]], "sigkill (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGKILL"]], "sigpipe (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGPIPE"]], "sigsegv (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGSEGV"]], "sigstkflt (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGSTKFLT"]], "sigterm (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGTERM"]], "sigusr1 (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGUSR1"]], "sigusr2 (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGUSR2"]], "sigwinch (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIGWINCH"]], "sig_block (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIG_BLOCK"]], "sig_dfl (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIG_DFL"]], "sig_ign (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIG_IGN"]], "sig_setmask (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIG_SETMASK"]], "sig_unblock (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.SIG_UNBLOCK"]], "sigmasks (signal \u4e2d\u7684\u985e\u5225)": [[333, "signal.Sigmasks"]], "signals (signal \u4e2d\u7684\u985e\u5225)": [[333, "signal.Signals"]], "alarm() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.alarm"]], "getitimer() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.getitimer"]], "getsignal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.getsignal"]], "pause() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.pause"]], "pidfd_send_signal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.pidfd_send_signal"]], "pthread_kill() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.pthread_kill"]], "pthread_sigmask() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.pthread_sigmask"]], "raise_signal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.raise_signal"]], "set_wakeup_fd() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.set_wakeup_fd"]], "setitimer() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.setitimer"]], "siginterrupt() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.siginterrupt"]], "signal": [[333, "module-signal"]], "signal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.signal"]], "sigpending() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.sigpending"]], "sigtimedwait() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.sigtimedwait"]], "sigwait() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.sigwait"]], "sigwaitinfo() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.sigwaitinfo"]], "strsignal() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.strsignal"]], "valid_signals() (\u65bc signal \u6a21\u7d44\u4e2d)": [[333, "signal.valid_signals"]], "--user-base": [[334, "cmdoption-site-user-base"]], "--user-site": [[334, "cmdoption-site-user-site"]], "enable_user_site (\u65bc site \u6a21\u7d44\u4e2d)": [[334, "site.ENABLE_USER_SITE"]], "pep 370": [[334, "index-9"], [455, "index-16"], [455, "index-39"], [455, "index-40"], [468, "index-7"], [483, "index-46"]], "prefixes (\u65bc site \u6a21\u7d44\u4e2d)": [[334, "site.PREFIXES"]], "pythonuserbase": [[334, "index-7"], [334, "index-8"], [455, "envvar-PYTHONUSERBASE"], [468, "index-4"]], "user_base (\u65bc site \u6a21\u7d44\u4e2d)": [[334, "site.USER_BASE"]], "user_site (\u65bc site \u6a21\u7d44\u4e2d)": [[334, "site.USER_SITE"]], "addsitedir() (\u65bc site \u6a21\u7d44\u4e2d)": [[334, "site.addsitedir"]], "comment\uff08\u8a3b\u89e3\uff09": [[334, "index-2"], [435, "index-4"], [449, "index-0"]], "getsitepackages() (\u65bc site \u6a21\u7d44\u4e2d)": [[334, "site.getsitepackages"]], "getuserbase() (\u65bc site \u6a21\u7d44\u4e2d)": [[334, "site.getuserbase"]], "getusersitepackages() (\u65bc site \u6a21\u7d44\u4e2d)": [[334, "site.getusersitepackages"]], "main() (\u65bc site \u6a21\u7d44\u4e2d)": [[334, "site.main"]], "site": [[334, "module-site"]], "site \u547d\u4ee4\u5217\u9078\u9805": [[334, "cmdoption-site-user-base"], [334, "cmdoption-site-user-site"]], "site-packages": [[334, "index-1"]], "sitecustomize": [[334, "module-sitecustomize"], [438, "index-14"], [438, "index-16"]], "usercustomize": [[334, "module-usercustomize"], [438, "index-15"], [438, "index-17"]], "lmtp (smtplib \u4e2d\u7684\u985e\u5225)": [[335, "smtplib.LMTP"]], "rfc 1869": [[335, "index-2"], [335, "index-5"]], "rfc 4954": [[335, "index-7"], [335, "index-8"]], "rfc 821": [[335, "index-1"], [335, "index-4"]], "smtp": [[335, "index-0"]], "smtp (smtplib \u4e2d\u7684\u985e\u5225)": [[335, "smtplib.SMTP"]], "smtpauthenticationerror": [[335, "smtplib.SMTPAuthenticationError"]], "smtpconnecterror": [[335, "smtplib.SMTPConnectError"]], "smtpdataerror": [[335, "smtplib.SMTPDataError"]], "smtpexception": [[335, "smtplib.SMTPException"]], "smtpheloerror": [[335, "smtplib.SMTPHeloError"]], "smtpnotsupportederror": [[335, "smtplib.SMTPNotSupportedError"]], "smtprecipientsrefused": [[335, "smtplib.SMTPRecipientsRefused"]], "smtpresponseexception": [[335, "smtplib.SMTPResponseException"]], "smtpsenderrefused": [[335, "smtplib.SMTPSenderRefused"]], "smtpserverdisconnected": [[335, "smtplib.SMTPServerDisconnected"]], "smtp_ssl (smtplib \u4e2d\u7684\u985e\u5225)": [[335, "smtplib.SMTP_SSL"]], "simple mail transfer protocol\uff08\u7c21\u55ae\u90f5\u4ef6\u50b3\u8f38\u5354\u5b9a\uff09": [[335, "index-0"]], "auth() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.auth"]], "connect() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.connect"]], "docmd() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.docmd"]], "ehlo() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.ehlo"]], "ehlo_or_helo_if_needed() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.ehlo_or_helo_if_needed"]], "has_extn() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.has_extn"]], "helo() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.helo"]], "login() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.login"]], "quit() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.quit"]], "send_message() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.send_message"]], "sendmail() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.sendmail"]], "set_debuglevel() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.set_debuglevel"]], "smtplib": [[335, "module-smtplib"]], "starttls() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.starttls"]], "verify() (smtplib.smtp \u7684\u65b9\u6cd5)": [[335, "smtplib.SMTP.verify"]], "pep 594#sndhdr": [[336, "index-3"]], "sndhdr": [[336, "module-sndhdr"]], "tests (\u65bc sndhdr \u6a21\u7d44\u4e2d)": [[336, "sndhdr.tests"]], "what() (\u65bc sndhdr \u6a21\u7d44\u4e2d)": [[336, "sndhdr.what"]], "whathdr() (\u65bc sndhdr \u6a21\u7d44\u4e2d)": [[336, "sndhdr.whathdr"]], "af_alg (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_ALG"]], "af_can (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_CAN"]], "af_divert (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_DIVERT"]], "af_hyperv (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_HYPERV"]], "af_inet (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_INET"]], "af_inet6 (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_INET6"]], "af_link (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_LINK"]], "af_packet (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_PACKET"]], "af_qipcrtr (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_QIPCRTR"]], "af_rds (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_RDS"]], "af_unix (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_UNIX"]], "af_unspec (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_UNSPEC"]], "af_vsock (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.AF_VSOCK"]], "bdaddr_any (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.BDADDR_ANY"]], "bdaddr_local (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.BDADDR_LOCAL"]], "can_bcm (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.CAN_BCM"]], "can_isotp (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.CAN_ISOTP"]], "can_j1939 (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.CAN_J1939"]], "can_raw_fd_frames (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.CAN_RAW_FD_FRAMES"]], "can_raw_join_filters (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.CAN_RAW_JOIN_FILTERS"]], "cmsg_len() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.CMSG_LEN"]], "cmsg_space() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.CMSG_SPACE"]], "ethertype_arp (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.ETHERTYPE_ARP"]], "ethertype_ip (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.ETHERTYPE_IP"]], "ethertype_ipv6 (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.ETHERTYPE_IPV6"]], "ethertype_vlan (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.ETHERTYPE_VLAN"]], "eth_p_all (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.ETH_P_ALL"]], "hci_data_dir (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HCI_DATA_DIR"]], "hci_filter (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HCI_FILTER"]], "hci_time_stamp (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HCI_TIME_STAMP"]], "hvsocket_address_flag_passthru (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HVSOCKET_ADDRESS_FLAG_PASSTHRU"]], "hvsocket_connected_suspend (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HVSOCKET_CONNECTED_SUSPEND"]], "hvsocket_connect_timeout (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HVSOCKET_CONNECT_TIMEOUT"]], "hvsocket_connect_timeout_max (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HVSOCKET_CONNECT_TIMEOUT_MAX"]], "hv_guid_broadcast (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HV_GUID_BROADCAST"]], "hv_guid_children (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HV_GUID_CHILDREN"]], "hv_guid_loopback (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HV_GUID_LOOPBACK"]], "hv_guid_parent (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HV_GUID_PARENT"]], "hv_guid_wildcard (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HV_GUID_WILDCARD"]], "hv_guid_zero (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HV_GUID_ZERO"]], "hv_protocol_raw (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.HV_PROTOCOL_RAW"]], "ioctl_vm_sockets_get_local_cid (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.IOCTL_VM_SOCKETS_GET_LOCAL_CID"]], "local_creds (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.LOCAL_CREDS"]], "local_creds_persistent (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.LOCAL_CREDS_PERSISTENT"]], "pf_can (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.PF_CAN"]], "pf_divert (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.PF_DIVERT"]], "pf_packet (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.PF_PACKET"]], "pf_rds (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.PF_RDS"]], "rfc 3493": [[337, "index-15"]], "rfc 3542": [[337, "index-3"], [483, "index-217"]], "scm_creds2 (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SCM_CREDS2"]], "sio_keepalive_vals (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SIO_KEEPALIVE_VALS"]], "sio_loopback_fast_path (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SIO_LOOPBACK_FAST_PATH"]], "sio_rcvall (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SIO_RCVALL"]], "sock_cloexec (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOCK_CLOEXEC"]], "sock_dgram (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOCK_DGRAM"]], "sock_nonblock (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOCK_NONBLOCK"]], "sock_raw (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOCK_RAW"]], "sock_rdm (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOCK_RDM"]], "sock_seqpacket (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOCK_SEQPACKET"]], "sock_stream (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOCK_STREAM"]], "sol_alg (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOL_ALG"]], "sol_rds (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOL_RDS"]], "somaxconn (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SOMAXCONN"]], "so_incoming_cpu (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SO_INCOMING_CPU"]], "sockettype (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.SocketType"]], "accept() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.accept"]], "bind() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.bind"]], "close() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.close"]], "close() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.close"]], "connect() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.connect"]], "connect_ex() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.connect_ex"]], "create_connection() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.create_connection"]], "create_server() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.create_server"]], "detach() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.detach"]], "dup() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.dup"]], "family (socket.socket \u7684\u5c6c\u6027)": [[337, "socket.socket.family"]], "fileno() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.fileno"]], "fromfd() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.fromfd"]], "fromshare() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.fromshare"]], "gaierror": [[337, "socket.gaierror"]], "get_inheritable() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.get_inheritable"]], "getaddrinfo() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.getaddrinfo"]], "getblocking() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.getblocking"]], "getdefaulttimeout() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.getdefaulttimeout"]], "getfqdn() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.getfqdn"]], "gethostbyaddr() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.gethostbyaddr"]], "gethostbyname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.gethostbyname"]], "gethostbyname_ex() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.gethostbyname_ex"]], "gethostname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.gethostname"]], "getnameinfo() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.getnameinfo"]], "getpeername() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.getpeername"]], "getprotobyname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.getprotobyname"]], "getservbyname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.getservbyname"]], "getservbyport() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.getservbyport"]], "getsockname() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.getsockname"]], "getsockopt() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.getsockopt"]], "gettimeout() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.gettimeout"]], "has_dualstack_ipv6() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.has_dualstack_ipv6"]], "has_ipv6 (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.has_ipv6"]], "herror": [[337, "socket.herror"]], "htonl() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.htonl"]], "htons() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.htons"]], "if_indextoname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.if_indextoname"]], "if_nameindex() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.if_nameindex"]], "if_nametoindex() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.if_nametoindex"]], "inet_aton() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.inet_aton"]], "inet_ntoa() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.inet_ntoa"]], "inet_ntop() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.inet_ntop"]], "inet_pton() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.inet_pton"]], "ioctl() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.ioctl"]], "listen() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.listen"]], "makefile() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.makefile"]], "ntohl() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.ntohl"]], "ntohs() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.ntohs"]], "proto (socket.socket \u7684\u5c6c\u6027)": [[337, "socket.socket.proto"]], "recv() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.recv"]], "recv_fds() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.recv_fds"]], "recv_into() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.recv_into"]], "recvfrom() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.recvfrom"]], "recvfrom_into() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.recvfrom_into"]], "recvmsg() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.recvmsg"]], "recvmsg_into() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.recvmsg_into"]], "send() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.send"]], "send_fds() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.send_fds"]], "sendall() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.sendall"]], "sendfile() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.sendfile"]], "sendmsg() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.sendmsg"]], "sendmsg_afalg() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.sendmsg_afalg"]], "sendto() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.sendto"]], "set_inheritable() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.set_inheritable"]], "setblocking() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.setblocking"]], "setdefaulttimeout() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.setdefaulttimeout"]], "sethostname() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.sethostname"]], "setsockopt() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.setsockopt"]], "settimeout() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.settimeout"]], "share() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.share"]], "shutdown() (socket.socket \u7684\u65b9\u6cd5)": [[337, "socket.socket.shutdown"]], "socket (socket \u4e2d\u7684\u985e\u5225)": [[337, "socket.socket"]], "socketpair() (\u65bc socket \u6a21\u7d44\u4e2d)": [[337, "socket.socketpair"]], "struct": [[337, "index-14"], [347, "module-struct"]], "timeout": [[337, "socket.timeout"]], "type (socket.socket \u7684\u5c6c\u6027)": [[337, "socket.socket.type"]], "baserequesthandler (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.BaseRequestHandler"]], "baseserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.BaseServer"]], "datagramrequesthandler (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.DatagramRequestHandler"]], "forkingmixin (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.ForkingMixIn"]], "forkingtcpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.ForkingTCPServer"]], "forkingudpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.ForkingUDPServer"]], "forkingunixdatagramserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.ForkingUnixDatagramServer"]], "forkingunixstreamserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.ForkingUnixStreamServer"]], "requesthandlerclass (socketserver.baseserver \u7684\u5c6c\u6027)": [[338, "socketserver.BaseServer.RequestHandlerClass"]], "streamrequesthandler (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.StreamRequestHandler"]], "tcpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.TCPServer"]], "threadingmixin (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.ThreadingMixIn"]], "threadingtcpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.ThreadingTCPServer"]], "threadingudpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.ThreadingUDPServer"]], "threadingunixdatagramserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.ThreadingUnixDatagramServer"]], "threadingunixstreamserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.ThreadingUnixStreamServer"]], "udpserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.UDPServer"]], "unixdatagramserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.UnixDatagramServer"]], "unixstreamserver (socketserver \u4e2d\u7684\u985e\u5225)": [[338, "socketserver.UnixStreamServer"]], "address_family (socketserver.baseserver \u7684\u5c6c\u6027)": [[338, "socketserver.BaseServer.address_family"]], "allow_reuse_address (socketserver.baseserver \u7684\u5c6c\u6027)": [[338, "socketserver.BaseServer.allow_reuse_address"]], "block_on_close (socketserver.threadingmixin \u7684\u5c6c\u6027)": [[338, "socketserver.ThreadingMixIn.block_on_close"]], "client_address (socketserver.baserequesthandler \u7684\u5c6c\u6027)": [[338, "socketserver.BaseRequestHandler.client_address"]], "daemon_threads (socketserver.threadingmixin \u7684\u5c6c\u6027)": [[338, "socketserver.ThreadingMixIn.daemon_threads"]], "fileno() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.fileno"]], "finish() (socketserver.baserequesthandler \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseRequestHandler.finish"]], "finish_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.finish_request"]], "get_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.get_request"]], "handle() (socketserver.baserequesthandler \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseRequestHandler.handle"]], "handle_error() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.handle_error"]], "handle_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.handle_request"]], "handle_timeout() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.handle_timeout"]], "process_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.process_request"]], "request (socketserver.baserequesthandler \u7684\u5c6c\u6027)": [[338, "socketserver.BaseRequestHandler.request"]], "request_queue_size (socketserver.baseserver \u7684\u5c6c\u6027)": [[338, "socketserver.BaseServer.request_queue_size"]], "rfile (socketserver.datagramrequesthandler \u7684\u5c6c\u6027)": [[338, "socketserver.DatagramRequestHandler.rfile"]], "serve_forever() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.serve_forever"]], "server (socketserver.baserequesthandler \u7684\u5c6c\u6027)": [[338, "socketserver.BaseRequestHandler.server"]], "server_activate() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.server_activate"]], "server_address (socketserver.baseserver \u7684\u5c6c\u6027)": [[338, "socketserver.BaseServer.server_address"]], "server_bind() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.server_bind"]], "server_close() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.server_close"]], "service_actions() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.service_actions"]], "setup() (socketserver.baserequesthandler \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseRequestHandler.setup"]], "shutdown() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.shutdown"]], "socket (socketserver.baseserver \u7684\u5c6c\u6027)": [[338, "socketserver.BaseServer.socket"]], "socket_type (socketserver.baseserver \u7684\u5c6c\u6027)": [[338, "socketserver.BaseServer.socket_type"]], "socketserver": [[338, "module-socketserver"]], "timeout (socketserver.baseserver \u7684\u5c6c\u6027)": [[338, "socketserver.BaseServer.timeout"]], "verify_request() (socketserver.baseserver \u7684\u65b9\u6cd5)": [[338, "socketserver.BaseServer.verify_request"]], "wfile (socketserver.datagramrequesthandler \u7684\u5c6c\u6027)": [[338, "socketserver.DatagramRequestHandler.wfile"]], "pep 594#spwd": [[339, "index-2"]], "getspall() (\u65bc spwd \u6a21\u7d44\u4e2d)": [[339, "spwd.getspall"]], "getspnam() (\u65bc spwd \u6a21\u7d44\u4e2d)": [[339, "spwd.getspnam"]], "spwd": [[339, "module-spwd"]], "--version": [[340, "cmdoption-python-m-sqlite3-h-v-filename-sql-v"], [380, "cmdoption-trace-version"], [455, "cmdoption-version"]], "-v": [[340, "cmdoption-python-m-sqlite3-h-v-filename-sql-v"], [358, "cmdoption-tarfile-v"], [367, "cmdoption-timeit-v"], [388, "cmdoption-unittest-discover-v"], [455, "cmdoption-V"], [455, "cmdoption-v"]], "blob (sqlite3 \u4e2d\u7684\u985e\u5225)": [[340, "sqlite3.Blob"]], "connection (sqlite3 \u4e2d\u7684\u985e\u5225)": [[340, "sqlite3.Connection"]], "cursor (sqlite3 \u4e2d\u7684\u985e\u5225)": [[340, "sqlite3.Cursor"]], "dataerror": [[340, "sqlite3.DataError"]], "databaseerror": [[340, "sqlite3.DatabaseError"]], "integrityerror": [[340, "sqlite3.IntegrityError"]], "interfaceerror": [[340, "sqlite3.InterfaceError"]], "internalerror": [[340, "sqlite3.InternalError"]], "legacy_transaction_control (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.LEGACY_TRANSACTION_CONTROL"]], "notsupportederror": [[340, "sqlite3.NotSupportedError"]], "operationalerror": [[340, "sqlite3.OperationalError"]], "parse_colnames (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.PARSE_COLNAMES"]], "parse_decltypes (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.PARSE_DECLTYPES"]], "pep 246": [[340, "index-8"], [483, "index-48"]], "pep 249": [[340, "index-0"], [340, "index-10"], [340, "index-11"], [340, "index-12"], [340, "index-14"], [340, "index-2"], [340, "index-3"], [340, "index-4"], [340, "index-5"], [340, "index-9"], [467, "index-24"], [467, "index-25"], [474, "index-24"], [483, "index-39"], [483, "index-71"]], "prepareprotocol (sqlite3 \u4e2d\u7684\u985e\u5225)": [[340, "sqlite3.PrepareProtocol"]], "programmingerror": [[340, "sqlite3.ProgrammingError"]], "row (sqlite3 \u4e2d\u7684\u985e\u5225)": [[340, "sqlite3.Row"]], "sqlite_dbconfig_defensive (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_DBCONFIG_DEFENSIVE"]], "sqlite_dbconfig_dqs_ddl (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_DBCONFIG_DQS_DDL"]], "sqlite_dbconfig_dqs_dml (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_DBCONFIG_DQS_DML"]], "sqlite_dbconfig_enable_fkey (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_DBCONFIG_ENABLE_FKEY"]], "sqlite_dbconfig_enable_fts3_tokenizer (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER"]], "sqlite_dbconfig_enable_load_extension (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION"]], "sqlite_dbconfig_enable_qpsg (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_DBCONFIG_ENABLE_QPSG"]], "sqlite_dbconfig_enable_trigger (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_DBCONFIG_ENABLE_TRIGGER"]], "sqlite_dbconfig_enable_view (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_DBCONFIG_ENABLE_VIEW"]], "sqlite_dbconfig_legacy_alter_table (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_DBCONFIG_LEGACY_ALTER_TABLE"]], "sqlite_dbconfig_legacy_file_format (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_DBCONFIG_LEGACY_FILE_FORMAT"]], "sqlite_dbconfig_no_ckpt_on_close (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE"]], "sqlite_dbconfig_reset_database (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_DBCONFIG_RESET_DATABASE"]], "sqlite_dbconfig_trigger_eqp (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_DBCONFIG_TRIGGER_EQP"]], "sqlite_dbconfig_trusted_schema (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_DBCONFIG_TRUSTED_SCHEMA"]], "sqlite_dbconfig_writable_schema (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_DBCONFIG_WRITABLE_SCHEMA"]], "sqlite_deny (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_DENY"]], "sqlite_ignore (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_IGNORE"]], "sqlite_ok (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.SQLITE_OK"]], "apilevel (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.apilevel"]], "arraysize (sqlite3.cursor \u7684\u5c6c\u6027)": [[340, "sqlite3.Cursor.arraysize"]], "autocommit (sqlite3.connection \u7684\u5c6c\u6027)": [[340, "sqlite3.Connection.autocommit"]], "backup() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.backup"]], "blobopen() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.blobopen"]], "close() (sqlite3.blob \u7684\u65b9\u6cd5)": [[340, "sqlite3.Blob.close"]], "close() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.close"]], "close() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[340, "sqlite3.Cursor.close"]], "commit() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.commit"]], "complete_statement() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.complete_statement"]], "connect() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.connect"]], "connection (sqlite3.cursor \u7684\u5c6c\u6027)": [[340, "sqlite3.Cursor.connection"]], "create_aggregate() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.create_aggregate"]], "create_collation() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.create_collation"]], "create_function() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.create_function"]], "create_window_function() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.create_window_function"]], "cursor() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.cursor"]], "description (sqlite3.cursor \u7684\u5c6c\u6027)": [[340, "sqlite3.Cursor.description"]], "deserialize() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.deserialize"]], "enable_callback_tracebacks() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.enable_callback_tracebacks"]], "enable_load_extension() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.enable_load_extension"]], "execute() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.execute"]], "execute() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[340, "sqlite3.Cursor.execute"]], "executemany() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.executemany"]], "executemany() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[340, "sqlite3.Cursor.executemany"]], "executescript() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.executescript"]], "executescript() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[340, "sqlite3.Cursor.executescript"]], "fetchall() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[340, "sqlite3.Cursor.fetchall"]], "fetchmany() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[340, "sqlite3.Cursor.fetchmany"]], "fetchone() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[340, "sqlite3.Cursor.fetchone"]], "getconfig() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.getconfig"]], "getlimit() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.getlimit"]], "in_transaction (sqlite3.connection \u7684\u5c6c\u6027)": [[340, "sqlite3.Connection.in_transaction"]], "interrupt() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.interrupt"]], "isolation_level (sqlite3.connection \u7684\u5c6c\u6027)": [[340, "sqlite3.Connection.isolation_level"]], "iterdump() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.iterdump"]], "keys() (sqlite3.row \u7684\u65b9\u6cd5)": [[340, "sqlite3.Row.keys"]], "lastrowid (sqlite3.cursor \u7684\u5c6c\u6027)": [[340, "sqlite3.Cursor.lastrowid"]], "load_extension() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.load_extension"]], "paramstyle (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.paramstyle"]], "python--m-sqlite3-[-h]-[-v]-[filename]-[sql] \u547d\u4ee4\u5217\u9078\u9805": [[340, "cmdoption-python-m-sqlite3-h-v-filename-sql-h"], [340, "cmdoption-python-m-sqlite3-h-v-filename-sql-v"]], "read() (sqlite3.blob \u7684\u65b9\u6cd5)": [[340, "sqlite3.Blob.read"]], "register_adapter() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.register_adapter"]], "register_converter() (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.register_converter"]], "rollback() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.rollback"]], "row_factory (sqlite3.connection \u7684\u5c6c\u6027)": [[340, "sqlite3.Connection.row_factory"]], "row_factory (sqlite3.cursor \u7684\u5c6c\u6027)": [[340, "sqlite3.Cursor.row_factory"]], "rowcount (sqlite3.cursor \u7684\u5c6c\u6027)": [[340, "sqlite3.Cursor.rowcount"]], "seek() (sqlite3.blob \u7684\u65b9\u6cd5)": [[340, "sqlite3.Blob.seek"]], "serialize() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.serialize"]], "set_authorizer() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.set_authorizer"]], "set_progress_handler() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.set_progress_handler"]], "set_trace_callback() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.set_trace_callback"]], "setconfig() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.setconfig"]], "setinputsizes() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[340, "sqlite3.Cursor.setinputsizes"]], "setlimit() (sqlite3.connection \u7684\u65b9\u6cd5)": [[340, "sqlite3.Connection.setlimit"]], "setoutputsize() (sqlite3.cursor \u7684\u65b9\u6cd5)": [[340, "sqlite3.Cursor.setoutputsize"]], "sqlite3": [[340, "module-sqlite3"]], "sqlite_errorcode (sqlite3.error \u7684\u5c6c\u6027)": [[340, "sqlite3.Error.sqlite_errorcode"]], "sqlite_errorname (sqlite3.error \u7684\u5c6c\u6027)": [[340, "sqlite3.Error.sqlite_errorname"]], "sqlite_version (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.sqlite_version"]], "sqlite_version_info (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.sqlite_version_info"]], "tell() (sqlite3.blob \u7684\u65b9\u6cd5)": [[340, "sqlite3.Blob.tell"]], "text_factory (sqlite3.connection \u7684\u5c6c\u6027)": [[340, "sqlite3.Connection.text_factory"]], "threadsafety (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.threadsafety"]], "total_changes (sqlite3.connection \u7684\u5c6c\u6027)": [[340, "sqlite3.Connection.total_changes"]], "version (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.version"]], "version_info (\u65bc sqlite3 \u6a21\u7d44\u4e2d)": [[340, "sqlite3.version_info"]], "write() (sqlite3.blob \u7684\u65b9\u6cd5)": [[340, "sqlite3.Blob.write"]], "\u65bc sql \u9673\u8ff0\u5f0f\u4e2d": [[340, "index-6"], [340, "index-7"]], "alert_description_handshake_failure (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE"]], "alert_description_internal_error (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.ALERT_DESCRIPTION_INTERNAL_ERROR"]], "alertdescription (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.AlertDescription"]], "cert_none (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.CERT_NONE"]], "cert_optional (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.CERT_OPTIONAL"]], "cert_required (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.CERT_REQUIRED"]], "channel_binding_types (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.CHANNEL_BINDING_TYPES"]], "certificateerror": [[341, "ssl.CertificateError"]], "der_cert_to_pem_cert() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.DER_cert_to_PEM_cert"]], "has_alpn (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_ALPN"]], "has_ecdh (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_ECDH"]], "has_never_check_common_name (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_NEVER_CHECK_COMMON_NAME"]], "has_npn (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_NPN"]], "has_sni (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_SNI"]], "has_sslv2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_SSLv2"]], "has_sslv3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_SSLv3"]], "has_tlsv1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_TLSv1"]], "has_tlsv1_1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_TLSv1_1"]], "has_tlsv1_2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_TLSv1_2"]], "has_tlsv1_3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.HAS_TLSv1_3"]], "maximum_supported (ssl.tlsversion \u7684\u5c6c\u6027)": [[341, "ssl.TLSVersion.MAXIMUM_SUPPORTED"]], "minimum_supported (ssl.tlsversion \u7684\u5c6c\u6027)": [[341, "ssl.TLSVersion.MINIMUM_SUPPORTED"]], "memorybio (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.MemoryBIO"]], "openssl_version (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OPENSSL_VERSION"]], "openssl_version_info (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OPENSSL_VERSION_INFO"]], "openssl_version_number (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OPENSSL_VERSION_NUMBER"]], "op_all (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_ALL"]], "op_cipher_server_preference (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_CIPHER_SERVER_PREFERENCE"]], "op_enable_ktls (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_ENABLE_KTLS"]], "op_enable_middlebox_compat (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_ENABLE_MIDDLEBOX_COMPAT"]], "op_ignore_unexpected_eof (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_IGNORE_UNEXPECTED_EOF"]], "op_legacy_server_connect (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_LEGACY_SERVER_CONNECT"]], "op_no_compression (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_NO_COMPRESSION"]], "op_no_renegotiation (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_NO_RENEGOTIATION"]], "op_no_sslv2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_NO_SSLv2"]], "op_no_sslv3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_NO_SSLv3"]], "op_no_ticket (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_NO_TICKET"]], "op_no_tlsv1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_NO_TLSv1"]], "op_no_tlsv1_1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_NO_TLSv1_1"]], "op_no_tlsv1_2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_NO_TLSv1_2"]], "op_no_tlsv1_3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_NO_TLSv1_3"]], "op_single_dh_use (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_SINGLE_DH_USE"]], "op_single_ecdh_use (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.OP_SINGLE_ECDH_USE"]], "options (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.Options"]], "pem_cert_to_der_cert() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.PEM_cert_to_DER_cert"]], "pep 644": [[341, "index-28"], [472, "index-109"], [472, "index-110"], [472, "index-114"], [472, "index-89"], [474, "index-34"], [483, "index-101"], [483, "index-45"]], "protocol_sslv23 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.PROTOCOL_SSLv23"]], "protocol_sslv3 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.PROTOCOL_SSLv3"]], "protocol_tls (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.PROTOCOL_TLS"]], "protocol_tls_client (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.PROTOCOL_TLS_CLIENT"]], "protocol_tls_server (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.PROTOCOL_TLS_SERVER"]], "protocol_tlsv1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.PROTOCOL_TLSv1"]], "protocol_tlsv1_1 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.PROTOCOL_TLSv1_1"]], "protocol_tlsv1_2 (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.PROTOCOL_TLSv1_2"]], "purpose.client_auth (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.Purpose.CLIENT_AUTH"]], "purpose.server_auth (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.Purpose.SERVER_AUTH"]], "rand_add() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.RAND_add"]], "rand_bytes() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.RAND_bytes"]], "rand_status() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.RAND_status"]], "rfc 1422": [[341, "index-16"], [341, "index-17"]], "rfc 1750": [[341, "index-31"]], "rfc 3280": [[341, "index-10"]], "rfc 4086": [[341, "index-18"]], "rfc 5246": [[341, "index-20"], [341, "index-9"]], "rfc 5280": [[341, "index-19"], [341, "index-32"], [478, "index-41"], [478, "index-51"]], "rfc 5929": [[341, "index-11"]], "rfc 6066": [[341, "index-13"], [341, "index-21"], [341, "index-8"]], "rfc 7301": [[341, "index-12"], [341, "index-7"], [478, "index-40"]], "rfc 7525": [[341, "index-22"]], "ssl": [[341, "index-1"], [341, "module-ssl"]], "sslcertverificationerror": [[341, "ssl.SSLCertVerificationError"]], "sslcontext (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.SSLContext"]], "ssleoferror": [[341, "ssl.SSLEOFError"]], "sslerror": [[341, "ssl.SSLError"]], "sslerrornumber (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.SSLErrorNumber"]], "sslkeylogfile": [[341, "index-29"], [341, "index-30"]], "sslobject (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.SSLObject"]], "sslsession (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.SSLSession"]], "sslsocket (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.SSLSocket"]], "sslsyscallerror": [[341, "ssl.SSLSyscallError"]], "sslwantreaderror": [[341, "ssl.SSLWantReadError"]], "sslwantwriteerror": [[341, "ssl.SSLWantWriteError"]], "sslzeroreturnerror": [[341, "ssl.SSLZeroReturnError"]], "sslv3 (ssl.tlsversion \u7684\u5c6c\u6027)": [[341, "ssl.TLSVersion.SSLv3"]], "secure sockets layer\uff08\u5b89\u5168 socket \u5c64\uff09": [[341, "index-1"]], "tls": [[341, "index-1"]], "tlsversion (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.TLSVersion"]], "tlsv1 (ssl.tlsversion \u7684\u5c6c\u6027)": [[341, "ssl.TLSVersion.TLSv1"]], "tlsv1_1 (ssl.tlsversion \u7684\u5c6c\u6027)": [[341, "ssl.TLSVersion.TLSv1_1"]], "tlsv1_2 (ssl.tlsversion \u7684\u5c6c\u6027)": [[341, "ssl.TLSVersion.TLSv1_2"]], "tlsv1_3 (ssl.tlsversion \u7684\u5c6c\u6027)": [[341, "ssl.TLSVersion.TLSv1_3"]], "transport layer security\uff08\u50b3\u8f38\u5c64\u5b89\u5168\uff09": [[341, "index-1"]], "verify_allow_proxy_certs (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.VERIFY_ALLOW_PROXY_CERTS"]], "verify_crl_check_chain (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.VERIFY_CRL_CHECK_CHAIN"]], "verify_crl_check_leaf (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.VERIFY_CRL_CHECK_LEAF"]], "verify_default (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.VERIFY_DEFAULT"]], "verify_x509_partial_chain (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.VERIFY_X509_PARTIAL_CHAIN"]], "verify_x509_strict (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.VERIFY_X509_STRICT"]], "verify_x509_trusted_first (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.VERIFY_X509_TRUSTED_FIRST"]], "verifyflags (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.VerifyFlags"]], "verifymode (ssl \u4e2d\u7684\u985e\u5225)": [[341, "ssl.VerifyMode"]], "x509 certificate\uff08x509 \u6191\u8b49\uff09": [[341, "index-15"]], "cert_store_stats() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.cert_store_stats"]], "cert_time_to_seconds() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.cert_time_to_seconds"]], "certificates\uff08\u6191\u8b49\uff09": [[341, "index-14"]], "check_hostname (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.check_hostname"]], "cipher() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.cipher"]], "compression() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.compression"]], "context (ssl.sslsocket \u7684\u5c6c\u6027)": [[341, "ssl.SSLSocket.context"]], "create_default_context() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.create_default_context"]], "do_handshake() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.do_handshake"]], "enum_certificates() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.enum_certificates"]], "enum_crls() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.enum_crls"]], "eof (ssl.memorybio \u7684\u5c6c\u6027)": [[341, "ssl.MemoryBIO.eof"]], "get_ca_certs() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.get_ca_certs"]], "get_channel_binding() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.get_channel_binding"]], "get_ciphers() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.get_ciphers"]], "get_default_verify_paths() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.get_default_verify_paths"]], "get_server_certificate() (\u65bc ssl \u6a21\u7d44\u4e2d)": [[341, "ssl.get_server_certificate"]], "getpeercert() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.getpeercert"]], "has_ticket (ssl.sslsession \u7684\u5c6c\u6027)": [[341, "ssl.SSLSession.has_ticket"]], "hostname_checks_common_name (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.hostname_checks_common_name"]], "id (ssl.sslsession \u7684\u5c6c\u6027)": [[341, "ssl.SSLSession.id"]], "keylog_filename (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.keylog_filename"]], "library (ssl.sslerror \u7684\u5c6c\u6027)": [[341, "ssl.SSLError.library"]], "load_cert_chain() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.load_cert_chain"]], "load_default_certs() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.load_default_certs"]], "load_dh_params() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.load_dh_params"]], "load_verify_locations() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.load_verify_locations"]], "maximum_version (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.maximum_version"]], "minimum_version (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.minimum_version"]], "num_tickets (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.num_tickets"]], "options (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.options"]], "pending (ssl.memorybio \u7684\u5c6c\u6027)": [[341, "ssl.MemoryBIO.pending"]], "pending() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.pending"]], "post_handshake_auth (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.post_handshake_auth"]], "protocol (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.protocol"]], "read() (ssl.memorybio \u7684\u65b9\u6cd5)": [[341, "ssl.MemoryBIO.read"]], "read() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.read"]], "reason (ssl.sslerror \u7684\u5c6c\u6027)": [[341, "ssl.SSLError.reason"]], "security_level (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.security_level"]], "selected_alpn_protocol() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.selected_alpn_protocol"]], "selected_npn_protocol() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.selected_npn_protocol"]], "server_hostname (ssl.sslsocket \u7684\u5c6c\u6027)": [[341, "ssl.SSLSocket.server_hostname"]], "server_side (ssl.sslsocket \u7684\u5c6c\u6027)": [[341, "ssl.SSLSocket.server_side"]], "session (ssl.sslsocket \u7684\u5c6c\u6027)": [[341, "ssl.SSLSocket.session"]], "session_reused (ssl.sslsocket \u7684\u5c6c\u6027)": [[341, "ssl.SSLSocket.session_reused"]], "session_stats() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.session_stats"]], "set_alpn_protocols() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.set_alpn_protocols"]], "set_ciphers() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.set_ciphers"]], "set_default_verify_paths() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.set_default_verify_paths"]], "set_ecdh_curve() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.set_ecdh_curve"]], "set_npn_protocols() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.set_npn_protocols"]], "set_servername_callback (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.set_servername_callback"]], "shared_ciphers() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.shared_ciphers"]], "sni_callback (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.sni_callback"]], "sslobject_class (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.sslobject_class"]], "sslsocket_class (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.sslsocket_class"]], "ticket_lifetime_hint (ssl.sslsession \u7684\u5c6c\u6027)": [[341, "ssl.SSLSession.ticket_lifetime_hint"]], "time (ssl.sslsession \u7684\u5c6c\u6027)": [[341, "ssl.SSLSession.time"]], "timeout (ssl.sslsession \u7684\u5c6c\u6027)": [[341, "ssl.SSLSession.timeout"]], "unwrap() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.unwrap"]], "verify_client_post_handshake() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.verify_client_post_handshake"]], "verify_code (ssl.sslcertverificationerror \u7684\u5c6c\u6027)": [[341, "ssl.SSLCertVerificationError.verify_code"]], "verify_flags (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.verify_flags"]], "verify_message (ssl.sslcertverificationerror \u7684\u5c6c\u6027)": [[341, "ssl.SSLCertVerificationError.verify_message"]], "verify_mode (ssl.sslcontext \u7684\u5c6c\u6027)": [[341, "ssl.SSLContext.verify_mode"]], "version() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.version"]], "wrap_bio() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.wrap_bio"]], "wrap_socket() (ssl.sslcontext \u7684\u65b9\u6cd5)": [[341, "ssl.SSLContext.wrap_socket"]], "write() (ssl.memorybio \u7684\u65b9\u6cd5)": [[341, "ssl.MemoryBIO.write"]], "write() (ssl.sslsocket \u7684\u65b9\u6cd5)": [[341, "ssl.SSLSocket.write"]], "write_eof() (ssl.memorybio \u7684\u65b9\u6cd5)": [[341, "ssl.MemoryBIO.write_eof"]], "\uff08\u7528\u65bc ssl \u6a21\u7d44\uff09": [[341, "index-0"]], "file_attribute_archive (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_ARCHIVE"]], "file_attribute_compressed (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_COMPRESSED"]], "file_attribute_device (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_DEVICE"]], "file_attribute_directory (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_DIRECTORY"]], "file_attribute_encrypted (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_ENCRYPTED"]], "file_attribute_hidden (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_HIDDEN"]], "file_attribute_integrity_stream (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_INTEGRITY_STREAM"]], "file_attribute_normal (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_NORMAL"]], "file_attribute_not_content_indexed (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_NOT_CONTENT_INDEXED"]], "file_attribute_no_scrub_data (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_NO_SCRUB_DATA"]], "file_attribute_offline (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_OFFLINE"]], "file_attribute_readonly (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_READONLY"]], "file_attribute_reparse_point (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_REPARSE_POINT"]], "file_attribute_sparse_file (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_SPARSE_FILE"]], "file_attribute_system (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_SYSTEM"]], "file_attribute_temporary (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_TEMPORARY"]], "file_attribute_virtual (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.FILE_ATTRIBUTE_VIRTUAL"]], "io_reparse_tag_appexeclink (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.IO_REPARSE_TAG_APPEXECLINK"]], "io_reparse_tag_mount_point (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.IO_REPARSE_TAG_MOUNT_POINT"]], "io_reparse_tag_symlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.IO_REPARSE_TAG_SYMLINK"]], "sf_append (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.SF_APPEND"]], "sf_archived (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.SF_ARCHIVED"]], "sf_immutable (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.SF_IMMUTABLE"]], "sf_nounlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.SF_NOUNLINK"]], "sf_snapshot (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.SF_SNAPSHOT"]], "st_atime (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_ATIME"]], "st_ctime (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_CTIME"]], "st_dev (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_DEV"]], "st_gid (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_GID"]], "st_ino (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_INO"]], "st_mode (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_MODE"]], "st_mtime (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_MTIME"]], "st_nlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_NLINK"]], "st_size (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_SIZE"]], "st_uid (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.ST_UID"]], "s_enfmt (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ENFMT"]], "s_iexec (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IEXEC"]], "s_ifblk (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFBLK"]], "s_ifchr (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFCHR"]], "s_ifdir (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFDIR"]], "s_ifdoor (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFDOOR"]], "s_ififo (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFIFO"]], "s_iflnk (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFLNK"]], "s_ifmt() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFMT"]], "s_ifport (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFPORT"]], "s_ifreg (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFREG"]], "s_ifsock (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFSOCK"]], "s_ifwht (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IFWHT"]], "s_imode() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IMODE"]], "s_iread (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IREAD"]], "s_irgrp (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IRGRP"]], "s_iroth (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IROTH"]], "s_irusr (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IRUSR"]], "s_irwxg (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IRWXG"]], "s_irwxo (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IRWXO"]], "s_irwxu (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IRWXU"]], "s_isblk() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISBLK"]], "s_ischr() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISCHR"]], "s_isdir() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISDIR"]], "s_isdoor() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISDOOR"]], "s_isfifo() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISFIFO"]], "s_isgid (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISGID"]], "s_islnk() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISLNK"]], "s_isport() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISPORT"]], "s_isreg() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISREG"]], "s_issock() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISSOCK"]], "s_isuid (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISUID"]], "s_isvtx (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISVTX"]], "s_iswht() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_ISWHT"]], "s_iwgrp (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IWGRP"]], "s_iwoth (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IWOTH"]], "s_iwrite (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IWRITE"]], "s_iwusr (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IWUSR"]], "s_ixgrp (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IXGRP"]], "s_ixoth (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IXOTH"]], "s_ixusr (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.S_IXUSR"]], "uf_append (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.UF_APPEND"]], "uf_compressed (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.UF_COMPRESSED"]], "uf_hidden (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.UF_HIDDEN"]], "uf_immutable (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.UF_IMMUTABLE"]], "uf_nodump (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.UF_NODUMP"]], "uf_nounlink (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.UF_NOUNLINK"]], "uf_opaque (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.UF_OPAQUE"]], "filemode() (\u65bc stat \u6a21\u7d44\u4e2d)": [[342, "stat.filemode"]], "normaldist (statistics \u4e2d\u7684\u985e\u5225)": [[343, "statistics.NormalDist"]], "statisticserror": [[343, "statistics.StatisticsError"]], "cdf() (statistics.normaldist \u7684\u65b9\u6cd5)": [[343, "statistics.NormalDist.cdf"]], "correlation() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.correlation"]], "covariance() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.covariance"]], "fmean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.fmean"]], "from_samples() (statistics.normaldist \u7684\u985e\u5225\u65b9\u6cd5)": [[343, "statistics.NormalDist.from_samples"]], "geometric_mean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.geometric_mean"]], "harmonic_mean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.harmonic_mean"]], "inv_cdf() (statistics.normaldist \u7684\u65b9\u6cd5)": [[343, "statistics.NormalDist.inv_cdf"]], "linear_regression() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.linear_regression"]], "mean (statistics.normaldist \u7684\u5c6c\u6027)": [[343, "statistics.NormalDist.mean"]], "mean() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.mean"]], "median (statistics.normaldist \u7684\u5c6c\u6027)": [[343, "statistics.NormalDist.median"]], "median() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.median"]], "median_grouped() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.median_grouped"]], "median_high() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.median_high"]], "median_low() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.median_low"]], "mode (statistics.normaldist \u7684\u5c6c\u6027)": [[343, "statistics.NormalDist.mode"]], "mode() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.mode"]], "multimode() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.multimode"]], "overlap() (statistics.normaldist \u7684\u65b9\u6cd5)": [[343, "statistics.NormalDist.overlap"]], "pdf() (statistics.normaldist \u7684\u65b9\u6cd5)": [[343, "statistics.NormalDist.pdf"]], "pstdev() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.pstdev"]], "pvariance() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.pvariance"]], "quantiles() (statistics.normaldist \u7684\u65b9\u6cd5)": [[343, "statistics.NormalDist.quantiles"]], "quantiles() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.quantiles"]], "samples() (statistics.normaldist \u7684\u65b9\u6cd5)": [[343, "statistics.NormalDist.samples"]], "statistics": [[343, "module-statistics"]], "stdev (statistics.normaldist \u7684\u5c6c\u6027)": [[343, "statistics.NormalDist.stdev"]], "stdev() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.stdev"]], "variance (statistics.normaldist \u7684\u5c6c\u6027)": [[343, "statistics.NormalDist.variance"]], "variance() (\u65bc statistics \u6a21\u7d44\u4e2d)": [[343, "statistics.variance"]], "zscore() (statistics.normaldist \u7684\u65b9\u6cd5)": [[343, "statistics.NormalDist.zscore"]], "!=": [[344, "index-7"], [430, "index-77"]], "& \uff08\u548c\u865f\uff09": [[344, "index-16"], [430, "index-74"]], "//": [[344, "index-13"], [430, "index-67"]], "< \uff08\u5c0f\u65bc\uff09": [[344, "index-7"], [345, "index-3"], [347, "index-1"], [430, "index-77"]], "<<": [[344, "index-16"], [430, "index-71"]], "<=": [[344, "index-7"], [430, "index-77"]], "==": [[344, "index-7"], [430, "index-77"]], "> \uff08\u5927\u65bc\uff09": [[344, "index-7"], [345, "index-3"], [347, "index-1"], [430, "index-77"]], ">=": [[344, "index-7"], [430, "index-77"]], ">>": [[344, "index-16"], [430, "index-71"]], "alias\uff08\u5225\u540d\uff09": [[344, "index-56"]], "boolean\uff08\u5e03\u6797\uff09": [[344, "index-1"], [344, "index-11"], [344, "index-17"], [344, "index-5"], [428, "index-12"], [430, "index-82"]], "c": [[344, "index-11"], [347, "index-0"], [428, "index-13"], [428, "index-4"], [428, "index-42"], [430, "index-77"], [435, "index-23"]], "false": [[344, "index-17"], [344, "index-4"], [344, "index-1"], [428, "index-12"]], "false\uff08\u5167\u5efa\u7269\u4ef6\uff09": [[344, "index-3"]], "genericalias\uff08\u6cdb\u578b\u5225\u540d\uff09": [[344, "index-56"]], "generic\uff08\u6cdb\u578b\uff09": [[344, "index-56"], [428, "index-5"]], "none\uff08\u5167\u5efa\u7269\u4ef6\uff09": [[344, "index-3"]], "pep 237": [[344, "index-71"], [344, "index-72"], [464, "index-10"], [466, "index-1"], [466, "index-16"], [470, "index-1"]], "pep 3118": [[344, "index-50"], [468, "index-15"], [470, "index-39"], [476, "index-4"], [476, "index-53"], [476, "index-61"], [481, "index-8"], [483, "index-250"], [483, "index-257"], [483, "index-302"]], "pep 461": [[344, "index-49"], [478, "index-7"], [478, "index-8"]], "true": [[344, "index-17"], [344, "index-4"], [344, "index-2"], [428, "index-12"]], "union\uff08\u806f\u96c6\uff09": [[344, "index-59"], [344, "index-59"]], "__args__ (genericalias \u7684\u5c6c\u6027)": [[344, "genericalias.__args__"]], "__bases__ (class \u7684\u5c6c\u6027)": [[344, "class.__bases__"]], "__class__ (instance \u7684\u5c6c\u6027)": [[344, "instance.__class__"]], "__code__\uff08\u51fd\u5f0f\u7269\u4ef6\u5c6c\u6027\uff09": [[344, "index-63"]], "__dict__ (object \u7684\u5c6c\u6027)": [[344, "object.__dict__"]], "__enter__() (contextmanager \u7684\u65b9\u6cd5)": [[344, "contextmanager.__enter__"]], "__eq__() (memoryview \u7684\u65b9\u6cd5)": [[344, "memoryview.__eq__"]], "__eq__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[344, "index-9"]], "__exit__() (contextmanager \u7684\u65b9\u6cd5)": [[344, "contextmanager.__exit__"]], "__ge__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[344, "index-9"]], "__gt__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[344, "index-9"]], "__iter__() (container \u7684\u65b9\u6cd5)": [[344, "container.__iter__"]], "__iter__() (iterator \u7684\u65b9\u6cd5)": [[344, "iterator.__iter__"]], "__le__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[344, "index-9"]], "__lt__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[344, "index-9"]], "__missing__()": [[344, "index-53"]], "__mro__ (class \u7684\u5c6c\u6027)": [[344, "class.__mro__"]], "__name__ (definition \u7684\u5c6c\u6027)": [[344, "definition.__name__"]], "__ne__()\uff08\u5be6\u4f8b\u65b9\u6cd5\uff09": [[344, "index-9"]], "__next__() (iterator \u7684\u65b9\u6cd5)": [[344, "iterator.__next__"]], "__origin__ (genericalias \u7684\u5c6c\u6027)": [[344, "genericalias.__origin__"]], "__parameters__ (genericalias \u7684\u5c6c\u6027)": [[344, "genericalias.__parameters__"]], "__qualname__ (definition \u7684\u5c6c\u6027)": [[344, "definition.__qualname__"]], "__subclasses__() (class \u7684\u65b9\u6cd5)": [[344, "class.__subclasses__"]], "__type_params__ (definition \u7684\u5c6c\u6027)": [[344, "definition.__type_params__"]], "__unpacked__ (genericalias \u7684\u5c6c\u6027)": [[344, "genericalias.__unpacked__"]], "add() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.add"]], "and": [[344, "index-4"], [344, "index-6"], [430, "index-74"], [430, "index-84"]], "annotation\uff08\u8a3b\u8a18\uff09": [[344, "index-55"]], "append()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[344, "index-24"]], "arithmetic\uff08\u7b97\u8853\uff09": [[344, "index-13"]], "array\uff08\u9663\u5217\uff09": [[344, "index-40"], [428, "index-23"]], "as_integer_ratio() (float \u7684\u65b9\u6cd5)": [[344, "float.as_integer_ratio"]], "as_integer_ratio() (int \u7684\u65b9\u6cd5)": [[344, "int.as_integer_ratio"]], "assignment\uff08\u8ce6\u503c\uff09": [[344, "index-24"], [428, "index-22"], [428, "index-48"], [428, "index-52"], [436, "index-12"], [436, "index-14"], [436, "index-15"], [436, "index-4"], [436, "index-6"], [436, "index-8"], [436, "index-9"]], "binary operator\uff08\u4e8c\u5143\u904b\u7b97\u5b50\uff09": [[344, "index-13"], [430, "index-69"], [430, "index-70"]], "binary sequence types\uff08\u4e8c\u9032\u4f4d\u5e8f\u5217\u578b\u5225\uff09": [[344, "index-39"]], "binary\uff08\u4e8c\u9032\u4f4d\uff09": [[344, "index-12"], [347, "index-0"], [430, "index-64"], [430, "index-73"]], "bit_count() (int \u7684\u65b9\u6cd5)": [[344, "int.bit_count"]], "bit_length() (int \u7684\u65b9\u6cd5)": [[344, "int.bit_length"]], "bitwise\uff08\u4f4d\u5143\uff09": [[344, "index-16"], [430, "index-59"], [430, "index-73"], [430, "index-74"], [430, "index-75"], [430, "index-76"]], "buffer protocol\uff08\u7de9\u885d\u5340\u5354\u5b9a\uff09": [[344, "index-31"], [344, "index-39"]], "built-in\uff08\u5167\u5efa\uff09": [[344, "index-0"], [428, "index-43"]], "bytearray (%)": [[344, "index-45"]], "bytearray (\u5167\u5efa\u985e\u5225)": [[344, "bytearray"]], "bytearray.splitlines \u65b9\u6cd5": [[344, "index-44"]], "bytes (%)": [[344, "index-45"]], "bytes (\u5167\u5efa\u985e\u5225)": [[344, "bytes"]], "bytes.splitlines \u65b9\u6cd5": [[344, "index-44"]], "c_contiguous (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.c_contiguous"]], "capitalize() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.capitalize"]], "capitalize() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.capitalize"]], "capitalize() (str \u7684\u65b9\u6cd5)": [[344, "str.capitalize"]], "casefold() (str \u7684\u65b9\u6cd5)": [[344, "str.casefold"]], "cast() (memoryview \u7684\u65b9\u6cd5)": [[344, "memoryview.cast"]], "ceil()\uff08\u65bc math \u6a21\u7d44\uff09": [[344, "index-15"]], "center() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.center"]], "center() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.center"]], "center() (str \u7684\u65b9\u6cd5)": [[344, "str.center"]], "chaining\uff08\u93c8\u7d50\uff09": [[344, "index-7"], [436, "index-29"]], "clear() (dict \u7684\u65b9\u6cd5)": [[344, "dict.clear"]], "clear() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.clear"]], "clear()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[344, "index-24"]], "comparing\uff08\u6bd4\u8f03\uff09": [[344, "index-8"]], "comparisons\uff08\u6bd4\u8f03\uff09": [[344, "index-7"], [430, "index-78"]], "comparison\uff08\u6bd4\u8f03\uff09": [[344, "index-7"], [428, "index-79"], [430, "index-77"]], "complex\uff08\u8907\u6578\uff09": [[344, "index-13"], [428, "index-104"], [428, "index-14"]], "concatenation\uff08\u4e32\u63a5\uff09": [[344, "index-20"]], "conjugate()\uff08\u8907\u6578\u65b9\u6cd5\uff09": [[344, "index-14"]], "container\uff08\u5bb9\u5668\uff09": [[344, "index-18"], [428, "index-3"], [428, "index-47"]], "context management protocol\uff08\u60c5\u5883\u7ba1\u7406\u5354\u5b9a\uff09": [[344, "index-54"]], "context management\uff08\u60c5\u5883\u7ba1\u7406\uff09": [[344, "index-54"]], "contiguous (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.contiguous"]], "conversions\uff08\u8f49\u63db\uff09": [[344, "index-15"]], "copy() (dict \u7684\u65b9\u6cd5)": [[344, "dict.copy"]], "copy() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.copy"]], "copy()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[344, "index-24"]], "count() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.count"]], "count() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.count"]], "count() (str \u7684\u65b9\u6cd5)": [[344, "str.count"]], "count()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[344, "index-20"]], "decode() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.decode"]], "decode() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.decode"]], "del": [[344, "index-24"], [344, "index-52"], [428, "index-74"], [436, "index-21"]], "dict (\u5167\u5efa\u985e\u5225)": [[344, "dict"]], "difference() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.difference"]], "difference_update() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.difference_update"]], "discard() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.discard"]], "encode() (str \u7684\u65b9\u6cd5)": [[344, "str.encode"]], "endswith() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.endswith"]], "endswith() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.endswith"]], "endswith() (str \u7684\u65b9\u6cd5)": [[344, "str.endswith"]], "expandtabs() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.expandtabs"]], "expandtabs() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.expandtabs"]], "expandtabs() (str \u7684\u65b9\u6cd5)": [[344, "str.expandtabs"]], "extend()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[344, "index-24"]], "f_contiguous (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.f_contiguous"]], "find() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.find"]], "find() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.find"]], "find() (str \u7684\u65b9\u6cd5)": [[344, "str.find"]], "floating point\uff08\u6d6e\u9ede\u6578\uff09": [[344, "index-11"], [344, "index-12"]], "floor()\uff08\u65bc math \u6a21\u7d44\uff09": [[344, "index-15"]], "format (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.format"]], "format() (str \u7684\u65b9\u6cd5)": [[344, "str.format"]], "format_map() (str \u7684\u65b9\u6cd5)": [[344, "str.format_map"]], "formatting\uff08\u683c\u5f0f\u5316\uff09": [[344, "index-45"]], "formatting\uff08\u683c\u5f0f\u5316\uff09\u3001printf": [[344, "index-35"]], "formatting\uff08\u683c\u5f0f\u5316\uff09\u3001\u5b57\u4e32 (%)": [[344, "index-35"]], "from_bytes() (int \u7684\u985e\u5225\u65b9\u6cd5)": [[344, "int.from_bytes"]], "fromhex() (bytearray \u7684\u985e\u5225\u65b9\u6cd5)": [[344, "bytearray.fromhex"]], "fromhex() (bytes \u7684\u985e\u5225\u65b9\u6cd5)": [[344, "bytes.fromhex"]], "fromhex() (float \u7684\u985e\u5225\u65b9\u6cd5)": [[344, "float.fromhex"]], "fromkeys() (dict \u7684\u985e\u5225\u65b9\u6cd5)": [[344, "dict.fromkeys"]], "frozenset (\u5167\u5efa\u985e\u5225)": [[344, "frozenset"]], "get() (dict \u7684\u65b9\u6cd5)": [[344, "dict.get"]], "hex() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.hex"]], "hex() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.hex"]], "hex() (float \u7684\u65b9\u6cd5)": [[344, "float.hex"]], "hex() (memoryview \u7684\u65b9\u6cd5)": [[344, "memoryview.hex"]], "hexadecimal\uff08\u5341\u516d\u9032\u4f4d\uff09": [[344, "index-12"]], "if": [[344, "index-1"], [427, "index-18"], [427, "index-3"], [430, "index-12"], [430, "index-88"]], "immutable\uff08\u4e0d\u53ef\u8b8a\uff09": [[344, "index-22"], [428, "index-17"]], "in": [[344, "index-10"], [344, "index-20"], [427, "index-6"], [430, "index-80"]], "index() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.index"]], "index() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.index"]], "index() (str \u7684\u65b9\u6cd5)": [[344, "str.index"]], "index()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[344, "index-20"]], "insert()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[344, "index-24"]], "integer\uff08\u6574\u6578\uff09": [[344, "index-11"], [344, "index-12"], [344, "index-16"], [428, "index-10"], [428, "index-11"], [428, "index-19"]], "interpolation\uff08\u63d2\u503c\uff09": [[344, "index-45"]], "interpolation\uff08\u63d2\u503c\uff09\u3001printf": [[344, "index-35"]], "interpolation\uff08\u63d2\u503c\uff09\u3001\u5b57\u4e32 (%)": [[344, "index-35"]], "intersection() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.intersection"]], "intersection_update() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.intersection_update"]], "io.stringio": [[344, "index-29"]], "is": [[344, "index-7"], [430, "index-81"]], "is not": [[344, "index-7"], [430, "index-81"]], "is_integer() (float \u7684\u65b9\u6cd5)": [[344, "float.is_integer"]], "is_integer() (int \u7684\u65b9\u6cd5)": [[344, "int.is_integer"]], "isalnum() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.isalnum"]], "isalnum() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.isalnum"]], "isalnum() (str \u7684\u65b9\u6cd5)": [[344, "str.isalnum"]], "isalpha() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.isalpha"]], "isalpha() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.isalpha"]], "isalpha() (str \u7684\u65b9\u6cd5)": [[344, "str.isalpha"]], "isascii() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.isascii"]], "isascii() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.isascii"]], "isascii() (str \u7684\u65b9\u6cd5)": [[344, "str.isascii"]], "isdecimal() (str \u7684\u65b9\u6cd5)": [[344, "str.isdecimal"]], "isdigit() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.isdigit"]], "isdigit() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.isdigit"]], "isdigit() (str \u7684\u65b9\u6cd5)": [[344, "str.isdigit"]], "isdisjoint() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.isdisjoint"]], "isidentifier() (str \u7684\u65b9\u6cd5)": [[344, "str.isidentifier"]], "islower() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.islower"]], "islower() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.islower"]], "islower() (str \u7684\u65b9\u6cd5)": [[344, "str.islower"]], "isnumeric() (str \u7684\u65b9\u6cd5)": [[344, "str.isnumeric"]], "isprintable() (str \u7684\u65b9\u6cd5)": [[344, "str.isprintable"]], "isspace() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.isspace"]], "isspace() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.isspace"]], "isspace() (str \u7684\u65b9\u6cd5)": [[344, "str.isspace"]], "issubset() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.issubset"]], "issuperset() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.issuperset"]], "istitle() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.istitle"]], "istitle() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.istitle"]], "istitle() (str \u7684\u65b9\u6cd5)": [[344, "str.istitle"]], "isupper() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.isupper"]], "isupper() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.isupper"]], "isupper() (str \u7684\u65b9\u6cd5)": [[344, "str.isupper"]], "items() (dict \u7684\u65b9\u6cd5)": [[344, "dict.items"]], "itemsize (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.itemsize"]], "iteration over\uff08\u758a\u4ee3\u65bc\uff09": [[344, "index-18"]], "iteration\uff08\u758a\u4ee3\uff09": [[344, "index-18"]], "iterator protocol\uff08\u758a\u4ee3\u5668\u5354\u5b9a\uff09": [[344, "index-18"]], "join() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.join"]], "join() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.join"]], "join() (str \u7684\u65b9\u6cd5)": [[344, "str.join"]], "keys() (dict \u7684\u65b9\u6cd5)": [[344, "dict.keys"]], "language\uff08\u8a9e\u8a00\uff09": [[344, "index-11"], [428, "index-13"], [428, "index-4"], [428, "index-42"], [430, "index-77"]], "list (\u5167\u5efa\u985e\u5225)": [[344, "list"]], "literals\uff08\u5b57\u9762\u503c\uff09": [[344, "index-12"]], "ljust() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.ljust"]], "ljust() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.ljust"]], "ljust() (str \u7684\u65b9\u6cd5)": [[344, "str.ljust"]], "loop over\uff08\u8ff4\u5708\uff09": [[344, "index-21"]], "loop\uff08\u8ff4\u5708\uff09": [[344, "index-21"], [427, "index-4"], [427, "index-6"], [436, "index-30"], [436, "index-33"]], "lower() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.lower"]], "lower() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.lower"]], "lower() (str \u7684\u65b9\u6cd5)": [[344, "str.lower"]], "lstrip() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.lstrip"]], "lstrip() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.lstrip"]], "lstrip() (str \u7684\u65b9\u6cd5)": [[344, "str.lstrip"]], "maketrans() (bytearray \u7684\u975c\u614b\u65b9\u6cd5)": [[344, "bytearray.maketrans"]], "maketrans() (bytes \u7684\u975c\u614b\u65b9\u6cd5)": [[344, "bytes.maketrans"]], "maketrans() (str \u7684\u975c\u614b\u65b9\u6cd5)": [[344, "str.maketrans"]], "masking\uff08\u906e\u7f69\uff09": [[344, "index-16"]], "max": [[344, "index-20"]], "memoryview (\u5167\u5efa\u985e\u5225)": [[344, "memoryview"]], "methods\uff08\u65b9\u6cd5\uff09": [[344, "index-32"], [344, "index-43"]], "min": [[344, "index-20"]], "mro() (class \u7684\u65b9\u6cd5)": [[344, "class.mro"]], "mutable sequence\uff08\u53ef\u8b8a\u5e8f\u5217\uff09": [[344, "index-21"], [428, "index-22"]], "mutable\uff08\u53ef\u8b8a\uff09": [[344, "index-23"]], "nbytes (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.nbytes"]], "ndim (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.ndim"]], "not": [[344, "index-6"], [430, "index-83"]], "not in": [[344, "index-10"], [344, "index-20"], [430, "index-80"]], "obj (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.obj"]], "octal\uff08\u516b\u9032\u4f4d\uff09": [[344, "index-12"]], "operations on\uff08\u64cd\u4f5c\u65bc\uff09": [[344, "index-14"], [344, "index-16"], [344, "index-20"], [344, "index-24"], [344, "index-52"]], "operation\uff08\u64cd\u4f5c\uff09": [[344, "index-20"], [430, "index-58"], [430, "index-59"], [430, "index-64"], [430, "index-71"], [430, "index-73"], [430, "index-82"], [436, "index-20"]], "operator\uff08\u904b\u7b97\u5b50\uff09": [[344, "index-10"], [344, "index-13"], [344, "index-16"], [344, "index-20"], [344, "index-4"], [344, "index-6"], [344, "index-7"], [428, "index-71"], [430, "index-58"], [430, "index-60"], [430, "index-61"], [430, "index-62"], [430, "index-65"], [430, "index-66"], [430, "index-67"], [430, "index-68"], [430, "index-69"], [430, "index-70"], [430, "index-71"], [430, "index-74"], [430, "index-75"], [430, "index-76"], [430, "index-77"], [430, "index-80"], [430, "index-81"], [430, "index-83"], [430, "index-84"], [430, "index-85"], [430, "index-88"], [430, "index-97"]], "or": [[344, "index-4"], [344, "index-6"], [430, "index-75"], [430, "index-76"], [430, "index-85"]], "over mutable sequence\uff08\u65bc\u53ef\u8b8a\u5e8f\u5217\uff09": [[344, "index-21"]], "partition() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.partition"]], "partition() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.partition"]], "partition() (str \u7684\u65b9\u6cd5)": [[344, "str.partition"]], "pop() (dict \u7684\u65b9\u6cd5)": [[344, "dict.pop"]], "pop() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.pop"]], "pop()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[344, "index-24"]], "popitem() (dict \u7684\u65b9\u6cd5)": [[344, "dict.popitem"]], "printf \u98a8\u683c\u683c\u5f0f\u5316": [[344, "index-35"], [344, "index-45"]], "range": [[344, "index-27"], [427, "index-8"]], "range (\u5167\u5efa\u985e\u5225)": [[344, "range"]], "readonly (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.readonly"]], "release() (memoryview \u7684\u65b9\u6cd5)": [[344, "memoryview.release"]], "remove() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.remove"]], "remove()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[344, "index-24"]], "removeprefix() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.removeprefix"]], "removeprefix() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.removeprefix"]], "removeprefix() (str \u7684\u65b9\u6cd5)": [[344, "str.removeprefix"]], "removesuffix() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.removesuffix"]], "removesuffix() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.removesuffix"]], "removesuffix() (str \u7684\u65b9\u6cd5)": [[344, "str.removesuffix"]], "repetition\uff08\u91cd\u8907\uff09": [[344, "index-20"]], "replace() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.replace"]], "replace() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.replace"]], "replace() (str \u7684\u65b9\u6cd5)": [[344, "str.replace"]], "reverse()\uff08\u5e8f\u5217\u65b9\u6cd5\uff09": [[344, "index-24"]], "rfind() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.rfind"]], "rfind() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.rfind"]], "rfind() (str \u7684\u65b9\u6cd5)": [[344, "str.rfind"]], "rindex() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.rindex"]], "rindex() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.rindex"]], "rindex() (str \u7684\u65b9\u6cd5)": [[344, "str.rindex"]], "rjust() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.rjust"]], "rjust() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.rjust"]], "rjust() (str \u7684\u65b9\u6cd5)": [[344, "str.rjust"]], "rpartition() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.rpartition"]], "rpartition() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.rpartition"]], "rpartition() (str \u7684\u65b9\u6cd5)": [[344, "str.rpartition"]], "rsplit() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.rsplit"]], "rsplit() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.rsplit"]], "rsplit() (str \u7684\u65b9\u6cd5)": [[344, "str.rsplit"]], "rstrip() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.rstrip"]], "rstrip() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.rstrip"]], "rstrip() (str \u7684\u65b9\u6cd5)": [[344, "str.rstrip"]], "set (\u5167\u5efa\u985e\u5225)": [[344, "set"]], "setdefault() (dict \u7684\u65b9\u6cd5)": [[344, "dict.setdefault"]], "shape (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.shape"]], "shifting\uff08\u79fb\u4f4d\uff09": [[344, "index-16"]], "sort() (list \u7684\u65b9\u6cd5)": [[344, "list.sort"]], "space\uff08\u7a7a\u767d\uff09": [[344, "index-37"], [344, "index-47"], [435, "index-8"]], "split() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.split"]], "split() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.split"]], "split() (str \u7684\u65b9\u6cd5)": [[344, "str.split"]], "splitlines() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.splitlines"]], "splitlines() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.splitlines"]], "splitlines() (str \u7684\u65b9\u6cd5)": [[344, "str.splitlines"]], "sprintf \u98a8\u683c\u683c\u5f0f\u5316": [[344, "index-35"], [344, "index-45"]], "start (range \u7684\u5c6c\u6027)": [[344, "range.start"]], "startswith() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.startswith"]], "startswith() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.startswith"]], "startswith() (str \u7684\u65b9\u6cd5)": [[344, "str.startswith"]], "step (range \u7684\u5c6c\u6027)": [[344, "range.step"]], "stop (range \u7684\u5c6c\u6027)": [[344, "range.stop"]], "str (\u5167\u5efa\u985e\u5225)": [[344, "str"]], "str.splitlines \u65b9\u6cd5": [[344, "index-34"]], "strides (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.strides"]], "strip() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.strip"]], "strip() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.strip"]], "strip() (str \u7684\u65b9\u6cd5)": [[344, "str.strip"]], "str\uff08\u5167\u5efa\u985e\u5225\uff09": [[344, "index-28"], [344, "index-30"], [344, "index-31"]], "suboffsets (memoryview \u7684\u5c6c\u6027)": [[344, "memoryview.suboffsets"]], "subscript\uff08\u4e0b\u6a19\uff09": [[344, "index-20"], [344, "index-24"]], "swapcase() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.swapcase"]], "swapcase() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.swapcase"]], "swapcase() (str \u7684\u65b9\u6cd5)": [[344, "str.swapcase"]], "symmetric_difference() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.symmetric_difference"]], "symmetric_difference_update() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.symmetric_difference_update"]], "text sequence type\uff08\u6587\u5b57\u5e8f\u5217\u578b\u5225\uff09": [[344, "index-28"]], "title() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.title"]], "title() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.title"]], "title() (str \u7684\u65b9\u6cd5)": [[344, "str.title"]], "to_bytes() (int \u7684\u65b9\u6cd5)": [[344, "int.to_bytes"]], "tobytes() (memoryview \u7684\u65b9\u6cd5)": [[344, "memoryview.tobytes"]], "tolist() (memoryview \u7684\u65b9\u6cd5)": [[344, "memoryview.tolist"]], "toreadonly() (memoryview \u7684\u65b9\u6cd5)": [[344, "memoryview.toreadonly"]], "translate() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.translate"]], "translate() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.translate"]], "translate() (str \u7684\u65b9\u6cd5)": [[344, "str.translate"]], "trunc()\uff08\u65bc math \u6a21\u7d44\uff09": [[344, "index-15"]], "truth\uff08\u771f\uff09": [[344, "index-1"]], "tuple (\u5167\u5efa\u985e\u5225)": [[344, "tuple"]], "type annotation\uff08\u578b\u5225\u8a3b\u8a18\uff09\uff1btype hint\uff08\u578b\u5225\u63d0\u793a\uff09": [[344, "index-55"]], "unary operator\uff08\u4e00\u5143\u904b\u7b97\u5b50\uff09": [[344, "index-13"], [430, "index-60"], [430, "index-61"]], "union() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.union"]], "update() (dict \u7684\u65b9\u6cd5)": [[344, "dict.update"]], "update() (frozenset \u7684\u65b9\u6cd5)": [[344, "frozenset.update"]], "upper() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.upper"]], "upper() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.upper"]], "upper() (str \u7684\u65b9\u6cd5)": [[344, "str.upper"]], "value": [[344, "index-1"]], "values": [[344, "index-17"], [436, "index-3"]], "values() (dict \u7684\u65b9\u6cd5)": [[344, "dict.values"]], "while": [[344, "index-1"], [427, "index-4"], [436, "index-30"], [436, "index-33"]], "zfill() (bytearray \u7684\u65b9\u6cd5)": [[344, "bytearray.zfill"]], "zfill() (bytes \u7684\u65b9\u6cd5)": [[344, "bytes.zfill"]], "zfill() (str \u7684\u65b9\u6cd5)": [[344, "str.zfill"]], "\u65bc printf \u98a8\u683c\u683c\u5f0f\u5316": [[344, "index-36"], [344, "index-37"], [344, "index-46"], [344, "index-47"]], "\uff08\u4ea6\u8acb\u898b string\uff09": [[344, "index-28"]], ", \uff08\u9017\u865f\uff09": [[345, "index-8"], [427, "index-16"], [427, "index-28"], [427, "index-42"], [430, "index-10"], [430, "index-15"], [430, "index-16"], [430, "index-17"], [430, "index-44"], [430, "index-47"], [430, "index-91"], [436, "index-18"], [436, "index-34"], [436, "index-43"], [436, "index-45"], [436, "index-6"]], "= \uff08\u7b49\u65bc\uff09": [[345, "index-3"], [347, "index-1"], [427, "index-31"], [428, "index-86"], [430, "index-47"], [435, "index-25"], [436, "index-4"]], "formatter (string \u4e2d\u7684\u985e\u5225)": [[345, "string.Formatter"]], "pep 292": [[345, "index-23"], [466, "index-3"]], "pep 378": [[345, "index-21"], [469, "index-3"], [471, "index-1"]], "pep 682": [[345, "index-20"], [473, "index-104"]], "template (string \u4e2d\u7684\u985e\u5225)": [[345, "string.Template"]], "ascii_letters (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.ascii_letters"]], "ascii_lowercase (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.ascii_lowercase"]], "ascii_uppercase (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.ascii_uppercase"]], "capwords() (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.capwords"]], "check_unused_args() (string.formatter \u7684\u65b9\u6cd5)": [[345, "string.Formatter.check_unused_args"]], "convert_field() (string.formatter \u7684\u65b9\u6cd5)": [[345, "string.Formatter.convert_field"]], "digits (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.digits"]], "format() (string.formatter \u7684\u65b9\u6cd5)": [[345, "string.Formatter.format"]], "format_field() (string.formatter \u7684\u65b9\u6cd5)": [[345, "string.Formatter.format_field"]], "get_field() (string.formatter \u7684\u65b9\u6cd5)": [[345, "string.Formatter.get_field"]], "get_identifiers() (string.template \u7684\u65b9\u6cd5)": [[345, "string.Template.get_identifiers"]], "get_value() (string.formatter \u7684\u65b9\u6cd5)": [[345, "string.Formatter.get_value"]], "hexdigits (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.hexdigits"]], "is_valid() (string.template \u7684\u65b9\u6cd5)": [[345, "string.Template.is_valid"]], "octdigits (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.octdigits"]], "parse() (string.formatter \u7684\u65b9\u6cd5)": [[345, "string.Formatter.parse"]], "printable (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.printable"]], "punctuation (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.punctuation"]], "safe_substitute() (string.template \u7684\u65b9\u6cd5)": [[345, "string.Template.safe_substitute"]], "space": [[345, "index-4"]], "string": [[345, "module-string"]], "substitute() (string.template \u7684\u65b9\u6cd5)": [[345, "string.Template.substitute"]], "template (string.template \u7684\u5c6c\u6027)": [[345, "string.Template.template"]], "vformat() (string.formatter \u7684\u65b9\u6cd5)": [[345, "string.Formatter.vformat"]], "whitespace (\u65bc string \u6a21\u7d44\u4e2d)": [[345, "string.whitespace"]], "z": [[345, "index-5"]], "\u65bc template strings\uff08\u6a21\u677f\u5b57\u4e32\uff09": [[345, "index-13"]], "\u65bc\u5b57\u4e32\u683c\u5f0f\u5316": [[345, "index-10"], [345, "index-2"], [345, "index-3"], [345, "index-4"], [345, "index-5"], [345, "index-7"], [345, "index-8"]], "rfc 3454": [[346, "index-0"], [346, "index-1"], [483, "index-33"]], "in_table_a1() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_a1"]], "in_table_b1() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_b1"]], "in_table_c11() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c11"]], "in_table_c11_c12() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c11_c12"]], "in_table_c12() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c12"]], "in_table_c21() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c21"]], "in_table_c21_c22() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c21_c22"]], "in_table_c22() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c22"]], "in_table_c3() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c3"]], "in_table_c4() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c4"]], "in_table_c5() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c5"]], "in_table_c6() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c6"]], "in_table_c7() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c7"]], "in_table_c8() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c8"]], "in_table_c9() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_c9"]], "in_table_d1() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_d1"]], "in_table_d2() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.in_table_d2"]], "map_table_b2() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.map_table_b2"]], "map_table_b3() (\u65bc stringprep \u6a21\u7d44\u4e2d)": [[346, "stringprep.map_table_b3"]], "stringprep": [[346, "module-stringprep"]], "@ \uff08\u5728\uff09": [[347, "index-1"], [427, "index-29"], [427, "index-43"], [430, "index-66"]], "struct (struct \u4e2d\u7684\u985e\u5225)": [[347, "struct.Struct"]], "calcsize() (\u65bc struct \u6a21\u7d44\u4e2d)": [[347, "struct.calcsize"]], "format (struct.struct \u7684\u5c6c\u6027)": [[347, "struct.Struct.format"]], "iter_unpack() (struct.struct \u7684\u65b9\u6cd5)": [[347, "struct.Struct.iter_unpack"]], "iter_unpack() (\u65bc struct \u6a21\u7d44\u4e2d)": [[347, "struct.iter_unpack"]], "pack() (struct.struct \u7684\u65b9\u6cd5)": [[347, "struct.Struct.pack"]], "pack() (\u65bc struct \u6a21\u7d44\u4e2d)": [[347, "struct.pack"]], "pack_into() (struct.struct \u7684\u65b9\u6cd5)": [[347, "struct.Struct.pack_into"]], "pack_into() (\u65bc struct \u6a21\u7d44\u4e2d)": [[347, "struct.pack_into"]], "packing\uff08\u6253\u5305\uff09": [[347, "index-0"]], "size (struct.struct \u7684\u5c6c\u6027)": [[347, "struct.Struct.size"]], "structures\uff08\u7d50\u69cb\uff09": [[347, "index-0"]], "unpack() (struct.struct \u7684\u65b9\u6cd5)": [[347, "struct.Struct.unpack"]], "unpack() (\u65bc struct \u6a21\u7d44\u4e2d)": [[347, "struct.unpack"]], "unpack_from() (struct.struct \u7684\u65b9\u6cd5)": [[347, "struct.Struct.unpack_from"]], "unpack_from() (\u65bc struct \u6a21\u7d44\u4e2d)": [[347, "struct.unpack_from"]], "\u65bc struct format strings\uff08\u7d50\u69cb\u683c\u5f0f\u5b57\u4e32\uff09": [[347, "index-1"], [347, "index-2"], [347, "index-3"]], "above_normal_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.ABOVE_NORMAL_PRIORITY_CLASS"]], "below_normal_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.BELOW_NORMAL_PRIORITY_CLASS"]], "create_breakaway_from_job (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.CREATE_BREAKAWAY_FROM_JOB"]], "create_default_error_mode (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.CREATE_DEFAULT_ERROR_MODE"]], "create_new_console (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.CREATE_NEW_CONSOLE"]], "create_new_process_group (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.CREATE_NEW_PROCESS_GROUP"]], "create_no_window (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.CREATE_NO_WINDOW"]], "calledprocesserror": [[348, "subprocess.CalledProcessError"]], "completedprocess (subprocess \u4e2d\u7684\u985e\u5225)": [[348, "subprocess.CompletedProcess"]], "detached_process (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.DETACHED_PROCESS"]], "devnull (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.DEVNULL"]], "high_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.HIGH_PRIORITY_CLASS"]], "idle_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.IDLE_PRIORITY_CLASS"]], "normal_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.NORMAL_PRIORITY_CLASS"]], "pep 324": [[348, "index-0"], [466, "index-8"]], "pipe (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.PIPE"]], "popen (subprocess \u4e2d\u7684\u985e\u5225)": [[348, "subprocess.Popen"]], "realtime_priority_class (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.REALTIME_PRIORITY_CLASS"]], "startf_useshowwindow (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.STARTF_USESHOWWINDOW"]], "startf_usestdhandles (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.STARTF_USESTDHANDLES"]], "startupinfo (subprocess \u4e2d\u7684\u985e\u5225)": [[348, "subprocess.STARTUPINFO"]], "stdout (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.STDOUT"]], "std_error_handle (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.STD_ERROR_HANDLE"]], "std_input_handle (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.STD_INPUT_HANDLE"]], "std_output_handle (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.STD_OUTPUT_HANDLE"]], "sw_hide (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.SW_HIDE"]], "subprocesserror": [[348, "subprocess.SubprocessError"]], "systemroot": [[348, "index-4"]], "timeoutexpired": [[348, "subprocess.TimeoutExpired"]], "args (subprocess.completedprocess \u7684\u5c6c\u6027)": [[348, "subprocess.CompletedProcess.args"]], "args (subprocess.popen \u7684\u5c6c\u6027)": [[348, "subprocess.Popen.args"]], "call() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.call"]], "check_call() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.check_call"]], "check_output() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.check_output"]], "check_returncode() (subprocess.completedprocess \u7684\u65b9\u6cd5)": [[348, "subprocess.CompletedProcess.check_returncode"]], "cmd (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[348, "subprocess.CalledProcessError.cmd"]], "cmd (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[348, "subprocess.TimeoutExpired.cmd"]], "communicate() (subprocess.popen \u7684\u65b9\u6cd5)": [[348, "subprocess.Popen.communicate"]], "dwflags (subprocess.startupinfo \u7684\u5c6c\u6027)": [[348, "subprocess.STARTUPINFO.dwFlags"]], "getoutput() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.getoutput"]], "getstatusoutput() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.getstatusoutput"]], "hstderror (subprocess.startupinfo \u7684\u5c6c\u6027)": [[348, "subprocess.STARTUPINFO.hStdError"]], "hstdinput (subprocess.startupinfo \u7684\u5c6c\u6027)": [[348, "subprocess.STARTUPINFO.hStdInput"]], "hstdoutput (subprocess.startupinfo \u7684\u5c6c\u6027)": [[348, "subprocess.STARTUPINFO.hStdOutput"]], "kill() (subprocess.popen \u7684\u65b9\u6cd5)": [[348, "subprocess.Popen.kill"]], "lpattributelist (subprocess.startupinfo \u7684\u5c6c\u6027)": [[348, "subprocess.STARTUPINFO.lpAttributeList"]], "output (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[348, "subprocess.CalledProcessError.output"]], "output (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[348, "subprocess.TimeoutExpired.output"]], "pid (subprocess.popen \u7684\u5c6c\u6027)": [[348, "subprocess.Popen.pid"]], "poll() (subprocess.popen \u7684\u65b9\u6cd5)": [[348, "subprocess.Popen.poll"]], "returncode (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[348, "subprocess.CalledProcessError.returncode"]], "returncode (subprocess.completedprocess \u7684\u5c6c\u6027)": [[348, "subprocess.CompletedProcess.returncode"]], "returncode (subprocess.popen \u7684\u5c6c\u6027)": [[348, "subprocess.Popen.returncode"]], "run() (\u65bc subprocess \u6a21\u7d44\u4e2d)": [[348, "subprocess.run"]], "send_signal() (subprocess.popen \u7684\u65b9\u6cd5)": [[348, "subprocess.Popen.send_signal"]], "stderr (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[348, "subprocess.CalledProcessError.stderr"]], "stderr (subprocess.completedprocess \u7684\u5c6c\u6027)": [[348, "subprocess.CompletedProcess.stderr"]], "stderr (subprocess.popen \u7684\u5c6c\u6027)": [[348, "subprocess.Popen.stderr"]], "stderr (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[348, "subprocess.TimeoutExpired.stderr"]], "stdin (subprocess.popen \u7684\u5c6c\u6027)": [[348, "subprocess.Popen.stdin"]], "stdout (subprocess.calledprocesserror \u7684\u5c6c\u6027)": [[348, "subprocess.CalledProcessError.stdout"]], "stdout (subprocess.completedprocess \u7684\u5c6c\u6027)": [[348, "subprocess.CompletedProcess.stdout"]], "stdout (subprocess.popen \u7684\u5c6c\u6027)": [[348, "subprocess.Popen.stdout"]], "stdout (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[348, "subprocess.TimeoutExpired.stdout"]], "subprocess": [[348, "module-subprocess"]], "subprocess \u6a21\u7d44": [[348, "index-1"]], "terminate() (subprocess.popen \u7684\u65b9\u6cd5)": [[348, "subprocess.Popen.terminate"]], "timeout (subprocess.timeoutexpired \u7684\u5c6c\u6027)": [[348, "subprocess.TimeoutExpired.timeout"]], "wshowwindow (subprocess.startupinfo \u7684\u5c6c\u6027)": [[348, "subprocess.STARTUPINFO.wShowWindow"]], "wait() (subprocess.popen \u7684\u65b9\u6cd5)": [[348, "subprocess.Popen.wait"]], "audio_file_encoding_adpcm_g721 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_ADPCM_G721"]], "audio_file_encoding_adpcm_g722 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_ADPCM_G722"]], "audio_file_encoding_adpcm_g723_3 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_ADPCM_G723_3"]], "audio_file_encoding_adpcm_g723_5 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_ADPCM_G723_5"]], "audio_file_encoding_alaw_8 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_ALAW_8"]], "audio_file_encoding_double (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_DOUBLE"]], "audio_file_encoding_float (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_FLOAT"]], "audio_file_encoding_linear_16 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_LINEAR_16"]], "audio_file_encoding_linear_24 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_LINEAR_24"]], "audio_file_encoding_linear_32 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_LINEAR_32"]], "audio_file_encoding_linear_8 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_LINEAR_8"]], "audio_file_encoding_mulaw_8 (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_ENCODING_MULAW_8"]], "audio_file_magic (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.AUDIO_FILE_MAGIC"]], "pep 594#sunau": [[349, "index-2"]], "close() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.close"]], "close() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.close"]], "getcompname() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.getcompname"]], "getcomptype() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.getcomptype"]], "getframerate() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.getframerate"]], "getmark() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.getmark"]], "getmarkers() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.getmarkers"]], "getnchannels() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.getnchannels"]], "getnframes() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.getnframes"]], "getparams() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.getparams"]], "getsampwidth() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.getsampwidth"]], "open() (\u65bc sunau \u6a21\u7d44\u4e2d)": [[349, "sunau.open"]], "readframes() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.readframes"]], "rewind() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.rewind"]], "setcomptype() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.setcomptype"]], "setframerate() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.setframerate"]], "setnchannels() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.setnchannels"]], "setnframes() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.setnframes"]], "setparams() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.setparams"]], "setpos() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.setpos"]], "setsampwidth() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.setsampwidth"]], "sunau": [[349, "module-sunau"]], "tell() (sunau.au_read \u7684\u65b9\u6cd5)": [[349, "sunau.AU_read.tell"]], "tell() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.tell"]], "writeframes() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.writeframes"]], "writeframesraw() (sunau.au_write \u7684\u65b9\u6cd5)": [[349, "sunau.AU_write.writeframesraw"]], "class (symtable \u4e2d\u7684\u985e\u5225)": [[351, "symtable.Class"]], "function (symtable \u4e2d\u7684\u985e\u5225)": [[351, "symtable.Function"]], "symbol (symtable \u4e2d\u7684\u985e\u5225)": [[351, "symtable.Symbol"]], "symboltable (symtable \u4e2d\u7684\u985e\u5225)": [[351, "symtable.SymbolTable"]], "get_children() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.get_children"]], "get_frees() (symtable.function \u7684\u65b9\u6cd5)": [[351, "symtable.Function.get_frees"]], "get_globals() (symtable.function \u7684\u65b9\u6cd5)": [[351, "symtable.Function.get_globals"]], "get_id() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.get_id"]], "get_identifiers() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.get_identifiers"]], "get_lineno() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.get_lineno"]], "get_locals() (symtable.function \u7684\u65b9\u6cd5)": [[351, "symtable.Function.get_locals"]], "get_methods() (symtable.class \u7684\u65b9\u6cd5)": [[351, "symtable.Class.get_methods"]], "get_name() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.get_name"]], "get_name() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.get_name"]], "get_namespace() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.get_namespace"]], "get_namespaces() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.get_namespaces"]], "get_nonlocals() (symtable.function \u7684\u65b9\u6cd5)": [[351, "symtable.Function.get_nonlocals"]], "get_parameters() (symtable.function \u7684\u65b9\u6cd5)": [[351, "symtable.Function.get_parameters"]], "get_symbols() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.get_symbols"]], "get_type() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.get_type"]], "has_children() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.has_children"]], "is_annotated() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_annotated"]], "is_assigned() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_assigned"]], "is_declared_global() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_declared_global"]], "is_free() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_free"]], "is_global() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_global"]], "is_imported() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_imported"]], "is_local() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_local"]], "is_namespace() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_namespace"]], "is_nested() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.is_nested"]], "is_nonlocal() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_nonlocal"]], "is_optimized() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.is_optimized"]], "is_parameter() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_parameter"]], "is_referenced() (symtable.symbol \u7684\u65b9\u6cd5)": [[351, "symtable.Symbol.is_referenced"]], "lookup() (symtable.symboltable \u7684\u65b9\u6cd5)": [[351, "symtable.SymbolTable.lookup"]], "symtable": [[351, "module-symtable"]], "symtable() (\u65bc symtable \u6a21\u7d44\u4e2d)": [[351, "symtable.symtable"]], "pep 3149": [[352, "index-0"], [475, "index-6"], [483, "index-297"]], "pep 421": [[352, "index-15"], [352, "index-16"], [476, "index-58"]], "__breakpointhook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.__breakpointhook__"]], "__displayhook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.__displayhook__"]], "__excepthook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.__excepthook__"]], "__interactivehook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.__interactivehook__"]], "__stderr__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.__stderr__"]], "__stdin__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.__stdin__"]], "__stdout__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.__stdout__"]], "__unraisablehook__ (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.__unraisablehook__"]], "_clear_type_cache() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys._clear_type_cache"]], "_current_exceptions() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys._current_exceptions"]], "_current_frames() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys._current_frames"]], "_debugmallocstats() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys._debugmallocstats"]], "_emscripten_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys._emscripten_info"]], "_enablelegacywindowsfsencoding() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys._enablelegacywindowsfsencoding"]], "_getframe() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys._getframe"]], "_getframemodulename() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys._getframemodulename"]], "_xoptions (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys._xoptions"]], "abiflags (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.abiflags"]], "activate_stack_trampoline() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.activate_stack_trampoline"]], "addaudithook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.addaudithook"]], "algorithm (sys.hash_info \u7684\u5c6c\u6027)": [[352, "sys.hash_info.algorithm"]], "api_version (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.api_version"]], "argv (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.argv"]], "audit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.audit"]], "auditing": [[352, "index-2"]], "base_exec_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.base_exec_prefix"]], "base_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.base_prefix"]], "bits_per_digit (sys.int_info \u7684\u5c6c\u6027)": [[352, "sys.int_info.bits_per_digit"]], "breakpointhook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.breakpointhook"]], "builtin_module_names (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.builtin_module_names"]], "byteorder (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.byteorder"]], "bytes_warning (sys.flags \u7684\u5c6c\u6027)": [[352, "sys.flags.bytes_warning"]], "call_tracing() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.call_tracing"]], "copyright (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.copyright"]], "deactivate_stack_trampoline() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.deactivate_stack_trampoline"]], "debug (sys.flags \u7684\u5c6c\u6027)": [[352, "sys.flags.debug"]], "default_max_str_digits (sys.int_info \u7684\u5c6c\u6027)": [[352, "sys.int_info.default_max_str_digits"]], "dev_mode (sys.flags \u7684\u5c6c\u6027)": [[352, "sys.flags.dev_mode"]], "dig (sys.float_info \u7684\u5c6c\u6027)": [[352, "sys.float_info.dig"]], "displayhook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.displayhook"]], "dllhandle (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.dllhandle"]], "dont_write_bytecode (sys.flags \u7684\u5c6c\u6027)": [[352, "sys.flags.dont_write_bytecode"]], "dont_write_bytecode (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.dont_write_bytecode"]], "emscripten_version (sys._emscripten_info \u7684\u5c6c\u6027)": [[352, "sys._emscripten_info.emscripten_version"]], "epsilon (sys.float_info \u7684\u5c6c\u6027)": [[352, "sys.float_info.epsilon"]], "exc_info() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.exc_info"]], "excepthook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.excepthook"]], "exception() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.exception"]], "exec_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.exec_prefix"]], "executable (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.executable"]], "exit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.exit"]], "flags (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.flags"]], "float_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.float_info"]], "float_repr_style (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.float_repr_style"]], "get_asyncgen_hooks() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.get_asyncgen_hooks"]], "get_coroutine_origin_tracking_depth() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.get_coroutine_origin_tracking_depth"]], "get_int_max_str_digits() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.get_int_max_str_digits"]], "getallocatedblocks() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getallocatedblocks"]], "getandroidapilevel() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getandroidapilevel"]], "getdefaultencoding() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getdefaultencoding"]], "getdlopenflags() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getdlopenflags"]], "getfilesystemencodeerrors() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getfilesystemencodeerrors"]], "getfilesystemencoding() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getfilesystemencoding"]], "getprofile() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getprofile"]], "getrecursionlimit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getrecursionlimit"]], "getrefcount() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getrefcount"]], "getsizeof() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getsizeof"]], "getswitchinterval() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getswitchinterval"]], "gettrace() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.gettrace"]], "getunicodeinternedsize() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getunicodeinternedsize"]], "getwindowsversion() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.getwindowsversion"]], "hash_bits (sys.hash_info \u7684\u5c6c\u6027)": [[352, "sys.hash_info.hash_bits"]], "hash_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.hash_info"]], "hash_randomization (sys.flags \u7684\u5c6c\u6027)": [[352, "sys.flags.hash_randomization"]], "hexversion (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.hexversion"]], "ignore_environment (sys.flags \u7684\u5c6c\u6027)": [[352, "sys.flags.ignore_environment"]], "imag (sys.hash_info \u7684\u5c6c\u6027)": [[352, "sys.hash_info.imag"]], "implementation (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.implementation"]], "inf (sys.hash_info \u7684\u5c6c\u6027)": [[352, "sys.hash_info.inf"]], "inspect (sys.flags \u7684\u5c6c\u6027)": [[352, "sys.flags.inspect"]], "int_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.int_info"]], "int_max_str_digits (sys.flags \u7684\u5c6c\u6027)": [[352, "sys.flags.int_max_str_digits"]], "interactive (sys.flags \u7684\u5c6c\u6027)": [[352, "sys.flags.interactive"]], "intern() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.intern"]], "interpreter prompts\uff08\u76f4\u8b6f\u5668\u63d0\u793a\uff09": [[352, "index-27"]], "is_finalizing() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.is_finalizing"]], "is_stack_trampoline_active() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.is_stack_trampoline_active"]], "isolated (sys.flags \u7684\u5c6c\u6027)": [[352, "sys.flags.isolated"]], "last_exc (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.last_exc"]], "last_traceback (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.last_traceback"]], "last_type (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.last_type"]], "last_value (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.last_value"]], "lock (sys.thread_info \u7684\u5c6c\u6027)": [[352, "sys.thread_info.lock"]], "mant_dig (sys.float_info \u7684\u5c6c\u6027)": [[352, "sys.float_info.mant_dig"]], "max (sys.float_info \u7684\u5c6c\u6027)": [[352, "sys.float_info.max"]], "max_10_exp (sys.float_info \u7684\u5c6c\u6027)": [[352, "sys.float_info.max_10_exp"]], "max_exp (sys.float_info \u7684\u5c6c\u6027)": [[352, "sys.float_info.max_exp"]], "maxsize (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.maxsize"]], "maxunicode (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.maxunicode"]], "meta_path (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.meta_path"]], "min (sys.float_info \u7684\u5c6c\u6027)": [[352, "sys.float_info.min"]], "min_10_exp (sys.float_info \u7684\u5c6c\u6027)": [[352, "sys.float_info.min_10_exp"]], "min_exp (sys.float_info \u7684\u5c6c\u6027)": [[352, "sys.float_info.min_exp"]], "modules (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.modules"]], "modulus (sys.hash_info \u7684\u5c6c\u6027)": [[352, "sys.hash_info.modulus"]], "name (sys.thread_info \u7684\u5c6c\u6027)": [[352, "sys.thread_info.name"]], "nan (sys.hash_info \u7684\u5c6c\u6027)": [[352, "sys.hash_info.nan"]], "no_site (sys.flags \u7684\u5c6c\u6027)": [[352, "sys.flags.no_site"]], "no_user_site (sys.flags \u7684\u5c6c\u6027)": [[352, "sys.flags.no_user_site"]], "optimize (sys.flags \u7684\u5c6c\u6027)": [[352, "sys.flags.optimize"]], "orig_argv (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.orig_argv"]], "path (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.path"]], "path_hooks (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.path_hooks"]], "path_importer_cache (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.path_importer_cache"]], "platform (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.platform"]], "platlibdir (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.platlibdir"]], "prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.prefix"]], "profile function": [[352, "index-10"], [352, "index-28"], [365, "index-2"], [365, "index-3"]], "profiler": [[352, "index-10"], [352, "index-28"]], "prompts, interpreter\uff08\u63d0\u793a\u3001\u76f4\u8b6f\u5668\uff09": [[352, "index-27"]], "ps1 (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.ps1"]], "ps2 (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.ps2"]], "pthreads (sys._emscripten_info \u7684\u5c6c\u6027)": [[352, "sys._emscripten_info.pthreads"]], "pycache_prefix (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.pycache_prefix"]], "quiet (sys.flags \u7684\u5c6c\u6027)": [[352, "sys.flags.quiet"]], "radix (sys.float_info \u7684\u5c6c\u6027)": [[352, "sys.float_info.radix"]], "rounds (sys.float_info \u7684\u5c6c\u6027)": [[352, "sys.float_info.rounds"]], "runtime (sys._emscripten_info \u7684\u5c6c\u6027)": [[352, "sys._emscripten_info.runtime"]], "safe_path (sys.flags \u7684\u5c6c\u6027)": [[352, "sys.flags.safe_path"]], "seed_bits (sys.hash_info \u7684\u5c6c\u6027)": [[352, "sys.hash_info.seed_bits"]], "set_asyncgen_hooks() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.set_asyncgen_hooks"]], "set_coroutine_origin_tracking_depth() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.set_coroutine_origin_tracking_depth"]], "set_int_max_str_digits() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.set_int_max_str_digits"]], "setdlopenflags() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.setdlopenflags"]], "setprofile() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.setprofile"]], "setrecursionlimit() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.setrecursionlimit"]], "setswitchinterval() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.setswitchinterval"]], "settrace() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.settrace"]], "shared_memory (sys._emscripten_info \u7684\u5c6c\u6027)": [[352, "sys._emscripten_info.shared_memory"]], "sizeof_digit (sys.int_info \u7684\u5c6c\u6027)": [[352, "sys.int_info.sizeof_digit"]], "stderr (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.stderr"]], "stdin (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.stdin"]], "stdlib_module_names (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.stdlib_module_names"]], "stdout (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.stdout"]], "str_digits_check_threshold (sys.int_info \u7684\u5c6c\u6027)": [[352, "sys.int_info.str_digits_check_threshold"]], "thread_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.thread_info"]], "trace function": [[352, "index-11"], [352, "index-29"], [365, "index-0"], [365, "index-1"]], "traceback": [[352, "index-8"], [381, "index-0"], [381, "module-traceback"], [427, "index-11"], [428, "index-66"], [436, "index-28"]], "tracebacklimit (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.tracebacklimit"]], "unraisablehook() (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.unraisablehook"]], "utf8_mode (sys.flags \u7684\u5c6c\u6027)": [[352, "sys.flags.utf8_mode"]], "verbose (sys.flags \u7684\u5c6c\u6027)": [[352, "sys.flags.verbose"]], "version (sys.thread_info \u7684\u5c6c\u6027)": [[352, "sys.thread_info.version"]], "version (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.version"]], "version_info (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.version_info"]], "warn_default_encoding (sys.flags \u7684\u5c6c\u6027)": [[352, "sys.flags.warn_default_encoding"]], "warnoptions (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.warnoptions"]], "width (sys.hash_info \u7684\u5c6c\u6027)": [[352, "sys.hash_info.width"]], "winver (\u65bc sys \u6a21\u7d44\u4e2d)": [[352, "sys.winver"]], "branch (monitoring event)": [[353, "monitoring-event-BRANCH"]], "call (monitoring event)": [[353, "monitoring-event-CALL"]], "c_raise (monitoring event)": [[353, "monitoring-event-C_RAISE"]], "c_return (monitoring event)": [[353, "monitoring-event-C_RETURN"]], "disable (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[353, "sys.monitoring.DISABLE"]], "exception_handled (monitoring event)": [[353, "monitoring-event-EXCEPTION_HANDLED"]], "instruction (monitoring event)": [[353, "monitoring-event-INSTRUCTION"]], "jump (monitoring event)": [[353, "monitoring-event-JUMP"]], "line (monitoring event)": [[353, "monitoring-event-LINE"]], "missing (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[353, "sys.monitoring.MISSING"]], "no_events (monitoring event)": [[353, "monitoring-event-NO_EVENTS"]], "pep 380#use-of-stopiteration-to-return-values": [[353, "index-0"]], "py_resume (monitoring event)": [[353, "monitoring-event-PY_RESUME"]], "py_return (monitoring event)": [[353, "monitoring-event-PY_RETURN"]], "py_start (monitoring event)": [[353, "monitoring-event-PY_START"]], "py_throw (monitoring event)": [[353, "monitoring-event-PY_THROW"]], "py_unwind (monitoring event)": [[353, "monitoring-event-PY_UNWIND"]], "py_yield (monitoring event)": [[353, "monitoring-event-PY_YIELD"]], "raise (monitoring event)": [[353, "monitoring-event-RAISE"]], "reraise (monitoring event)": [[353, "monitoring-event-RERAISE"]], "stop_iteration (monitoring event)": [[353, "monitoring-event-STOP_ITERATION"]], "free_tool_id() (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[353, "sys.monitoring.free_tool_id"]], "get_events() (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[353, "sys.monitoring.get_events"]], "get_local_events() (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[353, "sys.monitoring.get_local_events"]], "get_tool() (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[353, "sys.monitoring.get_tool"]], "register_callback() (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[353, "sys.monitoring.register_callback"]], "restart_events() (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[353, "sys.monitoring.restart_events"]], "set_events() (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[353, "sys.monitoring.set_events"]], "set_local_events() (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[353, "sys.monitoring.set_local_events"]], "sys.monitoring": [[353, "module-sys.monitoring"]], "use_tool_id() (\u65bc sys.monitoring \u6a21\u7d44\u4e2d)": [[353, "sys.monitoring.use_tool_id"]], "_get_preferred_schemes() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[355, "sysconfig._get_preferred_schemes"]], "configuration information\uff08\u8a2d\u5b9a\u8cc7\u8a0a\uff09": [[355, "index-0"]], "get_config_h_filename() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[355, "sysconfig.get_config_h_filename"]], "get_config_var() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[355, "sysconfig.get_config_var"]], "get_config_vars() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[355, "sysconfig.get_config_vars"]], "get_default_scheme() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[355, "sysconfig.get_default_scheme"]], "get_makefile_filename() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[355, "sysconfig.get_makefile_filename"]], "get_path() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[355, "sysconfig.get_path"]], "get_path_names() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[355, "sysconfig.get_path_names"]], "get_paths() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[355, "sysconfig.get_paths"]], "get_platform() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[355, "sysconfig.get_platform"]], "get_preferred_scheme() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[355, "sysconfig.get_preferred_scheme"]], "get_python_version() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[355, "sysconfig.get_python_version"]], "get_scheme_names() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[355, "sysconfig.get_scheme_names"]], "is_python_build() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[355, "sysconfig.is_python_build"]], "parse_config_h() (\u65bc sysconfig \u6a21\u7d44\u4e2d)": [[355, "sysconfig.parse_config_h"]], "sysconfig": [[355, "module-sysconfig"]], "closelog() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[356, "syslog.closelog"]], "openlog() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[356, "syslog.openlog"]], "setlogmask() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[356, "syslog.setlogmask"]], "syslog": [[356, "module-syslog"]], "syslog() (\u65bc syslog \u6a21\u7d44\u4e2d)": [[356, "syslog.syslog"]], "nannynag": [[357, "tabnanny.NannyNag"]], "check() (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[357, "tabnanny.check"]], "filename_only (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[357, "tabnanny.filename_only"]], "process_tokens() (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[357, "tabnanny.process_tokens"]], "tabnanny": [[357, "module-tabnanny"]], "verbose (\u65bc tabnanny \u6a21\u7d44\u4e2d)": [[357, "tabnanny.verbose"]], "--create": [[358, "cmdoption-tarfile-create"], [422, "cmdoption-zipfile-create"]], "--extract": [[358, "cmdoption-tarfile-extract"], [422, "cmdoption-zipfile-extract"]], "--filter": [[358, "cmdoption-tarfile-filter"]], "--list": [[358, "cmdoption-tarfile-list"], [422, "cmdoption-zipfile-list"]], "--test": [[358, "cmdoption-tarfile-test"], [422, "cmdoption-zipfile-test"]], "--verbose": [[358, "cmdoption-tarfile-v"], [367, "cmdoption-timeit-v"], [388, "cmdoption-unittest-discover-v"]], "aregtype (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.AREGTYPE"]], "absolutelinkerror": [[358, "tarfile.AbsoluteLinkError"]], "absolutepatherror": [[358, "tarfile.AbsolutePathError"]], "blktype (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.BLKTYPE"]], "chrtype (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.CHRTYPE"]], "conttype (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.CONTTYPE"]], "compressionerror": [[358, "tarfile.CompressionError"]], "default_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.DEFAULT_FORMAT"]], "dirtype (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.DIRTYPE"]], "encoding (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.ENCODING"]], "extracterror": [[358, "tarfile.ExtractError"]], "fifotype (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.FIFOTYPE"]], "filtererror": [[358, "tarfile.FilterError"]], "gnutype_longlink (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.GNUTYPE_LONGLINK"]], "gnutype_longname (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.GNUTYPE_LONGNAME"]], "gnutype_sparse (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.GNUTYPE_SPARSE"]], "gnu_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.GNU_FORMAT"]], "headererror": [[358, "tarfile.HeaderError"]], "lnktype (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.LNKTYPE"]], "linkoutsidedestinationerror": [[358, "tarfile.LinkOutsideDestinationError"]], "outsidedestinationerror": [[358, "tarfile.OutsideDestinationError"]], "pax_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.PAX_FORMAT"]], "pep 706": [[358, "index-0"], [472, "index-40"], [473, "index-41"], [474, "index-22"], [481, "index-26"], [482, "index-29"]], "regtype (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.REGTYPE"]], "readerror": [[358, "tarfile.ReadError"]], "symtype (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.SYMTYPE"]], "specialfileerror": [[358, "tarfile.SpecialFileError"]], "streamerror": [[358, "tarfile.StreamError"]], "tarerror": [[358, "tarfile.TarError"]], "tarfile (tarfile \u4e2d\u7684\u985e\u5225)": [[358, "tarfile.TarFile"]], "tarinfo (tarfile \u4e2d\u7684\u985e\u5225)": [[358, "tarfile.TarInfo"]], "ustar_format (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.USTAR_FORMAT"]], "add() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[358, "tarfile.TarFile.add"]], "addfile() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[358, "tarfile.TarFile.addfile"]], "chksum (tarfile.tarinfo \u7684\u5c6c\u6027)": [[358, "tarfile.TarInfo.chksum"]], "close() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[358, "tarfile.TarFile.close"]], "data_filter() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.data_filter"]], "devmajor (tarfile.tarinfo \u7684\u5c6c\u6027)": [[358, "tarfile.TarInfo.devmajor"]], "devminor (tarfile.tarinfo \u7684\u5c6c\u6027)": [[358, "tarfile.TarInfo.devminor"]], "errorlevel (tarfile.tarfile \u7684\u5c6c\u6027)": [[358, "tarfile.TarFile.errorlevel"]], "extract() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[358, "tarfile.TarFile.extract"]], "extractall() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[358, "tarfile.TarFile.extractall"]], "extractfile() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[358, "tarfile.TarFile.extractfile"]], "extraction_filter (tarfile.tarfile \u7684\u5c6c\u6027)": [[358, "tarfile.TarFile.extraction_filter"]], "frombuf() (tarfile.tarinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[358, "tarfile.TarInfo.frombuf"]], "fromtarfile() (tarfile.tarinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[358, "tarfile.TarInfo.fromtarfile"]], "fully_trusted_filter() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.fully_trusted_filter"]], "getmember() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[358, "tarfile.TarFile.getmember"]], "getmembers() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[358, "tarfile.TarFile.getmembers"]], "getnames() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[358, "tarfile.TarFile.getnames"]], "gettarinfo() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[358, "tarfile.TarFile.gettarinfo"]], "gid (tarfile.tarinfo \u7684\u5c6c\u6027)": [[358, "tarfile.TarInfo.gid"]], "gname (tarfile.tarinfo \u7684\u5c6c\u6027)": [[358, "tarfile.TarInfo.gname"]], "is_tarfile() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.is_tarfile"]], "isblk() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[358, "tarfile.TarInfo.isblk"]], "ischr() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[358, "tarfile.TarInfo.ischr"]], "isdev() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[358, "tarfile.TarInfo.isdev"]], "isdir() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[358, "tarfile.TarInfo.isdir"]], "isfifo() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[358, "tarfile.TarInfo.isfifo"]], "isfile() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[358, "tarfile.TarInfo.isfile"]], "islnk() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[358, "tarfile.TarInfo.islnk"]], "isreg() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[358, "tarfile.TarInfo.isreg"]], "issym() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[358, "tarfile.TarInfo.issym"]], "linkname (tarfile.tarinfo \u7684\u5c6c\u6027)": [[358, "tarfile.TarInfo.linkname"]], "list() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[358, "tarfile.TarFile.list"]], "mode (tarfile.tarinfo \u7684\u5c6c\u6027)": [[358, "tarfile.TarInfo.mode"]], "mtime (tarfile.tarinfo \u7684\u5c6c\u6027)": [[358, "tarfile.TarInfo.mtime"]], "name (tarfile.tarinfo \u7684\u5c6c\u6027)": [[358, "tarfile.TarInfo.name"]], "next() (tarfile.tarfile \u7684\u65b9\u6cd5)": [[358, "tarfile.TarFile.next"]], "offset (tarfile.tarinfo \u7684\u5c6c\u6027)": [[358, "tarfile.TarInfo.offset"]], "offset_data (tarfile.tarinfo \u7684\u5c6c\u6027)": [[358, "tarfile.TarInfo.offset_data"]], "open() (tarfile.tarfile \u7684\u985e\u5225\u65b9\u6cd5)": [[358, "tarfile.TarFile.open"]], "open() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.open"]], "pax_headers (tarfile.tarfile \u7684\u5c6c\u6027)": [[358, "tarfile.TarFile.pax_headers"]], "pax_headers (tarfile.tarinfo \u7684\u5c6c\u6027)": [[358, "tarfile.TarInfo.pax_headers"]], "replace() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[358, "tarfile.TarInfo.replace"]], "size (tarfile.tarinfo \u7684\u5c6c\u6027)": [[358, "tarfile.TarInfo.size"]], "sparse (tarfile.tarinfo \u7684\u5c6c\u6027)": [[358, "tarfile.TarInfo.sparse"]], "tar_filter() (\u65bc tarfile \u6a21\u7d44\u4e2d)": [[358, "tarfile.tar_filter"]], "tarfile": [[358, "module-tarfile"]], "tarfile \u547d\u4ee4\u5217\u9078\u9805": [[358, "cmdoption-tarfile-c"], [358, "cmdoption-tarfile-create"], [358, "cmdoption-tarfile-e"], [358, "cmdoption-tarfile-extract"], [358, "cmdoption-tarfile-filter"], [358, "cmdoption-tarfile-l"], [358, "cmdoption-tarfile-list"], [358, "cmdoption-tarfile-t"], [358, "cmdoption-tarfile-test"], [358, "cmdoption-tarfile-v"]], "tarinfo (tarfile.filtererror \u7684\u5c6c\u6027)": [[358, "tarfile.FilterError.tarinfo"]], "tobuf() (tarfile.tarinfo \u7684\u65b9\u6cd5)": [[358, "tarfile.TarInfo.tobuf"]], "type (tarfile.tarinfo \u7684\u5c6c\u6027)": [[358, "tarfile.TarInfo.type"]], "uid (tarfile.tarinfo \u7684\u5c6c\u6027)": [[358, "tarfile.TarInfo.uid"]], "uname (tarfile.tarinfo \u7684\u5c6c\u6027)": [[358, "tarfile.TarInfo.uname"]], "pep 594#telnetlib": [[359, "index-5"]], "rfc 854": [[359, "index-2"], [359, "index-3"]], "telnet": [[359, "index-0"]], "telnet (telnetlib \u4e2d\u7684\u985e\u5225)": [[359, "telnetlib.Telnet"]], "close() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[359, "telnetlib.Telnet.close"]], "expect() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[359, "telnetlib.Telnet.expect"]], "fileno() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[359, "telnetlib.Telnet.fileno"]], "get_socket() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[359, "telnetlib.Telnet.get_socket"]], "interact() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[359, "telnetlib.Telnet.interact"]], "msg() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[359, "telnetlib.Telnet.msg"]], "mt_interact() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[359, "telnetlib.Telnet.mt_interact"]], "open() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[359, "telnetlib.Telnet.open"]], "read_all() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[359, "telnetlib.Telnet.read_all"]], "read_eager() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[359, "telnetlib.Telnet.read_eager"]], "read_lazy() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[359, "telnetlib.Telnet.read_lazy"]], "read_sb_data() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[359, "telnetlib.Telnet.read_sb_data"]], "read_some() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[359, "telnetlib.Telnet.read_some"]], "read_until() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[359, "telnetlib.Telnet.read_until"]], "read_very_eager() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[359, "telnetlib.Telnet.read_very_eager"]], "read_very_lazy() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[359, "telnetlib.Telnet.read_very_lazy"]], "set_debuglevel() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[359, "telnetlib.Telnet.set_debuglevel"]], "set_option_negotiation_callback() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[359, "telnetlib.Telnet.set_option_negotiation_callback"]], "telnetlib": [[359, "module-telnetlib"]], "write() (telnetlib.telnet \u7684\u65b9\u6cd5)": [[359, "telnetlib.Telnet.write"]], "namedtemporaryfile() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[360, "tempfile.NamedTemporaryFile"]], "spooledtemporaryfile (tempfile \u4e2d\u7684\u985e\u5225)": [[360, "tempfile.SpooledTemporaryFile"]], "temp": [[360, "index-8"], [461, "index-7"]], "tmp": [[360, "index-9"]], "tmpdir": [[360, "index-7"], [483, "index-50"]], "temporarydirectory (tempfile \u4e2d\u7684\u985e\u5225)": [[360, "tempfile.TemporaryDirectory"]], "temporaryfile() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[360, "tempfile.TemporaryFile"]], "cleanup() (tempfile.temporarydirectory \u7684\u65b9\u6cd5)": [[360, "tempfile.TemporaryDirectory.cleanup"]], "file name\uff08\u6a94\u6848\u540d\u7a31\uff09": [[360, "index-0"]], "gettempdir() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[360, "tempfile.gettempdir"]], "gettempdirb() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[360, "tempfile.gettempdirb"]], "gettempprefix() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[360, "tempfile.gettempprefix"]], "gettempprefixb() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[360, "tempfile.gettempprefixb"]], "mkdtemp() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[360, "tempfile.mkdtemp"]], "mkstemp() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[360, "tempfile.mkstemp"]], "mktemp() (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[360, "tempfile.mktemp"]], "name (tempfile.temporarydirectory \u7684\u5c6c\u6027)": [[360, "tempfile.TemporaryDirectory.name"]], "rollover() (tempfile.spooledtemporaryfile \u7684\u65b9\u6cd5)": [[360, "tempfile.SpooledTemporaryFile.rollover"]], "tempdir (\u65bc tempfile \u6a21\u7d44\u4e2d)": [[360, "tempfile.tempdir"]], "tempfile": [[360, "module-tempfile"]], "temporary\uff08\u81e8\u6642\uff09": [[360, "index-0"]], "tcsadrain (\u65bc termios \u6a21\u7d44\u4e2d)": [[361, "termios.TCSADRAIN"]], "tcsaflush (\u65bc termios \u6a21\u7d44\u4e2d)": [[361, "termios.TCSAFLUSH"]], "tcsanow (\u65bc termios \u6a21\u7d44\u4e2d)": [[361, "termios.TCSANOW"]], "tcdrain() (\u65bc termios \u6a21\u7d44\u4e2d)": [[361, "termios.tcdrain"]], "tcflow() (\u65bc termios \u6a21\u7d44\u4e2d)": [[361, "termios.tcflow"]], "tcflush() (\u65bc termios \u6a21\u7d44\u4e2d)": [[361, "termios.tcflush"]], "tcgetattr() (\u65bc termios \u6a21\u7d44\u4e2d)": [[361, "termios.tcgetattr"]], "tcgetwinsize() (\u65bc termios \u6a21\u7d44\u4e2d)": [[361, "termios.tcgetwinsize"]], "tcsendbreak() (\u65bc termios \u6a21\u7d44\u4e2d)": [[361, "termios.tcsendbreak"]], "tcsetattr() (\u65bc termios \u6a21\u7d44\u4e2d)": [[361, "termios.tcsetattr"]], "tcsetwinsize() (\u65bc termios \u6a21\u7d44\u4e2d)": [[361, "termios.tcsetwinsize"]], "termios": [[361, "module-termios"]], "tty": [[361, "index-0"], [383, "module-tty"]], "always_eq (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.ALWAYS_EQ"]], "bytecodetestcase (test.support.bytecode_helper \u4e2d\u7684\u985e\u5225)": [[362, "test.support.bytecode_helper.BytecodeTestCase"]], "cleanimport (test.support.import_helper \u4e2d\u7684\u985e\u5225)": [[362, "test.support.import_helper.CleanImport"]], "dirsonsyspath (test.support.import_helper \u4e2d\u7684\u985e\u5225)": [[362, "test.support.import_helper.DirsOnSysPath"]], "environmentvarguard (test.support.os_helper \u4e2d\u7684\u985e\u5225)": [[362, "test.support.os_helper.EnvironmentVarGuard"]], "fs_nonascii (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.FS_NONASCII"]], "fakepath (test.support.os_helper \u4e2d\u7684\u985e\u5225)": [[362, "test.support.os_helper.FakePath"]], "have_docstrings (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.HAVE_DOCSTRINGS"]], "internet_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.INTERNET_TIMEOUT"]], "ipv6_enabled (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.socket_helper.IPV6_ENABLED"]], "largest (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.LARGEST"]], "long_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.LONG_TIMEOUT"]], "loopback_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.LOOPBACK_TIMEOUT"]], "max_py_ssize_t (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.MAX_Py_ssize_t"]], "missing_c_docstrings (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.MISSING_C_DOCSTRINGS"]], "matcher (test.support \u4e2d\u7684\u985e\u5225)": [[362, "test.support.Matcher"]], "never_eq (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.NEVER_EQ"]], "pgo (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.PGO"]], "pipe_max_size (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.PIPE_MAX_SIZE"]], "pythonusersite": [[362, "index-2"]], "py_debug (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.Py_DEBUG"]], "resourcedenied": [[362, "test.support.ResourceDenied"]], "savedcwd (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.SAVEDCWD"]], "short_timeout (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.SHORT_TIMEOUT"]], "smallest (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.SMALLEST"]], "sock_max_size (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.SOCK_MAX_SIZE"]], "savesignals (test.support \u4e2d\u7684\u985e\u5225)": [[362, "test.support.SaveSignals"]], "suppresscrashreport (test.support \u4e2d\u7684\u985e\u5225)": [[362, "test.support.SuppressCrashReport"]], "testfn (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.TESTFN"]], "testfn_nonascii (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.TESTFN_NONASCII"]], "testfn_undecodable (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.TESTFN_UNDECODABLE"]], "testfn_unencodable (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.TESTFN_UNENCODABLE"]], "testfn_unicode (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.TESTFN_UNICODE"]], "test_data_dir (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.TEST_DATA_DIR"]], "test_home_dir (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.TEST_HOME_DIR"]], "test_http_url (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.TEST_HTTP_URL"]], "test_support_dir (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.TEST_SUPPORT_DIR"]], "testfailed": [[362, "test.support.TestFailed"]], "warningsrecorder (test.support.warnings_helper \u4e2d\u7684\u985e\u5225)": [[362, "test.support.warnings_helper.WarningsRecorder"]], "adjust_int_max_str_digits() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.adjust_int_max_str_digits"]], "anticipate_failure() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.anticipate_failure"]], "args_from_interpreter_flags() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.args_from_interpreter_flags"]], "assertinbytecode() (test.support.bytecode_helper.bytecodetestcase \u7684\u65b9\u6cd5)": [[362, "test.support.bytecode_helper.BytecodeTestCase.assertInBytecode"]], "assertnotinbytecode() (test.support.bytecode_helper.bytecodetestcase \u7684\u65b9\u6cd5)": [[362, "test.support.bytecode_helper.BytecodeTestCase.assertNotInBytecode"]], "assert_python_failure() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.script_helper.assert_python_failure"]], "assert_python_ok() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.script_helper.assert_python_ok"]], "bigaddrspacetest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.bigaddrspacetest"]], "bigmemtest() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.bigmemtest"]], "bind_port() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.socket_helper.bind_port"]], "bind_unix_socket() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.socket_helper.bind_unix_socket"]], "busy_retry() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.busy_retry"]], "calcobjsize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.calcobjsize"]], "calcvobjsize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.calcvobjsize"]], "can_symlink() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.can_symlink"]], "can_xattr() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.can_xattr"]], "captured_stderr() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.captured_stderr"]], "captured_stdin() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.captured_stdin"]], "captured_stdout() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.captured_stdout"]], "catch_threading_exception() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.threading_helper.catch_threading_exception"]], "catch_unraisable_exception() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.catch_unraisable_exception"]], "change_cwd() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.change_cwd"]], "check__all__() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.check__all__"]], "check_disallow_instantiation() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.check_disallow_instantiation"]], "check_free_after_iterating() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.check_free_after_iterating"]], "check_impl_detail() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.check_impl_detail"]], "check_no_resource_warning() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.warnings_helper.check_no_resource_warning"]], "check_syntax_error() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.check_syntax_error"]], "check_syntax_warning() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.warnings_helper.check_syntax_warning"]], "check_warnings() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.warnings_helper.check_warnings"]], "checksizeof() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.checksizeof"]], "cpython_only() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.cpython_only"]], "create_empty_file() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.create_empty_file"]], "detect_api_mismatch() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.detect_api_mismatch"]], "disable_faulthandler() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.disable_faulthandler"]], "disable_gc() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.disable_gc"]], "fd_count() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.fd_count"]], "find_unused_port() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.socket_helper.find_unused_port"]], "findfile() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.findfile"]], "flush_std_streams() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.flush_std_streams"]], "forget() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.import_helper.forget"]], "fs_is_case_insensitive() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.fs_is_case_insensitive"]], "gc_collect() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.gc_collect"]], "get_attribute() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.get_attribute"]], "get_disassembly_as_string() (test.support.bytecode_helper.bytecodetestcase \u7684\u65b9\u6cd5)": [[362, "test.support.bytecode_helper.BytecodeTestCase.get_disassembly_as_string"]], "get_original_stdout() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.get_original_stdout"]], "get_pagesize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.get_pagesize"]], "ignore_warnings() (\u65bc test.support.warnings_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.warnings_helper.ignore_warnings"]], "impl_detail() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.impl_detail"]], "import_fresh_module() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.import_helper.import_fresh_module"]], "import_module() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.import_helper.import_module"]], "interpreter_requires_environment() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.script_helper.interpreter_requires_environment"]], "is_android (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.is_android"]], "is_jython (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.is_jython"]], "is_resource_enabled() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.is_resource_enabled"]], "join_thread() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.threading_helper.join_thread"]], "kill_python() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.script_helper.kill_python"]], "load_package_tests() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.load_package_tests"]], "make_bad_fd() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.make_bad_fd"]], "make_legacy_pyc() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.import_helper.make_legacy_pyc"]], "make_pkg() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.script_helper.make_pkg"]], "make_script() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.script_helper.make_script"]], "make_zip_pkg() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.script_helper.make_zip_pkg"]], "make_zip_script() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.script_helper.make_zip_script"]], "match_value() (test.support.matcher \u7684\u65b9\u6cd5)": [[362, "test.support.Matcher.match_value"]], "matches() (test.support.matcher \u7684\u65b9\u6cd5)": [[362, "test.support.Matcher.matches"]], "max_memuse (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.max_memuse"]], "missing_compiler_executable() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.missing_compiler_executable"]], "modules_cleanup() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.import_helper.modules_cleanup"]], "modules_setup() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.import_helper.modules_setup"]], "no_tracing() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.no_tracing"]], "open_urlresource() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.open_urlresource"]], "optim_args_from_interpreter_flags() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.optim_args_from_interpreter_flags"]], "patch() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.patch"]], "print_warning() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.print_warning"]], "python_is_optimized() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.python_is_optimized"]], "real_max_memuse (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.real_max_memuse"]], "reap_children() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.reap_children"]], "reap_threads() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.threading_helper.reap_threads"]], "record_original_stdout() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.record_original_stdout"]], "refcount_test() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.refcount_test"]], "requires() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.requires"]], "requires_ieee_754() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.requires_IEEE_754"]], "requires_bz2() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.requires_bz2"]], "requires_docstrings() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.requires_docstrings"]], "requires_freebsd_version() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.requires_freebsd_version"]], "requires_gzip() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.requires_gzip"]], "requires_limited_api() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.requires_limited_api"]], "requires_linux_version() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.requires_linux_version"]], "requires_lzma() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.requires_lzma"]], "requires_mac_version() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.requires_mac_version"]], "requires_resource() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.requires_resource"]], "requires_zlib() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.requires_zlib"]], "restore() (test.support.savesignals \u7684\u65b9\u6cd5)": [[362, "test.support.SaveSignals.restore"]], "rmdir() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.rmdir"]], "rmtree() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.rmtree"]], "run_in_subinterp() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.run_in_subinterp"]], "run_python_until_end() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.script_helper.run_python_until_end"]], "run_with_locale() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.run_with_locale"]], "run_with_tz() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.run_with_tz"]], "save() (test.support.savesignals \u7684\u65b9\u6cd5)": [[362, "test.support.SaveSignals.save"]], "set() (test.support.os_helper.environmentvarguard \u7684\u65b9\u6cd5)": [[362, "test.support.os_helper.EnvironmentVarGuard.set"]], "set_memlimit() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.set_memlimit"]], "setswitchinterval() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.setswitchinterval"]], "skip_if_broken_multiprocessing_synchronize() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.skip_if_broken_multiprocessing_synchronize"]], "skip_unless_bind_unix_socket() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.socket_helper.skip_unless_bind_unix_socket"]], "skip_unless_symlink() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.skip_unless_symlink"]], "skip_unless_xattr() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.skip_unless_xattr"]], "sleeping_retry() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.sleeping_retry"]], "sortdict() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.sortdict"]], "spawn_python() (\u65bc test.support.script_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.script_helper.spawn_python"]], "start_threads() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.threading_helper.start_threads"]], "swap_attr() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.swap_attr"]], "swap_item() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.swap_item"]], "system_must_validate_cert() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.system_must_validate_cert"]], "temp_cwd() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.temp_cwd"]], "temp_dir() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.temp_dir"]], "temp_umask() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.temp_umask"]], "test": [[362, "module-test"]], "test.regrtest": [[362, "module-test.regrtest"]], "test.support": [[362, "module-test.support"]], "test.support.bytecode_helper": [[362, "module-test.support.bytecode_helper"]], "test.support.import_helper": [[362, "module-test.support.import_helper"]], "test.support.os_helper": [[362, "module-test.support.os_helper"]], "test.support.script_helper": [[362, "module-test.support.script_helper"]], "test.support.socket_helper": [[362, "module-test.support.socket_helper"]], "test.support.threading_helper": [[362, "module-test.support.threading_helper"]], "test.support.warnings_helper": [[362, "module-test.support.warnings_helper"]], "threading_cleanup() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.threading_helper.threading_cleanup"]], "threading_setup() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.threading_helper.threading_setup"]], "transient_internet() (\u65bc test.support.socket_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.socket_helper.transient_internet"]], "unix_shell (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.unix_shell"]], "unlink() (\u65bc test.support.os_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.os_helper.unlink"]], "unload() (\u65bc test.support.import_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.import_helper.unload"]], "unset() (test.support.os_helper.environmentvarguard \u7684\u65b9\u6cd5)": [[362, "test.support.os_helper.EnvironmentVarGuard.unset"]], "verbose (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.verbose"]], "wait_process() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.wait_process"]], "wait_threads_exit() (\u65bc test.support.threading_helper \u6a21\u7d44\u4e2d)": [[362, "test.support.threading_helper.wait_threads_exit"]], "with_pymalloc() (\u65bc test.support \u6a21\u7d44\u4e2d)": [[362, "test.support.with_pymalloc"]], "textwrapper (textwrap \u4e2d\u7684\u985e\u5225)": [[364, "textwrap.TextWrapper"]], "break_long_words (textwrap.textwrapper \u7684\u5c6c\u6027)": [[364, "textwrap.TextWrapper.break_long_words"]], "break_on_hyphens (textwrap.textwrapper \u7684\u5c6c\u6027)": [[364, "textwrap.TextWrapper.break_on_hyphens"]], "dedent() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[364, "textwrap.dedent"]], "drop_whitespace (textwrap.textwrapper \u7684\u5c6c\u6027)": [[364, "textwrap.TextWrapper.drop_whitespace"]], "expand_tabs (textwrap.textwrapper \u7684\u5c6c\u6027)": [[364, "textwrap.TextWrapper.expand_tabs"]], "fill() (textwrap.textwrapper \u7684\u65b9\u6cd5)": [[364, "textwrap.TextWrapper.fill"]], "fill() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[364, "textwrap.fill"]], "fix_sentence_endings (textwrap.textwrapper \u7684\u5c6c\u6027)": [[364, "textwrap.TextWrapper.fix_sentence_endings"]], "indent() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[364, "textwrap.indent"]], "initial_indent (textwrap.textwrapper \u7684\u5c6c\u6027)": [[364, "textwrap.TextWrapper.initial_indent"]], "max_lines (textwrap.textwrapper \u7684\u5c6c\u6027)": [[364, "textwrap.TextWrapper.max_lines"]], "placeholder (textwrap.textwrapper \u7684\u5c6c\u6027)": [[364, "textwrap.TextWrapper.placeholder"]], "replace_whitespace (textwrap.textwrapper \u7684\u5c6c\u6027)": [[364, "textwrap.TextWrapper.replace_whitespace"]], "shorten() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[364, "textwrap.shorten"]], "subsequent_indent (textwrap.textwrapper \u7684\u5c6c\u6027)": [[364, "textwrap.TextWrapper.subsequent_indent"]], "tabsize (textwrap.textwrapper \u7684\u5c6c\u6027)": [[364, "textwrap.TextWrapper.tabsize"]], "textwrap": [[364, "module-textwrap"]], "width (textwrap.textwrapper \u7684\u5c6c\u6027)": [[364, "textwrap.TextWrapper.width"]], "wrap() (textwrap.textwrapper \u7684\u65b9\u6cd5)": [[364, "textwrap.TextWrapper.wrap"]], "wrap() (\u65bc textwrap \u6a21\u7d44\u4e2d)": [[364, "textwrap.wrap"]], "barrier (threading \u4e2d\u7684\u985e\u5225)": [[365, "threading.Barrier"]], "boundedsemaphore (threading \u4e2d\u7684\u985e\u5225)": [[365, "threading.BoundedSemaphore"]], "condition (threading \u4e2d\u7684\u985e\u5225)": [[365, "threading.Condition"]], "event (threading \u4e2d\u7684\u985e\u5225)": [[365, "threading.Event"]], "lock (threading \u4e2d\u7684\u985e\u5225)": [[365, "threading.Lock"]], "rlock (threading \u4e2d\u7684\u985e\u5225)": [[365, "threading.RLock"]], "semaphore (threading \u4e2d\u7684\u985e\u5225)": [[365, "threading.Semaphore"]], "timeout_max (\u65bc threading \u6a21\u7d44\u4e2d)": [[365, "threading.TIMEOUT_MAX"]], "thread (threading \u4e2d\u7684\u985e\u5225)": [[365, "threading.Thread"]], "timer (threading \u4e2d\u7684\u985e\u5225)": [[365, "threading.Timer"]], "__excepthook__ (\u65bc threading \u6a21\u7d44\u4e2d)": [[365, "threading.__excepthook__"]], "abort() (threading.barrier \u7684\u65b9\u6cd5)": [[365, "threading.Barrier.abort"]], "acquire() (threading.condition \u7684\u65b9\u6cd5)": [[365, "threading.Condition.acquire"]], "acquire() (threading.lock \u7684\u65b9\u6cd5)": [[365, "threading.Lock.acquire"]], "acquire() (threading.rlock \u7684\u65b9\u6cd5)": [[365, "threading.RLock.acquire"]], "acquire() (threading.semaphore \u7684\u65b9\u6cd5)": [[365, "threading.Semaphore.acquire"]], "active_count() (\u65bc threading \u6a21\u7d44\u4e2d)": [[365, "threading.active_count"]], "broken (threading.barrier \u7684\u5c6c\u6027)": [[365, "threading.Barrier.broken"]], "cancel() (threading.timer \u7684\u65b9\u6cd5)": [[365, "threading.Timer.cancel"]], "clear() (threading.event \u7684\u65b9\u6cd5)": [[365, "threading.Event.clear"]], "current_thread() (\u65bc threading \u6a21\u7d44\u4e2d)": [[365, "threading.current_thread"]], "daemon (threading.thread \u7684\u5c6c\u6027)": [[365, "threading.Thread.daemon"]], "enumerate() (\u65bc threading \u6a21\u7d44\u4e2d)": [[365, "threading.enumerate"]], "excepthook() (\u65bc threading \u6a21\u7d44\u4e2d)": [[365, "threading.excepthook"]], "getname() (threading.thread \u7684\u65b9\u6cd5)": [[365, "threading.Thread.getName"]], "get_ident() (\u65bc threading \u6a21\u7d44\u4e2d)": [[365, "threading.get_ident"]], "get_native_id() (\u65bc threading \u6a21\u7d44\u4e2d)": [[365, "threading.get_native_id"]], "getprofile() (\u65bc threading \u6a21\u7d44\u4e2d)": [[365, "threading.getprofile"]], "gettrace() (\u65bc threading \u6a21\u7d44\u4e2d)": [[365, "threading.gettrace"]], "ident (threading.thread \u7684\u5c6c\u6027)": [[365, "threading.Thread.ident"]], "isdaemon() (threading.thread \u7684\u65b9\u6cd5)": [[365, "threading.Thread.isDaemon"]], "is_alive() (threading.thread \u7684\u65b9\u6cd5)": [[365, "threading.Thread.is_alive"]], "is_set() (threading.event \u7684\u65b9\u6cd5)": [[365, "threading.Event.is_set"]], "join() (threading.thread \u7684\u65b9\u6cd5)": [[365, "threading.Thread.join"]], "local (threading \u4e2d\u7684\u985e\u5225)": [[365, "threading.local"]], "locked() (threading.lock \u7684\u65b9\u6cd5)": [[365, "threading.Lock.locked"]], "main_thread() (\u65bc threading \u6a21\u7d44\u4e2d)": [[365, "threading.main_thread"]], "n_waiting (threading.barrier \u7684\u5c6c\u6027)": [[365, "threading.Barrier.n_waiting"]], "name (threading.thread \u7684\u5c6c\u6027)": [[365, "threading.Thread.name"]], "native_id (threading.thread \u7684\u5c6c\u6027)": [[365, "threading.Thread.native_id"]], "notify() (threading.condition \u7684\u65b9\u6cd5)": [[365, "threading.Condition.notify"]], "notify_all() (threading.condition \u7684\u65b9\u6cd5)": [[365, "threading.Condition.notify_all"]], "parties (threading.barrier \u7684\u5c6c\u6027)": [[365, "threading.Barrier.parties"]], "release() (threading.condition \u7684\u65b9\u6cd5)": [[365, "threading.Condition.release"]], "release() (threading.lock \u7684\u65b9\u6cd5)": [[365, "threading.Lock.release"]], "release() (threading.rlock \u7684\u65b9\u6cd5)": [[365, "threading.RLock.release"]], "release() (threading.semaphore \u7684\u65b9\u6cd5)": [[365, "threading.Semaphore.release"]], "reset() (threading.barrier \u7684\u65b9\u6cd5)": [[365, "threading.Barrier.reset"]], "run() (threading.thread \u7684\u65b9\u6cd5)": [[365, "threading.Thread.run"]], "set() (threading.event \u7684\u65b9\u6cd5)": [[365, "threading.Event.set"]], "setdaemon() (threading.thread \u7684\u65b9\u6cd5)": [[365, "threading.Thread.setDaemon"]], "setname() (threading.thread \u7684\u65b9\u6cd5)": [[365, "threading.Thread.setName"]], "setprofile() (\u65bc threading \u6a21\u7d44\u4e2d)": [[365, "threading.setprofile"]], "setprofile_all_threads() (\u65bc threading \u6a21\u7d44\u4e2d)": [[365, "threading.setprofile_all_threads"]], "settrace() (\u65bc threading \u6a21\u7d44\u4e2d)": [[365, "threading.settrace"]], "settrace_all_threads() (\u65bc threading \u6a21\u7d44\u4e2d)": [[365, "threading.settrace_all_threads"]], "stack_size() (\u65bc threading \u6a21\u7d44\u4e2d)": [[365, "threading.stack_size"]], "start() (threading.thread \u7684\u65b9\u6cd5)": [[365, "threading.Thread.start"]], "threading": [[365, "module-threading"]], "wait() (threading.barrier \u7684\u65b9\u6cd5)": [[365, "threading.Barrier.wait"]], "wait() (threading.condition \u7684\u65b9\u6cd5)": [[365, "threading.Condition.wait"]], "wait() (threading.event \u7684\u65b9\u6cd5)": [[365, "threading.Event.wait"]], "wait_for() (threading.condition \u7684\u65b9\u6cd5)": [[365, "threading.Condition.wait_for"]], "2-digit years\uff082 \u4f4d\u6578\u5e74\u4efd\uff09": [[366, "index-3"]], "clock_boottime (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.CLOCK_BOOTTIME"]], "clock_highres (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.CLOCK_HIGHRES"]], "clock_monotonic (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.CLOCK_MONOTONIC"]], "clock_monotonic_raw (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.CLOCK_MONOTONIC_RAW"]], "clock_process_cputime_id (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.CLOCK_PROCESS_CPUTIME_ID"]], "clock_prof (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.CLOCK_PROF"]], "clock_realtime (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.CLOCK_REALTIME"]], "clock_tai (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.CLOCK_TAI"]], "clock_thread_cputime_id (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.CLOCK_THREAD_CPUTIME_ID"]], "clock_uptime (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.CLOCK_UPTIME"]], "clock_uptime_raw (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.CLOCK_UPTIME_RAW"]], "cpu time\uff08cpu \u6642\u9593\uff09": [[366, "index-12"], [366, "index-7"]], "coordinated universal time\uff08\u4e16\u754c\u5354\u8abf\u6642\u9593\uff09": [[366, "index-4"]], "daylight saving time\uff08\u65e5\u5149\u7bc0\u7d04\u6642\u9593\uff09": [[366, "index-5"]], "greenwich mean time\uff08\u683c\u6797\u5a01\u6cbb\u6a19\u6e96\u6642\u9593\uff09": [[366, "index-4"]], "rfc 1123": [[366, "index-21"]], "tz": [[366, "index-13"], [366, "index-14"], [366, "index-15"], [366, "index-16"], [366, "index-17"], [366, "index-18"]], "utc": [[366, "index-4"]], "year 2038\uff082038 \u5e74\u554f\u984c\uff09": [[366, "index-2"]], "altzone (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.altzone"]], "asctime() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.asctime"]], "benchmarking\uff08\u57fa\u6e96\u6e2c\u8a66\uff09": [[366, "index-12"], [366, "index-6"], [366, "index-7"]], "clock_getres() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.clock_getres"]], "clock_gettime() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.clock_gettime"]], "clock_gettime_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.clock_gettime_ns"]], "clock_settime() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.clock_settime"]], "clock_settime_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.clock_settime_ns"]], "ctime() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.ctime"]], "daylight (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.daylight"]], "epoch\uff08\u7d00\u5143\uff09": [[366, "index-0"]], "get_clock_info() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.get_clock_info"]], "gmtime() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.gmtime"]], "localtime() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.localtime"]], "mktime() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.mktime"]], "monotonic() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.monotonic"]], "monotonic_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.monotonic_ns"]], "perf_counter() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.perf_counter"]], "perf_counter_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.perf_counter_ns"]], "process_time() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.process_time"]], "process_time_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.process_time_ns"]], "processor time\uff08\u8655\u7406\u5668\u6642\u9593\uff09": [[366, "index-12"], [366, "index-7"]], "pthread_getcpuclockid() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.pthread_getcpuclockid"]], "seconds since the epoch": [[366, "index-1"]], "sleep() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.sleep"]], "strftime() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.strftime"]], "strptime() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.strptime"]], "struct_time (time \u4e2d\u7684\u985e\u5225)": [[366, "time.struct_time"]], "thread_time() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.thread_time"]], "thread_time_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.thread_time_ns"]], "time": [[366, "module-time"]], "time() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.time"]], "time_ns() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.time_ns"]], "timezone (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.timezone"]], "tm_day (time.struct_time \u7684\u5c6c\u6027)": [[366, "time.struct_time.tm_day"]], "tm_gmtoff (time.struct_time \u7684\u5c6c\u6027)": [[366, "time.struct_time.tm_gmtoff"]], "tm_hour (time.struct_time \u7684\u5c6c\u6027)": [[366, "time.struct_time.tm_hour"]], "tm_isdst (time.struct_time \u7684\u5c6c\u6027)": [[366, "time.struct_time.tm_isdst"]], "tm_min (time.struct_time \u7684\u5c6c\u6027)": [[366, "time.struct_time.tm_min"]], "tm_mon (time.struct_time \u7684\u5c6c\u6027)": [[366, "time.struct_time.tm_mon"]], "tm_sec (time.struct_time \u7684\u5c6c\u6027)": [[366, "time.struct_time.tm_sec"]], "tm_wday (time.struct_time \u7684\u5c6c\u6027)": [[366, "time.struct_time.tm_wday"]], "tm_yday (time.struct_time \u7684\u5c6c\u6027)": [[366, "time.struct_time.tm_yday"]], "tm_year (time.struct_time \u7684\u5c6c\u6027)": [[366, "time.struct_time.tm_year"]], "tm_zone (time.struct_time \u7684\u5c6c\u6027)": [[366, "time.struct_time.tm_zone"]], "tzname (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.tzname"]], "tzset() (\u65bc time \u6a21\u7d44\u4e2d)": [[366, "time.tzset"]], "--number": [[367, "cmdoption-timeit-n"]], "--process": [[367, "cmdoption-timeit-p"]], "--repeat": [[367, "cmdoption-timeit-r"]], "--setup": [[367, "cmdoption-timeit-s"]], "--unit": [[367, "cmdoption-timeit-u"]], "-n": [[367, "cmdoption-timeit-n"], [398, "cmdoption-uuid-N"], [398, "cmdoption-uuid-n"]], "-u": [[367, "cmdoption-timeit-u"], [398, "cmdoption-uuid-u"], [455, "cmdoption-u"]], "timer (timeit \u4e2d\u7684\u985e\u5225)": [[367, "timeit.Timer"]], "autorange() (timeit.timer \u7684\u65b9\u6cd5)": [[367, "timeit.Timer.autorange"]], "default_timer() (\u65bc timeit \u6a21\u7d44\u4e2d)": [[367, "timeit.default_timer"]], "print_exc() (timeit.timer \u7684\u65b9\u6cd5)": [[367, "timeit.Timer.print_exc"]], "repeat() (timeit.timer \u7684\u65b9\u6cd5)": [[367, "timeit.Timer.repeat"]], "repeat() (\u65bc timeit \u6a21\u7d44\u4e2d)": [[367, "timeit.repeat"]], "timeit": [[367, "module-timeit"]], "timeit \u547d\u4ee4\u5217\u9078\u9805": [[367, "cmdoption-timeit-h"], [367, "cmdoption-timeit-n"], [367, "cmdoption-timeit-p"], [367, "cmdoption-timeit-r"], [367, "cmdoption-timeit-s"], [367, "cmdoption-timeit-u"], [367, "cmdoption-timeit-v"]], "timeit() (timeit.timer \u7684\u65b9\u6cd5)": [[367, "timeit.Timer.timeit"]], "timeit() (\u65bc timeit \u6a21\u7d44\u4e2d)": [[367, "timeit.timeit"]], "\u57fa\u6e96\u91cf\u6e2c (benchmarking)": [[367, "index-0"]], "\u6027\u80fd\u8868\u73fe": [[367, "index-0"]], "gui": [[368, "index-0"]], "graphical user interface\uff08\u5716\u5f62\u4f7f\u7528\u8005\u4ecb\u9762\uff09": [[368, "index-0"]], "tk": [[368, "index-0"]], "tkinter": [[368, "index-0"], [369, "module-tkinter"]], "display": [[369, "index-0"], [430, "index-15"], [430, "index-16"], [430, "index-17"]], "exception (\u65bc _tkinter \u6a21\u7d44\u4e2d)": [[369, "tkinter.EXCEPTION"]], "readable (\u65bc _tkinter \u6a21\u7d44\u4e2d)": [[369, "tkinter.READABLE"]], "tcl() (\u65bc tkinter \u6a21\u7d44\u4e2d)": [[369, "tkinter.Tcl"]], "tk (tkinter \u4e2d\u7684\u985e\u5225)": [[369, "tkinter.Tk"]], "tk option data types": [[369, "index-4"]], "writable (\u65bc _tkinter \u6a21\u7d44\u4e2d)": [[369, "tkinter.WRITABLE"]], "_tkinter": [[369, "module-_tkinter"]], "bind (widgets)": [[369, "index-5"]], "children (tkinter.tk \u7684\u5c6c\u6027)": [[369, "tkinter.Tk.children"]], "createfilehandler() (_tkinter.widget.tk \u7684\u65b9\u6cd5)": [[369, "tkinter.Widget.tk.createfilehandler"]], "deletefilehandler() (_tkinter.widget.tk \u7684\u65b9\u6cd5)": [[369, "tkinter.Widget.tk.deletefilehandler"]], "events (widgets)": [[369, "index-5"]], "master (tkinter.tk \u7684\u5c6c\u6027)": [[369, "tkinter.Tk.master"]], "packing (widgets)": [[369, "index-2"]], "tk (tkinter.tk \u7684\u5c6c\u6027)": [[369, "tkinter.Tk.tk"]], "window manager (widgets)": [[369, "index-3"]], "chooser (tkinter.colorchooser \u4e2d\u7684\u985e\u5225)": [[370, "tkinter.colorchooser.Chooser"]], "askcolor() (\u65bc tkinter.colorchooser \u6a21\u7d44\u4e2d)": [[370, "tkinter.colorchooser.askcolor"]], "tkinter.colorchooser": [[370, "module-tkinter.colorchooser"]], "dndhandler (tkinter.dnd \u4e2d\u7684\u985e\u5225)": [[371, "tkinter.dnd.DndHandler"]], "cancel() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[371, "tkinter.dnd.DndHandler.cancel"]], "dnd_start() (\u65bc tkinter.dnd \u6a21\u7d44\u4e2d)": [[371, "tkinter.dnd.dnd_start"]], "finish() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[371, "tkinter.dnd.DndHandler.finish"]], "on_motion() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[371, "tkinter.dnd.DndHandler.on_motion"]], "on_release() (tkinter.dnd.dndhandler \u7684\u65b9\u6cd5)": [[371, "tkinter.dnd.DndHandler.on_release"]], "tkinter.dnd": [[371, "module-tkinter.dnd"]], "bold (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[372, "tkinter.font.BOLD"]], "font (tkinter.font \u4e2d\u7684\u985e\u5225)": [[372, "tkinter.font.Font"]], "italic (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[372, "tkinter.font.ITALIC"]], "normal (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[372, "tkinter.font.NORMAL"]], "roman (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[372, "tkinter.font.ROMAN"]], "actual() (tkinter.font.font \u7684\u65b9\u6cd5)": [[372, "tkinter.font.Font.actual"]], "cget() (tkinter.font.font \u7684\u65b9\u6cd5)": [[372, "tkinter.font.Font.cget"]], "config() (tkinter.font.font \u7684\u65b9\u6cd5)": [[372, "tkinter.font.Font.config"]], "copy() (tkinter.font.font \u7684\u65b9\u6cd5)": [[372, "tkinter.font.Font.copy"]], "families() (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[372, "tkinter.font.families"]], "measure() (tkinter.font.font \u7684\u65b9\u6cd5)": [[372, "tkinter.font.Font.measure"]], "metrics() (tkinter.font.font \u7684\u65b9\u6cd5)": [[372, "tkinter.font.Font.metrics"]], "names() (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[372, "tkinter.font.names"]], "nametofont() (\u65bc tkinter.font \u6a21\u7d44\u4e2d)": [[372, "tkinter.font.nametofont"]], "tkinter.font": [[372, "module-tkinter.font"]], "abort (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.ABORT"]], "abortretryignore (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.ABORTRETRYIGNORE"]], "cancel (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.CANCEL"]], "error (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.ERROR"]], "ignore (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.IGNORE"]], "info (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.INFO"]], "message (tkinter.messagebox \u4e2d\u7684\u985e\u5225)": [[373, "tkinter.messagebox.Message"]], "no (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.NO"]], "ok (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.OK"]], "okcancel (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.OKCANCEL"]], "question (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.QUESTION"]], "retry (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.RETRY"]], "retrycancel (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.RETRYCANCEL"]], "warning (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.WARNING"]], "yes (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.YES"]], "yesno (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.YESNO"]], "yesnocancel (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.YESNOCANCEL"]], "askokcancel() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.askokcancel"]], "askquestion() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.askquestion"]], "askretrycancel() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.askretrycancel"]], "askyesno() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.askyesno"]], "askyesnocancel() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.askyesnocancel"]], "show() (tkinter.messagebox.message \u7684\u65b9\u6cd5)": [[373, "tkinter.messagebox.Message.show"]], "showerror() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.showerror"]], "showinfo() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.showinfo"]], "showwarning() (\u65bc tkinter.messagebox \u6a21\u7d44\u4e2d)": [[373, "tkinter.messagebox.showwarning"]], "tkinter.messagebox": [[373, "module-tkinter.messagebox"]], "scrolledtext (tkinter.scrolledtext \u4e2d\u7684\u985e\u5225)": [[374, "tkinter.scrolledtext.ScrolledText"]], "frame (tkinter.scrolledtext.scrolledtext \u7684\u5c6c\u6027)": [[374, "tkinter.scrolledtext.ScrolledText.frame"]], "tkinter.scrolledtext": [[374, "module-tkinter.scrolledtext"]], "vbar (tkinter.scrolledtext.scrolledtext \u7684\u5c6c\u6027)": [[374, "tkinter.scrolledtext.ScrolledText.vbar"]], "balloon (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.Balloon"]], "buttonbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.ButtonBox"]], "checklist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.CheckList"]], "combobox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.ComboBox"]], "control (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.Control"]], "dirlist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.DirList"]], "dirselectbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.DirSelectBox"]], "dirselectdialog (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.DirSelectDialog"]], "dirtree (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.DirTree"]], "exfileselectbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.ExFileSelectBox"]], "fileentry (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.FileEntry"]], "fileselectbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.FileSelectBox"]], "form (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.Form"]], "hlist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.HList"]], "inputonly (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.InputOnly"]], "labelentry (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.LabelEntry"]], "labelframe (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.LabelFrame"]], "listnotebook (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.ListNoteBook"]], "meter (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.Meter"]], "notebook (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.NoteBook"]], "optionmenu (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.OptionMenu"]], "panedwindow (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.PanedWindow"]], "popupmenu (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.PopupMenu"]], "select (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.Select"]], "stdbuttonbox (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.StdButtonBox"]], "tlist (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.TList"]], "tix": [[375, "index-0"]], "tk (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.Tk"]], "tree (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.Tree"]], "tixcommand (tkinter.tix \u4e2d\u7684\u985e\u5225)": [[375, "tkinter.tix.tixCommand"]], "tix_addbitmapdir() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[375, "tkinter.tix.tixCommand.tix_addbitmapdir"]], "tix_cget() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[375, "tkinter.tix.tixCommand.tix_cget"]], "tix_configure() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[375, "tkinter.tix.tixCommand.tix_configure"]], "tix_filedialog() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[375, "tkinter.tix.tixCommand.tix_filedialog"]], "tix_getbitmap() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[375, "tkinter.tix.tixCommand.tix_getbitmap"]], "tix_getimage() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[375, "tkinter.tix.tixCommand.tix_getimage"]], "tix_option_get() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[375, "tkinter.tix.tixCommand.tix_option_get"]], "tix_resetoptions() (tkinter.tix.tixcommand \u7684\u65b9\u6cd5)": [[375, "tkinter.tix.tixCommand.tix_resetoptions"]], "tkinter.tix": [[375, "module-tkinter.tix"]], "combobox (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[376, "tkinter.ttk.Combobox"]], "notebook (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[376, "tkinter.ttk.Notebook"]], "progressbar (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[376, "tkinter.ttk.Progressbar"]], "spinbox (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[376, "tkinter.ttk.Spinbox"]], "style (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[376, "tkinter.ttk.Style"]], "treeview (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[376, "tkinter.ttk.Treeview"]], "widget (tkinter.ttk \u4e2d\u7684\u985e\u5225)": [[376, "tkinter.ttk.Widget"]], "add() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Notebook.add"]], "bbox() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.bbox"]], "column() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.column"]], "configure() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Style.configure"]], "current() (tkinter.ttk.combobox \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Combobox.current"]], "delete() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.delete"]], "detach() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.detach"]], "element_create() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Style.element_create"]], "element_names() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Style.element_names"]], "element_options() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Style.element_options"]], "enable_traversal() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Notebook.enable_traversal"]], "exists() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.exists"]], "focus() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.focus"]], "forget() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Notebook.forget"]], "get() (tkinter.ttk.combobox \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Combobox.get"]], "get() (tkinter.ttk.spinbox \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Spinbox.get"]], "get_children() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.get_children"]], "heading() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.heading"]], "hide() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Notebook.hide"]], "identify() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Notebook.identify"]], "identify() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.identify"]], "identify() (tkinter.ttk.widget \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Widget.identify"]], "identify_column() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.identify_column"]], "identify_element() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.identify_element"]], "identify_region() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.identify_region"]], "identify_row() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.identify_row"]], "index() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Notebook.index"]], "index() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.index"]], "insert() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Notebook.insert"]], "insert() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.insert"]], "instate() (tkinter.ttk.widget \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Widget.instate"]], "item() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.item"]], "layout() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Style.layout"]], "lookup() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Style.lookup"]], "map() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Style.map"]], "move() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.move"]], "next() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.next"]], "parent() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.parent"]], "prev() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.prev"]], "reattach() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.reattach"]], "see() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.see"]], "select() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Notebook.select"]], "selection() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.selection"]], "selection_add() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.selection_add"]], "selection_remove() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.selection_remove"]], "selection_set() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.selection_set"]], "selection_toggle() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.selection_toggle"]], "set() (tkinter.ttk.combobox \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Combobox.set"]], "set() (tkinter.ttk.spinbox \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Spinbox.set"]], "set() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.set"]], "set_children() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.set_children"]], "start() (tkinter.ttk.progressbar \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Progressbar.start"]], "state() (tkinter.ttk.widget \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Widget.state"]], "step() (tkinter.ttk.progressbar \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Progressbar.step"]], "stop() (tkinter.ttk.progressbar \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Progressbar.stop"]], "tab() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Notebook.tab"]], "tabs() (tkinter.ttk.notebook \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Notebook.tabs"]], "tag_bind() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.tag_bind"]], "tag_configure() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.tag_configure"]], "tag_has() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.tag_has"]], "theme_create() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Style.theme_create"]], "theme_names() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Style.theme_names"]], "theme_settings() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Style.theme_settings"]], "theme_use() (tkinter.ttk.style \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Style.theme_use"]], "tkinter.ttk": [[376, "module-tkinter.ttk"]], "ttk": [[376, "index-0"]], "xview() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.xview"]], "yview() (tkinter.ttk.treeview \u7684\u65b9\u6cd5)": [[376, "tkinter.ttk.Treeview.yview"]], "amper (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.AMPER"]], "amperequal (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.AMPEREQUAL"]], "async (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.ASYNC"]], "at (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.AT"]], "atequal (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.ATEQUAL"]], "await (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.AWAIT"]], "circumflex (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.CIRCUMFLEX"]], "circumflexequal (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.CIRCUMFLEXEQUAL"]], "colon (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.COLON"]], "colonequal (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.COLONEQUAL"]], "comma (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.COMMA"]], "comment (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.COMMENT"]], "dedent (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.DEDENT"]], "dot (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.DOT"]], "doubleslash (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.DOUBLESLASH"]], "doubleslashequal (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.DOUBLESLASHEQUAL"]], "doublestar (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.DOUBLESTAR"]], "doublestarequal (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.DOUBLESTAREQUAL"]], "ellipsis (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.ELLIPSIS"]], "encoding (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.ENCODING"]], "endmarker (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.ENDMARKER"]], "eqequal (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.EQEQUAL"]], "equal (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.EQUAL"]], "errortoken (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.ERRORTOKEN"]], "exclamation (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.EXCLAMATION"]], "fstring_end (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.FSTRING_END"]], "fstring_middle (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.FSTRING_MIDDLE"]], "fstring_start (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.FSTRING_START"]], "greater (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.GREATER"]], "greaterequal (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.GREATEREQUAL"]], "indent (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.INDENT"]], "iseof() (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.ISEOF"]], "isnonterminal() (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.ISNONTERMINAL"]], "isterminal() (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.ISTERMINAL"]], "lbrace (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.LBRACE"]], "leftshift (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.LEFTSHIFT"]], "leftshiftequal (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.LEFTSHIFTEQUAL"]], "less (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.LESS"]], "lessequal (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.LESSEQUAL"]], "lpar (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.LPAR"]], "lsqb (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.LSQB"]], "minequal (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.MINEQUAL"]], "minus (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.MINUS"]], "name (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.NAME"]], "newline (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.NEWLINE"]], "nl (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.NL"]], "notequal (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.NOTEQUAL"]], "nt_offset (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.NT_OFFSET"]], "number (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.NUMBER"]], "n_tokens (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.N_TOKENS"]], "op (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.OP"]], "percent (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.PERCENT"]], "percentequal (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.PERCENTEQUAL"]], "plus (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.PLUS"]], "plusequal (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.PLUSEQUAL"]], "rarrow (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.RARROW"]], "rbrace (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.RBRACE"]], "rightshift (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.RIGHTSHIFT"]], "rightshiftequal (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.RIGHTSHIFTEQUAL"]], "rpar (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.RPAR"]], "rsqb (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.RSQB"]], "semi (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.SEMI"]], "slash (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.SLASH"]], "slashequal (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.SLASHEQUAL"]], "soft_keyword (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.SOFT_KEYWORD"]], "star (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.STAR"]], "starequal (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.STAREQUAL"]], "string (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.STRING"]], "tilde (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.TILDE"]], "type_comment (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.TYPE_COMMENT"]], "type_ignore (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.TYPE_IGNORE"]], "vbar (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.VBAR"]], "vbarequal (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.VBAREQUAL"]], "tok_name (\u65bc token \u6a21\u7d44\u4e2d)": [[377, "token.tok_name"]], "token": [[377, "module-token"], [435, "index-0"]], "--exact": [[378, "cmdoption-tokenize-e"]], "tokenerror": [[378, "tokenize.TokenError"]], "detect_encoding() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[378, "tokenize.detect_encoding"]], "generate_tokens() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[378, "tokenize.generate_tokens"]], "open() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[378, "tokenize.open"]], "tokenize": [[378, "module-tokenize"]], "tokenize \u547d\u4ee4\u5217\u9078\u9805": [[378, "cmdoption-tokenize-e"], [378, "cmdoption-tokenize-h"]], "tokenize() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[378, "tokenize.tokenize"]], "untokenize() (\u65bc tokenize \u6a21\u7d44\u4e2d)": [[378, "tokenize.untokenize"]], "tomldecodeerror": [[379, "tomllib.TOMLDecodeError"]], "load() (\u65bc tomllib \u6a21\u7d44\u4e2d)": [[379, "tomllib.load"]], "loads() (\u65bc tomllib \u6a21\u7d44\u4e2d)": [[379, "tomllib.loads"]], "tomllib": [[379, "module-tomllib"]], "--count": [[380, "cmdoption-trace-c"]], "--coverdir": [[380, "cmdoption-trace-C"]], "--file": [[380, "cmdoption-trace-f"]], "--ignore-dir": [[380, "cmdoption-trace-ignore-dir"]], "--ignore-module": [[380, "cmdoption-trace-ignore-module"]], "--listfuncs": [[380, "cmdoption-trace-l"]], "--missing": [[380, "cmdoption-trace-m"]], "--no-report": [[380, "cmdoption-trace-R"]], "--report": [[380, "cmdoption-trace-r"]], "--summary": [[380, "cmdoption-trace-s"]], "--timing": [[380, "cmdoption-trace-g"]], "--trace": [[380, "cmdoption-trace-t"]], "--trackcalls": [[380, "cmdoption-trace-T"]], "-g": [[380, "cmdoption-trace-g"]], "coverageresults (trace \u4e2d\u7684\u985e\u5225)": [[380, "trace.CoverageResults"]], "trace (trace \u4e2d\u7684\u985e\u5225)": [[380, "trace.Trace"]], "results() (trace.trace \u7684\u65b9\u6cd5)": [[380, "trace.Trace.results"]], "run() (trace.trace \u7684\u65b9\u6cd5)": [[380, "trace.Trace.run"]], "runctx() (trace.trace \u7684\u65b9\u6cd5)": [[380, "trace.Trace.runctx"]], "runfunc() (trace.trace \u7684\u65b9\u6cd5)": [[380, "trace.Trace.runfunc"]], "trace": [[380, "module-trace"]], "trace \u547d\u4ee4\u5217\u9078\u9805": [[380, "cmdoption-trace-C"], [380, "cmdoption-trace-R"], [380, "cmdoption-trace-T"], [380, "cmdoption-trace-c"], [380, "cmdoption-trace-f"], [380, "cmdoption-trace-g"], [380, "cmdoption-trace-help"], [380, "cmdoption-trace-ignore-dir"], [380, "cmdoption-trace-ignore-module"], [380, "cmdoption-trace-l"], [380, "cmdoption-trace-m"], [380, "cmdoption-trace-r"], [380, "cmdoption-trace-s"], [380, "cmdoption-trace-t"], [380, "cmdoption-trace-version"]], "update() (trace.coverageresults \u7684\u65b9\u6cd5)": [[380, "trace.CoverageResults.update"]], "write_results() (trace.coverageresults \u7684\u65b9\u6cd5)": [[380, "trace.CoverageResults.write_results"]], "framesummary (traceback \u4e2d\u7684\u985e\u5225)": [[381, "traceback.FrameSummary"]], "stacksummary (traceback \u4e2d\u7684\u985e\u5225)": [[381, "traceback.StackSummary"]], "tracebackexception (traceback \u4e2d\u7684\u985e\u5225)": [[381, "traceback.TracebackException"]], "__cause__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[381, "traceback.TracebackException.__cause__"]], "__context__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[381, "traceback.TracebackException.__context__"]], "__notes__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[381, "traceback.TracebackException.__notes__"]], "__suppress_context__ (traceback.tracebackexception \u7684\u5c6c\u6027)": [[381, "traceback.TracebackException.__suppress_context__"]], "clear_frames() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[381, "traceback.clear_frames"]], "end_lineno (traceback.tracebackexception \u7684\u5c6c\u6027)": [[381, "traceback.TracebackException.end_lineno"]], "end_offset (traceback.tracebackexception \u7684\u5c6c\u6027)": [[381, "traceback.TracebackException.end_offset"]], "exc_type (traceback.tracebackexception \u7684\u5c6c\u6027)": [[381, "traceback.TracebackException.exc_type"]], "exceptions (traceback.tracebackexception \u7684\u5c6c\u6027)": [[381, "traceback.TracebackException.exceptions"]], "extract() (traceback.stacksummary \u7684\u985e\u5225\u65b9\u6cd5)": [[381, "traceback.StackSummary.extract"]], "extract_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[381, "traceback.extract_stack"]], "extract_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[381, "traceback.extract_tb"]], "filename (traceback.framesummary \u7684\u5c6c\u6027)": [[381, "traceback.FrameSummary.filename"]], "filename (traceback.tracebackexception \u7684\u5c6c\u6027)": [[381, "traceback.TracebackException.filename"]], "format() (traceback.stacksummary \u7684\u65b9\u6cd5)": [[381, "traceback.StackSummary.format"]], "format() (traceback.tracebackexception \u7684\u65b9\u6cd5)": [[381, "traceback.TracebackException.format"]], "format_exc() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[381, "traceback.format_exc"]], "format_exception() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[381, "traceback.format_exception"]], "format_exception_only() (traceback.tracebackexception \u7684\u65b9\u6cd5)": [[381, "traceback.TracebackException.format_exception_only"]], "format_exception_only() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[381, "traceback.format_exception_only"]], "format_frame_summary() (traceback.stacksummary \u7684\u65b9\u6cd5)": [[381, "traceback.StackSummary.format_frame_summary"]], "format_list() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[381, "traceback.format_list"]], "format_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[381, "traceback.format_stack"]], "format_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[381, "traceback.format_tb"]], "from_exception() (traceback.tracebackexception \u7684\u985e\u5225\u65b9\u6cd5)": [[381, "traceback.TracebackException.from_exception"]], "from_list() (traceback.stacksummary \u7684\u985e\u5225\u65b9\u6cd5)": [[381, "traceback.StackSummary.from_list"]], "line (traceback.framesummary \u7684\u5c6c\u6027)": [[381, "traceback.FrameSummary.line"]], "lineno (traceback.framesummary \u7684\u5c6c\u6027)": [[381, "traceback.FrameSummary.lineno"]], "lineno (traceback.tracebackexception \u7684\u5c6c\u6027)": [[381, "traceback.TracebackException.lineno"]], "msg (traceback.tracebackexception \u7684\u5c6c\u6027)": [[381, "traceback.TracebackException.msg"]], "name (traceback.framesummary \u7684\u5c6c\u6027)": [[381, "traceback.FrameSummary.name"]], "offset (traceback.tracebackexception \u7684\u5c6c\u6027)": [[381, "traceback.TracebackException.offset"]], "print() (traceback.tracebackexception \u7684\u65b9\u6cd5)": [[381, "traceback.TracebackException.print"]], "print_exc() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[381, "traceback.print_exc"]], "print_exception() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[381, "traceback.print_exception"]], "print_last() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[381, "traceback.print_last"]], "print_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[381, "traceback.print_stack"]], "print_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[381, "traceback.print_tb"]], "stack (traceback.tracebackexception \u7684\u5c6c\u6027)": [[381, "traceback.TracebackException.stack"]], "text (traceback.tracebackexception \u7684\u5c6c\u6027)": [[381, "traceback.TracebackException.text"]], "walk_stack() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[381, "traceback.walk_stack"]], "walk_tb() (\u65bc traceback \u6a21\u7d44\u4e2d)": [[381, "traceback.walk_tb"]], "domainfilter (tracemalloc \u4e2d\u7684\u985e\u5225)": [[382, "tracemalloc.DomainFilter"]], "filter (tracemalloc \u4e2d\u7684\u985e\u5225)": [[382, "tracemalloc.Filter"]], "frame (tracemalloc \u4e2d\u7684\u985e\u5225)": [[382, "tracemalloc.Frame"]], "snapshot (tracemalloc \u4e2d\u7684\u985e\u5225)": [[382, "tracemalloc.Snapshot"]], "statistic (tracemalloc \u4e2d\u7684\u985e\u5225)": [[382, "tracemalloc.Statistic"]], "statisticdiff (tracemalloc \u4e2d\u7684\u985e\u5225)": [[382, "tracemalloc.StatisticDiff"]], "trace (tracemalloc \u4e2d\u7684\u985e\u5225)": [[382, "tracemalloc.Trace"]], "traceback (tracemalloc \u4e2d\u7684\u985e\u5225)": [[382, "tracemalloc.Traceback"]], "all_frames (tracemalloc.filter \u7684\u5c6c\u6027)": [[382, "tracemalloc.Filter.all_frames"]], "clear_traces() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[382, "tracemalloc.clear_traces"]], "compare_to() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[382, "tracemalloc.Snapshot.compare_to"]], "count (tracemalloc.statistic \u7684\u5c6c\u6027)": [[382, "tracemalloc.Statistic.count"]], "count (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[382, "tracemalloc.StatisticDiff.count"]], "count_diff (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[382, "tracemalloc.StatisticDiff.count_diff"]], "domain (tracemalloc.domainfilter \u7684\u5c6c\u6027)": [[382, "tracemalloc.DomainFilter.domain"]], "domain (tracemalloc.filter \u7684\u5c6c\u6027)": [[382, "tracemalloc.Filter.domain"]], "domain (tracemalloc.trace \u7684\u5c6c\u6027)": [[382, "tracemalloc.Trace.domain"]], "dump() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[382, "tracemalloc.Snapshot.dump"]], "filename (tracemalloc.frame \u7684\u5c6c\u6027)": [[382, "tracemalloc.Frame.filename"]], "filename_pattern (tracemalloc.filter \u7684\u5c6c\u6027)": [[382, "tracemalloc.Filter.filename_pattern"]], "filter_traces() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[382, "tracemalloc.Snapshot.filter_traces"]], "format() (tracemalloc.traceback \u7684\u65b9\u6cd5)": [[382, "tracemalloc.Traceback.format"]], "get_object_traceback() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[382, "tracemalloc.get_object_traceback"]], "get_traceback_limit() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[382, "tracemalloc.get_traceback_limit"]], "get_traced_memory() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[382, "tracemalloc.get_traced_memory"]], "get_tracemalloc_memory() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[382, "tracemalloc.get_tracemalloc_memory"]], "inclusive (tracemalloc.domainfilter \u7684\u5c6c\u6027)": [[382, "tracemalloc.DomainFilter.inclusive"]], "inclusive (tracemalloc.filter \u7684\u5c6c\u6027)": [[382, "tracemalloc.Filter.inclusive"]], "is_tracing() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[382, "tracemalloc.is_tracing"]], "lineno (tracemalloc.filter \u7684\u5c6c\u6027)": [[382, "tracemalloc.Filter.lineno"]], "lineno (tracemalloc.frame \u7684\u5c6c\u6027)": [[382, "tracemalloc.Frame.lineno"]], "load() (tracemalloc.snapshot \u7684\u985e\u5225\u65b9\u6cd5)": [[382, "tracemalloc.Snapshot.load"]], "reset_peak() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[382, "tracemalloc.reset_peak"]], "size (tracemalloc.statistic \u7684\u5c6c\u6027)": [[382, "tracemalloc.Statistic.size"]], "size (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[382, "tracemalloc.StatisticDiff.size"]], "size (tracemalloc.trace \u7684\u5c6c\u6027)": [[382, "tracemalloc.Trace.size"]], "size_diff (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[382, "tracemalloc.StatisticDiff.size_diff"]], "start() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[382, "tracemalloc.start"]], "statistics() (tracemalloc.snapshot \u7684\u65b9\u6cd5)": [[382, "tracemalloc.Snapshot.statistics"]], "stop() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[382, "tracemalloc.stop"]], "take_snapshot() (\u65bc tracemalloc \u6a21\u7d44\u4e2d)": [[382, "tracemalloc.take_snapshot"]], "total_nframe (tracemalloc.traceback \u7684\u5c6c\u6027)": [[382, "tracemalloc.Traceback.total_nframe"]], "traceback (tracemalloc.statistic \u7684\u5c6c\u6027)": [[382, "tracemalloc.Statistic.traceback"]], "traceback (tracemalloc.statisticdiff \u7684\u5c6c\u6027)": [[382, "tracemalloc.StatisticDiff.traceback"]], "traceback (tracemalloc.trace \u7684\u5c6c\u6027)": [[382, "tracemalloc.Trace.traceback"]], "traceback_limit (tracemalloc.snapshot \u7684\u5c6c\u6027)": [[382, "tracemalloc.Snapshot.traceback_limit"]], "tracemalloc": [[382, "module-tracemalloc"]], "traces (tracemalloc.snapshot \u7684\u5c6c\u6027)": [[382, "tracemalloc.Snapshot.traces"]], "cfmakecbreak() (\u65bc tty \u6a21\u7d44\u4e2d)": [[383, "tty.cfmakecbreak"]], "cfmakeraw() (\u65bc tty \u6a21\u7d44\u4e2d)": [[383, "tty.cfmakeraw"]], "setcbreak() (\u65bc tty \u6a21\u7d44\u4e2d)": [[383, "tty.setcbreak"]], "setraw() (\u65bc tty \u6a21\u7d44\u4e2d)": [[383, "tty.setraw"]], "rawpen (turtle \u4e2d\u7684\u985e\u5225)": [[384, "turtle.RawPen"]], "rawturtle (turtle \u4e2d\u7684\u985e\u5225)": [[384, "turtle.RawTurtle"]], "screen (turtle \u4e2d\u7684\u985e\u5225)": [[384, "turtle.Screen"]], "scrolledcanvas (turtle \u4e2d\u7684\u985e\u5225)": [[384, "turtle.ScrolledCanvas"]], "shape (turtle \u4e2d\u7684\u985e\u5225)": [[384, "turtle.Shape"]], "turtle (turtle \u4e2d\u7684\u985e\u5225)": [[384, "turtle.Turtle"]], "turtlescreen (turtle \u4e2d\u7684\u985e\u5225)": [[384, "turtle.TurtleScreen"]], "vec2d (turtle \u4e2d\u7684\u985e\u5225)": [[384, "turtle.Vec2D"]], "addcomponent() (turtle.shape \u7684\u65b9\u6cd5)": [[384, "turtle.Shape.addcomponent"]], "addshape() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.addshape"]], "back() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.back"]], "backward() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.backward"]], "begin_fill() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.begin_fill"]], "begin_poly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.begin_poly"]], "bgcolor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.bgcolor"]], "bgpic() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.bgpic"]], "bk() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.bk"]], "bye() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.bye"]], "circle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.circle"]], "clear() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.clear"]], "clearscreen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.clearscreen"]], "clearstamp() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.clearstamp"]], "clearstamps() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.clearstamps"]], "clone() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.clone"]], "color() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.color"]], "colormode() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.colormode"]], "degrees() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.degrees"]], "delay() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.delay"]], "distance() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.distance"]], "done() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.done"]], "dot() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.dot"]], "down() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.down"]], "end_fill() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.end_fill"]], "end_poly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.end_poly"]], "exitonclick() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.exitonclick"]], "fd() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.fd"]], "fillcolor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.fillcolor"]], "filling() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.filling"]], "forward() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.forward"]], "get_poly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.get_poly"]], "get_shapepoly() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.get_shapepoly"]], "getcanvas() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.getcanvas"]], "getpen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.getpen"]], "getscreen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.getscreen"]], "getshapes() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.getshapes"]], "getturtle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.getturtle"]], "goto() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.goto"]], "heading() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.heading"]], "hideturtle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.hideturtle"]], "home() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.home"]], "ht() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.ht"]], "isdown() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.isdown"]], "isvisible() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.isvisible"]], "left() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.left"]], "listen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.listen"]], "lt() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.lt"]], "mainloop() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.mainloop"]], "mode() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.mode"]], "numinput() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.numinput"]], "onclick() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.onclick"]], "ondrag() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.ondrag"]], "onkey() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.onkey"]], "onkeypress() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.onkeypress"]], "onkeyrelease() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.onkeyrelease"]], "onrelease() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.onrelease"]], "onscreenclick() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.onscreenclick"]], "ontimer() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.ontimer"]], "pd() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.pd"]], "pen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.pen"]], "pencolor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.pencolor"]], "pendown() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.pendown"]], "pensize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.pensize"]], "penup() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.penup"]], "pos() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.pos"]], "position() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.position"]], "pu() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.pu"]], "radians() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.radians"]], "register_shape() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.register_shape"]], "reset() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.reset"]], "resetscreen() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.resetscreen"]], "resizemode() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.resizemode"]], "right() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.right"]], "rt() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.rt"]], "screensize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.screensize"]], "seth() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.seth"]], "setheading() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.setheading"]], "setpos() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.setpos"]], "setposition() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.setposition"]], "settiltangle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.settiltangle"]], "setundobuffer() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.setundobuffer"]], "setup() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.setup"]], "setworldcoordinates() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.setworldcoordinates"]], "setx() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.setx"]], "sety() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.sety"]], "shape() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.shape"]], "shapesize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.shapesize"]], "shapetransform() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.shapetransform"]], "shearfactor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.shearfactor"]], "showturtle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.showturtle"]], "speed() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.speed"]], "st() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.st"]], "stamp() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.stamp"]], "teleport() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.teleport"]], "textinput() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.textinput"]], "tilt() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.tilt"]], "tiltangle() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.tiltangle"]], "title() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.title"]], "towards() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.towards"]], "tracer() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.tracer"]], "turtle": [[384, "module-turtle"]], "turtledemo": [[384, "module-turtledemo"]], "turtles() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.turtles"]], "turtlesize() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.turtlesize"]], "undo() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.undo"]], "undobufferentries() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.undobufferentries"]], "up() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.up"]], "update() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.update"]], "width() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.width"]], "window_height() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.window_height"]], "window_width() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.window_width"]], "write() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.write"]], "write_docstringdict() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.write_docstringdict"]], "xcor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.xcor"]], "ycor() (\u65bc turtle \u6a21\u7d44\u4e2d)": [[384, "turtle.ycor"]], "asyncgeneratortype (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.AsyncGeneratorType"]], "builtinfunctiontype (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.BuiltinFunctionType"]], "builtinmethodtype (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.BuiltinMethodType"]], "celltype (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.CellType"]], "classmethoddescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.ClassMethodDescriptorType"]], "codetype (types \u4e2d\u7684\u985e\u5225)": [[385, "types.CodeType"]], "coroutinetype (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.CoroutineType"]], "dynamicclassattribute() (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.DynamicClassAttribute"]], "ellipsistype (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.EllipsisType"]], "frametype (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.FrameType"]], "functiontype (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.FunctionType"]], "generatortype (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.GeneratorType"]], "genericalias (types \u4e2d\u7684\u985e\u5225)": [[385, "types.GenericAlias"]], "getsetdescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.GetSetDescriptorType"]], "lambdatype (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.LambdaType"]], "mappingproxytype (types \u4e2d\u7684\u985e\u5225)": [[385, "types.MappingProxyType"]], "memberdescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.MemberDescriptorType"]], "methoddescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.MethodDescriptorType"]], "methodtype (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.MethodType"]], "methodwrappertype (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.MethodWrapperType"]], "moduletype (types \u4e2d\u7684\u985e\u5225)": [[385, "types.ModuleType"]], "nonetype (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.NoneType"]], "notimplementedtype (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.NotImplementedType"]], "pep 3115": [[385, "index-0"], [427, "index-45"], [428, "index-90"], [470, "index-14"], [476, "index-29"]], "pep 560": [[385, "index-1"], [385, "index-2"], [385, "index-3"], [428, "index-87"], [428, "index-96"], [480, "index-21"], [480, "index-33"], [483, "index-238"]], "simplenamespace (types \u4e2d\u7684\u985e\u5225)": [[385, "types.SimpleNamespace"]], "tracebacktype (types \u4e2d\u7684\u985e\u5225)": [[385, "types.TracebackType"]], "uniontype (types \u4e2d\u7684\u985e\u5225)": [[385, "types.UnionType"]], "wrapperdescriptortype (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.WrapperDescriptorType"]], "__doc__ (types.moduletype \u7684\u5c6c\u6027)": [[385, "types.ModuleType.__doc__"]], "__loader__ (types.moduletype \u7684\u5c6c\u6027)": [[385, "types.ModuleType.__loader__"]], "__name__ (types.moduletype \u7684\u5c6c\u6027)": [[385, "types.ModuleType.__name__"]], "__package__ (types.moduletype \u7684\u5c6c\u6027)": [[385, "types.ModuleType.__package__"]], "__spec__ (types.moduletype \u7684\u5c6c\u6027)": [[385, "types.ModuleType.__spec__"]], "copy() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[385, "types.MappingProxyType.copy"]], "coroutine() (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.coroutine"]], "get() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[385, "types.MappingProxyType.get"]], "get_original_bases() (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.get_original_bases"]], "items() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[385, "types.MappingProxyType.items"]], "keys() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[385, "types.MappingProxyType.keys"]], "new_class() (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.new_class"]], "prepare_class() (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.prepare_class"]], "resolve_bases() (\u65bc types \u6a21\u7d44\u4e2d)": [[385, "types.resolve_bases"]], "types": [[385, "module-types"]], "values() (types.mappingproxytype \u7684\u65b9\u6cd5)": [[385, "types.MappingProxyType.values"]], "abstractset (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.AbstractSet"]], "annotated (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.Annotated"]], "any (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.Any"]], "anystr (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.AnyStr"]], "asynccontextmanager (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.AsyncContextManager"]], "asyncgenerator (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.AsyncGenerator"]], "asynciterable (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.AsyncIterable"]], "asynciterator (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.AsyncIterator"]], "awaitable (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Awaitable"]], "binaryio (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.BinaryIO"]], "bytestring (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.ByteString"]], "callable (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.Callable"]], "chainmap (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.ChainMap"]], "classvar (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.ClassVar"]], "collection (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Collection"]], "concatenate (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.Concatenate"]], "container (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Container"]], "contextmanager (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.ContextManager"]], "coroutine (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Coroutine"]], "counter (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Counter"]], "defaultdict (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.DefaultDict"]], "deque (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Deque"]], "dict (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Dict"]], "final (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.Final"]], "forwardref (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.ForwardRef"]], "frozenset (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.FrozenSet"]], "generator (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Generator"]], "generic (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Generic"]], "hashable (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Hashable"]], "io (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.IO"]], "itemsview (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.ItemsView"]], "iterable (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Iterable"]], "iterator (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Iterator"]], "keysview (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.KeysView"]], "list (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.List"]], "literal (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.Literal"]], "literalstring (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.LiteralString"]], "mapping (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Mapping"]], "mappingview (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.MappingView"]], "match (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Match"]], "mutablemapping (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.MutableMapping"]], "mutablesequence (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.MutableSequence"]], "mutableset (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.MutableSet"]], "namedtuple (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.NamedTuple"]], "never (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.Never"]], "newtype (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.NewType"]], "noreturn (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.NoReturn"]], "notrequired (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.NotRequired"]], "optional (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.Optional"]], "ordereddict (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.OrderedDict"]], "pep 544": [[386, "index-26"], [386, "index-98"], [481, "index-18"]], "pep 586": [[386, "index-10"], [472, "index-111"], [481, "index-16"], [482, "index-27"]], "pep 589": [[386, "index-28"], [481, "index-15"]], "pep 591": [[386, "index-12"], [386, "index-32"], [481, "index-17"]], "pep 593": [[386, "index-106"], [386, "index-15"], [482, "index-17"], [482, "index-5"], [483, "index-198"]], "pep 612": [[386, "index-107"], [386, "index-24"], [386, "index-9"], [386, "index-94"], [386, "index-95"], [472, "index-102"], [472, "index-86"], [483, "index-113"], [483, "index-116"], [483, "index-118"], [483, "index-91"], [483, "index-98"]], "pep 613": [[386, "index-101"], [472, "index-104"], [472, "index-87"], [483, "index-135"]], "pep 646": [[386, "index-21"], [473, "index-95"], [473, "index-96"]], "pep 647": [[386, "index-16"], [472, "index-105"], [472, "index-88"], [483, "index-99"]], "pep 655": [[386, "index-102"], [386, "index-103"], [386, "index-29"], [473, "index-97"], [483, "index-60"]], "pep 673": [[386, "index-100"], [473, "index-99"], [483, "index-76"]], "pep 675": [[386, "index-99"], [473, "index-100"], [483, "index-66"]], "pep 681": [[386, "index-104"], [473, "index-101"], [483, "index-58"]], "pep 692": [[386, "index-17"], [474, "index-17"], [474, "index-60"], [483, "index-14"], [483, "index-21"]], "pep 695": [[386, "index-19"], [386, "index-20"], [386, "index-22"], [386, "index-23"], [386, "index-77"], [429, "index-12"], [436, "index-48"], [474, "index-29"], [474, "index-4"], [474, "index-57"], [483, "index-1"], [483, "index-13"], [483, "index-2"], [483, "index-3"], [483, "index-4"], [483, "index-5"], [483, "index-8"]], "pep 698": [[386, "index-105"], [474, "index-61"], [483, "index-25"]], "paramspec (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.ParamSpec"]], "paramspecargs (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.ParamSpecArgs"]], "paramspeckwargs (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.ParamSpecKwargs"]], "pattern (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Pattern"]], "protocol (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Protocol"]], "required (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.Required"]], "reversible (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Reversible"]], "self (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.Self"]], "sequence (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Sequence"]], "set (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Set"]], "sized (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Sized"]], "supportsabs (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.SupportsAbs"]], "supportsbytes (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.SupportsBytes"]], "supportscomplex (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.SupportsComplex"]], "supportsfloat (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.SupportsFloat"]], "supportsindex (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.SupportsIndex"]], "supportsint (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.SupportsInt"]], "supportsround (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.SupportsRound"]], "type_checking (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.TYPE_CHECKING"]], "text (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Text"]], "textio (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.TextIO"]], "tuple (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.Tuple"]], "type (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.Type"]], "typealias (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.TypeAlias"]], "typealiastype (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.TypeAliasType"]], "typeguard (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.TypeGuard"]], "typevar (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.TypeVar"]], "typevartuple (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.TypeVarTuple"]], "typeddict (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.TypedDict"]], "union (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.Union"]], "unpack (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.Unpack"]], "valuesview (typing \u4e2d\u7684\u985e\u5225)": [[386, "typing.ValuesView"]], "__bound__ (typing.typevar \u7684\u5c6c\u6027)": [[386, "typing.TypeVar.__bound__"]], "__constraints__ (typing.typevar \u7684\u5c6c\u6027)": [[386, "typing.TypeVar.__constraints__"]], "__contravariant__ (typing.typevar \u7684\u5c6c\u6027)": [[386, "typing.TypeVar.__contravariant__"]], "__covariant__ (typing.typevar \u7684\u5c6c\u6027)": [[386, "typing.TypeVar.__covariant__"]], "__infer_variance__ (typing.typevar \u7684\u5c6c\u6027)": [[386, "typing.TypeVar.__infer_variance__"]], "__module__ (typing.newtype \u7684\u5c6c\u6027)": [[386, "typing.NewType.__module__"]], "__module__ (typing.typealiastype \u7684\u5c6c\u6027)": [[386, "typing.TypeAliasType.__module__"]], "__name__ (typing.newtype \u7684\u5c6c\u6027)": [[386, "typing.NewType.__name__"]], "__name__ (typing.paramspec \u7684\u5c6c\u6027)": [[386, "typing.ParamSpec.__name__"]], "__name__ (typing.typealiastype \u7684\u5c6c\u6027)": [[386, "typing.TypeAliasType.__name__"]], "__name__ (typing.typevar \u7684\u5c6c\u6027)": [[386, "typing.TypeVar.__name__"]], "__name__ (typing.typevartuple \u7684\u5c6c\u6027)": [[386, "typing.TypeVarTuple.__name__"]], "__optional_keys__ (typing.typeddict \u7684\u5c6c\u6027)": [[386, "typing.TypedDict.__optional_keys__"]], "__required_keys__ (typing.typeddict \u7684\u5c6c\u6027)": [[386, "typing.TypedDict.__required_keys__"]], "__supertype__ (typing.newtype \u7684\u5c6c\u6027)": [[386, "typing.NewType.__supertype__"]], "__total__ (typing.typeddict \u7684\u5c6c\u6027)": [[386, "typing.TypedDict.__total__"]], "__type_params__ (typing.typealiastype \u7684\u5c6c\u6027)": [[386, "typing.TypeAliasType.__type_params__"]], "__value__ (typing.typealiastype \u7684\u5c6c\u6027)": [[386, "typing.TypeAliasType.__value__"]], "args (typing.paramspec \u7684\u5c6c\u6027)": [[386, "typing.ParamSpec.args"]], "assert_never() (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.assert_never"]], "assert_type() (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.assert_type"]], "cast() (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.cast"]], "clear_overloads() (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.clear_overloads"]], "dataclass_transform() (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.dataclass_transform"]], "final() (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.final"]], "get_args() (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.get_args"]], "get_origin() (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.get_origin"]], "get_overloads() (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.get_overloads"]], "get_type_hints() (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.get_type_hints"]], "is_typeddict() (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.is_typeddict"]], "kwargs (typing.paramspec \u7684\u5c6c\u6027)": [[386, "typing.ParamSpec.kwargs"]], "no_type_check() (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.no_type_check"]], "no_type_check_decorator() (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.no_type_check_decorator"]], "overload() (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.overload"]], "override() (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.override"]], "reveal_type() (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.reveal_type"]], "runtime_checkable() (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.runtime_checkable"]], "type_check_only() (\u65bc typing \u6a21\u7d44\u4e2d)": [[386, "typing.type_check_only"]], "typing": [[386, "module-typing"]], "bidirectional() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[387, "unicodedata.bidirectional"]], "category() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[387, "unicodedata.category"]], "character\uff08\u5b57\u5143\uff09": [[387, "index-0"], [428, "index-19"], [430, "index-43"]], "combining() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[387, "unicodedata.combining"]], "database\uff08\u8cc7\u6599\u5eab\uff09": [[387, "index-0"]], "decimal() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[387, "unicodedata.decimal"]], "decomposition() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[387, "unicodedata.decomposition"]], "digit() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[387, "unicodedata.digit"]], "east_asian_width() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[387, "unicodedata.east_asian_width"]], "is_normalized() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[387, "unicodedata.is_normalized"]], "lookup() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[387, "unicodedata.lookup"]], "mirrored() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[387, "unicodedata.mirrored"]], "name() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[387, "unicodedata.name"]], "normalize() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[387, "unicodedata.normalize"]], "numeric() (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[387, "unicodedata.numeric"]], "ucd_3_2_0 (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[387, "unicodedata.ucd_3_2_0"]], "unicodedata": [[387, "module-unicodedata"]], "unidata_version (\u65bc unicodedata \u6a21\u7d44\u4e2d)": [[387, "unicodedata.unidata_version"]], "--buffer": [[388, "cmdoption-unittest-b"]], "--catch": [[388, "cmdoption-unittest-c"]], "--durations": [[388, "cmdoption-unittest-durations"]], "--failfast": [[388, "cmdoption-unittest-f"]], "--locals": [[388, "cmdoption-unittest-locals"]], "--pattern": [[388, "cmdoption-unittest-discover-p"]], "--start-directory": [[388, "cmdoption-unittest-discover-s"]], "--top-level-directory": [[388, "cmdoption-unittest-discover-t"]], "-k": [[388, "cmdoption-unittest-k"]], "functiontestcase (unittest \u4e2d\u7684\u985e\u5225)": [[388, "unittest.FunctionTestCase"]], "isolatedasynciotestcase (unittest \u4e2d\u7684\u985e\u5225)": [[388, "unittest.IsolatedAsyncioTestCase"]], "skiptest": [[388, "unittest.SkipTest"]], "testcase (unittest \u4e2d\u7684\u985e\u5225)": [[388, "unittest.TestCase"]], "testloader (unittest \u4e2d\u7684\u985e\u5225)": [[388, "unittest.TestLoader"]], "testresult (unittest \u4e2d\u7684\u985e\u5225)": [[388, "unittest.TestResult"]], "testsuite (unittest \u4e2d\u7684\u985e\u5225)": [[388, "unittest.TestSuite"]], "texttestresult (unittest \u4e2d\u7684\u985e\u5225)": [[388, "unittest.TextTestResult"]], "texttestrunner (unittest \u4e2d\u7684\u985e\u5225)": [[388, "unittest.TextTestRunner"]], "__iter__() (unittest.testsuite \u7684\u65b9\u6cd5)": [[388, "unittest.TestSuite.__iter__"]], "_makeresult() (unittest.texttestrunner \u7684\u65b9\u6cd5)": [[388, "unittest.TextTestRunner._makeResult"]], "addasynccleanup() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[388, "unittest.IsolatedAsyncioTestCase.addAsyncCleanup"]], "addclasscleanup() (unittest.testcase \u7684\u985e\u5225\u65b9\u6cd5)": [[388, "unittest.TestCase.addClassCleanup"]], "addcleanup() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.addCleanup"]], "addduration() (unittest.testresult \u7684\u65b9\u6cd5)": [[388, "unittest.TestResult.addDuration"]], "adderror() (unittest.testresult \u7684\u65b9\u6cd5)": [[388, "unittest.TestResult.addError"]], "addexpectedfailure() (unittest.testresult \u7684\u65b9\u6cd5)": [[388, "unittest.TestResult.addExpectedFailure"]], "addfailure() (unittest.testresult \u7684\u65b9\u6cd5)": [[388, "unittest.TestResult.addFailure"]], "addmodulecleanup() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[388, "unittest.addModuleCleanup"]], "addskip() (unittest.testresult \u7684\u65b9\u6cd5)": [[388, "unittest.TestResult.addSkip"]], "addsubtest() (unittest.testresult \u7684\u65b9\u6cd5)": [[388, "unittest.TestResult.addSubTest"]], "addsuccess() (unittest.testresult \u7684\u65b9\u6cd5)": [[388, "unittest.TestResult.addSuccess"]], "addtest() (unittest.testsuite \u7684\u65b9\u6cd5)": [[388, "unittest.TestSuite.addTest"]], "addtests() (unittest.testsuite \u7684\u65b9\u6cd5)": [[388, "unittest.TestSuite.addTests"]], "addtypeequalityfunc() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.addTypeEqualityFunc"]], "addunexpectedsuccess() (unittest.testresult \u7684\u65b9\u6cd5)": [[388, "unittest.TestResult.addUnexpectedSuccess"]], "assertalmostequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertAlmostEqual"]], "assertcountequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertCountEqual"]], "assertdictequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertDictEqual"]], "assertequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertEqual"]], "assertfalse() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertFalse"]], "assertgreater() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertGreater"]], "assertgreaterequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertGreaterEqual"]], "assertin() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertIn"]], "assertis() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertIs"]], "assertisinstance() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertIsInstance"]], "assertisnone() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertIsNone"]], "assertisnot() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertIsNot"]], "assertisnotnone() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertIsNotNone"]], "assertless() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertLess"]], "assertlessequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertLessEqual"]], "assertlistequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertListEqual"]], "assertlogs() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertLogs"]], "assertmultilineequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertMultiLineEqual"]], "assertnologs() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertNoLogs"]], "assertnotalmostequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertNotAlmostEqual"]], "assertnotequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertNotEqual"]], "assertnotin() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertNotIn"]], "assertnotisinstance() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertNotIsInstance"]], "assertnotregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertNotRegex"]], "assertraises() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertRaises"]], "assertraisesregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertRaisesRegex"]], "assertregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertRegex"]], "assertsequenceequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertSequenceEqual"]], "assertsetequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertSetEqual"]], "asserttrue() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertTrue"]], "asserttupleequal() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertTupleEqual"]], "assertwarns() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertWarns"]], "assertwarnsregex() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.assertWarnsRegex"]], "asyncsetup() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[388, "unittest.IsolatedAsyncioTestCase.asyncSetUp"]], "asyncteardown() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[388, "unittest.IsolatedAsyncioTestCase.asyncTearDown"]], "buffer (unittest.testresult \u7684\u5c6c\u6027)": [[388, "unittest.TestResult.buffer"]], "collecteddurations (unittest.testresult \u7684\u5c6c\u6027)": [[388, "unittest.TestResult.collectedDurations"]], "counttestcases() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.countTestCases"]], "counttestcases() (unittest.testsuite \u7684\u65b9\u6cd5)": [[388, "unittest.TestSuite.countTestCases"]], "debug() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.debug"]], "debug() (unittest.testsuite \u7684\u65b9\u6cd5)": [[388, "unittest.TestSuite.debug"]], "defaulttestloader (\u65bc unittest \u6a21\u7d44\u4e2d)": [[388, "unittest.defaultTestLoader"]], "defaulttestresult() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.defaultTestResult"]], "discover() (unittest.testloader \u7684\u65b9\u6cd5)": [[388, "unittest.TestLoader.discover"]], "doclasscleanups() (unittest.testcase \u7684\u985e\u5225\u65b9\u6cd5)": [[388, "unittest.TestCase.doClassCleanups"]], "docleanups() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.doCleanups"]], "domodulecleanups() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[388, "unittest.doModuleCleanups"]], "enterasynccontext() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[388, "unittest.IsolatedAsyncioTestCase.enterAsyncContext"]], "enterclasscontext() (unittest.testcase \u7684\u985e\u5225\u65b9\u6cd5)": [[388, "unittest.TestCase.enterClassContext"]], "entercontext() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.enterContext"]], "entermodulecontext() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[388, "unittest.enterModuleContext"]], "errors (unittest.testloader \u7684\u5c6c\u6027)": [[388, "unittest.TestLoader.errors"]], "errors (unittest.testresult \u7684\u5c6c\u6027)": [[388, "unittest.TestResult.errors"]], "expectedfailure() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[388, "unittest.expectedFailure"]], "expectedfailures (unittest.testresult \u7684\u5c6c\u6027)": [[388, "unittest.TestResult.expectedFailures"]], "fail() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.fail"]], "failfast (unittest.testresult \u7684\u5c6c\u6027)": [[388, "unittest.TestResult.failfast"]], "failureexception (unittest.testcase \u7684\u5c6c\u6027)": [[388, "unittest.TestCase.failureException"]], "failures (unittest.testresult \u7684\u5c6c\u6027)": [[388, "unittest.TestResult.failures"]], "gettestcasenames() (unittest.testloader \u7684\u65b9\u6cd5)": [[388, "unittest.TestLoader.getTestCaseNames"]], "id() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.id"]], "installhandler() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[388, "unittest.installHandler"]], "loadtestsfrommodule() (unittest.testloader \u7684\u65b9\u6cd5)": [[388, "unittest.TestLoader.loadTestsFromModule"]], "loadtestsfromname() (unittest.testloader \u7684\u65b9\u6cd5)": [[388, "unittest.TestLoader.loadTestsFromName"]], "loadtestsfromnames() (unittest.testloader \u7684\u65b9\u6cd5)": [[388, "unittest.TestLoader.loadTestsFromNames"]], "loadtestsfromtestcase() (unittest.testloader \u7684\u65b9\u6cd5)": [[388, "unittest.TestLoader.loadTestsFromTestCase"]], "longmessage (unittest.testcase \u7684\u5c6c\u6027)": [[388, "unittest.TestCase.longMessage"]], "main() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[388, "unittest.main"]], "maxdiff (unittest.testcase \u7684\u5c6c\u6027)": [[388, "unittest.TestCase.maxDiff"]], "output (unittest.testcase \u7684\u5c6c\u6027)": [[388, "unittest.TestCase.output"]], "records (unittest.testcase \u7684\u5c6c\u6027)": [[388, "unittest.TestCase.records"]], "registerresult() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[388, "unittest.registerResult"]], "removehandler() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[388, "unittest.removeHandler"]], "removeresult() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[388, "unittest.removeResult"]], "run() (unittest.isolatedasynciotestcase \u7684\u65b9\u6cd5)": [[388, "unittest.IsolatedAsyncioTestCase.run"]], "run() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.run"]], "run() (unittest.testsuite \u7684\u65b9\u6cd5)": [[388, "unittest.TestSuite.run"]], "run() (unittest.texttestrunner \u7684\u65b9\u6cd5)": [[388, "unittest.TextTestRunner.run"]], "setup() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.setUp"]], "setupclass() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.setUpClass"]], "shortdescription() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.shortDescription"]], "shouldstop (unittest.testresult \u7684\u5c6c\u6027)": [[388, "unittest.TestResult.shouldStop"]], "skip() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[388, "unittest.skip"]], "skipif() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[388, "unittest.skipIf"]], "skiptest() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.skipTest"]], "skipunless() (\u65bc unittest \u6a21\u7d44\u4e2d)": [[388, "unittest.skipUnless"]], "skipped (unittest.testresult \u7684\u5c6c\u6027)": [[388, "unittest.TestResult.skipped"]], "sorttestmethodsusing (unittest.testloader \u7684\u5c6c\u6027)": [[388, "unittest.TestLoader.sortTestMethodsUsing"]], "starttest() (unittest.testresult \u7684\u65b9\u6cd5)": [[388, "unittest.TestResult.startTest"]], "starttestrun() (unittest.testresult \u7684\u65b9\u6cd5)": [[388, "unittest.TestResult.startTestRun"]], "stop() (unittest.testresult \u7684\u65b9\u6cd5)": [[388, "unittest.TestResult.stop"]], "stoptest() (unittest.testresult \u7684\u65b9\u6cd5)": [[388, "unittest.TestResult.stopTest"]], "stoptestrun() (unittest.testresult \u7684\u65b9\u6cd5)": [[388, "unittest.TestResult.stopTestRun"]], "subtest() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.subTest"]], "suiteclass (unittest.testloader \u7684\u5c6c\u6027)": [[388, "unittest.TestLoader.suiteClass"]], "tb_locals (unittest.testresult \u7684\u5c6c\u6027)": [[388, "unittest.TestResult.tb_locals"]], "teardown() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.tearDown"]], "teardownclass() (unittest.testcase \u7684\u65b9\u6cd5)": [[388, "unittest.TestCase.tearDownClass"]], "testmethodprefix (unittest.testloader \u7684\u5c6c\u6027)": [[388, "unittest.TestLoader.testMethodPrefix"]], "testnamepatterns (unittest.testloader \u7684\u5c6c\u6027)": [[388, "unittest.TestLoader.testNamePatterns"]], "testsrun (unittest.testresult \u7684\u5c6c\u6027)": [[388, "unittest.TestResult.testsRun"]], "unexpectedsuccesses (unittest.testresult \u7684\u5c6c\u6027)": [[388, "unittest.TestResult.unexpectedSuccesses"]], "unittest": [[388, "module-unittest"]], "unittest \u547d\u4ee4\u5217\u9078\u9805": [[388, "cmdoption-unittest-b"], [388, "cmdoption-unittest-c"], [388, "cmdoption-unittest-durations"], [388, "cmdoption-unittest-f"], [388, "cmdoption-unittest-k"], [388, "cmdoption-unittest-locals"]], "unittest-discover \u547d\u4ee4\u5217\u9078\u9805": [[388, "cmdoption-unittest-discover-p"], [388, "cmdoption-unittest-discover-s"], [388, "cmdoption-unittest-discover-t"], [388, "cmdoption-unittest-discover-v"]], "wassuccessful() (unittest.testresult \u7684\u65b9\u6cd5)": [[388, "unittest.TestResult.wasSuccessful"]], "any (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[389, "unittest.mock.ANY"]], "asyncmock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[389, "unittest.mock.AsyncMock"]], "default (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[389, "unittest.mock.DEFAULT"]], "filter_dir (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[389, "unittest.mock.FILTER_DIR"]], "magicmock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[389, "unittest.mock.MagicMock"]], "mock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[389, "unittest.mock.Mock"]], "noncallablemagicmock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[389, "unittest.mock.NonCallableMagicMock"]], "noncallablemock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[389, "unittest.mock.NonCallableMock"]], "propertymock (unittest.mock \u4e2d\u7684\u985e\u5225)": [[389, "unittest.mock.PropertyMock"]], "__class__ (unittest.mock.mock \u7684\u5c6c\u6027)": [[389, "unittest.mock.Mock.__class__"]], "__dir__() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.Mock.__dir__"]], "_get_child_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.Mock._get_child_mock"]], "assert_any_await() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.AsyncMock.assert_any_await"]], "assert_any_call() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.Mock.assert_any_call"]], "assert_awaited() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.AsyncMock.assert_awaited"]], "assert_awaited_once() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.AsyncMock.assert_awaited_once"]], "assert_awaited_once_with() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.AsyncMock.assert_awaited_once_with"]], "assert_awaited_with() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.AsyncMock.assert_awaited_with"]], "assert_called() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.Mock.assert_called"]], "assert_called_once() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.Mock.assert_called_once"]], "assert_called_once_with() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.Mock.assert_called_once_with"]], "assert_called_with() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.Mock.assert_called_with"]], "assert_has_awaits() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.AsyncMock.assert_has_awaits"]], "assert_has_calls() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.Mock.assert_has_calls"]], "assert_not_awaited() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.AsyncMock.assert_not_awaited"]], "assert_not_called() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.Mock.assert_not_called"]], "attach_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.Mock.attach_mock"]], "await_args (unittest.mock.asyncmock \u7684\u5c6c\u6027)": [[389, "unittest.mock.AsyncMock.await_args"]], "await_args_list (unittest.mock.asyncmock \u7684\u5c6c\u6027)": [[389, "unittest.mock.AsyncMock.await_args_list"]], "await_count (unittest.mock.asyncmock \u7684\u5c6c\u6027)": [[389, "unittest.mock.AsyncMock.await_count"]], "call() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[389, "unittest.mock.call"]], "call_args (unittest.mock.mock \u7684\u5c6c\u6027)": [[389, "unittest.mock.Mock.call_args"]], "call_args_list (unittest.mock.mock \u7684\u5c6c\u6027)": [[389, "unittest.mock.Mock.call_args_list"]], "call_count (unittest.mock.mock \u7684\u5c6c\u6027)": [[389, "unittest.mock.Mock.call_count"]], "call_list() (unittest.mock.call \u7684\u65b9\u6cd5)": [[389, "unittest.mock.call.call_list"]], "called (unittest.mock.mock \u7684\u5c6c\u6027)": [[389, "unittest.mock.Mock.called"]], "configure_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.Mock.configure_mock"]], "create_autospec() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[389, "unittest.mock.create_autospec"]], "method_calls (unittest.mock.mock \u7684\u5c6c\u6027)": [[389, "unittest.mock.Mock.method_calls"]], "mock_add_spec() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.Mock.mock_add_spec"]], "mock_calls (unittest.mock.mock \u7684\u5c6c\u6027)": [[389, "unittest.mock.Mock.mock_calls"]], "mock_open() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[389, "unittest.mock.mock_open"]], "patch() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[389, "unittest.mock.patch"]], "patch.dict() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[389, "unittest.mock.patch.dict"]], "patch.multiple() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[389, "unittest.mock.patch.multiple"]], "patch.object() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[389, "unittest.mock.patch.object"]], "patch.stopall() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[389, "unittest.mock.patch.stopall"]], "reset_mock() (unittest.mock.asyncmock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.AsyncMock.reset_mock"]], "reset_mock() (unittest.mock.mock \u7684\u65b9\u6cd5)": [[389, "unittest.mock.Mock.reset_mock"]], "return_value (unittest.mock.mock \u7684\u5c6c\u6027)": [[389, "unittest.mock.Mock.return_value"]], "seal() (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[389, "unittest.mock.seal"]], "sentinel (\u65bc unittest.mock \u6a21\u7d44\u4e2d)": [[389, "unittest.mock.sentinel"]], "side_effect (unittest.mock.mock \u7684\u5c6c\u6027)": [[389, "unittest.mock.Mock.side_effect"]], "unittest.mock": [[389, "module-unittest.mock"]], "urllib": [[392, "module-urllib"]], "contenttooshorterror": [[393, "urllib.error.ContentTooShortError"]], "httperror": [[393, "urllib.error.HTTPError"]], "urlerror": [[393, "urllib.error.URLError"]], "code (urllib.error.httperror \u7684\u5c6c\u6027)": [[393, "urllib.error.HTTPError.code"]], "content (urllib.error.contenttooshorterror \u7684\u5c6c\u6027)": [[393, "urllib.error.ContentTooShortError.content"]], "fp (urllib.error.httperror \u7684\u5c6c\u6027)": [[393, "urllib.error.HTTPError.fp"]], "headers (urllib.error.httperror \u7684\u5c6c\u6027)": [[393, "urllib.error.HTTPError.headers"]], "reason (urllib.error.httperror \u7684\u5c6c\u6027)": [[393, "urllib.error.HTTPError.reason"]], "reason (urllib.error.urlerror \u7684\u5c6c\u6027)": [[393, "urllib.error.URLError.reason"]], "url (urllib.error.httperror \u7684\u5c6c\u6027)": [[393, "urllib.error.HTTPError.url"]], "urllib.error": [[393, "module-urllib.error"]], "defragresult (urllib.parse \u4e2d\u7684\u985e\u5225)": [[394, "urllib.parse.DefragResult"]], "defragresultbytes (urllib.parse \u4e2d\u7684\u985e\u5225)": [[394, "urllib.parse.DefragResultBytes"]], "parseresult (urllib.parse \u4e2d\u7684\u985e\u5225)": [[394, "urllib.parse.ParseResult"]], "parseresultbytes (urllib.parse \u4e2d\u7684\u985e\u5225)": [[394, "urllib.parse.ParseResultBytes"]], "rfc 1738": [[394, "index-17"]], "rfc 1808": [[394, "index-1"], [394, "index-16"], [478, "index-43"]], "rfc 2368": [[394, "index-11"]], "rfc 2396": [[394, "index-10"], [394, "index-3"], [394, "index-6"], [478, "index-44"], [480, "index-34"]], "rfc 2732": [[394, "index-9"], [469, "index-10"], [475, "index-13"]], "splitresult (urllib.parse \u4e2d\u7684\u985e\u5225)": [[394, "urllib.parse.SplitResult"]], "splitresultbytes (urllib.parse \u4e2d\u7684\u985e\u5225)": [[394, "urllib.parse.SplitResultBytes"]], "geturl() (urllib.parse.urllib.parse.splitresult \u7684\u65b9\u6cd5)": [[394, "urllib.parse.urllib.parse.SplitResult.geturl"]], "parse_qs() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[394, "urllib.parse.parse_qs"]], "parse_qsl() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[394, "urllib.parse.parse_qsl"]], "parsing\uff08\u5256\u6790\uff09": [[394, "index-0"]], "quote() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[394, "urllib.parse.quote"]], "quote_from_bytes() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[394, "urllib.parse.quote_from_bytes"]], "quote_plus() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[394, "urllib.parse.quote_plus"]], "relative\uff08\u76f8\u5c0d\uff09": [[394, "index-0"], [436, "index-39"]], "unquote() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[394, "urllib.parse.unquote"]], "unquote_plus() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[394, "urllib.parse.unquote_plus"]], "unquote_to_bytes() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[394, "urllib.parse.unquote_to_bytes"]], "unwrap() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[394, "urllib.parse.unwrap"]], "urldefrag() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[394, "urllib.parse.urldefrag"]], "urlencode() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[394, "urllib.parse.urlencode"]], "urljoin() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[394, "urllib.parse.urljoin"]], "urllib.parse": [[394, "module-urllib.parse"]], "urlparse() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[394, "urllib.parse.urlparse"]], "urlsplit() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[394, "urllib.parse.urlsplit"]], "urlunparse() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[394, "urllib.parse.urlunparse"]], "urlunsplit() (\u65bc urllib.parse \u6a21\u7d44\u4e2d)": [[394, "urllib.parse.urlunsplit"]], "abstractbasicauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.AbstractBasicAuthHandler"]], "abstractdigestauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.AbstractDigestAuthHandler"]], "basehandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.BaseHandler"]], "cacheftphandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.CacheFTPHandler"]], "datahandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.DataHandler"]], "ftphandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.FTPHandler"]], "fancyurlopener (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.FancyURLopener"]], "filehandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.FileHandler"]], "httpbasicauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.HTTPBasicAuthHandler"]], "httpcookieprocessor (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.HTTPCookieProcessor"]], "httpdefaulterrorhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.HTTPDefaultErrorHandler"]], "httpdigestauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.HTTPDigestAuthHandler"]], "httperrorprocessor (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.HTTPErrorProcessor"]], "httphandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.HTTPHandler"]], "httppasswordmgr (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.HTTPPasswordMgr"]], "httppasswordmgrwithdefaultrealm (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.HTTPPasswordMgrWithDefaultRealm"]], "httppasswordmgrwithpriorauth (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.HTTPPasswordMgrWithPriorAuth"]], "httpredirecthandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.HTTPRedirectHandler"]], "httpshandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.HTTPSHandler"]], "openerdirector (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.OpenerDirector"]], "proxybasicauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.ProxyBasicAuthHandler"]], "proxydigestauthhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.ProxyDigestAuthHandler"]], "proxyhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.ProxyHandler"]], "rfc 2397": [[395, "index-7"]], "request (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.Request"]], "urlopener (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.URLopener"]], "unknownhandler (urllib.request \u4e2d\u7684\u985e\u5225)": [[395, "urllib.request.UnknownHandler"]], "add_handler() (urllib.request.openerdirector \u7684\u65b9\u6cd5)": [[395, "urllib.request.OpenerDirector.add_handler"]], "add_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[395, "urllib.request.Request.add_header"]], "add_parent() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.BaseHandler.add_parent"]], "add_password() (urllib.request.httppasswordmgr \u7684\u65b9\u6cd5)": [[395, "urllib.request.HTTPPasswordMgr.add_password"]], "add_password() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[395, "urllib.request.HTTPPasswordMgrWithPriorAuth.add_password"]], "add_unredirected_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[395, "urllib.request.Request.add_unredirected_header"]], "addinfourl (urllib.response \u4e2d\u7684\u985e\u5225)": [[395, "urllib.response.addinfourl"]], "build_opener() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[395, "urllib.request.build_opener"]], "close() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.BaseHandler.close"]], "code (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[395, "urllib.response.addinfourl.code"]], "cookiejar (urllib.request.httpcookieprocessor \u7684\u5c6c\u6027)": [[395, "urllib.request.HTTPCookieProcessor.cookiejar"]], "data (urllib.request.request \u7684\u5c6c\u6027)": [[395, "urllib.request.Request.data"]], "data_open() (urllib.request.datahandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.DataHandler.data_open"]], "default_open() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.BaseHandler.default_open"]], "error() (urllib.request.openerdirector \u7684\u65b9\u6cd5)": [[395, "urllib.request.OpenerDirector.error"]], "file_open() (urllib.request.filehandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.FileHandler.file_open"]], "find_user_password() (urllib.request.httppasswordmgr \u7684\u65b9\u6cd5)": [[395, "urllib.request.HTTPPasswordMgr.find_user_password"]], "find_user_password() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[395, "urllib.request.HTTPPasswordMgrWithPriorAuth.find_user_password"]], "ftp_open() (urllib.request.ftphandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.FTPHandler.ftp_open"]], "full_url (urllib.request.request \u7684\u5c6c\u6027)": [[395, "urllib.request.Request.full_url"]], "get_full_url() (urllib.request.request \u7684\u65b9\u6cd5)": [[395, "urllib.request.Request.get_full_url"]], "get_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[395, "urllib.request.Request.get_header"]], "get_method() (urllib.request.request \u7684\u65b9\u6cd5)": [[395, "urllib.request.Request.get_method"]], "getcode() (urllib.response.addinfourl \u7684\u65b9\u6cd5)": [[395, "urllib.response.addinfourl.getcode"]], "getproxies() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[395, "urllib.request.getproxies"]], "geturl() (urllib.response.addinfourl \u7684\u65b9\u6cd5)": [[395, "urllib.response.addinfourl.geturl"]], "has_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[395, "urllib.request.Request.has_header"]], "header_items() (urllib.request.request \u7684\u65b9\u6cd5)": [[395, "urllib.request.Request.header_items"]], "headers (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[395, "urllib.response.addinfourl.headers"]], "host (urllib.request.request \u7684\u5c6c\u6027)": [[395, "urllib.request.Request.host"]], "http_error_301() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.HTTPRedirectHandler.http_error_301"]], "http_error_302() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.HTTPRedirectHandler.http_error_302"]], "http_error_303() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.HTTPRedirectHandler.http_error_303"]], "http_error_307() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.HTTPRedirectHandler.http_error_307"]], "http_error_308() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.HTTPRedirectHandler.http_error_308"]], "http_error_401() (urllib.request.httpbasicauthhandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.HTTPBasicAuthHandler.http_error_401"]], "http_error_401() (urllib.request.httpdigestauthhandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.HTTPDigestAuthHandler.http_error_401"]], "http_error_407() (urllib.request.proxybasicauthhandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.ProxyBasicAuthHandler.http_error_407"]], "http_error_407() (urllib.request.proxydigestauthhandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.ProxyDigestAuthHandler.http_error_407"]], "http_error_auth_reqed() (urllib.request.abstractbasicauthhandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.AbstractBasicAuthHandler.http_error_auth_reqed"]], "http_error_auth_reqed() (urllib.request.abstractdigestauthhandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.AbstractDigestAuthHandler.http_error_auth_reqed"]], "http_error_default() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.BaseHandler.http_error_default"]], "http_open() (urllib.request.httphandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.HTTPHandler.http_open"]], "http_response() (urllib.request.httperrorprocessor \u7684\u65b9\u6cd5)": [[395, "urllib.request.HTTPErrorProcessor.http_response"]], "https_open() (urllib.request.httpshandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.HTTPSHandler.https_open"]], "https_response() (urllib.request.httperrorprocessor \u7684\u65b9\u6cd5)": [[395, "urllib.request.HTTPErrorProcessor.https_response"]], "info() (urllib.response.addinfourl \u7684\u65b9\u6cd5)": [[395, "urllib.response.addinfourl.info"]], "install_opener() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[395, "urllib.request.install_opener"]], "is_authenticated() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[395, "urllib.request.HTTPPasswordMgrWithPriorAuth.is_authenticated"]], "method (urllib.request.request \u7684\u5c6c\u6027)": [[395, "urllib.request.Request.method"]], "no_proxy": [[395, "index-3"]], "open() (urllib.request.openerdirector \u7684\u65b9\u6cd5)": [[395, "urllib.request.OpenerDirector.open"]], "open() (urllib.request.urlopener \u7684\u65b9\u6cd5)": [[395, "urllib.request.URLopener.open"]], "open_unknown() (urllib.request.urlopener \u7684\u65b9\u6cd5)": [[395, "urllib.request.URLopener.open_unknown"]], "origin_req_host (urllib.request.request \u7684\u5c6c\u6027)": [[395, "urllib.request.Request.origin_req_host"]], "parent (urllib.request.basehandler \u7684\u5c6c\u6027)": [[395, "urllib.request.BaseHandler.parent"]], "pathname2url() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[395, "urllib.request.pathname2url"]], "prompt_user_passwd() (urllib.request.fancyurlopener \u7684\u65b9\u6cd5)": [[395, "urllib.request.FancyURLopener.prompt_user_passwd"]], "redirect_request() (urllib.request.httpredirecthandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.HTTPRedirectHandler.redirect_request"]], "remove_header() (urllib.request.request \u7684\u65b9\u6cd5)": [[395, "urllib.request.Request.remove_header"]], "retrieve() (urllib.request.urlopener \u7684\u65b9\u6cd5)": [[395, "urllib.request.URLopener.retrieve"]], "selector (urllib.request.request \u7684\u5c6c\u6027)": [[395, "urllib.request.Request.selector"]], "setmaxconns() (urllib.request.cacheftphandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.CacheFTPHandler.setMaxConns"]], "settimeout() (urllib.request.cacheftphandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.CacheFTPHandler.setTimeout"]], "set_proxy() (urllib.request.request \u7684\u65b9\u6cd5)": [[395, "urllib.request.Request.set_proxy"]], "status (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[395, "urllib.response.addinfourl.status"]], "type (urllib.request.request \u7684\u5c6c\u6027)": [[395, "urllib.request.Request.type"]], "unknown_open() (urllib.request.basehandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.BaseHandler.unknown_open"]], "unknown_open() (urllib.request.unknownhandler \u7684\u65b9\u6cd5)": [[395, "urllib.request.UnknownHandler.unknown_open"]], "unverifiable (urllib.request.request \u7684\u5c6c\u6027)": [[395, "urllib.request.Request.unverifiable"]], "update_authenticated() (urllib.request.httppasswordmgrwithpriorauth \u7684\u65b9\u6cd5)": [[395, "urllib.request.HTTPPasswordMgrWithPriorAuth.update_authenticated"]], "url (urllib.response.addinfourl \u7684\u5c6c\u6027)": [[395, "urllib.response.addinfourl.url"]], "url2pathname() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[395, "urllib.request.url2pathname"]], "urlcleanup() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[395, "urllib.request.urlcleanup"]], "urllib.response": [[395, "module-urllib.response"]], "urlopen() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[395, "urllib.request.urlopen"]], "urlretrieve() (\u65bc urllib.request \u6a21\u7d44\u4e2d)": [[395, "urllib.request.urlretrieve"]], "version (urllib.request.urlopener \u7684\u5c6c\u6027)": [[395, "urllib.request.URLopener.version"]], "robotfileparser (urllib.robotparser \u4e2d\u7684\u985e\u5225)": [[396, "urllib.robotparser.RobotFileParser"]], "can_fetch() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[396, "urllib.robotparser.RobotFileParser.can_fetch"]], "crawl_delay() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[396, "urllib.robotparser.RobotFileParser.crawl_delay"]], "modified() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[396, "urllib.robotparser.RobotFileParser.modified"]], "mtime() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[396, "urllib.robotparser.RobotFileParser.mtime"]], "parse() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[396, "urllib.robotparser.RobotFileParser.parse"]], "read() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[396, "urllib.robotparser.RobotFileParser.read"]], "request_rate() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[396, "urllib.robotparser.RobotFileParser.request_rate"]], "robots.txt": [[396, "index-0"]], "set_url() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[396, "urllib.robotparser.RobotFileParser.set_url"]], "site_maps() (urllib.robotparser.robotfileparser \u7684\u65b9\u6cd5)": [[396, "urllib.robotparser.RobotFileParser.site_maps"]], "urllib.robotparser": [[396, "module-urllib.robotparser"]], "ellinghouse, lance": [[397, "index-1"]], "jansen, jack": [[397, "index-1"]], "pep 594#uu-and-the-uu-encoding": [[397, "index-3"]], "decode() (\u65bc uu \u6a21\u7d44\u4e2d)": [[397, "uu.decode"]], "encode() (\u65bc uu \u6a21\u7d44\u4e2d)": [[397, "uu.encode"]], "--name": [[398, "cmdoption-uuid-name"]], "--namespace": [[398, "cmdoption-uuid-namespace"]], "--uuid": [[398, "cmdoption-uuid-uuid"]], "namespace_dns (\u65bc uuid \u6a21\u7d44\u4e2d)": [[398, "uuid.NAMESPACE_DNS"]], "namespace_oid (\u65bc uuid \u6a21\u7d44\u4e2d)": [[398, "uuid.NAMESPACE_OID"]], "namespace_url (\u65bc uuid \u6a21\u7d44\u4e2d)": [[398, "uuid.NAMESPACE_URL"]], "namespace_x500 (\u65bc uuid \u6a21\u7d44\u4e2d)": [[398, "uuid.NAMESPACE_X500"]], "reserved_future (\u65bc uuid \u6a21\u7d44\u4e2d)": [[398, "uuid.RESERVED_FUTURE"]], "reserved_microsoft (\u65bc uuid \u6a21\u7d44\u4e2d)": [[398, "uuid.RESERVED_MICROSOFT"]], "reserved_ncs (\u65bc uuid \u6a21\u7d44\u4e2d)": [[398, "uuid.RESERVED_NCS"]], "rfc_4122 (\u65bc uuid \u6a21\u7d44\u4e2d)": [[398, "uuid.RFC_4122"]], "safeuuid (uuid \u4e2d\u7684\u985e\u5225)": [[398, "uuid.SafeUUID"]], "uuid (uuid \u4e2d\u7684\u985e\u5225)": [[398, "uuid.UUID"]], "bytes (uuid.uuid \u7684\u5c6c\u6027)": [[398, "uuid.UUID.bytes"]], "bytes_le (uuid.uuid \u7684\u5c6c\u6027)": [[398, "uuid.UUID.bytes_le"]], "clock_seq (uuid.uuid \u7684\u5c6c\u6027)": [[398, "uuid.UUID.clock_seq"]], "clock_seq_hi_variant (uuid.uuid \u7684\u5c6c\u6027)": [[398, "uuid.UUID.clock_seq_hi_variant"]], "clock_seq_low (uuid.uuid \u7684\u5c6c\u6027)": [[398, "uuid.UUID.clock_seq_low"]], "fields (uuid.uuid \u7684\u5c6c\u6027)": [[398, "uuid.UUID.fields"]], "getnode": [[398, "index-5"]], "getnode() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[398, "uuid.getnode"]], "hex (uuid.uuid \u7684\u5c6c\u6027)": [[398, "uuid.UUID.hex"]], "int (uuid.uuid \u7684\u5c6c\u6027)": [[398, "uuid.UUID.int"]], "is_safe (uuid.uuid \u7684\u5c6c\u6027)": [[398, "uuid.UUID.is_safe"]], "node (uuid.uuid \u7684\u5c6c\u6027)": [[398, "uuid.UUID.node"]], "safe (uuid.safeuuid \u7684\u5c6c\u6027)": [[398, "uuid.SafeUUID.safe"]], "time (uuid.uuid \u7684\u5c6c\u6027)": [[398, "uuid.UUID.time"]], "time_hi_version (uuid.uuid \u7684\u5c6c\u6027)": [[398, "uuid.UUID.time_hi_version"]], "time_low (uuid.uuid \u7684\u5c6c\u6027)": [[398, "uuid.UUID.time_low"]], "time_mid (uuid.uuid \u7684\u5c6c\u6027)": [[398, "uuid.UUID.time_mid"]], "unknown (uuid.safeuuid \u7684\u5c6c\u6027)": [[398, "uuid.SafeUUID.unknown"]], "unsafe (uuid.safeuuid \u7684\u5c6c\u6027)": [[398, "uuid.SafeUUID.unsafe"]], "urn (uuid.uuid \u7684\u5c6c\u6027)": [[398, "uuid.UUID.urn"]], "uuid": [[398, "module-uuid"]], "uuid \u547d\u4ee4\u5217\u9078\u9805": [[398, "cmdoption-uuid-N"], [398, "cmdoption-uuid-h"], [398, "cmdoption-uuid-n"], [398, "cmdoption-uuid-name"], [398, "cmdoption-uuid-namespace"], [398, "cmdoption-uuid-u"], [398, "cmdoption-uuid-uuid"]], "uuid1": [[398, "index-6"]], "uuid1() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[398, "uuid.uuid1"]], "uuid3": [[398, "index-7"]], "uuid3() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[398, "uuid.uuid3"]], "uuid4": [[398, "index-8"]], "uuid4() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[398, "uuid.uuid4"]], "uuid5": [[398, "index-9"]], "uuid5() (\u65bc uuid \u6a21\u7d44\u4e2d)": [[398, "uuid.uuid5"]], "variant (uuid.uuid \u7684\u5c6c\u6027)": [[398, "uuid.UUID.variant"]], "version (uuid.uuid \u7684\u5c6c\u6027)": [[398, "uuid.UUID.version"]], "envbuilder (venv \u4e2d\u7684\u985e\u5225)": [[399, "venv.EnvBuilder"]], "environments \uff08\u74b0\u5883\uff09": [[399, "index-0"]], "pep 405": [[399, "index-9"], [476, "index-52"]], "create() (venv.envbuilder \u7684\u65b9\u6cd5)": [[399, "venv.EnvBuilder.create"]], "create() (\u65bc venv \u6a21\u7d44\u4e2d)": [[399, "venv.create"]], "create_configuration() (venv.envbuilder \u7684\u65b9\u6cd5)": [[399, "venv.EnvBuilder.create_configuration"]], "ensure_directories() (venv.envbuilder \u7684\u65b9\u6cd5)": [[399, "venv.EnvBuilder.ensure_directories"]], "install_scripts() (venv.envbuilder \u7684\u65b9\u6cd5)": [[399, "venv.EnvBuilder.install_scripts"]], "post_setup() (venv.envbuilder \u7684\u65b9\u6cd5)": [[399, "venv.EnvBuilder.post_setup"]], "setup_python() (venv.envbuilder \u7684\u65b9\u6cd5)": [[399, "venv.EnvBuilder.setup_python"]], "setup_scripts() (venv.envbuilder \u7684\u65b9\u6cd5)": [[399, "venv.EnvBuilder.setup_scripts"]], "upgrade_dependencies() (venv.envbuilder \u7684\u65b9\u6cd5)": [[399, "venv.EnvBuilder.upgrade_dependencies"]], "venv": [[399, "module-venv"]], "virtual \uff08\u865b\u64ec\uff09": [[399, "index-0"]], "catch_warnings (warnings \u4e2d\u7684\u985e\u5225)": [[400, "warnings.catch_warnings"]], "filterwarnings() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[400, "warnings.filterwarnings"]], "formatwarning() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[400, "warnings.formatwarning"]], "resetwarnings() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[400, "warnings.resetwarnings"]], "showwarning() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[400, "warnings.showwarning"]], "simplefilter() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[400, "warnings.simplefilter"]], "warn() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[400, "warnings.warn"]], "warn_explicit() (\u65bc warnings \u6a21\u7d44\u4e2d)": [[400, "warnings.warn_explicit"]], "warnings": [[400, "module-warnings"]], "warnings \uff08\u8b66\u544a\uff09": [[400, "index-0"]], "wave_read (wave \u4e2d\u7684\u985e\u5225)": [[401, "wave.Wave_read"]], "wave_write (wave \u4e2d\u7684\u985e\u5225)": [[401, "wave.Wave_write"]], "close() (wave.wave_read \u7684\u65b9\u6cd5)": [[401, "wave.Wave_read.close"]], "close() (wave.wave_write \u7684\u65b9\u6cd5)": [[401, "wave.Wave_write.close"]], "getcompname() (wave.wave_read \u7684\u65b9\u6cd5)": [[401, "wave.Wave_read.getcompname"]], "getcomptype() (wave.wave_read \u7684\u65b9\u6cd5)": [[401, "wave.Wave_read.getcomptype"]], "getframerate() (wave.wave_read \u7684\u65b9\u6cd5)": [[401, "wave.Wave_read.getframerate"]], "getmark() (wave.wave_read \u7684\u65b9\u6cd5)": [[401, "wave.Wave_read.getmark"]], "getmarkers() (wave.wave_read \u7684\u65b9\u6cd5)": [[401, "wave.Wave_read.getmarkers"]], "getnchannels() (wave.wave_read \u7684\u65b9\u6cd5)": [[401, "wave.Wave_read.getnchannels"]], "getnframes() (wave.wave_read \u7684\u65b9\u6cd5)": [[401, "wave.Wave_read.getnframes"]], "getparams() (wave.wave_read \u7684\u65b9\u6cd5)": [[401, "wave.Wave_read.getparams"]], "getsampwidth() (wave.wave_read \u7684\u65b9\u6cd5)": [[401, "wave.Wave_read.getsampwidth"]], "open() (\u65bc wave \u6a21\u7d44\u4e2d)": [[401, "wave.open"]], "readframes() (wave.wave_read \u7684\u65b9\u6cd5)": [[401, "wave.Wave_read.readframes"]], "rewind() (wave.wave_read \u7684\u65b9\u6cd5)": [[401, "wave.Wave_read.rewind"]], "setcomptype() (wave.wave_write \u7684\u65b9\u6cd5)": [[401, "wave.Wave_write.setcomptype"]], "setframerate() (wave.wave_write \u7684\u65b9\u6cd5)": [[401, "wave.Wave_write.setframerate"]], "setnchannels() (wave.wave_write \u7684\u65b9\u6cd5)": [[401, "wave.Wave_write.setnchannels"]], "setnframes() (wave.wave_write \u7684\u65b9\u6cd5)": [[401, "wave.Wave_write.setnframes"]], "setparams() (wave.wave_write \u7684\u65b9\u6cd5)": [[401, "wave.Wave_write.setparams"]], "setpos() (wave.wave_read \u7684\u65b9\u6cd5)": [[401, "wave.Wave_read.setpos"]], "setsampwidth() (wave.wave_write \u7684\u65b9\u6cd5)": [[401, "wave.Wave_write.setsampwidth"]], "tell() (wave.wave_read \u7684\u65b9\u6cd5)": [[401, "wave.Wave_read.tell"]], "tell() (wave.wave_write \u7684\u65b9\u6cd5)": [[401, "wave.Wave_write.tell"]], "wave": [[401, "module-wave"]], "writeframes() (wave.wave_write \u7684\u65b9\u6cd5)": [[401, "wave.Wave_write.writeframes"]], "writeframesraw() (wave.wave_write \u7684\u65b9\u6cd5)": [[401, "wave.Wave_write.writeframesraw"]], "callableproxytype (\u65bc weakref \u6a21\u7d44\u4e2d)": [[402, "weakref.CallableProxyType"]], "pep 205": [[402, "index-2"], [463, "index-9"]], "proxytype (\u65bc weakref \u6a21\u7d44\u4e2d)": [[402, "weakref.ProxyType"]], "proxytypes (\u65bc weakref \u6a21\u7d44\u4e2d)": [[402, "weakref.ProxyTypes"]], "referencetype (\u65bc weakref \u6a21\u7d44\u4e2d)": [[402, "weakref.ReferenceType"]], "weakkeydictionary (weakref \u4e2d\u7684\u985e\u5225)": [[402, "weakref.WeakKeyDictionary"]], "weakmethod (weakref \u4e2d\u7684\u985e\u5225)": [[402, "weakref.WeakMethod"]], "weakset (weakref \u4e2d\u7684\u985e\u5225)": [[402, "weakref.WeakSet"]], "weakvaluedictionary (weakref \u4e2d\u7684\u985e\u5225)": [[402, "weakref.WeakValueDictionary"]], "__call__() (weakref.finalize \u7684\u65b9\u6cd5)": [[402, "weakref.finalize.__call__"]], "__callback__ (weakref.ref \u7684\u5c6c\u6027)": [[402, "weakref.ref.__callback__"]], "alive (weakref.finalize \u7684\u5c6c\u6027)": [[402, "weakref.finalize.alive"]], "atexit (weakref.finalize \u7684\u5c6c\u6027)": [[402, "weakref.finalize.atexit"]], "detach() (weakref.finalize \u7684\u65b9\u6cd5)": [[402, "weakref.finalize.detach"]], "finalize (weakref \u4e2d\u7684\u985e\u5225)": [[402, "weakref.finalize"]], "getweakrefcount() (\u65bc weakref \u6a21\u7d44\u4e2d)": [[402, "weakref.getweakrefcount"]], "getweakrefs() (\u65bc weakref \u6a21\u7d44\u4e2d)": [[402, "weakref.getweakrefs"]], "keyrefs() (weakref.weakkeydictionary \u7684\u65b9\u6cd5)": [[402, "weakref.WeakKeyDictionary.keyrefs"]], "peek() (weakref.finalize \u7684\u65b9\u6cd5)": [[402, "weakref.finalize.peek"]], "proxy() (\u65bc weakref \u6a21\u7d44\u4e2d)": [[402, "weakref.proxy"]], "ref (weakref \u4e2d\u7684\u985e\u5225)": [[402, "weakref.ref"]], "valuerefs() (weakref.weakvaluedictionary \u7684\u65b9\u6cd5)": [[402, "weakref.WeakValueDictionary.valuerefs"]], "weakref": [[402, "module-weakref"]], "browser": [[403, "index-0"], [403, "index-1"]], "kdedir": [[403, "index-2"]], "get() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[403, "webbrowser.get"]], "name (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[403, "webbrowser.name"]], "open() (webbrowser.controller \u7684\u65b9\u6cd5)": [[403, "webbrowser.controller.open"]], "open() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[403, "webbrowser.open"]], "open_new() (webbrowser.controller \u7684\u65b9\u6cd5)": [[403, "webbrowser.controller.open_new"]], "open_new() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[403, "webbrowser.open_new"]], "open_new_tab() (webbrowser.controller \u7684\u65b9\u6cd5)": [[403, "webbrowser.controller.open_new_tab"]], "open_new_tab() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[403, "webbrowser.open_new_tab"]], "register() (\u65bc webbrowser \u6a21\u7d44\u4e2d)": [[403, "webbrowser.register"]], "webbrowser": [[403, "module-webbrowser"]], "close() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[405, "winreg.PyHKEY.Close"]], "closekey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.CloseKey"]], "connectregistry() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.ConnectRegistry"]], "createkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.CreateKey"]], "createkeyex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.CreateKeyEx"]], "deletekey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.DeleteKey"]], "deletekeyex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.DeleteKeyEx"]], "deletevalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.DeleteValue"]], "detach() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[405, "winreg.PyHKEY.Detach"]], "disablereflectionkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.DisableReflectionKey"]], "enablereflectionkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.EnableReflectionKey"]], "enumkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.EnumKey"]], "enumvalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.EnumValue"]], "expandenvironmentstrings() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.ExpandEnvironmentStrings"]], "flushkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.FlushKey"]], "hkey_classes_root (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.HKEY_CLASSES_ROOT"]], "hkey_current_config (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.HKEY_CURRENT_CONFIG"]], "hkey_current_user (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.HKEY_CURRENT_USER"]], "hkey_dyn_data (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.HKEY_DYN_DATA"]], "hkey_local_machine (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.HKEY_LOCAL_MACHINE"]], "hkey_performance_data (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.HKEY_PERFORMANCE_DATA"]], "hkey_users (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.HKEY_USERS"]], "key_all_access (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.KEY_ALL_ACCESS"]], "key_create_link (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.KEY_CREATE_LINK"]], "key_create_sub_key (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.KEY_CREATE_SUB_KEY"]], "key_enumerate_sub_keys (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.KEY_ENUMERATE_SUB_KEYS"]], "key_execute (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.KEY_EXECUTE"]], "key_notify (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.KEY_NOTIFY"]], "key_query_value (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.KEY_QUERY_VALUE"]], "key_read (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.KEY_READ"]], "key_set_value (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.KEY_SET_VALUE"]], "key_wow64_32key (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.KEY_WOW64_32KEY"]], "key_wow64_64key (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.KEY_WOW64_64KEY"]], "key_write (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.KEY_WRITE"]], "loadkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.LoadKey"]], "openkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.OpenKey"]], "openkeyex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.OpenKeyEx"]], "queryinfokey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.QueryInfoKey"]], "queryreflectionkey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.QueryReflectionKey"]], "queryvalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.QueryValue"]], "queryvalueex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.QueryValueEx"]], "reg_binary (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.REG_BINARY"]], "reg_dword (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.REG_DWORD"]], "reg_dword_big_endian (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.REG_DWORD_BIG_ENDIAN"]], "reg_dword_little_endian (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.REG_DWORD_LITTLE_ENDIAN"]], "reg_expand_sz (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.REG_EXPAND_SZ"]], "reg_full_resource_descriptor (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.REG_FULL_RESOURCE_DESCRIPTOR"]], "reg_link (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.REG_LINK"]], "reg_multi_sz (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.REG_MULTI_SZ"]], "reg_none (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.REG_NONE"]], "reg_qword (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.REG_QWORD"]], "reg_qword_little_endian (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.REG_QWORD_LITTLE_ENDIAN"]], "reg_resource_list (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.REG_RESOURCE_LIST"]], "reg_resource_requirements_list (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.REG_RESOURCE_REQUIREMENTS_LIST"]], "reg_sz (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.REG_SZ"]], "savekey() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.SaveKey"]], "setvalue() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.SetValue"]], "setvalueex() (\u65bc winreg \u6a21\u7d44\u4e2d)": [[405, "winreg.SetValueEx"]], "__enter__() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[405, "winreg.PyHKEY.__enter__"]], "__exit__() (winreg.pyhkey \u7684\u65b9\u6cd5)": [[405, "winreg.PyHKEY.__exit__"]], "environment variables expansion (windows) \uff08\u74b0\u5883\u8b8a\u6578\u5c55\u958b (windows)\uff09": [[405, "index-0"]], "winreg": [[405, "module-winreg"]], "beep() (\u65bc winsound \u6a21\u7d44\u4e2d)": [[406, "winsound.Beep"]], "mb_iconasterisk (\u65bc winsound \u6a21\u7d44\u4e2d)": [[406, "winsound.MB_ICONASTERISK"]], "mb_iconexclamation (\u65bc winsound \u6a21\u7d44\u4e2d)": [[406, "winsound.MB_ICONEXCLAMATION"]], "mb_iconhand (\u65bc winsound \u6a21\u7d44\u4e2d)": [[406, "winsound.MB_ICONHAND"]], "mb_iconquestion (\u65bc winsound \u6a21\u7d44\u4e2d)": [[406, "winsound.MB_ICONQUESTION"]], "mb_ok (\u65bc winsound \u6a21\u7d44\u4e2d)": [[406, "winsound.MB_OK"]], "messagebeep() (\u65bc winsound \u6a21\u7d44\u4e2d)": [[406, "winsound.MessageBeep"]], "playsound() (\u65bc winsound \u6a21\u7d44\u4e2d)": [[406, "winsound.PlaySound"]], "snd_alias (\u65bc winsound \u6a21\u7d44\u4e2d)": [[406, "winsound.SND_ALIAS"]], "snd_async (\u65bc winsound \u6a21\u7d44\u4e2d)": [[406, "winsound.SND_ASYNC"]], "snd_filename (\u65bc winsound \u6a21\u7d44\u4e2d)": [[406, "winsound.SND_FILENAME"]], "snd_loop (\u65bc winsound \u6a21\u7d44\u4e2d)": [[406, "winsound.SND_LOOP"]], "snd_memory (\u65bc winsound \u6a21\u7d44\u4e2d)": [[406, "winsound.SND_MEMORY"]], "snd_nodefault (\u65bc winsound \u6a21\u7d44\u4e2d)": [[406, "winsound.SND_NODEFAULT"]], "snd_nostop (\u65bc winsound \u6a21\u7d44\u4e2d)": [[406, "winsound.SND_NOSTOP"]], "snd_nowait (\u65bc winsound \u6a21\u7d44\u4e2d)": [[406, "winsound.SND_NOWAIT"]], "snd_purge (\u65bc winsound \u6a21\u7d44\u4e2d)": [[406, "winsound.SND_PURGE"]], "winsound": [[406, "module-winsound"]], "basecgihandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[407, "wsgiref.handlers.BaseCGIHandler"]], "basehandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[407, "wsgiref.handlers.BaseHandler"]], "cgihandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[407, "wsgiref.handlers.CGIHandler"]], "errorstream (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[407, "wsgiref.types.ErrorStream"]], "filewrapper (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[407, "wsgiref.types.FileWrapper"]], "filewrapper (wsgiref.util \u4e2d\u7684\u985e\u5225)": [[407, "wsgiref.util.FileWrapper"]], "headers (wsgiref.headers \u4e2d\u7684\u985e\u5225)": [[407, "wsgiref.headers.Headers"]], "iiscgihandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[407, "wsgiref.handlers.IISCGIHandler"]], "inputstream (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[407, "wsgiref.types.InputStream"]], "pep 3333": [[407, "index-38"], [407, "index-39"], [407, "index-40"], [407, "index-41"], [407, "index-42"], [407, "index-44"], [407, "index-45"], [407, "index-46"], [407, "index-47"], [407, "index-49"], [407, "index-50"], [407, "index-51"], [407, "index-52"], [407, "index-53"], [407, "index-54"], [407, "index-55"], [407, "index-56"], [473, "index-107"], [475, "index-9"]], "simplehandler (wsgiref.handlers \u4e2d\u7684\u985e\u5225)": [[407, "wsgiref.handlers.SimpleHandler"]], "startresponse (wsgiref.types \u4e2d\u7684\u985e\u5225)": [[407, "wsgiref.types.StartResponse"]], "wsgiapplication (\u65bc wsgiref.types \u6a21\u7d44\u4e2d)": [[407, "wsgiref.types.WSGIApplication"]], "wsgienvironment (\u65bc wsgiref.types \u6a21\u7d44\u4e2d)": [[407, "wsgiref.types.WSGIEnvironment"]], "wsgirequesthandler (wsgiref.simple_server \u4e2d\u7684\u985e\u5225)": [[407, "wsgiref.simple_server.WSGIRequestHandler"]], "wsgiserver (wsgiref.simple_server \u4e2d\u7684\u985e\u5225)": [[407, "wsgiref.simple_server.WSGIServer"]], "_flush() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[407, "wsgiref.handlers.BaseHandler._flush"]], "_write() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[407, "wsgiref.handlers.BaseHandler._write"]], "add_cgi_vars() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[407, "wsgiref.handlers.BaseHandler.add_cgi_vars"]], "add_header() (wsgiref.headers.headers \u7684\u65b9\u6cd5)": [[407, "wsgiref.headers.Headers.add_header"]], "application_uri() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[407, "wsgiref.util.application_uri"]], "demo_app() (\u65bc wsgiref.simple_server \u6a21\u7d44\u4e2d)": [[407, "wsgiref.simple_server.demo_app"]], "error_body (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[407, "wsgiref.handlers.BaseHandler.error_body"]], "error_headers (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[407, "wsgiref.handlers.BaseHandler.error_headers"]], "error_output() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[407, "wsgiref.handlers.BaseHandler.error_output"]], "error_status (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[407, "wsgiref.handlers.BaseHandler.error_status"]], "get_all() (wsgiref.headers.headers \u7684\u65b9\u6cd5)": [[407, "wsgiref.headers.Headers.get_all"]], "get_app() (wsgiref.simple_server.wsgiserver \u7684\u65b9\u6cd5)": [[407, "wsgiref.simple_server.WSGIServer.get_app"]], "get_environ() (wsgiref.simple_server.wsgirequesthandler \u7684\u65b9\u6cd5)": [[407, "wsgiref.simple_server.WSGIRequestHandler.get_environ"]], "get_scheme() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[407, "wsgiref.handlers.BaseHandler.get_scheme"]], "get_stderr() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[407, "wsgiref.handlers.BaseHandler.get_stderr"]], "get_stderr() (wsgiref.simple_server.wsgirequesthandler \u7684\u65b9\u6cd5)": [[407, "wsgiref.simple_server.WSGIRequestHandler.get_stderr"]], "get_stdin() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[407, "wsgiref.handlers.BaseHandler.get_stdin"]], "guess_scheme() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[407, "wsgiref.util.guess_scheme"]], "handle() (wsgiref.simple_server.wsgirequesthandler \u7684\u65b9\u6cd5)": [[407, "wsgiref.simple_server.WSGIRequestHandler.handle"]], "http_version (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[407, "wsgiref.handlers.BaseHandler.http_version"]], "is_hop_by_hop() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[407, "wsgiref.util.is_hop_by_hop"]], "log_exception() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[407, "wsgiref.handlers.BaseHandler.log_exception"]], "make_server() (\u65bc wsgiref.simple_server \u6a21\u7d44\u4e2d)": [[407, "wsgiref.simple_server.make_server"]], "origin_server (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[407, "wsgiref.handlers.BaseHandler.origin_server"]], "os_environ (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[407, "wsgiref.handlers.BaseHandler.os_environ"]], "read_environ() (\u65bc wsgiref.handlers \u6a21\u7d44\u4e2d)": [[407, "wsgiref.handlers.read_environ"]], "request_uri() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[407, "wsgiref.util.request_uri"]], "run() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[407, "wsgiref.handlers.BaseHandler.run"]], "sendfile() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[407, "wsgiref.handlers.BaseHandler.sendfile"]], "server_software (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[407, "wsgiref.handlers.BaseHandler.server_software"]], "set_app() (wsgiref.simple_server.wsgiserver \u7684\u65b9\u6cd5)": [[407, "wsgiref.simple_server.WSGIServer.set_app"]], "setup_environ() (wsgiref.handlers.basehandler \u7684\u65b9\u6cd5)": [[407, "wsgiref.handlers.BaseHandler.setup_environ"]], "setup_testing_defaults() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[407, "wsgiref.util.setup_testing_defaults"]], "shift_path_info() (\u65bc wsgiref.util \u6a21\u7d44\u4e2d)": [[407, "wsgiref.util.shift_path_info"]], "traceback_limit (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[407, "wsgiref.handlers.BaseHandler.traceback_limit"]], "validator() (\u65bc wsgiref.validate \u6a21\u7d44\u4e2d)": [[407, "wsgiref.validate.validator"]], "wsgi_file_wrapper (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[407, "wsgiref.handlers.BaseHandler.wsgi_file_wrapper"]], "wsgi_multiprocess (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[407, "wsgiref.handlers.BaseHandler.wsgi_multiprocess"]], "wsgi_multithread (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[407, "wsgiref.handlers.BaseHandler.wsgi_multithread"]], "wsgi_run_once (wsgiref.handlers.basehandler \u7684\u5c6c\u6027)": [[407, "wsgiref.handlers.BaseHandler.wsgi_run_once"]], "wsgiref": [[407, "module-wsgiref"]], "wsgiref.handlers": [[407, "module-wsgiref.handlers"]], "wsgiref.headers": [[407, "module-wsgiref.headers"]], "wsgiref.simple_server": [[407, "module-wsgiref.simple_server"]], "wsgiref.types": [[407, "module-wsgiref.types"]], "wsgiref.util": [[407, "module-wsgiref.util"]], "wsgiref.validate": [[407, "module-wsgiref.validate"]], "conversionerror": [[408, "xdrlib.ConversionError"]], "external data representation \uff08\u5916\u90e8\u8cc7\u6599\u8868\u793a\uff09": [[408, "index-0"]], "pep 594#xdrlib": [[408, "index-7"]], "packer (xdrlib \u4e2d\u7684\u985e\u5225)": [[408, "xdrlib.Packer"]], "rfc 1014": [[408, "index-2"], [408, "index-3"]], "rfc 1832": [[408, "index-4"], [408, "index-5"]], "unpacker (xdrlib \u4e2d\u7684\u985e\u5225)": [[408, "xdrlib.Unpacker"]], "xdr": [[408, "index-0"]], "done() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[408, "xdrlib.Unpacker.done"]], "get_buffer() (xdrlib.packer \u7684\u65b9\u6cd5)": [[408, "xdrlib.Packer.get_buffer"]], "get_buffer() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[408, "xdrlib.Unpacker.get_buffer"]], "get_position() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[408, "xdrlib.Unpacker.get_position"]], "pack_array() (xdrlib.packer \u7684\u65b9\u6cd5)": [[408, "xdrlib.Packer.pack_array"]], "pack_bytes() (xdrlib.packer \u7684\u65b9\u6cd5)": [[408, "xdrlib.Packer.pack_bytes"]], "pack_double() (xdrlib.packer \u7684\u65b9\u6cd5)": [[408, "xdrlib.Packer.pack_double"]], "pack_farray() (xdrlib.packer \u7684\u65b9\u6cd5)": [[408, "xdrlib.Packer.pack_farray"]], "pack_float() (xdrlib.packer \u7684\u65b9\u6cd5)": [[408, "xdrlib.Packer.pack_float"]], "pack_fopaque() (xdrlib.packer \u7684\u65b9\u6cd5)": [[408, "xdrlib.Packer.pack_fopaque"]], "pack_fstring() (xdrlib.packer \u7684\u65b9\u6cd5)": [[408, "xdrlib.Packer.pack_fstring"]], "pack_list() (xdrlib.packer \u7684\u65b9\u6cd5)": [[408, "xdrlib.Packer.pack_list"]], "pack_opaque() (xdrlib.packer \u7684\u65b9\u6cd5)": [[408, "xdrlib.Packer.pack_opaque"]], "pack_string() (xdrlib.packer \u7684\u65b9\u6cd5)": [[408, "xdrlib.Packer.pack_string"]], "reset() (xdrlib.packer \u7684\u65b9\u6cd5)": [[408, "xdrlib.Packer.reset"]], "reset() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[408, "xdrlib.Unpacker.reset"]], "set_position() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[408, "xdrlib.Unpacker.set_position"]], "unpack_array() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[408, "xdrlib.Unpacker.unpack_array"]], "unpack_bytes() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[408, "xdrlib.Unpacker.unpack_bytes"]], "unpack_double() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[408, "xdrlib.Unpacker.unpack_double"]], "unpack_farray() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[408, "xdrlib.Unpacker.unpack_farray"]], "unpack_float() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[408, "xdrlib.Unpacker.unpack_float"]], "unpack_fopaque() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[408, "xdrlib.Unpacker.unpack_fopaque"]], "unpack_fstring() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[408, "xdrlib.Unpacker.unpack_fstring"]], "unpack_list() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[408, "xdrlib.Unpacker.unpack_list"]], "unpack_opaque() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[408, "xdrlib.Unpacker.unpack_opaque"]], "unpack_string() (xdrlib.unpacker \u7684\u65b9\u6cd5)": [[408, "xdrlib.Unpacker.unpack_string"]], "xdrlib": [[408, "module-xdrlib"]], "xml": [[409, "module-xml"]], "domexception": [[410, "xml.dom.DOMException"]], "domstringsizeerr": [[410, "xml.dom.DomstringSizeErr"]], "empty_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[410, "xml.dom.EMPTY_NAMESPACE"]], "hierarchyrequesterr": [[410, "xml.dom.HierarchyRequestErr"]], "indexsizeerr": [[410, "xml.dom.IndexSizeErr"]], "inuseattributeerr": [[410, "xml.dom.InuseAttributeErr"]], "invalidaccesserr": [[410, "xml.dom.InvalidAccessErr"]], "invalidcharactererr": [[410, "xml.dom.InvalidCharacterErr"]], "invalidmodificationerr": [[410, "xml.dom.InvalidModificationErr"]], "invalidstateerr": [[410, "xml.dom.InvalidStateErr"]], "namespaceerr": [[410, "xml.dom.NamespaceErr"]], "nodataallowederr": [[410, "xml.dom.NoDataAllowedErr"]], "nomodificationallowederr": [[410, "xml.dom.NoModificationAllowedErr"]], "notfounderr": [[410, "xml.dom.NotFoundErr"]], "notsupportederr": [[410, "xml.dom.NotSupportedErr"]], "python_dom": [[410, "index-0"]], "syntaxerr": [[410, "xml.dom.SyntaxErr"]], "wrongdocumenterr": [[410, "xml.dom.WrongDocumentErr"]], "xhtml_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[410, "xml.dom.XHTML_NAMESPACE"]], "xmlns_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[410, "xml.dom.XMLNS_NAMESPACE"]], "xml_namespace (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[410, "xml.dom.XML_NAMESPACE"]], "appendchild() (xml.dom.node \u7684\u65b9\u6cd5)": [[410, "xml.dom.Node.appendChild"]], "attributes (xml.dom.node \u7684\u5c6c\u6027)": [[410, "xml.dom.Node.attributes"]], "childnodes (xml.dom.node \u7684\u5c6c\u6027)": [[410, "xml.dom.Node.childNodes"]], "clonenode() (xml.dom.node \u7684\u65b9\u6cd5)": [[410, "xml.dom.Node.cloneNode"]], "createattribute() (xml.dom.document \u7684\u65b9\u6cd5)": [[410, "xml.dom.Document.createAttribute"]], "createattributens() (xml.dom.document \u7684\u65b9\u6cd5)": [[410, "xml.dom.Document.createAttributeNS"]], "createcomment() (xml.dom.document \u7684\u65b9\u6cd5)": [[410, "xml.dom.Document.createComment"]], "createdocument() (xml.dom.domimplementation \u7684\u65b9\u6cd5)": [[410, "xml.dom.DOMImplementation.createDocument"]], "createdocumenttype() (xml.dom.domimplementation \u7684\u65b9\u6cd5)": [[410, "xml.dom.DOMImplementation.createDocumentType"]], "createelement() (xml.dom.document \u7684\u65b9\u6cd5)": [[410, "xml.dom.Document.createElement"]], "createelementns() (xml.dom.document \u7684\u65b9\u6cd5)": [[410, "xml.dom.Document.createElementNS"]], "createprocessinginstruction() (xml.dom.document \u7684\u65b9\u6cd5)": [[410, "xml.dom.Document.createProcessingInstruction"]], "createtextnode() (xml.dom.document \u7684\u65b9\u6cd5)": [[410, "xml.dom.Document.createTextNode"]], "data (xml.dom.comment \u7684\u5c6c\u6027)": [[410, "xml.dom.Comment.data"]], "data (xml.dom.processinginstruction \u7684\u5c6c\u6027)": [[410, "xml.dom.ProcessingInstruction.data"]], "data (xml.dom.text \u7684\u5c6c\u6027)": [[410, "xml.dom.Text.data"]], "documentelement (xml.dom.document \u7684\u5c6c\u6027)": [[410, "xml.dom.Document.documentElement"]], "entities (xml.dom.documenttype \u7684\u5c6c\u6027)": [[410, "xml.dom.DocumentType.entities"]], "firstchild (xml.dom.node \u7684\u5c6c\u6027)": [[410, "xml.dom.Node.firstChild"]], "getattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[410, "xml.dom.Element.getAttribute"]], "getattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[410, "xml.dom.Element.getAttributeNS"]], "getattributenode() (xml.dom.element \u7684\u65b9\u6cd5)": [[410, "xml.dom.Element.getAttributeNode"]], "getattributenodens() (xml.dom.element \u7684\u65b9\u6cd5)": [[410, "xml.dom.Element.getAttributeNodeNS"]], "getdomimplementation() (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[410, "xml.dom.getDOMImplementation"]], "getelementsbytagname() (xml.dom.document \u7684\u65b9\u6cd5)": [[410, "xml.dom.Document.getElementsByTagName"]], "getelementsbytagname() (xml.dom.element \u7684\u65b9\u6cd5)": [[410, "xml.dom.Element.getElementsByTagName"]], "getelementsbytagnamens() (xml.dom.document \u7684\u65b9\u6cd5)": [[410, "xml.dom.Document.getElementsByTagNameNS"]], "getelementsbytagnamens() (xml.dom.element \u7684\u65b9\u6cd5)": [[410, "xml.dom.Element.getElementsByTagNameNS"]], "hasattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[410, "xml.dom.Element.hasAttribute"]], "hasattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[410, "xml.dom.Element.hasAttributeNS"]], "hasattributes() (xml.dom.node \u7684\u65b9\u6cd5)": [[410, "xml.dom.Node.hasAttributes"]], "haschildnodes() (xml.dom.node \u7684\u65b9\u6cd5)": [[410, "xml.dom.Node.hasChildNodes"]], "hasfeature() (xml.dom.domimplementation \u7684\u65b9\u6cd5)": [[410, "xml.dom.DOMImplementation.hasFeature"]], "insertbefore() (xml.dom.node \u7684\u65b9\u6cd5)": [[410, "xml.dom.Node.insertBefore"]], "internalsubset (xml.dom.documenttype \u7684\u5c6c\u6027)": [[410, "xml.dom.DocumentType.internalSubset"]], "issamenode() (xml.dom.node \u7684\u65b9\u6cd5)": [[410, "xml.dom.Node.isSameNode"]], "item() (xml.dom.namednodemap \u7684\u65b9\u6cd5)": [[410, "xml.dom.NamedNodeMap.item"]], "item() (xml.dom.nodelist \u7684\u65b9\u6cd5)": [[410, "xml.dom.NodeList.item"]], "lastchild (xml.dom.node \u7684\u5c6c\u6027)": [[410, "xml.dom.Node.lastChild"]], "length (xml.dom.namednodemap \u7684\u5c6c\u6027)": [[410, "xml.dom.NamedNodeMap.length"]], "length (xml.dom.nodelist \u7684\u5c6c\u6027)": [[410, "xml.dom.NodeList.length"]], "localname (xml.dom.attr \u7684\u5c6c\u6027)": [[410, "xml.dom.Attr.localName"]], "localname (xml.dom.node \u7684\u5c6c\u6027)": [[410, "xml.dom.Node.localName"]], "name (xml.dom.attr \u7684\u5c6c\u6027)": [[410, "xml.dom.Attr.name"]], "name (xml.dom.documenttype \u7684\u5c6c\u6027)": [[410, "xml.dom.DocumentType.name"]], "namespaceuri (xml.dom.node \u7684\u5c6c\u6027)": [[410, "xml.dom.Node.namespaceURI"]], "nextsibling (xml.dom.node \u7684\u5c6c\u6027)": [[410, "xml.dom.Node.nextSibling"]], "nodename (xml.dom.node \u7684\u5c6c\u6027)": [[410, "xml.dom.Node.nodeName"]], "nodetype (xml.dom.node \u7684\u5c6c\u6027)": [[410, "xml.dom.Node.nodeType"]], "nodevalue (xml.dom.node \u7684\u5c6c\u6027)": [[410, "xml.dom.Node.nodeValue"]], "normalize() (xml.dom.node \u7684\u65b9\u6cd5)": [[410, "xml.dom.Node.normalize"]], "notations (xml.dom.documenttype \u7684\u5c6c\u6027)": [[410, "xml.dom.DocumentType.notations"]], "parentnode (xml.dom.node \u7684\u5c6c\u6027)": [[410, "xml.dom.Node.parentNode"]], "prefix (xml.dom.attr \u7684\u5c6c\u6027)": [[410, "xml.dom.Attr.prefix"]], "prefix (xml.dom.node \u7684\u5c6c\u6027)": [[410, "xml.dom.Node.prefix"]], "previoussibling (xml.dom.node \u7684\u5c6c\u6027)": [[410, "xml.dom.Node.previousSibling"]], "publicid (xml.dom.documenttype \u7684\u5c6c\u6027)": [[410, "xml.dom.DocumentType.publicId"]], "registerdomimplementation() (\u65bc xml.dom \u6a21\u7d44\u4e2d)": [[410, "xml.dom.registerDOMImplementation"]], "removeattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[410, "xml.dom.Element.removeAttribute"]], "removeattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[410, "xml.dom.Element.removeAttributeNS"]], "removeattributenode() (xml.dom.element \u7684\u65b9\u6cd5)": [[410, "xml.dom.Element.removeAttributeNode"]], "removechild() (xml.dom.node \u7684\u65b9\u6cd5)": [[410, "xml.dom.Node.removeChild"]], "replacechild() (xml.dom.node \u7684\u65b9\u6cd5)": [[410, "xml.dom.Node.replaceChild"]], "setattribute() (xml.dom.element \u7684\u65b9\u6cd5)": [[410, "xml.dom.Element.setAttribute"]], "setattributens() (xml.dom.element \u7684\u65b9\u6cd5)": [[410, "xml.dom.Element.setAttributeNS"]], "setattributenode() (xml.dom.element \u7684\u65b9\u6cd5)": [[410, "xml.dom.Element.setAttributeNode"]], "setattributenodens() (xml.dom.element \u7684\u65b9\u6cd5)": [[410, "xml.dom.Element.setAttributeNodeNS"]], "systemid (xml.dom.documenttype \u7684\u5c6c\u6027)": [[410, "xml.dom.DocumentType.systemId"]], "tagname (xml.dom.element \u7684\u5c6c\u6027)": [[410, "xml.dom.Element.tagName"]], "target (xml.dom.processinginstruction \u7684\u5c6c\u6027)": [[410, "xml.dom.ProcessingInstruction.target"]], "value (xml.dom.attr \u7684\u5c6c\u6027)": [[410, "xml.dom.Attr.value"]], "xml.dom": [[410, "module-xml.dom"]], "parse() (\u65bc xml.dom.minidom \u6a21\u7d44\u4e2d)": [[411, "xml.dom.minidom.parse"]], "parsestring() (\u65bc xml.dom.minidom \u6a21\u7d44\u4e2d)": [[411, "xml.dom.minidom.parseString"]], "toprettyxml() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[411, "xml.dom.minidom.Node.toprettyxml"]], "toxml() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[411, "xml.dom.minidom.Node.toxml"]], "unlink() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[411, "xml.dom.minidom.Node.unlink"]], "writexml() (xml.dom.minidom.node \u7684\u65b9\u6cd5)": [[411, "xml.dom.minidom.Node.writexml"]], "xml.dom.minidom": [[411, "module-xml.dom.minidom"]], "domeventstream (xml.dom.pulldom \u4e2d\u7684\u985e\u5225)": [[412, "xml.dom.pulldom.DOMEventStream"]], "pulldom (xml.dom.pulldom \u4e2d\u7684\u985e\u5225)": [[412, "xml.dom.pulldom.PullDom"]], "sax2dom (xml.dom.pulldom \u4e2d\u7684\u985e\u5225)": [[412, "xml.dom.pulldom.SAX2DOM"]], "default_bufsize (\u65bc xml.dom.pulldom \u6a21\u7d44\u4e2d)": [[412, "xml.dom.pulldom.default_bufsize"]], "expandnode() (xml.dom.pulldom.domeventstream \u7684\u65b9\u6cd5)": [[412, "xml.dom.pulldom.DOMEventStream.expandNode"]], "getevent() (xml.dom.pulldom.domeventstream \u7684\u65b9\u6cd5)": [[412, "xml.dom.pulldom.DOMEventStream.getEvent"]], "parse() (\u65bc xml.dom.pulldom \u6a21\u7d44\u4e2d)": [[412, "xml.dom.pulldom.parse"]], "parsestring() (\u65bc xml.dom.pulldom \u6a21\u7d44\u4e2d)": [[412, "xml.dom.pulldom.parseString"]], "reset() (xml.dom.pulldom.domeventstream \u7684\u65b9\u6cd5)": [[412, "xml.dom.pulldom.DOMEventStream.reset"]], "xml.dom.pulldom": [[412, "module-xml.dom.pulldom"]], "c14nwritertarget (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[413, "xml.etree.ElementTree.C14NWriterTarget"]], "comment() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[413, "xml.etree.ElementTree.Comment"]], "element (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[413, "xml.etree.ElementTree.Element"]], "elementtree (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[413, "xml.etree.ElementTree.ElementTree"]], "parseerror (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[413, "xml.etree.ElementTree.ParseError"]], "processinginstruction() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[413, "xml.etree.ElementTree.ProcessingInstruction"]], "qname (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[413, "xml.etree.ElementTree.QName"]], "subelement() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[413, "xml.etree.ElementTree.SubElement"]], "treebuilder (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[413, "xml.etree.ElementTree.TreeBuilder"]], "xml() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[413, "xml.etree.ElementTree.XML"]], "xmlid() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[413, "xml.etree.ElementTree.XMLID"]], "xmlparser (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[413, "xml.etree.ElementTree.XMLParser"]], "xmlpullparser (xml.etree.elementtree \u4e2d\u7684\u985e\u5225)": [[413, "xml.etree.ElementTree.XMLPullParser"]], "_setroot() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.ElementTree._setroot"]], "append() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.Element.append"]], "attrib (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[413, "xml.etree.ElementTree.Element.attrib"]], "canonicalize() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[413, "xml.etree.ElementTree.canonicalize"]], "clear() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.Element.clear"]], "close() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.TreeBuilder.close"]], "close() (xml.etree.elementtree.xmlparser \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.XMLParser.close"]], "close() (xml.etree.elementtree.xmlpullparser \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.XMLPullParser.close"]], "code (xml.etree.elementtree.parseerror \u7684\u5c6c\u6027)": [[413, "xml.etree.ElementTree.ParseError.code"]], "comment() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.TreeBuilder.comment"]], "data() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.TreeBuilder.data"]], "default_loader() (\u65bc xml.etree.elementinclude \u6a21\u7d44\u4e2d)": [[413, "xml.etree.ElementInclude.default_loader"]], "doctype() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.TreeBuilder.doctype"]], "dump() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[413, "xml.etree.ElementTree.dump"]], "end() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.TreeBuilder.end"]], "end_ns() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.TreeBuilder.end_ns"]], "extend() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.Element.extend"]], "feed() (xml.etree.elementtree.xmlparser \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.XMLParser.feed"]], "feed() (xml.etree.elementtree.xmlpullparser \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.XMLPullParser.feed"]], "find() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.Element.find"]], "find() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.ElementTree.find"]], "findall() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.Element.findall"]], "findall() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.ElementTree.findall"]], "findtext() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.Element.findtext"]], "findtext() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.ElementTree.findtext"]], "flush() (xml.etree.elementtree.xmlparser \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.XMLParser.flush"]], "flush() (xml.etree.elementtree.xmlpullparser \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.XMLPullParser.flush"]], "fromstring() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[413, "xml.etree.ElementTree.fromstring"]], "fromstringlist() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[413, "xml.etree.ElementTree.fromstringlist"]], "get() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.Element.get"]], "getroot() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.ElementTree.getroot"]], "include() (\u65bc xml.etree.elementinclude \u6a21\u7d44\u4e2d)": [[413, "xml.etree.ElementInclude.include"]], "indent() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[413, "xml.etree.ElementTree.indent"]], "insert() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.Element.insert"]], "iselement() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[413, "xml.etree.ElementTree.iselement"]], "items() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.Element.items"]], "iter() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.Element.iter"]], "iter() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.ElementTree.iter"]], "iterfind() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.Element.iterfind"]], "iterfind() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.ElementTree.iterfind"]], "iterparse() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[413, "xml.etree.ElementTree.iterparse"]], "itertext() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.Element.itertext"]], "keys() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.Element.keys"]], "makeelement() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.Element.makeelement"]], "parse() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.ElementTree.parse"]], "parse() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[413, "xml.etree.ElementTree.parse"]], "pi() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.TreeBuilder.pi"]], "position (xml.etree.elementtree.parseerror \u7684\u5c6c\u6027)": [[413, "xml.etree.ElementTree.ParseError.position"]], "read_events() (xml.etree.elementtree.xmlpullparser \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.XMLPullParser.read_events"]], "register_namespace() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[413, "xml.etree.ElementTree.register_namespace"]], "remove() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.Element.remove"]], "set() (xml.etree.elementtree.element \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.Element.set"]], "start() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.TreeBuilder.start"]], "start_ns() (xml.etree.elementtree.treebuilder \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.TreeBuilder.start_ns"]], "tag (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[413, "xml.etree.ElementTree.Element.tag"]], "tail (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[413, "xml.etree.ElementTree.Element.tail"]], "text (xml.etree.elementtree.element \u7684\u5c6c\u6027)": [[413, "xml.etree.ElementTree.Element.text"]], "tostring() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[413, "xml.etree.ElementTree.tostring"]], "tostringlist() (\u65bc xml.etree.elementtree \u6a21\u7d44\u4e2d)": [[413, "xml.etree.ElementTree.tostringlist"]], "write() (xml.etree.elementtree.elementtree \u7684\u65b9\u6cd5)": [[413, "xml.etree.ElementTree.ElementTree.write"]], "xml.etree.elementinclude": [[413, "module-xml.etree.ElementInclude"]], "xml.etree.elementtree": [[413, "module-xml.etree.ElementTree"]], "saxexception": [[414, "xml.sax.SAXException"]], "saxnotrecognizedexception": [[414, "xml.sax.SAXNotRecognizedException"]], "saxnotsupportedexception": [[414, "xml.sax.SAXNotSupportedException"]], "saxparseexception": [[414, "xml.sax.SAXParseException"]], "getexception() (xml.sax.saxexception \u7684\u65b9\u6cd5)": [[414, "xml.sax.SAXException.getException"]], "getmessage() (xml.sax.saxexception \u7684\u65b9\u6cd5)": [[414, "xml.sax.SAXException.getMessage"]], "make_parser() (\u65bc xml.sax \u6a21\u7d44\u4e2d)": [[414, "xml.sax.make_parser"]], "parse() (\u65bc xml.sax \u6a21\u7d44\u4e2d)": [[414, "xml.sax.parse"]], "parsestring() (\u65bc xml.sax \u6a21\u7d44\u4e2d)": [[414, "xml.sax.parseString"]], "xml.sax": [[414, "module-xml.sax"]], "contenthandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[415, "xml.sax.handler.ContentHandler"]], "dtdhandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[415, "xml.sax.handler.DTDHandler"]], "entityresolver (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[415, "xml.sax.handler.EntityResolver"]], "errorhandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[415, "xml.sax.handler.ErrorHandler"]], "lexicalhandler (xml.sax.handler \u4e2d\u7684\u985e\u5225)": [[415, "xml.sax.handler.LexicalHandler"]], "all_features (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[415, "xml.sax.handler.all_features"]], "all_properties (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[415, "xml.sax.handler.all_properties"]], "characters() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.ContentHandler.characters"]], "comment() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.LexicalHandler.comment"]], "endcdata() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.LexicalHandler.endCDATA"]], "enddtd() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.LexicalHandler.endDTD"]], "enddocument() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.ContentHandler.endDocument"]], "endelement() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.ContentHandler.endElement"]], "endelementns() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.ContentHandler.endElementNS"]], "endprefixmapping() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.ContentHandler.endPrefixMapping"]], "error() (xml.sax.handler.errorhandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.ErrorHandler.error"]], "fatalerror() (xml.sax.handler.errorhandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.ErrorHandler.fatalError"]], "feature_external_ges (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[415, "xml.sax.handler.feature_external_ges"]], "feature_external_pes (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[415, "xml.sax.handler.feature_external_pes"]], "feature_namespace_prefixes (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[415, "xml.sax.handler.feature_namespace_prefixes"]], "feature_namespaces (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[415, "xml.sax.handler.feature_namespaces"]], "feature_string_interning (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[415, "xml.sax.handler.feature_string_interning"]], "feature_validation (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[415, "xml.sax.handler.feature_validation"]], "ignorablewhitespace() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.ContentHandler.ignorableWhitespace"]], "notationdecl() (xml.sax.handler.dtdhandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.DTDHandler.notationDecl"]], "processinginstruction() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.ContentHandler.processingInstruction"]], "property_declaration_handler (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[415, "xml.sax.handler.property_declaration_handler"]], "property_dom_node (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[415, "xml.sax.handler.property_dom_node"]], "property_lexical_handler (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[415, "xml.sax.handler.property_lexical_handler"]], "property_xml_string (\u65bc xml.sax.handler \u6a21\u7d44\u4e2d)": [[415, "xml.sax.handler.property_xml_string"]], "resolveentity() (xml.sax.handler.entityresolver \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.EntityResolver.resolveEntity"]], "setdocumentlocator() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.ContentHandler.setDocumentLocator"]], "skippedentity() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.ContentHandler.skippedEntity"]], "startcdata() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.LexicalHandler.startCDATA"]], "startdtd() (xml.sax.handler.lexicalhandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.LexicalHandler.startDTD"]], "startdocument() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.ContentHandler.startDocument"]], "startelement() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.ContentHandler.startElement"]], "startelementns() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.ContentHandler.startElementNS"]], "startprefixmapping() (xml.sax.handler.contenthandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.ContentHandler.startPrefixMapping"]], "unparsedentitydecl() (xml.sax.handler.dtdhandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.DTDHandler.unparsedEntityDecl"]], "warning() (xml.sax.handler.errorhandler \u7684\u65b9\u6cd5)": [[415, "xml.sax.handler.ErrorHandler.warning"]], "xml.sax.handler": [[415, "module-xml.sax.handler"]], "attributesimpl (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[416, "xml.sax.xmlreader.AttributesImpl"]], "attributesnsimpl (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[416, "xml.sax.xmlreader.AttributesNSImpl"]], "incrementalparser (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[416, "xml.sax.xmlreader.IncrementalParser"]], "inputsource (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[416, "xml.sax.xmlreader.InputSource"]], "locator (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[416, "xml.sax.xmlreader.Locator"]], "xmlreader (xml.sax.xmlreader \u4e2d\u7684\u985e\u5225)": [[416, "xml.sax.xmlreader.XMLReader"]], "close() (xml.sax.xmlreader.incrementalparser \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.IncrementalParser.close"]], "feed() (xml.sax.xmlreader.incrementalparser \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.IncrementalParser.feed"]], "getbytestream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.InputSource.getByteStream"]], "getcharacterstream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.InputSource.getCharacterStream"]], "getcolumnnumber() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.Locator.getColumnNumber"]], "getcontenthandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.XMLReader.getContentHandler"]], "getdtdhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.XMLReader.getDTDHandler"]], "getencoding() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.InputSource.getEncoding"]], "getentityresolver() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.XMLReader.getEntityResolver"]], "geterrorhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.XMLReader.getErrorHandler"]], "getfeature() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.XMLReader.getFeature"]], "getlength() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.Attributes.getLength"]], "getlinenumber() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.Locator.getLineNumber"]], "getnamebyqname() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.AttributesNS.getNameByQName"]], "getnames() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.Attributes.getNames"]], "getproperty() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.XMLReader.getProperty"]], "getpublicid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.InputSource.getPublicId"]], "getpublicid() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.Locator.getPublicId"]], "getqnamebyname() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.AttributesNS.getQNameByName"]], "getqnames() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.AttributesNS.getQNames"]], "getsystemid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.InputSource.getSystemId"]], "getsystemid() (xml.sax.xmlreader.locator \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.Locator.getSystemId"]], "gettype() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.Attributes.getType"]], "getvalue() (xml.sax.xmlreader.attributes \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.Attributes.getValue"]], "getvaluebyqname() (xml.sax.xmlreader.attributesns \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.AttributesNS.getValueByQName"]], "parse() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.XMLReader.parse"]], "reset() (xml.sax.xmlreader.incrementalparser \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.IncrementalParser.reset"]], "setbytestream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.InputSource.setByteStream"]], "setcharacterstream() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.InputSource.setCharacterStream"]], "setcontenthandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.XMLReader.setContentHandler"]], "setdtdhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.XMLReader.setDTDHandler"]], "setencoding() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.InputSource.setEncoding"]], "setentityresolver() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.XMLReader.setEntityResolver"]], "seterrorhandler() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.XMLReader.setErrorHandler"]], "setfeature() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.XMLReader.setFeature"]], "setlocale() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.XMLReader.setLocale"]], "setproperty() (xml.sax.xmlreader.xmlreader \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.XMLReader.setProperty"]], "setpublicid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.InputSource.setPublicId"]], "setsystemid() (xml.sax.xmlreader.inputsource \u7684\u65b9\u6cd5)": [[416, "xml.sax.xmlreader.InputSource.setSystemId"]], "xml.sax.xmlreader": [[416, "module-xml.sax.xmlreader"]], "xmlfilterbase (xml.sax.saxutils \u4e2d\u7684\u985e\u5225)": [[417, "xml.sax.saxutils.XMLFilterBase"]], "xmlgenerator (xml.sax.saxutils \u4e2d\u7684\u985e\u5225)": [[417, "xml.sax.saxutils.XMLGenerator"]], "escape() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[417, "xml.sax.saxutils.escape"]], "prepare_input_source() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[417, "xml.sax.saxutils.prepare_input_source"]], "quoteattr() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[417, "xml.sax.saxutils.quoteattr"]], "unescape() (\u65bc xml.sax.saxutils \u6a21\u7d44\u4e2d)": [[417, "xml.sax.saxutils.unescape"]], "xml.sax.saxutils": [[417, "module-xml.sax.saxutils"]], "binary (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[419, "xmlrpc.client.Binary"]], "datetime (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[419, "xmlrpc.client.DateTime"]], "fault (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[419, "xmlrpc.client.Fault"]], "multicall (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[419, "xmlrpc.client.MultiCall"]], "protocolerror (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[419, "xmlrpc.client.ProtocolError"]], "rfc 2045#section-6.8": [[419, "index-0"]], "serverproxy (xmlrpc.client \u4e2d\u7684\u985e\u5225)": [[419, "xmlrpc.client.ServerProxy"]], "data (xmlrpc.client.binary \u7684\u5c6c\u6027)": [[419, "xmlrpc.client.Binary.data"]], "decode() (xmlrpc.client.binary \u7684\u65b9\u6cd5)": [[419, "xmlrpc.client.Binary.decode"]], "decode() (xmlrpc.client.datetime \u7684\u65b9\u6cd5)": [[419, "xmlrpc.client.DateTime.decode"]], "dumps() (\u65bc xmlrpc.client \u6a21\u7d44\u4e2d)": [[419, "xmlrpc.client.dumps"]], "encode() (xmlrpc.client.binary \u7684\u65b9\u6cd5)": [[419, "xmlrpc.client.Binary.encode"]], "encode() (xmlrpc.client.datetime \u7684\u65b9\u6cd5)": [[419, "xmlrpc.client.DateTime.encode"]], "errcode (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[419, "xmlrpc.client.ProtocolError.errcode"]], "errmsg (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[419, "xmlrpc.client.ProtocolError.errmsg"]], "faultcode (xmlrpc.client.fault \u7684\u5c6c\u6027)": [[419, "xmlrpc.client.Fault.faultCode"]], "faultstring (xmlrpc.client.fault \u7684\u5c6c\u6027)": [[419, "xmlrpc.client.Fault.faultString"]], "headers (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[419, "xmlrpc.client.ProtocolError.headers"]], "listmethods() (xmlrpc.client.serverproxy.system \u7684\u65b9\u6cd5)": [[419, "xmlrpc.client.ServerProxy.system.listMethods"]], "loads() (\u65bc xmlrpc.client \u6a21\u7d44\u4e2d)": [[419, "xmlrpc.client.loads"]], "methodhelp() (xmlrpc.client.serverproxy.system \u7684\u65b9\u6cd5)": [[419, "xmlrpc.client.ServerProxy.system.methodHelp"]], "methodsignature() (xmlrpc.client.serverproxy.system \u7684\u65b9\u6cd5)": [[419, "xmlrpc.client.ServerProxy.system.methodSignature"]], "url (xmlrpc.client.protocolerror \u7684\u5c6c\u6027)": [[419, "xmlrpc.client.ProtocolError.url"]], "xmlrpc.client": [[419, "module-xmlrpc.client"]], "cgixmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[420, "xmlrpc.server.CGIXMLRPCRequestHandler"]], "doccgixmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[420, "xmlrpc.server.DocCGIXMLRPCRequestHandler"]], "docxmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[420, "xmlrpc.server.DocXMLRPCRequestHandler"]], "docxmlrpcserver (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[420, "xmlrpc.server.DocXMLRPCServer"]], "simplexmlrpcrequesthandler (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[420, "xmlrpc.server.SimpleXMLRPCRequestHandler"]], "simplexmlrpcserver (xmlrpc.server \u4e2d\u7684\u985e\u5225)": [[420, "xmlrpc.server.SimpleXMLRPCServer"]], "handle_request() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[420, "xmlrpc.server.CGIXMLRPCRequestHandler.handle_request"]], "register_function() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[420, "xmlrpc.server.CGIXMLRPCRequestHandler.register_function"]], "register_function() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[420, "xmlrpc.server.SimpleXMLRPCServer.register_function"]], "register_instance() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[420, "xmlrpc.server.CGIXMLRPCRequestHandler.register_instance"]], "register_instance() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[420, "xmlrpc.server.SimpleXMLRPCServer.register_instance"]], "register_introspection_functions() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[420, "xmlrpc.server.CGIXMLRPCRequestHandler.register_introspection_functions"]], "register_introspection_functions() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[420, "xmlrpc.server.SimpleXMLRPCServer.register_introspection_functions"]], "register_multicall_functions() (xmlrpc.server.cgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[420, "xmlrpc.server.CGIXMLRPCRequestHandler.register_multicall_functions"]], "register_multicall_functions() (xmlrpc.server.simplexmlrpcserver \u7684\u65b9\u6cd5)": [[420, "xmlrpc.server.SimpleXMLRPCServer.register_multicall_functions"]], "rpc_paths (xmlrpc.server.simplexmlrpcrequesthandler \u7684\u5c6c\u6027)": [[420, "xmlrpc.server.SimpleXMLRPCRequestHandler.rpc_paths"]], "set_server_documentation() (xmlrpc.server.doccgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[420, "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_documentation"]], "set_server_documentation() (xmlrpc.server.docxmlrpcserver \u7684\u65b9\u6cd5)": [[420, "xmlrpc.server.DocXMLRPCServer.set_server_documentation"]], "set_server_name() (xmlrpc.server.doccgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[420, "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_name"]], "set_server_name() (xmlrpc.server.docxmlrpcserver \u7684\u65b9\u6cd5)": [[420, "xmlrpc.server.DocXMLRPCServer.set_server_name"]], "set_server_title() (xmlrpc.server.doccgixmlrpcrequesthandler \u7684\u65b9\u6cd5)": [[420, "xmlrpc.server.DocCGIXMLRPCRequestHandler.set_server_title"]], "set_server_title() (xmlrpc.server.docxmlrpcserver \u7684\u65b9\u6cd5)": [[420, "xmlrpc.server.DocXMLRPCServer.set_server_title"]], "xmlrpc.server": [[420, "module-xmlrpc.server"]], "--compress": [[421, "cmdoption-zipapp-c"]], "--info": [[421, "cmdoption-zipapp-info"]], "--main": [[421, "cmdoption-zipapp-m"]], "--python": [[421, "cmdoption-zipapp-p"]], "executable zip files\uff08\u53ef\u57f7\u884c\u7684 zip \u6a94\u6848\uff09": [[421, "index-0"]], "create_archive() (\u65bc zipapp \u6a21\u7d44\u4e2d)": [[421, "zipapp.create_archive"]], "get_interpreter() (\u65bc zipapp \u6a21\u7d44\u4e2d)": [[421, "zipapp.get_interpreter"]], "zipapp": [[421, "module-zipapp"]], "zipapp \u547d\u4ee4\u5217\u9078\u9805": [[421, "cmdoption-zipapp-c"], [421, "cmdoption-zipapp-h"], [421, "cmdoption-zipapp-info"], [421, "cmdoption-zipapp-m"], [421, "cmdoption-zipapp-o"], [421, "cmdoption-zipapp-p"]], "--metadata-encoding": [[422, "cmdoption-zipfile-metadata-encoding"]], "badzipfile": [[422, "zipfile.BadZipFile"], [422, "zipfile.BadZipfile"]], "crc (zipfile.zipinfo \u7684\u5c6c\u6027)": [[422, "zipfile.ZipInfo.CRC"]], "largezipfile": [[422, "zipfile.LargeZipFile"]], "path (zipfile \u4e2d\u7684\u985e\u5225)": [[422, "zipfile.Path"]], "path.stem (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[422, "zipfile.Path.stem"]], "path.suffix (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[422, "zipfile.Path.suffix"]], "path.suffixes (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[422, "zipfile.Path.suffixes"]], "pyzipfile (zipfile \u4e2d\u7684\u985e\u5225)": [[422, "zipfile.PyZipFile"]], "zip_bzip2 (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[422, "zipfile.ZIP_BZIP2"]], "zip_deflated (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[422, "zipfile.ZIP_DEFLATED"]], "zip_lzma (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[422, "zipfile.ZIP_LZMA"]], "zip_stored (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[422, "zipfile.ZIP_STORED"]], "zipfile (zipfile \u4e2d\u7684\u985e\u5225)": [[422, "zipfile.ZipFile"]], "zipinfo (zipfile \u4e2d\u7684\u985e\u5225)": [[422, "zipfile.ZipInfo"]], "close() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[422, "zipfile.ZipFile.close"]], "comment (zipfile.zipfile \u7684\u5c6c\u6027)": [[422, "zipfile.ZipFile.comment"]], "comment (zipfile.zipinfo \u7684\u5c6c\u6027)": [[422, "zipfile.ZipInfo.comment"]], "compress_size (zipfile.zipinfo \u7684\u5c6c\u6027)": [[422, "zipfile.ZipInfo.compress_size"]], "compress_type (zipfile.zipinfo \u7684\u5c6c\u6027)": [[422, "zipfile.ZipInfo.compress_type"]], "create_system (zipfile.zipinfo \u7684\u5c6c\u6027)": [[422, "zipfile.ZipInfo.create_system"]], "create_version (zipfile.zipinfo \u7684\u5c6c\u6027)": [[422, "zipfile.ZipInfo.create_version"]], "date_time (zipfile.zipinfo \u7684\u5c6c\u6027)": [[422, "zipfile.ZipInfo.date_time"]], "debug (zipfile.zipfile \u7684\u5c6c\u6027)": [[422, "zipfile.ZipFile.debug"]], "exists() (zipfile.path \u7684\u65b9\u6cd5)": [[422, "zipfile.Path.exists"]], "external_attr (zipfile.zipinfo \u7684\u5c6c\u6027)": [[422, "zipfile.ZipInfo.external_attr"]], "extra (zipfile.zipinfo \u7684\u5c6c\u6027)": [[422, "zipfile.ZipInfo.extra"]], "extract() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[422, "zipfile.ZipFile.extract"]], "extract_version (zipfile.zipinfo \u7684\u5c6c\u6027)": [[422, "zipfile.ZipInfo.extract_version"]], "extractall() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[422, "zipfile.ZipFile.extractall"]], "file_size (zipfile.zipinfo \u7684\u5c6c\u6027)": [[422, "zipfile.ZipInfo.file_size"]], "filename (zipfile.zipfile \u7684\u5c6c\u6027)": [[422, "zipfile.ZipFile.filename"]], "filename (zipfile.zipinfo \u7684\u5c6c\u6027)": [[422, "zipfile.ZipInfo.filename"]], "flag_bits (zipfile.zipinfo \u7684\u5c6c\u6027)": [[422, "zipfile.ZipInfo.flag_bits"]], "from_file() (zipfile.zipinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[422, "zipfile.ZipInfo.from_file"]], "getinfo() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[422, "zipfile.ZipFile.getinfo"]], "header_offset (zipfile.zipinfo \u7684\u5c6c\u6027)": [[422, "zipfile.ZipInfo.header_offset"]], "infolist() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[422, "zipfile.ZipFile.infolist"]], "internal_attr (zipfile.zipinfo \u7684\u5c6c\u6027)": [[422, "zipfile.ZipInfo.internal_attr"]], "is_dir() (zipfile.path \u7684\u65b9\u6cd5)": [[422, "zipfile.Path.is_dir"]], "is_dir() (zipfile.zipinfo \u7684\u65b9\u6cd5)": [[422, "zipfile.ZipInfo.is_dir"]], "is_file() (zipfile.path \u7684\u65b9\u6cd5)": [[422, "zipfile.Path.is_file"]], "is_zipfile() (\u65bc zipfile \u6a21\u7d44\u4e2d)": [[422, "zipfile.is_zipfile"]], "iterdir() (zipfile.path \u7684\u65b9\u6cd5)": [[422, "zipfile.Path.iterdir"]], "joinpath() (zipfile.path \u7684\u65b9\u6cd5)": [[422, "zipfile.Path.joinpath"]], "mkdir() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[422, "zipfile.ZipFile.mkdir"]], "name (zipfile.path \u7684\u5c6c\u6027)": [[422, "zipfile.Path.name"]], "namelist() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[422, "zipfile.ZipFile.namelist"]], "open() (zipfile.path \u7684\u65b9\u6cd5)": [[422, "zipfile.Path.open"]], "open() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[422, "zipfile.ZipFile.open"]], "printdir() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[422, "zipfile.ZipFile.printdir"]], "read() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[422, "zipfile.ZipFile.read"]], "read_bytes() (zipfile.path \u7684\u65b9\u6cd5)": [[422, "zipfile.Path.read_bytes"]], "read_text() (zipfile.path \u7684\u65b9\u6cd5)": [[422, "zipfile.Path.read_text"]], "reserved (zipfile.zipinfo \u7684\u5c6c\u6027)": [[422, "zipfile.ZipInfo.reserved"]], "setpassword() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[422, "zipfile.ZipFile.setpassword"]], "testzip() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[422, "zipfile.ZipFile.testzip"]], "volume (zipfile.zipinfo \u7684\u5c6c\u6027)": [[422, "zipfile.ZipInfo.volume"]], "write() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[422, "zipfile.ZipFile.write"]], "writepy() (zipfile.pyzipfile \u7684\u65b9\u6cd5)": [[422, "zipfile.PyZipFile.writepy"]], "writestr() (zipfile.zipfile \u7684\u65b9\u6cd5)": [[422, "zipfile.ZipFile.writestr"]], "zipfile": [[422, "module-zipfile"]], "zipfile \u547d\u4ee4\u5217\u9078\u9805": [[422, "cmdoption-zipfile-c"], [422, "cmdoption-zipfile-create"], [422, "cmdoption-zipfile-e"], [422, "cmdoption-zipfile-extract"], [422, "cmdoption-zipfile-l"], [422, "cmdoption-zipfile-list"], [422, "cmdoption-zipfile-metadata-encoding"], [422, "cmdoption-zipfile-t"], [422, "cmdoption-zipfile-test"]], "pep 273": [[423, "index-0"], [423, "index-1"], [465, "index-4"], [465, "index-5"]], "zipimporterror": [[423, "zipimport.ZipImportError"]], "archive (zipimport.zipimporter \u7684\u5c6c\u6027)": [[423, "zipimport.zipimporter.archive"]], "create_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[423, "zipimport.zipimporter.create_module"]], "exec_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[423, "zipimport.zipimporter.exec_module"]], "find_spec() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[423, "zipimport.zipimporter.find_spec"]], "get_code() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[423, "zipimport.zipimporter.get_code"]], "get_data() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[423, "zipimport.zipimporter.get_data"]], "get_filename() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[423, "zipimport.zipimporter.get_filename"]], "get_source() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[423, "zipimport.zipimporter.get_source"]], "invalidate_caches() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[423, "zipimport.zipimporter.invalidate_caches"]], "is_package() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[423, "zipimport.zipimporter.is_package"]], "load_module() (zipimport.zipimporter \u7684\u65b9\u6cd5)": [[423, "zipimport.zipimporter.load_module"]], "prefix (zipimport.zipimporter \u7684\u5c6c\u6027)": [[423, "zipimport.zipimporter.prefix"]], "zipimport": [[423, "module-zipimport"]], "zipimporter (zipimport \u4e2d\u7684\u985e\u5225)": [[423, "zipimport.zipimporter"]], "cyclic redundancy check\uff08\u5faa\u74b0\u5197\u9918\u6838\u5c0d\uff09": [[424, "index-0"]], "zlib_runtime_version (\u65bc zlib \u6a21\u7d44\u4e2d)": [[424, "zlib.ZLIB_RUNTIME_VERSION"]], "zlib_version (\u65bc zlib \u6a21\u7d44\u4e2d)": [[424, "zlib.ZLIB_VERSION"]], "adler32() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[424, "zlib.adler32"]], "checksum\uff08\u6838\u5c0d\u548c\uff09": [[424, "index-0"]], "compress() (zlib.compress \u7684\u65b9\u6cd5)": [[424, "zlib.Compress.compress"]], "compress() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[424, "zlib.compress"]], "compressobj() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[424, "zlib.compressobj"]], "copy() (zlib.compress \u7684\u65b9\u6cd5)": [[424, "zlib.Compress.copy"]], "copy() (zlib.decompress \u7684\u65b9\u6cd5)": [[424, "zlib.Decompress.copy"]], "crc32() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[424, "zlib.crc32"]], "decompress() (zlib.decompress \u7684\u65b9\u6cd5)": [[424, "zlib.Decompress.decompress"]], "decompress() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[424, "zlib.decompress"]], "decompressobj() (\u65bc zlib \u6a21\u7d44\u4e2d)": [[424, "zlib.decompressobj"]], "eof (zlib.decompress \u7684\u5c6c\u6027)": [[424, "zlib.Decompress.eof"]], "flush() (zlib.compress \u7684\u65b9\u6cd5)": [[424, "zlib.Compress.flush"]], "flush() (zlib.decompress \u7684\u65b9\u6cd5)": [[424, "zlib.Decompress.flush"]], "unconsumed_tail (zlib.decompress \u7684\u5c6c\u6027)": [[424, "zlib.Decompress.unconsumed_tail"]], "unused_data (zlib.decompress \u7684\u5c6c\u6027)": [[424, "zlib.Decompress.unused_data"]], "zlib": [[424, "module-zlib"]], "invalidtzpathwarning": [[425, "zoneinfo.InvalidTZPathWarning"]], "pep 495": [[425, "index-1"], [479, "index-17"], [479, "index-18"], [483, "index-273"]], "pep 615": [[425, "index-0"], [482, "index-16"], [482, "index-9"], [483, "index-162"]], "pythontzpath": [[425, "envvar-PYTHONTZPATH"], [425, "index-2"]], "tzpath (\u65bc zoneinfo \u6a21\u7d44\u4e2d)": [[425, "zoneinfo.TZPATH"]], "zoneinfo (zoneinfo \u4e2d\u7684\u985e\u5225)": [[425, "zoneinfo.ZoneInfo"]], "zoneinfonotfounderror": [[425, "zoneinfo.ZoneInfoNotFoundError"]], "available_timezones() (\u65bc zoneinfo \u6a21\u7d44\u4e2d)": [[425, "zoneinfo.available_timezones"]], "clear_cache() (zoneinfo.zoneinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[425, "zoneinfo.ZoneInfo.clear_cache"]], "from_file() (zoneinfo.zoneinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[425, "zoneinfo.ZoneInfo.from_file"]], "key (zoneinfo.zoneinfo \u7684\u5c6c\u6027)": [[425, "zoneinfo.ZoneInfo.key"]], "no_cache() (zoneinfo.zoneinfo \u7684\u985e\u5225\u65b9\u6cd5)": [[425, "zoneinfo.ZoneInfo.no_cache"]], "reset_tzpath() (\u65bc zoneinfo \u6a21\u7d44\u4e2d)": [[425, "zoneinfo.reset_tzpath"]], "zoneinfo": [[425, "module-zoneinfo"]], "! patterns": [[427, "index-23"]], "->": [[427, "index-34"], [441, "index-6"]], "as pattern, or pattern, capture pattern, wildcard pattern": [[427, "index-23"]], "dedent token\uff08\u7e2e\u6392\u6a19\u8a8c\uff09": [[427, "index-2"], [435, "index-9"]], "newline token\uff08\u63db\u884c\u6a19\u8a8c\uff09": [[427, "index-2"], [435, "index-3"]], "pep 3107": [[427, "index-36"], [441, "index-16"], [470, "index-6"], [478, "index-9"], [480, "index-0"]], "pep 3129": [[427, "index-41"], [427, "index-46"], [468, "index-18"]], "pep 318": [[427, "index-40"], [427, "index-47"], [466, "index-12"], [466, "index-4"], [466, "index-5"]], "pep 570": [[427, "index-33"], [481, "index-23"], [481, "index-34"], [483, "index-213"]], "pep 614": [[427, "index-30"], [427, "index-44"], [482, "index-15"], [482, "index-3"], [483, "index-185"]], "pep 636": [[427, "index-20"], [427, "index-26"], [441, "index-15"], [472, "index-82"], [472, "index-97"]], "annotations\uff08\u8a3b\u91cb\uff09": [[427, "index-34"], [441, "index-6"]], "as": [[427, "index-10"], [427, "index-16"], [427, "index-18"], [427, "index-9"], [436, "index-34"], [436, "index-35"]], "async": [[427, "index-49"]], "async def": [[427, "index-48"]], "async for": [[427, "index-50"], [430, "index-12"]], "async with": [[427, "index-51"]], "await": [[427, "index-49"], [430, "index-13"], [430, "index-57"]], "binding\uff08\u7d81\u5b9a\uff09": [[427, "index-28"], [427, "index-42"]], "break": [[427, "index-13"], [427, "index-15"], [427, "index-5"], [427, "index-7"], [436, "index-30"]], "case": [[427, "index-18"], [427, "index-18"]], "case block": [[427, "index-22"]], "class definition\uff08\u985e\u5225\u5b9a\u7fa9\uff09": [[427, "index-42"], [427, "index-43"], [428, "index-86"]], "clause\uff08\u5b50\u53e5\uff09": [[427, "index-1"]], "compound statement\uff08\u8907\u5408\u9673\u8ff0\u5f0f\uff09": [[427, "index-16"], [427, "index-18"], [427, "index-28"], [427, "index-3"], [427, "index-4"], [427, "index-42"], [427, "index-6"], [427, "index-9"]], "compound\uff08\u8907\u5408\uff09": [[427, "index-0"]], "continue": [[427, "index-13"], [427, "index-15"], [427, "index-5"], [427, "index-7"], [436, "index-33"]], "dangling": [[427, "index-2"]], "def": [[427, "index-28"]], "default\uff08\u9810\u8a2d\uff09": [[427, "index-31"]], "definition\uff08\u5b9a\u7fa9\uff09": [[427, "index-28"], [427, "index-42"], [436, "index-24"]], "elif": [[427, "index-3"]], "else": [[427, "index-13"], [427, "index-2"], [427, "index-3"], [427, "index-4"], [427, "index-6"], [427, "index-9"], [430, "index-88"], [436, "index-31"]], "except clause\uff08\u4f8b\u5916\u5b50\u53e5\uff09": [[427, "index-10"]], "except_star": [[427, "index-12"]], "execution\uff08\u57f7\u884c\uff09": [[427, "index-42"], [428, "index-66"], [429, "index-13"], [429, "index-2"]], "expression list\uff08\u8868\u9054\u5f0f\u5217\u8868\uff09": [[427, "index-42"]], "finally": [[427, "index-14"], [427, "index-9"], [436, "index-25"], [436, "index-32"], [436, "index-33"]], "for": [[427, "index-6"], [430, "index-12"], [436, "index-30"], [436, "index-33"], [441, "index-0"]], "frame": [[427, "index-42"], [428, "index-63"], [429, "index-2"]], "function annotations\uff08\u51fd\u5f0f\u8a3b\u91cb\uff09": [[427, "index-34"], [441, "index-6"]], "function definition\uff08\u51fd\u5f0f\u5b9a\u7fa9\uff09": [[427, "index-27"], [427, "index-28"], [427, "index-29"], [427, "index-31"], [427, "index-32"]], "function \uff08\u51fd\u5f0f\uff09": [[427, "index-28"], [427, "index-34"], [428, "index-33"], [428, "index-34"], [428, "index-39"], [428, "index-40"], [428, "index-41"], [428, "index-42"], [430, "index-23"], [430, "index-52"], [430, "index-53"], [430, "index-90"], [436, "index-24"], [436, "index-26"]], "guard": [[427, "index-21"]], "inheritance\uff08\u7e7c\u627f\uff09": [[427, "index-42"]], "irrefutable case block": [[427, "index-22"]], "keyword\uff08\u95dc\u9375\u5b57\uff09": [[427, "index-12"], [427, "index-13"], [427, "index-14"], [427, "index-16"], [427, "index-18"], [427, "index-18"], [427, "index-3"], [427, "index-4"], [427, "index-49"], [427, "index-6"], [427, "index-9"], [430, "index-23"], [430, "index-57"], [435, "index-13"], [435, "index-14"], [436, "index-25"], [436, "index-31"], [436, "index-32"], [436, "index-33"], [436, "index-34"]], "match": [[427, "index-18"], [427, "index-18"]], "match statement\uff08\u5339\u914d\u9673\u8ff0\u5f0f\uff09": [[427, "index-18"]], "name\uff08\u540d\u7a31\uff09": [[427, "index-28"], [427, "index-42"], [429, "index-4"], [430, "index-3"], [430, "index-5"], [435, "index-10"], [436, "index-22"], [436, "index-34"], [436, "index-36"], [436, "index-4"], [436, "index-43"], [440, "index-1"]], "parameter list\uff08\u53c3\u6578\u5217\u8868\uff09": [[427, "index-28"]], "pattern matching\uff08\u6a21\u5f0f\u5339\u914d\uff09": [[427, "index-18"]], "return \uff08\u56de\u50b3\uff09": [[427, "index-13"], [427, "index-15"], [436, "index-24"]], "suite\uff08\u5957\u88dd\uff09": [[427, "index-1"]], "target": [[427, "index-6"], [436, "index-21"], [436, "index-31"], [436, "index-5"], [436, "index-6"]], "type parameter\uff08\u578b\u5225\u53c3\u6578\uff09": [[427, "index-53"]], "user-defined function\uff08\u4f7f\u7528\u8005\u5b9a\u7fa9\u51fd\u5f0f\uff09": [[427, "index-28"], [428, "index-34"], [430, "index-52"]], "value\uff08\u503c\uff09": [[427, "index-31"], [430, "index-17"]], "with": [[427, "index-16"], [428, "index-106"]], "with statement\uff08with \u9673\u8ff0\u5f0f\uff09": [[427, "index-16"]], "ellipsis": [[428, "index-8"]], "java": [[428, "index-13"]], "notimplemented": [[428, "index-7"]], "pep 252": [[428, "index-85"], [464, "index-2"], [464, "index-4"]], "pep 3135": [[428, "index-93"], [470, "index-31"]], "pep 562": [[428, "index-115"], [480, "index-41"], [483, "index-234"], [483, "index-239"]], "__abs__() (object \u7684\u65b9\u6cd5)": [[428, "object.__abs__"]], "__add__() (object \u7684\u65b9\u6cd5)": [[428, "object.__add__"]], "__aenter__() (object \u7684\u65b9\u6cd5)": [[428, "object.__aenter__"]], "__aexit__() (object \u7684\u65b9\u6cd5)": [[428, "object.__aexit__"]], "__aiter__() (object \u7684\u65b9\u6cd5)": [[428, "object.__aiter__"]], "__and__() (object \u7684\u65b9\u6cd5)": [[428, "object.__and__"]], "__anext__() (object \u7684\u65b9\u6cd5)": [[428, "object.__anext__"]], "__annotations__ (function \u7684\u5c6c\u6027)": [[428, "function.__annotations__"]], "__annotations__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[428, "index-36"]], "__annotations__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[428, "index-45"]], "__annotations__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[428, "index-50"]], "__await__() (object \u7684\u65b9\u6cd5)": [[428, "object.__await__"]], "__bases__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[428, "index-50"]], "__bool__() (object \u7684\u65b9\u6cd5)": [[428, "object.__bool__"]], "__bool__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[428, "index-98"]], "__buffer__() (object \u7684\u65b9\u6cd5)": [[428, "object.__buffer__"]], "__bytes__() (object \u7684\u65b9\u6cd5)": [[428, "object.__bytes__"]], "__call__() (object \u7684\u65b9\u6cd5)": [[428, "object.__call__"]], "__ceil__() (object \u7684\u65b9\u6cd5)": [[428, "object.__ceil__"]], "__class__ \uff08\u5be6\u4f8b\u5c6c\u6027\uff09": [[428, "index-54"]], "__class__ \uff08\u65b9\u6cd5 cell\uff09": [[428, "index-92"]], "__class__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[428, "index-83"]], "__class_getitem__() (object \u7684\u985e\u5225\u65b9\u6cd5)": [[428, "object.__class_getitem__"]], "__classcell__ \uff08\u985e\u5225\u547d\u540d\u7a7a\u9593\u9805\u76ee\uff09": [[428, "index-92"]], "__closure__ (function \u7684\u5c6c\u6027)": [[428, "function.__closure__"]], "__closure__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[428, "index-35"]], "__code__ (function \u7684\u5c6c\u6027)": [[428, "function.__code__"]], "__code__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[428, "index-36"]], "__complex__() (object \u7684\u65b9\u6cd5)": [[428, "object.__complex__"]], "__contains__() (object \u7684\u65b9\u6cd5)": [[428, "object.__contains__"]], "__defaults__ (function \u7684\u5c6c\u6027)": [[428, "function.__defaults__"]], "__defaults__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[428, "index-36"]], "__del__() (object \u7684\u65b9\u6cd5)": [[428, "object.__del__"]], "__delattr__() (object \u7684\u65b9\u6cd5)": [[428, "object.__delattr__"]], "__delete__() (object \u7684\u65b9\u6cd5)": [[428, "object.__delete__"]], "__delitem__() (object \u7684\u65b9\u6cd5)": [[428, "object.__delitem__"]], "__dict__ (function \u7684\u5c6c\u6027)": [[428, "function.__dict__"]], "__dict__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[428, "index-36"]], "__dict__ \uff08\u5be6\u4f8b\u5c6c\u6027\uff09": [[428, "index-54"]], "__dict__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[428, "index-46"]], "__dict__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[428, "index-50"]], "__dir__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[428, "index-83"]], "__dir__() (object \u7684\u65b9\u6cd5)": [[428, "object.__dir__"]], "__divmod__() (object \u7684\u65b9\u6cd5)": [[428, "object.__divmod__"]], "__doc__ (function \u7684\u5c6c\u6027)": [[428, "function.__doc__"]], "__doc__ (method \u7684\u5c6c\u6027)": [[428, "method.__doc__"]], "__doc__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[428, "index-36"]], "__doc__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[428, "index-38"]], "__doc__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[428, "index-45"]], "__doc__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[428, "index-50"]], "__enter__() (object \u7684\u65b9\u6cd5)": [[428, "object.__enter__"]], "__eq__() (object \u7684\u65b9\u6cd5)": [[428, "object.__eq__"]], "__exit__() (object \u7684\u65b9\u6cd5)": [[428, "object.__exit__"]], "__file__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[428, "index-45"]], "__float__() (object \u7684\u65b9\u6cd5)": [[428, "object.__float__"]], "__floor__() (object \u7684\u65b9\u6cd5)": [[428, "object.__floor__"]], "__floordiv__() (object \u7684\u65b9\u6cd5)": [[428, "object.__floordiv__"]], "__format__() (object \u7684\u65b9\u6cd5)": [[428, "object.__format__"]], "__format__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[428, "index-78"]], "__func__ (method \u7684\u5c6c\u6027)": [[428, "method.__func__"]], "__func__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[428, "index-38"]], "__ge__() (object \u7684\u65b9\u6cd5)": [[428, "object.__ge__"]], "__get__() (object \u7684\u65b9\u6cd5)": [[428, "object.__get__"]], "__getattr__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[428, "index-83"]], "__getattr__() (object \u7684\u65b9\u6cd5)": [[428, "object.__getattr__"]], "__getattribute__() (object \u7684\u65b9\u6cd5)": [[428, "object.__getattribute__"]], "__getitem__() (object \u7684\u65b9\u6cd5)": [[428, "object.__getitem__"]], "__getitem__() \uff08\u5c0d\u6620\u7269\u4ef6\u65b9\u6cd5\uff09": [[428, "index-71"]], "__globals__ (function \u7684\u5c6c\u6027)": [[428, "function.__globals__"]], "__globals__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[428, "index-35"]], "__gt__() (object \u7684\u65b9\u6cd5)": [[428, "object.__gt__"]], "__hash__() (object \u7684\u65b9\u6cd5)": [[428, "object.__hash__"]], "__iadd__() (object \u7684\u65b9\u6cd5)": [[428, "object.__iadd__"]], "__iand__() (object \u7684\u65b9\u6cd5)": [[428, "object.__iand__"]], "__ifloordiv__() (object \u7684\u65b9\u6cd5)": [[428, "object.__ifloordiv__"]], "__ilshift__() (object \u7684\u65b9\u6cd5)": [[428, "object.__ilshift__"]], "__imatmul__() (object \u7684\u65b9\u6cd5)": [[428, "object.__imatmul__"]], "__imod__() (object \u7684\u65b9\u6cd5)": [[428, "object.__imod__"]], "__imul__() (object \u7684\u65b9\u6cd5)": [[428, "object.__imul__"]], "__index__() (object \u7684\u65b9\u6cd5)": [[428, "object.__index__"]], "__init__() (object \u7684\u65b9\u6cd5)": [[428, "object.__init__"]], "__init_subclass__() (object \u7684\u985e\u5225\u65b9\u6cd5)": [[428, "object.__init_subclass__"]], "__instancecheck__() (class \u7684\u65b9\u6cd5)": [[428, "class.__instancecheck__"]], "__int__() (object \u7684\u65b9\u6cd5)": [[428, "object.__int__"]], "__invert__() (object \u7684\u65b9\u6cd5)": [[428, "object.__invert__"]], "__ior__() (object \u7684\u65b9\u6cd5)": [[428, "object.__ior__"]], "__ipow__() (object \u7684\u65b9\u6cd5)": [[428, "object.__ipow__"]], "__irshift__() (object \u7684\u65b9\u6cd5)": [[428, "object.__irshift__"]], "__isub__() (object \u7684\u65b9\u6cd5)": [[428, "object.__isub__"]], "__iter__() (object \u7684\u65b9\u6cd5)": [[428, "object.__iter__"]], "__itruediv__() (object \u7684\u65b9\u6cd5)": [[428, "object.__itruediv__"]], "__ixor__() (object \u7684\u65b9\u6cd5)": [[428, "object.__ixor__"]], "__kwdefaults__ (function \u7684\u5c6c\u6027)": [[428, "function.__kwdefaults__"]], "__kwdefaults__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[428, "index-36"]], "__le__() (object \u7684\u65b9\u6cd5)": [[428, "object.__le__"]], "__len__() (object \u7684\u65b9\u6cd5)": [[428, "object.__len__"]], "__len__() \uff08\u5c0d\u6620\u7269\u4ef6\u65b9\u6cd5\uff09": [[428, "index-82"]], "__length_hint__() (object \u7684\u65b9\u6cd5)": [[428, "object.__length_hint__"]], "__lshift__() (object \u7684\u65b9\u6cd5)": [[428, "object.__lshift__"]], "__lt__() (object \u7684\u65b9\u6cd5)": [[428, "object.__lt__"]], "__matmul__() (object \u7684\u65b9\u6cd5)": [[428, "object.__matmul__"]], "__missing__() (object \u7684\u65b9\u6cd5)": [[428, "object.__missing__"]], "__mod__() (object \u7684\u65b9\u6cd5)": [[428, "object.__mod__"]], "__module__ (function \u7684\u5c6c\u6027)": [[428, "function.__module__"]], "__module__ (method \u7684\u5c6c\u6027)": [[428, "method.__module__"]], "__module__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[428, "index-36"]], "__module__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[428, "index-38"]], "__module__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[428, "index-50"]], "__mro_entries__() (object \u7684\u65b9\u6cd5)": [[428, "object.__mro_entries__"]], "__mul__() (object \u7684\u65b9\u6cd5)": [[428, "object.__mul__"]], "__name__ (function \u7684\u5c6c\u6027)": [[428, "function.__name__"]], "__name__ (method \u7684\u5c6c\u6027)": [[428, "method.__name__"]], "__name__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[428, "index-36"]], "__name__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[428, "index-38"]], "__name__ \uff08\u6a21\u7d44\u5c6c\u6027\uff09": [[428, "index-45"]], "__name__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[428, "index-50"]], "__ne__() (object \u7684\u65b9\u6cd5)": [[428, "object.__ne__"]], "__neg__() (object \u7684\u65b9\u6cd5)": [[428, "object.__neg__"]], "__new__() (object \u7684\u65b9\u6cd5)": [[428, "object.__new__"]], "__objclass__ (object \u7684\u5c6c\u6027)": [[428, "object.__objclass__"]], "__or__() (object \u7684\u65b9\u6cd5)": [[428, "object.__or__"]], "__pos__() (object \u7684\u65b9\u6cd5)": [[428, "object.__pos__"]], "__pow__() (object \u7684\u65b9\u6cd5)": [[428, "object.__pow__"]], "__prepare__ \uff08\u5143\u985e\u5225\u65b9\u6cd5\uff09": [[428, "index-89"]], "__qualname__ (function \u7684\u5c6c\u6027)": [[428, "function.__qualname__"]], "__radd__() (object \u7684\u65b9\u6cd5)": [[428, "object.__radd__"]], "__rand__() (object \u7684\u65b9\u6cd5)": [[428, "object.__rand__"]], "__rdivmod__() (object \u7684\u65b9\u6cd5)": [[428, "object.__rdivmod__"]], "__release_buffer__() (object \u7684\u65b9\u6cd5)": [[428, "object.__release_buffer__"]], "__repr__() (object \u7684\u65b9\u6cd5)": [[428, "object.__repr__"]], "__repr__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[428, "index-75"]], "__reversed__() (object \u7684\u65b9\u6cd5)": [[428, "object.__reversed__"]], "__rfloordiv__() (object \u7684\u65b9\u6cd5)": [[428, "object.__rfloordiv__"]], "__rlshift__() (object \u7684\u65b9\u6cd5)": [[428, "object.__rlshift__"]], "__rmatmul__() (object \u7684\u65b9\u6cd5)": [[428, "object.__rmatmul__"]], "__rmod__() (object \u7684\u65b9\u6cd5)": [[428, "object.__rmod__"]], "__rmul__() (object \u7684\u65b9\u6cd5)": [[428, "object.__rmul__"]], "__ror__() (object \u7684\u65b9\u6cd5)": [[428, "object.__ror__"]], "__round__() (object \u7684\u65b9\u6cd5)": [[428, "object.__round__"]], "__rpow__() (object \u7684\u65b9\u6cd5)": [[428, "object.__rpow__"]], "__rrshift__() (object \u7684\u65b9\u6cd5)": [[428, "object.__rrshift__"]], "__rshift__() (object \u7684\u65b9\u6cd5)": [[428, "object.__rshift__"]], "__rsub__() (object \u7684\u65b9\u6cd5)": [[428, "object.__rsub__"]], "__rtruediv__() (object \u7684\u65b9\u6cd5)": [[428, "object.__rtruediv__"]], "__rxor__() (object \u7684\u65b9\u6cd5)": [[428, "object.__rxor__"]], "__self__ (method \u7684\u5c6c\u6027)": [[428, "method.__self__"]], "__self__ \uff08\u65b9\u6cd5\u5c6c\u6027\uff09": [[428, "index-38"]], "__set__() (object \u7684\u65b9\u6cd5)": [[428, "object.__set__"]], "__set_name__() (object \u7684\u65b9\u6cd5)": [[428, "object.__set_name__"]], "__setattr__() (object \u7684\u65b9\u6cd5)": [[428, "object.__setattr__"]], "__setitem__() (object \u7684\u65b9\u6cd5)": [[428, "object.__setitem__"]], "__str__() (object \u7684\u65b9\u6cd5)": [[428, "object.__str__"]], "__str__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[428, "index-76"]], "__sub__() (object \u7684\u65b9\u6cd5)": [[428, "object.__sub__"]], "__subclasscheck__() (class \u7684\u65b9\u6cd5)": [[428, "class.__subclasscheck__"]], "__truediv__() (object \u7684\u65b9\u6cd5)": [[428, "object.__truediv__"]], "__trunc__() (object \u7684\u65b9\u6cd5)": [[428, "object.__trunc__"]], "__type_params__ (function \u7684\u5c6c\u6027)": [[428, "function.__type_params__"]], "__type_params__ \uff08\u51fd\u5f0f\u5c6c\u6027\uff09": [[428, "index-36"]], "__type_params__ \uff08\u985e\u5225\u5c6c\u6027\uff09": [[428, "index-50"]], "__xor__() (object \u7684\u65b9\u6cd5)": [[428, "object.__xor__"]], "body": [[428, "index-91"]], "built-in method\uff08\u5167\u5efa\u65b9\u6cd5\uff09": [[428, "index-43"], [430, "index-53"]], "byte\uff08\u4f4d\u5143\u7d44\uff09": [[428, "index-21"]], "call\uff08\u547c\u53eb\uff09": [[428, "index-33"], [428, "index-47"], [428, "index-49"], [428, "index-97"], [430, "index-47"], [430, "index-52"], [430, "index-53"], [430, "index-54"], [430, "index-55"], [430, "index-56"]], "chr": [[428, "index-19"]], "class instance\uff08\u985e\u5225\u5be6\u4f8b\uff09": [[428, "index-47"], [428, "index-51"], [428, "index-52"], [430, "index-55"]], "class object\uff08\u985e\u5225\u7269\u4ef6\uff09": [[428, "index-47"], [428, "index-49"], [430, "index-54"]], "clear() (frame \u7684\u65b9\u6cd5)": [[428, "frame.clear"]], "close() (coroutine \u7684\u65b9\u6cd5)": [[428, "coroutine.close"]], "co_argcount (codeobject \u7684\u5c6c\u6027)": [[428, "codeobject.co_argcount"]], "co_argcount \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-58"]], "co_cellvars (codeobject \u7684\u5c6c\u6027)": [[428, "codeobject.co_cellvars"]], "co_cellvars \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-58"]], "co_code (codeobject \u7684\u5c6c\u6027)": [[428, "codeobject.co_code"]], "co_code \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-58"]], "co_consts (codeobject \u7684\u5c6c\u6027)": [[428, "codeobject.co_consts"]], "co_consts \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-58"]], "co_filename (codeobject \u7684\u5c6c\u6027)": [[428, "codeobject.co_filename"]], "co_filename \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-58"]], "co_firstlineno (codeobject \u7684\u5c6c\u6027)": [[428, "codeobject.co_firstlineno"]], "co_firstlineno \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-58"]], "co_flags (codeobject \u7684\u5c6c\u6027)": [[428, "codeobject.co_flags"]], "co_flags \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-58"]], "co_freevars (codeobject \u7684\u5c6c\u6027)": [[428, "codeobject.co_freevars"]], "co_freevars \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-58"]], "co_kwonlyargcount (codeobject \u7684\u5c6c\u6027)": [[428, "codeobject.co_kwonlyargcount"]], "co_kwonlyargcount \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-58"]], "co_lines() (codeobject \u7684\u65b9\u6cd5)": [[428, "codeobject.co_lines"]], "co_lnotab (codeobject \u7684\u5c6c\u6027)": [[428, "codeobject.co_lnotab"]], "co_lnotab \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-58"]], "co_name (codeobject \u7684\u5c6c\u6027)": [[428, "codeobject.co_name"]], "co_name \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-58"]], "co_names (codeobject \u7684\u5c6c\u6027)": [[428, "codeobject.co_names"]], "co_names \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-58"]], "co_nlocals (codeobject \u7684\u5c6c\u6027)": [[428, "codeobject.co_nlocals"]], "co_nlocals \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-58"]], "co_positions() (codeobject \u7684\u65b9\u6cd5)": [[428, "codeobject.co_positions"]], "co_posonlyargcount (codeobject \u7684\u5c6c\u6027)": [[428, "codeobject.co_posonlyargcount"]], "co_posonlyargcount \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-58"]], "co_qualname (codeobject \u7684\u5c6c\u6027)": [[428, "codeobject.co_qualname"]], "co_qualname \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-58"]], "co_stacksize (codeobject \u7684\u5c6c\u6027)": [[428, "codeobject.co_stacksize"]], "co_stacksize \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-58"]], "co_varnames (codeobject \u7684\u5c6c\u6027)": [[428, "codeobject.co_varnames"]], "co_varnames \uff08\u7a0b\u5f0f\u78bc\u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-58"]], "constructor\uff08\u5efa\u69cb\u51fd\u5f0f\uff09": [[428, "index-73"]], "conversion": [[428, "index-78"], [430, "index-1"], [436, "index-3"]], "destructor\uff08\u89e3\u69cb\u51fd\u5f0f\uff09": [[428, "index-74"], [436, "index-7"]], "documentation string\uff08\u6587\u4ef6\u5b57\u4e32\uff09": [[428, "index-60"]], "empty\uff08\u7a7a\u7684\uff09": [[428, "index-20"]], "extension\uff08\u64f4\u5145\uff09": [[428, "index-4"]], "f_back (frame \u7684\u5c6c\u6027)": [[428, "frame.f_back"]], "f_back \uff08frame \u5c6c\u6027\uff09": [[428, "index-64"]], "f_builtins (frame \u7684\u5c6c\u6027)": [[428, "frame.f_builtins"]], "f_builtins \uff08frame \u5c6c\u6027\uff09": [[428, "index-64"]], "f_code (frame \u7684\u5c6c\u6027)": [[428, "frame.f_code"]], "f_code \uff08frame \u5c6c\u6027\uff09": [[428, "index-64"]], "f_globals (frame \u7684\u5c6c\u6027)": [[428, "frame.f_globals"]], "f_globals \uff08frame \u5c6c\u6027\uff09": [[428, "index-64"]], "f_lasti (frame \u7684\u5c6c\u6027)": [[428, "frame.f_lasti"]], "f_lasti \uff08frame \u5c6c\u6027\uff09": [[428, "index-64"]], "f_lineno (frame \u7684\u5c6c\u6027)": [[428, "frame.f_lineno"]], "f_lineno \uff08frame \u5c6c\u6027\uff09": [[428, "index-65"]], "f_locals (frame \u7684\u5c6c\u6027)": [[428, "frame.f_locals"]], "f_locals \uff08frame \u5c6c\u6027\uff09": [[428, "index-64"]], "f_trace (frame \u7684\u5c6c\u6027)": [[428, "frame.f_trace"]], "f_trace \uff08frame \u5c6c\u6027\uff09": [[428, "index-65"]], "f_trace_lines (frame \u7684\u5c6c\u6027)": [[428, "frame.f_trace_lines"]], "f_trace_lines \uff08frame \u5c6c\u6027\uff09": [[428, "index-65"]], "f_trace_opcodes (frame \u7684\u5c6c\u6027)": [[428, "frame.f_trace_opcodes"]], "f_trace_opcodes \uff08frame \u5c6c\u6027\uff09": [[428, "index-65"]], "finalizer\uff08\u7d42\u7d50\u51fd\u5f0f\uff09": [[428, "index-74"]], "format() \uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[428, "index-76"]], "global\uff08\u5168\u57df\uff09": [[428, "index-35"]], "handler\uff08\u8655\u7406\u5668\uff09": [[428, "index-66"]], "hierarchy\uff08\u968e\u5c64\uff09": [[428, "index-4"]], "identity of an object\uff08\u7269\u4ef6\u7684\u8b58\u5225\uff09": [[428, "index-1"]], "immutable object\uff08\u4e0d\u53ef\u8b8a\u7269\u4ef6\uff09": [[428, "index-1"]], "immutable sequences\uff08\u4e0d\u53ef\u8b8a\u5e8f\u5217\uff09": [[428, "index-18"]], "immutable sequence\uff08\u4e0d\u53ef\u8b8a\u5e8f\u5217\uff09": [[428, "index-17"]], "immutable types\uff08\u4e0d\u53ef\u8b8a\u578b\u5225\uff09": [[428, "index-72"]], "index operation\uff08\u7d22\u5f15\u64cd\u4f5c\uff09": [[428, "index-15"]], "indices() (slice \u7684\u65b9\u6cd5)": [[428, "slice.indices"]], "instance\uff08\u5be6\u4f8b\uff09": [[428, "index-47"], [428, "index-51"], [428, "index-97"], [430, "index-55"], [430, "index-56"]], "internal type\uff08\u5167\u90e8\u578b\u5225\uff09": [[428, "index-56"]], "invocation\uff08\u8abf\u7528\uff09": [[428, "index-33"]], "item selection\uff08\u9805\u76ee\u9078\u53d6\uff09": [[428, "index-15"]], "itorator\uff08\u758a\u4ee3\u5668\uff09": [[428, "index-39"]], "last_traceback \uff08sys \u6a21\u7d44\u4e2d\uff09": [[428, "index-66"]], "makefile() \uff08socket \u65b9\u6cd5\uff09": [[428, "index-55"]], "metaclass hint\uff08\u5143\u985e\u5225\u63d0\u793a\uff09": [[428, "index-88"]], "mutable object\uff08\u53ef\u8b8a\u7269\u4ef6\uff09": [[428, "index-1"]], "mutable\uff08\u53ef\u8b8a\u7684\uff09": [[428, "index-22"], [436, "index-4"], [436, "index-9"]], "number\uff08\u6578\u5b57\uff09": [[428, "index-13"], [428, "index-14"], [435, "index-27"]], "object.__match_args__ (\u5167\u5efa\u8b8a\u6578)": [[428, "object.__match_args__"]], "object.__slots__ (\u5167\u5efa\u8b8a\u6578)": [[428, "object.__slots__"]], "open": [[428, "index-55"], [446, "index-0"]], "ord": [[428, "index-19"]], "overloading\uff08\u591a\u8f09\uff09": [[428, "index-71"]], "popen() \uff08\u65bc os \u6a21\u7d44\u4e2d\uff09": [[428, "index-55"]], "print": [[428, "index-78"]], "print() \uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[428, "index-76"]], "reference counting\uff08\u53c3\u7167\u8a08\u6578\uff09": [[428, "index-2"]], "replace() (codeobject \u7684\u65b9\u6cd5)": [[428, "codeobject.replace"]], "repr() \uff08\u5167\u5efa\u51fd\u5f0f\uff09": [[428, "index-75"]], "representation\uff08\u8868\u793a\uff09": [[428, "index-11"]], "round": [[428, "index-105"]], "send() (coroutine \u7684\u65b9\u6cd5)": [[428, "coroutine.send"]], "set type\uff08\u96c6\u5408\u578b\u5225\uff09": [[428, "index-27"]], "singleton\uff08\u55ae\u4f8b\uff09": [[428, "index-20"]], "stack\uff08\u5806\u758a\uff09": [[428, "index-66"]], "start \uff08slice \u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-70"]], "stderr \uff08sys \u6a21\u7d44\u4e2d\uff09": [[428, "index-55"]], "stdin \uff08sys \u6a21\u7d44\u4e2d\uff09": [[428, "index-55"]], "stdio": [[428, "index-55"]], "stdout \uff08sys \u6a21\u7d44\u4e2d\uff09": [[428, "index-55"]], "step \uff08slice \u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-70"]], "stop \uff08slice \u7269\u4ef6\u5c6c\u6027\uff09": [[428, "index-70"]], "subclassing\uff08\u5b50\u985e\u5225\u5316\uff09": [[428, "index-72"]], "subscription\uff08\u4e0b\u6a19\uff09": [[428, "index-15"], [428, "index-22"], [428, "index-30"], [430, "index-41"], [436, "index-9"]], "sys.exc_info": [[428, "index-66"]], "sys.exception": [[428, "index-66"]], "sys.last_traceback": [[428, "index-66"]], "sys.stderr": [[428, "index-55"]], "sys.stdin": [[428, "index-55"]], "sys.stdout": [[428, "index-55"]], "tb_frame (traceback \u7684\u5c6c\u6027)": [[428, "traceback.tb_frame"]], "tb_frame \uff08traceback \u5c6c\u6027\uff09": [[428, "index-67"]], "tb_lasti (traceback \u7684\u5c6c\u6027)": [[428, "traceback.tb_lasti"]], "tb_lasti \uff08traceback \u5c6c\u6027\uff09": [[428, "index-67"]], "tb_lineno (traceback \u7684\u5c6c\u6027)": [[428, "traceback.tb_lineno"]], "tb_lineno \uff08traceback \u5c6c\u6027\uff09": [[428, "index-67"]], "tb_next (traceback \u7684\u5c6c\u6027)": [[428, "traceback.tb_next"]], "tb_next \uff08traceback \u5c6c\u6027\uff09": [[428, "index-68"]], "throw() (coroutine \u7684\u65b9\u6cd5)": [[428, "coroutine.throw"]], "trace\uff08\u8ffd\u8e64\uff09": [[428, "index-66"]], "type of an object\uff08\u7269\u4ef6\u7684\u578b\u5225\uff09": [[428, "index-1"]], "types\uff08\u578b\u5225\uff09, internal\uff08\u5167\u90e8\uff09": [[428, "index-56"]], "unreachable object\uff08\u4e0d\u53ef\u9054\u7269\u4ef6\uff09": [[428, "index-2"]], "user-defined method\uff08\u4f7f\u7528\u8005\u5b9a\u7fa9\u65b9\u6cd5\uff09": [[428, "index-37"]], "user-defined\uff08\u4f7f\u7528\u8005\u5b9a\u7fa9\uff09": [[428, "index-34"], [428, "index-37"], [430, "index-52"]], "value of an object\uff08\u7269\u4ef6\u7684\u503c\uff09": [[428, "index-1"]], "nameerror\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[429, "index-9"]], "systemexit\uff08\u5167\u5efa\u4f8b\u5916\uff09": [[429, "index-17"]], "binding\uff08\u7e6b\u7d50\uff09": [[429, "index-4"], [436, "index-34"], [436, "index-36"], [436, "index-4"], [436, "index-43"]], "block": [[429, "index-0"], [429, "index-1"]], "environment\uff08\u74b0\u5883\uff09": [[429, "index-8"]], "error handling\uff08\u932f\u8aa4\u8655\u7406\uff09": [[429, "index-15"]], "exception handler\uff08\u4f8b\u5916\u8655\u7406\u5668\uff09": [[429, "index-15"]], "execution model\uff08\u57f7\u884c\u6a21\u578b\uff09": [[429, "index-0"]], "free": [[429, "index-6"]], "from": [[429, "index-5"], [430, "index-23"], [430, "index-25"], [436, "index-34"], [436, "index-36"]], "handle an exception\uff08\u8655\u7406\u4f8b\u5916\uff09": [[429, "index-15"]], "import statement\uff08\u5f15\u5165\u9673\u8ff0\u5f0f\uff09": [[429, "index-5"], [436, "index-34"], [436, "index-35"], [436, "index-36"], [436, "index-37"]], "raise an exception\uff08\u5f15\u767c\u4f8b\u5916\uff09": [[429, "index-15"]], "restricted\uff08\u53d7\u9650\uff09": [[429, "index-13"]], "scope\uff08\u4f5c\u7528\u57df\uff09": [[429, "index-3"], [429, "index-7"]], "termination model\uff08\u7d42\u6b62\u6a21\u578b\uff09": [[429, "index-16"]], "variable\uff08\u8b8a\u6578\uff09": [[429, "index-6"]], ":= \uff08\u5192\u865f\u7b49\u65bc\uff09": [[430, "index-86"]], "bnf": [[430, "index-0"], [434, "index-0"]], "conditional\uff08\u689d\u4ef6\u5f0f\uff09": [[430, "index-82"], [430, "index-88"]], "pep 308": [[430, "index-89"], [467, "index-1"], [467, "index-2"]], "pep 380": [[430, "index-28"], [476, "index-12"]], "pep 448": [[430, "index-19"], [430, "index-51"], [430, "index-94"], [478, "index-5"], [478, "index-6"], [483, "index-281"], [483, "index-292"], [483, "index-293"], [483, "index-294"]], "pep 530": [[430, "index-14"], [479, "index-11"], [479, "index-12"], [483, "index-267"]], "__anext__() (agen \u7684\u65b9\u6cd5)": [[430, "agen.__anext__"]], "__call__() \uff08\u7269\u4ef6\u65b9\u6cd5\uff09": [[430, "index-56"]], "__next__() (generator \u7684\u65b9\u6cd5)": [[430, "generator.__next__"]], "aclose() (agen \u7684\u65b9\u6cd5)": [[430, "agen.aclose"]], "addition\uff08\u52a0\uff09": [[430, "index-69"]], "anonymous\uff08\u533f\u540d\uff09": [[430, "index-90"]], "argument list\uff08\u5f15\u6578\u5217\u8868\uff09": [[430, "index-47"]], "arithmetic": [[430, "index-1"], [430, "index-59"], [430, "index-64"]], "asend() (agen \u7684\u65b9\u6cd5)": [[430, "agen.asend"]], "assignment expression\uff08\u8ce6\u503c\u904b\u7b97\u5f0f\uff09": [[430, "index-86"]], "asynchronous-generator\uff08\u975e\u540c\u6b65\u7522\u751f\u5668\uff09": [[430, "index-35"]], "athrow() (agen \u7684\u65b9\u6cd5)": [[430, "agen.athrow"]], "atom": [[430, "index-2"]], "attribute reference\uff08\u5c6c\u6027\u53c3\u7167\uff09": [[430, "index-39"]], "call semantics\uff08\u547c\u53eb\u8a9e\u610f\uff09": [[430, "index-47"], [430, "index-48"]], "chaining\uff08\u93c8\u63a5\uff09": [[430, "index-78"]], "close() (generator \u7684\u65b9\u6cd5)": [[430, "generator.close"]], "comma": [[430, "index-10"], [430, "index-95"]], "comprehensions": [[430, "index-11"], [430, "index-15"], [430, "index-16"], [430, "index-17"]], "conditional expression\uff08\u689d\u4ef6\u904b\u7b97\u5f0f\uff09": [[430, "index-88"]], "dictionary expression\uff08\u5b57\u5178\u904b\u7b97\u5f0f\uff09": [[430, "index-17"]], "division\uff08\u9664\uff09": [[430, "index-67"]], "evaluation": [[430, "index-96"]], "exclusive\uff08\u6392\u5916\uff09": [[430, "index-75"]], "expression": [[430, "index-0"], [430, "index-22"], [430, "index-23"], [430, "index-82"], [430, "index-88"], [430, "index-90"], [430, "index-91"], [436, "index-1"], [436, "index-2"]], "expression list\uff08\u904b\u7b97\u5f0f\u4e32\u5217\uff09": [[430, "index-15"], [430, "index-16"], [430, "index-91"]], "form": [[430, "index-90"]], "hashable\uff08\u53ef\u96dc\u6e4a\uff09": [[430, "index-20"]], "identifier": [[430, "index-3"]], "identity": [[430, "index-81"]], "immutable": [[430, "index-20"], [430, "index-7"]], "inclusive\uff08\u5305\u542b\uff09": [[430, "index-76"]], "inversion\uff08\u53cd\u8f49\uff09": [[430, "index-62"]], "item\uff08\u9805\u76ee\uff09": [[430, "index-42"], [430, "index-43"]], "iterable\uff08\u53ef\u758a\u4ee3\uff09": [[430, "index-93"]], "key/value pair\uff08\u9375/\u503c\u5c0d\uff09": [[430, "index-17"]], "key\uff08\u9375\uff09": [[430, "index-17"]], "lambda expression\uff08lambda \u904b\u7b97\u5f0f\uff09": [[430, "index-90"]], "list expression\uff08\u4e32\u5217\u904b\u7b97\u5f0f\uff09": [[430, "index-15"]], "literal": [[430, "index-6"]], "mangling": [[430, "index-5"]], "matrix multiplication\uff08\u77e9\u9663\u4e58\u6cd5\uff09": [[430, "index-66"]], "membership\uff08\u6210\u54e1\uff09": [[430, "index-80"]], "minus\uff08\u6e1b\uff09": [[430, "index-60"]], "modulo\uff08\u9918\u6578\uff09": [[430, "index-68"]], "multiplication\uff08\u4e58\uff09": [[430, "index-65"]], "named expression\uff08\u9644\u540d\u904b\u7b97\u5f0f\uff09": [[430, "index-86"]], "names": [[430, "index-5"]], "negation\uff08\u5426\u5b9a\uff09": [[430, "index-60"]], "order\uff08\u9806\u5e8f\uff09": [[430, "index-96"]], "parenthesized form": [[430, "index-8"]], "plus\uff08\u52a0\uff09": [[430, "index-61"]], "power\uff08\u6b21\u65b9\uff09": [[430, "index-58"]], "precedence\uff08\u512a\u5148\u9806\u5e8f\uff09": [[430, "index-97"]], "primary\uff08\u4e3b\u8981\uff09": [[430, "index-38"]], "private": [[430, "index-5"]], "reference\uff08\u53c3\u7167\uff09": [[430, "index-39"]], "send() (generator \u7684\u65b9\u6cd5)": [[430, "generator.send"]], "set expression\uff08\u96c6\u5408\u904b\u7b97\u5f0f\uff09": [[430, "index-16"]], "shifting\uff08\u79fb\u52d5\uff09": [[430, "index-71"]], "slicing\uff08\u5207\u7247\uff09": [[430, "index-44"]], "start\uff08\u5207\u7247\u7269\u4ef6\u5c6c\u6027\uff09": [[430, "index-46"]], "step\uff08\u5207\u7247\u7269\u4ef6\u5c6c\u6027\uff09": [[430, "index-46"]], "stop\uff08\u5207\u7247\u7269\u4ef6\u5c6c\u6027\uff09": [[430, "index-46"]], "subtraction\uff08\u6e1b\uff09": [[430, "index-70"]], "ternary\uff08\u4e09\u5143\uff09": [[430, "index-88"]], "test\uff08\u6e2c\u8a66\uff09": [[430, "index-80"], [430, "index-81"]], "throw() (generator \u7684\u65b9\u6cd5)": [[430, "generator.throw"]], "trailing": [[430, "index-95"]], "tuple": [[430, "index-42"], [430, "index-45"], [430, "index-9"], [430, "index-92"]], "tuple display": [[430, "index-8"]], "unary\uff08\u4e00\u5143\uff09": [[430, "index-59"]], "unpacking\uff08\u89e3\u5305\uff09": [[430, "index-18"], [430, "index-49"], [430, "index-93"]], "walrus operator\uff08\u6d77\u8c61\u904b\u7b97\u5b50\uff09": [[430, "index-86"]], "xor": [[430, "index-75"]], "yield": [[430, "index-23"], [430, "index-34"], [436, "index-26"], [476, "index-11"]], "yield from expression\uff08yield from \u904b\u7b97\u5f0f\uff09": [[430, "index-25"]], "\u65bc comprehensions\uff08\u7d9c\u5408\u904b\u7b97\uff09": [[430, "index-12"], [430, "index-13"]], "\u65bc expression list\uff08\u904b\u7b97\u5f0f\u4e32\u5217\uff09": [[430, "index-93"]], "\u65bc\u51fd\u5f0f\u547c\u53eb\u4e2d": [[430, "index-47"], [430, "index-49"], [430, "index-50"], [441, "index-3"], [441, "index-4"]], "\u65bc\u5b57\u5178\u904b\u7b97\u5f0f": [[430, "index-17"]], "\u65bc\u5b57\u5178\u986f\u793a": [[430, "index-17"], [430, "index-18"]], "\u7bc4\u4f8b": [[430, "index-34"]], "__cached__": [[432, "cached__"]], "__file__": [[432, "file__"]], "__loader__": [[432, "loader__"]], "__name__": [[432, "name__"]], "__package__": [[432, "package__"]], "__path__": [[432, "path__"]], "__spec__": [[432, "spec__"]], "find_spec": [[432, "index-10"]], "finder\uff08\u641c\u5c0b\u5668\uff09": [[432, "index-10"], [432, "index-8"]], "hooks": [[432, "index-9"]], "import hooks": [[432, "index-9"]], "import machinery\uff08\u5f15\u5165\u6a5f\u5236\uff09": [[432, "index-0"]], "meta": [[432, "index-9"]], "meta hooks": [[432, "index-9"]], "module spec": [[432, "index-8"]], "path based finder\uff08\u57fa\u65bc\u8def\u5f91\u7684\u641c\u5c0b\u5668\uff09": [[432, "index-16"]], "path hooks": [[432, "index-9"]], "regular\uff08\u4e00\u822c\uff09": [[432, "index-4"]], "sys.meta_path": [[432, "index-10"]], "sys.modules": [[432, "index-7"]], "sys.path": [[432, "index-17"]], "sys.path_hooks": [[432, "index-17"]], "sys.path_importer_cache": [[432, "index-17"]], "grammar\uff08\u6587\u6cd5\uff09": [[434, "index-0"]], "lexical definitions\uff08\u8a5e\u6cd5\u5b9a\u7fa9\uff09": [[434, "index-1"]], "notation\uff08\u6a19\u8a18\u6cd5\uff09": [[434, "index-0"]], "syntax\uff08\u8a9e\u6cd5\uff09": [[434, "index-0"]], "\" \uff08\u96d9\u5f15\u865f\uff09": [[435, "index-17"]], "\"\"\"": [[435, "index-18"]], "' \uff08\u55ae\u5f15\u865f\uff09": [[435, "index-17"]], "'''": [[435, "index-18"]], "0b": [[435, "index-28"]], "0o": [[435, "index-28"]], "0x": [[435, "index-28"]], "indent token\uff08\u7e2e\u6392\u6a19\u8a8c\uff09": [[435, "index-9"]], "pep 3131": [[435, "index-11"], [435, "index-12"], [470, "index-5"], [483, "index-219"]], "pep 414": [[435, "index-21"], [476, "index-14"]], "standard c\uff08\u6a19\u6e96 c\uff09": [[435, "index-23"]], "unicode consortium": [[435, "index-18"]], "_, identifiers\uff08\u8b58\u5225\u5668\uff09": [[435, "index-15"]], "__, identifiers\uff08\u8b58\u5225\u5668\uff09": [[435, "index-15"]], "b\"": [[435, "index-19"]], "b'": [[435, "index-19"]], "backslash character\uff08\u53cd\u659c\u7dda\u5b57\u5143\uff09": [[435, "index-6"]], "binary literal\uff08\u4e8c\u9032\u4f4d\u5e38\u6578\uff09": [[435, "index-27"]], "blank line\uff08\u7a7a\u767d\u5217\uff09": [[435, "index-7"]], "bytes literal\uff08\u4f4d\u5143\u7d44\u5e38\u6578\uff09": [[435, "index-17"], [435, "index-19"]], "complex literal\uff08\u8907\u6578\u5e38\u6578\uff09": [[435, "index-27"]], "constant\uff08\u5e38\u6578\uff09": [[435, "index-16"]], "decimal literal\uff08\u5341\u9032\u4f4d\u5e38\u6578\uff09": [[435, "index-27"]], "delimiters\uff08\u5206\u9694\u7b26\u865f\uff09": [[435, "index-32"]], "e": [[435, "index-29"]], "encoding declarations (source file)\uff08\u7de8\u78bc\u5ba3\u544a\uff08\u539f\u59cb\u6a94\u6848\uff09\uff09": [[435, "index-5"]], "f\"": [[435, "index-22"]], "f'": [[435, "index-22"]], "floating point literal\uff08\u6d6e\u9ede\u6578\u5e38\u6578\uff09": [[435, "index-27"]], "for help in debugging using string literals\uff08\u4f7f\u7528\u5b57\u4e32\u5e38\u6578\u9032\u884c\u9664\u932f\uff09": [[435, "index-25"]], "formatted literal\uff08\u683c\u5f0f\u5316\u5e38\u6578\uff09": [[435, "index-25"]], "formatted string literal\uff08\u683c\u5f0f\u5316\u5b57\u4e32\u5e38\u6578\uff09": [[435, "index-22"], [435, "index-25"]], "fstring\uff08f \u5b57\u4e32\uff09": [[435, "index-25"]], "grouping\uff08\u7fa4\u7d44\uff09": [[435, "index-8"]], "hash character\uff08\u4e95\u5b57\u865f\uff09": [[435, "index-4"]], "hexadecimal literal\uff08\u5341\u516d\u9032\u4f4d\u5e38\u6578\uff09": [[435, "index-27"]], "identifier\uff08\u8b58\u5225\u5668\uff09": [[435, "index-10"]], "imaginary literal\uff08\u865b\u6578\u5e38\u6578\uff09": [[435, "index-27"]], "indentation\uff08\u7e2e\u6392\uff09": [[435, "index-8"]], "integer literal\uff08\u6574\u6578\u5e38\u6578\uff09": [[435, "index-27"], [435, "index-28"]], "interpolated literal\uff08\u63d2\u503c\u5e38\u6578\uff09": [[435, "index-25"]], "interpolated string literal\uff08\u63d2\u503c\u5b57\u4e32\u5e38\u6578\uff09": [[435, "index-25"]], "j": [[435, "index-30"]], "leading whitespace\uff08\u524d\u7f6e\u7a7a\u767d\uff09": [[435, "index-8"]], "lexical analysis\uff08\u8a5e\u6cd5\u5206\u6790\uff09": [[435, "index-0"]], "line continuation\uff08\u5217\u5ef6\u7e8c\uff09": [[435, "index-6"]], "line joining\uff08\u5217\u9023\u63a5\uff09": [[435, "index-3"], [435, "index-6"]], "line structure\uff08\u5217\u7d50\u69cb\uff09": [[435, "index-2"]], "literal\uff08\u5e38\u6578\uff09": [[435, "index-16"]], "logical line\uff08\u908f\u8f2f\u5217\uff09": [[435, "index-3"]], "numeric literal\uff08\u6578\u503c\u5e38\u6578\uff09": [[435, "index-27"]], "octal literal\uff08\u516b\u9032\u4f4d\u5e38\u6578\uff09": [[435, "index-27"]], "operators\uff08\u904b\u7b97\u5b50\uff09": [[435, "index-31"]], "parser\uff08\u5256\u6790\u5668\uff09": [[435, "index-0"]], "physical line\uff08\u7269\u7406\u5217\uff09": [[435, "index-23"], [435, "index-3"], [435, "index-6"]], "r\"": [[435, "index-20"]], "r'": [[435, "index-20"]], "raw string literal\uff08\u539f\u59cb\u5b57\u4e32\u5e38\u6578\uff09": [[435, "index-20"]], "raw string\uff08\u539f\u59cb\u5b57\u4e32\uff09": [[435, "index-18"]], "reserved word\uff08\u4fdd\u7559\u5b57\uff09": [[435, "index-13"]], "soft keyword\uff08\u8edf\u95dc\u9375\u5b57\uff09": [[435, "index-14"]], "source character set\uff08\u539f\u59cb\u5b57\u5143\u96c6\u5408\uff09": [[435, "index-5"]], "source encoding declaration\uff08\u539f\u59cb\u7de8\u78bc\u5ba3\u544a\uff09": [[435, "index-5"]], "statement grouping\uff08\u9673\u8ff0\u5f0f\u7fa4\u7d44\uff09": [[435, "index-8"]], "string literal\uff08\u5b57\u4e32\u5e38\u6578\uff09": [[435, "index-17"], [435, "index-18"]], "tab\uff08\u5b9a\u4f4d\u5b57\u5143\uff09": [[435, "index-8"]], "triple-quoted string\uff08\u4e09\u5f15\u865f\u5b57\u4e32\uff09": [[435, "index-18"]], "u\"": [[435, "index-17"]], "u'": [[435, "index-17"]], "unrecognized escape sequence\uff08\u7121\u6cd5\u8fa8\u8b58\u7684\u8df3\u812b\u5e8f\u5217\uff09": [[435, "index-24"]], "\u65bc\u6578\u503c\u5e38\u6578\u4e2d": [[435, "index-28"], [435, "index-29"], [435, "index-30"]], "\u65bc\u683c\u5f0f\u5316\u5b57\u4e32\u5e38\u6578\u4e2d": [[435, "index-25"]], "%=": [[436, "index-14"]], "&=": [[436, "index-14"]], "**=": [[436, "index-14"]], "*=": [[436, "index-14"]], "+=": [[436, "index-14"]], "-=": [[436, "index-14"]], "//=": [[436, "index-14"]], "/=": [[436, "index-14"]], "<<=": [[436, "index-14"]], ">>=": [[436, "index-14"]], "pep 3104": [[436, "index-46"], [470, "index-8"]], "pep 3132": [[436, "index-13"], [470, "index-9"]], "^=": [[436, "index-14"]], "__all__\uff08\u53ef\u9078\u6a21\u7d44\u5c6c\u6027\uff09": [[436, "index-38"]], "__cause__\uff08\u4f8b\u5916\u5c6c\u6027\uff09": [[436, "index-29"]], "__context__\uff08\u4f8b\u5916\u5c6c\u6027\uff09": [[436, "index-29"]], "__debug__": [[436, "index-19"]], "__traceback__\uff08\u4f8b\u5916\u5c6c\u6027\uff09": [[436, "index-27"]], "annotated variable\uff08\u8a3b\u91cb\u8b8a\u6578\uff09": [[436, "index-15"]], "annotated\uff08\u8a3b\u91cb\uff09": [[436, "index-15"]], "assertions\uff08\u65b7\u8a00\uff09": [[436, "index-18"]], "assignment statement\uff08\u8ce6\u503c\u9673\u8ff0\u5f0f\uff09": [[436, "index-4"]], "assignment\uff08\u8ce6\u503c\uff09\u3001annotated\uff08\u8a3b\u91cb\uff09": [[436, "index-15"]], "assignment\uff08\u8ce6\u503c\uff09\u3001augmented\uff08\u589e\u5f37\uff09": [[436, "index-14"]], "augmented assignment\uff08\u589e\u5f37\u8ce6\u503c\uff09": [[436, "index-14"]], "augmented\uff08\u589e\u5f37\uff09": [[436, "index-14"]], "call": [[436, "index-3"]], "deletion\uff08\u522a\u9664\uff09": [[436, "index-21"], [436, "index-23"]], "expression list\uff08\u904b\u7b97\u5f0f\u5217\u8868\uff09": [[436, "index-18"]], "future": [[436, "index-40"]], "future statement\uff08future \u9673\u8ff0\u5f0f\uff09": [[436, "index-40"]], "global": [[436, "index-22"], [436, "index-43"], [436, "index-43"]], "identifier list\uff08\u8b58\u5225\u7b26\u865f\u6e05\u55ae\uff09": [[436, "index-43"], [436, "index-45"]], "loop control\uff08\u8ff4\u5708\u63a7\u5236\uff09": [[436, "index-31"]], "nonlocal": [[436, "index-45"]], "null": [[436, "index-20"]], "output": [[436, "index-3"]], "pass": [[436, "index-20"]], "procedure": [[436, "index-3"]], "raiseing": [[436, "index-27"]], "rebinding\uff08\u91cd\u65b0\u7e6b\u7d50\uff09": [[436, "index-4"]], "simple": [[436, "index-0"]], "standard": [[436, "index-3"]], "type": [[436, "index-47"]], "unbinding\uff08\u89e3\u9664\u7e6b\u7d50\uff09": [[436, "index-22"]], "writing": [[436, "index-3"]], "|=": [[436, "index-14"]], "\u65bc\u76ee\u6a19\u5217\u8868\u4e2d": [[436, "index-6"]], "\u65bc\u8ce6\u503c\u76ee\u6a19\u5217\u8868\u4e2d": [[436, "index-6"]], "windows": [[437, "index-4"]], "command line\uff08\u547d\u4ee4\u5217\uff09": [[437, "index-4"]], "input\uff08\u8f38\u5165\uff09": [[437, "index-5"]], "interactive mode\uff08\u4e92\u52d5\u6a21\u5f0f\uff09": [[437, "index-3"]], "interpreter\uff08\u76f4\u8b6f\u5668\uff09": [[437, "index-0"]], "program\uff08\u7a0b\u5f0f\uff09": [[437, "index-1"]], "standard input\uff08\u6a19\u6e96\u8f38\u5165\uff09": [[437, "index-4"]], "mangling\uff08\u4fee\u98fe\uff09": [[440, "index-1"]], "coding\uff08\u7a0b\u5f0f\u7de8\u5beb\uff09": [[441, "index-9"]], "ddocumentation strings\uff08\u8aaa\u660e\u5b57\u4e32\uff09": [[441, "index-2"], [441, "index-5"]], "docstrings\uff08\u8aaa\u660e\u5b57\u4e32\uff09": [[441, "index-2"], [441, "index-5"]], "strings\uff08\u5b57\u4e32\uff09, documentation\uff08\u8aaa\u660e\u6587\u4ef6\uff09": [[441, "index-2"], [441, "index-5"]], "style\uff08\u98a8\u683c\uff09": [[441, "index-9"]], "# (hash)": [[449, "index-0"]], "--check-hash-based-pycs": [[455, "cmdoption-check-hash-based-pycs"]], "--help-all": [[455, "cmdoption-help-all"]], "--help-env": [[455, "cmdoption-help-env"]], "--help-xoptions": [[455, "cmdoption-help-xoptions"]], "-?": [[455, "cmdoption-0"]], "-oo": [[455, "cmdoption-OO"]], "pythondumprefsfile=filename": [[455, "envvar-PYTHONDUMPREFSFILE-FILENAME"]], "\u547d\u4ee4\u5217\u9078\u9805": [[455, "cmdoption-0"], [455, "cmdoption-B"], [455, "cmdoption-E"], [455, "cmdoption-I"], [455, "cmdoption-J"], [455, "cmdoption-O"], [455, "cmdoption-OO"], [455, "cmdoption-P"], [455, "cmdoption-R"], [455, "cmdoption-S"], [455, "cmdoption-V"], [455, "cmdoption-W"], [455, "cmdoption-X"], [455, "cmdoption-b"], [455, "cmdoption-c"], [455, "cmdoption-check-hash-based-pycs"], [455, "cmdoption-d"], [455, "cmdoption-h"], [455, "cmdoption-help"], [455, "cmdoption-help-all"], [455, "cmdoption-help-env"], [455, "cmdoption-help-xoptions"], [455, "cmdoption-i"], [455, "cmdoption-m"], [455, "cmdoption-q"], [455, "cmdoption-s"], [455, "cmdoption-u"], [455, "cmdoption-v"], [455, "cmdoption-version"], [455, "cmdoption-x"], [456, "cmdoption-0"], [456, "cmdoption-1"], [456, "cmdoption-arg-CONFIG_SITE"], [456, "cmdoption-build"], [456, "cmdoption-disable-ipv6"], [456, "cmdoption-disable-test-modules"], [456, "cmdoption-enable-big-digits"], [456, "cmdoption-enable-bolt"], [456, "cmdoption-enable-framework"], [456, "cmdoption-enable-loadable-sqlite-extensions"], [456, "cmdoption-enable-optimizations"], [456, "cmdoption-enable-profiling"], [456, "cmdoption-enable-pystats"], [456, "cmdoption-enable-shared"], [456, "cmdoption-enable-universalsdk"], [456, "cmdoption-enable-wasm-dynamic-linking"], [456, "cmdoption-enable-wasm-pthreads"], [456, "cmdoption-exec-prefix"], [456, "cmdoption-host"], [456, "cmdoption-prefix"], [456, "cmdoption-with-address-sanitizer"], [456, "cmdoption-with-assertions"], [456, "cmdoption-with-build-python"], [456, "cmdoption-with-builtin-hashlib-hashes"], [456, "cmdoption-with-computed-gotos"], [456, "cmdoption-with-dbmliborder"], [456, "cmdoption-with-dtrace"], [456, "cmdoption-with-emscripten-target"], [456, "cmdoption-with-ensurepip"], [456, "cmdoption-with-framework-name"], [456, "cmdoption-with-hash-algorithm"], [456, "cmdoption-with-libc"], [456, "cmdoption-with-libm"], [456, "cmdoption-with-libs"], [456, "cmdoption-with-lto"], [456, "cmdoption-with-memory-sanitizer"], [456, "cmdoption-with-openssl"], [456, "cmdoption-with-openssl-rpath"], [456, "cmdoption-with-pkg-config"], [456, "cmdoption-with-platlibdir"], [456, "cmdoption-with-pydebug"], [456, "cmdoption-with-readline"], [456, "cmdoption-with-ssl-default-suites"], [456, "cmdoption-with-strict-overflow"], [456, "cmdoption-with-suffix"], [456, "cmdoption-with-system-expat"], [456, "cmdoption-with-system-libmpdec"], [456, "cmdoption-with-trace-refs"], [456, "cmdoption-with-tzpath"], [456, "cmdoption-with-undefined-behavior-sanitizer"], [456, "cmdoption-with-universal-archs"], [456, "cmdoption-with-valgrind"], [456, "cmdoption-with-wheel-pkg-dir"], [456, "cmdoption-without-c-locale-coercion"], [456, "cmdoption-without-decimal-contextvar"], [456, "cmdoption-without-doc-strings"], [456, "cmdoption-without-freelists"], [456, "cmdoption-without-pymalloc"], [456, "cmdoption-without-readline"], [456, "cmdoption-without-static-libpython"]], "--build": [[456, "cmdoption-build"]], "--disable-ipv6": [[456, "cmdoption-disable-ipv6"]], "--disable-test-modules": [[456, "cmdoption-disable-test-modules"]], "--enable-big-digits": [[456, "cmdoption-enable-big-digits"]], "--enable-bolt": [[456, "cmdoption-enable-bolt"]], "--enable-framework": [[456, "cmdoption-1"], [456, "cmdoption-enable-framework"]], "--enable-loadable-sqlite-extensions": [[456, "cmdoption-enable-loadable-sqlite-extensions"]], "--enable-optimizations": [[456, "cmdoption-enable-optimizations"]], "--enable-profiling": [[456, "cmdoption-enable-profiling"]], "--enable-pystats": [[456, "cmdoption-enable-pystats"]], "--enable-shared": [[456, "cmdoption-enable-shared"]], "--enable-universalsdk": [[456, "cmdoption-0"], [456, "cmdoption-enable-universalsdk"]], "--enable-wasm-dynamic-linking": [[456, "cmdoption-enable-wasm-dynamic-linking"]], "--enable-wasm-pthreads": [[456, "cmdoption-enable-wasm-pthreads"]], "--exec-prefix": [[456, "cmdoption-exec-prefix"]], "--host": [[456, "cmdoption-host"]], "--prefix": [[456, "cmdoption-prefix"]], "--with-address-sanitizer": [[456, "cmdoption-with-address-sanitizer"]], "--with-assertions": [[456, "cmdoption-with-assertions"]], "--with-build-python": [[456, "cmdoption-with-build-python"]], "--with-builtin-hashlib-hashes": [[456, "cmdoption-with-builtin-hashlib-hashes"]], "--with-computed-gotos": [[456, "cmdoption-with-computed-gotos"]], "--with-dbmliborder": [[456, "cmdoption-with-dbmliborder"]], "--with-dtrace": [[456, "cmdoption-with-dtrace"]], "--with-emscripten-target": [[456, "cmdoption-with-emscripten-target"]], "--with-ensurepip": [[456, "cmdoption-with-ensurepip"]], "--with-framework-name": [[456, "cmdoption-with-framework-name"]], "--with-hash-algorithm": [[456, "cmdoption-with-hash-algorithm"]], "--with-libc": [[456, "cmdoption-with-libc"]], "--with-libm": [[456, "cmdoption-with-libm"]], "--with-libs": [[456, "cmdoption-with-libs"]], "--with-lto": [[456, "cmdoption-with-lto"]], "--with-memory-sanitizer": [[456, "cmdoption-with-memory-sanitizer"]], "--with-openssl": [[456, "cmdoption-with-openssl"]], "--with-openssl-rpath": [[456, "cmdoption-with-openssl-rpath"]], "--with-pkg-config": [[456, "cmdoption-with-pkg-config"]], "--with-platlibdir": [[456, "cmdoption-with-platlibdir"]], "--with-pydebug": [[456, "cmdoption-with-pydebug"]], "--with-readline": [[456, "cmdoption-with-readline"]], "--with-ssl-default-suites": [[456, "cmdoption-with-ssl-default-suites"]], "--with-strict-overflow": [[456, "cmdoption-with-strict-overflow"]], "--with-suffix": [[456, "cmdoption-with-suffix"]], "--with-system-expat": [[456, "cmdoption-with-system-expat"]], "--with-system-libmpdec": [[456, "cmdoption-with-system-libmpdec"]], "--with-trace-refs": [[456, "cmdoption-with-trace-refs"]], "--with-tzpath": [[456, "cmdoption-with-tzpath"]], "--with-undefined-behavior-sanitizer": [[456, "cmdoption-with-undefined-behavior-sanitizer"]], "--with-universal-archs": [[456, "cmdoption-with-universal-archs"]], "--with-valgrind": [[456, "cmdoption-with-valgrind"]], "--with-wheel-pkg-dir": [[456, "cmdoption-with-wheel-pkg-dir"]], "--without-c-locale-coercion": [[456, "cmdoption-without-c-locale-coercion"]], "--without-decimal-contextvar": [[456, "cmdoption-without-decimal-contextvar"]], "--without-doc-strings": [[456, "cmdoption-without-doc-strings"]], "--without-freelists": [[456, "cmdoption-without-freelists"]], "--without-pymalloc": [[456, "cmdoption-without-pymalloc"]], "--without-readline": [[456, "cmdoption-without-readline"]], "--without-static-libpython": [[456, "cmdoption-without-static-libpython"]], "basecflags": [[456, "envvar-BASECFLAGS"]], "basecppflags": [[456, "envvar-BASECPPFLAGS"]], "bldshared": [[456, "envvar-BLDSHARED"]], "cc": [[456, "envvar-CC"], [465, "index-24"]], "ccshared": [[456, "envvar-CCSHARED"]], "cflags": [[456, "envvar-CFLAGS"], [456, "index-13"], [456, "index-14"], [456, "index-15"], [456, "index-16"], [456, "index-19"], [465, "index-25"]], "cflagsforshared": [[456, "envvar-CFLAGSFORSHARED"]], "cflags_aliasing": [[456, "envvar-CFLAGS_ALIASING"]], "cflags_nodist": [[456, "envvar-CFLAGS_NODIST"], [456, "index-12"], [456, "index-17"], [456, "index-22"]], "compileall_opts": [[456, "envvar-COMPILEALL_OPTS"]], "configure_cflags": [[456, "envvar-CONFIGURE_CFLAGS"]], "configure_cflags_nodist": [[456, "envvar-CONFIGURE_CFLAGS_NODIST"]], "configure_cppflags": [[456, "envvar-CONFIGURE_CPPFLAGS"]], "configure_ldflags": [[456, "envvar-CONFIGURE_LDFLAGS"]], "configure_ldflags_nodist": [[456, "envvar-CONFIGURE_LDFLAGS_NODIST"]], "config_site": [[456, "cmdoption-arg-CONFIG_SITE"]], "cppflags": [[456, "envvar-CPPFLAGS"], [456, "index-10"], [456, "index-27"], [456, "index-9"], [465, "index-27"]], "cxx": [[456, "envvar-CXX"]], "extra_cflags": [[456, "envvar-EXTRA_CFLAGS"]], "ldflags": [[456, "envvar-LDFLAGS"], [456, "index-11"], [456, "index-18"], [456, "index-20"], [456, "index-23"], [456, "index-24"], [456, "index-25"], [456, "index-28"], [465, "index-26"]], "ldflags_nodist": [[456, "envvar-LDFLAGS_NODIST"], [456, "index-21"], [456, "index-26"]], "ldshared": [[456, "envvar-LDSHARED"]], "libs": [[456, "envvar-LIBS"]], "linkcc": [[456, "envvar-LINKCC"]], "opt": [[456, "envvar-OPT"], [456, "index-8"]], "pep 11": [[456, "index-1"], [461, "index-0"], [461, "index-38"], [470, "index-19"], [473, "index-115"], [478, "index-48"], [480, "index-5"], [483, "index-252"], [483, "index-51"], [483, "index-52"]], "profile_task": [[456, "envvar-PROFILE_TASK"], [456, "index-4"]], "purify": [[456, "envvar-PURIFY"]], "py_builtin_module_cflags": [[456, "envvar-PY_BUILTIN_MODULE_CFLAGS"]], "py_cflags": [[456, "envvar-PY_CFLAGS"]], "py_cflags_nodist": [[456, "envvar-PY_CFLAGS_NODIST"]], "py_core_cflags": [[456, "envvar-PY_CORE_CFLAGS"]], "py_core_ldflags": [[456, "envvar-PY_CORE_LDFLAGS"]], "py_cppflags": [[456, "envvar-PY_CPPFLAGS"]], "py_ldflags": [[456, "envvar-PY_LDFLAGS"]], "py_ldflags_nodist": [[456, "envvar-PY_LDFLAGS_NODIST"]], "py_stdmodule_cflags": [[456, "envvar-PY_STDMODULE_CFLAGS"]], "%appdata%": [[461, "index-8"]], "pathext": [[461, "index-4"], [461, "index-6"], [477, "index-50"], [483, "index-136"]], "pep 397": [[461, "index-19"], [476, "index-55"], [478, "index-22"]], "pep 514": [[461, "index-21"], [473, "index-92"], [483, "index-274"], [483, "index-74"]], "pylauncher_allow_install": [[461, "index-29"], [483, "index-0"], [483, "index-75"]], "pylauncher_always_install": [[461, "index-30"]], "pylauncher_debug": [[461, "index-27"]], "pylauncher_dryrun": [[461, "index-28"], [461, "index-31"]], "pylauncher_no_search_path": [[461, "index-24"]], "py_python": [[461, "index-26"]], "pep 100": [[462, "index-3"]], "pep 201": [[462, "index-2"]], "pep 207": [[463, "index-4"], [463, "index-5"]], "pep 208": [[463, "index-13"]], "pep 217": [[463, "index-12"]], "pep 229": [[463, "index-8"]], "pep 230": [[463, "index-7"]], "pep 232": [[463, "index-10"]], "pep 241": [[463, "index-14"], [463, "index-15"], [463, "index-16"]], "pep 243": [[463, "index-17"]], "pep 234": [[464, "index-25"]], "pep 253": [[464, "index-0"], [464, "index-1"], [464, "index-3"], [464, "index-5"], [464, "index-6"]], "pep 261": [[464, "index-14"], [464, "index-26"]], "pep 264": [[464, "index-22"]], "rfc 2104": [[464, "index-17"]], "rfc 2487": [[464, "index-18"]], "pep 218": [[465, "index-0"], [466, "index-0"], [466, "index-13"]], "pep 277": [[465, "index-7"]], "pep 279": [[465, "index-10"]], "pep 285": [[465, "index-13"], [465, "index-14"]], "pep 293": [[465, "index-15"]], "pep 301": [[465, "index-16"]], "what's new\uff08\u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\uff09": [[465, "index-8"], [466, "index-7"], [467, "index-20"], [468, "index-13"]], "pep 322": [[466, "index-14"], [466, "index-6"]], "pep 327": [[466, "index-9"]], "pep 331": [[466, "index-11"]], "pep 288": [[467, "index-12"]], "pep 309": [[467, "index-3"]], "pep 314": [[467, "index-4"]], "pep 325": [[467, "index-13"]], "pep 333": [[467, "index-26"], [467, "index-27"]], "pep 339": [[467, "index-30"]], "pep 341": [[467, "index-8"]], "pep 347": [[467, "index-28"]], "pep 352": [[467, "index-15"], [468, "index-25"], [470, "index-25"]], "pep 356": [[467, "index-0"]], "pep 357": [[467, "index-18"]], "appdata": [[468, "index-5"]], "pep 3000": [[468, "index-1"]], "pep 3100": [[468, "index-2"]], "pep 3110": [[468, "index-11"], [470, "index-13"], [470, "index-27"]], "pep 3127": [[468, "index-17"]], "pep 361": [[468, "index-0"]], "pep 371": [[468, "index-8"]], "rfc 2033": [[468, "index-22"]], "rfc 3207": [[468, "index-23"]], "ldcxxshared": [[469, "index-11"]], "pep 3106": [[469, "index-6"]], "pep 3137": [[469, "index-7"]], "pep 372": [[469, "index-2"], [471, "index-0"]], "pep 389": [[469, "index-4"], [475, "index-2"]], "pep 391": [[469, "index-5"], [475, "index-3"]], "pep 466": [[469, "index-14"], [469, "index-15"], [469, "index-16"], [469, "index-17"]], "pep 476": [[469, "index-22"]], "pep 477": [[469, "index-18"]], "pep 493": [[469, "index-23"]], "pep 274": [[470, "index-10"]], "pep 3102": [[470, "index-7"]], "pep 3108": [[470, "index-17"], [470, "index-20"], [470, "index-22"]], "pep 3109": [[470, "index-11"], [470, "index-26"]], "pep 3111": [[470, "index-32"]], "pep 3113": [[470, "index-15"]], "pep 3114": [[470, "index-30"]], "pep 3123": [[470, "index-35"]], "pep 3138": [[470, "index-3"]], "pep 4": [[470, "index-18"]], "pep 384": [[472, "index-118"], [475, "index-1"], [483, "index-107"]], "pep 618": [[472, "index-106"], [472, "index-83"], [483, "index-150"]], "pep 624": [[472, "index-92"], [473, "index-120"], [473, "index-85"], [483, "index-96"]], "pep 632": [[472, "index-108"], [472, "index-90"], [474, "index-2"], [474, "index-33"], [483, "index-37"]], "pep 635": [[472, "index-81"], [472, "index-96"]], "pep 652": [[472, "index-115"], [483, "index-102"]], "pep 11#tier-3": [[473, "index-116"]], "pep 484#annotating-instance-and-class-methods": [[473, "index-98"]], "pep 624#alternative-apis": [[473, "index-121"]], "pep 654": [[473, "index-112"], [473, "index-89"], [473, "index-90"], [483, "index-41"], [483, "index-79"], [483, "index-82"]], "pep 657": [[473, "index-109"], [473, "index-87"], [483, "index-59"], [483, "index-87"]], "pep 659": [[473, "index-110"], [473, "index-111"]], "pep 670": [[473, "index-117"], [473, "index-86"]], "pep 678": [[473, "index-91"], [474, "index-21"], [483, "index-23"], [483, "index-56"], [483, "index-9"]], "pep 680": [[473, "index-106"], [473, "index-82"], [483, "index-70"]], "pep 669": [[474, "index-11"], [483, "index-10"]], "pep 683": [[474, "index-43"], [483, "index-7"]], "pep 684": [[474, "index-44"], [474, "index-9"]], "pep 693": [[474, "index-56"]], "pep 697": [[474, "index-40"], [474, "index-42"], [483, "index-22"]], "pep 699": [[474, "index-45"], [474, "index-46"], [483, "index-30"]], "pep 701": [[474, "index-25"], [474, "index-27"], [474, "index-37"], [474, "index-38"], [474, "index-39"], [474, "index-58"], [474, "index-6"]], "pep 709": [[474, "index-13"], [474, "index-28"], [474, "index-59"], [483, "index-12"]], "pep 385": [[475, "index-14"]], "pep 392": [[475, "index-0"]], "rfc 2818": [[475, "index-12"]], "pep 3144": [[476, "index-59"]], "pep 398": [[476, "index-51"]], "pep 409": [[476, "index-13"]], "pep 418": [[476, "index-60"]], "rfc 1870": [[476, "index-27"]], "yield from\uff08\u5728\u6709\u4ec0\u9ebc\u65b0\u529f\u80fd\u4e2d\uff09": [[476, "index-11"]], "pep 247": [[477, "index-37"]], "pep 3156": [[477, "index-25"], [477, "index-26"], [477, "index-31"], [477, "index-4"], [477, "index-8"]], "pep 424": [[477, "index-24"], [477, "index-38"]], "pep 429": [[477, "index-0"]], "pep 435": [[477, "index-28"], [477, "index-29"], [477, "index-6"]], "pep 436": [[477, "index-18"], [477, "index-48"], [477, "index-49"]], "pep 445": [[477, "index-17"], [477, "index-43"], [477, "index-44"], [477, "index-51"]], "pep 446": [[477, "index-14"], [477, "index-2"], [477, "index-21"], [477, "index-22"]], "pep 450": [[477, "index-32"], [477, "index-33"], [477, "index-9"]], "pep 454": [[477, "index-10"], [477, "index-34"], [477, "index-35"]], "pep 441": [[478, "index-29"], [478, "index-30"]], "pep 465": [[478, "index-3"], [478, "index-4"], [478, "index-46"], [483, "index-304"]], "pep 471": [[478, "index-13"], [478, "index-14"], [483, "index-300"]], "pep 478": [[478, "index-0"]], "pep 486": [[478, "index-21"], [478, "index-23"], [483, "index-301"]], "rfc 6152": [[478, "index-37"]], "pep 487": [[479, "index-13"], [479, "index-14"], [479, "index-15"], [479, "index-37"], [483, "index-251"], [483, "index-261"], [483, "index-270"]], "pep 494": [[479, "index-0"]], "pep 511": [[479, "index-36"]], "pep 520": [[479, "index-23"]], "pep 628": [[479, "index-29"], [479, "index-30"], [483, "index-272"]], "pep 545": [[480, "index-24"], [480, "index-42"]], "pep 553": [[480, "index-13"], [483, "index-245"]], "pep 564": [[480, "index-17"], [480, "index-18"], [480, "index-32"], [483, "index-243"]], "pep 573": [[482, "index-23"], [482, "index-6"], [483, "index-158"], [483, "index-163"]], "pep 596": [[482, "index-0"]], "pep 616": [[482, "index-12"], [482, "index-4"], [483, "index-170"]], "enablecontrolflowguard": [[483, "index-93"]], "pep 676": [[483, "index-72"]], "pep 687": [[483, "index-15"], [483, "index-16"], [483, "index-17"], [483, "index-18"], [483, "index-19"], [483, "index-20"], [483, "index-24"], [483, "index-26"], [483, "index-27"]], "pep 689": [[483, "index-28"]], "pip_user": [[483, "index-207"]], "pythondumprefsfile": [[483, "index-86"]], "pythonregrtest_unicode_guard": [[483, "index-63"]], "rfc 3491": [[483, "index-35"]], "rfc 5894": [[483, "index-34"]], "rfc 7538": [[483, "index-84"]], "rfc 9239": [[483, "index-43"]]}})